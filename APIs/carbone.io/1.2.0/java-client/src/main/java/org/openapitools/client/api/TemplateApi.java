/*
 * Carbone API
 * Carbone Cloud/On-premise Open API reference.  For requesting: - Carbone Cloud API: find your API key on your [Carbone account](https://account.carbone.io). Home page > Copy the `production` or `testing` API key. - Carbone On-premise: Update the `Server URL` on the Open API specification.  Useful links: - [API Flow](https://carbone.io/api-reference.html#quickstart-api-flow) - [Integration / SDKs](https://carbone.io/api-reference.html#api-integration) - [Generated document storage](https://carbone.io/api-reference.html#report-storage) - [Request timeout](https://carbone.io/api-reference.html#api-timeout)
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@carbone.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.TemplatePost200Response;
import org.openapitools.client.model.TemplatePostRequest;
import org.openapitools.client.model.TemplatePostRequest1;
import org.openapitools.client.model.TemplateTemplateIdDelete200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TemplateApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TemplateApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TemplateApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for templatePost
     * @param carboneVersion Carbone version (required)
     * @param templatePostRequest Template File to upload, supported formats: DOCX, XLSX, PPTX, ODT, ODS, ODP, ODG, XHTML, IDML, HTML or an XML file (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On success, the &#x60;template ID&#x60; is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The body request type is not correct, it must be a FormData or a JSON. The &#x60;Content-type&#x60; header must be either &#x60;application/json&#x60; or &#x60;multipart/form-data&#x60; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, please provide a correct API key on the &#x60;Authorization &#x60; header. The API key is available on your Carbone account: https://account.carbone.io </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Template format not supported, it must be an XML-based document: DOCX, XLSX, PPTX, ODT, ODS, ODP, ODG, XHTML, IDML, HTML or an XML file </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The &#x60;template&#x60; field is empty on the body request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templatePostCall(Integer carboneVersion, TemplatePostRequest templatePostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = templatePostRequest;

        // create path and map variables
        String localVarPath = "/template";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (carboneVersion != null) {
            localVarHeaderParams.put("carbone-version", localVarApiClient.parameterToString(carboneVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call templatePostValidateBeforeCall(Integer carboneVersion, TemplatePostRequest templatePostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'carboneVersion' is set
        if (carboneVersion == null) {
            throw new ApiException("Missing the required parameter 'carboneVersion' when calling templatePost(Async)");
        }

        // verify the required parameter 'templatePostRequest' is set
        if (templatePostRequest == null) {
            throw new ApiException("Missing the required parameter 'templatePostRequest' when calling templatePost(Async)");
        }

        return templatePostCall(carboneVersion, templatePostRequest, _callback);

    }

    /**
     * Upload a template.
     * Documentation: https://carbone.io/api-reference.html#add-templates
     * @param carboneVersion Carbone version (required)
     * @param templatePostRequest Template File to upload, supported formats: DOCX, XLSX, PPTX, ODT, ODS, ODP, ODG, XHTML, IDML, HTML or an XML file (required)
     * @return TemplatePost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On success, the &#x60;template ID&#x60; is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The body request type is not correct, it must be a FormData or a JSON. The &#x60;Content-type&#x60; header must be either &#x60;application/json&#x60; or &#x60;multipart/form-data&#x60; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, please provide a correct API key on the &#x60;Authorization &#x60; header. The API key is available on your Carbone account: https://account.carbone.io </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Template format not supported, it must be an XML-based document: DOCX, XLSX, PPTX, ODT, ODS, ODP, ODG, XHTML, IDML, HTML or an XML file </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The &#x60;template&#x60; field is empty on the body request </td><td>  -  </td></tr>
     </table>
     */
    public TemplatePost200Response templatePost(Integer carboneVersion, TemplatePostRequest templatePostRequest) throws ApiException {
        ApiResponse<TemplatePost200Response> localVarResp = templatePostWithHttpInfo(carboneVersion, templatePostRequest);
        return localVarResp.getData();
    }

    /**
     * Upload a template.
     * Documentation: https://carbone.io/api-reference.html#add-templates
     * @param carboneVersion Carbone version (required)
     * @param templatePostRequest Template File to upload, supported formats: DOCX, XLSX, PPTX, ODT, ODS, ODP, ODG, XHTML, IDML, HTML or an XML file (required)
     * @return ApiResponse&lt;TemplatePost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On success, the &#x60;template ID&#x60; is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The body request type is not correct, it must be a FormData or a JSON. The &#x60;Content-type&#x60; header must be either &#x60;application/json&#x60; or &#x60;multipart/form-data&#x60; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, please provide a correct API key on the &#x60;Authorization &#x60; header. The API key is available on your Carbone account: https://account.carbone.io </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Template format not supported, it must be an XML-based document: DOCX, XLSX, PPTX, ODT, ODS, ODP, ODG, XHTML, IDML, HTML or an XML file </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The &#x60;template&#x60; field is empty on the body request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TemplatePost200Response> templatePostWithHttpInfo(Integer carboneVersion, TemplatePostRequest templatePostRequest) throws ApiException {
        okhttp3.Call localVarCall = templatePostValidateBeforeCall(carboneVersion, templatePostRequest, null);
        Type localVarReturnType = new TypeToken<TemplatePost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload a template. (asynchronously)
     * Documentation: https://carbone.io/api-reference.html#add-templates
     * @param carboneVersion Carbone version (required)
     * @param templatePostRequest Template File to upload, supported formats: DOCX, XLSX, PPTX, ODT, ODS, ODP, ODG, XHTML, IDML, HTML or an XML file (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On success, the &#x60;template ID&#x60; is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The body request type is not correct, it must be a FormData or a JSON. The &#x60;Content-type&#x60; header must be either &#x60;application/json&#x60; or &#x60;multipart/form-data&#x60; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, please provide a correct API key on the &#x60;Authorization &#x60; header. The API key is available on your Carbone account: https://account.carbone.io </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Template format not supported, it must be an XML-based document: DOCX, XLSX, PPTX, ODT, ODS, ODP, ODG, XHTML, IDML, HTML or an XML file </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The &#x60;template&#x60; field is empty on the body request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templatePostAsync(Integer carboneVersion, TemplatePostRequest templatePostRequest, final ApiCallback<TemplatePost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = templatePostValidateBeforeCall(carboneVersion, templatePostRequest, _callback);
        Type localVarReturnType = new TypeToken<TemplatePost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for templateTemplateIdDelete
     * @param templateId Unique identifier of the template (required)
     * @param carboneVersion Carbone version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The template is deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The &#x60;template ID&#x60; is not valid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, please provide a correct API key on the &#x60;Authorization &#x60; header. The API key is available on your Carbone account: https://account.carbone.io </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The template is not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templateTemplateIdDeleteCall(String templateId, Integer carboneVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/template/{templateId}"
            .replace("{" + "templateId" + "}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (carboneVersion != null) {
            localVarHeaderParams.put("carbone-version", localVarApiClient.parameterToString(carboneVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call templateTemplateIdDeleteValidateBeforeCall(String templateId, Integer carboneVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling templateTemplateIdDelete(Async)");
        }

        // verify the required parameter 'carboneVersion' is set
        if (carboneVersion == null) {
            throw new ApiException("Missing the required parameter 'carboneVersion' when calling templateTemplateIdDelete(Async)");
        }

        return templateTemplateIdDeleteCall(templateId, carboneVersion, _callback);

    }

    /**
     * Delete a template from a template ID
     * Documentation: https://carbone.io/api-reference.html#delete-templates
     * @param templateId Unique identifier of the template (required)
     * @param carboneVersion Carbone version (required)
     * @return TemplateTemplateIdDelete200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The template is deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The &#x60;template ID&#x60; is not valid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, please provide a correct API key on the &#x60;Authorization &#x60; header. The API key is available on your Carbone account: https://account.carbone.io </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The template is not found </td><td>  -  </td></tr>
     </table>
     */
    public TemplateTemplateIdDelete200Response templateTemplateIdDelete(String templateId, Integer carboneVersion) throws ApiException {
        ApiResponse<TemplateTemplateIdDelete200Response> localVarResp = templateTemplateIdDeleteWithHttpInfo(templateId, carboneVersion);
        return localVarResp.getData();
    }

    /**
     * Delete a template from a template ID
     * Documentation: https://carbone.io/api-reference.html#delete-templates
     * @param templateId Unique identifier of the template (required)
     * @param carboneVersion Carbone version (required)
     * @return ApiResponse&lt;TemplateTemplateIdDelete200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The template is deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The &#x60;template ID&#x60; is not valid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, please provide a correct API key on the &#x60;Authorization &#x60; header. The API key is available on your Carbone account: https://account.carbone.io </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The template is not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TemplateTemplateIdDelete200Response> templateTemplateIdDeleteWithHttpInfo(String templateId, Integer carboneVersion) throws ApiException {
        okhttp3.Call localVarCall = templateTemplateIdDeleteValidateBeforeCall(templateId, carboneVersion, null);
        Type localVarReturnType = new TypeToken<TemplateTemplateIdDelete200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a template from a template ID (asynchronously)
     * Documentation: https://carbone.io/api-reference.html#delete-templates
     * @param templateId Unique identifier of the template (required)
     * @param carboneVersion Carbone version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The template is deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The &#x60;template ID&#x60; is not valid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, please provide a correct API key on the &#x60;Authorization &#x60; header. The API key is available on your Carbone account: https://account.carbone.io </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The template is not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templateTemplateIdDeleteAsync(String templateId, Integer carboneVersion, final ApiCallback<TemplateTemplateIdDelete200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = templateTemplateIdDeleteValidateBeforeCall(templateId, carboneVersion, _callback);
        Type localVarReturnType = new TypeToken<TemplateTemplateIdDelete200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for templateTemplateIdGet
     * @param templateId Unique identifier of the template (required)
     * @param carboneVersion Carbone version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> stream of the file content </td><td>  * content-disposition - Template name, for instance: &#39;filename&#x3D;\&quot;{templateid}.docx\&quot;&#39;. <br>  * content-type - File type <br>  </td></tr>
        <tr><td> 400 </td><td> The &#x60;template ID&#x60; is not valid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, please provide a correct API key on the &#x60;Authorization &#x60; header. The API key is available on your Carbone account: https://account.carbone.io </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The template is not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templateTemplateIdGetCall(String templateId, Integer carboneVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/template/{templateId}"
            .replace("{" + "templateId" + "}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (carboneVersion != null) {
            localVarHeaderParams.put("carbone-version", localVarApiClient.parameterToString(carboneVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call templateTemplateIdGetValidateBeforeCall(String templateId, Integer carboneVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling templateTemplateIdGet(Async)");
        }

        // verify the required parameter 'carboneVersion' is set
        if (carboneVersion == null) {
            throw new ApiException("Missing the required parameter 'carboneVersion' when calling templateTemplateIdGet(Async)");
        }

        return templateTemplateIdGetCall(templateId, carboneVersion, _callback);

    }

    /**
     * Download a template from a template ID
     * Documentation: https://carbone.io/api-reference.html#get-templates
     * @param templateId Unique identifier of the template (required)
     * @param carboneVersion Carbone version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> stream of the file content </td><td>  * content-disposition - Template name, for instance: &#39;filename&#x3D;\&quot;{templateid}.docx\&quot;&#39;. <br>  * content-type - File type <br>  </td></tr>
        <tr><td> 400 </td><td> The &#x60;template ID&#x60; is not valid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, please provide a correct API key on the &#x60;Authorization &#x60; header. The API key is available on your Carbone account: https://account.carbone.io </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The template is not found </td><td>  -  </td></tr>
     </table>
     */
    public void templateTemplateIdGet(String templateId, Integer carboneVersion) throws ApiException {
        templateTemplateIdGetWithHttpInfo(templateId, carboneVersion);
    }

    /**
     * Download a template from a template ID
     * Documentation: https://carbone.io/api-reference.html#get-templates
     * @param templateId Unique identifier of the template (required)
     * @param carboneVersion Carbone version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> stream of the file content </td><td>  * content-disposition - Template name, for instance: &#39;filename&#x3D;\&quot;{templateid}.docx\&quot;&#39;. <br>  * content-type - File type <br>  </td></tr>
        <tr><td> 400 </td><td> The &#x60;template ID&#x60; is not valid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, please provide a correct API key on the &#x60;Authorization &#x60; header. The API key is available on your Carbone account: https://account.carbone.io </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The template is not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> templateTemplateIdGetWithHttpInfo(String templateId, Integer carboneVersion) throws ApiException {
        okhttp3.Call localVarCall = templateTemplateIdGetValidateBeforeCall(templateId, carboneVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Download a template from a template ID (asynchronously)
     * Documentation: https://carbone.io/api-reference.html#get-templates
     * @param templateId Unique identifier of the template (required)
     * @param carboneVersion Carbone version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> stream of the file content </td><td>  * content-disposition - Template name, for instance: &#39;filename&#x3D;\&quot;{templateid}.docx\&quot;&#39;. <br>  * content-type - File type <br>  </td></tr>
        <tr><td> 400 </td><td> The &#x60;template ID&#x60; is not valid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, please provide a correct API key on the &#x60;Authorization &#x60; header. The API key is available on your Carbone account: https://account.carbone.io </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The template is not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templateTemplateIdGetAsync(String templateId, Integer carboneVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = templateTemplateIdGetValidateBeforeCall(templateId, carboneVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
