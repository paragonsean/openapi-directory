/*
 * Carbone API
 * Carbone Cloud/On-premise Open API reference.  For requesting: - Carbone Cloud API: find your API key on your [Carbone account](https://account.carbone.io). Home page > Copy the `production` or `testing` API key. - Carbone On-premise: Update the `Server URL` on the Open API specification.  Useful links: - [API Flow](https://carbone.io/api-reference.html#quickstart-api-flow) - [Integration / SDKs](https://carbone.io/api-reference.html#api-integration) - [Generated document storage](https://carbone.io/api-reference.html#report-storage) - [Request timeout](https://carbone.io/api-reference.html#api-timeout)
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@carbone.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RenderTemplateIdPostRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:40.293106-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RenderTemplateIdPostRequest {
  public static final String SERIALIZED_NAME_COMPLEMENT = "complement";
  @SerializedName(SERIALIZED_NAME_COMPLEMENT)
  private Object complement;

  public static final String SERIALIZED_NAME_CONVERT_TO = "convertTo";
  @SerializedName(SERIALIZED_NAME_CONVERT_TO)
  private String convertTo;

  public static final String SERIALIZED_NAME_CURRENCY_RATES = "currencyRates";
  @SerializedName(SERIALIZED_NAME_CURRENCY_RATES)
  private Object currencyRates;

  public static final String SERIALIZED_NAME_CURRENCY_SOURCE = "currencySource";
  @SerializedName(SERIALIZED_NAME_CURRENCY_SOURCE)
  private String currencySource;

  public static final String SERIALIZED_NAME_CURRENCY_TARGET = "currencyTarget";
  @SerializedName(SERIALIZED_NAME_CURRENCY_TARGET)
  private String currencyTarget;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private Object data;

  public static final String SERIALIZED_NAME_ENUM = "enum";
  @SerializedName(SERIALIZED_NAME_ENUM)
  private Object _enum;

  public static final String SERIALIZED_NAME_HARD_REFRESH = "hardRefresh";
  @SerializedName(SERIALIZED_NAME_HARD_REFRESH)
  private Boolean hardRefresh;

  public static final String SERIALIZED_NAME_LANG = "lang";
  @SerializedName(SERIALIZED_NAME_LANG)
  private String lang;

  public static final String SERIALIZED_NAME_REPORT_NAME = "reportName";
  @SerializedName(SERIALIZED_NAME_REPORT_NAME)
  private String reportName;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private String timezone;

  public static final String SERIALIZED_NAME_TRANSLATIONS = "translations";
  @SerializedName(SERIALIZED_NAME_TRANSLATIONS)
  private Object translations;

  public static final String SERIALIZED_NAME_VARIABLE_STR = "variableStr";
  @SerializedName(SERIALIZED_NAME_VARIABLE_STR)
  private String variableStr;

  public RenderTemplateIdPostRequest() {
  }

  public RenderTemplateIdPostRequest complement(Object complement) {
    this.complement = complement;
    return this;
  }

  /**
   * Optional - Object|Array, extra data accessible in the template with {c.} instead of {d.}
   * @return complement
   */
  @javax.annotation.Nullable
  public Object getComplement() {
    return complement;
  }

  public void setComplement(Object complement) {
    this.complement = complement;
  }


  public RenderTemplateIdPostRequest convertTo(String convertTo) {
    this.convertTo = convertTo;
    return this;
  }

  /**
   * Optional - Convert the document into another format. Accepted values: ods xlsx xls csv pdf txt odp ppt pptx jpg png odt doc docx txt jpg png epub html xml idml. List of supported formats: https://carbone.io/documentation.html#supported-files-and-features-list
   * @return convertTo
   */
  @javax.annotation.Nullable
  public String getConvertTo() {
    return convertTo;
  }

  public void setConvertTo(String convertTo) {
    this.convertTo = convertTo;
  }


  public RenderTemplateIdPostRequest currencyRates(Object currencyRates) {
    this.currencyRates = currencyRates;
    return this;
  }

  /**
   * Optional - Currency exchange rates for conversions from &#x60;currencySource&#x60; to &#x60;currencyTarget&#x60;. Learn more: https://carbone.io/documentation.html#formatc-precisionorformat-
   * @return currencyRates
   */
  @javax.annotation.Nullable
  public Object getCurrencyRates() {
    return currencyRates;
  }

  public void setCurrencyRates(Object currencyRates) {
    this.currencyRates = currencyRates;
  }


  public RenderTemplateIdPostRequest currencySource(String currencySource) {
    this.currencySource = currencySource;
    return this;
  }

  /**
   * Optional - Currency source coming from your JSON data. The option is used by &#x60;formatC&#x60; to convert the currency based on the &#x60;currencyTarget&#x60; and &#x60;currencyRates&#x60;. Learn more: https://carbone.io/documentation.html#formatc-precisionorformat-
   * @return currencySource
   */
  @javax.annotation.Nullable
  public String getCurrencySource() {
    return currencySource;
  }

  public void setCurrencySource(String currencySource) {
    this.currencySource = currencySource;
  }


  public RenderTemplateIdPostRequest currencyTarget(String currencyTarget) {
    this.currencyTarget = currencyTarget;
    return this;
  }

  /**
   * Optional - Target currency when the document is generated. The option is used by &#x60;formatC&#x60; to convert the currency based on the &#x60;currencySource&#x60; and &#x60;currencyRates&#x60;. Learn more: https://carbone.io/documentation.html#formatc-precisionorformat-
   * @return currencyTarget
   */
  @javax.annotation.Nullable
  public String getCurrencyTarget() {
    return currencyTarget;
  }

  public void setCurrencyTarget(String currencyTarget) {
    this.currencyTarget = currencyTarget;
  }


  public RenderTemplateIdPostRequest data(Object data) {
    this.data = data;
    return this;
  }

  /**
   * Required - Ô∏èJSON data-set merged into the template to generate a document
   * @return data
   */
  @javax.annotation.Nonnull
  public Object getData() {
    return data;
  }

  public void setData(Object data) {
    this.data = data;
  }


  public RenderTemplateIdPostRequest _enum(Object _enum) {
    this._enum = _enum;
    return this;
  }

  /**
   * Optional - List of enumerations, use it in reports with &#x60;convEnum&#x60; formatters, documentation: https://carbone.io/documentation.html#convenum-type-
   * @return _enum
   */
  @javax.annotation.Nullable
  public Object getEnum() {
    return _enum;
  }

  public void setEnum(Object _enum) {
    this._enum = _enum;
  }


  public RenderTemplateIdPostRequest hardRefresh(Boolean hardRefresh) {
    this.hardRefresh = hardRefresh;
    return this;
  }

  /**
   * Optional - If true, the report content is refreshed at the end of the rendering process. To use this option, &#x60;convertTo&#x60; has to be defined. It is mostly used to refresh a table of content.
   * @return hardRefresh
   */
  @javax.annotation.Nullable
  public Boolean getHardRefresh() {
    return hardRefresh;
  }

  public void setHardRefresh(Boolean hardRefresh) {
    this.hardRefresh = hardRefresh;
  }


  public RenderTemplateIdPostRequest lang(String lang) {
    this.lang = lang;
    return this;
  }

  /**
   * Optional - Locale of the generated doocument, it will used for translation &#x60;{t()}&#x60;, formatting numbers with &#x60;:formatN&#x60;, and currencies &#x60;:formatC&#x60;. List of supported locales: https://github.com/carboneio/carbone/blob/master/formatters/_locale.js
   * @return lang
   */
  @javax.annotation.Nullable
  public String getLang() {
    return lang;
  }

  public void setLang(String lang) {
    this.lang = lang;
  }


  public RenderTemplateIdPostRequest reportName(String reportName) {
    this.reportName = reportName;
    return this;
  }

  /**
   * Optional - Static or dynamic file name returned on the &#x60;content-disposition&#x60; header when the generated report is fetched with &#x60;GET /report/:renderI&#x60;. Multiple Carbone tags are accepted, such as &#x60;{d.type}-{d.date}.pdf&#x60;
   * @return reportName
   */
  @javax.annotation.Nullable
  public String getReportName() {
    return reportName;
  }

  public void setReportName(String reportName) {
    this.reportName = reportName;
  }


  public RenderTemplateIdPostRequest timezone(String timezone) {
    this.timezone = timezone;
    return this;
  }

  /**
   * Optional - Convert document dates to a timezone. The default timezone is &#x60;Europe/Paris&#x60;. The date must be chained with the &#x60;:formatD&#x60; formatter, for instance &#x60;{d.date:formatD(YYYY-MM-DD HH:MM)}&#x60;. List of accepted timezones (Column TZ identifier): https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
   * @return timezone
   */
  @javax.annotation.Nullable
  public String getTimezone() {
    return timezone;
  }

  public void setTimezone(String timezone) {
    this.timezone = timezone;
  }


  public RenderTemplateIdPostRequest translations(Object translations) {
    this.translations = translations;
    return this;
  }

  /**
   * Optional - When the report is generated, all text between &#x60;{t( )}&#x60; is replaced with the corresponding translation. The &#x60;lang&#x60; option is required to select the correct translation. Learn more: https://carbone.io/documentation.html#translations
   * @return translations
   */
  @javax.annotation.Nullable
  public Object getTranslations() {
    return translations;
  }

  public void setTranslations(Object translations) {
    this.translations = translations;
  }


  public RenderTemplateIdPostRequest variableStr(String variableStr) {
    this.variableStr = variableStr;
    return this;
  }

  /**
   * Optional - Predefine alias, related documenation: https://carbone.io/documentation.html#alias
   * @return variableStr
   */
  @javax.annotation.Nullable
  public String getVariableStr() {
    return variableStr;
  }

  public void setVariableStr(String variableStr) {
    this.variableStr = variableStr;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RenderTemplateIdPostRequest renderTemplateIdPostRequest = (RenderTemplateIdPostRequest) o;
    return Objects.equals(this.complement, renderTemplateIdPostRequest.complement) &&
        Objects.equals(this.convertTo, renderTemplateIdPostRequest.convertTo) &&
        Objects.equals(this.currencyRates, renderTemplateIdPostRequest.currencyRates) &&
        Objects.equals(this.currencySource, renderTemplateIdPostRequest.currencySource) &&
        Objects.equals(this.currencyTarget, renderTemplateIdPostRequest.currencyTarget) &&
        Objects.equals(this.data, renderTemplateIdPostRequest.data) &&
        Objects.equals(this._enum, renderTemplateIdPostRequest._enum) &&
        Objects.equals(this.hardRefresh, renderTemplateIdPostRequest.hardRefresh) &&
        Objects.equals(this.lang, renderTemplateIdPostRequest.lang) &&
        Objects.equals(this.reportName, renderTemplateIdPostRequest.reportName) &&
        Objects.equals(this.timezone, renderTemplateIdPostRequest.timezone) &&
        Objects.equals(this.translations, renderTemplateIdPostRequest.translations) &&
        Objects.equals(this.variableStr, renderTemplateIdPostRequest.variableStr);
  }

  @Override
  public int hashCode() {
    return Objects.hash(complement, convertTo, currencyRates, currencySource, currencyTarget, data, _enum, hardRefresh, lang, reportName, timezone, translations, variableStr);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RenderTemplateIdPostRequest {\n");
    sb.append("    complement: ").append(toIndentedString(complement)).append("\n");
    sb.append("    convertTo: ").append(toIndentedString(convertTo)).append("\n");
    sb.append("    currencyRates: ").append(toIndentedString(currencyRates)).append("\n");
    sb.append("    currencySource: ").append(toIndentedString(currencySource)).append("\n");
    sb.append("    currencyTarget: ").append(toIndentedString(currencyTarget)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    _enum: ").append(toIndentedString(_enum)).append("\n");
    sb.append("    hardRefresh: ").append(toIndentedString(hardRefresh)).append("\n");
    sb.append("    lang: ").append(toIndentedString(lang)).append("\n");
    sb.append("    reportName: ").append(toIndentedString(reportName)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    translations: ").append(toIndentedString(translations)).append("\n");
    sb.append("    variableStr: ").append(toIndentedString(variableStr)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("complement");
    openapiFields.add("convertTo");
    openapiFields.add("currencyRates");
    openapiFields.add("currencySource");
    openapiFields.add("currencyTarget");
    openapiFields.add("data");
    openapiFields.add("enum");
    openapiFields.add("hardRefresh");
    openapiFields.add("lang");
    openapiFields.add("reportName");
    openapiFields.add("timezone");
    openapiFields.add("translations");
    openapiFields.add("variableStr");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("data");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RenderTemplateIdPostRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RenderTemplateIdPostRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RenderTemplateIdPostRequest is not found in the empty JSON string", RenderTemplateIdPostRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RenderTemplateIdPostRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RenderTemplateIdPostRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RenderTemplateIdPostRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("convertTo") != null && !jsonObj.get("convertTo").isJsonNull()) && !jsonObj.get("convertTo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `convertTo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("convertTo").toString()));
      }
      if ((jsonObj.get("currencySource") != null && !jsonObj.get("currencySource").isJsonNull()) && !jsonObj.get("currencySource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencySource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencySource").toString()));
      }
      if ((jsonObj.get("currencyTarget") != null && !jsonObj.get("currencyTarget").isJsonNull()) && !jsonObj.get("currencyTarget").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyTarget` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyTarget").toString()));
      }
      if ((jsonObj.get("lang") != null && !jsonObj.get("lang").isJsonNull()) && !jsonObj.get("lang").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lang` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lang").toString()));
      }
      if ((jsonObj.get("reportName") != null && !jsonObj.get("reportName").isJsonNull()) && !jsonObj.get("reportName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportName").toString()));
      }
      if ((jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonNull()) && !jsonObj.get("timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
      if ((jsonObj.get("variableStr") != null && !jsonObj.get("variableStr").isJsonNull()) && !jsonObj.get("variableStr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `variableStr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("variableStr").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RenderTemplateIdPostRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RenderTemplateIdPostRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RenderTemplateIdPostRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RenderTemplateIdPostRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<RenderTemplateIdPostRequest>() {
           @Override
           public void write(JsonWriter out, RenderTemplateIdPostRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RenderTemplateIdPostRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RenderTemplateIdPostRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RenderTemplateIdPostRequest
   * @throws IOException if the JSON string is invalid with respect to RenderTemplateIdPostRequest
   */
  public static RenderTemplateIdPostRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RenderTemplateIdPostRequest.class);
  }

  /**
   * Convert an instance of RenderTemplateIdPostRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

