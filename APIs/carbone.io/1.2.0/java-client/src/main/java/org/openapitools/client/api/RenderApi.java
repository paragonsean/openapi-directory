/*
 * Carbone API
 * Carbone Cloud/On-premise Open API reference.  For requesting: - Carbone Cloud API: find your API key on your [Carbone account](https://account.carbone.io). Home page > Copy the `production` or `testing` API key. - Carbone On-premise: Update the `Server URL` on the Open API specification.  Useful links: - [API Flow](https://carbone.io/api-reference.html#quickstart-api-flow) - [Integration / SDKs](https://carbone.io/api-reference.html#api-integration) - [Generated document storage](https://carbone.io/api-reference.html#report-storage) - [Request timeout](https://carbone.io/api-reference.html#api-timeout)
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@carbone.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.RenderTemplateIdPost200Response;
import org.openapitools.client.model.RenderTemplateIdPostRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RenderApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RenderApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RenderApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for renderRenderIdGet
     * @param renderId Unique identifier of the report (required)
     * @param carboneVersion Carbone version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Stream of the generated document </td><td>  * content-disposition - Template name, for instance: &#39;filename&#x3D;\&quot;{templateid}.docx\&quot;&#39;. <br>  * content-type - File type <br>  </td></tr>
        <tr><td> 400 </td><td> The &#x60;render ID&#x60; is not valid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, please provide a correct API key on the &#x60;Authorization &#x60; header. The API key is available on your Carbone account: https://account.carbone.io </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The file does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call renderRenderIdGetCall(String renderId, Integer carboneVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/render/{renderId}"
            .replace("{" + "renderId" + "}", localVarApiClient.escapeString(renderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (carboneVersion != null) {
            localVarHeaderParams.put("carbone-version", localVarApiClient.parameterToString(carboneVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call renderRenderIdGetValidateBeforeCall(String renderId, Integer carboneVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'renderId' is set
        if (renderId == null) {
            throw new ApiException("Missing the required parameter 'renderId' when calling renderRenderIdGet(Async)");
        }

        // verify the required parameter 'carboneVersion' is set
        if (carboneVersion == null) {
            throw new ApiException("Missing the required parameter 'carboneVersion' when calling renderRenderIdGet(Async)");
        }

        return renderRenderIdGetCall(renderId, carboneVersion, _callback);

    }

    /**
     * Retreive a generated document from a render ID.
     * Documentation: https://carbone.io/api-reference.html#download-rendered-reports
     * @param renderId Unique identifier of the report (required)
     * @param carboneVersion Carbone version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Stream of the generated document </td><td>  * content-disposition - Template name, for instance: &#39;filename&#x3D;\&quot;{templateid}.docx\&quot;&#39;. <br>  * content-type - File type <br>  </td></tr>
        <tr><td> 400 </td><td> The &#x60;render ID&#x60; is not valid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, please provide a correct API key on the &#x60;Authorization &#x60; header. The API key is available on your Carbone account: https://account.carbone.io </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The file does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void renderRenderIdGet(String renderId, Integer carboneVersion) throws ApiException {
        renderRenderIdGetWithHttpInfo(renderId, carboneVersion);
    }

    /**
     * Retreive a generated document from a render ID.
     * Documentation: https://carbone.io/api-reference.html#download-rendered-reports
     * @param renderId Unique identifier of the report (required)
     * @param carboneVersion Carbone version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Stream of the generated document </td><td>  * content-disposition - Template name, for instance: &#39;filename&#x3D;\&quot;{templateid}.docx\&quot;&#39;. <br>  * content-type - File type <br>  </td></tr>
        <tr><td> 400 </td><td> The &#x60;render ID&#x60; is not valid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, please provide a correct API key on the &#x60;Authorization &#x60; header. The API key is available on your Carbone account: https://account.carbone.io </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The file does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> renderRenderIdGetWithHttpInfo(String renderId, Integer carboneVersion) throws ApiException {
        okhttp3.Call localVarCall = renderRenderIdGetValidateBeforeCall(renderId, carboneVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retreive a generated document from a render ID. (asynchronously)
     * Documentation: https://carbone.io/api-reference.html#download-rendered-reports
     * @param renderId Unique identifier of the report (required)
     * @param carboneVersion Carbone version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Stream of the generated document </td><td>  * content-disposition - Template name, for instance: &#39;filename&#x3D;\&quot;{templateid}.docx\&quot;&#39;. <br>  * content-type - File type <br>  </td></tr>
        <tr><td> 400 </td><td> The &#x60;render ID&#x60; is not valid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, please provide a correct API key on the &#x60;Authorization &#x60; header. The API key is available on your Carbone account: https://account.carbone.io </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The file does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call renderRenderIdGetAsync(String renderId, Integer carboneVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = renderRenderIdGetValidateBeforeCall(renderId, carboneVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for renderTemplateIdPost
     * @param templateId Unique identifier of the template (required)
     * @param carboneVersion Carbone version (required)
     * @param renderTemplateIdPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On success, a &#x60;render ID&#x60; is returned, a unique identifier for the generated document. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The body request type is not correct, it must be a JSON type and the &#x60;Content-type&#x60; header must be &#x60;application/json&#x60; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, please provide a correct API key on the &#x60;Authorization &#x60; header. The API key is available on your Carbone account: https://account.carbone.io </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The template is not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The &#39;data&#39; property is missing on the body request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong when merging the JSON data-set into the template. The design of the template has an issue. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call renderTemplateIdPostCall(String templateId, Integer carboneVersion, RenderTemplateIdPostRequest renderTemplateIdPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = renderTemplateIdPostRequest;

        // create path and map variables
        String localVarPath = "/render/{templateId}"
            .replace("{" + "templateId" + "}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (carboneVersion != null) {
            localVarHeaderParams.put("carbone-version", localVarApiClient.parameterToString(carboneVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call renderTemplateIdPostValidateBeforeCall(String templateId, Integer carboneVersion, RenderTemplateIdPostRequest renderTemplateIdPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling renderTemplateIdPost(Async)");
        }

        // verify the required parameter 'carboneVersion' is set
        if (carboneVersion == null) {
            throw new ApiException("Missing the required parameter 'carboneVersion' when calling renderTemplateIdPost(Async)");
        }

        // verify the required parameter 'renderTemplateIdPostRequest' is set
        if (renderTemplateIdPostRequest == null) {
            throw new ApiException("Missing the required parameter 'renderTemplateIdPostRequest' when calling renderTemplateIdPost(Async)");
        }

        return renderTemplateIdPostCall(templateId, carboneVersion, renderTemplateIdPostRequest, _callback);

    }

    /**
     * Generate a document from a template ID, and a JSON data-set
     * Documentation: https://carbone.io/api-reference.html#render-reports
     * @param templateId Unique identifier of the template (required)
     * @param carboneVersion Carbone version (required)
     * @param renderTemplateIdPostRequest  (required)
     * @return RenderTemplateIdPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On success, a &#x60;render ID&#x60; is returned, a unique identifier for the generated document. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The body request type is not correct, it must be a JSON type and the &#x60;Content-type&#x60; header must be &#x60;application/json&#x60; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, please provide a correct API key on the &#x60;Authorization &#x60; header. The API key is available on your Carbone account: https://account.carbone.io </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The template is not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The &#39;data&#39; property is missing on the body request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong when merging the JSON data-set into the template. The design of the template has an issue. </td><td>  -  </td></tr>
     </table>
     */
    public RenderTemplateIdPost200Response renderTemplateIdPost(String templateId, Integer carboneVersion, RenderTemplateIdPostRequest renderTemplateIdPostRequest) throws ApiException {
        ApiResponse<RenderTemplateIdPost200Response> localVarResp = renderTemplateIdPostWithHttpInfo(templateId, carboneVersion, renderTemplateIdPostRequest);
        return localVarResp.getData();
    }

    /**
     * Generate a document from a template ID, and a JSON data-set
     * Documentation: https://carbone.io/api-reference.html#render-reports
     * @param templateId Unique identifier of the template (required)
     * @param carboneVersion Carbone version (required)
     * @param renderTemplateIdPostRequest  (required)
     * @return ApiResponse&lt;RenderTemplateIdPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On success, a &#x60;render ID&#x60; is returned, a unique identifier for the generated document. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The body request type is not correct, it must be a JSON type and the &#x60;Content-type&#x60; header must be &#x60;application/json&#x60; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, please provide a correct API key on the &#x60;Authorization &#x60; header. The API key is available on your Carbone account: https://account.carbone.io </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The template is not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The &#39;data&#39; property is missing on the body request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong when merging the JSON data-set into the template. The design of the template has an issue. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RenderTemplateIdPost200Response> renderTemplateIdPostWithHttpInfo(String templateId, Integer carboneVersion, RenderTemplateIdPostRequest renderTemplateIdPostRequest) throws ApiException {
        okhttp3.Call localVarCall = renderTemplateIdPostValidateBeforeCall(templateId, carboneVersion, renderTemplateIdPostRequest, null);
        Type localVarReturnType = new TypeToken<RenderTemplateIdPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate a document from a template ID, and a JSON data-set (asynchronously)
     * Documentation: https://carbone.io/api-reference.html#render-reports
     * @param templateId Unique identifier of the template (required)
     * @param carboneVersion Carbone version (required)
     * @param renderTemplateIdPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On success, a &#x60;render ID&#x60; is returned, a unique identifier for the generated document. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The body request type is not correct, it must be a JSON type and the &#x60;Content-type&#x60; header must be &#x60;application/json&#x60; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, please provide a correct API key on the &#x60;Authorization &#x60; header. The API key is available on your Carbone account: https://account.carbone.io </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The template is not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The &#39;data&#39; property is missing on the body request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong when merging the JSON data-set into the template. The design of the template has an issue. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call renderTemplateIdPostAsync(String templateId, Integer carboneVersion, RenderTemplateIdPostRequest renderTemplateIdPostRequest, final ApiCallback<RenderTemplateIdPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = renderTemplateIdPostValidateBeforeCall(templateId, carboneVersion, renderTemplateIdPostRequest, _callback);
        Type localVarReturnType = new TypeToken<RenderTemplateIdPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
