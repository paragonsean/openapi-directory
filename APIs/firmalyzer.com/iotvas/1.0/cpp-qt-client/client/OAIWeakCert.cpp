/**
 * IoTVAS API
 * IOTVAS API enables you to discover IoT/Connected devices in the network and provides      detailed real-time risk analysis, including firmware vulnerability analysis without requiring the user to upload the firmware file.     Please visit the [signup page](https://iotvas-api.firmalyzer.com/portal/signup) to create an API key.     IoTVAS API can be easily integrated with vulnerability scanning and network port scanner tools. For example,     we have also released the [IOTVAS NSE script](https://github.com/firmalyzer/iotvas-nmap) that turns the nmap port scanner      to a IoT/connected device discovery and real-time risk assessment tool. For more infromation on IoTVAS and other      solutions please visit [Firmalyzer web site](https://www.firmalyzer.com).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWeakCert.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWeakCert::OAIWeakCert(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWeakCert::OAIWeakCert() {
    this->initializeModel();
}

OAIWeakCert::~OAIWeakCert() {}

void OAIWeakCert::initializeModel() {

    m_file_hash_isSet = false;
    m_file_hash_isValid = false;

    m_file_name_isSet = false;
    m_file_name_isValid = false;

    m_sign_algorithm_isSet = false;
    m_sign_algorithm_isValid = false;

    m_subject_name_isSet = false;
    m_subject_name_isValid = false;

    m_thumb_print_isSet = false;
    m_thumb_print_isValid = false;

    m_valid_from_isSet = false;
    m_valid_from_isValid = false;

    m_valid_to_isSet = false;
    m_valid_to_isValid = false;
}

void OAIWeakCert::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWeakCert::fromJsonObject(QJsonObject json) {

    m_file_hash_isValid = ::OpenAPI::fromJsonValue(m_file_hash, json[QString("file_hash")]);
    m_file_hash_isSet = !json[QString("file_hash")].isNull() && m_file_hash_isValid;

    m_file_name_isValid = ::OpenAPI::fromJsonValue(m_file_name, json[QString("file_name")]);
    m_file_name_isSet = !json[QString("file_name")].isNull() && m_file_name_isValid;

    m_sign_algorithm_isValid = ::OpenAPI::fromJsonValue(m_sign_algorithm, json[QString("sign_algorithm")]);
    m_sign_algorithm_isSet = !json[QString("sign_algorithm")].isNull() && m_sign_algorithm_isValid;

    m_subject_name_isValid = ::OpenAPI::fromJsonValue(m_subject_name, json[QString("subject_name")]);
    m_subject_name_isSet = !json[QString("subject_name")].isNull() && m_subject_name_isValid;

    m_thumb_print_isValid = ::OpenAPI::fromJsonValue(m_thumb_print, json[QString("thumb_print")]);
    m_thumb_print_isSet = !json[QString("thumb_print")].isNull() && m_thumb_print_isValid;

    m_valid_from_isValid = ::OpenAPI::fromJsonValue(m_valid_from, json[QString("valid_from")]);
    m_valid_from_isSet = !json[QString("valid_from")].isNull() && m_valid_from_isValid;

    m_valid_to_isValid = ::OpenAPI::fromJsonValue(m_valid_to, json[QString("valid_to")]);
    m_valid_to_isSet = !json[QString("valid_to")].isNull() && m_valid_to_isValid;
}

QString OAIWeakCert::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWeakCert::asJsonObject() const {
    QJsonObject obj;
    if (m_file_hash_isSet) {
        obj.insert(QString("file_hash"), ::OpenAPI::toJsonValue(m_file_hash));
    }
    if (m_file_name_isSet) {
        obj.insert(QString("file_name"), ::OpenAPI::toJsonValue(m_file_name));
    }
    if (m_sign_algorithm_isSet) {
        obj.insert(QString("sign_algorithm"), ::OpenAPI::toJsonValue(m_sign_algorithm));
    }
    if (m_subject_name_isSet) {
        obj.insert(QString("subject_name"), ::OpenAPI::toJsonValue(m_subject_name));
    }
    if (m_thumb_print_isSet) {
        obj.insert(QString("thumb_print"), ::OpenAPI::toJsonValue(m_thumb_print));
    }
    if (m_valid_from_isSet) {
        obj.insert(QString("valid_from"), ::OpenAPI::toJsonValue(m_valid_from));
    }
    if (m_valid_to_isSet) {
        obj.insert(QString("valid_to"), ::OpenAPI::toJsonValue(m_valid_to));
    }
    return obj;
}

QString OAIWeakCert::getFileHash() const {
    return m_file_hash;
}
void OAIWeakCert::setFileHash(const QString &file_hash) {
    m_file_hash = file_hash;
    m_file_hash_isSet = true;
}

bool OAIWeakCert::is_file_hash_Set() const{
    return m_file_hash_isSet;
}

bool OAIWeakCert::is_file_hash_Valid() const{
    return m_file_hash_isValid;
}

QString OAIWeakCert::getFileName() const {
    return m_file_name;
}
void OAIWeakCert::setFileName(const QString &file_name) {
    m_file_name = file_name;
    m_file_name_isSet = true;
}

bool OAIWeakCert::is_file_name_Set() const{
    return m_file_name_isSet;
}

bool OAIWeakCert::is_file_name_Valid() const{
    return m_file_name_isValid;
}

QString OAIWeakCert::getSignAlgorithm() const {
    return m_sign_algorithm;
}
void OAIWeakCert::setSignAlgorithm(const QString &sign_algorithm) {
    m_sign_algorithm = sign_algorithm;
    m_sign_algorithm_isSet = true;
}

bool OAIWeakCert::is_sign_algorithm_Set() const{
    return m_sign_algorithm_isSet;
}

bool OAIWeakCert::is_sign_algorithm_Valid() const{
    return m_sign_algorithm_isValid;
}

QString OAIWeakCert::getSubjectName() const {
    return m_subject_name;
}
void OAIWeakCert::setSubjectName(const QString &subject_name) {
    m_subject_name = subject_name;
    m_subject_name_isSet = true;
}

bool OAIWeakCert::is_subject_name_Set() const{
    return m_subject_name_isSet;
}

bool OAIWeakCert::is_subject_name_Valid() const{
    return m_subject_name_isValid;
}

QString OAIWeakCert::getThumbPrint() const {
    return m_thumb_print;
}
void OAIWeakCert::setThumbPrint(const QString &thumb_print) {
    m_thumb_print = thumb_print;
    m_thumb_print_isSet = true;
}

bool OAIWeakCert::is_thumb_print_Set() const{
    return m_thumb_print_isSet;
}

bool OAIWeakCert::is_thumb_print_Valid() const{
    return m_thumb_print_isValid;
}

QString OAIWeakCert::getValidFrom() const {
    return m_valid_from;
}
void OAIWeakCert::setValidFrom(const QString &valid_from) {
    m_valid_from = valid_from;
    m_valid_from_isSet = true;
}

bool OAIWeakCert::is_valid_from_Set() const{
    return m_valid_from_isSet;
}

bool OAIWeakCert::is_valid_from_Valid() const{
    return m_valid_from_isValid;
}

QString OAIWeakCert::getValidTo() const {
    return m_valid_to;
}
void OAIWeakCert::setValidTo(const QString &valid_to) {
    m_valid_to = valid_to;
    m_valid_to_isSet = true;
}

bool OAIWeakCert::is_valid_to_Set() const{
    return m_valid_to_isSet;
}

bool OAIWeakCert::is_valid_to_Valid() const{
    return m_valid_to_isValid;
}

bool OAIWeakCert::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sign_algorithm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumb_print_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_to_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWeakCert::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
