/**
 * IoTVAS API
 * IOTVAS API enables you to discover IoT/Connected devices in the network and provides      detailed real-time risk analysis, including firmware vulnerability analysis without requiring the user to upload the firmware file.     Please visit the [signup page](https://iotvas-api.firmalyzer.com/portal/signup) to create an API key.     IoTVAS API can be easily integrated with vulnerability scanning and network port scanner tools. For example,     we have also released the [IOTVAS NSE script](https://github.com/firmalyzer/iotvas-nmap) that turns the nmap port scanner      to a IoT/connected device discovery and real-time risk assessment tool. For more infromation on IoTVAS and other      solutions please visit [Firmalyzer web site](https://www.firmalyzer.com).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRiskSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRiskSummary::OAIRiskSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRiskSummary::OAIRiskSummary() {
    this->initializeModel();
}

OAIRiskSummary::~OAIRiskSummary() {}

void OAIRiskSummary::initializeModel() {

    m_client_tools_risk_isSet = false;
    m_client_tools_risk_isValid = false;

    m_crypto_risk_isSet = false;
    m_crypto_risk_isValid = false;

    m_kernel_risk_isSet = false;
    m_kernel_risk_isValid = false;

    m_net_services_risk_isSet = false;
    m_net_services_risk_isValid = false;
}

void OAIRiskSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRiskSummary::fromJsonObject(QJsonObject json) {

    m_client_tools_risk_isValid = ::OpenAPI::fromJsonValue(m_client_tools_risk, json[QString("client_tools_risk")]);
    m_client_tools_risk_isSet = !json[QString("client_tools_risk")].isNull() && m_client_tools_risk_isValid;

    m_crypto_risk_isValid = ::OpenAPI::fromJsonValue(m_crypto_risk, json[QString("crypto_risk")]);
    m_crypto_risk_isSet = !json[QString("crypto_risk")].isNull() && m_crypto_risk_isValid;

    m_kernel_risk_isValid = ::OpenAPI::fromJsonValue(m_kernel_risk, json[QString("kernel_risk")]);
    m_kernel_risk_isSet = !json[QString("kernel_risk")].isNull() && m_kernel_risk_isValid;

    m_net_services_risk_isValid = ::OpenAPI::fromJsonValue(m_net_services_risk, json[QString("net_services_risk")]);
    m_net_services_risk_isSet = !json[QString("net_services_risk")].isNull() && m_net_services_risk_isValid;
}

QString OAIRiskSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRiskSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_client_tools_risk_isSet) {
        obj.insert(QString("client_tools_risk"), ::OpenAPI::toJsonValue(m_client_tools_risk));
    }
    if (m_crypto_risk_isSet) {
        obj.insert(QString("crypto_risk"), ::OpenAPI::toJsonValue(m_crypto_risk));
    }
    if (m_kernel_risk_isSet) {
        obj.insert(QString("kernel_risk"), ::OpenAPI::toJsonValue(m_kernel_risk));
    }
    if (m_net_services_risk_isSet) {
        obj.insert(QString("net_services_risk"), ::OpenAPI::toJsonValue(m_net_services_risk));
    }
    return obj;
}

QString OAIRiskSummary::getClientToolsRisk() const {
    return m_client_tools_risk;
}
void OAIRiskSummary::setClientToolsRisk(const QString &client_tools_risk) {
    m_client_tools_risk = client_tools_risk;
    m_client_tools_risk_isSet = true;
}

bool OAIRiskSummary::is_client_tools_risk_Set() const{
    return m_client_tools_risk_isSet;
}

bool OAIRiskSummary::is_client_tools_risk_Valid() const{
    return m_client_tools_risk_isValid;
}

QString OAIRiskSummary::getCryptoRisk() const {
    return m_crypto_risk;
}
void OAIRiskSummary::setCryptoRisk(const QString &crypto_risk) {
    m_crypto_risk = crypto_risk;
    m_crypto_risk_isSet = true;
}

bool OAIRiskSummary::is_crypto_risk_Set() const{
    return m_crypto_risk_isSet;
}

bool OAIRiskSummary::is_crypto_risk_Valid() const{
    return m_crypto_risk_isValid;
}

QString OAIRiskSummary::getKernelRisk() const {
    return m_kernel_risk;
}
void OAIRiskSummary::setKernelRisk(const QString &kernel_risk) {
    m_kernel_risk = kernel_risk;
    m_kernel_risk_isSet = true;
}

bool OAIRiskSummary::is_kernel_risk_Set() const{
    return m_kernel_risk_isSet;
}

bool OAIRiskSummary::is_kernel_risk_Valid() const{
    return m_kernel_risk_isValid;
}

QString OAIRiskSummary::getNetServicesRisk() const {
    return m_net_services_risk;
}
void OAIRiskSummary::setNetServicesRisk(const QString &net_services_risk) {
    m_net_services_risk = net_services_risk;
    m_net_services_risk_isSet = true;
}

bool OAIRiskSummary::is_net_services_risk_Set() const{
    return m_net_services_risk_isSet;
}

bool OAIRiskSummary::is_net_services_risk_Valid() const{
    return m_net_services_risk_isValid;
}

bool OAIRiskSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_tools_risk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crypto_risk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kernel_risk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_net_services_risk_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRiskSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
