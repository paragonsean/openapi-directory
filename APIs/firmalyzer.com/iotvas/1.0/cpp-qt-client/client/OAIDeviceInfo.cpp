/**
 * IoTVAS API
 * IOTVAS API enables you to discover IoT/Connected devices in the network and provides      detailed real-time risk analysis, including firmware vulnerability analysis without requiring the user to upload the firmware file.     Please visit the [signup page](https://iotvas-api.firmalyzer.com/portal/signup) to create an API key.     IoTVAS API can be easily integrated with vulnerability scanning and network port scanner tools. For example,     we have also released the [IOTVAS NSE script](https://github.com/firmalyzer/iotvas-nmap) that turns the nmap port scanner      to a IoT/connected device discovery and real-time risk assessment tool. For more infromation on IoTVAS and other      solutions please visit [Firmalyzer web site](https://www.firmalyzer.com).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeviceInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeviceInfo::OAIDeviceInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeviceInfo::OAIDeviceInfo() {
    this->initializeModel();
}

OAIDeviceInfo::~OAIDeviceInfo() {}

void OAIDeviceInfo::initializeModel() {

    m_cve_list_isSet = false;
    m_cve_list_isValid = false;

    m_device_type_isSet = false;
    m_device_type_isValid = false;

    m_firmware_info_isSet = false;
    m_firmware_info_isValid = false;

    m_firmware_version_isSet = false;
    m_firmware_version_isValid = false;

    m_is_discontinued_isSet = false;
    m_is_discontinued_isValid = false;

    m_latest_firmware_info_isSet = false;
    m_latest_firmware_info_isValid = false;

    m_manufacturer_isSet = false;
    m_manufacturer_isValid = false;

    m_model_name_isSet = false;
    m_model_name_isValid = false;
}

void OAIDeviceInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeviceInfo::fromJsonObject(QJsonObject json) {

    m_cve_list_isValid = ::OpenAPI::fromJsonValue(m_cve_list, json[QString("cve_list")]);
    m_cve_list_isSet = !json[QString("cve_list")].isNull() && m_cve_list_isValid;

    m_device_type_isValid = ::OpenAPI::fromJsonValue(m_device_type, json[QString("device_type")]);
    m_device_type_isSet = !json[QString("device_type")].isNull() && m_device_type_isValid;

    m_firmware_info_isValid = ::OpenAPI::fromJsonValue(m_firmware_info, json[QString("firmware_info")]);
    m_firmware_info_isSet = !json[QString("firmware_info")].isNull() && m_firmware_info_isValid;

    m_firmware_version_isValid = ::OpenAPI::fromJsonValue(m_firmware_version, json[QString("firmware_version")]);
    m_firmware_version_isSet = !json[QString("firmware_version")].isNull() && m_firmware_version_isValid;

    m_is_discontinued_isValid = ::OpenAPI::fromJsonValue(m_is_discontinued, json[QString("is_discontinued")]);
    m_is_discontinued_isSet = !json[QString("is_discontinued")].isNull() && m_is_discontinued_isValid;

    m_latest_firmware_info_isValid = ::OpenAPI::fromJsonValue(m_latest_firmware_info, json[QString("latest_firmware_info")]);
    m_latest_firmware_info_isSet = !json[QString("latest_firmware_info")].isNull() && m_latest_firmware_info_isValid;

    m_manufacturer_isValid = ::OpenAPI::fromJsonValue(m_manufacturer, json[QString("manufacturer")]);
    m_manufacturer_isSet = !json[QString("manufacturer")].isNull() && m_manufacturer_isValid;

    m_model_name_isValid = ::OpenAPI::fromJsonValue(m_model_name, json[QString("model_name")]);
    m_model_name_isSet = !json[QString("model_name")].isNull() && m_model_name_isValid;
}

QString OAIDeviceInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeviceInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_cve_list.size() > 0) {
        obj.insert(QString("cve_list"), ::OpenAPI::toJsonValue(m_cve_list));
    }
    if (m_device_type_isSet) {
        obj.insert(QString("device_type"), ::OpenAPI::toJsonValue(m_device_type));
    }
    if (m_firmware_info.isSet()) {
        obj.insert(QString("firmware_info"), ::OpenAPI::toJsonValue(m_firmware_info));
    }
    if (m_firmware_version_isSet) {
        obj.insert(QString("firmware_version"), ::OpenAPI::toJsonValue(m_firmware_version));
    }
    if (m_is_discontinued_isSet) {
        obj.insert(QString("is_discontinued"), ::OpenAPI::toJsonValue(m_is_discontinued));
    }
    if (m_latest_firmware_info.isSet()) {
        obj.insert(QString("latest_firmware_info"), ::OpenAPI::toJsonValue(m_latest_firmware_info));
    }
    if (m_manufacturer_isSet) {
        obj.insert(QString("manufacturer"), ::OpenAPI::toJsonValue(m_manufacturer));
    }
    if (m_model_name_isSet) {
        obj.insert(QString("model_name"), ::OpenAPI::toJsonValue(m_model_name));
    }
    return obj;
}

QList<OAIVulnerability> OAIDeviceInfo::getCveList() const {
    return m_cve_list;
}
void OAIDeviceInfo::setCveList(const QList<OAIVulnerability> &cve_list) {
    m_cve_list = cve_list;
    m_cve_list_isSet = true;
}

bool OAIDeviceInfo::is_cve_list_Set() const{
    return m_cve_list_isSet;
}

bool OAIDeviceInfo::is_cve_list_Valid() const{
    return m_cve_list_isValid;
}

QString OAIDeviceInfo::getDeviceType() const {
    return m_device_type;
}
void OAIDeviceInfo::setDeviceType(const QString &device_type) {
    m_device_type = device_type;
    m_device_type_isSet = true;
}

bool OAIDeviceInfo::is_device_type_Set() const{
    return m_device_type_isSet;
}

bool OAIDeviceInfo::is_device_type_Valid() const{
    return m_device_type_isValid;
}

OAIFirmwareInfo OAIDeviceInfo::getFirmwareInfo() const {
    return m_firmware_info;
}
void OAIDeviceInfo::setFirmwareInfo(const OAIFirmwareInfo &firmware_info) {
    m_firmware_info = firmware_info;
    m_firmware_info_isSet = true;
}

bool OAIDeviceInfo::is_firmware_info_Set() const{
    return m_firmware_info_isSet;
}

bool OAIDeviceInfo::is_firmware_info_Valid() const{
    return m_firmware_info_isValid;
}

QString OAIDeviceInfo::getFirmwareVersion() const {
    return m_firmware_version;
}
void OAIDeviceInfo::setFirmwareVersion(const QString &firmware_version) {
    m_firmware_version = firmware_version;
    m_firmware_version_isSet = true;
}

bool OAIDeviceInfo::is_firmware_version_Set() const{
    return m_firmware_version_isSet;
}

bool OAIDeviceInfo::is_firmware_version_Valid() const{
    return m_firmware_version_isValid;
}

bool OAIDeviceInfo::isIsDiscontinued() const {
    return m_is_discontinued;
}
void OAIDeviceInfo::setIsDiscontinued(const bool &is_discontinued) {
    m_is_discontinued = is_discontinued;
    m_is_discontinued_isSet = true;
}

bool OAIDeviceInfo::is_is_discontinued_Set() const{
    return m_is_discontinued_isSet;
}

bool OAIDeviceInfo::is_is_discontinued_Valid() const{
    return m_is_discontinued_isValid;
}

OAIFirmwareInfo OAIDeviceInfo::getLatestFirmwareInfo() const {
    return m_latest_firmware_info;
}
void OAIDeviceInfo::setLatestFirmwareInfo(const OAIFirmwareInfo &latest_firmware_info) {
    m_latest_firmware_info = latest_firmware_info;
    m_latest_firmware_info_isSet = true;
}

bool OAIDeviceInfo::is_latest_firmware_info_Set() const{
    return m_latest_firmware_info_isSet;
}

bool OAIDeviceInfo::is_latest_firmware_info_Valid() const{
    return m_latest_firmware_info_isValid;
}

QString OAIDeviceInfo::getManufacturer() const {
    return m_manufacturer;
}
void OAIDeviceInfo::setManufacturer(const QString &manufacturer) {
    m_manufacturer = manufacturer;
    m_manufacturer_isSet = true;
}

bool OAIDeviceInfo::is_manufacturer_Set() const{
    return m_manufacturer_isSet;
}

bool OAIDeviceInfo::is_manufacturer_Valid() const{
    return m_manufacturer_isValid;
}

QString OAIDeviceInfo::getModelName() const {
    return m_model_name;
}
void OAIDeviceInfo::setModelName(const QString &model_name) {
    m_model_name = model_name;
    m_model_name_isSet = true;
}

bool OAIDeviceInfo::is_model_name_Set() const{
    return m_model_name_isSet;
}

bool OAIDeviceInfo::is_model_name_Valid() const{
    return m_model_name_isValid;
}

bool OAIDeviceInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cve_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_firmware_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_firmware_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_discontinued_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_firmware_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_manufacturer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeviceInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
