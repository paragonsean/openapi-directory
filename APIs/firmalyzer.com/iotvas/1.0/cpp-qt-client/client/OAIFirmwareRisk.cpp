/**
 * IoTVAS API
 * IOTVAS API enables you to discover IoT/Connected devices in the network and provides      detailed real-time risk analysis, including firmware vulnerability analysis without requiring the user to upload the firmware file.     Please visit the [signup page](https://iotvas-api.firmalyzer.com/portal/signup) to create an API key.     IoTVAS API can be easily integrated with vulnerability scanning and network port scanner tools. For example,     we have also released the [IOTVAS NSE script](https://github.com/firmalyzer/iotvas-nmap) that turns the nmap port scanner      to a IoT/connected device discovery and real-time risk assessment tool. For more infromation on IoTVAS and other      solutions please visit [Firmalyzer web site](https://www.firmalyzer.com).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFirmwareRisk.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFirmwareRisk::OAIFirmwareRisk(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFirmwareRisk::OAIFirmwareRisk() {
    this->initializeModel();
}

OAIFirmwareRisk::~OAIFirmwareRisk() {}

void OAIFirmwareRisk::initializeModel() {

    m_risk_summary_isSet = false;
    m_risk_summary_isValid = false;

    m_vulnerable_components_isSet = false;
    m_vulnerable_components_isValid = false;
}

void OAIFirmwareRisk::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFirmwareRisk::fromJsonObject(QJsonObject json) {

    m_risk_summary_isValid = ::OpenAPI::fromJsonValue(m_risk_summary, json[QString("risk_summary")]);
    m_risk_summary_isSet = !json[QString("risk_summary")].isNull() && m_risk_summary_isValid;

    m_vulnerable_components_isValid = ::OpenAPI::fromJsonValue(m_vulnerable_components, json[QString("vulnerable_components")]);
    m_vulnerable_components_isSet = !json[QString("vulnerable_components")].isNull() && m_vulnerable_components_isValid;
}

QString OAIFirmwareRisk::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFirmwareRisk::asJsonObject() const {
    QJsonObject obj;
    if (m_risk_summary.isSet()) {
        obj.insert(QString("risk_summary"), ::OpenAPI::toJsonValue(m_risk_summary));
    }
    if (m_vulnerable_components.size() > 0) {
        obj.insert(QString("vulnerable_components"), ::OpenAPI::toJsonValue(m_vulnerable_components));
    }
    return obj;
}

OAIRiskSummary OAIFirmwareRisk::getRiskSummary() const {
    return m_risk_summary;
}
void OAIFirmwareRisk::setRiskSummary(const OAIRiskSummary &risk_summary) {
    m_risk_summary = risk_summary;
    m_risk_summary_isSet = true;
}

bool OAIFirmwareRisk::is_risk_summary_Set() const{
    return m_risk_summary_isSet;
}

bool OAIFirmwareRisk::is_risk_summary_Valid() const{
    return m_risk_summary_isValid;
}

QList<OAIVulnerableComponent> OAIFirmwareRisk::getVulnerableComponents() const {
    return m_vulnerable_components;
}
void OAIFirmwareRisk::setVulnerableComponents(const QList<OAIVulnerableComponent> &vulnerable_components) {
    m_vulnerable_components = vulnerable_components;
    m_vulnerable_components_isSet = true;
}

bool OAIFirmwareRisk::is_vulnerable_components_Set() const{
    return m_vulnerable_components_isSet;
}

bool OAIFirmwareRisk::is_vulnerable_components_Valid() const{
    return m_vulnerable_components_isValid;
}

bool OAIFirmwareRisk::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_risk_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vulnerable_components.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFirmwareRisk::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
