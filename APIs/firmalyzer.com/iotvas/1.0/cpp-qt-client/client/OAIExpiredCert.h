/**
 * IoTVAS API
 * IOTVAS API enables you to discover IoT/Connected devices in the network and provides      detailed real-time risk analysis, including firmware vulnerability analysis without requiring the user to upload the firmware file.     Please visit the [signup page](https://iotvas-api.firmalyzer.com/portal/signup) to create an API key.     IoTVAS API can be easily integrated with vulnerability scanning and network port scanner tools. For example,     we have also released the [IOTVAS NSE script](https://github.com/firmalyzer/iotvas-nmap) that turns the nmap port scanner      to a IoT/connected device discovery and real-time risk assessment tool. For more infromation on IoTVAS and other      solutions please visit [Firmalyzer web site](https://www.firmalyzer.com).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIExpiredCert.h
 *
 * 
 */

#ifndef OAIExpiredCert_H
#define OAIExpiredCert_H

#include <QJsonObject>

#include "OAIPublicKey.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPublicKey;

class OAIExpiredCert : public OAIObject {
public:
    OAIExpiredCert();
    OAIExpiredCert(QString json);
    ~OAIExpiredCert() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getFileHash() const;
    void setFileHash(const QString &file_hash);
    bool is_file_hash_Set() const;
    bool is_file_hash_Valid() const;

    QString getFileName() const;
    void setFileName(const QString &file_name);
    bool is_file_name_Set() const;
    bool is_file_name_Valid() const;

    OAIPublicKey getPublicKey() const;
    void setPublicKey(const OAIPublicKey &public_key);
    bool is_public_key_Set() const;
    bool is_public_key_Valid() const;

    QString getSubjectName() const;
    void setSubjectName(const QString &subject_name);
    bool is_subject_name_Set() const;
    bool is_subject_name_Valid() const;

    QString getThumbPrint() const;
    void setThumbPrint(const QString &thumb_print);
    bool is_thumb_print_Set() const;
    bool is_thumb_print_Valid() const;

    QString getValidFrom() const;
    void setValidFrom(const QString &valid_from);
    bool is_valid_from_Set() const;
    bool is_valid_from_Valid() const;

    QString getValidTo() const;
    void setValidTo(const QString &valid_to);
    bool is_valid_to_Set() const;
    bool is_valid_to_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_file_hash;
    bool m_file_hash_isSet;
    bool m_file_hash_isValid;

    QString m_file_name;
    bool m_file_name_isSet;
    bool m_file_name_isValid;

    OAIPublicKey m_public_key;
    bool m_public_key_isSet;
    bool m_public_key_isValid;

    QString m_subject_name;
    bool m_subject_name_isSet;
    bool m_subject_name_isValid;

    QString m_thumb_print;
    bool m_thumb_print_isSet;
    bool m_thumb_print_isValid;

    QString m_valid_from;
    bool m_valid_from_isSet;
    bool m_valid_from_isValid;

    QString m_valid_to;
    bool m_valid_to_isSet;
    bool m_valid_to_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIExpiredCert)

#endif // OAIExpiredCert_H
