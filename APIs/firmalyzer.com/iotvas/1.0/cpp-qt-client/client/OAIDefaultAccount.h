/**
 * IoTVAS API
 * IOTVAS API enables you to discover IoT/Connected devices in the network and provides      detailed real-time risk analysis, including firmware vulnerability analysis without requiring the user to upload the firmware file.     Please visit the [signup page](https://iotvas-api.firmalyzer.com/portal/signup) to create an API key.     IoTVAS API can be easily integrated with vulnerability scanning and network port scanner tools. For example,     we have also released the [IOTVAS NSE script](https://github.com/firmalyzer/iotvas-nmap) that turns the nmap port scanner      to a IoT/connected device discovery and real-time risk assessment tool. For more infromation on IoTVAS and other      solutions please visit [Firmalyzer web site](https://www.firmalyzer.com).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDefaultAccount.h
 *
 * 
 */

#ifndef OAIDefaultAccount_H
#define OAIDefaultAccount_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDefaultAccount : public OAIObject {
public:
    OAIDefaultAccount();
    OAIDefaultAccount(QString json);
    ~OAIDefaultAccount() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getGid() const;
    void setGid(const qint32 &gid);
    bool is_gid_Set() const;
    bool is_gid_Valid() const;

    QString getHashAlgorithm() const;
    void setHashAlgorithm(const QString &hash_algorithm);
    bool is_hash_algorithm_Set() const;
    bool is_hash_algorithm_Valid() const;

    QString getHomeDir() const;
    void setHomeDir(const QString &home_dir);
    bool is_home_dir_Set() const;
    bool is_home_dir_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getPwdHash() const;
    void setPwdHash(const QString &pwd_hash);
    bool is_pwd_hash_Set() const;
    bool is_pwd_hash_Valid() const;

    QString getShell() const;
    void setShell(const QString &shell);
    bool is_shell_Set() const;
    bool is_shell_Valid() const;

    qint32 getUid() const;
    void setUid(const qint32 &uid);
    bool is_uid_Set() const;
    bool is_uid_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_gid;
    bool m_gid_isSet;
    bool m_gid_isValid;

    QString m_hash_algorithm;
    bool m_hash_algorithm_isSet;
    bool m_hash_algorithm_isValid;

    QString m_home_dir;
    bool m_home_dir_isSet;
    bool m_home_dir_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_pwd_hash;
    bool m_pwd_hash_isSet;
    bool m_pwd_hash_isValid;

    QString m_shell;
    bool m_shell_isSet;
    bool m_shell_isValid;

    qint32 m_uid;
    bool m_uid_isSet;
    bool m_uid_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDefaultAccount)

#endif // OAIDefaultAccount_H
