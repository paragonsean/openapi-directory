/**
 * IoTVAS API
 * IOTVAS API enables you to discover IoT/Connected devices in the network and provides      detailed real-time risk analysis, including firmware vulnerability analysis without requiring the user to upload the firmware file.     Please visit the [signup page](https://iotvas-api.firmalyzer.com/portal/signup) to create an API key.     IoTVAS API can be easily integrated with vulnerability scanning and network port scanner tools. For example,     we have also released the [IOTVAS NSE script](https://github.com/firmalyzer/iotvas-nmap) that turns the nmap port scanner      to a IoT/connected device discovery and real-time risk assessment tool. For more infromation on IoTVAS and other      solutions please visit [Firmalyzer web site](https://www.firmalyzer.com).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVulnerableComponent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVulnerableComponent::OAIVulnerableComponent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVulnerableComponent::OAIVulnerableComponent() {
    this->initializeModel();
}

OAIVulnerableComponent::~OAIVulnerableComponent() {}

void OAIVulnerableComponent::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_cvss_max_isSet = false;
    m_cvss_max_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_vulnerabilities_isSet = false;
    m_vulnerabilities_isValid = false;
}

void OAIVulnerableComponent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVulnerableComponent::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_cvss_max_isValid = ::OpenAPI::fromJsonValue(m_cvss_max, json[QString("cvss_max")]);
    m_cvss_max_isSet = !json[QString("cvss_max")].isNull() && m_cvss_max_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_vulnerabilities_isValid = ::OpenAPI::fromJsonValue(m_vulnerabilities, json[QString("vulnerabilities")]);
    m_vulnerabilities_isSet = !json[QString("vulnerabilities")].isNull() && m_vulnerabilities_isValid;
}

QString OAIVulnerableComponent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVulnerableComponent::asJsonObject() const {
    QJsonObject obj;
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_cvss_max_isSet) {
        obj.insert(QString("cvss_max"), ::OpenAPI::toJsonValue(m_cvss_max));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_vulnerabilities.size() > 0) {
        obj.insert(QString("vulnerabilities"), ::OpenAPI::toJsonValue(m_vulnerabilities));
    }
    return obj;
}

QString OAIVulnerableComponent::getCategory() const {
    return m_category;
}
void OAIVulnerableComponent::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIVulnerableComponent::is_category_Set() const{
    return m_category_isSet;
}

bool OAIVulnerableComponent::is_category_Valid() const{
    return m_category_isValid;
}

double OAIVulnerableComponent::getCvssMax() const {
    return m_cvss_max;
}
void OAIVulnerableComponent::setCvssMax(const double &cvss_max) {
    m_cvss_max = cvss_max;
    m_cvss_max_isSet = true;
}

bool OAIVulnerableComponent::is_cvss_max_Set() const{
    return m_cvss_max_isSet;
}

bool OAIVulnerableComponent::is_cvss_max_Valid() const{
    return m_cvss_max_isValid;
}

QString OAIVulnerableComponent::getName() const {
    return m_name;
}
void OAIVulnerableComponent::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIVulnerableComponent::is_name_Set() const{
    return m_name_isSet;
}

bool OAIVulnerableComponent::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIVulnerableComponent::getVersion() const {
    return m_version;
}
void OAIVulnerableComponent::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIVulnerableComponent::is_version_Set() const{
    return m_version_isSet;
}

bool OAIVulnerableComponent::is_version_Valid() const{
    return m_version_isValid;
}

QList<OAIVulnerability> OAIVulnerableComponent::getVulnerabilities() const {
    return m_vulnerabilities;
}
void OAIVulnerableComponent::setVulnerabilities(const QList<OAIVulnerability> &vulnerabilities) {
    m_vulnerabilities = vulnerabilities;
    m_vulnerabilities_isSet = true;
}

bool OAIVulnerableComponent::is_vulnerabilities_Set() const{
    return m_vulnerabilities_isSet;
}

bool OAIVulnerableComponent::is_vulnerabilities_Valid() const{
    return m_vulnerabilities_isValid;
}

bool OAIVulnerableComponent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cvss_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vulnerabilities.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVulnerableComponent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
