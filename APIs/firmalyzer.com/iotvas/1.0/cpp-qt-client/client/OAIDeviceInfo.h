/**
 * IoTVAS API
 * IOTVAS API enables you to discover IoT/Connected devices in the network and provides      detailed real-time risk analysis, including firmware vulnerability analysis without requiring the user to upload the firmware file.     Please visit the [signup page](https://iotvas-api.firmalyzer.com/portal/signup) to create an API key.     IoTVAS API can be easily integrated with vulnerability scanning and network port scanner tools. For example,     we have also released the [IOTVAS NSE script](https://github.com/firmalyzer/iotvas-nmap) that turns the nmap port scanner      to a IoT/connected device discovery and real-time risk assessment tool. For more infromation on IoTVAS and other      solutions please visit [Firmalyzer web site](https://www.firmalyzer.com).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDeviceInfo.h
 *
 * 
 */

#ifndef OAIDeviceInfo_H
#define OAIDeviceInfo_H

#include <QJsonObject>

#include "OAIFirmwareInfo.h"
#include "OAIVulnerability.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIVulnerability;
class OAIFirmwareInfo;

class OAIDeviceInfo : public OAIObject {
public:
    OAIDeviceInfo();
    OAIDeviceInfo(QString json);
    ~OAIDeviceInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIVulnerability> getCveList() const;
    void setCveList(const QList<OAIVulnerability> &cve_list);
    bool is_cve_list_Set() const;
    bool is_cve_list_Valid() const;

    QString getDeviceType() const;
    void setDeviceType(const QString &device_type);
    bool is_device_type_Set() const;
    bool is_device_type_Valid() const;

    OAIFirmwareInfo getFirmwareInfo() const;
    void setFirmwareInfo(const OAIFirmwareInfo &firmware_info);
    bool is_firmware_info_Set() const;
    bool is_firmware_info_Valid() const;

    QString getFirmwareVersion() const;
    void setFirmwareVersion(const QString &firmware_version);
    bool is_firmware_version_Set() const;
    bool is_firmware_version_Valid() const;

    bool isIsDiscontinued() const;
    void setIsDiscontinued(const bool &is_discontinued);
    bool is_is_discontinued_Set() const;
    bool is_is_discontinued_Valid() const;

    OAIFirmwareInfo getLatestFirmwareInfo() const;
    void setLatestFirmwareInfo(const OAIFirmwareInfo &latest_firmware_info);
    bool is_latest_firmware_info_Set() const;
    bool is_latest_firmware_info_Valid() const;

    QString getManufacturer() const;
    void setManufacturer(const QString &manufacturer);
    bool is_manufacturer_Set() const;
    bool is_manufacturer_Valid() const;

    QString getModelName() const;
    void setModelName(const QString &model_name);
    bool is_model_name_Set() const;
    bool is_model_name_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIVulnerability> m_cve_list;
    bool m_cve_list_isSet;
    bool m_cve_list_isValid;

    QString m_device_type;
    bool m_device_type_isSet;
    bool m_device_type_isValid;

    OAIFirmwareInfo m_firmware_info;
    bool m_firmware_info_isSet;
    bool m_firmware_info_isValid;

    QString m_firmware_version;
    bool m_firmware_version_isSet;
    bool m_firmware_version_isValid;

    bool m_is_discontinued;
    bool m_is_discontinued_isSet;
    bool m_is_discontinued_isValid;

    OAIFirmwareInfo m_latest_firmware_info;
    bool m_latest_firmware_info_isSet;
    bool m_latest_firmware_info_isValid;

    QString m_manufacturer;
    bool m_manufacturer_isSet;
    bool m_manufacturer_isValid;

    QString m_model_name;
    bool m_model_name_isSet;
    bool m_model_name_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDeviceInfo)

#endif // OAIDeviceInfo_H
