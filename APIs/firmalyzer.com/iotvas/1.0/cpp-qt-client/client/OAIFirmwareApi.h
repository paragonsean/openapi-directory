/**
 * IoTVAS API
 * IOTVAS API enables you to discover IoT/Connected devices in the network and provides      detailed real-time risk analysis, including firmware vulnerability analysis without requiring the user to upload the firmware file.     Please visit the [signup page](https://iotvas-api.firmalyzer.com/portal/signup) to create an API key.     IoTVAS API can be easily integrated with vulnerability scanning and network port scanner tools. For example,     we have also released the [IOTVAS NSE script](https://github.com/firmalyzer/iotvas-nmap) that turns the nmap port scanner      to a IoT/connected device discovery and real-time risk assessment tool. For more infromation on IoTVAS and other      solutions please visit [Firmalyzer web site](https://www.firmalyzer.com).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFirmwareApi_H
#define OAI_OAIFirmwareApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIConfigIssue.h"
#include "OAICryptoKey.h"
#include "OAIDefaultAccount.h"
#include "OAIExpiredCert.h"
#include "OAIFirmwareRisk.h"
#include "OAIHTTPValidationError.h"
#include "OAIWeakCert.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFirmwareApi : public QObject {
    Q_OBJECT

public:
    OAIFirmwareApi(const int timeOut = 0);
    ~OAIFirmwareApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  firmware_hash QString [required]
    */
    virtual void getAccounts(const QString &firmware_hash);

    /**
    * @param[in]  firmware_hash QString [required]
    */
    virtual void getConfigIssues(const QString &firmware_hash);

    /**
    * @param[in]  firmware_hash QString [required]
    */
    virtual void getExpiredCerts(const QString &firmware_hash);

    /**
    * @param[in]  firmware_hash QString [required]
    */
    virtual void getPrivateKeys(const QString &firmware_hash);

    /**
    * @param[in]  firmware_hash QString [required]
    */
    virtual void getRisk(const QString &firmware_hash);

    /**
    * @param[in]  firmware_hash QString [required]
    */
    virtual void getWeakCerts(const QString &firmware_hash);

    /**
    * @param[in]  firmware_hash QString [required]
    */
    virtual void getWeakKeys(const QString &firmware_hash);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getAccountsCallback(OAIHttpRequestWorker *worker);
    void getConfigIssuesCallback(OAIHttpRequestWorker *worker);
    void getExpiredCertsCallback(OAIHttpRequestWorker *worker);
    void getPrivateKeysCallback(OAIHttpRequestWorker *worker);
    void getRiskCallback(OAIHttpRequestWorker *worker);
    void getWeakCertsCallback(OAIHttpRequestWorker *worker);
    void getWeakKeysCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getAccountsSignal(QList<OAIDefaultAccount> summary);
    void getConfigIssuesSignal(QList<OAIConfigIssue> summary);
    void getExpiredCertsSignal(QList<OAIExpiredCert> summary);
    void getPrivateKeysSignal(QList<OAICryptoKey> summary);
    void getRiskSignal(OAIFirmwareRisk summary);
    void getWeakCertsSignal(QList<OAIWeakCert> summary);
    void getWeakKeysSignal(QList<OAICryptoKey> summary);


    void getAccountsSignalFull(OAIHttpRequestWorker *worker, QList<OAIDefaultAccount> summary);
    void getConfigIssuesSignalFull(OAIHttpRequestWorker *worker, QList<OAIConfigIssue> summary);
    void getExpiredCertsSignalFull(OAIHttpRequestWorker *worker, QList<OAIExpiredCert> summary);
    void getPrivateKeysSignalFull(OAIHttpRequestWorker *worker, QList<OAICryptoKey> summary);
    void getRiskSignalFull(OAIHttpRequestWorker *worker, OAIFirmwareRisk summary);
    void getWeakCertsSignalFull(OAIHttpRequestWorker *worker, QList<OAIWeakCert> summary);
    void getWeakKeysSignalFull(OAIHttpRequestWorker *worker, QList<OAICryptoKey> summary);

    Q_DECL_DEPRECATED_X("Use getAccountsSignalError() instead")
    void getAccountsSignalE(QList<OAIDefaultAccount> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccountsSignalError(QList<OAIDefaultAccount> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getConfigIssuesSignalError() instead")
    void getConfigIssuesSignalE(QList<OAIConfigIssue> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getConfigIssuesSignalError(QList<OAIConfigIssue> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getExpiredCertsSignalError() instead")
    void getExpiredCertsSignalE(QList<OAIExpiredCert> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getExpiredCertsSignalError(QList<OAIExpiredCert> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPrivateKeysSignalError() instead")
    void getPrivateKeysSignalE(QList<OAICryptoKey> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPrivateKeysSignalError(QList<OAICryptoKey> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRiskSignalError() instead")
    void getRiskSignalE(OAIFirmwareRisk summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRiskSignalError(OAIFirmwareRisk summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWeakCertsSignalError() instead")
    void getWeakCertsSignalE(QList<OAIWeakCert> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getWeakCertsSignalError(QList<OAIWeakCert> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWeakKeysSignalError() instead")
    void getWeakKeysSignalE(QList<OAICryptoKey> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getWeakKeysSignalError(QList<OAICryptoKey> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getAccountsSignalErrorFull() instead")
    void getAccountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getConfigIssuesSignalErrorFull() instead")
    void getConfigIssuesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getConfigIssuesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getExpiredCertsSignalErrorFull() instead")
    void getExpiredCertsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getExpiredCertsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPrivateKeysSignalErrorFull() instead")
    void getPrivateKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPrivateKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRiskSignalErrorFull() instead")
    void getRiskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRiskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWeakCertsSignalErrorFull() instead")
    void getWeakCertsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getWeakCertsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWeakKeysSignalErrorFull() instead")
    void getWeakKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getWeakKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
