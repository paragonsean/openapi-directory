/**
 * IoTVAS API
 * IOTVAS API enables you to discover IoT/Connected devices in the network and provides      detailed real-time risk analysis, including firmware vulnerability analysis without requiring the user to upload the firmware file.     Please visit the [signup page](https://iotvas-api.firmalyzer.com/portal/signup) to create an API key.     IoTVAS API can be easily integrated with vulnerability scanning and network port scanner tools. For example,     we have also released the [IOTVAS NSE script](https://github.com/firmalyzer/iotvas-nmap) that turns the nmap port scanner      to a IoT/connected device discovery and real-time risk assessment tool. For more infromation on IoTVAS and other      solutions please visit [Firmalyzer web site](https://www.firmalyzer.com).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICryptoKey.h
 *
 * 
 */

#ifndef OAICryptoKey_H
#define OAICryptoKey_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICryptoKey : public OAIObject {
public:
    OAICryptoKey();
    OAICryptoKey(QString json);
    ~OAICryptoKey() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAlgorithm() const;
    void setAlgorithm(const QString &algorithm);
    bool is_algorithm_Set() const;
    bool is_algorithm_Valid() const;

    qint32 getBits() const;
    void setBits(const qint32 &bits);
    bool is_bits_Set() const;
    bool is_bits_Valid() const;

    QString getFileHash() const;
    void setFileHash(const QString &file_hash);
    bool is_file_hash_Set() const;
    bool is_file_hash_Valid() const;

    QString getFileName() const;
    void setFileName(const QString &file_name);
    bool is_file_name_Set() const;
    bool is_file_name_Valid() const;

    QString getPemType() const;
    void setPemType(const QString &pem_type);
    bool is_pem_type_Set() const;
    bool is_pem_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_algorithm;
    bool m_algorithm_isSet;
    bool m_algorithm_isValid;

    qint32 m_bits;
    bool m_bits_isSet;
    bool m_bits_isValid;

    QString m_file_hash;
    bool m_file_hash_isSet;
    bool m_file_hash_isValid;

    QString m_file_name;
    bool m_file_name_isSet;
    bool m_file_name_isValid;

    QString m_pem_type;
    bool m_pem_type_isSet;
    bool m_pem_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICryptoKey)

#endif // OAICryptoKey_H
