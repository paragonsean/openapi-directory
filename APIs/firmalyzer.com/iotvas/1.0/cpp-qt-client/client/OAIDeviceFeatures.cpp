/**
 * IoTVAS API
 * IOTVAS API enables you to discover IoT/Connected devices in the network and provides      detailed real-time risk analysis, including firmware vulnerability analysis without requiring the user to upload the firmware file.     Please visit the [signup page](https://iotvas-api.firmalyzer.com/portal/signup) to create an API key.     IoTVAS API can be easily integrated with vulnerability scanning and network port scanner tools. For example,     we have also released the [IOTVAS NSE script](https://github.com/firmalyzer/iotvas-nmap) that turns the nmap port scanner      to a IoT/connected device discovery and real-time risk assessment tool. For more infromation on IoTVAS and other      solutions please visit [Firmalyzer web site](https://www.firmalyzer.com).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeviceFeatures.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeviceFeatures::OAIDeviceFeatures(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeviceFeatures::OAIDeviceFeatures() {
    this->initializeModel();
}

OAIDeviceFeatures::~OAIDeviceFeatures() {}

void OAIDeviceFeatures::initializeModel() {

    m_ftp_banner_isSet = false;
    m_ftp_banner_isValid = false;

    m_hostname_isSet = false;
    m_hostname_isValid = false;

    m_http_response_isSet = false;
    m_http_response_isValid = false;

    m_https_response_isSet = false;
    m_https_response_isValid = false;

    m_nic_mac_isSet = false;
    m_nic_mac_isValid = false;

    m_snmp_sysdescr_isSet = false;
    m_snmp_sysdescr_isValid = false;

    m_snmp_sysoid_isSet = false;
    m_snmp_sysoid_isValid = false;

    m_telnet_banner_isSet = false;
    m_telnet_banner_isValid = false;

    m_upnp_response_isSet = false;
    m_upnp_response_isValid = false;
}

void OAIDeviceFeatures::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeviceFeatures::fromJsonObject(QJsonObject json) {

    m_ftp_banner_isValid = ::OpenAPI::fromJsonValue(m_ftp_banner, json[QString("ftp_banner")]);
    m_ftp_banner_isSet = !json[QString("ftp_banner")].isNull() && m_ftp_banner_isValid;

    m_hostname_isValid = ::OpenAPI::fromJsonValue(m_hostname, json[QString("hostname")]);
    m_hostname_isSet = !json[QString("hostname")].isNull() && m_hostname_isValid;

    m_http_response_isValid = ::OpenAPI::fromJsonValue(m_http_response, json[QString("http_response")]);
    m_http_response_isSet = !json[QString("http_response")].isNull() && m_http_response_isValid;

    m_https_response_isValid = ::OpenAPI::fromJsonValue(m_https_response, json[QString("https_response")]);
    m_https_response_isSet = !json[QString("https_response")].isNull() && m_https_response_isValid;

    m_nic_mac_isValid = ::OpenAPI::fromJsonValue(m_nic_mac, json[QString("nic_mac")]);
    m_nic_mac_isSet = !json[QString("nic_mac")].isNull() && m_nic_mac_isValid;

    m_snmp_sysdescr_isValid = ::OpenAPI::fromJsonValue(m_snmp_sysdescr, json[QString("snmp_sysdescr")]);
    m_snmp_sysdescr_isSet = !json[QString("snmp_sysdescr")].isNull() && m_snmp_sysdescr_isValid;

    m_snmp_sysoid_isValid = ::OpenAPI::fromJsonValue(m_snmp_sysoid, json[QString("snmp_sysoid")]);
    m_snmp_sysoid_isSet = !json[QString("snmp_sysoid")].isNull() && m_snmp_sysoid_isValid;

    m_telnet_banner_isValid = ::OpenAPI::fromJsonValue(m_telnet_banner, json[QString("telnet_banner")]);
    m_telnet_banner_isSet = !json[QString("telnet_banner")].isNull() && m_telnet_banner_isValid;

    m_upnp_response_isValid = ::OpenAPI::fromJsonValue(m_upnp_response, json[QString("upnp_response")]);
    m_upnp_response_isSet = !json[QString("upnp_response")].isNull() && m_upnp_response_isValid;
}

QString OAIDeviceFeatures::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeviceFeatures::asJsonObject() const {
    QJsonObject obj;
    if (m_ftp_banner_isSet) {
        obj.insert(QString("ftp_banner"), ::OpenAPI::toJsonValue(m_ftp_banner));
    }
    if (m_hostname_isSet) {
        obj.insert(QString("hostname"), ::OpenAPI::toJsonValue(m_hostname));
    }
    if (m_http_response_isSet) {
        obj.insert(QString("http_response"), ::OpenAPI::toJsonValue(m_http_response));
    }
    if (m_https_response_isSet) {
        obj.insert(QString("https_response"), ::OpenAPI::toJsonValue(m_https_response));
    }
    if (m_nic_mac_isSet) {
        obj.insert(QString("nic_mac"), ::OpenAPI::toJsonValue(m_nic_mac));
    }
    if (m_snmp_sysdescr_isSet) {
        obj.insert(QString("snmp_sysdescr"), ::OpenAPI::toJsonValue(m_snmp_sysdescr));
    }
    if (m_snmp_sysoid_isSet) {
        obj.insert(QString("snmp_sysoid"), ::OpenAPI::toJsonValue(m_snmp_sysoid));
    }
    if (m_telnet_banner_isSet) {
        obj.insert(QString("telnet_banner"), ::OpenAPI::toJsonValue(m_telnet_banner));
    }
    if (m_upnp_response_isSet) {
        obj.insert(QString("upnp_response"), ::OpenAPI::toJsonValue(m_upnp_response));
    }
    return obj;
}

QString OAIDeviceFeatures::getFtpBanner() const {
    return m_ftp_banner;
}
void OAIDeviceFeatures::setFtpBanner(const QString &ftp_banner) {
    m_ftp_banner = ftp_banner;
    m_ftp_banner_isSet = true;
}

bool OAIDeviceFeatures::is_ftp_banner_Set() const{
    return m_ftp_banner_isSet;
}

bool OAIDeviceFeatures::is_ftp_banner_Valid() const{
    return m_ftp_banner_isValid;
}

QString OAIDeviceFeatures::getHostname() const {
    return m_hostname;
}
void OAIDeviceFeatures::setHostname(const QString &hostname) {
    m_hostname = hostname;
    m_hostname_isSet = true;
}

bool OAIDeviceFeatures::is_hostname_Set() const{
    return m_hostname_isSet;
}

bool OAIDeviceFeatures::is_hostname_Valid() const{
    return m_hostname_isValid;
}

QString OAIDeviceFeatures::getHttpResponse() const {
    return m_http_response;
}
void OAIDeviceFeatures::setHttpResponse(const QString &http_response) {
    m_http_response = http_response;
    m_http_response_isSet = true;
}

bool OAIDeviceFeatures::is_http_response_Set() const{
    return m_http_response_isSet;
}

bool OAIDeviceFeatures::is_http_response_Valid() const{
    return m_http_response_isValid;
}

QString OAIDeviceFeatures::getHttpsResponse() const {
    return m_https_response;
}
void OAIDeviceFeatures::setHttpsResponse(const QString &https_response) {
    m_https_response = https_response;
    m_https_response_isSet = true;
}

bool OAIDeviceFeatures::is_https_response_Set() const{
    return m_https_response_isSet;
}

bool OAIDeviceFeatures::is_https_response_Valid() const{
    return m_https_response_isValid;
}

QString OAIDeviceFeatures::getNicMac() const {
    return m_nic_mac;
}
void OAIDeviceFeatures::setNicMac(const QString &nic_mac) {
    m_nic_mac = nic_mac;
    m_nic_mac_isSet = true;
}

bool OAIDeviceFeatures::is_nic_mac_Set() const{
    return m_nic_mac_isSet;
}

bool OAIDeviceFeatures::is_nic_mac_Valid() const{
    return m_nic_mac_isValid;
}

QString OAIDeviceFeatures::getSnmpSysdescr() const {
    return m_snmp_sysdescr;
}
void OAIDeviceFeatures::setSnmpSysdescr(const QString &snmp_sysdescr) {
    m_snmp_sysdescr = snmp_sysdescr;
    m_snmp_sysdescr_isSet = true;
}

bool OAIDeviceFeatures::is_snmp_sysdescr_Set() const{
    return m_snmp_sysdescr_isSet;
}

bool OAIDeviceFeatures::is_snmp_sysdescr_Valid() const{
    return m_snmp_sysdescr_isValid;
}

QString OAIDeviceFeatures::getSnmpSysoid() const {
    return m_snmp_sysoid;
}
void OAIDeviceFeatures::setSnmpSysoid(const QString &snmp_sysoid) {
    m_snmp_sysoid = snmp_sysoid;
    m_snmp_sysoid_isSet = true;
}

bool OAIDeviceFeatures::is_snmp_sysoid_Set() const{
    return m_snmp_sysoid_isSet;
}

bool OAIDeviceFeatures::is_snmp_sysoid_Valid() const{
    return m_snmp_sysoid_isValid;
}

QString OAIDeviceFeatures::getTelnetBanner() const {
    return m_telnet_banner;
}
void OAIDeviceFeatures::setTelnetBanner(const QString &telnet_banner) {
    m_telnet_banner = telnet_banner;
    m_telnet_banner_isSet = true;
}

bool OAIDeviceFeatures::is_telnet_banner_Set() const{
    return m_telnet_banner_isSet;
}

bool OAIDeviceFeatures::is_telnet_banner_Valid() const{
    return m_telnet_banner_isValid;
}

QString OAIDeviceFeatures::getUpnpResponse() const {
    return m_upnp_response;
}
void OAIDeviceFeatures::setUpnpResponse(const QString &upnp_response) {
    m_upnp_response = upnp_response;
    m_upnp_response_isSet = true;
}

bool OAIDeviceFeatures::is_upnp_response_Set() const{
    return m_upnp_response_isSet;
}

bool OAIDeviceFeatures::is_upnp_response_Valid() const{
    return m_upnp_response_isValid;
}

bool OAIDeviceFeatures::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ftp_banner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hostname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_response_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_https_response_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nic_mac_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snmp_sysdescr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snmp_sysoid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_telnet_banner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upnp_response_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeviceFeatures::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
