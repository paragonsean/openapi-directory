/**
 * IoTVAS API
 * IOTVAS API enables you to discover IoT/Connected devices in the network and provides      detailed real-time risk analysis, including firmware vulnerability analysis without requiring the user to upload the firmware file.     Please visit the [signup page](https://iotvas-api.firmalyzer.com/portal/signup) to create an API key.     IoTVAS API can be easily integrated with vulnerability scanning and network port scanner tools. For example,     we have also released the [IOTVAS NSE script](https://github.com/firmalyzer/iotvas-nmap) that turns the nmap port scanner      to a IoT/connected device discovery and real-time risk assessment tool. For more infromation on IoTVAS and other      solutions please visit [Firmalyzer web site](https://www.firmalyzer.com).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfigIssue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfigIssue::OAIConfigIssue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfigIssue::OAIConfigIssue() {
    this->initializeModel();
}

OAIConfigIssue::~OAIConfigIssue() {}

void OAIConfigIssue::initializeModel() {

    m_config_file_isSet = false;
    m_config_file_isValid = false;

    m_issues_isSet = false;
    m_issues_isValid = false;

    m_service_name_isSet = false;
    m_service_name_isValid = false;

    m_suggestions_isSet = false;
    m_suggestions_isValid = false;
}

void OAIConfigIssue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfigIssue::fromJsonObject(QJsonObject json) {

    m_config_file_isValid = ::OpenAPI::fromJsonValue(m_config_file, json[QString("config_file")]);
    m_config_file_isSet = !json[QString("config_file")].isNull() && m_config_file_isValid;

    m_issues_isValid = ::OpenAPI::fromJsonValue(m_issues, json[QString("issues")]);
    m_issues_isSet = !json[QString("issues")].isNull() && m_issues_isValid;

    m_service_name_isValid = ::OpenAPI::fromJsonValue(m_service_name, json[QString("service_name")]);
    m_service_name_isSet = !json[QString("service_name")].isNull() && m_service_name_isValid;

    m_suggestions_isValid = ::OpenAPI::fromJsonValue(m_suggestions, json[QString("suggestions")]);
    m_suggestions_isSet = !json[QString("suggestions")].isNull() && m_suggestions_isValid;
}

QString OAIConfigIssue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfigIssue::asJsonObject() const {
    QJsonObject obj;
    if (m_config_file_isSet) {
        obj.insert(QString("config_file"), ::OpenAPI::toJsonValue(m_config_file));
    }
    if (m_issues.size() > 0) {
        obj.insert(QString("issues"), ::OpenAPI::toJsonValue(m_issues));
    }
    if (m_service_name_isSet) {
        obj.insert(QString("service_name"), ::OpenAPI::toJsonValue(m_service_name));
    }
    if (m_suggestions.size() > 0) {
        obj.insert(QString("suggestions"), ::OpenAPI::toJsonValue(m_suggestions));
    }
    return obj;
}

QString OAIConfigIssue::getConfigFile() const {
    return m_config_file;
}
void OAIConfigIssue::setConfigFile(const QString &config_file) {
    m_config_file = config_file;
    m_config_file_isSet = true;
}

bool OAIConfigIssue::is_config_file_Set() const{
    return m_config_file_isSet;
}

bool OAIConfigIssue::is_config_file_Valid() const{
    return m_config_file_isValid;
}

QList<QString> OAIConfigIssue::getIssues() const {
    return m_issues;
}
void OAIConfigIssue::setIssues(const QList<QString> &issues) {
    m_issues = issues;
    m_issues_isSet = true;
}

bool OAIConfigIssue::is_issues_Set() const{
    return m_issues_isSet;
}

bool OAIConfigIssue::is_issues_Valid() const{
    return m_issues_isValid;
}

QString OAIConfigIssue::getServiceName() const {
    return m_service_name;
}
void OAIConfigIssue::setServiceName(const QString &service_name) {
    m_service_name = service_name;
    m_service_name_isSet = true;
}

bool OAIConfigIssue::is_service_name_Set() const{
    return m_service_name_isSet;
}

bool OAIConfigIssue::is_service_name_Valid() const{
    return m_service_name_isValid;
}

QList<QString> OAIConfigIssue::getSuggestions() const {
    return m_suggestions;
}
void OAIConfigIssue::setSuggestions(const QList<QString> &suggestions) {
    m_suggestions = suggestions;
    m_suggestions_isSet = true;
}

bool OAIConfigIssue::is_suggestions_Set() const{
    return m_suggestions_isSet;
}

bool OAIConfigIssue::is_suggestions_Valid() const{
    return m_suggestions_isValid;
}

bool OAIConfigIssue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_config_file_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issues.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggestions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfigIssue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
