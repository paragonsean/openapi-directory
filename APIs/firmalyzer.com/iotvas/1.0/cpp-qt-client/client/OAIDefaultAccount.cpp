/**
 * IoTVAS API
 * IOTVAS API enables you to discover IoT/Connected devices in the network and provides      detailed real-time risk analysis, including firmware vulnerability analysis without requiring the user to upload the firmware file.     Please visit the [signup page](https://iotvas-api.firmalyzer.com/portal/signup) to create an API key.     IoTVAS API can be easily integrated with vulnerability scanning and network port scanner tools. For example,     we have also released the [IOTVAS NSE script](https://github.com/firmalyzer/iotvas-nmap) that turns the nmap port scanner      to a IoT/connected device discovery and real-time risk assessment tool. For more infromation on IoTVAS and other      solutions please visit [Firmalyzer web site](https://www.firmalyzer.com).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDefaultAccount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDefaultAccount::OAIDefaultAccount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDefaultAccount::OAIDefaultAccount() {
    this->initializeModel();
}

OAIDefaultAccount::~OAIDefaultAccount() {}

void OAIDefaultAccount::initializeModel() {

    m_gid_isSet = false;
    m_gid_isValid = false;

    m_hash_algorithm_isSet = false;
    m_hash_algorithm_isValid = false;

    m_home_dir_isSet = false;
    m_home_dir_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_pwd_hash_isSet = false;
    m_pwd_hash_isValid = false;

    m_shell_isSet = false;
    m_shell_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;
}

void OAIDefaultAccount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDefaultAccount::fromJsonObject(QJsonObject json) {

    m_gid_isValid = ::OpenAPI::fromJsonValue(m_gid, json[QString("gid")]);
    m_gid_isSet = !json[QString("gid")].isNull() && m_gid_isValid;

    m_hash_algorithm_isValid = ::OpenAPI::fromJsonValue(m_hash_algorithm, json[QString("hash_algorithm")]);
    m_hash_algorithm_isSet = !json[QString("hash_algorithm")].isNull() && m_hash_algorithm_isValid;

    m_home_dir_isValid = ::OpenAPI::fromJsonValue(m_home_dir, json[QString("home_dir")]);
    m_home_dir_isSet = !json[QString("home_dir")].isNull() && m_home_dir_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_pwd_hash_isValid = ::OpenAPI::fromJsonValue(m_pwd_hash, json[QString("pwd_hash")]);
    m_pwd_hash_isSet = !json[QString("pwd_hash")].isNull() && m_pwd_hash_isValid;

    m_shell_isValid = ::OpenAPI::fromJsonValue(m_shell, json[QString("shell")]);
    m_shell_isSet = !json[QString("shell")].isNull() && m_shell_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;
}

QString OAIDefaultAccount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDefaultAccount::asJsonObject() const {
    QJsonObject obj;
    if (m_gid_isSet) {
        obj.insert(QString("gid"), ::OpenAPI::toJsonValue(m_gid));
    }
    if (m_hash_algorithm_isSet) {
        obj.insert(QString("hash_algorithm"), ::OpenAPI::toJsonValue(m_hash_algorithm));
    }
    if (m_home_dir_isSet) {
        obj.insert(QString("home_dir"), ::OpenAPI::toJsonValue(m_home_dir));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_pwd_hash_isSet) {
        obj.insert(QString("pwd_hash"), ::OpenAPI::toJsonValue(m_pwd_hash));
    }
    if (m_shell_isSet) {
        obj.insert(QString("shell"), ::OpenAPI::toJsonValue(m_shell));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    return obj;
}

qint32 OAIDefaultAccount::getGid() const {
    return m_gid;
}
void OAIDefaultAccount::setGid(const qint32 &gid) {
    m_gid = gid;
    m_gid_isSet = true;
}

bool OAIDefaultAccount::is_gid_Set() const{
    return m_gid_isSet;
}

bool OAIDefaultAccount::is_gid_Valid() const{
    return m_gid_isValid;
}

QString OAIDefaultAccount::getHashAlgorithm() const {
    return m_hash_algorithm;
}
void OAIDefaultAccount::setHashAlgorithm(const QString &hash_algorithm) {
    m_hash_algorithm = hash_algorithm;
    m_hash_algorithm_isSet = true;
}

bool OAIDefaultAccount::is_hash_algorithm_Set() const{
    return m_hash_algorithm_isSet;
}

bool OAIDefaultAccount::is_hash_algorithm_Valid() const{
    return m_hash_algorithm_isValid;
}

QString OAIDefaultAccount::getHomeDir() const {
    return m_home_dir;
}
void OAIDefaultAccount::setHomeDir(const QString &home_dir) {
    m_home_dir = home_dir;
    m_home_dir_isSet = true;
}

bool OAIDefaultAccount::is_home_dir_Set() const{
    return m_home_dir_isSet;
}

bool OAIDefaultAccount::is_home_dir_Valid() const{
    return m_home_dir_isValid;
}

QString OAIDefaultAccount::getName() const {
    return m_name;
}
void OAIDefaultAccount::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDefaultAccount::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDefaultAccount::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDefaultAccount::getPwdHash() const {
    return m_pwd_hash;
}
void OAIDefaultAccount::setPwdHash(const QString &pwd_hash) {
    m_pwd_hash = pwd_hash;
    m_pwd_hash_isSet = true;
}

bool OAIDefaultAccount::is_pwd_hash_Set() const{
    return m_pwd_hash_isSet;
}

bool OAIDefaultAccount::is_pwd_hash_Valid() const{
    return m_pwd_hash_isValid;
}

QString OAIDefaultAccount::getShell() const {
    return m_shell;
}
void OAIDefaultAccount::setShell(const QString &shell) {
    m_shell = shell;
    m_shell_isSet = true;
}

bool OAIDefaultAccount::is_shell_Set() const{
    return m_shell_isSet;
}

bool OAIDefaultAccount::is_shell_Valid() const{
    return m_shell_isValid;
}

qint32 OAIDefaultAccount::getUid() const {
    return m_uid;
}
void OAIDefaultAccount::setUid(const qint32 &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIDefaultAccount::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIDefaultAccount::is_uid_Valid() const{
    return m_uid_isValid;
}

bool OAIDefaultAccount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hash_algorithm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_dir_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pwd_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shell_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDefaultAccount::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
