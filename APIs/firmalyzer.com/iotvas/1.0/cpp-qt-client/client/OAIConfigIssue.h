/**
 * IoTVAS API
 * IOTVAS API enables you to discover IoT/Connected devices in the network and provides      detailed real-time risk analysis, including firmware vulnerability analysis without requiring the user to upload the firmware file.     Please visit the [signup page](https://iotvas-api.firmalyzer.com/portal/signup) to create an API key.     IoTVAS API can be easily integrated with vulnerability scanning and network port scanner tools. For example,     we have also released the [IOTVAS NSE script](https://github.com/firmalyzer/iotvas-nmap) that turns the nmap port scanner      to a IoT/connected device discovery and real-time risk assessment tool. For more infromation on IoTVAS and other      solutions please visit [Firmalyzer web site](https://www.firmalyzer.com).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIConfigIssue.h
 *
 * 
 */

#ifndef OAIConfigIssue_H
#define OAIConfigIssue_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIConfigIssue : public OAIObject {
public:
    OAIConfigIssue();
    OAIConfigIssue(QString json);
    ~OAIConfigIssue() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getConfigFile() const;
    void setConfigFile(const QString &config_file);
    bool is_config_file_Set() const;
    bool is_config_file_Valid() const;

    QList<QString> getIssues() const;
    void setIssues(const QList<QString> &issues);
    bool is_issues_Set() const;
    bool is_issues_Valid() const;

    QString getServiceName() const;
    void setServiceName(const QString &service_name);
    bool is_service_name_Set() const;
    bool is_service_name_Valid() const;

    QList<QString> getSuggestions() const;
    void setSuggestions(const QList<QString> &suggestions);
    bool is_suggestions_Set() const;
    bool is_suggestions_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_config_file;
    bool m_config_file_isSet;
    bool m_config_file_isValid;

    QList<QString> m_issues;
    bool m_issues_isSet;
    bool m_issues_isValid;

    QString m_service_name;
    bool m_service_name_isSet;
    bool m_service_name_isValid;

    QList<QString> m_suggestions;
    bool m_suggestions_isSet;
    bool m_suggestions_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIConfigIssue)

#endif // OAIConfigIssue_H
