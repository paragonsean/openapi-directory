/**
 * IoTVAS API
 * IOTVAS API enables you to discover IoT/Connected devices in the network and provides      detailed real-time risk analysis, including firmware vulnerability analysis without requiring the user to upload the firmware file.     Please visit the [signup page](https://iotvas-api.firmalyzer.com/portal/signup) to create an API key.     IoTVAS API can be easily integrated with vulnerability scanning and network port scanner tools. For example,     we have also released the [IOTVAS NSE script](https://github.com/firmalyzer/iotvas-nmap) that turns the nmap port scanner      to a IoT/connected device discovery and real-time risk assessment tool. For more infromation on IoTVAS and other      solutions please visit [Firmalyzer web site](https://www.firmalyzer.com).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFirmwareInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFirmwareInfo::OAIFirmwareInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFirmwareInfo::OAIFirmwareInfo() {
    this->initializeModel();
}

OAIFirmwareInfo::~OAIFirmwareInfo() {}

void OAIFirmwareInfo::initializeModel() {

    m_download_url_isSet = false;
    m_download_url_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_release_date_isSet = false;
    m_release_date_isValid = false;

    m_sha2_isSet = false;
    m_sha2_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIFirmwareInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFirmwareInfo::fromJsonObject(QJsonObject json) {

    m_download_url_isValid = ::OpenAPI::fromJsonValue(m_download_url, json[QString("download_url")]);
    m_download_url_isSet = !json[QString("download_url")].isNull() && m_download_url_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_release_date_isValid = ::OpenAPI::fromJsonValue(m_release_date, json[QString("release_date")]);
    m_release_date_isSet = !json[QString("release_date")].isNull() && m_release_date_isValid;

    m_sha2_isValid = ::OpenAPI::fromJsonValue(m_sha2, json[QString("sha2")]);
    m_sha2_isSet = !json[QString("sha2")].isNull() && m_sha2_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIFirmwareInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFirmwareInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_download_url_isSet) {
        obj.insert(QString("download_url"), ::OpenAPI::toJsonValue(m_download_url));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_release_date_isSet) {
        obj.insert(QString("release_date"), ::OpenAPI::toJsonValue(m_release_date));
    }
    if (m_sha2_isSet) {
        obj.insert(QString("sha2"), ::OpenAPI::toJsonValue(m_sha2));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIFirmwareInfo::getDownloadUrl() const {
    return m_download_url;
}
void OAIFirmwareInfo::setDownloadUrl(const QString &download_url) {
    m_download_url = download_url;
    m_download_url_isSet = true;
}

bool OAIFirmwareInfo::is_download_url_Set() const{
    return m_download_url_isSet;
}

bool OAIFirmwareInfo::is_download_url_Valid() const{
    return m_download_url_isValid;
}

QString OAIFirmwareInfo::getName() const {
    return m_name;
}
void OAIFirmwareInfo::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFirmwareInfo::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFirmwareInfo::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIFirmwareInfo::getReleaseDate() const {
    return m_release_date;
}
void OAIFirmwareInfo::setReleaseDate(const QString &release_date) {
    m_release_date = release_date;
    m_release_date_isSet = true;
}

bool OAIFirmwareInfo::is_release_date_Set() const{
    return m_release_date_isSet;
}

bool OAIFirmwareInfo::is_release_date_Valid() const{
    return m_release_date_isValid;
}

QString OAIFirmwareInfo::getSha2() const {
    return m_sha2;
}
void OAIFirmwareInfo::setSha2(const QString &sha2) {
    m_sha2 = sha2;
    m_sha2_isSet = true;
}

bool OAIFirmwareInfo::is_sha2_Set() const{
    return m_sha2_isSet;
}

bool OAIFirmwareInfo::is_sha2_Valid() const{
    return m_sha2_isValid;
}

QString OAIFirmwareInfo::getVersion() const {
    return m_version;
}
void OAIFirmwareInfo::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIFirmwareInfo::is_version_Set() const{
    return m_version_isSet;
}

bool OAIFirmwareInfo::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIFirmwareInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_download_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sha2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFirmwareInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
