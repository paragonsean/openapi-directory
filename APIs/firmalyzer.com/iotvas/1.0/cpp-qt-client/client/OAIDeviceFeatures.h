/**
 * IoTVAS API
 * IOTVAS API enables you to discover IoT/Connected devices in the network and provides      detailed real-time risk analysis, including firmware vulnerability analysis without requiring the user to upload the firmware file.     Please visit the [signup page](https://iotvas-api.firmalyzer.com/portal/signup) to create an API key.     IoTVAS API can be easily integrated with vulnerability scanning and network port scanner tools. For example,     we have also released the [IOTVAS NSE script](https://github.com/firmalyzer/iotvas-nmap) that turns the nmap port scanner      to a IoT/connected device discovery and real-time risk assessment tool. For more infromation on IoTVAS and other      solutions please visit [Firmalyzer web site](https://www.firmalyzer.com).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDeviceFeatures.h
 *
 * 
 */

#ifndef OAIDeviceFeatures_H
#define OAIDeviceFeatures_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDeviceFeatures : public OAIObject {
public:
    OAIDeviceFeatures();
    OAIDeviceFeatures(QString json);
    ~OAIDeviceFeatures() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getFtpBanner() const;
    void setFtpBanner(const QString &ftp_banner);
    bool is_ftp_banner_Set() const;
    bool is_ftp_banner_Valid() const;

    QString getHostname() const;
    void setHostname(const QString &hostname);
    bool is_hostname_Set() const;
    bool is_hostname_Valid() const;

    QString getHttpResponse() const;
    void setHttpResponse(const QString &http_response);
    bool is_http_response_Set() const;
    bool is_http_response_Valid() const;

    QString getHttpsResponse() const;
    void setHttpsResponse(const QString &https_response);
    bool is_https_response_Set() const;
    bool is_https_response_Valid() const;

    QString getNicMac() const;
    void setNicMac(const QString &nic_mac);
    bool is_nic_mac_Set() const;
    bool is_nic_mac_Valid() const;

    QString getSnmpSysdescr() const;
    void setSnmpSysdescr(const QString &snmp_sysdescr);
    bool is_snmp_sysdescr_Set() const;
    bool is_snmp_sysdescr_Valid() const;

    QString getSnmpSysoid() const;
    void setSnmpSysoid(const QString &snmp_sysoid);
    bool is_snmp_sysoid_Set() const;
    bool is_snmp_sysoid_Valid() const;

    QString getTelnetBanner() const;
    void setTelnetBanner(const QString &telnet_banner);
    bool is_telnet_banner_Set() const;
    bool is_telnet_banner_Valid() const;

    QString getUpnpResponse() const;
    void setUpnpResponse(const QString &upnp_response);
    bool is_upnp_response_Set() const;
    bool is_upnp_response_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_ftp_banner;
    bool m_ftp_banner_isSet;
    bool m_ftp_banner_isValid;

    QString m_hostname;
    bool m_hostname_isSet;
    bool m_hostname_isValid;

    QString m_http_response;
    bool m_http_response_isSet;
    bool m_http_response_isValid;

    QString m_https_response;
    bool m_https_response_isSet;
    bool m_https_response_isValid;

    QString m_nic_mac;
    bool m_nic_mac_isSet;
    bool m_nic_mac_isValid;

    QString m_snmp_sysdescr;
    bool m_snmp_sysdescr_isSet;
    bool m_snmp_sysdescr_isValid;

    QString m_snmp_sysoid;
    bool m_snmp_sysoid_isSet;
    bool m_snmp_sysoid_isValid;

    QString m_telnet_banner;
    bool m_telnet_banner_isSet;
    bool m_telnet_banner_isValid;

    QString m_upnp_response;
    bool m_upnp_response_isSet;
    bool m_upnp_response_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDeviceFeatures)

#endif // OAIDeviceFeatures_H
