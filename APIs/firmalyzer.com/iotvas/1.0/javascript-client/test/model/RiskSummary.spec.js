/**
 * IoTVAS API
 * IOTVAS API enables you to discover IoT/Connected devices in the network and provides      detailed real-time risk analysis, including firmware vulnerability analysis without requiring the user to upload the firmware file.     Please visit the [signup page](https://iotvas-api.firmalyzer.com/portal/signup) to create an API key.     IoTVAS API can be easily integrated with vulnerability scanning and network port scanner tools. For example,     we have also released the [IOTVAS NSE script](https://github.com/firmalyzer/iotvas-nmap) that turns the nmap port scanner      to a IoT/connected device discovery and real-time risk assessment tool. For more infromation on IoTVAS and other      solutions please visit [Firmalyzer web site](https://www.firmalyzer.com).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.IoTvasApi);
  }
}(this, function(expect, IoTvasApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new IoTvasApi.RiskSummary();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('RiskSummary', function() {
    it('should create an instance of RiskSummary', function() {
      // uncomment below and update the code to test RiskSummary
      //var instance = new IoTvasApi.RiskSummary();
      //expect(instance).to.be.a(IoTvasApi.RiskSummary);
    });

    it('should have the property clientToolsRisk (base name: "client_tools_risk")', function() {
      // uncomment below and update the code to test the property clientToolsRisk
      //var instance = new IoTvasApi.RiskSummary();
      //expect(instance).to.be();
    });

    it('should have the property cryptoRisk (base name: "crypto_risk")', function() {
      // uncomment below and update the code to test the property cryptoRisk
      //var instance = new IoTvasApi.RiskSummary();
      //expect(instance).to.be();
    });

    it('should have the property kernelRisk (base name: "kernel_risk")', function() {
      // uncomment below and update the code to test the property kernelRisk
      //var instance = new IoTvasApi.RiskSummary();
      //expect(instance).to.be();
    });

    it('should have the property netServicesRisk (base name: "net_services_risk")', function() {
      // uncomment below and update the code to test the property netServicesRisk
      //var instance = new IoTvasApi.RiskSummary();
      //expect(instance).to.be();
    });

  });

}));
