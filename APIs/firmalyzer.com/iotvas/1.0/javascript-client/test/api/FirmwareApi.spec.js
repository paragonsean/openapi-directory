/**
 * IoTVAS API
 * IOTVAS API enables you to discover IoT/Connected devices in the network and provides      detailed real-time risk analysis, including firmware vulnerability analysis without requiring the user to upload the firmware file.     Please visit the [signup page](https://iotvas-api.firmalyzer.com/portal/signup) to create an API key.     IoTVAS API can be easily integrated with vulnerability scanning and network port scanner tools. For example,     we have also released the [IOTVAS NSE script](https://github.com/firmalyzer/iotvas-nmap) that turns the nmap port scanner      to a IoT/connected device discovery and real-time risk assessment tool. For more infromation on IoTVAS and other      solutions please visit [Firmalyzer web site](https://www.firmalyzer.com).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.IoTvasApi);
  }
}(this, function(expect, IoTvasApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new IoTvasApi.FirmwareApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('FirmwareApi', function() {
    describe('getAccounts', function() {
      it('should call getAccounts successfully', function(done) {
        //uncomment below and update the code to test getAccounts
        //instance.getAccounts(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getConfigIssues', function() {
      it('should call getConfigIssues successfully', function(done) {
        //uncomment below and update the code to test getConfigIssues
        //instance.getConfigIssues(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getExpiredCerts', function() {
      it('should call getExpiredCerts successfully', function(done) {
        //uncomment below and update the code to test getExpiredCerts
        //instance.getExpiredCerts(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPrivateKeys', function() {
      it('should call getPrivateKeys successfully', function(done) {
        //uncomment below and update the code to test getPrivateKeys
        //instance.getPrivateKeys(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRisk', function() {
      it('should call getRisk successfully', function(done) {
        //uncomment below and update the code to test getRisk
        //instance.getRisk(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getWeakCerts', function() {
      it('should call getWeakCerts successfully', function(done) {
        //uncomment below and update the code to test getWeakCerts
        //instance.getWeakCerts(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getWeakKeys', function() {
      it('should call getWeakKeys successfully', function(done) {
        //uncomment below and update the code to test getWeakKeys
        //instance.getWeakKeys(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
