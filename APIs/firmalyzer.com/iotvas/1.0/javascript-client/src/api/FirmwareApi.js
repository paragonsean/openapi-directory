/**
 * IoTVAS API
 * IOTVAS API enables you to discover IoT/Connected devices in the network and provides      detailed real-time risk analysis, including firmware vulnerability analysis without requiring the user to upload the firmware file.     Please visit the [signup page](https://iotvas-api.firmalyzer.com/portal/signup) to create an API key.     IoTVAS API can be easily integrated with vulnerability scanning and network port scanner tools. For example,     we have also released the [IOTVAS NSE script](https://github.com/firmalyzer/iotvas-nmap) that turns the nmap port scanner      to a IoT/connected device discovery and real-time risk assessment tool. For more infromation on IoTVAS and other      solutions please visit [Firmalyzer web site](https://www.firmalyzer.com).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConfigIssue from '../model/ConfigIssue';
import CryptoKey from '../model/CryptoKey';
import DefaultAccount from '../model/DefaultAccount';
import ExpiredCert from '../model/ExpiredCert';
import FirmwareRisk from '../model/FirmwareRisk';
import HTTPValidationError from '../model/HTTPValidationError';
import WeakCert from '../model/WeakCert';

/**
* Firmware service.
* @module api/FirmwareApi
* @version 1.0
*/
export default class FirmwareApi {

    /**
    * Constructs a new FirmwareApi. 
    * @alias module:api/FirmwareApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAccounts operation.
     * @callback module:api/FirmwareApi~getAccountsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DefaultAccount>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get default accounts and password hashes of a firmware
     * @param {String} firmwareHash SHA2 hash of device firmware
     * @param {module:api/FirmwareApi~getAccountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DefaultAccount>}
     */
    getAccounts(firmwareHash, callback) {
      let postBody = null;
      // verify the required parameter 'firmwareHash' is set
      if (firmwareHash === undefined || firmwareHash === null) {
        throw new Error("Missing the required parameter 'firmwareHash' when calling getAccounts");
      }

      let pathParams = {
        'firmware_hash': firmwareHash
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api-key-header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DefaultAccount];
      return this.apiClient.callApi(
        '/firmware/{firmware_hash}/accounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConfigIssues operation.
     * @callback module:api/FirmwareApi~getConfigIssuesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ConfigIssue>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get default OS configuration issues of a device firmware
     * @param {String} firmwareHash SHA2 hash of device firmware
     * @param {module:api/FirmwareApi~getConfigIssuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ConfigIssue>}
     */
    getConfigIssues(firmwareHash, callback) {
      let postBody = null;
      // verify the required parameter 'firmwareHash' is set
      if (firmwareHash === undefined || firmwareHash === null) {
        throw new Error("Missing the required parameter 'firmwareHash' when calling getConfigIssues");
      }

      let pathParams = {
        'firmware_hash': firmwareHash
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api-key-header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ConfigIssue];
      return this.apiClient.callApi(
        '/firmware/{firmware_hash}/config-issues', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getExpiredCerts operation.
     * @callback module:api/FirmwareApi~getExpiredCertsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ExpiredCert>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get expired digital certificates embedded in a device firmware
     * @param {String} firmwareHash SHA2 hash of device firmware
     * @param {module:api/FirmwareApi~getExpiredCertsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ExpiredCert>}
     */
    getExpiredCerts(firmwareHash, callback) {
      let postBody = null;
      // verify the required parameter 'firmwareHash' is set
      if (firmwareHash === undefined || firmwareHash === null) {
        throw new Error("Missing the required parameter 'firmwareHash' when calling getExpiredCerts");
      }

      let pathParams = {
        'firmware_hash': firmwareHash
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api-key-header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ExpiredCert];
      return this.apiClient.callApi(
        '/firmware/{firmware_hash}/expired-certs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPrivateKeys operation.
     * @callback module:api/FirmwareApi~getPrivateKeysCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CryptoKey>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get private crypto keys embedded in a device firmware
     * @param {String} firmwareHash SHA2 hash of device firmware
     * @param {module:api/FirmwareApi~getPrivateKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CryptoKey>}
     */
    getPrivateKeys(firmwareHash, callback) {
      let postBody = null;
      // verify the required parameter 'firmwareHash' is set
      if (firmwareHash === undefined || firmwareHash === null) {
        throw new Error("Missing the required parameter 'firmwareHash' when calling getPrivateKeys");
      }

      let pathParams = {
        'firmware_hash': firmwareHash
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api-key-header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CryptoKey];
      return this.apiClient.callApi(
        '/firmware/{firmware_hash}/private-keys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRisk operation.
     * @callback module:api/FirmwareApi~getRiskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FirmwareRisk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get iot device firmware risk analysis
     * @param {String} firmwareHash SHA2 hash of device firmware
     * @param {module:api/FirmwareApi~getRiskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FirmwareRisk}
     */
    getRisk(firmwareHash, callback) {
      let postBody = null;
      // verify the required parameter 'firmwareHash' is set
      if (firmwareHash === undefined || firmwareHash === null) {
        throw new Error("Missing the required parameter 'firmwareHash' when calling getRisk");
      }

      let pathParams = {
        'firmware_hash': firmwareHash
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api-key-header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FirmwareRisk;
      return this.apiClient.callApi(
        '/firmware/{firmware_hash}/risk', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWeakCerts operation.
     * @callback module:api/FirmwareApi~getWeakCertsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WeakCert>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get certificates with weak fingerprinting algorithms that are mebedded in a device firmware
     * @param {String} firmwareHash SHA2 hash of device firmware
     * @param {module:api/FirmwareApi~getWeakCertsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/WeakCert>}
     */
    getWeakCerts(firmwareHash, callback) {
      let postBody = null;
      // verify the required parameter 'firmwareHash' is set
      if (firmwareHash === undefined || firmwareHash === null) {
        throw new Error("Missing the required parameter 'firmwareHash' when calling getWeakCerts");
      }

      let pathParams = {
        'firmware_hash': firmwareHash
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api-key-header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [WeakCert];
      return this.apiClient.callApi(
        '/firmware/{firmware_hash}/weak-certs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWeakKeys operation.
     * @callback module:api/FirmwareApi~getWeakKeysCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CryptoKey>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get weak crypto keys with short length
     * @param {String} firmwareHash SHA2 hash of device firmware
     * @param {module:api/FirmwareApi~getWeakKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CryptoKey>}
     */
    getWeakKeys(firmwareHash, callback) {
      let postBody = null;
      // verify the required parameter 'firmwareHash' is set
      if (firmwareHash === undefined || firmwareHash === null) {
        throw new Error("Missing the required parameter 'firmwareHash' when calling getWeakKeys");
      }

      let pathParams = {
        'firmware_hash': firmwareHash
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api-key-header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CryptoKey];
      return this.apiClient.callApi(
        '/firmware/{firmware_hash}/weak-keys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
