/**
 * IoTVAS API
 * IOTVAS API enables you to discover IoT/Connected devices in the network and provides      detailed real-time risk analysis, including firmware vulnerability analysis without requiring the user to upload the firmware file.     Please visit the [signup page](https://iotvas-api.firmalyzer.com/portal/signup) to create an API key.     IoTVAS API can be easily integrated with vulnerability scanning and network port scanner tools. For example,     we have also released the [IOTVAS NSE script](https://github.com/firmalyzer/iotvas-nmap) that turns the nmap port scanner      to a IoT/connected device discovery and real-time risk assessment tool. For more infromation on IoTVAS and other      solutions please visit [Firmalyzer web site](https://www.firmalyzer.com).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DeviceFeatures from '../model/DeviceFeatures';
import DeviceInfo from '../model/DeviceInfo';
import HTTPValidationError from '../model/HTTPValidationError';

/**
* Device service.
* @module api/DeviceApi
* @version 1.0
*/
export default class DeviceApi {

    /**
    * Constructs a new DeviceApi. 
    * @alias module:api/DeviceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the detectDevice operation.
     * @callback module:api/DeviceApi~detectDeviceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Detect iot device by service banners and mac address
     * Use device service banners and mac address captured by your network port scanner, vulnerability assessment or asset discovery tools to detect device maker, model and firmware information
     * @param {module:model/DeviceFeatures} deviceFeatures 
     * @param {module:api/DeviceApi~detectDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceInfo}
     */
    detectDevice(deviceFeatures, callback) {
      let postBody = deviceFeatures;
      // verify the required parameter 'deviceFeatures' is set
      if (deviceFeatures === undefined || deviceFeatures === null) {
        throw new Error("Missing the required parameter 'deviceFeatures' when calling detectDevice");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api-key-header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeviceInfo;
      return this.apiClient.callApi(
        '/device/detect', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
