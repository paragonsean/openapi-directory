/**
 * IoTVAS API
 * IOTVAS API enables you to discover IoT/Connected devices in the network and provides      detailed real-time risk analysis, including firmware vulnerability analysis without requiring the user to upload the firmware file.     Please visit the [signup page](https://iotvas-api.firmalyzer.com/portal/signup) to create an API key.     IoTVAS API can be easily integrated with vulnerability scanning and network port scanner tools. For example,     we have also released the [IOTVAS NSE script](https://github.com/firmalyzer/iotvas-nmap) that turns the nmap port scanner      to a IoT/connected device discovery and real-time risk assessment tool. For more infromation on IoTVAS and other      solutions please visit [Firmalyzer web site](https://www.firmalyzer.com).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import ConfigIssue from './model/ConfigIssue';
import CryptoKey from './model/CryptoKey';
import DefaultAccount from './model/DefaultAccount';
import DeviceFeatures from './model/DeviceFeatures';
import DeviceInfo from './model/DeviceInfo';
import ExpiredCert from './model/ExpiredCert';
import FirmwareInfo from './model/FirmwareInfo';
import FirmwareRisk from './model/FirmwareRisk';
import HTTPValidationError from './model/HTTPValidationError';
import PublicKey from './model/PublicKey';
import RiskSummary from './model/RiskSummary';
import ValidationError from './model/ValidationError';
import Vulnerability from './model/Vulnerability';
import VulnerableComponent from './model/VulnerableComponent';
import WeakCert from './model/WeakCert';
import DeviceApi from './api/DeviceApi';
import FirmwareApi from './api/FirmwareApi';


/**
* IOTVAS API enables you to discover IoT/Connected devices in the network and provides      detailed real-time risk analysis, including firmware vulnerability analysis without requiring the user to upload the firmware file.     Please visit the [signup page](https://iotvas-api.firmalyzer.com/portal/signup) to create an API key.     IoTVAS API can be easily integrated with vulnerability scanning and network port scanner tools. For example,     we have also released the [IOTVAS NSE script](https://github.com/firmalyzer/iotvas-nmap) that turns the nmap port scanner      to a IoT/connected device discovery and real-time risk assessment tool. For more infromation on IoTVAS and other      solutions please visit [Firmalyzer web site](https://www.firmalyzer.com)..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var IoTvasApi = require('index'); // See note below*.
* var xxxSvc = new IoTvasApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new IoTvasApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new IoTvasApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new IoTvasApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The ConfigIssue model constructor.
     * @property {module:model/ConfigIssue}
     */
    ConfigIssue,

    /**
     * The CryptoKey model constructor.
     * @property {module:model/CryptoKey}
     */
    CryptoKey,

    /**
     * The DefaultAccount model constructor.
     * @property {module:model/DefaultAccount}
     */
    DefaultAccount,

    /**
     * The DeviceFeatures model constructor.
     * @property {module:model/DeviceFeatures}
     */
    DeviceFeatures,

    /**
     * The DeviceInfo model constructor.
     * @property {module:model/DeviceInfo}
     */
    DeviceInfo,

    /**
     * The ExpiredCert model constructor.
     * @property {module:model/ExpiredCert}
     */
    ExpiredCert,

    /**
     * The FirmwareInfo model constructor.
     * @property {module:model/FirmwareInfo}
     */
    FirmwareInfo,

    /**
     * The FirmwareRisk model constructor.
     * @property {module:model/FirmwareRisk}
     */
    FirmwareRisk,

    /**
     * The HTTPValidationError model constructor.
     * @property {module:model/HTTPValidationError}
     */
    HTTPValidationError,

    /**
     * The PublicKey model constructor.
     * @property {module:model/PublicKey}
     */
    PublicKey,

    /**
     * The RiskSummary model constructor.
     * @property {module:model/RiskSummary}
     */
    RiskSummary,

    /**
     * The ValidationError model constructor.
     * @property {module:model/ValidationError}
     */
    ValidationError,

    /**
     * The Vulnerability model constructor.
     * @property {module:model/Vulnerability}
     */
    Vulnerability,

    /**
     * The VulnerableComponent model constructor.
     * @property {module:model/VulnerableComponent}
     */
    VulnerableComponent,

    /**
     * The WeakCert model constructor.
     * @property {module:model/WeakCert}
     */
    WeakCert,

    /**
    * The DeviceApi service constructor.
    * @property {module:api/DeviceApi}
    */
    DeviceApi,

    /**
    * The FirmwareApi service constructor.
    * @property {module:api/FirmwareApi}
    */
    FirmwareApi
};
