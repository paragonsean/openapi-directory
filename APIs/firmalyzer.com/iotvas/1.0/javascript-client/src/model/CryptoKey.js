/**
 * IoTVAS API
 * IOTVAS API enables you to discover IoT/Connected devices in the network and provides      detailed real-time risk analysis, including firmware vulnerability analysis without requiring the user to upload the firmware file.     Please visit the [signup page](https://iotvas-api.firmalyzer.com/portal/signup) to create an API key.     IoTVAS API can be easily integrated with vulnerability scanning and network port scanner tools. For example,     we have also released the [IOTVAS NSE script](https://github.com/firmalyzer/iotvas-nmap) that turns the nmap port scanner      to a IoT/connected device discovery and real-time risk assessment tool. For more infromation on IoTVAS and other      solutions please visit [Firmalyzer web site](https://www.firmalyzer.com).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CryptoKey model module.
 * @module model/CryptoKey
 * @version 1.0
 */
class CryptoKey {
    /**
     * Constructs a new <code>CryptoKey</code>.
     * @alias module:model/CryptoKey
     */
    constructor() { 
        
        CryptoKey.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CryptoKey</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CryptoKey} obj Optional instance to populate.
     * @return {module:model/CryptoKey} The populated <code>CryptoKey</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CryptoKey();

            if (data.hasOwnProperty('algorithm')) {
                obj['algorithm'] = ApiClient.convertToType(data['algorithm'], 'String');
            }
            if (data.hasOwnProperty('bits')) {
                obj['bits'] = ApiClient.convertToType(data['bits'], 'Number');
            }
            if (data.hasOwnProperty('file_hash')) {
                obj['file_hash'] = ApiClient.convertToType(data['file_hash'], 'String');
            }
            if (data.hasOwnProperty('file_name')) {
                obj['file_name'] = ApiClient.convertToType(data['file_name'], 'String');
            }
            if (data.hasOwnProperty('pem_type')) {
                obj['pem_type'] = ApiClient.convertToType(data['pem_type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CryptoKey</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CryptoKey</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['algorithm'] && !(typeof data['algorithm'] === 'string' || data['algorithm'] instanceof String)) {
            throw new Error("Expected the field `algorithm` to be a primitive type in the JSON string but got " + data['algorithm']);
        }
        // ensure the json data is a string
        if (data['file_hash'] && !(typeof data['file_hash'] === 'string' || data['file_hash'] instanceof String)) {
            throw new Error("Expected the field `file_hash` to be a primitive type in the JSON string but got " + data['file_hash']);
        }
        // ensure the json data is a string
        if (data['file_name'] && !(typeof data['file_name'] === 'string' || data['file_name'] instanceof String)) {
            throw new Error("Expected the field `file_name` to be a primitive type in the JSON string but got " + data['file_name']);
        }
        // ensure the json data is a string
        if (data['pem_type'] && !(typeof data['pem_type'] === 'string' || data['pem_type'] instanceof String)) {
            throw new Error("Expected the field `pem_type` to be a primitive type in the JSON string but got " + data['pem_type']);
        }

        return true;
    }


}



/**
 * @member {String} algorithm
 */
CryptoKey.prototype['algorithm'] = undefined;

/**
 * @member {Number} bits
 */
CryptoKey.prototype['bits'] = undefined;

/**
 * @member {String} file_hash
 */
CryptoKey.prototype['file_hash'] = undefined;

/**
 * @member {String} file_name
 */
CryptoKey.prototype['file_name'] = undefined;

/**
 * @member {String} pem_type
 */
CryptoKey.prototype['pem_type'] = undefined;






export default CryptoKey;

