/**
 * IoTVAS API
 * IOTVAS API enables you to discover IoT/Connected devices in the network and provides      detailed real-time risk analysis, including firmware vulnerability analysis without requiring the user to upload the firmware file.     Please visit the [signup page](https://iotvas-api.firmalyzer.com/portal/signup) to create an API key.     IoTVAS API can be easily integrated with vulnerability scanning and network port scanner tools. For example,     we have also released the [IOTVAS NSE script](https://github.com/firmalyzer/iotvas-nmap) that turns the nmap port scanner      to a IoT/connected device discovery and real-time risk assessment tool. For more infromation on IoTVAS and other      solutions please visit [Firmalyzer web site](https://www.firmalyzer.com).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DefaultAccount model module.
 * @module model/DefaultAccount
 * @version 1.0
 */
class DefaultAccount {
    /**
     * Constructs a new <code>DefaultAccount</code>.
     * @alias module:model/DefaultAccount
     */
    constructor() { 
        
        DefaultAccount.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DefaultAccount</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DefaultAccount} obj Optional instance to populate.
     * @return {module:model/DefaultAccount} The populated <code>DefaultAccount</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DefaultAccount();

            if (data.hasOwnProperty('gid')) {
                obj['gid'] = ApiClient.convertToType(data['gid'], 'Number');
            }
            if (data.hasOwnProperty('hash_algorithm')) {
                obj['hash_algorithm'] = ApiClient.convertToType(data['hash_algorithm'], 'String');
            }
            if (data.hasOwnProperty('home_dir')) {
                obj['home_dir'] = ApiClient.convertToType(data['home_dir'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('pwd_hash')) {
                obj['pwd_hash'] = ApiClient.convertToType(data['pwd_hash'], 'String');
            }
            if (data.hasOwnProperty('shell')) {
                obj['shell'] = ApiClient.convertToType(data['shell'], 'String');
            }
            if (data.hasOwnProperty('uid')) {
                obj['uid'] = ApiClient.convertToType(data['uid'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DefaultAccount</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DefaultAccount</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['hash_algorithm'] && !(typeof data['hash_algorithm'] === 'string' || data['hash_algorithm'] instanceof String)) {
            throw new Error("Expected the field `hash_algorithm` to be a primitive type in the JSON string but got " + data['hash_algorithm']);
        }
        // ensure the json data is a string
        if (data['home_dir'] && !(typeof data['home_dir'] === 'string' || data['home_dir'] instanceof String)) {
            throw new Error("Expected the field `home_dir` to be a primitive type in the JSON string but got " + data['home_dir']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['pwd_hash'] && !(typeof data['pwd_hash'] === 'string' || data['pwd_hash'] instanceof String)) {
            throw new Error("Expected the field `pwd_hash` to be a primitive type in the JSON string but got " + data['pwd_hash']);
        }
        // ensure the json data is a string
        if (data['shell'] && !(typeof data['shell'] === 'string' || data['shell'] instanceof String)) {
            throw new Error("Expected the field `shell` to be a primitive type in the JSON string but got " + data['shell']);
        }

        return true;
    }


}



/**
 * @member {Number} gid
 */
DefaultAccount.prototype['gid'] = undefined;

/**
 * @member {String} hash_algorithm
 */
DefaultAccount.prototype['hash_algorithm'] = undefined;

/**
 * @member {String} home_dir
 */
DefaultAccount.prototype['home_dir'] = undefined;

/**
 * @member {String} name
 */
DefaultAccount.prototype['name'] = undefined;

/**
 * @member {String} pwd_hash
 */
DefaultAccount.prototype['pwd_hash'] = undefined;

/**
 * @member {String} shell
 */
DefaultAccount.prototype['shell'] = undefined;

/**
 * @member {Number} uid
 */
DefaultAccount.prototype['uid'] = undefined;






export default DefaultAccount;

