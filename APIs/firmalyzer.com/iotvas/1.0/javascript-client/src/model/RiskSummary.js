/**
 * IoTVAS API
 * IOTVAS API enables you to discover IoT/Connected devices in the network and provides      detailed real-time risk analysis, including firmware vulnerability analysis without requiring the user to upload the firmware file.     Please visit the [signup page](https://iotvas-api.firmalyzer.com/portal/signup) to create an API key.     IoTVAS API can be easily integrated with vulnerability scanning and network port scanner tools. For example,     we have also released the [IOTVAS NSE script](https://github.com/firmalyzer/iotvas-nmap) that turns the nmap port scanner      to a IoT/connected device discovery and real-time risk assessment tool. For more infromation on IoTVAS and other      solutions please visit [Firmalyzer web site](https://www.firmalyzer.com).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RiskSummary model module.
 * @module model/RiskSummary
 * @version 1.0
 */
class RiskSummary {
    /**
     * Constructs a new <code>RiskSummary</code>.
     * @alias module:model/RiskSummary
     */
    constructor() { 
        
        RiskSummary.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RiskSummary</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RiskSummary} obj Optional instance to populate.
     * @return {module:model/RiskSummary} The populated <code>RiskSummary</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RiskSummary();

            if (data.hasOwnProperty('client_tools_risk')) {
                obj['client_tools_risk'] = ApiClient.convertToType(data['client_tools_risk'], 'String');
            }
            if (data.hasOwnProperty('crypto_risk')) {
                obj['crypto_risk'] = ApiClient.convertToType(data['crypto_risk'], 'String');
            }
            if (data.hasOwnProperty('kernel_risk')) {
                obj['kernel_risk'] = ApiClient.convertToType(data['kernel_risk'], 'String');
            }
            if (data.hasOwnProperty('net_services_risk')) {
                obj['net_services_risk'] = ApiClient.convertToType(data['net_services_risk'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RiskSummary</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RiskSummary</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['client_tools_risk'] && !(typeof data['client_tools_risk'] === 'string' || data['client_tools_risk'] instanceof String)) {
            throw new Error("Expected the field `client_tools_risk` to be a primitive type in the JSON string but got " + data['client_tools_risk']);
        }
        // ensure the json data is a string
        if (data['crypto_risk'] && !(typeof data['crypto_risk'] === 'string' || data['crypto_risk'] instanceof String)) {
            throw new Error("Expected the field `crypto_risk` to be a primitive type in the JSON string but got " + data['crypto_risk']);
        }
        // ensure the json data is a string
        if (data['kernel_risk'] && !(typeof data['kernel_risk'] === 'string' || data['kernel_risk'] instanceof String)) {
            throw new Error("Expected the field `kernel_risk` to be a primitive type in the JSON string but got " + data['kernel_risk']);
        }
        // ensure the json data is a string
        if (data['net_services_risk'] && !(typeof data['net_services_risk'] === 'string' || data['net_services_risk'] instanceof String)) {
            throw new Error("Expected the field `net_services_risk` to be a primitive type in the JSON string but got " + data['net_services_risk']);
        }

        return true;
    }


}



/**
 * @member {String} client_tools_risk
 */
RiskSummary.prototype['client_tools_risk'] = undefined;

/**
 * @member {String} crypto_risk
 */
RiskSummary.prototype['crypto_risk'] = undefined;

/**
 * @member {String} kernel_risk
 */
RiskSummary.prototype['kernel_risk'] = undefined;

/**
 * @member {String} net_services_risk
 */
RiskSummary.prototype['net_services_risk'] = undefined;






export default RiskSummary;

