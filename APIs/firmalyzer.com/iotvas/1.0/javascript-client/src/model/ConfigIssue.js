/**
 * IoTVAS API
 * IOTVAS API enables you to discover IoT/Connected devices in the network and provides      detailed real-time risk analysis, including firmware vulnerability analysis without requiring the user to upload the firmware file.     Please visit the [signup page](https://iotvas-api.firmalyzer.com/portal/signup) to create an API key.     IoTVAS API can be easily integrated with vulnerability scanning and network port scanner tools. For example,     we have also released the [IOTVAS NSE script](https://github.com/firmalyzer/iotvas-nmap) that turns the nmap port scanner      to a IoT/connected device discovery and real-time risk assessment tool. For more infromation on IoTVAS and other      solutions please visit [Firmalyzer web site](https://www.firmalyzer.com).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ConfigIssue model module.
 * @module model/ConfigIssue
 * @version 1.0
 */
class ConfigIssue {
    /**
     * Constructs a new <code>ConfigIssue</code>.
     * @alias module:model/ConfigIssue
     */
    constructor() { 
        
        ConfigIssue.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConfigIssue</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConfigIssue} obj Optional instance to populate.
     * @return {module:model/ConfigIssue} The populated <code>ConfigIssue</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConfigIssue();

            if (data.hasOwnProperty('config_file')) {
                obj['config_file'] = ApiClient.convertToType(data['config_file'], 'String');
            }
            if (data.hasOwnProperty('issues')) {
                obj['issues'] = ApiClient.convertToType(data['issues'], ['String']);
            }
            if (data.hasOwnProperty('service_name')) {
                obj['service_name'] = ApiClient.convertToType(data['service_name'], 'String');
            }
            if (data.hasOwnProperty('suggestions')) {
                obj['suggestions'] = ApiClient.convertToType(data['suggestions'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConfigIssue</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConfigIssue</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['config_file'] && !(typeof data['config_file'] === 'string' || data['config_file'] instanceof String)) {
            throw new Error("Expected the field `config_file` to be a primitive type in the JSON string but got " + data['config_file']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['issues'])) {
            throw new Error("Expected the field `issues` to be an array in the JSON data but got " + data['issues']);
        }
        // ensure the json data is a string
        if (data['service_name'] && !(typeof data['service_name'] === 'string' || data['service_name'] instanceof String)) {
            throw new Error("Expected the field `service_name` to be a primitive type in the JSON string but got " + data['service_name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['suggestions'])) {
            throw new Error("Expected the field `suggestions` to be an array in the JSON data but got " + data['suggestions']);
        }

        return true;
    }


}



/**
 * @member {String} config_file
 */
ConfigIssue.prototype['config_file'] = undefined;

/**
 * @member {Array.<String>} issues
 */
ConfigIssue.prototype['issues'] = undefined;

/**
 * @member {String} service_name
 */
ConfigIssue.prototype['service_name'] = undefined;

/**
 * @member {Array.<String>} suggestions
 */
ConfigIssue.prototype['suggestions'] = undefined;






export default ConfigIssue;

