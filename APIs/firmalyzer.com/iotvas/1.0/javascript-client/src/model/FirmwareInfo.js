/**
 * IoTVAS API
 * IOTVAS API enables you to discover IoT/Connected devices in the network and provides      detailed real-time risk analysis, including firmware vulnerability analysis without requiring the user to upload the firmware file.     Please visit the [signup page](https://iotvas-api.firmalyzer.com/portal/signup) to create an API key.     IoTVAS API can be easily integrated with vulnerability scanning and network port scanner tools. For example,     we have also released the [IOTVAS NSE script](https://github.com/firmalyzer/iotvas-nmap) that turns the nmap port scanner      to a IoT/connected device discovery and real-time risk assessment tool. For more infromation on IoTVAS and other      solutions please visit [Firmalyzer web site](https://www.firmalyzer.com).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FirmwareInfo model module.
 * @module model/FirmwareInfo
 * @version 1.0
 */
class FirmwareInfo {
    /**
     * Constructs a new <code>FirmwareInfo</code>.
     * @alias module:model/FirmwareInfo
     */
    constructor() { 
        
        FirmwareInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FirmwareInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FirmwareInfo} obj Optional instance to populate.
     * @return {module:model/FirmwareInfo} The populated <code>FirmwareInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FirmwareInfo();

            if (data.hasOwnProperty('download_url')) {
                obj['download_url'] = ApiClient.convertToType(data['download_url'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('release_date')) {
                obj['release_date'] = ApiClient.convertToType(data['release_date'], 'String');
            }
            if (data.hasOwnProperty('sha2')) {
                obj['sha2'] = ApiClient.convertToType(data['sha2'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FirmwareInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FirmwareInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['download_url'] && !(typeof data['download_url'] === 'string' || data['download_url'] instanceof String)) {
            throw new Error("Expected the field `download_url` to be a primitive type in the JSON string but got " + data['download_url']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['release_date'] && !(typeof data['release_date'] === 'string' || data['release_date'] instanceof String)) {
            throw new Error("Expected the field `release_date` to be a primitive type in the JSON string but got " + data['release_date']);
        }
        // ensure the json data is a string
        if (data['sha2'] && !(typeof data['sha2'] === 'string' || data['sha2'] instanceof String)) {
            throw new Error("Expected the field `sha2` to be a primitive type in the JSON string but got " + data['sha2']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}



/**
 * @member {String} download_url
 */
FirmwareInfo.prototype['download_url'] = undefined;

/**
 * @member {String} name
 */
FirmwareInfo.prototype['name'] = undefined;

/**
 * @member {String} release_date
 */
FirmwareInfo.prototype['release_date'] = undefined;

/**
 * @member {String} sha2
 */
FirmwareInfo.prototype['sha2'] = undefined;

/**
 * @member {String} version
 */
FirmwareInfo.prototype['version'] = undefined;






export default FirmwareInfo;

