/**
 * IoTVAS API
 * IOTVAS API enables you to discover IoT/Connected devices in the network and provides      detailed real-time risk analysis, including firmware vulnerability analysis without requiring the user to upload the firmware file.     Please visit the [signup page](https://iotvas-api.firmalyzer.com/portal/signup) to create an API key.     IoTVAS API can be easily integrated with vulnerability scanning and network port scanner tools. For example,     we have also released the [IOTVAS NSE script](https://github.com/firmalyzer/iotvas-nmap) that turns the nmap port scanner      to a IoT/connected device discovery and real-time risk assessment tool. For more infromation on IoTVAS and other      solutions please visit [Firmalyzer web site](https://www.firmalyzer.com).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RiskSummary from './RiskSummary';
import VulnerableComponent from './VulnerableComponent';

/**
 * The FirmwareRisk model module.
 * @module model/FirmwareRisk
 * @version 1.0
 */
class FirmwareRisk {
    /**
     * Constructs a new <code>FirmwareRisk</code>.
     * @alias module:model/FirmwareRisk
     */
    constructor() { 
        
        FirmwareRisk.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FirmwareRisk</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FirmwareRisk} obj Optional instance to populate.
     * @return {module:model/FirmwareRisk} The populated <code>FirmwareRisk</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FirmwareRisk();

            if (data.hasOwnProperty('risk_summary')) {
                obj['risk_summary'] = ApiClient.convertToType(data['risk_summary'], RiskSummary);
            }
            if (data.hasOwnProperty('vulnerable_components')) {
                obj['vulnerable_components'] = ApiClient.convertToType(data['vulnerable_components'], [VulnerableComponent]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FirmwareRisk</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FirmwareRisk</code>.
     */
    static validateJSON(data) {
        // validate the optional field `risk_summary`
        if (data['risk_summary']) { // data not null
          RiskSummary.validateJSON(data['risk_summary']);
        }
        if (data['vulnerable_components']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['vulnerable_components'])) {
                throw new Error("Expected the field `vulnerable_components` to be an array in the JSON data but got " + data['vulnerable_components']);
            }
            // validate the optional field `vulnerable_components` (array)
            for (const item of data['vulnerable_components']) {
                VulnerableComponent.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/RiskSummary} risk_summary
 */
FirmwareRisk.prototype['risk_summary'] = undefined;

/**
 * @member {Array.<module:model/VulnerableComponent>} vulnerable_components
 */
FirmwareRisk.prototype['vulnerable_components'] = undefined;






export default FirmwareRisk;

