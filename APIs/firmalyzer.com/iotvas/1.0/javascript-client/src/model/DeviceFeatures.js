/**
 * IoTVAS API
 * IOTVAS API enables you to discover IoT/Connected devices in the network and provides      detailed real-time risk analysis, including firmware vulnerability analysis without requiring the user to upload the firmware file.     Please visit the [signup page](https://iotvas-api.firmalyzer.com/portal/signup) to create an API key.     IoTVAS API can be easily integrated with vulnerability scanning and network port scanner tools. For example,     we have also released the [IOTVAS NSE script](https://github.com/firmalyzer/iotvas-nmap) that turns the nmap port scanner      to a IoT/connected device discovery and real-time risk assessment tool. For more infromation on IoTVAS and other      solutions please visit [Firmalyzer web site](https://www.firmalyzer.com).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DeviceFeatures model module.
 * @module model/DeviceFeatures
 * @version 1.0
 */
class DeviceFeatures {
    /**
     * Constructs a new <code>DeviceFeatures</code>.
     * @alias module:model/DeviceFeatures
     */
    constructor() { 
        
        DeviceFeatures.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['ftp_banner'] = '';
        obj['hostname'] = '';
        obj['http_response'] = '';
        obj['https_response'] = '';
        obj['nic_mac'] = '';
        obj['snmp_sysdescr'] = '';
        obj['snmp_sysoid'] = '';
        obj['telnet_banner'] = '';
        obj['upnp_response'] = '';
    }

    /**
     * Constructs a <code>DeviceFeatures</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeviceFeatures} obj Optional instance to populate.
     * @return {module:model/DeviceFeatures} The populated <code>DeviceFeatures</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeviceFeatures();

            if (data.hasOwnProperty('ftp_banner')) {
                obj['ftp_banner'] = ApiClient.convertToType(data['ftp_banner'], 'String');
            }
            if (data.hasOwnProperty('hostname')) {
                obj['hostname'] = ApiClient.convertToType(data['hostname'], 'String');
            }
            if (data.hasOwnProperty('http_response')) {
                obj['http_response'] = ApiClient.convertToType(data['http_response'], 'String');
            }
            if (data.hasOwnProperty('https_response')) {
                obj['https_response'] = ApiClient.convertToType(data['https_response'], 'String');
            }
            if (data.hasOwnProperty('nic_mac')) {
                obj['nic_mac'] = ApiClient.convertToType(data['nic_mac'], 'String');
            }
            if (data.hasOwnProperty('snmp_sysdescr')) {
                obj['snmp_sysdescr'] = ApiClient.convertToType(data['snmp_sysdescr'], 'String');
            }
            if (data.hasOwnProperty('snmp_sysoid')) {
                obj['snmp_sysoid'] = ApiClient.convertToType(data['snmp_sysoid'], 'String');
            }
            if (data.hasOwnProperty('telnet_banner')) {
                obj['telnet_banner'] = ApiClient.convertToType(data['telnet_banner'], 'String');
            }
            if (data.hasOwnProperty('upnp_response')) {
                obj['upnp_response'] = ApiClient.convertToType(data['upnp_response'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeviceFeatures</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeviceFeatures</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['ftp_banner'] && !(typeof data['ftp_banner'] === 'string' || data['ftp_banner'] instanceof String)) {
            throw new Error("Expected the field `ftp_banner` to be a primitive type in the JSON string but got " + data['ftp_banner']);
        }
        // ensure the json data is a string
        if (data['hostname'] && !(typeof data['hostname'] === 'string' || data['hostname'] instanceof String)) {
            throw new Error("Expected the field `hostname` to be a primitive type in the JSON string but got " + data['hostname']);
        }
        // ensure the json data is a string
        if (data['http_response'] && !(typeof data['http_response'] === 'string' || data['http_response'] instanceof String)) {
            throw new Error("Expected the field `http_response` to be a primitive type in the JSON string but got " + data['http_response']);
        }
        // ensure the json data is a string
        if (data['https_response'] && !(typeof data['https_response'] === 'string' || data['https_response'] instanceof String)) {
            throw new Error("Expected the field `https_response` to be a primitive type in the JSON string but got " + data['https_response']);
        }
        // ensure the json data is a string
        if (data['nic_mac'] && !(typeof data['nic_mac'] === 'string' || data['nic_mac'] instanceof String)) {
            throw new Error("Expected the field `nic_mac` to be a primitive type in the JSON string but got " + data['nic_mac']);
        }
        // ensure the json data is a string
        if (data['snmp_sysdescr'] && !(typeof data['snmp_sysdescr'] === 'string' || data['snmp_sysdescr'] instanceof String)) {
            throw new Error("Expected the field `snmp_sysdescr` to be a primitive type in the JSON string but got " + data['snmp_sysdescr']);
        }
        // ensure the json data is a string
        if (data['snmp_sysoid'] && !(typeof data['snmp_sysoid'] === 'string' || data['snmp_sysoid'] instanceof String)) {
            throw new Error("Expected the field `snmp_sysoid` to be a primitive type in the JSON string but got " + data['snmp_sysoid']);
        }
        // ensure the json data is a string
        if (data['telnet_banner'] && !(typeof data['telnet_banner'] === 'string' || data['telnet_banner'] instanceof String)) {
            throw new Error("Expected the field `telnet_banner` to be a primitive type in the JSON string but got " + data['telnet_banner']);
        }
        // ensure the json data is a string
        if (data['upnp_response'] && !(typeof data['upnp_response'] === 'string' || data['upnp_response'] instanceof String)) {
            throw new Error("Expected the field `upnp_response` to be a primitive type in the JSON string but got " + data['upnp_response']);
        }

        return true;
    }


}



/**
 * @member {String} ftp_banner
 * @default ''
 */
DeviceFeatures.prototype['ftp_banner'] = '';

/**
 * @member {String} hostname
 * @default ''
 */
DeviceFeatures.prototype['hostname'] = '';

/**
 * @member {String} http_response
 * @default ''
 */
DeviceFeatures.prototype['http_response'] = '';

/**
 * @member {String} https_response
 * @default ''
 */
DeviceFeatures.prototype['https_response'] = '';

/**
 * @member {String} nic_mac
 * @default ''
 */
DeviceFeatures.prototype['nic_mac'] = '';

/**
 * @member {String} snmp_sysdescr
 * @default ''
 */
DeviceFeatures.prototype['snmp_sysdescr'] = '';

/**
 * @member {String} snmp_sysoid
 * @default ''
 */
DeviceFeatures.prototype['snmp_sysoid'] = '';

/**
 * @member {String} telnet_banner
 * @default ''
 */
DeviceFeatures.prototype['telnet_banner'] = '';

/**
 * @member {String} upnp_response
 * @default ''
 */
DeviceFeatures.prototype['upnp_response'] = '';






export default DeviceFeatures;

