/**
 * IoTVAS API
 * IOTVAS API enables you to discover IoT/Connected devices in the network and provides      detailed real-time risk analysis, including firmware vulnerability analysis without requiring the user to upload the firmware file.     Please visit the [signup page](https://iotvas-api.firmalyzer.com/portal/signup) to create an API key.     IoTVAS API can be easily integrated with vulnerability scanning and network port scanner tools. For example,     we have also released the [IOTVAS NSE script](https://github.com/firmalyzer/iotvas-nmap) that turns the nmap port scanner      to a IoT/connected device discovery and real-time risk assessment tool. For more infromation on IoTVAS and other      solutions please visit [Firmalyzer web site](https://www.firmalyzer.com).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FirmwareInfo from './FirmwareInfo';
import Vulnerability from './Vulnerability';

/**
 * The DeviceInfo model module.
 * @module model/DeviceInfo
 * @version 1.0
 */
class DeviceInfo {
    /**
     * Constructs a new <code>DeviceInfo</code>.
     * @alias module:model/DeviceInfo
     */
    constructor() { 
        
        DeviceInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DeviceInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeviceInfo} obj Optional instance to populate.
     * @return {module:model/DeviceInfo} The populated <code>DeviceInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeviceInfo();

            if (data.hasOwnProperty('cve_list')) {
                obj['cve_list'] = ApiClient.convertToType(data['cve_list'], [Vulnerability]);
            }
            if (data.hasOwnProperty('device_type')) {
                obj['device_type'] = ApiClient.convertToType(data['device_type'], 'String');
            }
            if (data.hasOwnProperty('firmware_info')) {
                obj['firmware_info'] = ApiClient.convertToType(data['firmware_info'], FirmwareInfo);
            }
            if (data.hasOwnProperty('firmware_version')) {
                obj['firmware_version'] = ApiClient.convertToType(data['firmware_version'], 'String');
            }
            if (data.hasOwnProperty('is_discontinued')) {
                obj['is_discontinued'] = ApiClient.convertToType(data['is_discontinued'], 'Boolean');
            }
            if (data.hasOwnProperty('latest_firmware_info')) {
                obj['latest_firmware_info'] = ApiClient.convertToType(data['latest_firmware_info'], FirmwareInfo);
            }
            if (data.hasOwnProperty('manufacturer')) {
                obj['manufacturer'] = ApiClient.convertToType(data['manufacturer'], 'String');
            }
            if (data.hasOwnProperty('model_name')) {
                obj['model_name'] = ApiClient.convertToType(data['model_name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeviceInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeviceInfo</code>.
     */
    static validateJSON(data) {
        if (data['cve_list']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['cve_list'])) {
                throw new Error("Expected the field `cve_list` to be an array in the JSON data but got " + data['cve_list']);
            }
            // validate the optional field `cve_list` (array)
            for (const item of data['cve_list']) {
                Vulnerability.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['device_type'] && !(typeof data['device_type'] === 'string' || data['device_type'] instanceof String)) {
            throw new Error("Expected the field `device_type` to be a primitive type in the JSON string but got " + data['device_type']);
        }
        // validate the optional field `firmware_info`
        if (data['firmware_info']) { // data not null
          FirmwareInfo.validateJSON(data['firmware_info']);
        }
        // ensure the json data is a string
        if (data['firmware_version'] && !(typeof data['firmware_version'] === 'string' || data['firmware_version'] instanceof String)) {
            throw new Error("Expected the field `firmware_version` to be a primitive type in the JSON string but got " + data['firmware_version']);
        }
        // validate the optional field `latest_firmware_info`
        if (data['latest_firmware_info']) { // data not null
          FirmwareInfo.validateJSON(data['latest_firmware_info']);
        }
        // ensure the json data is a string
        if (data['manufacturer'] && !(typeof data['manufacturer'] === 'string' || data['manufacturer'] instanceof String)) {
            throw new Error("Expected the field `manufacturer` to be a primitive type in the JSON string but got " + data['manufacturer']);
        }
        // ensure the json data is a string
        if (data['model_name'] && !(typeof data['model_name'] === 'string' || data['model_name'] instanceof String)) {
            throw new Error("Expected the field `model_name` to be a primitive type in the JSON string but got " + data['model_name']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/Vulnerability>} cve_list
 */
DeviceInfo.prototype['cve_list'] = undefined;

/**
 * @member {String} device_type
 */
DeviceInfo.prototype['device_type'] = undefined;

/**
 * @member {module:model/FirmwareInfo} firmware_info
 */
DeviceInfo.prototype['firmware_info'] = undefined;

/**
 * @member {String} firmware_version
 */
DeviceInfo.prototype['firmware_version'] = undefined;

/**
 * @member {Boolean} is_discontinued
 */
DeviceInfo.prototype['is_discontinued'] = undefined;

/**
 * @member {module:model/FirmwareInfo} latest_firmware_info
 */
DeviceInfo.prototype['latest_firmware_info'] = undefined;

/**
 * @member {String} manufacturer
 */
DeviceInfo.prototype['manufacturer'] = undefined;

/**
 * @member {String} model_name
 */
DeviceInfo.prototype['model_name'] = undefined;






export default DeviceInfo;

