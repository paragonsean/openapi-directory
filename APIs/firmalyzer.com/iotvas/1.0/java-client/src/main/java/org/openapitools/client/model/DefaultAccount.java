/*
 * IoTVAS API
 * IOTVAS API enables you to discover IoT/Connected devices in the network and provides      detailed real-time risk analysis, including firmware vulnerability analysis without requiring the user to upload the firmware file.     Please visit the [signup page](https://iotvas-api.firmalyzer.com/portal/signup) to create an API key.     IoTVAS API can be easily integrated with vulnerability scanning and network port scanner tools. For example,     we have also released the [IOTVAS NSE script](https://github.com/firmalyzer/iotvas-nmap) that turns the nmap port scanner      to a IoT/connected device discovery and real-time risk assessment tool. For more infromation on IoTVAS and other      solutions please visit [Firmalyzer web site](https://www.firmalyzer.com).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DefaultAccount
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:04.326394-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DefaultAccount {
  public static final String SERIALIZED_NAME_GID = "gid";
  @SerializedName(SERIALIZED_NAME_GID)
  private Integer gid;

  public static final String SERIALIZED_NAME_HASH_ALGORITHM = "hash_algorithm";
  @SerializedName(SERIALIZED_NAME_HASH_ALGORITHM)
  private String hashAlgorithm;

  public static final String SERIALIZED_NAME_HOME_DIR = "home_dir";
  @SerializedName(SERIALIZED_NAME_HOME_DIR)
  private String homeDir;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PWD_HASH = "pwd_hash";
  @SerializedName(SERIALIZED_NAME_PWD_HASH)
  private String pwdHash;

  public static final String SERIALIZED_NAME_SHELL = "shell";
  @SerializedName(SERIALIZED_NAME_SHELL)
  private String shell;

  public static final String SERIALIZED_NAME_UID = "uid";
  @SerializedName(SERIALIZED_NAME_UID)
  private Integer uid;

  public DefaultAccount() {
  }

  public DefaultAccount gid(Integer gid) {
    this.gid = gid;
    return this;
  }

  /**
   * Get gid
   * @return gid
   */
  @javax.annotation.Nullable
  public Integer getGid() {
    return gid;
  }

  public void setGid(Integer gid) {
    this.gid = gid;
  }


  public DefaultAccount hashAlgorithm(String hashAlgorithm) {
    this.hashAlgorithm = hashAlgorithm;
    return this;
  }

  /**
   * Get hashAlgorithm
   * @return hashAlgorithm
   */
  @javax.annotation.Nullable
  public String getHashAlgorithm() {
    return hashAlgorithm;
  }

  public void setHashAlgorithm(String hashAlgorithm) {
    this.hashAlgorithm = hashAlgorithm;
  }


  public DefaultAccount homeDir(String homeDir) {
    this.homeDir = homeDir;
    return this;
  }

  /**
   * Get homeDir
   * @return homeDir
   */
  @javax.annotation.Nullable
  public String getHomeDir() {
    return homeDir;
  }

  public void setHomeDir(String homeDir) {
    this.homeDir = homeDir;
  }


  public DefaultAccount name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DefaultAccount pwdHash(String pwdHash) {
    this.pwdHash = pwdHash;
    return this;
  }

  /**
   * Get pwdHash
   * @return pwdHash
   */
  @javax.annotation.Nullable
  public String getPwdHash() {
    return pwdHash;
  }

  public void setPwdHash(String pwdHash) {
    this.pwdHash = pwdHash;
  }


  public DefaultAccount shell(String shell) {
    this.shell = shell;
    return this;
  }

  /**
   * Get shell
   * @return shell
   */
  @javax.annotation.Nullable
  public String getShell() {
    return shell;
  }

  public void setShell(String shell) {
    this.shell = shell;
  }


  public DefaultAccount uid(Integer uid) {
    this.uid = uid;
    return this;
  }

  /**
   * Get uid
   * @return uid
   */
  @javax.annotation.Nullable
  public Integer getUid() {
    return uid;
  }

  public void setUid(Integer uid) {
    this.uid = uid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DefaultAccount defaultAccount = (DefaultAccount) o;
    return Objects.equals(this.gid, defaultAccount.gid) &&
        Objects.equals(this.hashAlgorithm, defaultAccount.hashAlgorithm) &&
        Objects.equals(this.homeDir, defaultAccount.homeDir) &&
        Objects.equals(this.name, defaultAccount.name) &&
        Objects.equals(this.pwdHash, defaultAccount.pwdHash) &&
        Objects.equals(this.shell, defaultAccount.shell) &&
        Objects.equals(this.uid, defaultAccount.uid);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(gid, hashAlgorithm, homeDir, name, pwdHash, shell, uid);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DefaultAccount {\n");
    sb.append("    gid: ").append(toIndentedString(gid)).append("\n");
    sb.append("    hashAlgorithm: ").append(toIndentedString(hashAlgorithm)).append("\n");
    sb.append("    homeDir: ").append(toIndentedString(homeDir)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pwdHash: ").append(toIndentedString(pwdHash)).append("\n");
    sb.append("    shell: ").append(toIndentedString(shell)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("gid");
    openapiFields.add("hash_algorithm");
    openapiFields.add("home_dir");
    openapiFields.add("name");
    openapiFields.add("pwd_hash");
    openapiFields.add("shell");
    openapiFields.add("uid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DefaultAccount
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DefaultAccount.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DefaultAccount is not found in the empty JSON string", DefaultAccount.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DefaultAccount.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DefaultAccount` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("hash_algorithm") != null && !jsonObj.get("hash_algorithm").isJsonNull()) && !jsonObj.get("hash_algorithm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hash_algorithm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hash_algorithm").toString()));
      }
      if ((jsonObj.get("home_dir") != null && !jsonObj.get("home_dir").isJsonNull()) && !jsonObj.get("home_dir").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `home_dir` to be a primitive type in the JSON string but got `%s`", jsonObj.get("home_dir").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("pwd_hash") != null && !jsonObj.get("pwd_hash").isJsonNull()) && !jsonObj.get("pwd_hash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pwd_hash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pwd_hash").toString()));
      }
      if ((jsonObj.get("shell") != null && !jsonObj.get("shell").isJsonNull()) && !jsonObj.get("shell").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shell` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shell").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DefaultAccount.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DefaultAccount' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DefaultAccount> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DefaultAccount.class));

       return (TypeAdapter<T>) new TypeAdapter<DefaultAccount>() {
           @Override
           public void write(JsonWriter out, DefaultAccount value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DefaultAccount read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DefaultAccount given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DefaultAccount
   * @throws IOException if the JSON string is invalid with respect to DefaultAccount
   */
  public static DefaultAccount fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DefaultAccount.class);
  }

  /**
   * Convert an instance of DefaultAccount to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

