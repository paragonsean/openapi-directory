/*
 * IoTVAS API
 * IOTVAS API enables you to discover IoT/Connected devices in the network and provides      detailed real-time risk analysis, including firmware vulnerability analysis without requiring the user to upload the firmware file.     Please visit the [signup page](https://iotvas-api.firmalyzer.com/portal/signup) to create an API key.     IoTVAS API can be easily integrated with vulnerability scanning and network port scanner tools. For example,     we have also released the [IOTVAS NSE script](https://github.com/firmalyzer/iotvas-nmap) that turns the nmap port scanner      to a IoT/connected device discovery and real-time risk assessment tool. For more infromation on IoTVAS and other      solutions please visit [Firmalyzer web site](https://www.firmalyzer.com).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FirmwareInfo;
import org.openapitools.client.model.Vulnerability;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DeviceInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:04.326394-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeviceInfo {
  public static final String SERIALIZED_NAME_CVE_LIST = "cve_list";
  @SerializedName(SERIALIZED_NAME_CVE_LIST)
  private List<Vulnerability> cveList;

  public static final String SERIALIZED_NAME_DEVICE_TYPE = "device_type";
  @SerializedName(SERIALIZED_NAME_DEVICE_TYPE)
  private String deviceType;

  public static final String SERIALIZED_NAME_FIRMWARE_INFO = "firmware_info";
  @SerializedName(SERIALIZED_NAME_FIRMWARE_INFO)
  private FirmwareInfo firmwareInfo;

  public static final String SERIALIZED_NAME_FIRMWARE_VERSION = "firmware_version";
  @SerializedName(SERIALIZED_NAME_FIRMWARE_VERSION)
  private String firmwareVersion;

  public static final String SERIALIZED_NAME_IS_DISCONTINUED = "is_discontinued";
  @SerializedName(SERIALIZED_NAME_IS_DISCONTINUED)
  private Boolean isDiscontinued;

  public static final String SERIALIZED_NAME_LATEST_FIRMWARE_INFO = "latest_firmware_info";
  @SerializedName(SERIALIZED_NAME_LATEST_FIRMWARE_INFO)
  private FirmwareInfo latestFirmwareInfo;

  public static final String SERIALIZED_NAME_MANUFACTURER = "manufacturer";
  @SerializedName(SERIALIZED_NAME_MANUFACTURER)
  private String manufacturer;

  public static final String SERIALIZED_NAME_MODEL_NAME = "model_name";
  @SerializedName(SERIALIZED_NAME_MODEL_NAME)
  private String modelName;

  public DeviceInfo() {
  }

  public DeviceInfo cveList(List<Vulnerability> cveList) {
    this.cveList = cveList;
    return this;
  }

  public DeviceInfo addCveListItem(Vulnerability cveListItem) {
    if (this.cveList == null) {
      this.cveList = new ArrayList<>();
    }
    this.cveList.add(cveListItem);
    return this;
  }

  /**
   * Get cveList
   * @return cveList
   */
  @javax.annotation.Nullable
  public List<Vulnerability> getCveList() {
    return cveList;
  }

  public void setCveList(List<Vulnerability> cveList) {
    this.cveList = cveList;
  }


  public DeviceInfo deviceType(String deviceType) {
    this.deviceType = deviceType;
    return this;
  }

  /**
   * Get deviceType
   * @return deviceType
   */
  @javax.annotation.Nullable
  public String getDeviceType() {
    return deviceType;
  }

  public void setDeviceType(String deviceType) {
    this.deviceType = deviceType;
  }


  public DeviceInfo firmwareInfo(FirmwareInfo firmwareInfo) {
    this.firmwareInfo = firmwareInfo;
    return this;
  }

  /**
   * Get firmwareInfo
   * @return firmwareInfo
   */
  @javax.annotation.Nullable
  public FirmwareInfo getFirmwareInfo() {
    return firmwareInfo;
  }

  public void setFirmwareInfo(FirmwareInfo firmwareInfo) {
    this.firmwareInfo = firmwareInfo;
  }


  public DeviceInfo firmwareVersion(String firmwareVersion) {
    this.firmwareVersion = firmwareVersion;
    return this;
  }

  /**
   * Get firmwareVersion
   * @return firmwareVersion
   */
  @javax.annotation.Nullable
  public String getFirmwareVersion() {
    return firmwareVersion;
  }

  public void setFirmwareVersion(String firmwareVersion) {
    this.firmwareVersion = firmwareVersion;
  }


  public DeviceInfo isDiscontinued(Boolean isDiscontinued) {
    this.isDiscontinued = isDiscontinued;
    return this;
  }

  /**
   * Get isDiscontinued
   * @return isDiscontinued
   */
  @javax.annotation.Nullable
  public Boolean getIsDiscontinued() {
    return isDiscontinued;
  }

  public void setIsDiscontinued(Boolean isDiscontinued) {
    this.isDiscontinued = isDiscontinued;
  }


  public DeviceInfo latestFirmwareInfo(FirmwareInfo latestFirmwareInfo) {
    this.latestFirmwareInfo = latestFirmwareInfo;
    return this;
  }

  /**
   * Get latestFirmwareInfo
   * @return latestFirmwareInfo
   */
  @javax.annotation.Nullable
  public FirmwareInfo getLatestFirmwareInfo() {
    return latestFirmwareInfo;
  }

  public void setLatestFirmwareInfo(FirmwareInfo latestFirmwareInfo) {
    this.latestFirmwareInfo = latestFirmwareInfo;
  }


  public DeviceInfo manufacturer(String manufacturer) {
    this.manufacturer = manufacturer;
    return this;
  }

  /**
   * Get manufacturer
   * @return manufacturer
   */
  @javax.annotation.Nullable
  public String getManufacturer() {
    return manufacturer;
  }

  public void setManufacturer(String manufacturer) {
    this.manufacturer = manufacturer;
  }


  public DeviceInfo modelName(String modelName) {
    this.modelName = modelName;
    return this;
  }

  /**
   * Get modelName
   * @return modelName
   */
  @javax.annotation.Nullable
  public String getModelName() {
    return modelName;
  }

  public void setModelName(String modelName) {
    this.modelName = modelName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceInfo deviceInfo = (DeviceInfo) o;
    return Objects.equals(this.cveList, deviceInfo.cveList) &&
        Objects.equals(this.deviceType, deviceInfo.deviceType) &&
        Objects.equals(this.firmwareInfo, deviceInfo.firmwareInfo) &&
        Objects.equals(this.firmwareVersion, deviceInfo.firmwareVersion) &&
        Objects.equals(this.isDiscontinued, deviceInfo.isDiscontinued) &&
        Objects.equals(this.latestFirmwareInfo, deviceInfo.latestFirmwareInfo) &&
        Objects.equals(this.manufacturer, deviceInfo.manufacturer) &&
        Objects.equals(this.modelName, deviceInfo.modelName);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(cveList, deviceType, firmwareInfo, firmwareVersion, isDiscontinued, latestFirmwareInfo, manufacturer, modelName);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceInfo {\n");
    sb.append("    cveList: ").append(toIndentedString(cveList)).append("\n");
    sb.append("    deviceType: ").append(toIndentedString(deviceType)).append("\n");
    sb.append("    firmwareInfo: ").append(toIndentedString(firmwareInfo)).append("\n");
    sb.append("    firmwareVersion: ").append(toIndentedString(firmwareVersion)).append("\n");
    sb.append("    isDiscontinued: ").append(toIndentedString(isDiscontinued)).append("\n");
    sb.append("    latestFirmwareInfo: ").append(toIndentedString(latestFirmwareInfo)).append("\n");
    sb.append("    manufacturer: ").append(toIndentedString(manufacturer)).append("\n");
    sb.append("    modelName: ").append(toIndentedString(modelName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cve_list");
    openapiFields.add("device_type");
    openapiFields.add("firmware_info");
    openapiFields.add("firmware_version");
    openapiFields.add("is_discontinued");
    openapiFields.add("latest_firmware_info");
    openapiFields.add("manufacturer");
    openapiFields.add("model_name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeviceInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeviceInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeviceInfo is not found in the empty JSON string", DeviceInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeviceInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeviceInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("cve_list") != null && !jsonObj.get("cve_list").isJsonNull()) {
        JsonArray jsonArraycveList = jsonObj.getAsJsonArray("cve_list");
        if (jsonArraycveList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("cve_list").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `cve_list` to be an array in the JSON string but got `%s`", jsonObj.get("cve_list").toString()));
          }

          // validate the optional field `cve_list` (array)
          for (int i = 0; i < jsonArraycveList.size(); i++) {
            Vulnerability.validateJsonElement(jsonArraycveList.get(i));
          };
        }
      }
      if ((jsonObj.get("device_type") != null && !jsonObj.get("device_type").isJsonNull()) && !jsonObj.get("device_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `device_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("device_type").toString()));
      }
      // validate the optional field `firmware_info`
      if (jsonObj.get("firmware_info") != null && !jsonObj.get("firmware_info").isJsonNull()) {
        FirmwareInfo.validateJsonElement(jsonObj.get("firmware_info"));
      }
      if ((jsonObj.get("firmware_version") != null && !jsonObj.get("firmware_version").isJsonNull()) && !jsonObj.get("firmware_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firmware_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firmware_version").toString()));
      }
      // validate the optional field `latest_firmware_info`
      if (jsonObj.get("latest_firmware_info") != null && !jsonObj.get("latest_firmware_info").isJsonNull()) {
        FirmwareInfo.validateJsonElement(jsonObj.get("latest_firmware_info"));
      }
      if ((jsonObj.get("manufacturer") != null && !jsonObj.get("manufacturer").isJsonNull()) && !jsonObj.get("manufacturer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `manufacturer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("manufacturer").toString()));
      }
      if ((jsonObj.get("model_name") != null && !jsonObj.get("model_name").isJsonNull()) && !jsonObj.get("model_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `model_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("model_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeviceInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeviceInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeviceInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeviceInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<DeviceInfo>() {
           @Override
           public void write(JsonWriter out, DeviceInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeviceInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeviceInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeviceInfo
   * @throws IOException if the JSON string is invalid with respect to DeviceInfo
   */
  public static DeviceInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeviceInfo.class);
  }

  /**
   * Convert an instance of DeviceInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

