/*
 * IoTVAS API
 * IOTVAS API enables you to discover IoT/Connected devices in the network and provides      detailed real-time risk analysis, including firmware vulnerability analysis without requiring the user to upload the firmware file.     Please visit the [signup page](https://iotvas-api.firmalyzer.com/portal/signup) to create an API key.     IoTVAS API can be easily integrated with vulnerability scanning and network port scanner tools. For example,     we have also released the [IOTVAS NSE script](https://github.com/firmalyzer/iotvas-nmap) that turns the nmap port scanner      to a IoT/connected device discovery and real-time risk assessment tool. For more infromation on IoTVAS and other      solutions please visit [Firmalyzer web site](https://www.firmalyzer.com).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ConfigIssue;
import org.openapitools.client.model.CryptoKey;
import org.openapitools.client.model.DefaultAccount;
import org.openapitools.client.model.ExpiredCert;
import org.openapitools.client.model.FirmwareRisk;
import org.openapitools.client.model.HTTPValidationError;
import org.openapitools.client.model.WeakCert;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FirmwareApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FirmwareApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FirmwareApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getAccounts
     * @param firmwareHash SHA2 hash of device firmware (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountsCall(String firmwareHash, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/firmware/{firmware_hash}/accounts"
            .replace("{" + "firmware_hash" + "}", localVarApiClient.escapeString(firmwareHash.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api-key-header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountsValidateBeforeCall(String firmwareHash, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'firmwareHash' is set
        if (firmwareHash == null) {
            throw new ApiException("Missing the required parameter 'firmwareHash' when calling getAccounts(Async)");
        }

        return getAccountsCall(firmwareHash, _callback);

    }

    /**
     * Get default accounts and password hashes of a firmware
     * 
     * @param firmwareHash SHA2 hash of device firmware (required)
     * @return List&lt;DefaultAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public List<DefaultAccount> getAccounts(String firmwareHash) throws ApiException {
        ApiResponse<List<DefaultAccount>> localVarResp = getAccountsWithHttpInfo(firmwareHash);
        return localVarResp.getData();
    }

    /**
     * Get default accounts and password hashes of a firmware
     * 
     * @param firmwareHash SHA2 hash of device firmware (required)
     * @return ApiResponse&lt;List&lt;DefaultAccount&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DefaultAccount>> getAccountsWithHttpInfo(String firmwareHash) throws ApiException {
        okhttp3.Call localVarCall = getAccountsValidateBeforeCall(firmwareHash, null);
        Type localVarReturnType = new TypeToken<List<DefaultAccount>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get default accounts and password hashes of a firmware (asynchronously)
     * 
     * @param firmwareHash SHA2 hash of device firmware (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountsAsync(String firmwareHash, final ApiCallback<List<DefaultAccount>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountsValidateBeforeCall(firmwareHash, _callback);
        Type localVarReturnType = new TypeToken<List<DefaultAccount>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getConfigIssues
     * @param firmwareHash SHA2 hash of device firmware (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConfigIssuesCall(String firmwareHash, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/firmware/{firmware_hash}/config-issues"
            .replace("{" + "firmware_hash" + "}", localVarApiClient.escapeString(firmwareHash.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api-key-header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConfigIssuesValidateBeforeCall(String firmwareHash, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'firmwareHash' is set
        if (firmwareHash == null) {
            throw new ApiException("Missing the required parameter 'firmwareHash' when calling getConfigIssues(Async)");
        }

        return getConfigIssuesCall(firmwareHash, _callback);

    }

    /**
     * Get default OS configuration issues of a device firmware
     * 
     * @param firmwareHash SHA2 hash of device firmware (required)
     * @return List&lt;ConfigIssue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public List<ConfigIssue> getConfigIssues(String firmwareHash) throws ApiException {
        ApiResponse<List<ConfigIssue>> localVarResp = getConfigIssuesWithHttpInfo(firmwareHash);
        return localVarResp.getData();
    }

    /**
     * Get default OS configuration issues of a device firmware
     * 
     * @param firmwareHash SHA2 hash of device firmware (required)
     * @return ApiResponse&lt;List&lt;ConfigIssue&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ConfigIssue>> getConfigIssuesWithHttpInfo(String firmwareHash) throws ApiException {
        okhttp3.Call localVarCall = getConfigIssuesValidateBeforeCall(firmwareHash, null);
        Type localVarReturnType = new TypeToken<List<ConfigIssue>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get default OS configuration issues of a device firmware (asynchronously)
     * 
     * @param firmwareHash SHA2 hash of device firmware (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConfigIssuesAsync(String firmwareHash, final ApiCallback<List<ConfigIssue>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConfigIssuesValidateBeforeCall(firmwareHash, _callback);
        Type localVarReturnType = new TypeToken<List<ConfigIssue>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getExpiredCerts
     * @param firmwareHash SHA2 hash of device firmware (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExpiredCertsCall(String firmwareHash, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/firmware/{firmware_hash}/expired-certs"
            .replace("{" + "firmware_hash" + "}", localVarApiClient.escapeString(firmwareHash.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api-key-header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExpiredCertsValidateBeforeCall(String firmwareHash, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'firmwareHash' is set
        if (firmwareHash == null) {
            throw new ApiException("Missing the required parameter 'firmwareHash' when calling getExpiredCerts(Async)");
        }

        return getExpiredCertsCall(firmwareHash, _callback);

    }

    /**
     * Get expired digital certificates embedded in a device firmware
     * 
     * @param firmwareHash SHA2 hash of device firmware (required)
     * @return List&lt;ExpiredCert&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public List<ExpiredCert> getExpiredCerts(String firmwareHash) throws ApiException {
        ApiResponse<List<ExpiredCert>> localVarResp = getExpiredCertsWithHttpInfo(firmwareHash);
        return localVarResp.getData();
    }

    /**
     * Get expired digital certificates embedded in a device firmware
     * 
     * @param firmwareHash SHA2 hash of device firmware (required)
     * @return ApiResponse&lt;List&lt;ExpiredCert&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ExpiredCert>> getExpiredCertsWithHttpInfo(String firmwareHash) throws ApiException {
        okhttp3.Call localVarCall = getExpiredCertsValidateBeforeCall(firmwareHash, null);
        Type localVarReturnType = new TypeToken<List<ExpiredCert>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get expired digital certificates embedded in a device firmware (asynchronously)
     * 
     * @param firmwareHash SHA2 hash of device firmware (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExpiredCertsAsync(String firmwareHash, final ApiCallback<List<ExpiredCert>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExpiredCertsValidateBeforeCall(firmwareHash, _callback);
        Type localVarReturnType = new TypeToken<List<ExpiredCert>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPrivateKeys
     * @param firmwareHash SHA2 hash of device firmware (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPrivateKeysCall(String firmwareHash, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/firmware/{firmware_hash}/private-keys"
            .replace("{" + "firmware_hash" + "}", localVarApiClient.escapeString(firmwareHash.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api-key-header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPrivateKeysValidateBeforeCall(String firmwareHash, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'firmwareHash' is set
        if (firmwareHash == null) {
            throw new ApiException("Missing the required parameter 'firmwareHash' when calling getPrivateKeys(Async)");
        }

        return getPrivateKeysCall(firmwareHash, _callback);

    }

    /**
     * Get private crypto keys embedded in a device firmware
     * 
     * @param firmwareHash SHA2 hash of device firmware (required)
     * @return List&lt;CryptoKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public List<CryptoKey> getPrivateKeys(String firmwareHash) throws ApiException {
        ApiResponse<List<CryptoKey>> localVarResp = getPrivateKeysWithHttpInfo(firmwareHash);
        return localVarResp.getData();
    }

    /**
     * Get private crypto keys embedded in a device firmware
     * 
     * @param firmwareHash SHA2 hash of device firmware (required)
     * @return ApiResponse&lt;List&lt;CryptoKey&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CryptoKey>> getPrivateKeysWithHttpInfo(String firmwareHash) throws ApiException {
        okhttp3.Call localVarCall = getPrivateKeysValidateBeforeCall(firmwareHash, null);
        Type localVarReturnType = new TypeToken<List<CryptoKey>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get private crypto keys embedded in a device firmware (asynchronously)
     * 
     * @param firmwareHash SHA2 hash of device firmware (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPrivateKeysAsync(String firmwareHash, final ApiCallback<List<CryptoKey>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPrivateKeysValidateBeforeCall(firmwareHash, _callback);
        Type localVarReturnType = new TypeToken<List<CryptoKey>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRisk
     * @param firmwareHash SHA2 hash of device firmware (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRiskCall(String firmwareHash, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/firmware/{firmware_hash}/risk"
            .replace("{" + "firmware_hash" + "}", localVarApiClient.escapeString(firmwareHash.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api-key-header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRiskValidateBeforeCall(String firmwareHash, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'firmwareHash' is set
        if (firmwareHash == null) {
            throw new ApiException("Missing the required parameter 'firmwareHash' when calling getRisk(Async)");
        }

        return getRiskCall(firmwareHash, _callback);

    }

    /**
     * Get iot device firmware risk analysis
     * 
     * @param firmwareHash SHA2 hash of device firmware (required)
     * @return FirmwareRisk
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public FirmwareRisk getRisk(String firmwareHash) throws ApiException {
        ApiResponse<FirmwareRisk> localVarResp = getRiskWithHttpInfo(firmwareHash);
        return localVarResp.getData();
    }

    /**
     * Get iot device firmware risk analysis
     * 
     * @param firmwareHash SHA2 hash of device firmware (required)
     * @return ApiResponse&lt;FirmwareRisk&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FirmwareRisk> getRiskWithHttpInfo(String firmwareHash) throws ApiException {
        okhttp3.Call localVarCall = getRiskValidateBeforeCall(firmwareHash, null);
        Type localVarReturnType = new TypeToken<FirmwareRisk>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get iot device firmware risk analysis (asynchronously)
     * 
     * @param firmwareHash SHA2 hash of device firmware (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRiskAsync(String firmwareHash, final ApiCallback<FirmwareRisk> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRiskValidateBeforeCall(firmwareHash, _callback);
        Type localVarReturnType = new TypeToken<FirmwareRisk>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getWeakCerts
     * @param firmwareHash SHA2 hash of device firmware (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWeakCertsCall(String firmwareHash, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/firmware/{firmware_hash}/weak-certs"
            .replace("{" + "firmware_hash" + "}", localVarApiClient.escapeString(firmwareHash.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api-key-header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWeakCertsValidateBeforeCall(String firmwareHash, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'firmwareHash' is set
        if (firmwareHash == null) {
            throw new ApiException("Missing the required parameter 'firmwareHash' when calling getWeakCerts(Async)");
        }

        return getWeakCertsCall(firmwareHash, _callback);

    }

    /**
     * Get certificates with weak fingerprinting algorithms that are mebedded in a device firmware
     * 
     * @param firmwareHash SHA2 hash of device firmware (required)
     * @return List&lt;WeakCert&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public List<WeakCert> getWeakCerts(String firmwareHash) throws ApiException {
        ApiResponse<List<WeakCert>> localVarResp = getWeakCertsWithHttpInfo(firmwareHash);
        return localVarResp.getData();
    }

    /**
     * Get certificates with weak fingerprinting algorithms that are mebedded in a device firmware
     * 
     * @param firmwareHash SHA2 hash of device firmware (required)
     * @return ApiResponse&lt;List&lt;WeakCert&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WeakCert>> getWeakCertsWithHttpInfo(String firmwareHash) throws ApiException {
        okhttp3.Call localVarCall = getWeakCertsValidateBeforeCall(firmwareHash, null);
        Type localVarReturnType = new TypeToken<List<WeakCert>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get certificates with weak fingerprinting algorithms that are mebedded in a device firmware (asynchronously)
     * 
     * @param firmwareHash SHA2 hash of device firmware (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWeakCertsAsync(String firmwareHash, final ApiCallback<List<WeakCert>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWeakCertsValidateBeforeCall(firmwareHash, _callback);
        Type localVarReturnType = new TypeToken<List<WeakCert>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getWeakKeys
     * @param firmwareHash SHA2 hash of device firmware (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWeakKeysCall(String firmwareHash, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/firmware/{firmware_hash}/weak-keys"
            .replace("{" + "firmware_hash" + "}", localVarApiClient.escapeString(firmwareHash.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api-key-header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWeakKeysValidateBeforeCall(String firmwareHash, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'firmwareHash' is set
        if (firmwareHash == null) {
            throw new ApiException("Missing the required parameter 'firmwareHash' when calling getWeakKeys(Async)");
        }

        return getWeakKeysCall(firmwareHash, _callback);

    }

    /**
     * Get weak crypto keys with short length
     * 
     * @param firmwareHash SHA2 hash of device firmware (required)
     * @return List&lt;CryptoKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public List<CryptoKey> getWeakKeys(String firmwareHash) throws ApiException {
        ApiResponse<List<CryptoKey>> localVarResp = getWeakKeysWithHttpInfo(firmwareHash);
        return localVarResp.getData();
    }

    /**
     * Get weak crypto keys with short length
     * 
     * @param firmwareHash SHA2 hash of device firmware (required)
     * @return ApiResponse&lt;List&lt;CryptoKey&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CryptoKey>> getWeakKeysWithHttpInfo(String firmwareHash) throws ApiException {
        okhttp3.Call localVarCall = getWeakKeysValidateBeforeCall(firmwareHash, null);
        Type localVarReturnType = new TypeToken<List<CryptoKey>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get weak crypto keys with short length (asynchronously)
     * 
     * @param firmwareHash SHA2 hash of device firmware (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWeakKeysAsync(String firmwareHash, final ApiCallback<List<CryptoKey>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWeakKeysValidateBeforeCall(firmwareHash, _callback);
        Type localVarReturnType = new TypeToken<List<CryptoKey>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
