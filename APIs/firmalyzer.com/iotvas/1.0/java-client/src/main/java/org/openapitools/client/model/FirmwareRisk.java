/*
 * IoTVAS API
 * IOTVAS API enables you to discover IoT/Connected devices in the network and provides      detailed real-time risk analysis, including firmware vulnerability analysis without requiring the user to upload the firmware file.     Please visit the [signup page](https://iotvas-api.firmalyzer.com/portal/signup) to create an API key.     IoTVAS API can be easily integrated with vulnerability scanning and network port scanner tools. For example,     we have also released the [IOTVAS NSE script](https://github.com/firmalyzer/iotvas-nmap) that turns the nmap port scanner      to a IoT/connected device discovery and real-time risk assessment tool. For more infromation on IoTVAS and other      solutions please visit [Firmalyzer web site](https://www.firmalyzer.com).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RiskSummary;
import org.openapitools.client.model.VulnerableComponent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FirmwareRisk
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:04.326394-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FirmwareRisk {
  public static final String SERIALIZED_NAME_RISK_SUMMARY = "risk_summary";
  @SerializedName(SERIALIZED_NAME_RISK_SUMMARY)
  private RiskSummary riskSummary;

  public static final String SERIALIZED_NAME_VULNERABLE_COMPONENTS = "vulnerable_components";
  @SerializedName(SERIALIZED_NAME_VULNERABLE_COMPONENTS)
  private List<VulnerableComponent> vulnerableComponents = new ArrayList<>();

  public FirmwareRisk() {
  }

  public FirmwareRisk riskSummary(RiskSummary riskSummary) {
    this.riskSummary = riskSummary;
    return this;
  }

  /**
   * Get riskSummary
   * @return riskSummary
   */
  @javax.annotation.Nullable
  public RiskSummary getRiskSummary() {
    return riskSummary;
  }

  public void setRiskSummary(RiskSummary riskSummary) {
    this.riskSummary = riskSummary;
  }


  public FirmwareRisk vulnerableComponents(List<VulnerableComponent> vulnerableComponents) {
    this.vulnerableComponents = vulnerableComponents;
    return this;
  }

  public FirmwareRisk addVulnerableComponentsItem(VulnerableComponent vulnerableComponentsItem) {
    if (this.vulnerableComponents == null) {
      this.vulnerableComponents = new ArrayList<>();
    }
    this.vulnerableComponents.add(vulnerableComponentsItem);
    return this;
  }

  /**
   * Get vulnerableComponents
   * @return vulnerableComponents
   */
  @javax.annotation.Nullable
  public List<VulnerableComponent> getVulnerableComponents() {
    return vulnerableComponents;
  }

  public void setVulnerableComponents(List<VulnerableComponent> vulnerableComponents) {
    this.vulnerableComponents = vulnerableComponents;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FirmwareRisk firmwareRisk = (FirmwareRisk) o;
    return Objects.equals(this.riskSummary, firmwareRisk.riskSummary) &&
        Objects.equals(this.vulnerableComponents, firmwareRisk.vulnerableComponents);
  }

  @Override
  public int hashCode() {
    return Objects.hash(riskSummary, vulnerableComponents);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FirmwareRisk {\n");
    sb.append("    riskSummary: ").append(toIndentedString(riskSummary)).append("\n");
    sb.append("    vulnerableComponents: ").append(toIndentedString(vulnerableComponents)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("risk_summary");
    openapiFields.add("vulnerable_components");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FirmwareRisk
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FirmwareRisk.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FirmwareRisk is not found in the empty JSON string", FirmwareRisk.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FirmwareRisk.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FirmwareRisk` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `risk_summary`
      if (jsonObj.get("risk_summary") != null && !jsonObj.get("risk_summary").isJsonNull()) {
        RiskSummary.validateJsonElement(jsonObj.get("risk_summary"));
      }
      if (jsonObj.get("vulnerable_components") != null && !jsonObj.get("vulnerable_components").isJsonNull()) {
        JsonArray jsonArrayvulnerableComponents = jsonObj.getAsJsonArray("vulnerable_components");
        if (jsonArrayvulnerableComponents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("vulnerable_components").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `vulnerable_components` to be an array in the JSON string but got `%s`", jsonObj.get("vulnerable_components").toString()));
          }

          // validate the optional field `vulnerable_components` (array)
          for (int i = 0; i < jsonArrayvulnerableComponents.size(); i++) {
            VulnerableComponent.validateJsonElement(jsonArrayvulnerableComponents.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FirmwareRisk.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FirmwareRisk' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FirmwareRisk> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FirmwareRisk.class));

       return (TypeAdapter<T>) new TypeAdapter<FirmwareRisk>() {
           @Override
           public void write(JsonWriter out, FirmwareRisk value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FirmwareRisk read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FirmwareRisk given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FirmwareRisk
   * @throws IOException if the JSON string is invalid with respect to FirmwareRisk
   */
  public static FirmwareRisk fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FirmwareRisk.class);
  }

  /**
   * Convert an instance of FirmwareRisk to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

