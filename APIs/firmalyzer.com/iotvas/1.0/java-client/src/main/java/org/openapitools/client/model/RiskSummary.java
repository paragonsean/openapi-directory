/*
 * IoTVAS API
 * IOTVAS API enables you to discover IoT/Connected devices in the network and provides      detailed real-time risk analysis, including firmware vulnerability analysis without requiring the user to upload the firmware file.     Please visit the [signup page](https://iotvas-api.firmalyzer.com/portal/signup) to create an API key.     IoTVAS API can be easily integrated with vulnerability scanning and network port scanner tools. For example,     we have also released the [IOTVAS NSE script](https://github.com/firmalyzer/iotvas-nmap) that turns the nmap port scanner      to a IoT/connected device discovery and real-time risk assessment tool. For more infromation on IoTVAS and other      solutions please visit [Firmalyzer web site](https://www.firmalyzer.com).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RiskSummary
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:04.326394-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RiskSummary {
  public static final String SERIALIZED_NAME_CLIENT_TOOLS_RISK = "client_tools_risk";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOOLS_RISK)
  private String clientToolsRisk;

  public static final String SERIALIZED_NAME_CRYPTO_RISK = "crypto_risk";
  @SerializedName(SERIALIZED_NAME_CRYPTO_RISK)
  private String cryptoRisk;

  public static final String SERIALIZED_NAME_KERNEL_RISK = "kernel_risk";
  @SerializedName(SERIALIZED_NAME_KERNEL_RISK)
  private String kernelRisk;

  public static final String SERIALIZED_NAME_NET_SERVICES_RISK = "net_services_risk";
  @SerializedName(SERIALIZED_NAME_NET_SERVICES_RISK)
  private String netServicesRisk;

  public RiskSummary() {
  }

  public RiskSummary clientToolsRisk(String clientToolsRisk) {
    this.clientToolsRisk = clientToolsRisk;
    return this;
  }

  /**
   * Get clientToolsRisk
   * @return clientToolsRisk
   */
  @javax.annotation.Nullable
  public String getClientToolsRisk() {
    return clientToolsRisk;
  }

  public void setClientToolsRisk(String clientToolsRisk) {
    this.clientToolsRisk = clientToolsRisk;
  }


  public RiskSummary cryptoRisk(String cryptoRisk) {
    this.cryptoRisk = cryptoRisk;
    return this;
  }

  /**
   * Get cryptoRisk
   * @return cryptoRisk
   */
  @javax.annotation.Nullable
  public String getCryptoRisk() {
    return cryptoRisk;
  }

  public void setCryptoRisk(String cryptoRisk) {
    this.cryptoRisk = cryptoRisk;
  }


  public RiskSummary kernelRisk(String kernelRisk) {
    this.kernelRisk = kernelRisk;
    return this;
  }

  /**
   * Get kernelRisk
   * @return kernelRisk
   */
  @javax.annotation.Nullable
  public String getKernelRisk() {
    return kernelRisk;
  }

  public void setKernelRisk(String kernelRisk) {
    this.kernelRisk = kernelRisk;
  }


  public RiskSummary netServicesRisk(String netServicesRisk) {
    this.netServicesRisk = netServicesRisk;
    return this;
  }

  /**
   * Get netServicesRisk
   * @return netServicesRisk
   */
  @javax.annotation.Nullable
  public String getNetServicesRisk() {
    return netServicesRisk;
  }

  public void setNetServicesRisk(String netServicesRisk) {
    this.netServicesRisk = netServicesRisk;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RiskSummary riskSummary = (RiskSummary) o;
    return Objects.equals(this.clientToolsRisk, riskSummary.clientToolsRisk) &&
        Objects.equals(this.cryptoRisk, riskSummary.cryptoRisk) &&
        Objects.equals(this.kernelRisk, riskSummary.kernelRisk) &&
        Objects.equals(this.netServicesRisk, riskSummary.netServicesRisk);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientToolsRisk, cryptoRisk, kernelRisk, netServicesRisk);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RiskSummary {\n");
    sb.append("    clientToolsRisk: ").append(toIndentedString(clientToolsRisk)).append("\n");
    sb.append("    cryptoRisk: ").append(toIndentedString(cryptoRisk)).append("\n");
    sb.append("    kernelRisk: ").append(toIndentedString(kernelRisk)).append("\n");
    sb.append("    netServicesRisk: ").append(toIndentedString(netServicesRisk)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("client_tools_risk");
    openapiFields.add("crypto_risk");
    openapiFields.add("kernel_risk");
    openapiFields.add("net_services_risk");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RiskSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RiskSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RiskSummary is not found in the empty JSON string", RiskSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RiskSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RiskSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("client_tools_risk") != null && !jsonObj.get("client_tools_risk").isJsonNull()) && !jsonObj.get("client_tools_risk").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_tools_risk` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_tools_risk").toString()));
      }
      if ((jsonObj.get("crypto_risk") != null && !jsonObj.get("crypto_risk").isJsonNull()) && !jsonObj.get("crypto_risk").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `crypto_risk` to be a primitive type in the JSON string but got `%s`", jsonObj.get("crypto_risk").toString()));
      }
      if ((jsonObj.get("kernel_risk") != null && !jsonObj.get("kernel_risk").isJsonNull()) && !jsonObj.get("kernel_risk").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kernel_risk` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kernel_risk").toString()));
      }
      if ((jsonObj.get("net_services_risk") != null && !jsonObj.get("net_services_risk").isJsonNull()) && !jsonObj.get("net_services_risk").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `net_services_risk` to be a primitive type in the JSON string but got `%s`", jsonObj.get("net_services_risk").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RiskSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RiskSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RiskSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RiskSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<RiskSummary>() {
           @Override
           public void write(JsonWriter out, RiskSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RiskSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RiskSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RiskSummary
   * @throws IOException if the JSON string is invalid with respect to RiskSummary
   */
  public static RiskSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RiskSummary.class);
  }

  /**
   * Convert an instance of RiskSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

