/*
 * IoTVAS API
 * IOTVAS API enables you to discover IoT/Connected devices in the network and provides      detailed real-time risk analysis, including firmware vulnerability analysis without requiring the user to upload the firmware file.     Please visit the [signup page](https://iotvas-api.firmalyzer.com/portal/signup) to create an API key.     IoTVAS API can be easily integrated with vulnerability scanning and network port scanner tools. For example,     we have also released the [IOTVAS NSE script](https://github.com/firmalyzer/iotvas-nmap) that turns the nmap port scanner      to a IoT/connected device discovery and real-time risk assessment tool. For more infromation on IoTVAS and other      solutions please visit [Firmalyzer web site](https://www.firmalyzer.com).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DeviceFeatures
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:04.326394-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeviceFeatures {
  public static final String SERIALIZED_NAME_FTP_BANNER = "ftp_banner";
  @SerializedName(SERIALIZED_NAME_FTP_BANNER)
  private String ftpBanner = "";

  public static final String SERIALIZED_NAME_HOSTNAME = "hostname";
  @SerializedName(SERIALIZED_NAME_HOSTNAME)
  private String hostname = "";

  public static final String SERIALIZED_NAME_HTTP_RESPONSE = "http_response";
  @SerializedName(SERIALIZED_NAME_HTTP_RESPONSE)
  private String httpResponse = "";

  public static final String SERIALIZED_NAME_HTTPS_RESPONSE = "https_response";
  @SerializedName(SERIALIZED_NAME_HTTPS_RESPONSE)
  private String httpsResponse = "";

  public static final String SERIALIZED_NAME_NIC_MAC = "nic_mac";
  @SerializedName(SERIALIZED_NAME_NIC_MAC)
  private String nicMac = "";

  public static final String SERIALIZED_NAME_SNMP_SYSDESCR = "snmp_sysdescr";
  @SerializedName(SERIALIZED_NAME_SNMP_SYSDESCR)
  private String snmpSysdescr = "";

  public static final String SERIALIZED_NAME_SNMP_SYSOID = "snmp_sysoid";
  @SerializedName(SERIALIZED_NAME_SNMP_SYSOID)
  private String snmpSysoid = "";

  public static final String SERIALIZED_NAME_TELNET_BANNER = "telnet_banner";
  @SerializedName(SERIALIZED_NAME_TELNET_BANNER)
  private String telnetBanner = "";

  public static final String SERIALIZED_NAME_UPNP_RESPONSE = "upnp_response";
  @SerializedName(SERIALIZED_NAME_UPNP_RESPONSE)
  private String upnpResponse = "";

  public DeviceFeatures() {
  }

  public DeviceFeatures ftpBanner(String ftpBanner) {
    this.ftpBanner = ftpBanner;
    return this;
  }

  /**
   * Get ftpBanner
   * @return ftpBanner
   */
  @javax.annotation.Nullable
  public String getFtpBanner() {
    return ftpBanner;
  }

  public void setFtpBanner(String ftpBanner) {
    this.ftpBanner = ftpBanner;
  }


  public DeviceFeatures hostname(String hostname) {
    this.hostname = hostname;
    return this;
  }

  /**
   * Get hostname
   * @return hostname
   */
  @javax.annotation.Nullable
  public String getHostname() {
    return hostname;
  }

  public void setHostname(String hostname) {
    this.hostname = hostname;
  }


  public DeviceFeatures httpResponse(String httpResponse) {
    this.httpResponse = httpResponse;
    return this;
  }

  /**
   * Get httpResponse
   * @return httpResponse
   */
  @javax.annotation.Nullable
  public String getHttpResponse() {
    return httpResponse;
  }

  public void setHttpResponse(String httpResponse) {
    this.httpResponse = httpResponse;
  }


  public DeviceFeatures httpsResponse(String httpsResponse) {
    this.httpsResponse = httpsResponse;
    return this;
  }

  /**
   * Get httpsResponse
   * @return httpsResponse
   */
  @javax.annotation.Nullable
  public String getHttpsResponse() {
    return httpsResponse;
  }

  public void setHttpsResponse(String httpsResponse) {
    this.httpsResponse = httpsResponse;
  }


  public DeviceFeatures nicMac(String nicMac) {
    this.nicMac = nicMac;
    return this;
  }

  /**
   * Get nicMac
   * @return nicMac
   */
  @javax.annotation.Nullable
  public String getNicMac() {
    return nicMac;
  }

  public void setNicMac(String nicMac) {
    this.nicMac = nicMac;
  }


  public DeviceFeatures snmpSysdescr(String snmpSysdescr) {
    this.snmpSysdescr = snmpSysdescr;
    return this;
  }

  /**
   * Get snmpSysdescr
   * @return snmpSysdescr
   */
  @javax.annotation.Nullable
  public String getSnmpSysdescr() {
    return snmpSysdescr;
  }

  public void setSnmpSysdescr(String snmpSysdescr) {
    this.snmpSysdescr = snmpSysdescr;
  }


  public DeviceFeatures snmpSysoid(String snmpSysoid) {
    this.snmpSysoid = snmpSysoid;
    return this;
  }

  /**
   * Get snmpSysoid
   * @return snmpSysoid
   */
  @javax.annotation.Nullable
  public String getSnmpSysoid() {
    return snmpSysoid;
  }

  public void setSnmpSysoid(String snmpSysoid) {
    this.snmpSysoid = snmpSysoid;
  }


  public DeviceFeatures telnetBanner(String telnetBanner) {
    this.telnetBanner = telnetBanner;
    return this;
  }

  /**
   * Get telnetBanner
   * @return telnetBanner
   */
  @javax.annotation.Nullable
  public String getTelnetBanner() {
    return telnetBanner;
  }

  public void setTelnetBanner(String telnetBanner) {
    this.telnetBanner = telnetBanner;
  }


  public DeviceFeatures upnpResponse(String upnpResponse) {
    this.upnpResponse = upnpResponse;
    return this;
  }

  /**
   * Get upnpResponse
   * @return upnpResponse
   */
  @javax.annotation.Nullable
  public String getUpnpResponse() {
    return upnpResponse;
  }

  public void setUpnpResponse(String upnpResponse) {
    this.upnpResponse = upnpResponse;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceFeatures deviceFeatures = (DeviceFeatures) o;
    return Objects.equals(this.ftpBanner, deviceFeatures.ftpBanner) &&
        Objects.equals(this.hostname, deviceFeatures.hostname) &&
        Objects.equals(this.httpResponse, deviceFeatures.httpResponse) &&
        Objects.equals(this.httpsResponse, deviceFeatures.httpsResponse) &&
        Objects.equals(this.nicMac, deviceFeatures.nicMac) &&
        Objects.equals(this.snmpSysdescr, deviceFeatures.snmpSysdescr) &&
        Objects.equals(this.snmpSysoid, deviceFeatures.snmpSysoid) &&
        Objects.equals(this.telnetBanner, deviceFeatures.telnetBanner) &&
        Objects.equals(this.upnpResponse, deviceFeatures.upnpResponse);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ftpBanner, hostname, httpResponse, httpsResponse, nicMac, snmpSysdescr, snmpSysoid, telnetBanner, upnpResponse);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceFeatures {\n");
    sb.append("    ftpBanner: ").append(toIndentedString(ftpBanner)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    httpResponse: ").append(toIndentedString(httpResponse)).append("\n");
    sb.append("    httpsResponse: ").append(toIndentedString(httpsResponse)).append("\n");
    sb.append("    nicMac: ").append(toIndentedString(nicMac)).append("\n");
    sb.append("    snmpSysdescr: ").append(toIndentedString(snmpSysdescr)).append("\n");
    sb.append("    snmpSysoid: ").append(toIndentedString(snmpSysoid)).append("\n");
    sb.append("    telnetBanner: ").append(toIndentedString(telnetBanner)).append("\n");
    sb.append("    upnpResponse: ").append(toIndentedString(upnpResponse)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ftp_banner");
    openapiFields.add("hostname");
    openapiFields.add("http_response");
    openapiFields.add("https_response");
    openapiFields.add("nic_mac");
    openapiFields.add("snmp_sysdescr");
    openapiFields.add("snmp_sysoid");
    openapiFields.add("telnet_banner");
    openapiFields.add("upnp_response");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeviceFeatures
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeviceFeatures.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeviceFeatures is not found in the empty JSON string", DeviceFeatures.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeviceFeatures.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeviceFeatures` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ftp_banner") != null && !jsonObj.get("ftp_banner").isJsonNull()) && !jsonObj.get("ftp_banner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ftp_banner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ftp_banner").toString()));
      }
      if ((jsonObj.get("hostname") != null && !jsonObj.get("hostname").isJsonNull()) && !jsonObj.get("hostname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostname").toString()));
      }
      if ((jsonObj.get("http_response") != null && !jsonObj.get("http_response").isJsonNull()) && !jsonObj.get("http_response").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `http_response` to be a primitive type in the JSON string but got `%s`", jsonObj.get("http_response").toString()));
      }
      if ((jsonObj.get("https_response") != null && !jsonObj.get("https_response").isJsonNull()) && !jsonObj.get("https_response").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `https_response` to be a primitive type in the JSON string but got `%s`", jsonObj.get("https_response").toString()));
      }
      if ((jsonObj.get("nic_mac") != null && !jsonObj.get("nic_mac").isJsonNull()) && !jsonObj.get("nic_mac").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nic_mac` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nic_mac").toString()));
      }
      if ((jsonObj.get("snmp_sysdescr") != null && !jsonObj.get("snmp_sysdescr").isJsonNull()) && !jsonObj.get("snmp_sysdescr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `snmp_sysdescr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("snmp_sysdescr").toString()));
      }
      if ((jsonObj.get("snmp_sysoid") != null && !jsonObj.get("snmp_sysoid").isJsonNull()) && !jsonObj.get("snmp_sysoid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `snmp_sysoid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("snmp_sysoid").toString()));
      }
      if ((jsonObj.get("telnet_banner") != null && !jsonObj.get("telnet_banner").isJsonNull()) && !jsonObj.get("telnet_banner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `telnet_banner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("telnet_banner").toString()));
      }
      if ((jsonObj.get("upnp_response") != null && !jsonObj.get("upnp_response").isJsonNull()) && !jsonObj.get("upnp_response").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `upnp_response` to be a primitive type in the JSON string but got `%s`", jsonObj.get("upnp_response").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeviceFeatures.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeviceFeatures' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeviceFeatures> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeviceFeatures.class));

       return (TypeAdapter<T>) new TypeAdapter<DeviceFeatures>() {
           @Override
           public void write(JsonWriter out, DeviceFeatures value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeviceFeatures read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeviceFeatures given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeviceFeatures
   * @throws IOException if the JSON string is invalid with respect to DeviceFeatures
   */
  public static DeviceFeatures fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeviceFeatures.class);
  }

  /**
   * Convert an instance of DeviceFeatures to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

