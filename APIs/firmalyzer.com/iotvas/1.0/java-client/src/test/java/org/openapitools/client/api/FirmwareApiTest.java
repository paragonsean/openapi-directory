/*
 * IoTVAS API
 * IOTVAS API enables you to discover IoT/Connected devices in the network and provides      detailed real-time risk analysis, including firmware vulnerability analysis without requiring the user to upload the firmware file.     Please visit the [signup page](https://iotvas-api.firmalyzer.com/portal/signup) to create an API key.     IoTVAS API can be easily integrated with vulnerability scanning and network port scanner tools. For example,     we have also released the [IOTVAS NSE script](https://github.com/firmalyzer/iotvas-nmap) that turns the nmap port scanner      to a IoT/connected device discovery and real-time risk assessment tool. For more infromation on IoTVAS and other      solutions please visit [Firmalyzer web site](https://www.firmalyzer.com).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ConfigIssue;
import org.openapitools.client.model.CryptoKey;
import org.openapitools.client.model.DefaultAccount;
import org.openapitools.client.model.ExpiredCert;
import org.openapitools.client.model.FirmwareRisk;
import org.openapitools.client.model.HTTPValidationError;
import org.openapitools.client.model.WeakCert;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FirmwareApi
 */
@Disabled
public class FirmwareApiTest {

    private final FirmwareApi api = new FirmwareApi();

    /**
     * Get default accounts and password hashes of a firmware
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAccountsTest() throws ApiException {
        String firmwareHash = null;
        List<DefaultAccount> response = api.getAccounts(firmwareHash);
        // TODO: test validations
    }

    /**
     * Get default OS configuration issues of a device firmware
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConfigIssuesTest() throws ApiException {
        String firmwareHash = null;
        List<ConfigIssue> response = api.getConfigIssues(firmwareHash);
        // TODO: test validations
    }

    /**
     * Get expired digital certificates embedded in a device firmware
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getExpiredCertsTest() throws ApiException {
        String firmwareHash = null;
        List<ExpiredCert> response = api.getExpiredCerts(firmwareHash);
        // TODO: test validations
    }

    /**
     * Get private crypto keys embedded in a device firmware
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPrivateKeysTest() throws ApiException {
        String firmwareHash = null;
        List<CryptoKey> response = api.getPrivateKeys(firmwareHash);
        // TODO: test validations
    }

    /**
     * Get iot device firmware risk analysis
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRiskTest() throws ApiException {
        String firmwareHash = null;
        FirmwareRisk response = api.getRisk(firmwareHash);
        // TODO: test validations
    }

    /**
     * Get certificates with weak fingerprinting algorithms that are mebedded in a device firmware
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWeakCertsTest() throws ApiException {
        String firmwareHash = null;
        List<WeakCert> response = api.getWeakCerts(firmwareHash);
        // TODO: test validations
    }

    /**
     * Get weak crypto keys with short length
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWeakKeysTest() throws ApiException {
        String firmwareHash = null;
        List<CryptoKey> response = api.getWeakKeys(firmwareHash);
        // TODO: test validations
    }

}
