# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WeakCert(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, file_hash: str=None, file_name: str=None, sign_algorithm: str=None, subject_name: str=None, thumb_print: str=None, valid_from: str=None, valid_to: str=None):
        """WeakCert - a model defined in OpenAPI

        :param file_hash: The file_hash of this WeakCert.
        :param file_name: The file_name of this WeakCert.
        :param sign_algorithm: The sign_algorithm of this WeakCert.
        :param subject_name: The subject_name of this WeakCert.
        :param thumb_print: The thumb_print of this WeakCert.
        :param valid_from: The valid_from of this WeakCert.
        :param valid_to: The valid_to of this WeakCert.
        """
        self.openapi_types = {
            'file_hash': str,
            'file_name': str,
            'sign_algorithm': str,
            'subject_name': str,
            'thumb_print': str,
            'valid_from': str,
            'valid_to': str
        }

        self.attribute_map = {
            'file_hash': 'file_hash',
            'file_name': 'file_name',
            'sign_algorithm': 'sign_algorithm',
            'subject_name': 'subject_name',
            'thumb_print': 'thumb_print',
            'valid_from': 'valid_from',
            'valid_to': 'valid_to'
        }

        self._file_hash = file_hash
        self._file_name = file_name
        self._sign_algorithm = sign_algorithm
        self._subject_name = subject_name
        self._thumb_print = thumb_print
        self._valid_from = valid_from
        self._valid_to = valid_to

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WeakCert':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WeakCert of this WeakCert.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file_hash(self):
        """Gets the file_hash of this WeakCert.


        :return: The file_hash of this WeakCert.
        :rtype: str
        """
        return self._file_hash

    @file_hash.setter
    def file_hash(self, file_hash):
        """Sets the file_hash of this WeakCert.


        :param file_hash: The file_hash of this WeakCert.
        :type file_hash: str
        """

        self._file_hash = file_hash

    @property
    def file_name(self):
        """Gets the file_name of this WeakCert.


        :return: The file_name of this WeakCert.
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this WeakCert.


        :param file_name: The file_name of this WeakCert.
        :type file_name: str
        """

        self._file_name = file_name

    @property
    def sign_algorithm(self):
        """Gets the sign_algorithm of this WeakCert.


        :return: The sign_algorithm of this WeakCert.
        :rtype: str
        """
        return self._sign_algorithm

    @sign_algorithm.setter
    def sign_algorithm(self, sign_algorithm):
        """Sets the sign_algorithm of this WeakCert.


        :param sign_algorithm: The sign_algorithm of this WeakCert.
        :type sign_algorithm: str
        """

        self._sign_algorithm = sign_algorithm

    @property
    def subject_name(self):
        """Gets the subject_name of this WeakCert.


        :return: The subject_name of this WeakCert.
        :rtype: str
        """
        return self._subject_name

    @subject_name.setter
    def subject_name(self, subject_name):
        """Sets the subject_name of this WeakCert.


        :param subject_name: The subject_name of this WeakCert.
        :type subject_name: str
        """

        self._subject_name = subject_name

    @property
    def thumb_print(self):
        """Gets the thumb_print of this WeakCert.


        :return: The thumb_print of this WeakCert.
        :rtype: str
        """
        return self._thumb_print

    @thumb_print.setter
    def thumb_print(self, thumb_print):
        """Sets the thumb_print of this WeakCert.


        :param thumb_print: The thumb_print of this WeakCert.
        :type thumb_print: str
        """

        self._thumb_print = thumb_print

    @property
    def valid_from(self):
        """Gets the valid_from of this WeakCert.


        :return: The valid_from of this WeakCert.
        :rtype: str
        """
        return self._valid_from

    @valid_from.setter
    def valid_from(self, valid_from):
        """Sets the valid_from of this WeakCert.


        :param valid_from: The valid_from of this WeakCert.
        :type valid_from: str
        """

        self._valid_from = valid_from

    @property
    def valid_to(self):
        """Gets the valid_to of this WeakCert.


        :return: The valid_to of this WeakCert.
        :rtype: str
        """
        return self._valid_to

    @valid_to.setter
    def valid_to(self, valid_to):
        """Sets the valid_to of this WeakCert.


        :param valid_to: The valid_to of this WeakCert.
        :type valid_to: str
        """

        self._valid_to = valid_to
