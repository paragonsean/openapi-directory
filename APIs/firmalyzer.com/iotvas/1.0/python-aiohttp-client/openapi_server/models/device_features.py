# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeviceFeatures(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ftp_banner: str='', hostname: str='', http_response: str='', https_response: str='', nic_mac: str='', snmp_sysdescr: str='', snmp_sysoid: str='', telnet_banner: str='', upnp_response: str=''):
        """DeviceFeatures - a model defined in OpenAPI

        :param ftp_banner: The ftp_banner of this DeviceFeatures.
        :param hostname: The hostname of this DeviceFeatures.
        :param http_response: The http_response of this DeviceFeatures.
        :param https_response: The https_response of this DeviceFeatures.
        :param nic_mac: The nic_mac of this DeviceFeatures.
        :param snmp_sysdescr: The snmp_sysdescr of this DeviceFeatures.
        :param snmp_sysoid: The snmp_sysoid of this DeviceFeatures.
        :param telnet_banner: The telnet_banner of this DeviceFeatures.
        :param upnp_response: The upnp_response of this DeviceFeatures.
        """
        self.openapi_types = {
            'ftp_banner': str,
            'hostname': str,
            'http_response': str,
            'https_response': str,
            'nic_mac': str,
            'snmp_sysdescr': str,
            'snmp_sysoid': str,
            'telnet_banner': str,
            'upnp_response': str
        }

        self.attribute_map = {
            'ftp_banner': 'ftp_banner',
            'hostname': 'hostname',
            'http_response': 'http_response',
            'https_response': 'https_response',
            'nic_mac': 'nic_mac',
            'snmp_sysdescr': 'snmp_sysdescr',
            'snmp_sysoid': 'snmp_sysoid',
            'telnet_banner': 'telnet_banner',
            'upnp_response': 'upnp_response'
        }

        self._ftp_banner = ftp_banner
        self._hostname = hostname
        self._http_response = http_response
        self._https_response = https_response
        self._nic_mac = nic_mac
        self._snmp_sysdescr = snmp_sysdescr
        self._snmp_sysoid = snmp_sysoid
        self._telnet_banner = telnet_banner
        self._upnp_response = upnp_response

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceFeatures':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeviceFeatures of this DeviceFeatures.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ftp_banner(self):
        """Gets the ftp_banner of this DeviceFeatures.


        :return: The ftp_banner of this DeviceFeatures.
        :rtype: str
        """
        return self._ftp_banner

    @ftp_banner.setter
    def ftp_banner(self, ftp_banner):
        """Sets the ftp_banner of this DeviceFeatures.


        :param ftp_banner: The ftp_banner of this DeviceFeatures.
        :type ftp_banner: str
        """

        self._ftp_banner = ftp_banner

    @property
    def hostname(self):
        """Gets the hostname of this DeviceFeatures.


        :return: The hostname of this DeviceFeatures.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this DeviceFeatures.


        :param hostname: The hostname of this DeviceFeatures.
        :type hostname: str
        """

        self._hostname = hostname

    @property
    def http_response(self):
        """Gets the http_response of this DeviceFeatures.


        :return: The http_response of this DeviceFeatures.
        :rtype: str
        """
        return self._http_response

    @http_response.setter
    def http_response(self, http_response):
        """Sets the http_response of this DeviceFeatures.


        :param http_response: The http_response of this DeviceFeatures.
        :type http_response: str
        """

        self._http_response = http_response

    @property
    def https_response(self):
        """Gets the https_response of this DeviceFeatures.


        :return: The https_response of this DeviceFeatures.
        :rtype: str
        """
        return self._https_response

    @https_response.setter
    def https_response(self, https_response):
        """Sets the https_response of this DeviceFeatures.


        :param https_response: The https_response of this DeviceFeatures.
        :type https_response: str
        """

        self._https_response = https_response

    @property
    def nic_mac(self):
        """Gets the nic_mac of this DeviceFeatures.


        :return: The nic_mac of this DeviceFeatures.
        :rtype: str
        """
        return self._nic_mac

    @nic_mac.setter
    def nic_mac(self, nic_mac):
        """Sets the nic_mac of this DeviceFeatures.


        :param nic_mac: The nic_mac of this DeviceFeatures.
        :type nic_mac: str
        """

        self._nic_mac = nic_mac

    @property
    def snmp_sysdescr(self):
        """Gets the snmp_sysdescr of this DeviceFeatures.


        :return: The snmp_sysdescr of this DeviceFeatures.
        :rtype: str
        """
        return self._snmp_sysdescr

    @snmp_sysdescr.setter
    def snmp_sysdescr(self, snmp_sysdescr):
        """Sets the snmp_sysdescr of this DeviceFeatures.


        :param snmp_sysdescr: The snmp_sysdescr of this DeviceFeatures.
        :type snmp_sysdescr: str
        """

        self._snmp_sysdescr = snmp_sysdescr

    @property
    def snmp_sysoid(self):
        """Gets the snmp_sysoid of this DeviceFeatures.


        :return: The snmp_sysoid of this DeviceFeatures.
        :rtype: str
        """
        return self._snmp_sysoid

    @snmp_sysoid.setter
    def snmp_sysoid(self, snmp_sysoid):
        """Sets the snmp_sysoid of this DeviceFeatures.


        :param snmp_sysoid: The snmp_sysoid of this DeviceFeatures.
        :type snmp_sysoid: str
        """

        self._snmp_sysoid = snmp_sysoid

    @property
    def telnet_banner(self):
        """Gets the telnet_banner of this DeviceFeatures.


        :return: The telnet_banner of this DeviceFeatures.
        :rtype: str
        """
        return self._telnet_banner

    @telnet_banner.setter
    def telnet_banner(self, telnet_banner):
        """Sets the telnet_banner of this DeviceFeatures.


        :param telnet_banner: The telnet_banner of this DeviceFeatures.
        :type telnet_banner: str
        """

        self._telnet_banner = telnet_banner

    @property
    def upnp_response(self):
        """Gets the upnp_response of this DeviceFeatures.


        :return: The upnp_response of this DeviceFeatures.
        :rtype: str
        """
        return self._upnp_response

    @upnp_response.setter
    def upnp_response(self, upnp_response):
        """Sets the upnp_response of this DeviceFeatures.


        :param upnp_response: The upnp_response of this DeviceFeatures.
        :type upnp_response: str
        """

        self._upnp_response = upnp_response
