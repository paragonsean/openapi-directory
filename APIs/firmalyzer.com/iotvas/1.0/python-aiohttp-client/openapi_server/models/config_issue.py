# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConfigIssue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, config_file: str=None, issues: List[str]=None, service_name: str=None, suggestions: List[str]=None):
        """ConfigIssue - a model defined in OpenAPI

        :param config_file: The config_file of this ConfigIssue.
        :param issues: The issues of this ConfigIssue.
        :param service_name: The service_name of this ConfigIssue.
        :param suggestions: The suggestions of this ConfigIssue.
        """
        self.openapi_types = {
            'config_file': str,
            'issues': List[str],
            'service_name': str,
            'suggestions': List[str]
        }

        self.attribute_map = {
            'config_file': 'config_file',
            'issues': 'issues',
            'service_name': 'service_name',
            'suggestions': 'suggestions'
        }

        self._config_file = config_file
        self._issues = issues
        self._service_name = service_name
        self._suggestions = suggestions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfigIssue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConfigIssue of this ConfigIssue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def config_file(self):
        """Gets the config_file of this ConfigIssue.


        :return: The config_file of this ConfigIssue.
        :rtype: str
        """
        return self._config_file

    @config_file.setter
    def config_file(self, config_file):
        """Sets the config_file of this ConfigIssue.


        :param config_file: The config_file of this ConfigIssue.
        :type config_file: str
        """

        self._config_file = config_file

    @property
    def issues(self):
        """Gets the issues of this ConfigIssue.


        :return: The issues of this ConfigIssue.
        :rtype: List[str]
        """
        return self._issues

    @issues.setter
    def issues(self, issues):
        """Sets the issues of this ConfigIssue.


        :param issues: The issues of this ConfigIssue.
        :type issues: List[str]
        """

        self._issues = issues

    @property
    def service_name(self):
        """Gets the service_name of this ConfigIssue.


        :return: The service_name of this ConfigIssue.
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this ConfigIssue.


        :param service_name: The service_name of this ConfigIssue.
        :type service_name: str
        """

        self._service_name = service_name

    @property
    def suggestions(self):
        """Gets the suggestions of this ConfigIssue.


        :return: The suggestions of this ConfigIssue.
        :rtype: List[str]
        """
        return self._suggestions

    @suggestions.setter
    def suggestions(self, suggestions):
        """Sets the suggestions of this ConfigIssue.


        :param suggestions: The suggestions of this ConfigIssue.
        :type suggestions: List[str]
        """

        self._suggestions = suggestions
