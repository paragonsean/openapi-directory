# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CryptoKey(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, algorithm: str=None, bits: int=None, file_hash: str=None, file_name: str=None, pem_type: str=None):
        """CryptoKey - a model defined in OpenAPI

        :param algorithm: The algorithm of this CryptoKey.
        :param bits: The bits of this CryptoKey.
        :param file_hash: The file_hash of this CryptoKey.
        :param file_name: The file_name of this CryptoKey.
        :param pem_type: The pem_type of this CryptoKey.
        """
        self.openapi_types = {
            'algorithm': str,
            'bits': int,
            'file_hash': str,
            'file_name': str,
            'pem_type': str
        }

        self.attribute_map = {
            'algorithm': 'algorithm',
            'bits': 'bits',
            'file_hash': 'file_hash',
            'file_name': 'file_name',
            'pem_type': 'pem_type'
        }

        self._algorithm = algorithm
        self._bits = bits
        self._file_hash = file_hash
        self._file_name = file_name
        self._pem_type = pem_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CryptoKey':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CryptoKey of this CryptoKey.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def algorithm(self):
        """Gets the algorithm of this CryptoKey.


        :return: The algorithm of this CryptoKey.
        :rtype: str
        """
        return self._algorithm

    @algorithm.setter
    def algorithm(self, algorithm):
        """Sets the algorithm of this CryptoKey.


        :param algorithm: The algorithm of this CryptoKey.
        :type algorithm: str
        """

        self._algorithm = algorithm

    @property
    def bits(self):
        """Gets the bits of this CryptoKey.


        :return: The bits of this CryptoKey.
        :rtype: int
        """
        return self._bits

    @bits.setter
    def bits(self, bits):
        """Sets the bits of this CryptoKey.


        :param bits: The bits of this CryptoKey.
        :type bits: int
        """

        self._bits = bits

    @property
    def file_hash(self):
        """Gets the file_hash of this CryptoKey.


        :return: The file_hash of this CryptoKey.
        :rtype: str
        """
        return self._file_hash

    @file_hash.setter
    def file_hash(self, file_hash):
        """Sets the file_hash of this CryptoKey.


        :param file_hash: The file_hash of this CryptoKey.
        :type file_hash: str
        """

        self._file_hash = file_hash

    @property
    def file_name(self):
        """Gets the file_name of this CryptoKey.


        :return: The file_name of this CryptoKey.
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this CryptoKey.


        :param file_name: The file_name of this CryptoKey.
        :type file_name: str
        """

        self._file_name = file_name

    @property
    def pem_type(self):
        """Gets the pem_type of this CryptoKey.


        :return: The pem_type of this CryptoKey.
        :rtype: str
        """
        return self._pem_type

    @pem_type.setter
    def pem_type(self, pem_type):
        """Sets the pem_type of this CryptoKey.


        :param pem_type: The pem_type of this CryptoKey.
        :type pem_type: str
        """

        self._pem_type = pem_type
