# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.firmware_info import FirmwareInfo
from openapi_server.models.vulnerability import Vulnerability
from openapi_server import util


class DeviceInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cve_list: List[Vulnerability]=None, device_type: str=None, firmware_info: FirmwareInfo=None, firmware_version: str=None, is_discontinued: bool=None, latest_firmware_info: FirmwareInfo=None, manufacturer: str=None, model_name: str=None):
        """DeviceInfo - a model defined in OpenAPI

        :param cve_list: The cve_list of this DeviceInfo.
        :param device_type: The device_type of this DeviceInfo.
        :param firmware_info: The firmware_info of this DeviceInfo.
        :param firmware_version: The firmware_version of this DeviceInfo.
        :param is_discontinued: The is_discontinued of this DeviceInfo.
        :param latest_firmware_info: The latest_firmware_info of this DeviceInfo.
        :param manufacturer: The manufacturer of this DeviceInfo.
        :param model_name: The model_name of this DeviceInfo.
        """
        self.openapi_types = {
            'cve_list': List[Vulnerability],
            'device_type': str,
            'firmware_info': FirmwareInfo,
            'firmware_version': str,
            'is_discontinued': bool,
            'latest_firmware_info': FirmwareInfo,
            'manufacturer': str,
            'model_name': str
        }

        self.attribute_map = {
            'cve_list': 'cve_list',
            'device_type': 'device_type',
            'firmware_info': 'firmware_info',
            'firmware_version': 'firmware_version',
            'is_discontinued': 'is_discontinued',
            'latest_firmware_info': 'latest_firmware_info',
            'manufacturer': 'manufacturer',
            'model_name': 'model_name'
        }

        self._cve_list = cve_list
        self._device_type = device_type
        self._firmware_info = firmware_info
        self._firmware_version = firmware_version
        self._is_discontinued = is_discontinued
        self._latest_firmware_info = latest_firmware_info
        self._manufacturer = manufacturer
        self._model_name = model_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeviceInfo of this DeviceInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cve_list(self):
        """Gets the cve_list of this DeviceInfo.


        :return: The cve_list of this DeviceInfo.
        :rtype: List[Vulnerability]
        """
        return self._cve_list

    @cve_list.setter
    def cve_list(self, cve_list):
        """Sets the cve_list of this DeviceInfo.


        :param cve_list: The cve_list of this DeviceInfo.
        :type cve_list: List[Vulnerability]
        """

        self._cve_list = cve_list

    @property
    def device_type(self):
        """Gets the device_type of this DeviceInfo.


        :return: The device_type of this DeviceInfo.
        :rtype: str
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this DeviceInfo.


        :param device_type: The device_type of this DeviceInfo.
        :type device_type: str
        """

        self._device_type = device_type

    @property
    def firmware_info(self):
        """Gets the firmware_info of this DeviceInfo.


        :return: The firmware_info of this DeviceInfo.
        :rtype: FirmwareInfo
        """
        return self._firmware_info

    @firmware_info.setter
    def firmware_info(self, firmware_info):
        """Sets the firmware_info of this DeviceInfo.


        :param firmware_info: The firmware_info of this DeviceInfo.
        :type firmware_info: FirmwareInfo
        """

        self._firmware_info = firmware_info

    @property
    def firmware_version(self):
        """Gets the firmware_version of this DeviceInfo.


        :return: The firmware_version of this DeviceInfo.
        :rtype: str
        """
        return self._firmware_version

    @firmware_version.setter
    def firmware_version(self, firmware_version):
        """Sets the firmware_version of this DeviceInfo.


        :param firmware_version: The firmware_version of this DeviceInfo.
        :type firmware_version: str
        """

        self._firmware_version = firmware_version

    @property
    def is_discontinued(self):
        """Gets the is_discontinued of this DeviceInfo.


        :return: The is_discontinued of this DeviceInfo.
        :rtype: bool
        """
        return self._is_discontinued

    @is_discontinued.setter
    def is_discontinued(self, is_discontinued):
        """Sets the is_discontinued of this DeviceInfo.


        :param is_discontinued: The is_discontinued of this DeviceInfo.
        :type is_discontinued: bool
        """

        self._is_discontinued = is_discontinued

    @property
    def latest_firmware_info(self):
        """Gets the latest_firmware_info of this DeviceInfo.


        :return: The latest_firmware_info of this DeviceInfo.
        :rtype: FirmwareInfo
        """
        return self._latest_firmware_info

    @latest_firmware_info.setter
    def latest_firmware_info(self, latest_firmware_info):
        """Sets the latest_firmware_info of this DeviceInfo.


        :param latest_firmware_info: The latest_firmware_info of this DeviceInfo.
        :type latest_firmware_info: FirmwareInfo
        """

        self._latest_firmware_info = latest_firmware_info

    @property
    def manufacturer(self):
        """Gets the manufacturer of this DeviceInfo.


        :return: The manufacturer of this DeviceInfo.
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this DeviceInfo.


        :param manufacturer: The manufacturer of this DeviceInfo.
        :type manufacturer: str
        """

        self._manufacturer = manufacturer

    @property
    def model_name(self):
        """Gets the model_name of this DeviceInfo.


        :return: The model_name of this DeviceInfo.
        :rtype: str
        """
        return self._model_name

    @model_name.setter
    def model_name(self, model_name):
        """Sets the model_name of this DeviceInfo.


        :param model_name: The model_name of this DeviceInfo.
        :type model_name: str
        """

        self._model_name = model_name
