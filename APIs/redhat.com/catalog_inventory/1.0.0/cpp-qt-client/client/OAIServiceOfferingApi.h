/**
 * Catalog Inventory
 * Catalog Inventory
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@redhat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIServiceOfferingApi_H
#define OAI_OAIServiceOfferingApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAppliedInventoriesParametersServicePlan.h"
#include "OAIErrorNotFound.h"
#include "OAIOrderParametersServiceOffering.h"
#include "OAIOrderServiceOffering_200_response.h"
#include "OAIServiceInstancesCollection.h"
#include "OAIServiceOffering.h"
#include "OAIServiceOfferingNodesCollection.h"
#include "OAIServiceOfferingsCollection.h"
#include "OAIServicePlansCollection.h"
#include "OAITag.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIServiceOfferingApi : public QObject {
    Q_OBJECT

public:
    OAIServiceOfferingApi(const int timeOut = 0);
    ~OAIServiceOfferingApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_applied_inventories_parameters_service_plan OAIAppliedInventoriesParametersServicePlan [required]
    */
    virtual void appliedInventoriesTagsForServiceOffering(const QString &id, const OAIAppliedInventoriesParametersServicePlan &oai_applied_inventories_parameters_service_plan);

    /**
    * @param[in]  id QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  filter OAIObject [optional]
    * @param[in]  sort_by OAIObject [optional]
    */
    virtual void listServiceOfferingServiceInstances(const QString &id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIObject> &filter = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<OAIObject> &sort_by = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  filter OAIObject [optional]
    * @param[in]  sort_by OAIObject [optional]
    */
    virtual void listServiceOfferingServiceOfferingNodes(const QString &id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIObject> &filter = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<OAIObject> &sort_by = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  filter OAIObject [optional]
    * @param[in]  sort_by OAIObject [optional]
    */
    virtual void listServiceOfferingServicePlans(const QString &id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIObject> &filter = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<OAIObject> &sort_by = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  filter OAIObject [optional]
    * @param[in]  sort_by OAIObject [optional]
    */
    virtual void listServiceOfferings(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIObject> &filter = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<OAIObject> &sort_by = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_order_parameters_service_offering OAIOrderParametersServiceOffering [required]
    */
    virtual void orderServiceOffering(const QString &id, const OAIOrderParametersServiceOffering &oai_order_parameters_service_offering);

    /**
    * @param[in]  id QString [required]
    */
    virtual void showServiceOffering(const QString &id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void appliedInventoriesTagsForServiceOfferingCallback(OAIHttpRequestWorker *worker);
    void listServiceOfferingServiceInstancesCallback(OAIHttpRequestWorker *worker);
    void listServiceOfferingServiceOfferingNodesCallback(OAIHttpRequestWorker *worker);
    void listServiceOfferingServicePlansCallback(OAIHttpRequestWorker *worker);
    void listServiceOfferingsCallback(OAIHttpRequestWorker *worker);
    void orderServiceOfferingCallback(OAIHttpRequestWorker *worker);
    void showServiceOfferingCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void appliedInventoriesTagsForServiceOfferingSignal(QList<OAITag> summary);
    void listServiceOfferingServiceInstancesSignal(OAIServiceInstancesCollection summary);
    void listServiceOfferingServiceOfferingNodesSignal(OAIServiceOfferingNodesCollection summary);
    void listServiceOfferingServicePlansSignal(OAIServicePlansCollection summary);
    void listServiceOfferingsSignal(OAIServiceOfferingsCollection summary);
    void orderServiceOfferingSignal(OAIOrderServiceOffering_200_response summary);
    void showServiceOfferingSignal(OAIServiceOffering summary);


    void appliedInventoriesTagsForServiceOfferingSignalFull(OAIHttpRequestWorker *worker, QList<OAITag> summary);
    void listServiceOfferingServiceInstancesSignalFull(OAIHttpRequestWorker *worker, OAIServiceInstancesCollection summary);
    void listServiceOfferingServiceOfferingNodesSignalFull(OAIHttpRequestWorker *worker, OAIServiceOfferingNodesCollection summary);
    void listServiceOfferingServicePlansSignalFull(OAIHttpRequestWorker *worker, OAIServicePlansCollection summary);
    void listServiceOfferingsSignalFull(OAIHttpRequestWorker *worker, OAIServiceOfferingsCollection summary);
    void orderServiceOfferingSignalFull(OAIHttpRequestWorker *worker, OAIOrderServiceOffering_200_response summary);
    void showServiceOfferingSignalFull(OAIHttpRequestWorker *worker, OAIServiceOffering summary);

    Q_DECL_DEPRECATED_X("Use appliedInventoriesTagsForServiceOfferingSignalError() instead")
    void appliedInventoriesTagsForServiceOfferingSignalE(QList<OAITag> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appliedInventoriesTagsForServiceOfferingSignalError(QList<OAITag> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listServiceOfferingServiceInstancesSignalError() instead")
    void listServiceOfferingServiceInstancesSignalE(OAIServiceInstancesCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listServiceOfferingServiceInstancesSignalError(OAIServiceInstancesCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listServiceOfferingServiceOfferingNodesSignalError() instead")
    void listServiceOfferingServiceOfferingNodesSignalE(OAIServiceOfferingNodesCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listServiceOfferingServiceOfferingNodesSignalError(OAIServiceOfferingNodesCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listServiceOfferingServicePlansSignalError() instead")
    void listServiceOfferingServicePlansSignalE(OAIServicePlansCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listServiceOfferingServicePlansSignalError(OAIServicePlansCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listServiceOfferingsSignalError() instead")
    void listServiceOfferingsSignalE(OAIServiceOfferingsCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listServiceOfferingsSignalError(OAIServiceOfferingsCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderServiceOfferingSignalError() instead")
    void orderServiceOfferingSignalE(OAIOrderServiceOffering_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orderServiceOfferingSignalError(OAIOrderServiceOffering_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use showServiceOfferingSignalError() instead")
    void showServiceOfferingSignalE(OAIServiceOffering summary, QNetworkReply::NetworkError error_type, QString error_str);
    void showServiceOfferingSignalError(OAIServiceOffering summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use appliedInventoriesTagsForServiceOfferingSignalErrorFull() instead")
    void appliedInventoriesTagsForServiceOfferingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appliedInventoriesTagsForServiceOfferingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listServiceOfferingServiceInstancesSignalErrorFull() instead")
    void listServiceOfferingServiceInstancesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listServiceOfferingServiceInstancesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listServiceOfferingServiceOfferingNodesSignalErrorFull() instead")
    void listServiceOfferingServiceOfferingNodesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listServiceOfferingServiceOfferingNodesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listServiceOfferingServicePlansSignalErrorFull() instead")
    void listServiceOfferingServicePlansSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listServiceOfferingServicePlansSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listServiceOfferingsSignalErrorFull() instead")
    void listServiceOfferingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listServiceOfferingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderServiceOfferingSignalErrorFull() instead")
    void orderServiceOfferingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orderServiceOfferingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use showServiceOfferingSignalErrorFull() instead")
    void showServiceOfferingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void showServiceOfferingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
