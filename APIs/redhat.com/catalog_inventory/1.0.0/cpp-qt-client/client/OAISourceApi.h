/**
 * Catalog Inventory
 * Catalog Inventory
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@redhat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISourceApi_H
#define OAI_OAISourceApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorNotFound.h"
#include "OAIServiceInstancesCollection.h"
#include "OAIServiceInventoriesCollection.h"
#include "OAIServiceOfferingNodesCollection.h"
#include "OAIServiceOfferingsCollection.h"
#include "OAIServicePlansCollection.h"
#include "OAISource.h"
#include "OAISourcesCollection.h"
#include "OAITasksCollection.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISourceApi : public QObject {
    Q_OBJECT

public:
    OAISourceApi(const int timeOut = 0);
    ~OAISourceApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    */
    virtual void incrementalRefreshSource(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  filter OAIObject [optional]
    * @param[in]  sort_by OAIObject [optional]
    */
    virtual void listSourceServiceInstances(const QString &id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIObject> &filter = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<OAIObject> &sort_by = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  filter OAIObject [optional]
    * @param[in]  sort_by OAIObject [optional]
    */
    virtual void listSourceServiceInventories(const QString &id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIObject> &filter = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<OAIObject> &sort_by = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  filter OAIObject [optional]
    * @param[in]  sort_by OAIObject [optional]
    */
    virtual void listSourceServiceOfferingNodes(const QString &id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIObject> &filter = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<OAIObject> &sort_by = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  filter OAIObject [optional]
    * @param[in]  sort_by OAIObject [optional]
    */
    virtual void listSourceServiceOfferings(const QString &id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIObject> &filter = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<OAIObject> &sort_by = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  filter OAIObject [optional]
    * @param[in]  sort_by OAIObject [optional]
    */
    virtual void listSourceServicePlans(const QString &id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIObject> &filter = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<OAIObject> &sort_by = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  filter OAIObject [optional]
    * @param[in]  sort_by OAIObject [optional]
    */
    virtual void listSourceTasks(const QString &id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIObject> &filter = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<OAIObject> &sort_by = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  filter OAIObject [optional]
    * @param[in]  sort_by OAIObject [optional]
    */
    virtual void listSources(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIObject> &filter = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<OAIObject> &sort_by = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void refreshSource(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void showSource(const QString &id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void incrementalRefreshSourceCallback(OAIHttpRequestWorker *worker);
    void listSourceServiceInstancesCallback(OAIHttpRequestWorker *worker);
    void listSourceServiceInventoriesCallback(OAIHttpRequestWorker *worker);
    void listSourceServiceOfferingNodesCallback(OAIHttpRequestWorker *worker);
    void listSourceServiceOfferingsCallback(OAIHttpRequestWorker *worker);
    void listSourceServicePlansCallback(OAIHttpRequestWorker *worker);
    void listSourceTasksCallback(OAIHttpRequestWorker *worker);
    void listSourcesCallback(OAIHttpRequestWorker *worker);
    void refreshSourceCallback(OAIHttpRequestWorker *worker);
    void showSourceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void incrementalRefreshSourceSignal();
    void listSourceServiceInstancesSignal(OAIServiceInstancesCollection summary);
    void listSourceServiceInventoriesSignal(OAIServiceInventoriesCollection summary);
    void listSourceServiceOfferingNodesSignal(OAIServiceOfferingNodesCollection summary);
    void listSourceServiceOfferingsSignal(OAIServiceOfferingsCollection summary);
    void listSourceServicePlansSignal(OAIServicePlansCollection summary);
    void listSourceTasksSignal(OAITasksCollection summary);
    void listSourcesSignal(OAISourcesCollection summary);
    void refreshSourceSignal();
    void showSourceSignal(OAISource summary);


    void incrementalRefreshSourceSignalFull(OAIHttpRequestWorker *worker);
    void listSourceServiceInstancesSignalFull(OAIHttpRequestWorker *worker, OAIServiceInstancesCollection summary);
    void listSourceServiceInventoriesSignalFull(OAIHttpRequestWorker *worker, OAIServiceInventoriesCollection summary);
    void listSourceServiceOfferingNodesSignalFull(OAIHttpRequestWorker *worker, OAIServiceOfferingNodesCollection summary);
    void listSourceServiceOfferingsSignalFull(OAIHttpRequestWorker *worker, OAIServiceOfferingsCollection summary);
    void listSourceServicePlansSignalFull(OAIHttpRequestWorker *worker, OAIServicePlansCollection summary);
    void listSourceTasksSignalFull(OAIHttpRequestWorker *worker, OAITasksCollection summary);
    void listSourcesSignalFull(OAIHttpRequestWorker *worker, OAISourcesCollection summary);
    void refreshSourceSignalFull(OAIHttpRequestWorker *worker);
    void showSourceSignalFull(OAIHttpRequestWorker *worker, OAISource summary);

    Q_DECL_DEPRECATED_X("Use incrementalRefreshSourceSignalError() instead")
    void incrementalRefreshSourceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void incrementalRefreshSourceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSourceServiceInstancesSignalError() instead")
    void listSourceServiceInstancesSignalE(OAIServiceInstancesCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSourceServiceInstancesSignalError(OAIServiceInstancesCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSourceServiceInventoriesSignalError() instead")
    void listSourceServiceInventoriesSignalE(OAIServiceInventoriesCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSourceServiceInventoriesSignalError(OAIServiceInventoriesCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSourceServiceOfferingNodesSignalError() instead")
    void listSourceServiceOfferingNodesSignalE(OAIServiceOfferingNodesCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSourceServiceOfferingNodesSignalError(OAIServiceOfferingNodesCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSourceServiceOfferingsSignalError() instead")
    void listSourceServiceOfferingsSignalE(OAIServiceOfferingsCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSourceServiceOfferingsSignalError(OAIServiceOfferingsCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSourceServicePlansSignalError() instead")
    void listSourceServicePlansSignalE(OAIServicePlansCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSourceServicePlansSignalError(OAIServicePlansCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSourceTasksSignalError() instead")
    void listSourceTasksSignalE(OAITasksCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSourceTasksSignalError(OAITasksCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSourcesSignalError() instead")
    void listSourcesSignalE(OAISourcesCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSourcesSignalError(OAISourcesCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use refreshSourceSignalError() instead")
    void refreshSourceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void refreshSourceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use showSourceSignalError() instead")
    void showSourceSignalE(OAISource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void showSourceSignalError(OAISource summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use incrementalRefreshSourceSignalErrorFull() instead")
    void incrementalRefreshSourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void incrementalRefreshSourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSourceServiceInstancesSignalErrorFull() instead")
    void listSourceServiceInstancesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSourceServiceInstancesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSourceServiceInventoriesSignalErrorFull() instead")
    void listSourceServiceInventoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSourceServiceInventoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSourceServiceOfferingNodesSignalErrorFull() instead")
    void listSourceServiceOfferingNodesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSourceServiceOfferingNodesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSourceServiceOfferingsSignalErrorFull() instead")
    void listSourceServiceOfferingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSourceServiceOfferingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSourceServicePlansSignalErrorFull() instead")
    void listSourceServicePlansSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSourceServicePlansSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSourceTasksSignalErrorFull() instead")
    void listSourceTasksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSourceTasksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSourcesSignalErrorFull() instead")
    void listSourcesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSourcesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use refreshSourceSignalErrorFull() instead")
    void refreshSourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void refreshSourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use showSourceSignalErrorFull() instead")
    void showSourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void showSourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
