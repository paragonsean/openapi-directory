/**
 * Catalog Inventory
 * Catalog Inventory
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@redhat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICollectionLinks.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICollectionLinks::OAICollectionLinks(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICollectionLinks::OAICollectionLinks() {
    this->initializeModel();
}

OAICollectionLinks::~OAICollectionLinks() {}

void OAICollectionLinks::initializeModel() {

    m_first_isSet = false;
    m_first_isValid = false;

    m_last_isSet = false;
    m_last_isValid = false;

    m_next_isSet = false;
    m_next_isValid = false;

    m_prev_isSet = false;
    m_prev_isValid = false;
}

void OAICollectionLinks::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICollectionLinks::fromJsonObject(QJsonObject json) {

    m_first_isValid = ::OpenAPI::fromJsonValue(m_first, json[QString("first")]);
    m_first_isSet = !json[QString("first")].isNull() && m_first_isValid;

    m_last_isValid = ::OpenAPI::fromJsonValue(m_last, json[QString("last")]);
    m_last_isSet = !json[QString("last")].isNull() && m_last_isValid;

    m_next_isValid = ::OpenAPI::fromJsonValue(m_next, json[QString("next")]);
    m_next_isSet = !json[QString("next")].isNull() && m_next_isValid;

    m_prev_isValid = ::OpenAPI::fromJsonValue(m_prev, json[QString("prev")]);
    m_prev_isSet = !json[QString("prev")].isNull() && m_prev_isValid;
}

QString OAICollectionLinks::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICollectionLinks::asJsonObject() const {
    QJsonObject obj;
    if (m_first_isSet) {
        obj.insert(QString("first"), ::OpenAPI::toJsonValue(m_first));
    }
    if (m_last_isSet) {
        obj.insert(QString("last"), ::OpenAPI::toJsonValue(m_last));
    }
    if (m_next_isSet) {
        obj.insert(QString("next"), ::OpenAPI::toJsonValue(m_next));
    }
    if (m_prev_isSet) {
        obj.insert(QString("prev"), ::OpenAPI::toJsonValue(m_prev));
    }
    return obj;
}

QString OAICollectionLinks::getFirst() const {
    return m_first;
}
void OAICollectionLinks::setFirst(const QString &first) {
    m_first = first;
    m_first_isSet = true;
}

bool OAICollectionLinks::is_first_Set() const{
    return m_first_isSet;
}

bool OAICollectionLinks::is_first_Valid() const{
    return m_first_isValid;
}

QString OAICollectionLinks::getLast() const {
    return m_last;
}
void OAICollectionLinks::setLast(const QString &last) {
    m_last = last;
    m_last_isSet = true;
}

bool OAICollectionLinks::is_last_Set() const{
    return m_last_isSet;
}

bool OAICollectionLinks::is_last_Valid() const{
    return m_last_isValid;
}

QString OAICollectionLinks::getNext() const {
    return m_next;
}
void OAICollectionLinks::setNext(const QString &next) {
    m_next = next;
    m_next_isSet = true;
}

bool OAICollectionLinks::is_next_Set() const{
    return m_next_isSet;
}

bool OAICollectionLinks::is_next_Valid() const{
    return m_next_isValid;
}

QString OAICollectionLinks::getPrev() const {
    return m_prev;
}
void OAICollectionLinks::setPrev(const QString &prev) {
    m_prev = prev;
    m_prev_isSet = true;
}

bool OAICollectionLinks::is_prev_Set() const{
    return m_prev_isSet;
}

bool OAICollectionLinks::is_prev_Valid() const{
    return m_prev_isValid;
}

bool OAICollectionLinks::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_first_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prev_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICollectionLinks::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
