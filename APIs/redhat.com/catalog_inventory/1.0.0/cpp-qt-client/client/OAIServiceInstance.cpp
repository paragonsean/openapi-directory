/**
 * Catalog Inventory
 * Catalog Inventory
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@redhat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceInstance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceInstance::OAIServiceInstance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceInstance::OAIServiceInstance() {
    this->initializeModel();
}

OAIServiceInstance::~OAIServiceInstance() {}

void OAIServiceInstance::initializeModel() {

    m_archived_at_isSet = false;
    m_archived_at_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_external_url_isSet = false;
    m_external_url_isValid = false;

    m_extra_isSet = false;
    m_extra_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_seen_at_isSet = false;
    m_last_seen_at_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_refresh_state_part_id_isSet = false;
    m_refresh_state_part_id_isValid = false;

    m_root_service_instance_id_isSet = false;
    m_root_service_instance_id_isValid = false;

    m_service_inventory_id_isSet = false;
    m_service_inventory_id_isValid = false;

    m_service_offering_id_isSet = false;
    m_service_offering_id_isValid = false;

    m_service_plan_id_isSet = false;
    m_service_plan_id_isValid = false;

    m_source_created_at_isSet = false;
    m_source_created_at_isValid = false;

    m_source_deleted_at_isSet = false;
    m_source_deleted_at_isValid = false;

    m_source_id_isSet = false;
    m_source_id_isValid = false;

    m_source_ref_isSet = false;
    m_source_ref_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIServiceInstance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceInstance::fromJsonObject(QJsonObject json) {

    m_archived_at_isValid = ::OpenAPI::fromJsonValue(m_archived_at, json[QString("archived_at")]);
    m_archived_at_isSet = !json[QString("archived_at")].isNull() && m_archived_at_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_external_url_isValid = ::OpenAPI::fromJsonValue(m_external_url, json[QString("external_url")]);
    m_external_url_isSet = !json[QString("external_url")].isNull() && m_external_url_isValid;

    m_extra_isValid = ::OpenAPI::fromJsonValue(m_extra, json[QString("extra")]);
    m_extra_isSet = !json[QString("extra")].isNull() && m_extra_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_seen_at_isValid = ::OpenAPI::fromJsonValue(m_last_seen_at, json[QString("last_seen_at")]);
    m_last_seen_at_isSet = !json[QString("last_seen_at")].isNull() && m_last_seen_at_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_refresh_state_part_id_isValid = ::OpenAPI::fromJsonValue(m_refresh_state_part_id, json[QString("refresh_state_part_id")]);
    m_refresh_state_part_id_isSet = !json[QString("refresh_state_part_id")].isNull() && m_refresh_state_part_id_isValid;

    m_root_service_instance_id_isValid = ::OpenAPI::fromJsonValue(m_root_service_instance_id, json[QString("root_service_instance_id")]);
    m_root_service_instance_id_isSet = !json[QString("root_service_instance_id")].isNull() && m_root_service_instance_id_isValid;

    m_service_inventory_id_isValid = ::OpenAPI::fromJsonValue(m_service_inventory_id, json[QString("service_inventory_id")]);
    m_service_inventory_id_isSet = !json[QString("service_inventory_id")].isNull() && m_service_inventory_id_isValid;

    m_service_offering_id_isValid = ::OpenAPI::fromJsonValue(m_service_offering_id, json[QString("service_offering_id")]);
    m_service_offering_id_isSet = !json[QString("service_offering_id")].isNull() && m_service_offering_id_isValid;

    m_service_plan_id_isValid = ::OpenAPI::fromJsonValue(m_service_plan_id, json[QString("service_plan_id")]);
    m_service_plan_id_isSet = !json[QString("service_plan_id")].isNull() && m_service_plan_id_isValid;

    m_source_created_at_isValid = ::OpenAPI::fromJsonValue(m_source_created_at, json[QString("source_created_at")]);
    m_source_created_at_isSet = !json[QString("source_created_at")].isNull() && m_source_created_at_isValid;

    m_source_deleted_at_isValid = ::OpenAPI::fromJsonValue(m_source_deleted_at, json[QString("source_deleted_at")]);
    m_source_deleted_at_isSet = !json[QString("source_deleted_at")].isNull() && m_source_deleted_at_isValid;

    m_source_id_isValid = ::OpenAPI::fromJsonValue(m_source_id, json[QString("source_id")]);
    m_source_id_isSet = !json[QString("source_id")].isNull() && m_source_id_isValid;

    m_source_ref_isValid = ::OpenAPI::fromJsonValue(m_source_ref, json[QString("source_ref")]);
    m_source_ref_isSet = !json[QString("source_ref")].isNull() && m_source_ref_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAIServiceInstance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceInstance::asJsonObject() const {
    QJsonObject obj;
    if (m_archived_at_isSet) {
        obj.insert(QString("archived_at"), ::OpenAPI::toJsonValue(m_archived_at));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_external_url_isSet) {
        obj.insert(QString("external_url"), ::OpenAPI::toJsonValue(m_external_url));
    }
    if (m_extra_isSet) {
        obj.insert(QString("extra"), ::OpenAPI::toJsonValue(m_extra));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_seen_at_isSet) {
        obj.insert(QString("last_seen_at"), ::OpenAPI::toJsonValue(m_last_seen_at));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_refresh_state_part_id_isSet) {
        obj.insert(QString("refresh_state_part_id"), ::OpenAPI::toJsonValue(m_refresh_state_part_id));
    }
    if (m_root_service_instance_id_isSet) {
        obj.insert(QString("root_service_instance_id"), ::OpenAPI::toJsonValue(m_root_service_instance_id));
    }
    if (m_service_inventory_id_isSet) {
        obj.insert(QString("service_inventory_id"), ::OpenAPI::toJsonValue(m_service_inventory_id));
    }
    if (m_service_offering_id_isSet) {
        obj.insert(QString("service_offering_id"), ::OpenAPI::toJsonValue(m_service_offering_id));
    }
    if (m_service_plan_id_isSet) {
        obj.insert(QString("service_plan_id"), ::OpenAPI::toJsonValue(m_service_plan_id));
    }
    if (m_source_created_at_isSet) {
        obj.insert(QString("source_created_at"), ::OpenAPI::toJsonValue(m_source_created_at));
    }
    if (m_source_deleted_at_isSet) {
        obj.insert(QString("source_deleted_at"), ::OpenAPI::toJsonValue(m_source_deleted_at));
    }
    if (m_source_id_isSet) {
        obj.insert(QString("source_id"), ::OpenAPI::toJsonValue(m_source_id));
    }
    if (m_source_ref_isSet) {
        obj.insert(QString("source_ref"), ::OpenAPI::toJsonValue(m_source_ref));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QDateTime OAIServiceInstance::getArchivedAt() const {
    return m_archived_at;
}
void OAIServiceInstance::setArchivedAt(const QDateTime &archived_at) {
    m_archived_at = archived_at;
    m_archived_at_isSet = true;
}

bool OAIServiceInstance::is_archived_at_Set() const{
    return m_archived_at_isSet;
}

bool OAIServiceInstance::is_archived_at_Valid() const{
    return m_archived_at_isValid;
}

QDateTime OAIServiceInstance::getCreatedAt() const {
    return m_created_at;
}
void OAIServiceInstance::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIServiceInstance::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIServiceInstance::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIServiceInstance::getExternalUrl() const {
    return m_external_url;
}
void OAIServiceInstance::setExternalUrl(const QString &external_url) {
    m_external_url = external_url;
    m_external_url_isSet = true;
}

bool OAIServiceInstance::is_external_url_Set() const{
    return m_external_url_isSet;
}

bool OAIServiceInstance::is_external_url_Valid() const{
    return m_external_url_isValid;
}

OAIObject OAIServiceInstance::getExtra() const {
    return m_extra;
}
void OAIServiceInstance::setExtra(const OAIObject &extra) {
    m_extra = extra;
    m_extra_isSet = true;
}

bool OAIServiceInstance::is_extra_Set() const{
    return m_extra_isSet;
}

bool OAIServiceInstance::is_extra_Valid() const{
    return m_extra_isValid;
}

QString OAIServiceInstance::getId() const {
    return m_id;
}
void OAIServiceInstance::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIServiceInstance::is_id_Set() const{
    return m_id_isSet;
}

bool OAIServiceInstance::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIServiceInstance::getLastSeenAt() const {
    return m_last_seen_at;
}
void OAIServiceInstance::setLastSeenAt(const QDateTime &last_seen_at) {
    m_last_seen_at = last_seen_at;
    m_last_seen_at_isSet = true;
}

bool OAIServiceInstance::is_last_seen_at_Set() const{
    return m_last_seen_at_isSet;
}

bool OAIServiceInstance::is_last_seen_at_Valid() const{
    return m_last_seen_at_isValid;
}

QString OAIServiceInstance::getName() const {
    return m_name;
}
void OAIServiceInstance::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIServiceInstance::is_name_Set() const{
    return m_name_isSet;
}

bool OAIServiceInstance::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIServiceInstance::getRefreshStatePartId() const {
    return m_refresh_state_part_id;
}
void OAIServiceInstance::setRefreshStatePartId(const QString &refresh_state_part_id) {
    m_refresh_state_part_id = refresh_state_part_id;
    m_refresh_state_part_id_isSet = true;
}

bool OAIServiceInstance::is_refresh_state_part_id_Set() const{
    return m_refresh_state_part_id_isSet;
}

bool OAIServiceInstance::is_refresh_state_part_id_Valid() const{
    return m_refresh_state_part_id_isValid;
}

QString OAIServiceInstance::getRootServiceInstanceId() const {
    return m_root_service_instance_id;
}
void OAIServiceInstance::setRootServiceInstanceId(const QString &root_service_instance_id) {
    m_root_service_instance_id = root_service_instance_id;
    m_root_service_instance_id_isSet = true;
}

bool OAIServiceInstance::is_root_service_instance_id_Set() const{
    return m_root_service_instance_id_isSet;
}

bool OAIServiceInstance::is_root_service_instance_id_Valid() const{
    return m_root_service_instance_id_isValid;
}

QString OAIServiceInstance::getServiceInventoryId() const {
    return m_service_inventory_id;
}
void OAIServiceInstance::setServiceInventoryId(const QString &service_inventory_id) {
    m_service_inventory_id = service_inventory_id;
    m_service_inventory_id_isSet = true;
}

bool OAIServiceInstance::is_service_inventory_id_Set() const{
    return m_service_inventory_id_isSet;
}

bool OAIServiceInstance::is_service_inventory_id_Valid() const{
    return m_service_inventory_id_isValid;
}

QString OAIServiceInstance::getServiceOfferingId() const {
    return m_service_offering_id;
}
void OAIServiceInstance::setServiceOfferingId(const QString &service_offering_id) {
    m_service_offering_id = service_offering_id;
    m_service_offering_id_isSet = true;
}

bool OAIServiceInstance::is_service_offering_id_Set() const{
    return m_service_offering_id_isSet;
}

bool OAIServiceInstance::is_service_offering_id_Valid() const{
    return m_service_offering_id_isValid;
}

QString OAIServiceInstance::getServicePlanId() const {
    return m_service_plan_id;
}
void OAIServiceInstance::setServicePlanId(const QString &service_plan_id) {
    m_service_plan_id = service_plan_id;
    m_service_plan_id_isSet = true;
}

bool OAIServiceInstance::is_service_plan_id_Set() const{
    return m_service_plan_id_isSet;
}

bool OAIServiceInstance::is_service_plan_id_Valid() const{
    return m_service_plan_id_isValid;
}

QDateTime OAIServiceInstance::getSourceCreatedAt() const {
    return m_source_created_at;
}
void OAIServiceInstance::setSourceCreatedAt(const QDateTime &source_created_at) {
    m_source_created_at = source_created_at;
    m_source_created_at_isSet = true;
}

bool OAIServiceInstance::is_source_created_at_Set() const{
    return m_source_created_at_isSet;
}

bool OAIServiceInstance::is_source_created_at_Valid() const{
    return m_source_created_at_isValid;
}

QDateTime OAIServiceInstance::getSourceDeletedAt() const {
    return m_source_deleted_at;
}
void OAIServiceInstance::setSourceDeletedAt(const QDateTime &source_deleted_at) {
    m_source_deleted_at = source_deleted_at;
    m_source_deleted_at_isSet = true;
}

bool OAIServiceInstance::is_source_deleted_at_Set() const{
    return m_source_deleted_at_isSet;
}

bool OAIServiceInstance::is_source_deleted_at_Valid() const{
    return m_source_deleted_at_isValid;
}

QString OAIServiceInstance::getSourceId() const {
    return m_source_id;
}
void OAIServiceInstance::setSourceId(const QString &source_id) {
    m_source_id = source_id;
    m_source_id_isSet = true;
}

bool OAIServiceInstance::is_source_id_Set() const{
    return m_source_id_isSet;
}

bool OAIServiceInstance::is_source_id_Valid() const{
    return m_source_id_isValid;
}

QString OAIServiceInstance::getSourceRef() const {
    return m_source_ref;
}
void OAIServiceInstance::setSourceRef(const QString &source_ref) {
    m_source_ref = source_ref;
    m_source_ref_isSet = true;
}

bool OAIServiceInstance::is_source_ref_Set() const{
    return m_source_ref_isSet;
}

bool OAIServiceInstance::is_source_ref_Valid() const{
    return m_source_ref_isValid;
}

QDateTime OAIServiceInstance::getUpdatedAt() const {
    return m_updated_at;
}
void OAIServiceInstance::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIServiceInstance::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIServiceInstance::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIServiceInstance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_archived_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extra_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_seen_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_state_part_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_service_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_inventory_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_offering_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_plan_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_deleted_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceInstance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
