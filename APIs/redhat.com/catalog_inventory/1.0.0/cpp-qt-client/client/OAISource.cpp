/**
 * Catalog Inventory
 * Catalog Inventory
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@redhat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISource::OAISource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISource::OAISource() {
    this->initializeModel();
}

OAISource::~OAISource() {}

void OAISource::initializeModel() {

    m_archived_at_isSet = false;
    m_archived_at_isValid = false;

    m_availability_message_isSet = false;
    m_availability_message_isValid = false;

    m_availability_status_isSet = false;
    m_availability_status_isValid = false;

    m_cloud_connector_id_isSet = false;
    m_cloud_connector_id_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_info_isSet = false;
    m_info_isValid = false;

    m_last_available_at_isSet = false;
    m_last_available_at_isValid = false;

    m_last_checked_at_isSet = false;
    m_last_checked_at_isValid = false;

    m_last_refresh_message_isSet = false;
    m_last_refresh_message_isValid = false;

    m_last_successful_refresh_at_isSet = false;
    m_last_successful_refresh_at_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_previous_sha_isSet = false;
    m_previous_sha_isValid = false;

    m_previous_size_isSet = false;
    m_previous_size_isValid = false;

    m_refresh_finished_at_isSet = false;
    m_refresh_finished_at_isValid = false;

    m_refresh_started_at_isSet = false;
    m_refresh_started_at_isValid = false;

    m_refresh_state_isSet = false;
    m_refresh_state_isValid = false;

    m_refresh_task_id_isSet = false;
    m_refresh_task_id_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAISource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISource::fromJsonObject(QJsonObject json) {

    m_archived_at_isValid = ::OpenAPI::fromJsonValue(m_archived_at, json[QString("archived_at")]);
    m_archived_at_isSet = !json[QString("archived_at")].isNull() && m_archived_at_isValid;

    m_availability_message_isValid = ::OpenAPI::fromJsonValue(m_availability_message, json[QString("availability_message")]);
    m_availability_message_isSet = !json[QString("availability_message")].isNull() && m_availability_message_isValid;

    m_availability_status_isValid = ::OpenAPI::fromJsonValue(m_availability_status, json[QString("availability_status")]);
    m_availability_status_isSet = !json[QString("availability_status")].isNull() && m_availability_status_isValid;

    m_cloud_connector_id_isValid = ::OpenAPI::fromJsonValue(m_cloud_connector_id, json[QString("cloud_connector_id")]);
    m_cloud_connector_id_isSet = !json[QString("cloud_connector_id")].isNull() && m_cloud_connector_id_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_info_isValid = ::OpenAPI::fromJsonValue(m_info, json[QString("info")]);
    m_info_isSet = !json[QString("info")].isNull() && m_info_isValid;

    m_last_available_at_isValid = ::OpenAPI::fromJsonValue(m_last_available_at, json[QString("last_available_at")]);
    m_last_available_at_isSet = !json[QString("last_available_at")].isNull() && m_last_available_at_isValid;

    m_last_checked_at_isValid = ::OpenAPI::fromJsonValue(m_last_checked_at, json[QString("last_checked_at")]);
    m_last_checked_at_isSet = !json[QString("last_checked_at")].isNull() && m_last_checked_at_isValid;

    m_last_refresh_message_isValid = ::OpenAPI::fromJsonValue(m_last_refresh_message, json[QString("last_refresh_message")]);
    m_last_refresh_message_isSet = !json[QString("last_refresh_message")].isNull() && m_last_refresh_message_isValid;

    m_last_successful_refresh_at_isValid = ::OpenAPI::fromJsonValue(m_last_successful_refresh_at, json[QString("last_successful_refresh_at")]);
    m_last_successful_refresh_at_isSet = !json[QString("last_successful_refresh_at")].isNull() && m_last_successful_refresh_at_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_previous_sha_isValid = ::OpenAPI::fromJsonValue(m_previous_sha, json[QString("previous_sha")]);
    m_previous_sha_isSet = !json[QString("previous_sha")].isNull() && m_previous_sha_isValid;

    m_previous_size_isValid = ::OpenAPI::fromJsonValue(m_previous_size, json[QString("previous_size")]);
    m_previous_size_isSet = !json[QString("previous_size")].isNull() && m_previous_size_isValid;

    m_refresh_finished_at_isValid = ::OpenAPI::fromJsonValue(m_refresh_finished_at, json[QString("refresh_finished_at")]);
    m_refresh_finished_at_isSet = !json[QString("refresh_finished_at")].isNull() && m_refresh_finished_at_isValid;

    m_refresh_started_at_isValid = ::OpenAPI::fromJsonValue(m_refresh_started_at, json[QString("refresh_started_at")]);
    m_refresh_started_at_isSet = !json[QString("refresh_started_at")].isNull() && m_refresh_started_at_isValid;

    m_refresh_state_isValid = ::OpenAPI::fromJsonValue(m_refresh_state, json[QString("refresh_state")]);
    m_refresh_state_isSet = !json[QString("refresh_state")].isNull() && m_refresh_state_isValid;

    m_refresh_task_id_isValid = ::OpenAPI::fromJsonValue(m_refresh_task_id, json[QString("refresh_task_id")]);
    m_refresh_task_id_isSet = !json[QString("refresh_task_id")].isNull() && m_refresh_task_id_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAISource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISource::asJsonObject() const {
    QJsonObject obj;
    if (m_archived_at_isSet) {
        obj.insert(QString("archived_at"), ::OpenAPI::toJsonValue(m_archived_at));
    }
    if (m_availability_message_isSet) {
        obj.insert(QString("availability_message"), ::OpenAPI::toJsonValue(m_availability_message));
    }
    if (m_availability_status_isSet) {
        obj.insert(QString("availability_status"), ::OpenAPI::toJsonValue(m_availability_status));
    }
    if (m_cloud_connector_id_isSet) {
        obj.insert(QString("cloud_connector_id"), ::OpenAPI::toJsonValue(m_cloud_connector_id));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_info_isSet) {
        obj.insert(QString("info"), ::OpenAPI::toJsonValue(m_info));
    }
    if (m_last_available_at_isSet) {
        obj.insert(QString("last_available_at"), ::OpenAPI::toJsonValue(m_last_available_at));
    }
    if (m_last_checked_at_isSet) {
        obj.insert(QString("last_checked_at"), ::OpenAPI::toJsonValue(m_last_checked_at));
    }
    if (m_last_refresh_message_isSet) {
        obj.insert(QString("last_refresh_message"), ::OpenAPI::toJsonValue(m_last_refresh_message));
    }
    if (m_last_successful_refresh_at_isSet) {
        obj.insert(QString("last_successful_refresh_at"), ::OpenAPI::toJsonValue(m_last_successful_refresh_at));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_previous_sha_isSet) {
        obj.insert(QString("previous_sha"), ::OpenAPI::toJsonValue(m_previous_sha));
    }
    if (m_previous_size_isSet) {
        obj.insert(QString("previous_size"), ::OpenAPI::toJsonValue(m_previous_size));
    }
    if (m_refresh_finished_at_isSet) {
        obj.insert(QString("refresh_finished_at"), ::OpenAPI::toJsonValue(m_refresh_finished_at));
    }
    if (m_refresh_started_at_isSet) {
        obj.insert(QString("refresh_started_at"), ::OpenAPI::toJsonValue(m_refresh_started_at));
    }
    if (m_refresh_state_isSet) {
        obj.insert(QString("refresh_state"), ::OpenAPI::toJsonValue(m_refresh_state));
    }
    if (m_refresh_task_id_isSet) {
        obj.insert(QString("refresh_task_id"), ::OpenAPI::toJsonValue(m_refresh_task_id));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QDateTime OAISource::getArchivedAt() const {
    return m_archived_at;
}
void OAISource::setArchivedAt(const QDateTime &archived_at) {
    m_archived_at = archived_at;
    m_archived_at_isSet = true;
}

bool OAISource::is_archived_at_Set() const{
    return m_archived_at_isSet;
}

bool OAISource::is_archived_at_Valid() const{
    return m_archived_at_isValid;
}

QString OAISource::getAvailabilityMessage() const {
    return m_availability_message;
}
void OAISource::setAvailabilityMessage(const QString &availability_message) {
    m_availability_message = availability_message;
    m_availability_message_isSet = true;
}

bool OAISource::is_availability_message_Set() const{
    return m_availability_message_isSet;
}

bool OAISource::is_availability_message_Valid() const{
    return m_availability_message_isValid;
}

QString OAISource::getAvailabilityStatus() const {
    return m_availability_status;
}
void OAISource::setAvailabilityStatus(const QString &availability_status) {
    m_availability_status = availability_status;
    m_availability_status_isSet = true;
}

bool OAISource::is_availability_status_Set() const{
    return m_availability_status_isSet;
}

bool OAISource::is_availability_status_Valid() const{
    return m_availability_status_isValid;
}

QString OAISource::getCloudConnectorId() const {
    return m_cloud_connector_id;
}
void OAISource::setCloudConnectorId(const QString &cloud_connector_id) {
    m_cloud_connector_id = cloud_connector_id;
    m_cloud_connector_id_isSet = true;
}

bool OAISource::is_cloud_connector_id_Set() const{
    return m_cloud_connector_id_isSet;
}

bool OAISource::is_cloud_connector_id_Valid() const{
    return m_cloud_connector_id_isValid;
}

QDateTime OAISource::getCreatedAt() const {
    return m_created_at;
}
void OAISource::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAISource::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAISource::is_created_at_Valid() const{
    return m_created_at_isValid;
}

bool OAISource::isEnabled() const {
    return m_enabled;
}
void OAISource::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAISource::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAISource::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAISource::getId() const {
    return m_id;
}
void OAISource::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISource::is_id_Set() const{
    return m_id_isSet;
}

bool OAISource::is_id_Valid() const{
    return m_id_isValid;
}

OAIObject OAISource::getInfo() const {
    return m_info;
}
void OAISource::setInfo(const OAIObject &info) {
    m_info = info;
    m_info_isSet = true;
}

bool OAISource::is_info_Set() const{
    return m_info_isSet;
}

bool OAISource::is_info_Valid() const{
    return m_info_isValid;
}

QDateTime OAISource::getLastAvailableAt() const {
    return m_last_available_at;
}
void OAISource::setLastAvailableAt(const QDateTime &last_available_at) {
    m_last_available_at = last_available_at;
    m_last_available_at_isSet = true;
}

bool OAISource::is_last_available_at_Set() const{
    return m_last_available_at_isSet;
}

bool OAISource::is_last_available_at_Valid() const{
    return m_last_available_at_isValid;
}

QDateTime OAISource::getLastCheckedAt() const {
    return m_last_checked_at;
}
void OAISource::setLastCheckedAt(const QDateTime &last_checked_at) {
    m_last_checked_at = last_checked_at;
    m_last_checked_at_isSet = true;
}

bool OAISource::is_last_checked_at_Set() const{
    return m_last_checked_at_isSet;
}

bool OAISource::is_last_checked_at_Valid() const{
    return m_last_checked_at_isValid;
}

QString OAISource::getLastRefreshMessage() const {
    return m_last_refresh_message;
}
void OAISource::setLastRefreshMessage(const QString &last_refresh_message) {
    m_last_refresh_message = last_refresh_message;
    m_last_refresh_message_isSet = true;
}

bool OAISource::is_last_refresh_message_Set() const{
    return m_last_refresh_message_isSet;
}

bool OAISource::is_last_refresh_message_Valid() const{
    return m_last_refresh_message_isValid;
}

QDateTime OAISource::getLastSuccessfulRefreshAt() const {
    return m_last_successful_refresh_at;
}
void OAISource::setLastSuccessfulRefreshAt(const QDateTime &last_successful_refresh_at) {
    m_last_successful_refresh_at = last_successful_refresh_at;
    m_last_successful_refresh_at_isSet = true;
}

bool OAISource::is_last_successful_refresh_at_Set() const{
    return m_last_successful_refresh_at_isSet;
}

bool OAISource::is_last_successful_refresh_at_Valid() const{
    return m_last_successful_refresh_at_isValid;
}

QString OAISource::getName() const {
    return m_name;
}
void OAISource::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISource::is_name_Set() const{
    return m_name_isSet;
}

bool OAISource::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISource::getPreviousSha() const {
    return m_previous_sha;
}
void OAISource::setPreviousSha(const QString &previous_sha) {
    m_previous_sha = previous_sha;
    m_previous_sha_isSet = true;
}

bool OAISource::is_previous_sha_Set() const{
    return m_previous_sha_isSet;
}

bool OAISource::is_previous_sha_Valid() const{
    return m_previous_sha_isValid;
}

qint32 OAISource::getPreviousSize() const {
    return m_previous_size;
}
void OAISource::setPreviousSize(const qint32 &previous_size) {
    m_previous_size = previous_size;
    m_previous_size_isSet = true;
}

bool OAISource::is_previous_size_Set() const{
    return m_previous_size_isSet;
}

bool OAISource::is_previous_size_Valid() const{
    return m_previous_size_isValid;
}

QDateTime OAISource::getRefreshFinishedAt() const {
    return m_refresh_finished_at;
}
void OAISource::setRefreshFinishedAt(const QDateTime &refresh_finished_at) {
    m_refresh_finished_at = refresh_finished_at;
    m_refresh_finished_at_isSet = true;
}

bool OAISource::is_refresh_finished_at_Set() const{
    return m_refresh_finished_at_isSet;
}

bool OAISource::is_refresh_finished_at_Valid() const{
    return m_refresh_finished_at_isValid;
}

QDateTime OAISource::getRefreshStartedAt() const {
    return m_refresh_started_at;
}
void OAISource::setRefreshStartedAt(const QDateTime &refresh_started_at) {
    m_refresh_started_at = refresh_started_at;
    m_refresh_started_at_isSet = true;
}

bool OAISource::is_refresh_started_at_Set() const{
    return m_refresh_started_at_isSet;
}

bool OAISource::is_refresh_started_at_Valid() const{
    return m_refresh_started_at_isValid;
}

QString OAISource::getRefreshState() const {
    return m_refresh_state;
}
void OAISource::setRefreshState(const QString &refresh_state) {
    m_refresh_state = refresh_state;
    m_refresh_state_isSet = true;
}

bool OAISource::is_refresh_state_Set() const{
    return m_refresh_state_isSet;
}

bool OAISource::is_refresh_state_Valid() const{
    return m_refresh_state_isValid;
}

QString OAISource::getRefreshTaskId() const {
    return m_refresh_task_id;
}
void OAISource::setRefreshTaskId(const QString &refresh_task_id) {
    m_refresh_task_id = refresh_task_id;
    m_refresh_task_id_isSet = true;
}

bool OAISource::is_refresh_task_id_Set() const{
    return m_refresh_task_id_isSet;
}

bool OAISource::is_refresh_task_id_Valid() const{
    return m_refresh_task_id_isValid;
}

QString OAISource::getUid() const {
    return m_uid;
}
void OAISource::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAISource::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAISource::is_uid_Valid() const{
    return m_uid_isValid;
}

QDateTime OAISource::getUpdatedAt() const {
    return m_updated_at;
}
void OAISource::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAISource::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAISource::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAISource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_archived_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_connector_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_available_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_checked_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_refresh_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_successful_refresh_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_sha_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_finished_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_started_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_task_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
