/**
 * Catalog Inventory
 * Catalog Inventory
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@redhat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIServiceInventoryApi_H
#define OAI_OAIServiceInventoryApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorNotFound.h"
#include "OAIServiceInventoriesCollection.h"
#include "OAIServiceInventory.h"
#include "OAITag.h"
#include "OAITagsCollection.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIServiceInventoryApi : public QObject {
    Q_OBJECT

public:
    OAIServiceInventoryApi(const int timeOut = 0);
    ~OAIServiceInventoryApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  filter OAIObject [optional]
    * @param[in]  sort_by OAIObject [optional]
    */
    virtual void listServiceInventories(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIObject> &filter = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<OAIObject> &sort_by = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  filter OAIObject [optional]
    * @param[in]  sort_by OAIObject [optional]
    */
    virtual void listServiceInventoryTags(const QString &id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIObject> &filter = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<OAIObject> &sort_by = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void showServiceInventory(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_tag QList<OAITag> [required]
    */
    virtual void tagServiceInventory(const QString &id, const QList<OAITag> &oai_tag);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_tag QList<OAITag> [required]
    */
    virtual void untagServiceInventory(const QString &id, const QList<OAITag> &oai_tag);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void listServiceInventoriesCallback(OAIHttpRequestWorker *worker);
    void listServiceInventoryTagsCallback(OAIHttpRequestWorker *worker);
    void showServiceInventoryCallback(OAIHttpRequestWorker *worker);
    void tagServiceInventoryCallback(OAIHttpRequestWorker *worker);
    void untagServiceInventoryCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void listServiceInventoriesSignal(OAIServiceInventoriesCollection summary);
    void listServiceInventoryTagsSignal(OAITagsCollection summary);
    void showServiceInventorySignal(OAIServiceInventory summary);
    void tagServiceInventorySignal(QList<OAITag> summary);
    void untagServiceInventorySignal();


    void listServiceInventoriesSignalFull(OAIHttpRequestWorker *worker, OAIServiceInventoriesCollection summary);
    void listServiceInventoryTagsSignalFull(OAIHttpRequestWorker *worker, OAITagsCollection summary);
    void showServiceInventorySignalFull(OAIHttpRequestWorker *worker, OAIServiceInventory summary);
    void tagServiceInventorySignalFull(OAIHttpRequestWorker *worker, QList<OAITag> summary);
    void untagServiceInventorySignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use listServiceInventoriesSignalError() instead")
    void listServiceInventoriesSignalE(OAIServiceInventoriesCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listServiceInventoriesSignalError(OAIServiceInventoriesCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listServiceInventoryTagsSignalError() instead")
    void listServiceInventoryTagsSignalE(OAITagsCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listServiceInventoryTagsSignalError(OAITagsCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use showServiceInventorySignalError() instead")
    void showServiceInventorySignalE(OAIServiceInventory summary, QNetworkReply::NetworkError error_type, QString error_str);
    void showServiceInventorySignalError(OAIServiceInventory summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagServiceInventorySignalError() instead")
    void tagServiceInventorySignalE(QList<OAITag> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tagServiceInventorySignalError(QList<OAITag> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use untagServiceInventorySignalError() instead")
    void untagServiceInventorySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void untagServiceInventorySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use listServiceInventoriesSignalErrorFull() instead")
    void listServiceInventoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listServiceInventoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listServiceInventoryTagsSignalErrorFull() instead")
    void listServiceInventoryTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listServiceInventoryTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use showServiceInventorySignalErrorFull() instead")
    void showServiceInventorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void showServiceInventorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagServiceInventorySignalErrorFull() instead")
    void tagServiceInventorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagServiceInventorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use untagServiceInventorySignalErrorFull() instead")
    void untagServiceInventorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void untagServiceInventorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
