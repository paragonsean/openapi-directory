/**
 * Catalog Inventory
 * Catalog Inventory
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@redhat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceOfferingIcon.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceOfferingIcon::OAIServiceOfferingIcon(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceOfferingIcon::OAIServiceOfferingIcon() {
    this->initializeModel();
}

OAIServiceOfferingIcon::~OAIServiceOfferingIcon() {}

void OAIServiceOfferingIcon::initializeModel() {

    m_archived_at_isSet = false;
    m_archived_at_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_seen_at_isSet = false;
    m_last_seen_at_isValid = false;

    m_refresh_state_part_id_isSet = false;
    m_refresh_state_part_id_isValid = false;

    m_source_id_isSet = false;
    m_source_id_isValid = false;

    m_source_ref_isSet = false;
    m_source_ref_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIServiceOfferingIcon::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceOfferingIcon::fromJsonObject(QJsonObject json) {

    m_archived_at_isValid = ::OpenAPI::fromJsonValue(m_archived_at, json[QString("archived_at")]);
    m_archived_at_isSet = !json[QString("archived_at")].isNull() && m_archived_at_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_seen_at_isValid = ::OpenAPI::fromJsonValue(m_last_seen_at, json[QString("last_seen_at")]);
    m_last_seen_at_isSet = !json[QString("last_seen_at")].isNull() && m_last_seen_at_isValid;

    m_refresh_state_part_id_isValid = ::OpenAPI::fromJsonValue(m_refresh_state_part_id, json[QString("refresh_state_part_id")]);
    m_refresh_state_part_id_isSet = !json[QString("refresh_state_part_id")].isNull() && m_refresh_state_part_id_isValid;

    m_source_id_isValid = ::OpenAPI::fromJsonValue(m_source_id, json[QString("source_id")]);
    m_source_id_isSet = !json[QString("source_id")].isNull() && m_source_id_isValid;

    m_source_ref_isValid = ::OpenAPI::fromJsonValue(m_source_ref, json[QString("source_ref")]);
    m_source_ref_isSet = !json[QString("source_ref")].isNull() && m_source_ref_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAIServiceOfferingIcon::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceOfferingIcon::asJsonObject() const {
    QJsonObject obj;
    if (m_archived_at_isSet) {
        obj.insert(QString("archived_at"), ::OpenAPI::toJsonValue(m_archived_at));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_data_isSet) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_seen_at_isSet) {
        obj.insert(QString("last_seen_at"), ::OpenAPI::toJsonValue(m_last_seen_at));
    }
    if (m_refresh_state_part_id_isSet) {
        obj.insert(QString("refresh_state_part_id"), ::OpenAPI::toJsonValue(m_refresh_state_part_id));
    }
    if (m_source_id_isSet) {
        obj.insert(QString("source_id"), ::OpenAPI::toJsonValue(m_source_id));
    }
    if (m_source_ref_isSet) {
        obj.insert(QString("source_ref"), ::OpenAPI::toJsonValue(m_source_ref));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QDateTime OAIServiceOfferingIcon::getArchivedAt() const {
    return m_archived_at;
}
void OAIServiceOfferingIcon::setArchivedAt(const QDateTime &archived_at) {
    m_archived_at = archived_at;
    m_archived_at_isSet = true;
}

bool OAIServiceOfferingIcon::is_archived_at_Set() const{
    return m_archived_at_isSet;
}

bool OAIServiceOfferingIcon::is_archived_at_Valid() const{
    return m_archived_at_isValid;
}

QDateTime OAIServiceOfferingIcon::getCreatedAt() const {
    return m_created_at;
}
void OAIServiceOfferingIcon::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIServiceOfferingIcon::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIServiceOfferingIcon::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIServiceOfferingIcon::getData() const {
    return m_data;
}
void OAIServiceOfferingIcon::setData(const QString &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIServiceOfferingIcon::is_data_Set() const{
    return m_data_isSet;
}

bool OAIServiceOfferingIcon::is_data_Valid() const{
    return m_data_isValid;
}

QString OAIServiceOfferingIcon::getId() const {
    return m_id;
}
void OAIServiceOfferingIcon::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIServiceOfferingIcon::is_id_Set() const{
    return m_id_isSet;
}

bool OAIServiceOfferingIcon::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIServiceOfferingIcon::getLastSeenAt() const {
    return m_last_seen_at;
}
void OAIServiceOfferingIcon::setLastSeenAt(const QDateTime &last_seen_at) {
    m_last_seen_at = last_seen_at;
    m_last_seen_at_isSet = true;
}

bool OAIServiceOfferingIcon::is_last_seen_at_Set() const{
    return m_last_seen_at_isSet;
}

bool OAIServiceOfferingIcon::is_last_seen_at_Valid() const{
    return m_last_seen_at_isValid;
}

QString OAIServiceOfferingIcon::getRefreshStatePartId() const {
    return m_refresh_state_part_id;
}
void OAIServiceOfferingIcon::setRefreshStatePartId(const QString &refresh_state_part_id) {
    m_refresh_state_part_id = refresh_state_part_id;
    m_refresh_state_part_id_isSet = true;
}

bool OAIServiceOfferingIcon::is_refresh_state_part_id_Set() const{
    return m_refresh_state_part_id_isSet;
}

bool OAIServiceOfferingIcon::is_refresh_state_part_id_Valid() const{
    return m_refresh_state_part_id_isValid;
}

QString OAIServiceOfferingIcon::getSourceId() const {
    return m_source_id;
}
void OAIServiceOfferingIcon::setSourceId(const QString &source_id) {
    m_source_id = source_id;
    m_source_id_isSet = true;
}

bool OAIServiceOfferingIcon::is_source_id_Set() const{
    return m_source_id_isSet;
}

bool OAIServiceOfferingIcon::is_source_id_Valid() const{
    return m_source_id_isValid;
}

QString OAIServiceOfferingIcon::getSourceRef() const {
    return m_source_ref;
}
void OAIServiceOfferingIcon::setSourceRef(const QString &source_ref) {
    m_source_ref = source_ref;
    m_source_ref_isSet = true;
}

bool OAIServiceOfferingIcon::is_source_ref_Set() const{
    return m_source_ref_isSet;
}

bool OAIServiceOfferingIcon::is_source_ref_Valid() const{
    return m_source_ref_isValid;
}

QDateTime OAIServiceOfferingIcon::getUpdatedAt() const {
    return m_updated_at;
}
void OAIServiceOfferingIcon::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIServiceOfferingIcon::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIServiceOfferingIcon::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIServiceOfferingIcon::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_archived_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_seen_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_state_part_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceOfferingIcon::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
