/**
 * Catalog Inventory
 * Catalog Inventory
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@redhat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITask.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITask::OAITask(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITask::OAITask() {
    this->initializeModel();
}

OAITask::~OAITask() {}

void OAITask::initializeModel() {

    m_archived_at_isSet = false;
    m_archived_at_isValid = false;

    m_child_task_id_isSet = false;
    m_child_task_id_isValid = false;

    m_completed_at_isSet = false;
    m_completed_at_isValid = false;

    m_controller_message_id_isSet = false;
    m_controller_message_id_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_input_isSet = false;
    m_input_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_output_isSet = false;
    m_output_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_source_id_isSet = false;
    m_source_id_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_target_source_ref_isSet = false;
    m_target_source_ref_isValid = false;

    m_target_type_isSet = false;
    m_target_type_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAITask::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITask::fromJsonObject(QJsonObject json) {

    m_archived_at_isValid = ::OpenAPI::fromJsonValue(m_archived_at, json[QString("archived_at")]);
    m_archived_at_isSet = !json[QString("archived_at")].isNull() && m_archived_at_isValid;

    m_child_task_id_isValid = ::OpenAPI::fromJsonValue(m_child_task_id, json[QString("child_task_id")]);
    m_child_task_id_isSet = !json[QString("child_task_id")].isNull() && m_child_task_id_isValid;

    m_completed_at_isValid = ::OpenAPI::fromJsonValue(m_completed_at, json[QString("completed_at")]);
    m_completed_at_isSet = !json[QString("completed_at")].isNull() && m_completed_at_isValid;

    m_controller_message_id_isValid = ::OpenAPI::fromJsonValue(m_controller_message_id, json[QString("controller_message_id")]);
    m_controller_message_id_isSet = !json[QString("controller_message_id")].isNull() && m_controller_message_id_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_input_isValid = ::OpenAPI::fromJsonValue(m_input, json[QString("input")]);
    m_input_isSet = !json[QString("input")].isNull() && m_input_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_output_isValid = ::OpenAPI::fromJsonValue(m_output, json[QString("output")]);
    m_output_isSet = !json[QString("output")].isNull() && m_output_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_source_id_isValid = ::OpenAPI::fromJsonValue(m_source_id, json[QString("source_id")]);
    m_source_id_isSet = !json[QString("source_id")].isNull() && m_source_id_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_target_source_ref_isValid = ::OpenAPI::fromJsonValue(m_target_source_ref, json[QString("target_source_ref")]);
    m_target_source_ref_isSet = !json[QString("target_source_ref")].isNull() && m_target_source_ref_isValid;

    m_target_type_isValid = ::OpenAPI::fromJsonValue(m_target_type, json[QString("target_type")]);
    m_target_type_isSet = !json[QString("target_type")].isNull() && m_target_type_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAITask::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITask::asJsonObject() const {
    QJsonObject obj;
    if (m_archived_at_isSet) {
        obj.insert(QString("archived_at"), ::OpenAPI::toJsonValue(m_archived_at));
    }
    if (m_child_task_id_isSet) {
        obj.insert(QString("child_task_id"), ::OpenAPI::toJsonValue(m_child_task_id));
    }
    if (m_completed_at_isSet) {
        obj.insert(QString("completed_at"), ::OpenAPI::toJsonValue(m_completed_at));
    }
    if (m_controller_message_id_isSet) {
        obj.insert(QString("controller_message_id"), ::OpenAPI::toJsonValue(m_controller_message_id));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_input_isSet) {
        obj.insert(QString("input"), ::OpenAPI::toJsonValue(m_input));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_output_isSet) {
        obj.insert(QString("output"), ::OpenAPI::toJsonValue(m_output));
    }
    if (m_owner_isSet) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_source_id_isSet) {
        obj.insert(QString("source_id"), ::OpenAPI::toJsonValue(m_source_id));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_target_source_ref_isSet) {
        obj.insert(QString("target_source_ref"), ::OpenAPI::toJsonValue(m_target_source_ref));
    }
    if (m_target_type_isSet) {
        obj.insert(QString("target_type"), ::OpenAPI::toJsonValue(m_target_type));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QDateTime OAITask::getArchivedAt() const {
    return m_archived_at;
}
void OAITask::setArchivedAt(const QDateTime &archived_at) {
    m_archived_at = archived_at;
    m_archived_at_isSet = true;
}

bool OAITask::is_archived_at_Set() const{
    return m_archived_at_isSet;
}

bool OAITask::is_archived_at_Valid() const{
    return m_archived_at_isValid;
}

QString OAITask::getChildTaskId() const {
    return m_child_task_id;
}
void OAITask::setChildTaskId(const QString &child_task_id) {
    m_child_task_id = child_task_id;
    m_child_task_id_isSet = true;
}

bool OAITask::is_child_task_id_Set() const{
    return m_child_task_id_isSet;
}

bool OAITask::is_child_task_id_Valid() const{
    return m_child_task_id_isValid;
}

QDateTime OAITask::getCompletedAt() const {
    return m_completed_at;
}
void OAITask::setCompletedAt(const QDateTime &completed_at) {
    m_completed_at = completed_at;
    m_completed_at_isSet = true;
}

bool OAITask::is_completed_at_Set() const{
    return m_completed_at_isSet;
}

bool OAITask::is_completed_at_Valid() const{
    return m_completed_at_isValid;
}

QString OAITask::getControllerMessageId() const {
    return m_controller_message_id;
}
void OAITask::setControllerMessageId(const QString &controller_message_id) {
    m_controller_message_id = controller_message_id;
    m_controller_message_id_isSet = true;
}

bool OAITask::is_controller_message_id_Set() const{
    return m_controller_message_id_isSet;
}

bool OAITask::is_controller_message_id_Valid() const{
    return m_controller_message_id_isValid;
}

QDateTime OAITask::getCreatedAt() const {
    return m_created_at;
}
void OAITask::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAITask::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAITask::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAITask::getId() const {
    return m_id;
}
void OAITask::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITask::is_id_Set() const{
    return m_id_isSet;
}

bool OAITask::is_id_Valid() const{
    return m_id_isValid;
}

OAIObject OAITask::getInput() const {
    return m_input;
}
void OAITask::setInput(const OAIObject &input) {
    m_input = input;
    m_input_isSet = true;
}

bool OAITask::is_input_Set() const{
    return m_input_isSet;
}

bool OAITask::is_input_Valid() const{
    return m_input_isValid;
}

QString OAITask::getMessage() const {
    return m_message;
}
void OAITask::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAITask::is_message_Set() const{
    return m_message_isSet;
}

bool OAITask::is_message_Valid() const{
    return m_message_isValid;
}

QString OAITask::getName() const {
    return m_name;
}
void OAITask::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITask::is_name_Set() const{
    return m_name_isSet;
}

bool OAITask::is_name_Valid() const{
    return m_name_isValid;
}

OAIObject OAITask::getOutput() const {
    return m_output;
}
void OAITask::setOutput(const OAIObject &output) {
    m_output = output;
    m_output_isSet = true;
}

bool OAITask::is_output_Set() const{
    return m_output_isSet;
}

bool OAITask::is_output_Valid() const{
    return m_output_isValid;
}

QString OAITask::getOwner() const {
    return m_owner;
}
void OAITask::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAITask::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAITask::is_owner_Valid() const{
    return m_owner_isValid;
}

QString OAITask::getSourceId() const {
    return m_source_id;
}
void OAITask::setSourceId(const QString &source_id) {
    m_source_id = source_id;
    m_source_id_isSet = true;
}

bool OAITask::is_source_id_Set() const{
    return m_source_id_isSet;
}

bool OAITask::is_source_id_Valid() const{
    return m_source_id_isValid;
}

QString OAITask::getState() const {
    return m_state;
}
void OAITask::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAITask::is_state_Set() const{
    return m_state_isSet;
}

bool OAITask::is_state_Valid() const{
    return m_state_isValid;
}

QString OAITask::getStatus() const {
    return m_status;
}
void OAITask::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITask::is_status_Set() const{
    return m_status_isSet;
}

bool OAITask::is_status_Valid() const{
    return m_status_isValid;
}

QString OAITask::getTargetSourceRef() const {
    return m_target_source_ref;
}
void OAITask::setTargetSourceRef(const QString &target_source_ref) {
    m_target_source_ref = target_source_ref;
    m_target_source_ref_isSet = true;
}

bool OAITask::is_target_source_ref_Set() const{
    return m_target_source_ref_isSet;
}

bool OAITask::is_target_source_ref_Valid() const{
    return m_target_source_ref_isValid;
}

QString OAITask::getTargetType() const {
    return m_target_type;
}
void OAITask::setTargetType(const QString &target_type) {
    m_target_type = target_type;
    m_target_type_isSet = true;
}

bool OAITask::is_target_type_Set() const{
    return m_target_type_isSet;
}

bool OAITask::is_target_type_Valid() const{
    return m_target_type_isValid;
}

QString OAITask::getType() const {
    return m_type;
}
void OAITask::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITask::is_type_Set() const{
    return m_type_isSet;
}

bool OAITask::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAITask::getUpdatedAt() const {
    return m_updated_at;
}
void OAITask::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAITask::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAITask::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAITask::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_archived_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_child_task_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_controller_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_source_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITask::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
