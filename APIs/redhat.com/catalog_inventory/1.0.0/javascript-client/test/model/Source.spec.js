/**
 * Catalog Inventory
 * Catalog Inventory
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@redhat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CatalogInventory);
  }
}(this, function(expect, CatalogInventory) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CatalogInventory.Source();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Source', function() {
    it('should create an instance of Source', function() {
      // uncomment below and update the code to test Source
      //var instance = new CatalogInventory.Source();
      //expect(instance).to.be.a(CatalogInventory.Source);
    });

    it('should have the property archivedAt (base name: "archived_at")', function() {
      // uncomment below and update the code to test the property archivedAt
      //var instance = new CatalogInventory.Source();
      //expect(instance).to.be();
    });

    it('should have the property availabilityMessage (base name: "availability_message")', function() {
      // uncomment below and update the code to test the property availabilityMessage
      //var instance = new CatalogInventory.Source();
      //expect(instance).to.be();
    });

    it('should have the property availabilityStatus (base name: "availability_status")', function() {
      // uncomment below and update the code to test the property availabilityStatus
      //var instance = new CatalogInventory.Source();
      //expect(instance).to.be();
    });

    it('should have the property cloudConnectorId (base name: "cloud_connector_id")', function() {
      // uncomment below and update the code to test the property cloudConnectorId
      //var instance = new CatalogInventory.Source();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "created_at")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new CatalogInventory.Source();
      //expect(instance).to.be();
    });

    it('should have the property enabled (base name: "enabled")', function() {
      // uncomment below and update the code to test the property enabled
      //var instance = new CatalogInventory.Source();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new CatalogInventory.Source();
      //expect(instance).to.be();
    });

    it('should have the property info (base name: "info")', function() {
      // uncomment below and update the code to test the property info
      //var instance = new CatalogInventory.Source();
      //expect(instance).to.be();
    });

    it('should have the property lastAvailableAt (base name: "last_available_at")', function() {
      // uncomment below and update the code to test the property lastAvailableAt
      //var instance = new CatalogInventory.Source();
      //expect(instance).to.be();
    });

    it('should have the property lastCheckedAt (base name: "last_checked_at")', function() {
      // uncomment below and update the code to test the property lastCheckedAt
      //var instance = new CatalogInventory.Source();
      //expect(instance).to.be();
    });

    it('should have the property lastRefreshMessage (base name: "last_refresh_message")', function() {
      // uncomment below and update the code to test the property lastRefreshMessage
      //var instance = new CatalogInventory.Source();
      //expect(instance).to.be();
    });

    it('should have the property lastSuccessfulRefreshAt (base name: "last_successful_refresh_at")', function() {
      // uncomment below and update the code to test the property lastSuccessfulRefreshAt
      //var instance = new CatalogInventory.Source();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new CatalogInventory.Source();
      //expect(instance).to.be();
    });

    it('should have the property previousSha (base name: "previous_sha")', function() {
      // uncomment below and update the code to test the property previousSha
      //var instance = new CatalogInventory.Source();
      //expect(instance).to.be();
    });

    it('should have the property previousSize (base name: "previous_size")', function() {
      // uncomment below and update the code to test the property previousSize
      //var instance = new CatalogInventory.Source();
      //expect(instance).to.be();
    });

    it('should have the property refreshFinishedAt (base name: "refresh_finished_at")', function() {
      // uncomment below and update the code to test the property refreshFinishedAt
      //var instance = new CatalogInventory.Source();
      //expect(instance).to.be();
    });

    it('should have the property refreshStartedAt (base name: "refresh_started_at")', function() {
      // uncomment below and update the code to test the property refreshStartedAt
      //var instance = new CatalogInventory.Source();
      //expect(instance).to.be();
    });

    it('should have the property refreshState (base name: "refresh_state")', function() {
      // uncomment below and update the code to test the property refreshState
      //var instance = new CatalogInventory.Source();
      //expect(instance).to.be();
    });

    it('should have the property refreshTaskId (base name: "refresh_task_id")', function() {
      // uncomment below and update the code to test the property refreshTaskId
      //var instance = new CatalogInventory.Source();
      //expect(instance).to.be();
    });

    it('should have the property uid (base name: "uid")', function() {
      // uncomment below and update the code to test the property uid
      //var instance = new CatalogInventory.Source();
      //expect(instance).to.be();
    });

    it('should have the property updatedAt (base name: "updated_at")', function() {
      // uncomment below and update the code to test the property updatedAt
      //var instance = new CatalogInventory.Source();
      //expect(instance).to.be();
    });

  });

}));
