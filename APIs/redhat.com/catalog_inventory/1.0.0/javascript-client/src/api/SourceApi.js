/**
 * Catalog Inventory
 * Catalog Inventory
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@redhat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorNotFound from '../model/ErrorNotFound';
import ServiceInstancesCollection from '../model/ServiceInstancesCollection';
import ServiceInventoriesCollection from '../model/ServiceInventoriesCollection';
import ServiceOfferingNodesCollection from '../model/ServiceOfferingNodesCollection';
import ServiceOfferingsCollection from '../model/ServiceOfferingsCollection';
import ServicePlansCollection from '../model/ServicePlansCollection';
import Source from '../model/Source';
import SourcesCollection from '../model/SourcesCollection';
import TasksCollection from '../model/TasksCollection';

/**
* Source service.
* @module api/SourceApi
* @version 1.0.0
*/
export default class SourceApi {

    /**
    * Constructs a new SourceApi. 
    * @alias module:api/SourceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the incrementalRefreshSource operation.
     * @callback module:api/SourceApi~incrementalRefreshSourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Incremental Refresh an existing Source
     * Incremental Refresh a source object
     * @param {String} id ID of the resource
     * @param {module:api/SourceApi~incrementalRefreshSourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    incrementalRefreshSource(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling incrementalRefreshSource");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sources/{id}/incremental_refresh', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSourceServiceInstances operation.
     * @callback module:api/SourceApi~listSourceServiceInstancesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceInstancesCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List ServiceInstances for Source
     * Returns an array of ServiceInstance objects
     * @param {String} id ID of the resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 100)] The numbers of items to return per page.
     * @param {Number} [offset = 0)] The number of items to skip before starting to collect the result set.
     * @param {Object.<String, Object>} [filter] Filter for querying collections.
     * @param {Object.<String, Object>} [sortBy] The list of attribute and order to sort the result set by.
     * @param {module:api/SourceApi~listSourceServiceInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceInstancesCollection}
     */
    listSourceServiceInstances(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listSourceServiceInstances");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'filter': opts['filter'],
        'sort_by': opts['sortBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceInstancesCollection;
      return this.apiClient.callApi(
        '/sources/{id}/service_instances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSourceServiceInventories operation.
     * @callback module:api/SourceApi~listSourceServiceInventoriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceInventoriesCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List ServiceInventories for Source
     * Returns an array of ServiceInventory objects
     * @param {String} id ID of the resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 100)] The numbers of items to return per page.
     * @param {Number} [offset = 0)] The number of items to skip before starting to collect the result set.
     * @param {Object.<String, Object>} [filter] Filter for querying collections.
     * @param {Object.<String, Object>} [sortBy] The list of attribute and order to sort the result set by.
     * @param {module:api/SourceApi~listSourceServiceInventoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceInventoriesCollection}
     */
    listSourceServiceInventories(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listSourceServiceInventories");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'filter': opts['filter'],
        'sort_by': opts['sortBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceInventoriesCollection;
      return this.apiClient.callApi(
        '/sources/{id}/service_inventories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSourceServiceOfferingNodes operation.
     * @callback module:api/SourceApi~listSourceServiceOfferingNodesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceOfferingNodesCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List ServiceOfferingNodes for Source
     * Returns an array of ServiceOfferingNode objects
     * @param {String} id ID of the resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 100)] The numbers of items to return per page.
     * @param {Number} [offset = 0)] The number of items to skip before starting to collect the result set.
     * @param {Object.<String, Object>} [filter] Filter for querying collections.
     * @param {Object.<String, Object>} [sortBy] The list of attribute and order to sort the result set by.
     * @param {module:api/SourceApi~listSourceServiceOfferingNodesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceOfferingNodesCollection}
     */
    listSourceServiceOfferingNodes(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listSourceServiceOfferingNodes");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'filter': opts['filter'],
        'sort_by': opts['sortBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceOfferingNodesCollection;
      return this.apiClient.callApi(
        '/sources/{id}/service_offering_nodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSourceServiceOfferings operation.
     * @callback module:api/SourceApi~listSourceServiceOfferingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceOfferingsCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List ServiceOfferings for Source
     * Returns an array of ServiceOffering objects
     * @param {String} id ID of the resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 100)] The numbers of items to return per page.
     * @param {Number} [offset = 0)] The number of items to skip before starting to collect the result set.
     * @param {Object.<String, Object>} [filter] Filter for querying collections.
     * @param {Object.<String, Object>} [sortBy] The list of attribute and order to sort the result set by.
     * @param {module:api/SourceApi~listSourceServiceOfferingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceOfferingsCollection}
     */
    listSourceServiceOfferings(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listSourceServiceOfferings");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'filter': opts['filter'],
        'sort_by': opts['sortBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceOfferingsCollection;
      return this.apiClient.callApi(
        '/sources/{id}/service_offerings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSourceServicePlans operation.
     * @callback module:api/SourceApi~listSourceServicePlansCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServicePlansCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List ServicePlans for Source
     * Returns an array of ServicePlan objects
     * @param {String} id ID of the resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 100)] The numbers of items to return per page.
     * @param {Number} [offset = 0)] The number of items to skip before starting to collect the result set.
     * @param {Object.<String, Object>} [filter] Filter for querying collections.
     * @param {Object.<String, Object>} [sortBy] The list of attribute and order to sort the result set by.
     * @param {module:api/SourceApi~listSourceServicePlansCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServicePlansCollection}
     */
    listSourceServicePlans(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listSourceServicePlans");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'filter': opts['filter'],
        'sort_by': opts['sortBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServicePlansCollection;
      return this.apiClient.callApi(
        '/sources/{id}/service_plans', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSourceTasks operation.
     * @callback module:api/SourceApi~listSourceTasksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TasksCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Tasks for Source
     * Returns an array of Task objects
     * @param {String} id ID of the resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 100)] The numbers of items to return per page.
     * @param {Number} [offset = 0)] The number of items to skip before starting to collect the result set.
     * @param {Object.<String, Object>} [filter] Filter for querying collections.
     * @param {Object.<String, Object>} [sortBy] The list of attribute and order to sort the result set by.
     * @param {module:api/SourceApi~listSourceTasksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TasksCollection}
     */
    listSourceTasks(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listSourceTasks");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'filter': opts['filter'],
        'sort_by': opts['sortBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TasksCollection;
      return this.apiClient.callApi(
        '/sources/{id}/tasks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSources operation.
     * @callback module:api/SourceApi~listSourcesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SourcesCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Sources
     * Returns an array of Source objects
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 100)] The numbers of items to return per page.
     * @param {Number} [offset = 0)] The number of items to skip before starting to collect the result set.
     * @param {Object.<String, Object>} [filter] Filter for querying collections.
     * @param {Object.<String, Object>} [sortBy] The list of attribute and order to sort the result set by.
     * @param {module:api/SourceApi~listSourcesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SourcesCollection}
     */
    listSources(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'filter': opts['filter'],
        'sort_by': opts['sortBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SourcesCollection;
      return this.apiClient.callApi(
        '/sources', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the refreshSource operation.
     * @callback module:api/SourceApi~refreshSourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Refresh an existing Source
     * Refresh a source object
     * @param {String} id ID of the resource
     * @param {module:api/SourceApi~refreshSourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    refreshSource(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling refreshSource");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sources/{id}/refresh', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showSource operation.
     * @callback module:api/SourceApi~showSourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Source} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show an existing Source
     * Returns a Source object
     * @param {String} id ID of the resource
     * @param {module:api/SourceApi~showSourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Source}
     */
    showSource(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showSource");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Source;
      return this.apiClient.callApi(
        '/sources/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
