/**
 * Catalog Inventory
 * Catalog Inventory
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@redhat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorNotFound from '../model/ErrorNotFound';
import ServiceInstance from '../model/ServiceInstance';
import ServiceInstancesCollection from '../model/ServiceInstancesCollection';

/**
* ServiceInstance service.
* @module api/ServiceInstanceApi
* @version 1.0.0
*/
export default class ServiceInstanceApi {

    /**
    * Constructs a new ServiceInstanceApi. 
    * @alias module:api/ServiceInstanceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the listServiceInstances operation.
     * @callback module:api/ServiceInstanceApi~listServiceInstancesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceInstancesCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List ServiceInstances
     * Returns an array of ServiceInstance objects
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 100)] The numbers of items to return per page.
     * @param {Number} [offset = 0)] The number of items to skip before starting to collect the result set.
     * @param {Object.<String, Object>} [filter] Filter for querying collections.
     * @param {Object.<String, Object>} [sortBy] The list of attribute and order to sort the result set by.
     * @param {module:api/ServiceInstanceApi~listServiceInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceInstancesCollection}
     */
    listServiceInstances(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'filter': opts['filter'],
        'sort_by': opts['sortBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceInstancesCollection;
      return this.apiClient.callApi(
        '/service_instances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showServiceInstance operation.
     * @callback module:api/ServiceInstanceApi~showServiceInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceInstance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show an existing ServiceInstance
     * Returns a ServiceInstance object
     * @param {String} id ID of the resource
     * @param {module:api/ServiceInstanceApi~showServiceInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceInstance}
     */
    showServiceInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showServiceInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceInstance;
      return this.apiClient.callApi(
        '/service_instances/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
