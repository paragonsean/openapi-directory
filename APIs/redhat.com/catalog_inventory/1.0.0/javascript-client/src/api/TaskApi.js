/**
 * Catalog Inventory
 * Catalog Inventory
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@redhat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorNotFound from '../model/ErrorNotFound';
import Task from '../model/Task';
import TasksCollection from '../model/TasksCollection';

/**
* Task service.
* @module api/TaskApi
* @version 1.0.0
*/
export default class TaskApi {

    /**
    * Constructs a new TaskApi. 
    * @alias module:api/TaskApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the listTasks operation.
     * @callback module:api/TaskApi~listTasksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TasksCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Tasks
     * Returns an array of Task objects
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 100)] The numbers of items to return per page.
     * @param {Number} [offset = 0)] The number of items to skip before starting to collect the result set.
     * @param {Object.<String, Object>} [filter] Filter for querying collections.
     * @param {Object.<String, Object>} [sortBy] The list of attribute and order to sort the result set by.
     * @param {module:api/TaskApi~listTasksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TasksCollection}
     */
    listTasks(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'filter': opts['filter'],
        'sort_by': opts['sortBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TasksCollection;
      return this.apiClient.callApi(
        '/tasks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showTask operation.
     * @callback module:api/TaskApi~showTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Task} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show an existing Task
     * Returns a Task object
     * @param {String} id UUID of task
     * @param {module:api/TaskApi~showTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Task}
     */
    showTask(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showTask");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Task;
      return this.apiClient.callApi(
        '/tasks/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTask operation.
     * @callback module:api/TaskApi~updateTaskCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing Task
     * Updates a Task object
     * @param {String} id UUID of task
     * @param {module:model/Task} task Task attributes to update
     * @param {module:api/TaskApi~updateTaskCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateTask(id, task, callback) {
      let postBody = task;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateTask");
      }
      // verify the required parameter 'task' is set
      if (task === undefined || task === null) {
        throw new Error("Missing the required parameter 'task' when calling updateTask");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
