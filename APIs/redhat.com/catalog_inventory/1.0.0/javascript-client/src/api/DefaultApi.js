/**
 * Catalog Inventory
 * Catalog Inventory
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@redhat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GraphQLRequest from '../model/GraphQLRequest';
import GraphQLResponse from '../model/GraphQLResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getDocumentation operation.
     * @callback module:api/DefaultApi~getDocumentationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return this API document in JSON format
     * @param {module:api/DefaultApi~getDocumentationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getDocumentation(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/openapi.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postGraphQL operation.
     * @callback module:api/DefaultApi~postGraphQLCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GraphQLResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Perform a GraphQL Query
     * Performs a GraphQL Query
     * @param {module:model/GraphQLRequest} graphQLRequest GraphQL Query Request
     * @param {module:api/DefaultApi~postGraphQLCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GraphQLResponse}
     */
    postGraphQL(graphQLRequest, callback) {
      let postBody = graphQLRequest;
      // verify the required parameter 'graphQLRequest' is set
      if (graphQLRequest === undefined || graphQLRequest === null) {
        throw new Error("Missing the required parameter 'graphQLRequest' when calling postGraphQL");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GraphQLResponse;
      return this.apiClient.callApi(
        '/graphql', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
