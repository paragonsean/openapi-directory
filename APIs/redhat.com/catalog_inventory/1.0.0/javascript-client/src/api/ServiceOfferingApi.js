/**
 * Catalog Inventory
 * Catalog Inventory
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@redhat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AppliedInventoriesParametersServicePlan from '../model/AppliedInventoriesParametersServicePlan';
import ErrorNotFound from '../model/ErrorNotFound';
import OrderParametersServiceOffering from '../model/OrderParametersServiceOffering';
import OrderServiceOffering200Response from '../model/OrderServiceOffering200Response';
import ServiceInstancesCollection from '../model/ServiceInstancesCollection';
import ServiceOffering from '../model/ServiceOffering';
import ServiceOfferingNodesCollection from '../model/ServiceOfferingNodesCollection';
import ServiceOfferingsCollection from '../model/ServiceOfferingsCollection';
import ServicePlansCollection from '../model/ServicePlansCollection';
import Tag from '../model/Tag';

/**
* ServiceOffering service.
* @module api/ServiceOfferingApi
* @version 1.0.0
*/
export default class ServiceOfferingApi {

    /**
    * Constructs a new ServiceOfferingApi. 
    * @alias module:api/ServiceOfferingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the appliedInventoriesTagsForServiceOffering operation.
     * @callback module:api/ServiceOfferingApi~appliedInventoriesTagsForServiceOfferingCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Tag>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Invokes computing of ServiceInventories tags for given ServiceOffering
     * Returns an array of inventories tags
     * @param {String} id ID of the resource
     * @param {module:model/AppliedInventoriesParametersServicePlan} appliedInventoriesParametersServicePlan Parameters defining input data for computing inventories
     * @param {module:api/ServiceOfferingApi~appliedInventoriesTagsForServiceOfferingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Tag>}
     */
    appliedInventoriesTagsForServiceOffering(id, appliedInventoriesParametersServicePlan, callback) {
      let postBody = appliedInventoriesParametersServicePlan;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appliedInventoriesTagsForServiceOffering");
      }
      // verify the required parameter 'appliedInventoriesParametersServicePlan' is set
      if (appliedInventoriesParametersServicePlan === undefined || appliedInventoriesParametersServicePlan === null) {
        throw new Error("Missing the required parameter 'appliedInventoriesParametersServicePlan' when calling appliedInventoriesTagsForServiceOffering");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Tag];
      return this.apiClient.callApi(
        '/service_offerings/{id}/applied_inventories_tags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listServiceOfferingServiceInstances operation.
     * @callback module:api/ServiceOfferingApi~listServiceOfferingServiceInstancesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceInstancesCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List ServiceInstances for ServiceOffering
     * Returns an array of ServiceInstance objects
     * @param {String} id ID of the resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 100)] The numbers of items to return per page.
     * @param {Number} [offset = 0)] The number of items to skip before starting to collect the result set.
     * @param {Object.<String, Object>} [filter] Filter for querying collections.
     * @param {Object.<String, Object>} [sortBy] The list of attribute and order to sort the result set by.
     * @param {module:api/ServiceOfferingApi~listServiceOfferingServiceInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceInstancesCollection}
     */
    listServiceOfferingServiceInstances(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listServiceOfferingServiceInstances");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'filter': opts['filter'],
        'sort_by': opts['sortBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceInstancesCollection;
      return this.apiClient.callApi(
        '/service_offerings/{id}/service_instances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listServiceOfferingServiceOfferingNodes operation.
     * @callback module:api/ServiceOfferingApi~listServiceOfferingServiceOfferingNodesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceOfferingNodesCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List ServiceOfferingNodes for ServiceOffering
     * Returns an array of ServiceOfferingNode objects
     * @param {String} id ID of the resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 100)] The numbers of items to return per page.
     * @param {Number} [offset = 0)] The number of items to skip before starting to collect the result set.
     * @param {Object.<String, Object>} [filter] Filter for querying collections.
     * @param {Object.<String, Object>} [sortBy] The list of attribute and order to sort the result set by.
     * @param {module:api/ServiceOfferingApi~listServiceOfferingServiceOfferingNodesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceOfferingNodesCollection}
     */
    listServiceOfferingServiceOfferingNodes(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listServiceOfferingServiceOfferingNodes");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'filter': opts['filter'],
        'sort_by': opts['sortBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceOfferingNodesCollection;
      return this.apiClient.callApi(
        '/service_offerings/{id}/service_offering_nodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listServiceOfferingServicePlans operation.
     * @callback module:api/ServiceOfferingApi~listServiceOfferingServicePlansCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServicePlansCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List ServicePlans for ServiceOffering
     * Returns an array of ServicePlan objects
     * @param {String} id ID of the resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 100)] The numbers of items to return per page.
     * @param {Number} [offset = 0)] The number of items to skip before starting to collect the result set.
     * @param {Object.<String, Object>} [filter] Filter for querying collections.
     * @param {Object.<String, Object>} [sortBy] The list of attribute and order to sort the result set by.
     * @param {module:api/ServiceOfferingApi~listServiceOfferingServicePlansCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServicePlansCollection}
     */
    listServiceOfferingServicePlans(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listServiceOfferingServicePlans");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'filter': opts['filter'],
        'sort_by': opts['sortBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServicePlansCollection;
      return this.apiClient.callApi(
        '/service_offerings/{id}/service_plans', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listServiceOfferings operation.
     * @callback module:api/ServiceOfferingApi~listServiceOfferingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceOfferingsCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List ServiceOfferings
     * Returns an array of ServiceOffering objects
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 100)] The numbers of items to return per page.
     * @param {Number} [offset = 0)] The number of items to skip before starting to collect the result set.
     * @param {Object.<String, Object>} [filter] Filter for querying collections.
     * @param {Object.<String, Object>} [sortBy] The list of attribute and order to sort the result set by.
     * @param {module:api/ServiceOfferingApi~listServiceOfferingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceOfferingsCollection}
     */
    listServiceOfferings(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'filter': opts['filter'],
        'sort_by': opts['sortBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceOfferingsCollection;
      return this.apiClient.callApi(
        '/service_offerings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderServiceOffering operation.
     * @callback module:api/ServiceOfferingApi~orderServiceOfferingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderServiceOffering200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Order an existing ServiceOffering
     * Returns a Task id
     * @param {String} id ID of the resource
     * @param {module:model/OrderParametersServiceOffering} orderParametersServiceOffering Order parameters defining the service and provider control
     * @param {module:api/ServiceOfferingApi~orderServiceOfferingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderServiceOffering200Response}
     */
    orderServiceOffering(id, orderParametersServiceOffering, callback) {
      let postBody = orderParametersServiceOffering;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling orderServiceOffering");
      }
      // verify the required parameter 'orderParametersServiceOffering' is set
      if (orderParametersServiceOffering === undefined || orderParametersServiceOffering === null) {
        throw new Error("Missing the required parameter 'orderParametersServiceOffering' when calling orderServiceOffering");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrderServiceOffering200Response;
      return this.apiClient.callApi(
        '/service_offerings/{id}/order', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showServiceOffering operation.
     * @callback module:api/ServiceOfferingApi~showServiceOfferingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceOffering} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show an existing ServiceOffering
     * Returns a ServiceOffering object
     * @param {String} id ID of the resource
     * @param {module:api/ServiceOfferingApi~showServiceOfferingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceOffering}
     */
    showServiceOffering(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showServiceOffering");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceOffering;
      return this.apiClient.callApi(
        '/service_offerings/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
