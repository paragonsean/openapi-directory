/**
 * Catalog Inventory
 * Catalog Inventory
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@redhat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Task model module.
 * @module model/Task
 * @version 1.0.0
 */
class Task {
    /**
     * Constructs a new <code>Task</code>.
     * @alias module:model/Task
     */
    constructor() { 
        
        Task.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Task</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Task} obj Optional instance to populate.
     * @return {module:model/Task} The populated <code>Task</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Task();

            if (data.hasOwnProperty('archived_at')) {
                obj['archived_at'] = ApiClient.convertToType(data['archived_at'], 'Date');
            }
            if (data.hasOwnProperty('child_task_id')) {
                obj['child_task_id'] = ApiClient.convertToType(data['child_task_id'], 'String');
            }
            if (data.hasOwnProperty('completed_at')) {
                obj['completed_at'] = ApiClient.convertToType(data['completed_at'], 'Date');
            }
            if (data.hasOwnProperty('controller_message_id')) {
                obj['controller_message_id'] = ApiClient.convertToType(data['controller_message_id'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('input')) {
                obj['input'] = ApiClient.convertToType(data['input'], Object);
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('output')) {
                obj['output'] = ApiClient.convertToType(data['output'], Object);
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = ApiClient.convertToType(data['owner'], 'String');
            }
            if (data.hasOwnProperty('source_id')) {
                obj['source_id'] = ApiClient.convertToType(data['source_id'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('target_source_ref')) {
                obj['target_source_ref'] = ApiClient.convertToType(data['target_source_ref'], 'String');
            }
            if (data.hasOwnProperty('target_type')) {
                obj['target_type'] = ApiClient.convertToType(data['target_type'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Task</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Task</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['child_task_id'] && !(typeof data['child_task_id'] === 'string' || data['child_task_id'] instanceof String)) {
            throw new Error("Expected the field `child_task_id` to be a primitive type in the JSON string but got " + data['child_task_id']);
        }
        // ensure the json data is a string
        if (data['controller_message_id'] && !(typeof data['controller_message_id'] === 'string' || data['controller_message_id'] instanceof String)) {
            throw new Error("Expected the field `controller_message_id` to be a primitive type in the JSON string but got " + data['controller_message_id']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['owner'] && !(typeof data['owner'] === 'string' || data['owner'] instanceof String)) {
            throw new Error("Expected the field `owner` to be a primitive type in the JSON string but got " + data['owner']);
        }
        // ensure the json data is a string
        if (data['source_id'] && !(typeof data['source_id'] === 'string' || data['source_id'] instanceof String)) {
            throw new Error("Expected the field `source_id` to be a primitive type in the JSON string but got " + data['source_id']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['target_source_ref'] && !(typeof data['target_source_ref'] === 'string' || data['target_source_ref'] instanceof String)) {
            throw new Error("Expected the field `target_source_ref` to be a primitive type in the JSON string but got " + data['target_source_ref']);
        }
        // ensure the json data is a string
        if (data['target_type'] && !(typeof data['target_type'] === 'string' || data['target_type'] instanceof String)) {
            throw new Error("Expected the field `target_type` to be a primitive type in the JSON string but got " + data['target_type']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * @member {Date} archived_at
 */
Task.prototype['archived_at'] = undefined;

/**
 * @member {String} child_task_id
 */
Task.prototype['child_task_id'] = undefined;

/**
 * @member {Date} completed_at
 */
Task.prototype['completed_at'] = undefined;

/**
 * @member {String} controller_message_id
 */
Task.prototype['controller_message_id'] = undefined;

/**
 * @member {Date} created_at
 */
Task.prototype['created_at'] = undefined;

/**
 * UUID of task
 * @member {String} id
 */
Task.prototype['id'] = undefined;

/**
 * @member {Object} input
 */
Task.prototype['input'] = undefined;

/**
 * @member {String} message
 */
Task.prototype['message'] = undefined;

/**
 * @member {String} name
 */
Task.prototype['name'] = undefined;

/**
 * @member {Object} output
 */
Task.prototype['output'] = undefined;

/**
 * @member {String} owner
 */
Task.prototype['owner'] = undefined;

/**
 * ID of the resource
 * @member {String} source_id
 */
Task.prototype['source_id'] = undefined;

/**
 * @member {module:model/Task.StateEnum} state
 */
Task.prototype['state'] = undefined;

/**
 * @member {module:model/Task.StatusEnum} status
 */
Task.prototype['status'] = undefined;

/**
 * @member {String} target_source_ref
 */
Task.prototype['target_source_ref'] = undefined;

/**
 * @member {String} target_type
 */
Task.prototype['target_type'] = undefined;

/**
 * @member {String} type
 */
Task.prototype['type'] = undefined;

/**
 * @member {Date} updated_at
 */
Task.prototype['updated_at'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Task['StateEnum'] = {

    /**
     * value: "pending"
     * @const
     */
    "pending": "pending",

    /**
     * value: "queued"
     * @const
     */
    "queued": "queued",

    /**
     * value: "running"
     * @const
     */
    "running": "running",

    /**
     * value: "timedout"
     * @const
     */
    "timedout": "timedout",

    /**
     * value: "completed"
     * @const
     */
    "completed": "completed"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Task['StatusEnum'] = {

    /**
     * value: "ok"
     * @const
     */
    "ok": "ok",

    /**
     * value: "warn"
     * @const
     */
    "warn": "warn",

    /**
     * value: "unchanged"
     * @const
     */
    "unchanged": "unchanged",

    /**
     * value: "error"
     * @const
     */
    "error": "error"
};



export default Task;

