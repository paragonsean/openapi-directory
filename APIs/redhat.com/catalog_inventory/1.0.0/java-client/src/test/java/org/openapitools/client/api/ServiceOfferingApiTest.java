/*
 * Catalog Inventory
 * Catalog Inventory
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@redhat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AppliedInventoriesParametersServicePlan;
import org.openapitools.client.model.ErrorNotFound;
import org.openapitools.client.model.OrderParametersServiceOffering;
import org.openapitools.client.model.OrderServiceOffering200Response;
import org.openapitools.client.model.ServiceInstancesCollection;
import org.openapitools.client.model.ServiceOffering;
import org.openapitools.client.model.ServiceOfferingNodesCollection;
import org.openapitools.client.model.ServiceOfferingsCollection;
import org.openapitools.client.model.ServicePlansCollection;
import org.openapitools.client.model.Tag;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ServiceOfferingApi
 */
@Disabled
public class ServiceOfferingApiTest {

    private final ServiceOfferingApi api = new ServiceOfferingApi();

    /**
     * Invokes computing of ServiceInventories tags for given ServiceOffering
     *
     * Returns an array of inventories tags
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appliedInventoriesTagsForServiceOfferingTest() throws ApiException {
        String id = null;
        AppliedInventoriesParametersServicePlan appliedInventoriesParametersServicePlan = null;
        List<Tag> response = api.appliedInventoriesTagsForServiceOffering(id, appliedInventoriesParametersServicePlan);
        // TODO: test validations
    }

    /**
     * List ServiceInstances for ServiceOffering
     *
     * Returns an array of ServiceInstance objects
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listServiceOfferingServiceInstancesTest() throws ApiException {
        String id = null;
        Integer limit = null;
        Integer offset = null;
        Object filter = null;
        Object sortBy = null;
        ServiceInstancesCollection response = api.listServiceOfferingServiceInstances(id, limit, offset, filter, sortBy);
        // TODO: test validations
    }

    /**
     * List ServiceOfferingNodes for ServiceOffering
     *
     * Returns an array of ServiceOfferingNode objects
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listServiceOfferingServiceOfferingNodesTest() throws ApiException {
        String id = null;
        Integer limit = null;
        Integer offset = null;
        Object filter = null;
        Object sortBy = null;
        ServiceOfferingNodesCollection response = api.listServiceOfferingServiceOfferingNodes(id, limit, offset, filter, sortBy);
        // TODO: test validations
    }

    /**
     * List ServicePlans for ServiceOffering
     *
     * Returns an array of ServicePlan objects
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listServiceOfferingServicePlansTest() throws ApiException {
        String id = null;
        Integer limit = null;
        Integer offset = null;
        Object filter = null;
        Object sortBy = null;
        ServicePlansCollection response = api.listServiceOfferingServicePlans(id, limit, offset, filter, sortBy);
        // TODO: test validations
    }

    /**
     * List ServiceOfferings
     *
     * Returns an array of ServiceOffering objects
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listServiceOfferingsTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        Object filter = null;
        Object sortBy = null;
        ServiceOfferingsCollection response = api.listServiceOfferings(limit, offset, filter, sortBy);
        // TODO: test validations
    }

    /**
     * Order an existing ServiceOffering
     *
     * Returns a Task id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orderServiceOfferingTest() throws ApiException {
        String id = null;
        OrderParametersServiceOffering orderParametersServiceOffering = null;
        OrderServiceOffering200Response response = api.orderServiceOffering(id, orderParametersServiceOffering);
        // TODO: test validations
    }

    /**
     * Show an existing ServiceOffering
     *
     * Returns a ServiceOffering object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void showServiceOfferingTest() throws ApiException {
        String id = null;
        ServiceOffering response = api.showServiceOffering(id);
        // TODO: test validations
    }

}
