/*
 * Catalog Inventory
 * Catalog Inventory
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@redhat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ErrorNotFound;
import org.openapitools.client.model.ServiceInstancesCollection;
import org.openapitools.client.model.ServiceInventoriesCollection;
import org.openapitools.client.model.ServiceOfferingNodesCollection;
import org.openapitools.client.model.ServiceOfferingsCollection;
import org.openapitools.client.model.ServicePlansCollection;
import org.openapitools.client.model.Source;
import org.openapitools.client.model.SourcesCollection;
import org.openapitools.client.model.TasksCollection;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SourceApi
 */
@Disabled
public class SourceApiTest {

    private final SourceApi api = new SourceApi();

    /**
     * Incremental Refresh an existing Source
     *
     * Incremental Refresh a source object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void incrementalRefreshSourceTest() throws ApiException {
        String id = null;
        api.incrementalRefreshSource(id);
        // TODO: test validations
    }

    /**
     * List ServiceInstances for Source
     *
     * Returns an array of ServiceInstance objects
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSourceServiceInstancesTest() throws ApiException {
        String id = null;
        Integer limit = null;
        Integer offset = null;
        Object filter = null;
        Object sortBy = null;
        ServiceInstancesCollection response = api.listSourceServiceInstances(id, limit, offset, filter, sortBy);
        // TODO: test validations
    }

    /**
     * List ServiceInventories for Source
     *
     * Returns an array of ServiceInventory objects
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSourceServiceInventoriesTest() throws ApiException {
        String id = null;
        Integer limit = null;
        Integer offset = null;
        Object filter = null;
        Object sortBy = null;
        ServiceInventoriesCollection response = api.listSourceServiceInventories(id, limit, offset, filter, sortBy);
        // TODO: test validations
    }

    /**
     * List ServiceOfferingNodes for Source
     *
     * Returns an array of ServiceOfferingNode objects
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSourceServiceOfferingNodesTest() throws ApiException {
        String id = null;
        Integer limit = null;
        Integer offset = null;
        Object filter = null;
        Object sortBy = null;
        ServiceOfferingNodesCollection response = api.listSourceServiceOfferingNodes(id, limit, offset, filter, sortBy);
        // TODO: test validations
    }

    /**
     * List ServiceOfferings for Source
     *
     * Returns an array of ServiceOffering objects
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSourceServiceOfferingsTest() throws ApiException {
        String id = null;
        Integer limit = null;
        Integer offset = null;
        Object filter = null;
        Object sortBy = null;
        ServiceOfferingsCollection response = api.listSourceServiceOfferings(id, limit, offset, filter, sortBy);
        // TODO: test validations
    }

    /**
     * List ServicePlans for Source
     *
     * Returns an array of ServicePlan objects
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSourceServicePlansTest() throws ApiException {
        String id = null;
        Integer limit = null;
        Integer offset = null;
        Object filter = null;
        Object sortBy = null;
        ServicePlansCollection response = api.listSourceServicePlans(id, limit, offset, filter, sortBy);
        // TODO: test validations
    }

    /**
     * List Tasks for Source
     *
     * Returns an array of Task objects
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSourceTasksTest() throws ApiException {
        String id = null;
        Integer limit = null;
        Integer offset = null;
        Object filter = null;
        Object sortBy = null;
        TasksCollection response = api.listSourceTasks(id, limit, offset, filter, sortBy);
        // TODO: test validations
    }

    /**
     * List Sources
     *
     * Returns an array of Source objects
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSourcesTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        Object filter = null;
        Object sortBy = null;
        SourcesCollection response = api.listSources(limit, offset, filter, sortBy);
        // TODO: test validations
    }

    /**
     *  Refresh an existing Source
     *
     * Refresh a source object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void refreshSourceTest() throws ApiException {
        String id = null;
        api.refreshSource(id);
        // TODO: test validations
    }

    /**
     * Show an existing Source
     *
     * Returns a Source object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void showSourceTest() throws ApiException {
        String id = null;
        Source response = api.showSource(id);
        // TODO: test validations
    }

}
