/*
 * Catalog Inventory
 * Catalog Inventory
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@redhat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ServiceInstance
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:50.311906-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServiceInstance {
  public static final String SERIALIZED_NAME_ARCHIVED_AT = "archived_at";
  @SerializedName(SERIALIZED_NAME_ARCHIVED_AT)
  private OffsetDateTime archivedAt;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_EXTERNAL_URL = "external_url";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_URL)
  private String externalUrl;

  public static final String SERIALIZED_NAME_EXTRA = "extra";
  @SerializedName(SERIALIZED_NAME_EXTRA)
  private Object extra;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LAST_SEEN_AT = "last_seen_at";
  @SerializedName(SERIALIZED_NAME_LAST_SEEN_AT)
  private OffsetDateTime lastSeenAt;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_REFRESH_STATE_PART_ID = "refresh_state_part_id";
  @SerializedName(SERIALIZED_NAME_REFRESH_STATE_PART_ID)
  private String refreshStatePartId;

  public static final String SERIALIZED_NAME_ROOT_SERVICE_INSTANCE_ID = "root_service_instance_id";
  @SerializedName(SERIALIZED_NAME_ROOT_SERVICE_INSTANCE_ID)
  private String rootServiceInstanceId;

  public static final String SERIALIZED_NAME_SERVICE_INVENTORY_ID = "service_inventory_id";
  @SerializedName(SERIALIZED_NAME_SERVICE_INVENTORY_ID)
  private String serviceInventoryId;

  public static final String SERIALIZED_NAME_SERVICE_OFFERING_ID = "service_offering_id";
  @SerializedName(SERIALIZED_NAME_SERVICE_OFFERING_ID)
  private String serviceOfferingId;

  public static final String SERIALIZED_NAME_SERVICE_PLAN_ID = "service_plan_id";
  @SerializedName(SERIALIZED_NAME_SERVICE_PLAN_ID)
  private String servicePlanId;

  public static final String SERIALIZED_NAME_SOURCE_CREATED_AT = "source_created_at";
  @SerializedName(SERIALIZED_NAME_SOURCE_CREATED_AT)
  private OffsetDateTime sourceCreatedAt;

  public static final String SERIALIZED_NAME_SOURCE_DELETED_AT = "source_deleted_at";
  @SerializedName(SERIALIZED_NAME_SOURCE_DELETED_AT)
  private OffsetDateTime sourceDeletedAt;

  public static final String SERIALIZED_NAME_SOURCE_ID = "source_id";
  @SerializedName(SERIALIZED_NAME_SOURCE_ID)
  private String sourceId;

  public static final String SERIALIZED_NAME_SOURCE_REF = "source_ref";
  @SerializedName(SERIALIZED_NAME_SOURCE_REF)
  private UUID sourceRef;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public ServiceInstance() {
  }

  public ServiceInstance(
     OffsetDateTime archivedAt, 
     OffsetDateTime createdAt, 
     String externalUrl, 
     Object extra, 
     String id, 
     OffsetDateTime lastSeenAt, 
     String name, 
     String refreshStatePartId, 
     String rootServiceInstanceId, 
     String serviceInventoryId, 
     String serviceOfferingId, 
     String servicePlanId, 
     OffsetDateTime sourceCreatedAt, 
     OffsetDateTime sourceDeletedAt, 
     String sourceId, 
     UUID sourceRef, 
     OffsetDateTime updatedAt
  ) {
    this();
    this.archivedAt = archivedAt;
    this.createdAt = createdAt;
    this.externalUrl = externalUrl;
    this.extra = extra;
    this.id = id;
    this.lastSeenAt = lastSeenAt;
    this.name = name;
    this.refreshStatePartId = refreshStatePartId;
    this.rootServiceInstanceId = rootServiceInstanceId;
    this.serviceInventoryId = serviceInventoryId;
    this.serviceOfferingId = serviceOfferingId;
    this.servicePlanId = servicePlanId;
    this.sourceCreatedAt = sourceCreatedAt;
    this.sourceDeletedAt = sourceDeletedAt;
    this.sourceId = sourceId;
    this.sourceRef = sourceRef;
    this.updatedAt = updatedAt;
  }

  /**
   * Get archivedAt
   * @return archivedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getArchivedAt() {
    return archivedAt;
  }



  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }



  /**
   * Get externalUrl
   * @return externalUrl
   */
  @javax.annotation.Nullable
  public String getExternalUrl() {
    return externalUrl;
  }



  /**
   * Extra information about this object in JSON format
   * @return extra
   */
  @javax.annotation.Nullable
  public Object getExtra() {
    return extra;
  }



  /**
   * ID of the resource
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  /**
   * Get lastSeenAt
   * @return lastSeenAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastSeenAt() {
    return lastSeenAt;
  }



  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  /**
   * ID of the resource
   * @return refreshStatePartId
   */
  @javax.annotation.Nullable
  public String getRefreshStatePartId() {
    return refreshStatePartId;
  }



  /**
   * ID of the resource
   * @return rootServiceInstanceId
   */
  @javax.annotation.Nullable
  public String getRootServiceInstanceId() {
    return rootServiceInstanceId;
  }



  /**
   * ID of the resource
   * @return serviceInventoryId
   */
  @javax.annotation.Nullable
  public String getServiceInventoryId() {
    return serviceInventoryId;
  }



  /**
   * ID of the resource
   * @return serviceOfferingId
   */
  @javax.annotation.Nullable
  public String getServiceOfferingId() {
    return serviceOfferingId;
  }



  /**
   * ID of the resource
   * @return servicePlanId
   */
  @javax.annotation.Nullable
  public String getServicePlanId() {
    return servicePlanId;
  }



  /**
   * Get sourceCreatedAt
   * @return sourceCreatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSourceCreatedAt() {
    return sourceCreatedAt;
  }



  /**
   * Get sourceDeletedAt
   * @return sourceDeletedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSourceDeletedAt() {
    return sourceDeletedAt;
  }



  /**
   * ID of the resource
   * @return sourceId
   */
  @javax.annotation.Nullable
  public String getSourceId() {
    return sourceId;
  }



  /**
   * Get sourceRef
   * @return sourceRef
   */
  @javax.annotation.Nullable
  public UUID getSourceRef() {
    return sourceRef;
  }



  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceInstance serviceInstance = (ServiceInstance) o;
    return Objects.equals(this.archivedAt, serviceInstance.archivedAt) &&
        Objects.equals(this.createdAt, serviceInstance.createdAt) &&
        Objects.equals(this.externalUrl, serviceInstance.externalUrl) &&
        Objects.equals(this.extra, serviceInstance.extra) &&
        Objects.equals(this.id, serviceInstance.id) &&
        Objects.equals(this.lastSeenAt, serviceInstance.lastSeenAt) &&
        Objects.equals(this.name, serviceInstance.name) &&
        Objects.equals(this.refreshStatePartId, serviceInstance.refreshStatePartId) &&
        Objects.equals(this.rootServiceInstanceId, serviceInstance.rootServiceInstanceId) &&
        Objects.equals(this.serviceInventoryId, serviceInstance.serviceInventoryId) &&
        Objects.equals(this.serviceOfferingId, serviceInstance.serviceOfferingId) &&
        Objects.equals(this.servicePlanId, serviceInstance.servicePlanId) &&
        Objects.equals(this.sourceCreatedAt, serviceInstance.sourceCreatedAt) &&
        Objects.equals(this.sourceDeletedAt, serviceInstance.sourceDeletedAt) &&
        Objects.equals(this.sourceId, serviceInstance.sourceId) &&
        Objects.equals(this.sourceRef, serviceInstance.sourceRef) &&
        Objects.equals(this.updatedAt, serviceInstance.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(archivedAt, createdAt, externalUrl, extra, id, lastSeenAt, name, refreshStatePartId, rootServiceInstanceId, serviceInventoryId, serviceOfferingId, servicePlanId, sourceCreatedAt, sourceDeletedAt, sourceId, sourceRef, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceInstance {\n");
    sb.append("    archivedAt: ").append(toIndentedString(archivedAt)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    externalUrl: ").append(toIndentedString(externalUrl)).append("\n");
    sb.append("    extra: ").append(toIndentedString(extra)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastSeenAt: ").append(toIndentedString(lastSeenAt)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    refreshStatePartId: ").append(toIndentedString(refreshStatePartId)).append("\n");
    sb.append("    rootServiceInstanceId: ").append(toIndentedString(rootServiceInstanceId)).append("\n");
    sb.append("    serviceInventoryId: ").append(toIndentedString(serviceInventoryId)).append("\n");
    sb.append("    serviceOfferingId: ").append(toIndentedString(serviceOfferingId)).append("\n");
    sb.append("    servicePlanId: ").append(toIndentedString(servicePlanId)).append("\n");
    sb.append("    sourceCreatedAt: ").append(toIndentedString(sourceCreatedAt)).append("\n");
    sb.append("    sourceDeletedAt: ").append(toIndentedString(sourceDeletedAt)).append("\n");
    sb.append("    sourceId: ").append(toIndentedString(sourceId)).append("\n");
    sb.append("    sourceRef: ").append(toIndentedString(sourceRef)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("archived_at");
    openapiFields.add("created_at");
    openapiFields.add("external_url");
    openapiFields.add("extra");
    openapiFields.add("id");
    openapiFields.add("last_seen_at");
    openapiFields.add("name");
    openapiFields.add("refresh_state_part_id");
    openapiFields.add("root_service_instance_id");
    openapiFields.add("service_inventory_id");
    openapiFields.add("service_offering_id");
    openapiFields.add("service_plan_id");
    openapiFields.add("source_created_at");
    openapiFields.add("source_deleted_at");
    openapiFields.add("source_id");
    openapiFields.add("source_ref");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServiceInstance
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServiceInstance.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceInstance is not found in the empty JSON string", ServiceInstance.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServiceInstance.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServiceInstance` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("external_url") != null && !jsonObj.get("external_url").isJsonNull()) && !jsonObj.get("external_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_url").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("refresh_state_part_id") != null && !jsonObj.get("refresh_state_part_id").isJsonNull()) && !jsonObj.get("refresh_state_part_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refresh_state_part_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refresh_state_part_id").toString()));
      }
      if ((jsonObj.get("root_service_instance_id") != null && !jsonObj.get("root_service_instance_id").isJsonNull()) && !jsonObj.get("root_service_instance_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `root_service_instance_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("root_service_instance_id").toString()));
      }
      if ((jsonObj.get("service_inventory_id") != null && !jsonObj.get("service_inventory_id").isJsonNull()) && !jsonObj.get("service_inventory_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `service_inventory_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("service_inventory_id").toString()));
      }
      if ((jsonObj.get("service_offering_id") != null && !jsonObj.get("service_offering_id").isJsonNull()) && !jsonObj.get("service_offering_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `service_offering_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("service_offering_id").toString()));
      }
      if ((jsonObj.get("service_plan_id") != null && !jsonObj.get("service_plan_id").isJsonNull()) && !jsonObj.get("service_plan_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `service_plan_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("service_plan_id").toString()));
      }
      if ((jsonObj.get("source_id") != null && !jsonObj.get("source_id").isJsonNull()) && !jsonObj.get("source_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_id").toString()));
      }
      if ((jsonObj.get("source_ref") != null && !jsonObj.get("source_ref").isJsonNull()) && !jsonObj.get("source_ref").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_ref` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_ref").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServiceInstance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServiceInstance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServiceInstance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServiceInstance.class));

       return (TypeAdapter<T>) new TypeAdapter<ServiceInstance>() {
           @Override
           public void write(JsonWriter out, ServiceInstance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServiceInstance read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServiceInstance given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServiceInstance
   * @throws IOException if the JSON string is invalid with respect to ServiceInstance
   */
  public static ServiceInstance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceInstance.class);
  }

  /**
   * Convert an instance of ServiceInstance to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

