/*
 * Catalog Inventory
 * Catalog Inventory
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@redhat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ServiceCredentialType
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:50.311906-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServiceCredentialType {
  public static final String SERIALIZED_NAME_ARCHIVED_AT = "archived_at";
  @SerializedName(SERIALIZED_NAME_ARCHIVED_AT)
  private OffsetDateTime archivedAt;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_LAST_SEEN_AT = "last_seen_at";
  @SerializedName(SERIALIZED_NAME_LAST_SEEN_AT)
  private OffsetDateTime lastSeenAt;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NAMESPACE = "namespace";
  @SerializedName(SERIALIZED_NAME_NAMESPACE)
  private String namespace;

  public static final String SERIALIZED_NAME_REFRESH_STATE_PART_ID = "refresh_state_part_id";
  @SerializedName(SERIALIZED_NAME_REFRESH_STATE_PART_ID)
  private String refreshStatePartId;

  public static final String SERIALIZED_NAME_SOURCE_CREATED_AT = "source_created_at";
  @SerializedName(SERIALIZED_NAME_SOURCE_CREATED_AT)
  private OffsetDateTime sourceCreatedAt;

  public static final String SERIALIZED_NAME_SOURCE_DELETED_AT = "source_deleted_at";
  @SerializedName(SERIALIZED_NAME_SOURCE_DELETED_AT)
  private OffsetDateTime sourceDeletedAt;

  public static final String SERIALIZED_NAME_SOURCE_ID = "source_id";
  @SerializedName(SERIALIZED_NAME_SOURCE_ID)
  private String sourceId;

  public static final String SERIALIZED_NAME_SOURCE_REF = "source_ref";
  @SerializedName(SERIALIZED_NAME_SOURCE_REF)
  private String sourceRef;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public ServiceCredentialType() {
  }

  public ServiceCredentialType(
     OffsetDateTime archivedAt, 
     OffsetDateTime createdAt, 
     String description, 
     String id, 
     String kind, 
     OffsetDateTime lastSeenAt, 
     String name, 
     String namespace, 
     String refreshStatePartId, 
     OffsetDateTime sourceCreatedAt, 
     OffsetDateTime sourceDeletedAt, 
     String sourceId, 
     String sourceRef, 
     OffsetDateTime updatedAt
  ) {
    this();
    this.archivedAt = archivedAt;
    this.createdAt = createdAt;
    this.description = description;
    this.id = id;
    this.kind = kind;
    this.lastSeenAt = lastSeenAt;
    this.name = name;
    this.namespace = namespace;
    this.refreshStatePartId = refreshStatePartId;
    this.sourceCreatedAt = sourceCreatedAt;
    this.sourceDeletedAt = sourceDeletedAt;
    this.sourceId = sourceId;
    this.sourceRef = sourceRef;
    this.updatedAt = updatedAt;
  }

  /**
   * Get archivedAt
   * @return archivedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getArchivedAt() {
    return archivedAt;
  }



  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }



  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }



  /**
   * ID of the resource
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  /**
   * Get kind
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }



  /**
   * Get lastSeenAt
   * @return lastSeenAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastSeenAt() {
    return lastSeenAt;
  }



  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  /**
   * Get namespace
   * @return namespace
   */
  @javax.annotation.Nullable
  public String getNamespace() {
    return namespace;
  }



  /**
   * ID of the resource
   * @return refreshStatePartId
   */
  @javax.annotation.Nullable
  public String getRefreshStatePartId() {
    return refreshStatePartId;
  }



  /**
   * Get sourceCreatedAt
   * @return sourceCreatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSourceCreatedAt() {
    return sourceCreatedAt;
  }



  /**
   * Get sourceDeletedAt
   * @return sourceDeletedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSourceDeletedAt() {
    return sourceDeletedAt;
  }



  /**
   * ID of the resource
   * @return sourceId
   */
  @javax.annotation.Nullable
  public String getSourceId() {
    return sourceId;
  }



  /**
   * Get sourceRef
   * @return sourceRef
   */
  @javax.annotation.Nullable
  public String getSourceRef() {
    return sourceRef;
  }



  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceCredentialType serviceCredentialType = (ServiceCredentialType) o;
    return Objects.equals(this.archivedAt, serviceCredentialType.archivedAt) &&
        Objects.equals(this.createdAt, serviceCredentialType.createdAt) &&
        Objects.equals(this.description, serviceCredentialType.description) &&
        Objects.equals(this.id, serviceCredentialType.id) &&
        Objects.equals(this.kind, serviceCredentialType.kind) &&
        Objects.equals(this.lastSeenAt, serviceCredentialType.lastSeenAt) &&
        Objects.equals(this.name, serviceCredentialType.name) &&
        Objects.equals(this.namespace, serviceCredentialType.namespace) &&
        Objects.equals(this.refreshStatePartId, serviceCredentialType.refreshStatePartId) &&
        Objects.equals(this.sourceCreatedAt, serviceCredentialType.sourceCreatedAt) &&
        Objects.equals(this.sourceDeletedAt, serviceCredentialType.sourceDeletedAt) &&
        Objects.equals(this.sourceId, serviceCredentialType.sourceId) &&
        Objects.equals(this.sourceRef, serviceCredentialType.sourceRef) &&
        Objects.equals(this.updatedAt, serviceCredentialType.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(archivedAt, createdAt, description, id, kind, lastSeenAt, name, namespace, refreshStatePartId, sourceCreatedAt, sourceDeletedAt, sourceId, sourceRef, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceCredentialType {\n");
    sb.append("    archivedAt: ").append(toIndentedString(archivedAt)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    lastSeenAt: ").append(toIndentedString(lastSeenAt)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    refreshStatePartId: ").append(toIndentedString(refreshStatePartId)).append("\n");
    sb.append("    sourceCreatedAt: ").append(toIndentedString(sourceCreatedAt)).append("\n");
    sb.append("    sourceDeletedAt: ").append(toIndentedString(sourceDeletedAt)).append("\n");
    sb.append("    sourceId: ").append(toIndentedString(sourceId)).append("\n");
    sb.append("    sourceRef: ").append(toIndentedString(sourceRef)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("archived_at");
    openapiFields.add("created_at");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("kind");
    openapiFields.add("last_seen_at");
    openapiFields.add("name");
    openapiFields.add("namespace");
    openapiFields.add("refresh_state_part_id");
    openapiFields.add("source_created_at");
    openapiFields.add("source_deleted_at");
    openapiFields.add("source_id");
    openapiFields.add("source_ref");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServiceCredentialType
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServiceCredentialType.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceCredentialType is not found in the empty JSON string", ServiceCredentialType.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServiceCredentialType.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServiceCredentialType` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("namespace") != null && !jsonObj.get("namespace").isJsonNull()) && !jsonObj.get("namespace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `namespace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("namespace").toString()));
      }
      if ((jsonObj.get("refresh_state_part_id") != null && !jsonObj.get("refresh_state_part_id").isJsonNull()) && !jsonObj.get("refresh_state_part_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refresh_state_part_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refresh_state_part_id").toString()));
      }
      if ((jsonObj.get("source_id") != null && !jsonObj.get("source_id").isJsonNull()) && !jsonObj.get("source_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_id").toString()));
      }
      if ((jsonObj.get("source_ref") != null && !jsonObj.get("source_ref").isJsonNull()) && !jsonObj.get("source_ref").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_ref` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_ref").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServiceCredentialType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServiceCredentialType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServiceCredentialType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServiceCredentialType.class));

       return (TypeAdapter<T>) new TypeAdapter<ServiceCredentialType>() {
           @Override
           public void write(JsonWriter out, ServiceCredentialType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServiceCredentialType read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServiceCredentialType given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServiceCredentialType
   * @throws IOException if the JSON string is invalid with respect to ServiceCredentialType
   */
  public static ServiceCredentialType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceCredentialType.class);
  }

  /**
   * Convert an instance of ServiceCredentialType to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

