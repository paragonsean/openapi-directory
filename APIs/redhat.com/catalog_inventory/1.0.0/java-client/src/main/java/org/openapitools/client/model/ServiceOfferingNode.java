/*
 * Catalog Inventory
 * Catalog Inventory
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@redhat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ServiceOfferingNode
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:50.311906-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServiceOfferingNode {
  public static final String SERIALIZED_NAME_ARCHIVED_AT = "archived_at";
  @SerializedName(SERIALIZED_NAME_ARCHIVED_AT)
  private OffsetDateTime archivedAt;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_EXTRA = "extra";
  @SerializedName(SERIALIZED_NAME_EXTRA)
  private Object extra;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LAST_SEEN_AT = "last_seen_at";
  @SerializedName(SERIALIZED_NAME_LAST_SEEN_AT)
  private OffsetDateTime lastSeenAt;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_REFRESH_STATE_PART_ID = "refresh_state_part_id";
  @SerializedName(SERIALIZED_NAME_REFRESH_STATE_PART_ID)
  private String refreshStatePartId;

  public static final String SERIALIZED_NAME_ROOT_SERVICE_OFFERING_ID = "root_service_offering_id";
  @SerializedName(SERIALIZED_NAME_ROOT_SERVICE_OFFERING_ID)
  private String rootServiceOfferingId;

  public static final String SERIALIZED_NAME_SERVICE_INVENTORY_ID = "service_inventory_id";
  @SerializedName(SERIALIZED_NAME_SERVICE_INVENTORY_ID)
  private String serviceInventoryId;

  public static final String SERIALIZED_NAME_SERVICE_OFFERING_ID = "service_offering_id";
  @SerializedName(SERIALIZED_NAME_SERVICE_OFFERING_ID)
  private String serviceOfferingId;

  public static final String SERIALIZED_NAME_SOURCE_CREATED_AT = "source_created_at";
  @SerializedName(SERIALIZED_NAME_SOURCE_CREATED_AT)
  private OffsetDateTime sourceCreatedAt;

  public static final String SERIALIZED_NAME_SOURCE_ID = "source_id";
  @SerializedName(SERIALIZED_NAME_SOURCE_ID)
  private String sourceId;

  public static final String SERIALIZED_NAME_SOURCE_REF = "source_ref";
  @SerializedName(SERIALIZED_NAME_SOURCE_REF)
  private String sourceRef;

  public static final String SERIALIZED_NAME_SOURCE_UPDATED_AT = "source_updated_at";
  @SerializedName(SERIALIZED_NAME_SOURCE_UPDATED_AT)
  private OffsetDateTime sourceUpdatedAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public ServiceOfferingNode() {
  }

  public ServiceOfferingNode(
     OffsetDateTime archivedAt, 
     OffsetDateTime createdAt, 
     String id, 
     OffsetDateTime lastSeenAt, 
     String refreshStatePartId, 
     String rootServiceOfferingId, 
     String serviceInventoryId, 
     String serviceOfferingId, 
     String sourceId, 
     OffsetDateTime updatedAt
  ) {
    this();
    this.archivedAt = archivedAt;
    this.createdAt = createdAt;
    this.id = id;
    this.lastSeenAt = lastSeenAt;
    this.refreshStatePartId = refreshStatePartId;
    this.rootServiceOfferingId = rootServiceOfferingId;
    this.serviceInventoryId = serviceInventoryId;
    this.serviceOfferingId = serviceOfferingId;
    this.sourceId = sourceId;
    this.updatedAt = updatedAt;
  }

  /**
   * Get archivedAt
   * @return archivedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getArchivedAt() {
    return archivedAt;
  }



  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }



  public ServiceOfferingNode extra(Object extra) {
    this.extra = extra;
    return this;
  }

  /**
   * Get extra
   * @return extra
   */
  @javax.annotation.Nullable
  public Object getExtra() {
    return extra;
  }

  public void setExtra(Object extra) {
    this.extra = extra;
  }


  /**
   * ID of the resource
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  /**
   * Get lastSeenAt
   * @return lastSeenAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastSeenAt() {
    return lastSeenAt;
  }



  public ServiceOfferingNode name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  /**
   * ID of the resource
   * @return refreshStatePartId
   */
  @javax.annotation.Nullable
  public String getRefreshStatePartId() {
    return refreshStatePartId;
  }



  /**
   * ID of the resource
   * @return rootServiceOfferingId
   */
  @javax.annotation.Nullable
  public String getRootServiceOfferingId() {
    return rootServiceOfferingId;
  }



  /**
   * ID of the resource
   * @return serviceInventoryId
   */
  @javax.annotation.Nullable
  public String getServiceInventoryId() {
    return serviceInventoryId;
  }



  /**
   * ID of the resource
   * @return serviceOfferingId
   */
  @javax.annotation.Nullable
  public String getServiceOfferingId() {
    return serviceOfferingId;
  }



  public ServiceOfferingNode sourceCreatedAt(OffsetDateTime sourceCreatedAt) {
    this.sourceCreatedAt = sourceCreatedAt;
    return this;
  }

  /**
   * Get sourceCreatedAt
   * @return sourceCreatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSourceCreatedAt() {
    return sourceCreatedAt;
  }

  public void setSourceCreatedAt(OffsetDateTime sourceCreatedAt) {
    this.sourceCreatedAt = sourceCreatedAt;
  }


  /**
   * ID of the resource
   * @return sourceId
   */
  @javax.annotation.Nullable
  public String getSourceId() {
    return sourceId;
  }



  public ServiceOfferingNode sourceRef(String sourceRef) {
    this.sourceRef = sourceRef;
    return this;
  }

  /**
   * Get sourceRef
   * @return sourceRef
   */
  @javax.annotation.Nullable
  public String getSourceRef() {
    return sourceRef;
  }

  public void setSourceRef(String sourceRef) {
    this.sourceRef = sourceRef;
  }


  public ServiceOfferingNode sourceUpdatedAt(OffsetDateTime sourceUpdatedAt) {
    this.sourceUpdatedAt = sourceUpdatedAt;
    return this;
  }

  /**
   * Get sourceUpdatedAt
   * @return sourceUpdatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSourceUpdatedAt() {
    return sourceUpdatedAt;
  }

  public void setSourceUpdatedAt(OffsetDateTime sourceUpdatedAt) {
    this.sourceUpdatedAt = sourceUpdatedAt;
  }


  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceOfferingNode serviceOfferingNode = (ServiceOfferingNode) o;
    return Objects.equals(this.archivedAt, serviceOfferingNode.archivedAt) &&
        Objects.equals(this.createdAt, serviceOfferingNode.createdAt) &&
        Objects.equals(this.extra, serviceOfferingNode.extra) &&
        Objects.equals(this.id, serviceOfferingNode.id) &&
        Objects.equals(this.lastSeenAt, serviceOfferingNode.lastSeenAt) &&
        Objects.equals(this.name, serviceOfferingNode.name) &&
        Objects.equals(this.refreshStatePartId, serviceOfferingNode.refreshStatePartId) &&
        Objects.equals(this.rootServiceOfferingId, serviceOfferingNode.rootServiceOfferingId) &&
        Objects.equals(this.serviceInventoryId, serviceOfferingNode.serviceInventoryId) &&
        Objects.equals(this.serviceOfferingId, serviceOfferingNode.serviceOfferingId) &&
        Objects.equals(this.sourceCreatedAt, serviceOfferingNode.sourceCreatedAt) &&
        Objects.equals(this.sourceId, serviceOfferingNode.sourceId) &&
        Objects.equals(this.sourceRef, serviceOfferingNode.sourceRef) &&
        Objects.equals(this.sourceUpdatedAt, serviceOfferingNode.sourceUpdatedAt) &&
        Objects.equals(this.updatedAt, serviceOfferingNode.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(archivedAt, createdAt, extra, id, lastSeenAt, name, refreshStatePartId, rootServiceOfferingId, serviceInventoryId, serviceOfferingId, sourceCreatedAt, sourceId, sourceRef, sourceUpdatedAt, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceOfferingNode {\n");
    sb.append("    archivedAt: ").append(toIndentedString(archivedAt)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    extra: ").append(toIndentedString(extra)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastSeenAt: ").append(toIndentedString(lastSeenAt)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    refreshStatePartId: ").append(toIndentedString(refreshStatePartId)).append("\n");
    sb.append("    rootServiceOfferingId: ").append(toIndentedString(rootServiceOfferingId)).append("\n");
    sb.append("    serviceInventoryId: ").append(toIndentedString(serviceInventoryId)).append("\n");
    sb.append("    serviceOfferingId: ").append(toIndentedString(serviceOfferingId)).append("\n");
    sb.append("    sourceCreatedAt: ").append(toIndentedString(sourceCreatedAt)).append("\n");
    sb.append("    sourceId: ").append(toIndentedString(sourceId)).append("\n");
    sb.append("    sourceRef: ").append(toIndentedString(sourceRef)).append("\n");
    sb.append("    sourceUpdatedAt: ").append(toIndentedString(sourceUpdatedAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("archived_at");
    openapiFields.add("created_at");
    openapiFields.add("extra");
    openapiFields.add("id");
    openapiFields.add("last_seen_at");
    openapiFields.add("name");
    openapiFields.add("refresh_state_part_id");
    openapiFields.add("root_service_offering_id");
    openapiFields.add("service_inventory_id");
    openapiFields.add("service_offering_id");
    openapiFields.add("source_created_at");
    openapiFields.add("source_id");
    openapiFields.add("source_ref");
    openapiFields.add("source_updated_at");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServiceOfferingNode
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServiceOfferingNode.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceOfferingNode is not found in the empty JSON string", ServiceOfferingNode.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServiceOfferingNode.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServiceOfferingNode` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("refresh_state_part_id") != null && !jsonObj.get("refresh_state_part_id").isJsonNull()) && !jsonObj.get("refresh_state_part_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refresh_state_part_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refresh_state_part_id").toString()));
      }
      if ((jsonObj.get("root_service_offering_id") != null && !jsonObj.get("root_service_offering_id").isJsonNull()) && !jsonObj.get("root_service_offering_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `root_service_offering_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("root_service_offering_id").toString()));
      }
      if ((jsonObj.get("service_inventory_id") != null && !jsonObj.get("service_inventory_id").isJsonNull()) && !jsonObj.get("service_inventory_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `service_inventory_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("service_inventory_id").toString()));
      }
      if ((jsonObj.get("service_offering_id") != null && !jsonObj.get("service_offering_id").isJsonNull()) && !jsonObj.get("service_offering_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `service_offering_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("service_offering_id").toString()));
      }
      if ((jsonObj.get("source_id") != null && !jsonObj.get("source_id").isJsonNull()) && !jsonObj.get("source_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_id").toString()));
      }
      if ((jsonObj.get("source_ref") != null && !jsonObj.get("source_ref").isJsonNull()) && !jsonObj.get("source_ref").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_ref` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_ref").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServiceOfferingNode.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServiceOfferingNode' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServiceOfferingNode> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServiceOfferingNode.class));

       return (TypeAdapter<T>) new TypeAdapter<ServiceOfferingNode>() {
           @Override
           public void write(JsonWriter out, ServiceOfferingNode value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServiceOfferingNode read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServiceOfferingNode given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServiceOfferingNode
   * @throws IOException if the JSON string is invalid with respect to ServiceOfferingNode
   */
  public static ServiceOfferingNode fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceOfferingNode.class);
  }

  /**
   * Convert an instance of ServiceOfferingNode to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

