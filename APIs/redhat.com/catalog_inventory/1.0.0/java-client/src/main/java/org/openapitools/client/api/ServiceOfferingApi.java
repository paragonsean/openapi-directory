/*
 * Catalog Inventory
 * Catalog Inventory
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@redhat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AppliedInventoriesParametersServicePlan;
import org.openapitools.client.model.ErrorNotFound;
import org.openapitools.client.model.OrderParametersServiceOffering;
import org.openapitools.client.model.OrderServiceOffering200Response;
import org.openapitools.client.model.ServiceInstancesCollection;
import org.openapitools.client.model.ServiceOffering;
import org.openapitools.client.model.ServiceOfferingNodesCollection;
import org.openapitools.client.model.ServiceOfferingsCollection;
import org.openapitools.client.model.ServicePlansCollection;
import org.openapitools.client.model.Tag;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ServiceOfferingApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ServiceOfferingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ServiceOfferingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for appliedInventoriesTagsForServiceOffering
     * @param id ID of the resource (required)
     * @param appliedInventoriesParametersServicePlan Parameters defining input data for computing inventories (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an array of inventories tags for the computing result </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appliedInventoriesTagsForServiceOfferingCall(String id, AppliedInventoriesParametersServicePlan appliedInventoriesParametersServicePlan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = appliedInventoriesParametersServicePlan;

        // create path and map variables
        String localVarPath = "/service_offerings/{id}/applied_inventories_tags"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "UserSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appliedInventoriesTagsForServiceOfferingValidateBeforeCall(String id, AppliedInventoriesParametersServicePlan appliedInventoriesParametersServicePlan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling appliedInventoriesTagsForServiceOffering(Async)");
        }

        // verify the required parameter 'appliedInventoriesParametersServicePlan' is set
        if (appliedInventoriesParametersServicePlan == null) {
            throw new ApiException("Missing the required parameter 'appliedInventoriesParametersServicePlan' when calling appliedInventoriesTagsForServiceOffering(Async)");
        }

        return appliedInventoriesTagsForServiceOfferingCall(id, appliedInventoriesParametersServicePlan, _callback);

    }

    /**
     * Invokes computing of ServiceInventories tags for given ServiceOffering
     * Returns an array of inventories tags
     * @param id ID of the resource (required)
     * @param appliedInventoriesParametersServicePlan Parameters defining input data for computing inventories (required)
     * @return List&lt;Tag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an array of inventories tags for the computing result </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public List<Tag> appliedInventoriesTagsForServiceOffering(String id, AppliedInventoriesParametersServicePlan appliedInventoriesParametersServicePlan) throws ApiException {
        ApiResponse<List<Tag>> localVarResp = appliedInventoriesTagsForServiceOfferingWithHttpInfo(id, appliedInventoriesParametersServicePlan);
        return localVarResp.getData();
    }

    /**
     * Invokes computing of ServiceInventories tags for given ServiceOffering
     * Returns an array of inventories tags
     * @param id ID of the resource (required)
     * @param appliedInventoriesParametersServicePlan Parameters defining input data for computing inventories (required)
     * @return ApiResponse&lt;List&lt;Tag&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an array of inventories tags for the computing result </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Tag>> appliedInventoriesTagsForServiceOfferingWithHttpInfo(String id, AppliedInventoriesParametersServicePlan appliedInventoriesParametersServicePlan) throws ApiException {
        okhttp3.Call localVarCall = appliedInventoriesTagsForServiceOfferingValidateBeforeCall(id, appliedInventoriesParametersServicePlan, null);
        Type localVarReturnType = new TypeToken<List<Tag>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Invokes computing of ServiceInventories tags for given ServiceOffering (asynchronously)
     * Returns an array of inventories tags
     * @param id ID of the resource (required)
     * @param appliedInventoriesParametersServicePlan Parameters defining input data for computing inventories (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an array of inventories tags for the computing result </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appliedInventoriesTagsForServiceOfferingAsync(String id, AppliedInventoriesParametersServicePlan appliedInventoriesParametersServicePlan, final ApiCallback<List<Tag>> _callback) throws ApiException {

        okhttp3.Call localVarCall = appliedInventoriesTagsForServiceOfferingValidateBeforeCall(id, appliedInventoriesParametersServicePlan, _callback);
        Type localVarReturnType = new TypeToken<List<Tag>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listServiceOfferingServiceInstances
     * @param id ID of the resource (required)
     * @param limit The numbers of items to return per page. (optional, default to 100)
     * @param offset The number of items to skip before starting to collect the result set. (optional, default to 0)
     * @param filter Filter for querying collections. (optional)
     * @param sortBy The list of attribute and order to sort the result set by. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ServiceInstances collection </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listServiceOfferingServiceInstancesCall(String id, Integer limit, Integer offset, Object filter, Object sortBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/service_offerings/{id}/service_instances"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.freeFormParameterToPairs(filter));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.freeFormParameterToPairs(sortBy));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "UserSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listServiceOfferingServiceInstancesValidateBeforeCall(String id, Integer limit, Integer offset, Object filter, Object sortBy, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listServiceOfferingServiceInstances(Async)");
        }

        return listServiceOfferingServiceInstancesCall(id, limit, offset, filter, sortBy, _callback);

    }

    /**
     * List ServiceInstances for ServiceOffering
     * Returns an array of ServiceInstance objects
     * @param id ID of the resource (required)
     * @param limit The numbers of items to return per page. (optional, default to 100)
     * @param offset The number of items to skip before starting to collect the result set. (optional, default to 0)
     * @param filter Filter for querying collections. (optional)
     * @param sortBy The list of attribute and order to sort the result set by. (optional)
     * @return ServiceInstancesCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ServiceInstances collection </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ServiceInstancesCollection listServiceOfferingServiceInstances(String id, Integer limit, Integer offset, Object filter, Object sortBy) throws ApiException {
        ApiResponse<ServiceInstancesCollection> localVarResp = listServiceOfferingServiceInstancesWithHttpInfo(id, limit, offset, filter, sortBy);
        return localVarResp.getData();
    }

    /**
     * List ServiceInstances for ServiceOffering
     * Returns an array of ServiceInstance objects
     * @param id ID of the resource (required)
     * @param limit The numbers of items to return per page. (optional, default to 100)
     * @param offset The number of items to skip before starting to collect the result set. (optional, default to 0)
     * @param filter Filter for querying collections. (optional)
     * @param sortBy The list of attribute and order to sort the result set by. (optional)
     * @return ApiResponse&lt;ServiceInstancesCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ServiceInstances collection </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceInstancesCollection> listServiceOfferingServiceInstancesWithHttpInfo(String id, Integer limit, Integer offset, Object filter, Object sortBy) throws ApiException {
        okhttp3.Call localVarCall = listServiceOfferingServiceInstancesValidateBeforeCall(id, limit, offset, filter, sortBy, null);
        Type localVarReturnType = new TypeToken<ServiceInstancesCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List ServiceInstances for ServiceOffering (asynchronously)
     * Returns an array of ServiceInstance objects
     * @param id ID of the resource (required)
     * @param limit The numbers of items to return per page. (optional, default to 100)
     * @param offset The number of items to skip before starting to collect the result set. (optional, default to 0)
     * @param filter Filter for querying collections. (optional)
     * @param sortBy The list of attribute and order to sort the result set by. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ServiceInstances collection </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listServiceOfferingServiceInstancesAsync(String id, Integer limit, Integer offset, Object filter, Object sortBy, final ApiCallback<ServiceInstancesCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = listServiceOfferingServiceInstancesValidateBeforeCall(id, limit, offset, filter, sortBy, _callback);
        Type localVarReturnType = new TypeToken<ServiceInstancesCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listServiceOfferingServiceOfferingNodes
     * @param id ID of the resource (required)
     * @param limit The numbers of items to return per page. (optional, default to 100)
     * @param offset The number of items to skip before starting to collect the result set. (optional, default to 0)
     * @param filter Filter for querying collections. (optional)
     * @param sortBy The list of attribute and order to sort the result set by. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ServiceOfferingNodes collection </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listServiceOfferingServiceOfferingNodesCall(String id, Integer limit, Integer offset, Object filter, Object sortBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/service_offerings/{id}/service_offering_nodes"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.freeFormParameterToPairs(filter));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.freeFormParameterToPairs(sortBy));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "UserSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listServiceOfferingServiceOfferingNodesValidateBeforeCall(String id, Integer limit, Integer offset, Object filter, Object sortBy, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listServiceOfferingServiceOfferingNodes(Async)");
        }

        return listServiceOfferingServiceOfferingNodesCall(id, limit, offset, filter, sortBy, _callback);

    }

    /**
     * List ServiceOfferingNodes for ServiceOffering
     * Returns an array of ServiceOfferingNode objects
     * @param id ID of the resource (required)
     * @param limit The numbers of items to return per page. (optional, default to 100)
     * @param offset The number of items to skip before starting to collect the result set. (optional, default to 0)
     * @param filter Filter for querying collections. (optional)
     * @param sortBy The list of attribute and order to sort the result set by. (optional)
     * @return ServiceOfferingNodesCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ServiceOfferingNodes collection </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ServiceOfferingNodesCollection listServiceOfferingServiceOfferingNodes(String id, Integer limit, Integer offset, Object filter, Object sortBy) throws ApiException {
        ApiResponse<ServiceOfferingNodesCollection> localVarResp = listServiceOfferingServiceOfferingNodesWithHttpInfo(id, limit, offset, filter, sortBy);
        return localVarResp.getData();
    }

    /**
     * List ServiceOfferingNodes for ServiceOffering
     * Returns an array of ServiceOfferingNode objects
     * @param id ID of the resource (required)
     * @param limit The numbers of items to return per page. (optional, default to 100)
     * @param offset The number of items to skip before starting to collect the result set. (optional, default to 0)
     * @param filter Filter for querying collections. (optional)
     * @param sortBy The list of attribute and order to sort the result set by. (optional)
     * @return ApiResponse&lt;ServiceOfferingNodesCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ServiceOfferingNodes collection </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceOfferingNodesCollection> listServiceOfferingServiceOfferingNodesWithHttpInfo(String id, Integer limit, Integer offset, Object filter, Object sortBy) throws ApiException {
        okhttp3.Call localVarCall = listServiceOfferingServiceOfferingNodesValidateBeforeCall(id, limit, offset, filter, sortBy, null);
        Type localVarReturnType = new TypeToken<ServiceOfferingNodesCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List ServiceOfferingNodes for ServiceOffering (asynchronously)
     * Returns an array of ServiceOfferingNode objects
     * @param id ID of the resource (required)
     * @param limit The numbers of items to return per page. (optional, default to 100)
     * @param offset The number of items to skip before starting to collect the result set. (optional, default to 0)
     * @param filter Filter for querying collections. (optional)
     * @param sortBy The list of attribute and order to sort the result set by. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ServiceOfferingNodes collection </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listServiceOfferingServiceOfferingNodesAsync(String id, Integer limit, Integer offset, Object filter, Object sortBy, final ApiCallback<ServiceOfferingNodesCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = listServiceOfferingServiceOfferingNodesValidateBeforeCall(id, limit, offset, filter, sortBy, _callback);
        Type localVarReturnType = new TypeToken<ServiceOfferingNodesCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listServiceOfferingServicePlans
     * @param id ID of the resource (required)
     * @param limit The numbers of items to return per page. (optional, default to 100)
     * @param offset The number of items to skip before starting to collect the result set. (optional, default to 0)
     * @param filter Filter for querying collections. (optional)
     * @param sortBy The list of attribute and order to sort the result set by. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ServicePlans collection </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listServiceOfferingServicePlansCall(String id, Integer limit, Integer offset, Object filter, Object sortBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/service_offerings/{id}/service_plans"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.freeFormParameterToPairs(filter));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.freeFormParameterToPairs(sortBy));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "UserSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listServiceOfferingServicePlansValidateBeforeCall(String id, Integer limit, Integer offset, Object filter, Object sortBy, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listServiceOfferingServicePlans(Async)");
        }

        return listServiceOfferingServicePlansCall(id, limit, offset, filter, sortBy, _callback);

    }

    /**
     * List ServicePlans for ServiceOffering
     * Returns an array of ServicePlan objects
     * @param id ID of the resource (required)
     * @param limit The numbers of items to return per page. (optional, default to 100)
     * @param offset The number of items to skip before starting to collect the result set. (optional, default to 0)
     * @param filter Filter for querying collections. (optional)
     * @param sortBy The list of attribute and order to sort the result set by. (optional)
     * @return ServicePlansCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ServicePlans collection </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ServicePlansCollection listServiceOfferingServicePlans(String id, Integer limit, Integer offset, Object filter, Object sortBy) throws ApiException {
        ApiResponse<ServicePlansCollection> localVarResp = listServiceOfferingServicePlansWithHttpInfo(id, limit, offset, filter, sortBy);
        return localVarResp.getData();
    }

    /**
     * List ServicePlans for ServiceOffering
     * Returns an array of ServicePlan objects
     * @param id ID of the resource (required)
     * @param limit The numbers of items to return per page. (optional, default to 100)
     * @param offset The number of items to skip before starting to collect the result set. (optional, default to 0)
     * @param filter Filter for querying collections. (optional)
     * @param sortBy The list of attribute and order to sort the result set by. (optional)
     * @return ApiResponse&lt;ServicePlansCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ServicePlans collection </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServicePlansCollection> listServiceOfferingServicePlansWithHttpInfo(String id, Integer limit, Integer offset, Object filter, Object sortBy) throws ApiException {
        okhttp3.Call localVarCall = listServiceOfferingServicePlansValidateBeforeCall(id, limit, offset, filter, sortBy, null);
        Type localVarReturnType = new TypeToken<ServicePlansCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List ServicePlans for ServiceOffering (asynchronously)
     * Returns an array of ServicePlan objects
     * @param id ID of the resource (required)
     * @param limit The numbers of items to return per page. (optional, default to 100)
     * @param offset The number of items to skip before starting to collect the result set. (optional, default to 0)
     * @param filter Filter for querying collections. (optional)
     * @param sortBy The list of attribute and order to sort the result set by. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ServicePlans collection </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listServiceOfferingServicePlansAsync(String id, Integer limit, Integer offset, Object filter, Object sortBy, final ApiCallback<ServicePlansCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = listServiceOfferingServicePlansValidateBeforeCall(id, limit, offset, filter, sortBy, _callback);
        Type localVarReturnType = new TypeToken<ServicePlansCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listServiceOfferings
     * @param limit The numbers of items to return per page. (optional, default to 100)
     * @param offset The number of items to skip before starting to collect the result set. (optional, default to 0)
     * @param filter Filter for querying collections. (optional)
     * @param sortBy The list of attribute and order to sort the result set by. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ServiceOfferings collection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listServiceOfferingsCall(Integer limit, Integer offset, Object filter, Object sortBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/service_offerings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.freeFormParameterToPairs(filter));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.freeFormParameterToPairs(sortBy));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "UserSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listServiceOfferingsValidateBeforeCall(Integer limit, Integer offset, Object filter, Object sortBy, final ApiCallback _callback) throws ApiException {
        return listServiceOfferingsCall(limit, offset, filter, sortBy, _callback);

    }

    /**
     * List ServiceOfferings
     * Returns an array of ServiceOffering objects
     * @param limit The numbers of items to return per page. (optional, default to 100)
     * @param offset The number of items to skip before starting to collect the result set. (optional, default to 0)
     * @param filter Filter for querying collections. (optional)
     * @param sortBy The list of attribute and order to sort the result set by. (optional)
     * @return ServiceOfferingsCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ServiceOfferings collection </td><td>  -  </td></tr>
     </table>
     */
    public ServiceOfferingsCollection listServiceOfferings(Integer limit, Integer offset, Object filter, Object sortBy) throws ApiException {
        ApiResponse<ServiceOfferingsCollection> localVarResp = listServiceOfferingsWithHttpInfo(limit, offset, filter, sortBy);
        return localVarResp.getData();
    }

    /**
     * List ServiceOfferings
     * Returns an array of ServiceOffering objects
     * @param limit The numbers of items to return per page. (optional, default to 100)
     * @param offset The number of items to skip before starting to collect the result set. (optional, default to 0)
     * @param filter Filter for querying collections. (optional)
     * @param sortBy The list of attribute and order to sort the result set by. (optional)
     * @return ApiResponse&lt;ServiceOfferingsCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ServiceOfferings collection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceOfferingsCollection> listServiceOfferingsWithHttpInfo(Integer limit, Integer offset, Object filter, Object sortBy) throws ApiException {
        okhttp3.Call localVarCall = listServiceOfferingsValidateBeforeCall(limit, offset, filter, sortBy, null);
        Type localVarReturnType = new TypeToken<ServiceOfferingsCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List ServiceOfferings (asynchronously)
     * Returns an array of ServiceOffering objects
     * @param limit The numbers of items to return per page. (optional, default to 100)
     * @param offset The number of items to skip before starting to collect the result set. (optional, default to 0)
     * @param filter Filter for querying collections. (optional)
     * @param sortBy The list of attribute and order to sort the result set by. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ServiceOfferings collection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listServiceOfferingsAsync(Integer limit, Integer offset, Object filter, Object sortBy, final ApiCallback<ServiceOfferingsCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = listServiceOfferingsValidateBeforeCall(limit, offset, filter, sortBy, _callback);
        Type localVarReturnType = new TypeToken<ServiceOfferingsCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orderServiceOffering
     * @param id ID of the resource (required)
     * @param orderParametersServiceOffering Order parameters defining the service and provider control (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a task ID for the order </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderServiceOfferingCall(String id, OrderParametersServiceOffering orderParametersServiceOffering, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = orderParametersServiceOffering;

        // create path and map variables
        String localVarPath = "/service_offerings/{id}/order"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "UserSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orderServiceOfferingValidateBeforeCall(String id, OrderParametersServiceOffering orderParametersServiceOffering, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling orderServiceOffering(Async)");
        }

        // verify the required parameter 'orderParametersServiceOffering' is set
        if (orderParametersServiceOffering == null) {
            throw new ApiException("Missing the required parameter 'orderParametersServiceOffering' when calling orderServiceOffering(Async)");
        }

        return orderServiceOfferingCall(id, orderParametersServiceOffering, _callback);

    }

    /**
     * Order an existing ServiceOffering
     * Returns a Task id
     * @param id ID of the resource (required)
     * @param orderParametersServiceOffering Order parameters defining the service and provider control (required)
     * @return OrderServiceOffering200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a task ID for the order </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public OrderServiceOffering200Response orderServiceOffering(String id, OrderParametersServiceOffering orderParametersServiceOffering) throws ApiException {
        ApiResponse<OrderServiceOffering200Response> localVarResp = orderServiceOfferingWithHttpInfo(id, orderParametersServiceOffering);
        return localVarResp.getData();
    }

    /**
     * Order an existing ServiceOffering
     * Returns a Task id
     * @param id ID of the resource (required)
     * @param orderParametersServiceOffering Order parameters defining the service and provider control (required)
     * @return ApiResponse&lt;OrderServiceOffering200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a task ID for the order </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrderServiceOffering200Response> orderServiceOfferingWithHttpInfo(String id, OrderParametersServiceOffering orderParametersServiceOffering) throws ApiException {
        okhttp3.Call localVarCall = orderServiceOfferingValidateBeforeCall(id, orderParametersServiceOffering, null);
        Type localVarReturnType = new TypeToken<OrderServiceOffering200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Order an existing ServiceOffering (asynchronously)
     * Returns a Task id
     * @param id ID of the resource (required)
     * @param orderParametersServiceOffering Order parameters defining the service and provider control (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a task ID for the order </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderServiceOfferingAsync(String id, OrderParametersServiceOffering orderParametersServiceOffering, final ApiCallback<OrderServiceOffering200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = orderServiceOfferingValidateBeforeCall(id, orderParametersServiceOffering, _callback);
        Type localVarReturnType = new TypeToken<OrderServiceOffering200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showServiceOffering
     * @param id ID of the resource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ServiceOffering info </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showServiceOfferingCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/service_offerings/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "UserSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showServiceOfferingValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling showServiceOffering(Async)");
        }

        return showServiceOfferingCall(id, _callback);

    }

    /**
     * Show an existing ServiceOffering
     * Returns a ServiceOffering object
     * @param id ID of the resource (required)
     * @return ServiceOffering
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ServiceOffering info </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ServiceOffering showServiceOffering(String id) throws ApiException {
        ApiResponse<ServiceOffering> localVarResp = showServiceOfferingWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Show an existing ServiceOffering
     * Returns a ServiceOffering object
     * @param id ID of the resource (required)
     * @return ApiResponse&lt;ServiceOffering&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ServiceOffering info </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceOffering> showServiceOfferingWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = showServiceOfferingValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ServiceOffering>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Show an existing ServiceOffering (asynchronously)
     * Returns a ServiceOffering object
     * @param id ID of the resource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ServiceOffering info </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showServiceOfferingAsync(String id, final ApiCallback<ServiceOffering> _callback) throws ApiException {

        okhttp3.Call localVarCall = showServiceOfferingValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ServiceOffering>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
