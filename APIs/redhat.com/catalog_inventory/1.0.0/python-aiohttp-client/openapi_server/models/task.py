# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class Task(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, archived_at: datetime=None, child_task_id: str=None, completed_at: datetime=None, controller_message_id: str=None, created_at: datetime=None, id: str=None, input: object=None, message: str=None, name: str=None, output: object=None, owner: str=None, source_id: str=None, state: str=None, status: str=None, target_source_ref: str=None, target_type: str=None, type: str=None, updated_at: datetime=None):
        """Task - a model defined in OpenAPI

        :param archived_at: The archived_at of this Task.
        :param child_task_id: The child_task_id of this Task.
        :param completed_at: The completed_at of this Task.
        :param controller_message_id: The controller_message_id of this Task.
        :param created_at: The created_at of this Task.
        :param id: The id of this Task.
        :param input: The input of this Task.
        :param message: The message of this Task.
        :param name: The name of this Task.
        :param output: The output of this Task.
        :param owner: The owner of this Task.
        :param source_id: The source_id of this Task.
        :param state: The state of this Task.
        :param status: The status of this Task.
        :param target_source_ref: The target_source_ref of this Task.
        :param target_type: The target_type of this Task.
        :param type: The type of this Task.
        :param updated_at: The updated_at of this Task.
        """
        self.openapi_types = {
            'archived_at': datetime,
            'child_task_id': str,
            'completed_at': datetime,
            'controller_message_id': str,
            'created_at': datetime,
            'id': str,
            'input': object,
            'message': str,
            'name': str,
            'output': object,
            'owner': str,
            'source_id': str,
            'state': str,
            'status': str,
            'target_source_ref': str,
            'target_type': str,
            'type': str,
            'updated_at': datetime
        }

        self.attribute_map = {
            'archived_at': 'archived_at',
            'child_task_id': 'child_task_id',
            'completed_at': 'completed_at',
            'controller_message_id': 'controller_message_id',
            'created_at': 'created_at',
            'id': 'id',
            'input': 'input',
            'message': 'message',
            'name': 'name',
            'output': 'output',
            'owner': 'owner',
            'source_id': 'source_id',
            'state': 'state',
            'status': 'status',
            'target_source_ref': 'target_source_ref',
            'target_type': 'target_type',
            'type': 'type',
            'updated_at': 'updated_at'
        }

        self._archived_at = archived_at
        self._child_task_id = child_task_id
        self._completed_at = completed_at
        self._controller_message_id = controller_message_id
        self._created_at = created_at
        self._id = id
        self._input = input
        self._message = message
        self._name = name
        self._output = output
        self._owner = owner
        self._source_id = source_id
        self._state = state
        self._status = status
        self._target_source_ref = target_source_ref
        self._target_type = target_type
        self._type = type
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Task':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Task of this Task.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def archived_at(self):
        """Gets the archived_at of this Task.


        :return: The archived_at of this Task.
        :rtype: datetime
        """
        return self._archived_at

    @archived_at.setter
    def archived_at(self, archived_at):
        """Sets the archived_at of this Task.


        :param archived_at: The archived_at of this Task.
        :type archived_at: datetime
        """

        self._archived_at = archived_at

    @property
    def child_task_id(self):
        """Gets the child_task_id of this Task.


        :return: The child_task_id of this Task.
        :rtype: str
        """
        return self._child_task_id

    @child_task_id.setter
    def child_task_id(self, child_task_id):
        """Sets the child_task_id of this Task.


        :param child_task_id: The child_task_id of this Task.
        :type child_task_id: str
        """

        self._child_task_id = child_task_id

    @property
    def completed_at(self):
        """Gets the completed_at of this Task.


        :return: The completed_at of this Task.
        :rtype: datetime
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at):
        """Sets the completed_at of this Task.


        :param completed_at: The completed_at of this Task.
        :type completed_at: datetime
        """

        self._completed_at = completed_at

    @property
    def controller_message_id(self):
        """Gets the controller_message_id of this Task.


        :return: The controller_message_id of this Task.
        :rtype: str
        """
        return self._controller_message_id

    @controller_message_id.setter
    def controller_message_id(self, controller_message_id):
        """Sets the controller_message_id of this Task.


        :param controller_message_id: The controller_message_id of this Task.
        :type controller_message_id: str
        """

        self._controller_message_id = controller_message_id

    @property
    def created_at(self):
        """Gets the created_at of this Task.


        :return: The created_at of this Task.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Task.


        :param created_at: The created_at of this Task.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this Task.

        UUID of task

        :return: The id of this Task.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Task.

        UUID of task

        :param id: The id of this Task.
        :type id: str
        """

        self._id = id

    @property
    def input(self):
        """Gets the input of this Task.


        :return: The input of this Task.
        :rtype: object
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this Task.


        :param input: The input of this Task.
        :type input: object
        """

        self._input = input

    @property
    def message(self):
        """Gets the message of this Task.


        :return: The message of this Task.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Task.


        :param message: The message of this Task.
        :type message: str
        """

        self._message = message

    @property
    def name(self):
        """Gets the name of this Task.


        :return: The name of this Task.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Task.


        :param name: The name of this Task.
        :type name: str
        """

        self._name = name

    @property
    def output(self):
        """Gets the output of this Task.


        :return: The output of this Task.
        :rtype: object
        """
        return self._output

    @output.setter
    def output(self, output):
        """Sets the output of this Task.


        :param output: The output of this Task.
        :type output: object
        """

        self._output = output

    @property
    def owner(self):
        """Gets the owner of this Task.


        :return: The owner of this Task.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Task.


        :param owner: The owner of this Task.
        :type owner: str
        """

        self._owner = owner

    @property
    def source_id(self):
        """Gets the source_id of this Task.

        ID of the resource

        :return: The source_id of this Task.
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this Task.

        ID of the resource

        :param source_id: The source_id of this Task.
        :type source_id: str
        """
        if source_id is not None and not re.search(r'^\d+$', source_id):
            raise ValueError("Invalid value for `source_id`, must be a follow pattern or equal to `/^\d+$/`")

        self._source_id = source_id

    @property
    def state(self):
        """Gets the state of this Task.


        :return: The state of this Task.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Task.


        :param state: The state of this Task.
        :type state: str
        """
        allowed_values = ["pending", "queued", "running", "timedout", "completed"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def status(self):
        """Gets the status of this Task.


        :return: The status of this Task.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Task.


        :param status: The status of this Task.
        :type status: str
        """
        allowed_values = ["ok", "warn", "unchanged", "error"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def target_source_ref(self):
        """Gets the target_source_ref of this Task.


        :return: The target_source_ref of this Task.
        :rtype: str
        """
        return self._target_source_ref

    @target_source_ref.setter
    def target_source_ref(self, target_source_ref):
        """Sets the target_source_ref of this Task.


        :param target_source_ref: The target_source_ref of this Task.
        :type target_source_ref: str
        """

        self._target_source_ref = target_source_ref

    @property
    def target_type(self):
        """Gets the target_type of this Task.


        :return: The target_type of this Task.
        :rtype: str
        """
        return self._target_type

    @target_type.setter
    def target_type(self, target_type):
        """Sets the target_type of this Task.


        :param target_type: The target_type of this Task.
        :type target_type: str
        """

        self._target_type = target_type

    @property
    def type(self):
        """Gets the type of this Task.


        :return: The type of this Task.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Task.


        :param type: The type of this Task.
        :type type: str
        """

        self._type = type

    @property
    def updated_at(self):
        """Gets the updated_at of this Task.


        :return: The updated_at of this Task.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Task.


        :param updated_at: The updated_at of this Task.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
