# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GraphQLRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, operation_name: str='', query: str='{}', variables: object=None):
        """GraphQLRequest - a model defined in OpenAPI

        :param operation_name: The operation_name of this GraphQLRequest.
        :param query: The query of this GraphQLRequest.
        :param variables: The variables of this GraphQLRequest.
        """
        self.openapi_types = {
            'operation_name': str,
            'query': str,
            'variables': object
        }

        self.attribute_map = {
            'operation_name': 'operationName',
            'query': 'query',
            'variables': 'variables'
        }

        self._operation_name = operation_name
        self._query = query
        self._variables = variables

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GraphQLRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GraphQLRequest of this GraphQLRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def operation_name(self):
        """Gets the operation_name of this GraphQLRequest.

        If the Query contains several named operations, the operationName controls which one should be executed

        :return: The operation_name of this GraphQLRequest.
        :rtype: str
        """
        return self._operation_name

    @operation_name.setter
    def operation_name(self, operation_name):
        """Sets the operation_name of this GraphQLRequest.

        If the Query contains several named operations, the operationName controls which one should be executed

        :param operation_name: The operation_name of this GraphQLRequest.
        :type operation_name: str
        """

        self._operation_name = operation_name

    @property
    def query(self):
        """Gets the query of this GraphQLRequest.

        The GraphQL query

        :return: The query of this GraphQLRequest.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this GraphQLRequest.

        The GraphQL query

        :param query: The query of this GraphQLRequest.
        :type query: str
        """
        if query is None:
            raise ValueError("Invalid value for `query`, must not be `None`")

        self._query = query

    @property
    def variables(self):
        """Gets the variables of this GraphQLRequest.

        Optional Query variables

        :return: The variables of this GraphQLRequest.
        :rtype: object
        """
        return self._variables

    @variables.setter
    def variables(self, variables):
        """Sets the variables of this GraphQLRequest.

        Optional Query variables

        :param variables: The variables of this GraphQLRequest.
        :type variables: object
        """

        self._variables = variables
