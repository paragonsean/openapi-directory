# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class ServiceOfferingNode(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, archived_at: datetime=None, created_at: datetime=None, extra: object=None, id: str=None, last_seen_at: datetime=None, name: str=None, refresh_state_part_id: str=None, root_service_offering_id: str=None, service_inventory_id: str=None, service_offering_id: str=None, source_created_at: datetime=None, source_id: str=None, source_ref: str=None, source_updated_at: datetime=None, updated_at: datetime=None):
        """ServiceOfferingNode - a model defined in OpenAPI

        :param archived_at: The archived_at of this ServiceOfferingNode.
        :param created_at: The created_at of this ServiceOfferingNode.
        :param extra: The extra of this ServiceOfferingNode.
        :param id: The id of this ServiceOfferingNode.
        :param last_seen_at: The last_seen_at of this ServiceOfferingNode.
        :param name: The name of this ServiceOfferingNode.
        :param refresh_state_part_id: The refresh_state_part_id of this ServiceOfferingNode.
        :param root_service_offering_id: The root_service_offering_id of this ServiceOfferingNode.
        :param service_inventory_id: The service_inventory_id of this ServiceOfferingNode.
        :param service_offering_id: The service_offering_id of this ServiceOfferingNode.
        :param source_created_at: The source_created_at of this ServiceOfferingNode.
        :param source_id: The source_id of this ServiceOfferingNode.
        :param source_ref: The source_ref of this ServiceOfferingNode.
        :param source_updated_at: The source_updated_at of this ServiceOfferingNode.
        :param updated_at: The updated_at of this ServiceOfferingNode.
        """
        self.openapi_types = {
            'archived_at': datetime,
            'created_at': datetime,
            'extra': object,
            'id': str,
            'last_seen_at': datetime,
            'name': str,
            'refresh_state_part_id': str,
            'root_service_offering_id': str,
            'service_inventory_id': str,
            'service_offering_id': str,
            'source_created_at': datetime,
            'source_id': str,
            'source_ref': str,
            'source_updated_at': datetime,
            'updated_at': datetime
        }

        self.attribute_map = {
            'archived_at': 'archived_at',
            'created_at': 'created_at',
            'extra': 'extra',
            'id': 'id',
            'last_seen_at': 'last_seen_at',
            'name': 'name',
            'refresh_state_part_id': 'refresh_state_part_id',
            'root_service_offering_id': 'root_service_offering_id',
            'service_inventory_id': 'service_inventory_id',
            'service_offering_id': 'service_offering_id',
            'source_created_at': 'source_created_at',
            'source_id': 'source_id',
            'source_ref': 'source_ref',
            'source_updated_at': 'source_updated_at',
            'updated_at': 'updated_at'
        }

        self._archived_at = archived_at
        self._created_at = created_at
        self._extra = extra
        self._id = id
        self._last_seen_at = last_seen_at
        self._name = name
        self._refresh_state_part_id = refresh_state_part_id
        self._root_service_offering_id = root_service_offering_id
        self._service_inventory_id = service_inventory_id
        self._service_offering_id = service_offering_id
        self._source_created_at = source_created_at
        self._source_id = source_id
        self._source_ref = source_ref
        self._source_updated_at = source_updated_at
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceOfferingNode':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceOfferingNode of this ServiceOfferingNode.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def archived_at(self):
        """Gets the archived_at of this ServiceOfferingNode.


        :return: The archived_at of this ServiceOfferingNode.
        :rtype: datetime
        """
        return self._archived_at

    @archived_at.setter
    def archived_at(self, archived_at):
        """Sets the archived_at of this ServiceOfferingNode.


        :param archived_at: The archived_at of this ServiceOfferingNode.
        :type archived_at: datetime
        """

        self._archived_at = archived_at

    @property
    def created_at(self):
        """Gets the created_at of this ServiceOfferingNode.


        :return: The created_at of this ServiceOfferingNode.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ServiceOfferingNode.


        :param created_at: The created_at of this ServiceOfferingNode.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def extra(self):
        """Gets the extra of this ServiceOfferingNode.


        :return: The extra of this ServiceOfferingNode.
        :rtype: object
        """
        return self._extra

    @extra.setter
    def extra(self, extra):
        """Sets the extra of this ServiceOfferingNode.


        :param extra: The extra of this ServiceOfferingNode.
        :type extra: object
        """

        self._extra = extra

    @property
    def id(self):
        """Gets the id of this ServiceOfferingNode.

        ID of the resource

        :return: The id of this ServiceOfferingNode.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ServiceOfferingNode.

        ID of the resource

        :param id: The id of this ServiceOfferingNode.
        :type id: str
        """
        if id is not None and not re.search(r'^\d+$', id):
            raise ValueError("Invalid value for `id`, must be a follow pattern or equal to `/^\d+$/`")

        self._id = id

    @property
    def last_seen_at(self):
        """Gets the last_seen_at of this ServiceOfferingNode.


        :return: The last_seen_at of this ServiceOfferingNode.
        :rtype: datetime
        """
        return self._last_seen_at

    @last_seen_at.setter
    def last_seen_at(self, last_seen_at):
        """Sets the last_seen_at of this ServiceOfferingNode.


        :param last_seen_at: The last_seen_at of this ServiceOfferingNode.
        :type last_seen_at: datetime
        """

        self._last_seen_at = last_seen_at

    @property
    def name(self):
        """Gets the name of this ServiceOfferingNode.


        :return: The name of this ServiceOfferingNode.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ServiceOfferingNode.


        :param name: The name of this ServiceOfferingNode.
        :type name: str
        """

        self._name = name

    @property
    def refresh_state_part_id(self):
        """Gets the refresh_state_part_id of this ServiceOfferingNode.

        ID of the resource

        :return: The refresh_state_part_id of this ServiceOfferingNode.
        :rtype: str
        """
        return self._refresh_state_part_id

    @refresh_state_part_id.setter
    def refresh_state_part_id(self, refresh_state_part_id):
        """Sets the refresh_state_part_id of this ServiceOfferingNode.

        ID of the resource

        :param refresh_state_part_id: The refresh_state_part_id of this ServiceOfferingNode.
        :type refresh_state_part_id: str
        """
        if refresh_state_part_id is not None and not re.search(r'^\d+$', refresh_state_part_id):
            raise ValueError("Invalid value for `refresh_state_part_id`, must be a follow pattern or equal to `/^\d+$/`")

        self._refresh_state_part_id = refresh_state_part_id

    @property
    def root_service_offering_id(self):
        """Gets the root_service_offering_id of this ServiceOfferingNode.

        ID of the resource

        :return: The root_service_offering_id of this ServiceOfferingNode.
        :rtype: str
        """
        return self._root_service_offering_id

    @root_service_offering_id.setter
    def root_service_offering_id(self, root_service_offering_id):
        """Sets the root_service_offering_id of this ServiceOfferingNode.

        ID of the resource

        :param root_service_offering_id: The root_service_offering_id of this ServiceOfferingNode.
        :type root_service_offering_id: str
        """
        if root_service_offering_id is not None and not re.search(r'^\d+$', root_service_offering_id):
            raise ValueError("Invalid value for `root_service_offering_id`, must be a follow pattern or equal to `/^\d+$/`")

        self._root_service_offering_id = root_service_offering_id

    @property
    def service_inventory_id(self):
        """Gets the service_inventory_id of this ServiceOfferingNode.

        ID of the resource

        :return: The service_inventory_id of this ServiceOfferingNode.
        :rtype: str
        """
        return self._service_inventory_id

    @service_inventory_id.setter
    def service_inventory_id(self, service_inventory_id):
        """Sets the service_inventory_id of this ServiceOfferingNode.

        ID of the resource

        :param service_inventory_id: The service_inventory_id of this ServiceOfferingNode.
        :type service_inventory_id: str
        """
        if service_inventory_id is not None and not re.search(r'^\d+$', service_inventory_id):
            raise ValueError("Invalid value for `service_inventory_id`, must be a follow pattern or equal to `/^\d+$/`")

        self._service_inventory_id = service_inventory_id

    @property
    def service_offering_id(self):
        """Gets the service_offering_id of this ServiceOfferingNode.

        ID of the resource

        :return: The service_offering_id of this ServiceOfferingNode.
        :rtype: str
        """
        return self._service_offering_id

    @service_offering_id.setter
    def service_offering_id(self, service_offering_id):
        """Sets the service_offering_id of this ServiceOfferingNode.

        ID of the resource

        :param service_offering_id: The service_offering_id of this ServiceOfferingNode.
        :type service_offering_id: str
        """
        if service_offering_id is not None and not re.search(r'^\d+$', service_offering_id):
            raise ValueError("Invalid value for `service_offering_id`, must be a follow pattern or equal to `/^\d+$/`")

        self._service_offering_id = service_offering_id

    @property
    def source_created_at(self):
        """Gets the source_created_at of this ServiceOfferingNode.


        :return: The source_created_at of this ServiceOfferingNode.
        :rtype: datetime
        """
        return self._source_created_at

    @source_created_at.setter
    def source_created_at(self, source_created_at):
        """Sets the source_created_at of this ServiceOfferingNode.


        :param source_created_at: The source_created_at of this ServiceOfferingNode.
        :type source_created_at: datetime
        """

        self._source_created_at = source_created_at

    @property
    def source_id(self):
        """Gets the source_id of this ServiceOfferingNode.

        ID of the resource

        :return: The source_id of this ServiceOfferingNode.
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this ServiceOfferingNode.

        ID of the resource

        :param source_id: The source_id of this ServiceOfferingNode.
        :type source_id: str
        """
        if source_id is not None and not re.search(r'^\d+$', source_id):
            raise ValueError("Invalid value for `source_id`, must be a follow pattern or equal to `/^\d+$/`")

        self._source_id = source_id

    @property
    def source_ref(self):
        """Gets the source_ref of this ServiceOfferingNode.


        :return: The source_ref of this ServiceOfferingNode.
        :rtype: str
        """
        return self._source_ref

    @source_ref.setter
    def source_ref(self, source_ref):
        """Sets the source_ref of this ServiceOfferingNode.


        :param source_ref: The source_ref of this ServiceOfferingNode.
        :type source_ref: str
        """

        self._source_ref = source_ref

    @property
    def source_updated_at(self):
        """Gets the source_updated_at of this ServiceOfferingNode.


        :return: The source_updated_at of this ServiceOfferingNode.
        :rtype: datetime
        """
        return self._source_updated_at

    @source_updated_at.setter
    def source_updated_at(self, source_updated_at):
        """Sets the source_updated_at of this ServiceOfferingNode.


        :param source_updated_at: The source_updated_at of this ServiceOfferingNode.
        :type source_updated_at: datetime
        """

        self._source_updated_at = source_updated_at

    @property
    def updated_at(self):
        """Gets the updated_at of this ServiceOfferingNode.


        :return: The updated_at of this ServiceOfferingNode.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ServiceOfferingNode.


        :param updated_at: The updated_at of this ServiceOfferingNode.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
