/**
 * PTV Timetable API - Version 3
 * The PTV Timetable API provides direct access to Public Transport Victoriaâ€™s public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * Documentation for Version 2 of the PTV Timetable API  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.    Credits: This page has been based on Steve Bennett's http://opentransportdata.org/, used with permission.  
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIV3_BulkDeparturesUpdateResponse.h
 *
 * 
 */

#ifndef OAIV3_BulkDeparturesUpdateResponse_H
#define OAIV3_BulkDeparturesUpdateResponse_H

#include <QJsonObject>

#include "OAIV3_BulkDeparturesRouteDirectionResponse.h"
#include "OAIV3_Departure.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIV3_Departure;
class OAIV3_BulkDeparturesRouteDirectionResponse;

class OAIV3_BulkDeparturesUpdateResponse : public OAIObject {
public:
    OAIV3_BulkDeparturesUpdateResponse();
    OAIV3_BulkDeparturesUpdateResponse(QString json);
    ~OAIV3_BulkDeparturesUpdateResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIV3_Departure> getDepartures() const;
    void setDepartures(const QList<OAIV3_Departure> &departures);
    bool is_departures_Set() const;
    bool is_departures_Valid() const;

    OAIV3_BulkDeparturesRouteDirectionResponse getRequestedRouteDirection() const;
    void setRequestedRouteDirection(const OAIV3_BulkDeparturesRouteDirectionResponse &requested_route_direction);
    bool is_requested_route_direction_Set() const;
    bool is_requested_route_direction_Valid() const;

    OAIV3_BulkDeparturesRouteDirectionResponse getRouteDirection() const;
    void setRouteDirection(const OAIV3_BulkDeparturesRouteDirectionResponse &route_direction);
    bool is_route_direction_Set() const;
    bool is_route_direction_Valid() const;

    qint32 getRouteDirectionStatus() const;
    void setRouteDirectionStatus(const qint32 &route_direction_status);
    bool is_route_direction_status_Set() const;
    bool is_route_direction_status_Valid() const;

    qint32 getRouteType() const;
    void setRouteType(const qint32 &route_type);
    bool is_route_type_Set() const;
    bool is_route_type_Valid() const;

    qint32 getStopId() const;
    void setStopId(const qint32 &stop_id);
    bool is_stop_id_Set() const;
    bool is_stop_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIV3_Departure> m_departures;
    bool m_departures_isSet;
    bool m_departures_isValid;

    OAIV3_BulkDeparturesRouteDirectionResponse m_requested_route_direction;
    bool m_requested_route_direction_isSet;
    bool m_requested_route_direction_isValid;

    OAIV3_BulkDeparturesRouteDirectionResponse m_route_direction;
    bool m_route_direction_isSet;
    bool m_route_direction_isValid;

    qint32 m_route_direction_status;
    bool m_route_direction_status_isSet;
    bool m_route_direction_status_isValid;

    qint32 m_route_type;
    bool m_route_type_isSet;
    bool m_route_type_isValid;

    qint32 m_stop_id;
    bool m_stop_id_isSet;
    bool m_stop_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIV3_BulkDeparturesUpdateResponse)

#endif // OAIV3_BulkDeparturesUpdateResponse_H
