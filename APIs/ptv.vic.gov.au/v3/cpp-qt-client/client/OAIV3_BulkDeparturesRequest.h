/**
 * PTV Timetable API - Version 3
 * The PTV Timetable API provides direct access to Public Transport Victoriaâ€™s public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * Documentation for Version 2 of the PTV Timetable API  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.    Credits: This page has been based on Steve Bennett's http://opentransportdata.org/, used with permission.  
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIV3_BulkDeparturesRequest.h
 *
 * 
 */

#ifndef OAIV3_BulkDeparturesRequest_H
#define OAIV3_BulkDeparturesRequest_H

#include <QJsonObject>

#include "OAIV3_StopDepartureRequest.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIV3_StopDepartureRequest;

class OAIV3_BulkDeparturesRequest : public OAIObject {
public:
    OAIV3_BulkDeparturesRequest();
    OAIV3_BulkDeparturesRequest(QString json);
    ~OAIV3_BulkDeparturesRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getDateUtc() const;
    void setDateUtc(const QDateTime &date_utc);
    bool is_date_utc_Set() const;
    bool is_date_utc_Valid() const;

    QList<QString> getExpand() const;
    void setExpand(const QList<QString> &expand);
    bool is_expand_Set() const;
    bool is_expand_Valid() const;

    bool isIncludeCancelled() const;
    void setIncludeCancelled(const bool &include_cancelled);
    bool is_include_cancelled_Set() const;
    bool is_include_cancelled_Valid() const;

    bool isIncludeGeopath() const;
    void setIncludeGeopath(const bool &include_geopath);
    bool is_include_geopath_Set() const;
    bool is_include_geopath_Valid() const;

    bool isLookBackwards() const;
    void setLookBackwards(const bool &look_backwards);
    bool is_look_backwards_Set() const;
    bool is_look_backwards_Valid() const;

    QList<OAIV3_StopDepartureRequest> getRequests() const;
    void setRequests(const QList<OAIV3_StopDepartureRequest> &requests);
    bool is_requests_Set() const;
    bool is_requests_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_date_utc;
    bool m_date_utc_isSet;
    bool m_date_utc_isValid;

    QList<QString> m_expand;
    bool m_expand_isSet;
    bool m_expand_isValid;

    bool m_include_cancelled;
    bool m_include_cancelled_isSet;
    bool m_include_cancelled_isValid;

    bool m_include_geopath;
    bool m_include_geopath_isSet;
    bool m_include_geopath_isValid;

    bool m_look_backwards;
    bool m_look_backwards_isSet;
    bool m_look_backwards_isValid;

    QList<OAIV3_StopDepartureRequest> m_requests;
    bool m_requests_isSet;
    bool m_requests_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIV3_BulkDeparturesRequest)

#endif // OAIV3_BulkDeparturesRequest_H
