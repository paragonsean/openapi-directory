/**
 * PTV Timetable API - Version 3
 * The PTV Timetable API provides direct access to Public Transport Victoriaâ€™s public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * Documentation for Version 2 of the PTV Timetable API  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.    Credits: This page has been based on Steve Bennett's http://opentransportdata.org/, used with permission.  
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIV3_StopStaffing.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIV3_StopStaffing::OAIV3_StopStaffing(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIV3_StopStaffing::OAIV3_StopStaffing() {
    this->initializeModel();
}

OAIV3_StopStaffing::~OAIV3_StopStaffing() {}

void OAIV3_StopStaffing::initializeModel() {

    m_fri_am_from_isSet = false;
    m_fri_am_from_isValid = false;

    m_fri_am_to_isSet = false;
    m_fri_am_to_isValid = false;

    m_fri_pm_from_isSet = false;
    m_fri_pm_from_isValid = false;

    m_fri_pm_to_isSet = false;
    m_fri_pm_to_isValid = false;

    m_mon_am_from_isSet = false;
    m_mon_am_from_isValid = false;

    m_mon_am_to_isSet = false;
    m_mon_am_to_isValid = false;

    m_mon_pm_from_isSet = false;
    m_mon_pm_from_isValid = false;

    m_mon_pm_to_isSet = false;
    m_mon_pm_to_isValid = false;

    m_ph_additional_text_isSet = false;
    m_ph_additional_text_isValid = false;

    m_ph_from_isSet = false;
    m_ph_from_isValid = false;

    m_ph_to_isSet = false;
    m_ph_to_isValid = false;

    m_sat_am_from_isSet = false;
    m_sat_am_from_isValid = false;

    m_sat_am_to_isSet = false;
    m_sat_am_to_isValid = false;

    m_sat_pm_from_isSet = false;
    m_sat_pm_from_isValid = false;

    m_sat_pm_to_isSet = false;
    m_sat_pm_to_isValid = false;

    m_sun_am_from_isSet = false;
    m_sun_am_from_isValid = false;

    m_sun_am_to_isSet = false;
    m_sun_am_to_isValid = false;

    m_sun_pm_from_isSet = false;
    m_sun_pm_from_isValid = false;

    m_sun_pm_to_isSet = false;
    m_sun_pm_to_isValid = false;

    m_thu_am_from_isSet = false;
    m_thu_am_from_isValid = false;

    m_thu_am_to_isSet = false;
    m_thu_am_to_isValid = false;

    m_thu_pm_from_isSet = false;
    m_thu_pm_from_isValid = false;

    m_thu_pm_to_isSet = false;
    m_thu_pm_to_isValid = false;

    m_tue_am_from_isSet = false;
    m_tue_am_from_isValid = false;

    m_tue_am_to_isSet = false;
    m_tue_am_to_isValid = false;

    m_tue_pm_from_isSet = false;
    m_tue_pm_from_isValid = false;

    m_tue_pm_to_isSet = false;
    m_tue_pm_to_isValid = false;

    m_wed_am_from_isSet = false;
    m_wed_am_from_isValid = false;

    m_wed_am_to_isSet = false;
    m_wed_am_to_isValid = false;

    m_wed_pm_to_isSet = false;
    m_wed_pm_to_isValid = false;

    m_wed_pm_from_isSet = false;
    m_wed_pm_from_isValid = false;
}

void OAIV3_StopStaffing::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIV3_StopStaffing::fromJsonObject(QJsonObject json) {

    m_fri_am_from_isValid = ::OpenAPI::fromJsonValue(m_fri_am_from, json[QString("fri_am_from")]);
    m_fri_am_from_isSet = !json[QString("fri_am_from")].isNull() && m_fri_am_from_isValid;

    m_fri_am_to_isValid = ::OpenAPI::fromJsonValue(m_fri_am_to, json[QString("fri_am_to")]);
    m_fri_am_to_isSet = !json[QString("fri_am_to")].isNull() && m_fri_am_to_isValid;

    m_fri_pm_from_isValid = ::OpenAPI::fromJsonValue(m_fri_pm_from, json[QString("fri_pm_from")]);
    m_fri_pm_from_isSet = !json[QString("fri_pm_from")].isNull() && m_fri_pm_from_isValid;

    m_fri_pm_to_isValid = ::OpenAPI::fromJsonValue(m_fri_pm_to, json[QString("fri_pm_to")]);
    m_fri_pm_to_isSet = !json[QString("fri_pm_to")].isNull() && m_fri_pm_to_isValid;

    m_mon_am_from_isValid = ::OpenAPI::fromJsonValue(m_mon_am_from, json[QString("mon_am_from")]);
    m_mon_am_from_isSet = !json[QString("mon_am_from")].isNull() && m_mon_am_from_isValid;

    m_mon_am_to_isValid = ::OpenAPI::fromJsonValue(m_mon_am_to, json[QString("mon_am_to")]);
    m_mon_am_to_isSet = !json[QString("mon_am_to")].isNull() && m_mon_am_to_isValid;

    m_mon_pm_from_isValid = ::OpenAPI::fromJsonValue(m_mon_pm_from, json[QString("mon_pm_from")]);
    m_mon_pm_from_isSet = !json[QString("mon_pm_from")].isNull() && m_mon_pm_from_isValid;

    m_mon_pm_to_isValid = ::OpenAPI::fromJsonValue(m_mon_pm_to, json[QString("mon_pm_to")]);
    m_mon_pm_to_isSet = !json[QString("mon_pm_to")].isNull() && m_mon_pm_to_isValid;

    m_ph_additional_text_isValid = ::OpenAPI::fromJsonValue(m_ph_additional_text, json[QString("ph_additional_text")]);
    m_ph_additional_text_isSet = !json[QString("ph_additional_text")].isNull() && m_ph_additional_text_isValid;

    m_ph_from_isValid = ::OpenAPI::fromJsonValue(m_ph_from, json[QString("ph_from")]);
    m_ph_from_isSet = !json[QString("ph_from")].isNull() && m_ph_from_isValid;

    m_ph_to_isValid = ::OpenAPI::fromJsonValue(m_ph_to, json[QString("ph_to")]);
    m_ph_to_isSet = !json[QString("ph_to")].isNull() && m_ph_to_isValid;

    m_sat_am_from_isValid = ::OpenAPI::fromJsonValue(m_sat_am_from, json[QString("sat_am_from")]);
    m_sat_am_from_isSet = !json[QString("sat_am_from")].isNull() && m_sat_am_from_isValid;

    m_sat_am_to_isValid = ::OpenAPI::fromJsonValue(m_sat_am_to, json[QString("sat_am_to")]);
    m_sat_am_to_isSet = !json[QString("sat_am_to")].isNull() && m_sat_am_to_isValid;

    m_sat_pm_from_isValid = ::OpenAPI::fromJsonValue(m_sat_pm_from, json[QString("sat_pm_from")]);
    m_sat_pm_from_isSet = !json[QString("sat_pm_from")].isNull() && m_sat_pm_from_isValid;

    m_sat_pm_to_isValid = ::OpenAPI::fromJsonValue(m_sat_pm_to, json[QString("sat_pm_to")]);
    m_sat_pm_to_isSet = !json[QString("sat_pm_to")].isNull() && m_sat_pm_to_isValid;

    m_sun_am_from_isValid = ::OpenAPI::fromJsonValue(m_sun_am_from, json[QString("sun_am_from")]);
    m_sun_am_from_isSet = !json[QString("sun_am_from")].isNull() && m_sun_am_from_isValid;

    m_sun_am_to_isValid = ::OpenAPI::fromJsonValue(m_sun_am_to, json[QString("sun_am_to")]);
    m_sun_am_to_isSet = !json[QString("sun_am_to")].isNull() && m_sun_am_to_isValid;

    m_sun_pm_from_isValid = ::OpenAPI::fromJsonValue(m_sun_pm_from, json[QString("sun_pm_from")]);
    m_sun_pm_from_isSet = !json[QString("sun_pm_from")].isNull() && m_sun_pm_from_isValid;

    m_sun_pm_to_isValid = ::OpenAPI::fromJsonValue(m_sun_pm_to, json[QString("sun_pm_to")]);
    m_sun_pm_to_isSet = !json[QString("sun_pm_to")].isNull() && m_sun_pm_to_isValid;

    m_thu_am_from_isValid = ::OpenAPI::fromJsonValue(m_thu_am_from, json[QString("thu_am_from")]);
    m_thu_am_from_isSet = !json[QString("thu_am_from")].isNull() && m_thu_am_from_isValid;

    m_thu_am_to_isValid = ::OpenAPI::fromJsonValue(m_thu_am_to, json[QString("thu_am_to")]);
    m_thu_am_to_isSet = !json[QString("thu_am_to")].isNull() && m_thu_am_to_isValid;

    m_thu_pm_from_isValid = ::OpenAPI::fromJsonValue(m_thu_pm_from, json[QString("thu_pm_from")]);
    m_thu_pm_from_isSet = !json[QString("thu_pm_from")].isNull() && m_thu_pm_from_isValid;

    m_thu_pm_to_isValid = ::OpenAPI::fromJsonValue(m_thu_pm_to, json[QString("thu_pm_to")]);
    m_thu_pm_to_isSet = !json[QString("thu_pm_to")].isNull() && m_thu_pm_to_isValid;

    m_tue_am_from_isValid = ::OpenAPI::fromJsonValue(m_tue_am_from, json[QString("tue_am_from")]);
    m_tue_am_from_isSet = !json[QString("tue_am_from")].isNull() && m_tue_am_from_isValid;

    m_tue_am_to_isValid = ::OpenAPI::fromJsonValue(m_tue_am_to, json[QString("tue_am_to")]);
    m_tue_am_to_isSet = !json[QString("tue_am_to")].isNull() && m_tue_am_to_isValid;

    m_tue_pm_from_isValid = ::OpenAPI::fromJsonValue(m_tue_pm_from, json[QString("tue_pm_from")]);
    m_tue_pm_from_isSet = !json[QString("tue_pm_from")].isNull() && m_tue_pm_from_isValid;

    m_tue_pm_to_isValid = ::OpenAPI::fromJsonValue(m_tue_pm_to, json[QString("tue_pm_to")]);
    m_tue_pm_to_isSet = !json[QString("tue_pm_to")].isNull() && m_tue_pm_to_isValid;

    m_wed_am_from_isValid = ::OpenAPI::fromJsonValue(m_wed_am_from, json[QString("wed_am_from")]);
    m_wed_am_from_isSet = !json[QString("wed_am_from")].isNull() && m_wed_am_from_isValid;

    m_wed_am_to_isValid = ::OpenAPI::fromJsonValue(m_wed_am_to, json[QString("wed_am_to")]);
    m_wed_am_to_isSet = !json[QString("wed_am_to")].isNull() && m_wed_am_to_isValid;

    m_wed_pm_to_isValid = ::OpenAPI::fromJsonValue(m_wed_pm_to, json[QString("wed_pm_To")]);
    m_wed_pm_to_isSet = !json[QString("wed_pm_To")].isNull() && m_wed_pm_to_isValid;

    m_wed_pm_from_isValid = ::OpenAPI::fromJsonValue(m_wed_pm_from, json[QString("wed_pm_from")]);
    m_wed_pm_from_isSet = !json[QString("wed_pm_from")].isNull() && m_wed_pm_from_isValid;
}

QString OAIV3_StopStaffing::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIV3_StopStaffing::asJsonObject() const {
    QJsonObject obj;
    if (m_fri_am_from_isSet) {
        obj.insert(QString("fri_am_from"), ::OpenAPI::toJsonValue(m_fri_am_from));
    }
    if (m_fri_am_to_isSet) {
        obj.insert(QString("fri_am_to"), ::OpenAPI::toJsonValue(m_fri_am_to));
    }
    if (m_fri_pm_from_isSet) {
        obj.insert(QString("fri_pm_from"), ::OpenAPI::toJsonValue(m_fri_pm_from));
    }
    if (m_fri_pm_to_isSet) {
        obj.insert(QString("fri_pm_to"), ::OpenAPI::toJsonValue(m_fri_pm_to));
    }
    if (m_mon_am_from_isSet) {
        obj.insert(QString("mon_am_from"), ::OpenAPI::toJsonValue(m_mon_am_from));
    }
    if (m_mon_am_to_isSet) {
        obj.insert(QString("mon_am_to"), ::OpenAPI::toJsonValue(m_mon_am_to));
    }
    if (m_mon_pm_from_isSet) {
        obj.insert(QString("mon_pm_from"), ::OpenAPI::toJsonValue(m_mon_pm_from));
    }
    if (m_mon_pm_to_isSet) {
        obj.insert(QString("mon_pm_to"), ::OpenAPI::toJsonValue(m_mon_pm_to));
    }
    if (m_ph_additional_text_isSet) {
        obj.insert(QString("ph_additional_text"), ::OpenAPI::toJsonValue(m_ph_additional_text));
    }
    if (m_ph_from_isSet) {
        obj.insert(QString("ph_from"), ::OpenAPI::toJsonValue(m_ph_from));
    }
    if (m_ph_to_isSet) {
        obj.insert(QString("ph_to"), ::OpenAPI::toJsonValue(m_ph_to));
    }
    if (m_sat_am_from_isSet) {
        obj.insert(QString("sat_am_from"), ::OpenAPI::toJsonValue(m_sat_am_from));
    }
    if (m_sat_am_to_isSet) {
        obj.insert(QString("sat_am_to"), ::OpenAPI::toJsonValue(m_sat_am_to));
    }
    if (m_sat_pm_from_isSet) {
        obj.insert(QString("sat_pm_from"), ::OpenAPI::toJsonValue(m_sat_pm_from));
    }
    if (m_sat_pm_to_isSet) {
        obj.insert(QString("sat_pm_to"), ::OpenAPI::toJsonValue(m_sat_pm_to));
    }
    if (m_sun_am_from_isSet) {
        obj.insert(QString("sun_am_from"), ::OpenAPI::toJsonValue(m_sun_am_from));
    }
    if (m_sun_am_to_isSet) {
        obj.insert(QString("sun_am_to"), ::OpenAPI::toJsonValue(m_sun_am_to));
    }
    if (m_sun_pm_from_isSet) {
        obj.insert(QString("sun_pm_from"), ::OpenAPI::toJsonValue(m_sun_pm_from));
    }
    if (m_sun_pm_to_isSet) {
        obj.insert(QString("sun_pm_to"), ::OpenAPI::toJsonValue(m_sun_pm_to));
    }
    if (m_thu_am_from_isSet) {
        obj.insert(QString("thu_am_from"), ::OpenAPI::toJsonValue(m_thu_am_from));
    }
    if (m_thu_am_to_isSet) {
        obj.insert(QString("thu_am_to"), ::OpenAPI::toJsonValue(m_thu_am_to));
    }
    if (m_thu_pm_from_isSet) {
        obj.insert(QString("thu_pm_from"), ::OpenAPI::toJsonValue(m_thu_pm_from));
    }
    if (m_thu_pm_to_isSet) {
        obj.insert(QString("thu_pm_to"), ::OpenAPI::toJsonValue(m_thu_pm_to));
    }
    if (m_tue_am_from_isSet) {
        obj.insert(QString("tue_am_from"), ::OpenAPI::toJsonValue(m_tue_am_from));
    }
    if (m_tue_am_to_isSet) {
        obj.insert(QString("tue_am_to"), ::OpenAPI::toJsonValue(m_tue_am_to));
    }
    if (m_tue_pm_from_isSet) {
        obj.insert(QString("tue_pm_from"), ::OpenAPI::toJsonValue(m_tue_pm_from));
    }
    if (m_tue_pm_to_isSet) {
        obj.insert(QString("tue_pm_to"), ::OpenAPI::toJsonValue(m_tue_pm_to));
    }
    if (m_wed_am_from_isSet) {
        obj.insert(QString("wed_am_from"), ::OpenAPI::toJsonValue(m_wed_am_from));
    }
    if (m_wed_am_to_isSet) {
        obj.insert(QString("wed_am_to"), ::OpenAPI::toJsonValue(m_wed_am_to));
    }
    if (m_wed_pm_to_isSet) {
        obj.insert(QString("wed_pm_To"), ::OpenAPI::toJsonValue(m_wed_pm_to));
    }
    if (m_wed_pm_from_isSet) {
        obj.insert(QString("wed_pm_from"), ::OpenAPI::toJsonValue(m_wed_pm_from));
    }
    return obj;
}

QString OAIV3_StopStaffing::getFriAmFrom() const {
    return m_fri_am_from;
}
void OAIV3_StopStaffing::setFriAmFrom(const QString &fri_am_from) {
    m_fri_am_from = fri_am_from;
    m_fri_am_from_isSet = true;
}

bool OAIV3_StopStaffing::is_fri_am_from_Set() const{
    return m_fri_am_from_isSet;
}

bool OAIV3_StopStaffing::is_fri_am_from_Valid() const{
    return m_fri_am_from_isValid;
}

QString OAIV3_StopStaffing::getFriAmTo() const {
    return m_fri_am_to;
}
void OAIV3_StopStaffing::setFriAmTo(const QString &fri_am_to) {
    m_fri_am_to = fri_am_to;
    m_fri_am_to_isSet = true;
}

bool OAIV3_StopStaffing::is_fri_am_to_Set() const{
    return m_fri_am_to_isSet;
}

bool OAIV3_StopStaffing::is_fri_am_to_Valid() const{
    return m_fri_am_to_isValid;
}

QString OAIV3_StopStaffing::getFriPmFrom() const {
    return m_fri_pm_from;
}
void OAIV3_StopStaffing::setFriPmFrom(const QString &fri_pm_from) {
    m_fri_pm_from = fri_pm_from;
    m_fri_pm_from_isSet = true;
}

bool OAIV3_StopStaffing::is_fri_pm_from_Set() const{
    return m_fri_pm_from_isSet;
}

bool OAIV3_StopStaffing::is_fri_pm_from_Valid() const{
    return m_fri_pm_from_isValid;
}

QString OAIV3_StopStaffing::getFriPmTo() const {
    return m_fri_pm_to;
}
void OAIV3_StopStaffing::setFriPmTo(const QString &fri_pm_to) {
    m_fri_pm_to = fri_pm_to;
    m_fri_pm_to_isSet = true;
}

bool OAIV3_StopStaffing::is_fri_pm_to_Set() const{
    return m_fri_pm_to_isSet;
}

bool OAIV3_StopStaffing::is_fri_pm_to_Valid() const{
    return m_fri_pm_to_isValid;
}

QString OAIV3_StopStaffing::getMonAmFrom() const {
    return m_mon_am_from;
}
void OAIV3_StopStaffing::setMonAmFrom(const QString &mon_am_from) {
    m_mon_am_from = mon_am_from;
    m_mon_am_from_isSet = true;
}

bool OAIV3_StopStaffing::is_mon_am_from_Set() const{
    return m_mon_am_from_isSet;
}

bool OAIV3_StopStaffing::is_mon_am_from_Valid() const{
    return m_mon_am_from_isValid;
}

QString OAIV3_StopStaffing::getMonAmTo() const {
    return m_mon_am_to;
}
void OAIV3_StopStaffing::setMonAmTo(const QString &mon_am_to) {
    m_mon_am_to = mon_am_to;
    m_mon_am_to_isSet = true;
}

bool OAIV3_StopStaffing::is_mon_am_to_Set() const{
    return m_mon_am_to_isSet;
}

bool OAIV3_StopStaffing::is_mon_am_to_Valid() const{
    return m_mon_am_to_isValid;
}

QString OAIV3_StopStaffing::getMonPmFrom() const {
    return m_mon_pm_from;
}
void OAIV3_StopStaffing::setMonPmFrom(const QString &mon_pm_from) {
    m_mon_pm_from = mon_pm_from;
    m_mon_pm_from_isSet = true;
}

bool OAIV3_StopStaffing::is_mon_pm_from_Set() const{
    return m_mon_pm_from_isSet;
}

bool OAIV3_StopStaffing::is_mon_pm_from_Valid() const{
    return m_mon_pm_from_isValid;
}

QString OAIV3_StopStaffing::getMonPmTo() const {
    return m_mon_pm_to;
}
void OAIV3_StopStaffing::setMonPmTo(const QString &mon_pm_to) {
    m_mon_pm_to = mon_pm_to;
    m_mon_pm_to_isSet = true;
}

bool OAIV3_StopStaffing::is_mon_pm_to_Set() const{
    return m_mon_pm_to_isSet;
}

bool OAIV3_StopStaffing::is_mon_pm_to_Valid() const{
    return m_mon_pm_to_isValid;
}

QString OAIV3_StopStaffing::getPhAdditionalText() const {
    return m_ph_additional_text;
}
void OAIV3_StopStaffing::setPhAdditionalText(const QString &ph_additional_text) {
    m_ph_additional_text = ph_additional_text;
    m_ph_additional_text_isSet = true;
}

bool OAIV3_StopStaffing::is_ph_additional_text_Set() const{
    return m_ph_additional_text_isSet;
}

bool OAIV3_StopStaffing::is_ph_additional_text_Valid() const{
    return m_ph_additional_text_isValid;
}

QString OAIV3_StopStaffing::getPhFrom() const {
    return m_ph_from;
}
void OAIV3_StopStaffing::setPhFrom(const QString &ph_from) {
    m_ph_from = ph_from;
    m_ph_from_isSet = true;
}

bool OAIV3_StopStaffing::is_ph_from_Set() const{
    return m_ph_from_isSet;
}

bool OAIV3_StopStaffing::is_ph_from_Valid() const{
    return m_ph_from_isValid;
}

QString OAIV3_StopStaffing::getPhTo() const {
    return m_ph_to;
}
void OAIV3_StopStaffing::setPhTo(const QString &ph_to) {
    m_ph_to = ph_to;
    m_ph_to_isSet = true;
}

bool OAIV3_StopStaffing::is_ph_to_Set() const{
    return m_ph_to_isSet;
}

bool OAIV3_StopStaffing::is_ph_to_Valid() const{
    return m_ph_to_isValid;
}

QString OAIV3_StopStaffing::getSatAmFrom() const {
    return m_sat_am_from;
}
void OAIV3_StopStaffing::setSatAmFrom(const QString &sat_am_from) {
    m_sat_am_from = sat_am_from;
    m_sat_am_from_isSet = true;
}

bool OAIV3_StopStaffing::is_sat_am_from_Set() const{
    return m_sat_am_from_isSet;
}

bool OAIV3_StopStaffing::is_sat_am_from_Valid() const{
    return m_sat_am_from_isValid;
}

QString OAIV3_StopStaffing::getSatAmTo() const {
    return m_sat_am_to;
}
void OAIV3_StopStaffing::setSatAmTo(const QString &sat_am_to) {
    m_sat_am_to = sat_am_to;
    m_sat_am_to_isSet = true;
}

bool OAIV3_StopStaffing::is_sat_am_to_Set() const{
    return m_sat_am_to_isSet;
}

bool OAIV3_StopStaffing::is_sat_am_to_Valid() const{
    return m_sat_am_to_isValid;
}

QString OAIV3_StopStaffing::getSatPmFrom() const {
    return m_sat_pm_from;
}
void OAIV3_StopStaffing::setSatPmFrom(const QString &sat_pm_from) {
    m_sat_pm_from = sat_pm_from;
    m_sat_pm_from_isSet = true;
}

bool OAIV3_StopStaffing::is_sat_pm_from_Set() const{
    return m_sat_pm_from_isSet;
}

bool OAIV3_StopStaffing::is_sat_pm_from_Valid() const{
    return m_sat_pm_from_isValid;
}

QString OAIV3_StopStaffing::getSatPmTo() const {
    return m_sat_pm_to;
}
void OAIV3_StopStaffing::setSatPmTo(const QString &sat_pm_to) {
    m_sat_pm_to = sat_pm_to;
    m_sat_pm_to_isSet = true;
}

bool OAIV3_StopStaffing::is_sat_pm_to_Set() const{
    return m_sat_pm_to_isSet;
}

bool OAIV3_StopStaffing::is_sat_pm_to_Valid() const{
    return m_sat_pm_to_isValid;
}

QString OAIV3_StopStaffing::getSunAmFrom() const {
    return m_sun_am_from;
}
void OAIV3_StopStaffing::setSunAmFrom(const QString &sun_am_from) {
    m_sun_am_from = sun_am_from;
    m_sun_am_from_isSet = true;
}

bool OAIV3_StopStaffing::is_sun_am_from_Set() const{
    return m_sun_am_from_isSet;
}

bool OAIV3_StopStaffing::is_sun_am_from_Valid() const{
    return m_sun_am_from_isValid;
}

QString OAIV3_StopStaffing::getSunAmTo() const {
    return m_sun_am_to;
}
void OAIV3_StopStaffing::setSunAmTo(const QString &sun_am_to) {
    m_sun_am_to = sun_am_to;
    m_sun_am_to_isSet = true;
}

bool OAIV3_StopStaffing::is_sun_am_to_Set() const{
    return m_sun_am_to_isSet;
}

bool OAIV3_StopStaffing::is_sun_am_to_Valid() const{
    return m_sun_am_to_isValid;
}

QString OAIV3_StopStaffing::getSunPmFrom() const {
    return m_sun_pm_from;
}
void OAIV3_StopStaffing::setSunPmFrom(const QString &sun_pm_from) {
    m_sun_pm_from = sun_pm_from;
    m_sun_pm_from_isSet = true;
}

bool OAIV3_StopStaffing::is_sun_pm_from_Set() const{
    return m_sun_pm_from_isSet;
}

bool OAIV3_StopStaffing::is_sun_pm_from_Valid() const{
    return m_sun_pm_from_isValid;
}

QString OAIV3_StopStaffing::getSunPmTo() const {
    return m_sun_pm_to;
}
void OAIV3_StopStaffing::setSunPmTo(const QString &sun_pm_to) {
    m_sun_pm_to = sun_pm_to;
    m_sun_pm_to_isSet = true;
}

bool OAIV3_StopStaffing::is_sun_pm_to_Set() const{
    return m_sun_pm_to_isSet;
}

bool OAIV3_StopStaffing::is_sun_pm_to_Valid() const{
    return m_sun_pm_to_isValid;
}

QString OAIV3_StopStaffing::getThuAmFrom() const {
    return m_thu_am_from;
}
void OAIV3_StopStaffing::setThuAmFrom(const QString &thu_am_from) {
    m_thu_am_from = thu_am_from;
    m_thu_am_from_isSet = true;
}

bool OAIV3_StopStaffing::is_thu_am_from_Set() const{
    return m_thu_am_from_isSet;
}

bool OAIV3_StopStaffing::is_thu_am_from_Valid() const{
    return m_thu_am_from_isValid;
}

QString OAIV3_StopStaffing::getThuAmTo() const {
    return m_thu_am_to;
}
void OAIV3_StopStaffing::setThuAmTo(const QString &thu_am_to) {
    m_thu_am_to = thu_am_to;
    m_thu_am_to_isSet = true;
}

bool OAIV3_StopStaffing::is_thu_am_to_Set() const{
    return m_thu_am_to_isSet;
}

bool OAIV3_StopStaffing::is_thu_am_to_Valid() const{
    return m_thu_am_to_isValid;
}

QString OAIV3_StopStaffing::getThuPmFrom() const {
    return m_thu_pm_from;
}
void OAIV3_StopStaffing::setThuPmFrom(const QString &thu_pm_from) {
    m_thu_pm_from = thu_pm_from;
    m_thu_pm_from_isSet = true;
}

bool OAIV3_StopStaffing::is_thu_pm_from_Set() const{
    return m_thu_pm_from_isSet;
}

bool OAIV3_StopStaffing::is_thu_pm_from_Valid() const{
    return m_thu_pm_from_isValid;
}

QString OAIV3_StopStaffing::getThuPmTo() const {
    return m_thu_pm_to;
}
void OAIV3_StopStaffing::setThuPmTo(const QString &thu_pm_to) {
    m_thu_pm_to = thu_pm_to;
    m_thu_pm_to_isSet = true;
}

bool OAIV3_StopStaffing::is_thu_pm_to_Set() const{
    return m_thu_pm_to_isSet;
}

bool OAIV3_StopStaffing::is_thu_pm_to_Valid() const{
    return m_thu_pm_to_isValid;
}

QString OAIV3_StopStaffing::getTueAmFrom() const {
    return m_tue_am_from;
}
void OAIV3_StopStaffing::setTueAmFrom(const QString &tue_am_from) {
    m_tue_am_from = tue_am_from;
    m_tue_am_from_isSet = true;
}

bool OAIV3_StopStaffing::is_tue_am_from_Set() const{
    return m_tue_am_from_isSet;
}

bool OAIV3_StopStaffing::is_tue_am_from_Valid() const{
    return m_tue_am_from_isValid;
}

QString OAIV3_StopStaffing::getTueAmTo() const {
    return m_tue_am_to;
}
void OAIV3_StopStaffing::setTueAmTo(const QString &tue_am_to) {
    m_tue_am_to = tue_am_to;
    m_tue_am_to_isSet = true;
}

bool OAIV3_StopStaffing::is_tue_am_to_Set() const{
    return m_tue_am_to_isSet;
}

bool OAIV3_StopStaffing::is_tue_am_to_Valid() const{
    return m_tue_am_to_isValid;
}

QString OAIV3_StopStaffing::getTuePmFrom() const {
    return m_tue_pm_from;
}
void OAIV3_StopStaffing::setTuePmFrom(const QString &tue_pm_from) {
    m_tue_pm_from = tue_pm_from;
    m_tue_pm_from_isSet = true;
}

bool OAIV3_StopStaffing::is_tue_pm_from_Set() const{
    return m_tue_pm_from_isSet;
}

bool OAIV3_StopStaffing::is_tue_pm_from_Valid() const{
    return m_tue_pm_from_isValid;
}

QString OAIV3_StopStaffing::getTuePmTo() const {
    return m_tue_pm_to;
}
void OAIV3_StopStaffing::setTuePmTo(const QString &tue_pm_to) {
    m_tue_pm_to = tue_pm_to;
    m_tue_pm_to_isSet = true;
}

bool OAIV3_StopStaffing::is_tue_pm_to_Set() const{
    return m_tue_pm_to_isSet;
}

bool OAIV3_StopStaffing::is_tue_pm_to_Valid() const{
    return m_tue_pm_to_isValid;
}

QString OAIV3_StopStaffing::getWedAmFrom() const {
    return m_wed_am_from;
}
void OAIV3_StopStaffing::setWedAmFrom(const QString &wed_am_from) {
    m_wed_am_from = wed_am_from;
    m_wed_am_from_isSet = true;
}

bool OAIV3_StopStaffing::is_wed_am_from_Set() const{
    return m_wed_am_from_isSet;
}

bool OAIV3_StopStaffing::is_wed_am_from_Valid() const{
    return m_wed_am_from_isValid;
}

QString OAIV3_StopStaffing::getWedAmTo() const {
    return m_wed_am_to;
}
void OAIV3_StopStaffing::setWedAmTo(const QString &wed_am_to) {
    m_wed_am_to = wed_am_to;
    m_wed_am_to_isSet = true;
}

bool OAIV3_StopStaffing::is_wed_am_to_Set() const{
    return m_wed_am_to_isSet;
}

bool OAIV3_StopStaffing::is_wed_am_to_Valid() const{
    return m_wed_am_to_isValid;
}

QString OAIV3_StopStaffing::getWedPmTo() const {
    return m_wed_pm_to;
}
void OAIV3_StopStaffing::setWedPmTo(const QString &wed_pm_to) {
    m_wed_pm_to = wed_pm_to;
    m_wed_pm_to_isSet = true;
}

bool OAIV3_StopStaffing::is_wed_pm_to_Set() const{
    return m_wed_pm_to_isSet;
}

bool OAIV3_StopStaffing::is_wed_pm_to_Valid() const{
    return m_wed_pm_to_isValid;
}

QString OAIV3_StopStaffing::getWedPmFrom() const {
    return m_wed_pm_from;
}
void OAIV3_StopStaffing::setWedPmFrom(const QString &wed_pm_from) {
    m_wed_pm_from = wed_pm_from;
    m_wed_pm_from_isSet = true;
}

bool OAIV3_StopStaffing::is_wed_pm_from_Set() const{
    return m_wed_pm_from_isSet;
}

bool OAIV3_StopStaffing::is_wed_pm_from_Valid() const{
    return m_wed_pm_from_isValid;
}

bool OAIV3_StopStaffing::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fri_am_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fri_am_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fri_pm_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fri_pm_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mon_am_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mon_am_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mon_pm_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mon_pm_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ph_additional_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ph_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ph_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sat_am_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sat_am_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sat_pm_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sat_pm_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sun_am_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sun_am_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sun_pm_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sun_pm_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thu_am_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thu_am_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thu_pm_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thu_pm_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tue_am_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tue_am_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tue_pm_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tue_pm_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wed_am_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wed_am_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wed_pm_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wed_pm_from_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIV3_StopStaffing::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
