/**
 * PTV Timetable API - Version 3
 * The PTV Timetable API provides direct access to Public Transport Victoriaâ€™s public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * Documentation for Version 2 of the PTV Timetable API  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.    Credits: This page has been based on Steve Bennett's http://opentransportdata.org/, used with permission.  
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIV3_StopTicket.h
 *
 * 
 */

#ifndef OAIV3_StopTicket_H
#define OAIV3_StopTicket_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIV3_StopTicket : public OAIObject {
public:
    OAIV3_StopTicket();
    OAIV3_StopTicket(QString json);
    ~OAIV3_StopTicket() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isIsFreeFareZone() const;
    void setIsFreeFareZone(const bool &is_free_fare_zone);
    bool is_is_free_fare_zone_Set() const;
    bool is_is_free_fare_zone_Valid() const;

    bool isTicketChecks() const;
    void setTicketChecks(const bool &ticket_checks);
    bool is_ticket_checks_Set() const;
    bool is_ticket_checks_Valid() const;

    bool isTicketMachine() const;
    void setTicketMachine(const bool &ticket_machine);
    bool is_ticket_machine_Set() const;
    bool is_ticket_machine_Valid() const;

    QString getTicketType() const;
    void setTicketType(const QString &ticket_type);
    bool is_ticket_type_Set() const;
    bool is_ticket_type_Valid() const;

    QList<qint32> getTicketZones() const;
    void setTicketZones(const QList<qint32> &ticket_zones);
    bool is_ticket_zones_Set() const;
    bool is_ticket_zones_Valid() const;

    bool isVlineReservation() const;
    void setVlineReservation(const bool &vline_reservation);
    bool is_vline_reservation_Set() const;
    bool is_vline_reservation_Valid() const;

    QString getZone() const;
    void setZone(const QString &zone);
    bool is_zone_Set() const;
    bool is_zone_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_is_free_fare_zone;
    bool m_is_free_fare_zone_isSet;
    bool m_is_free_fare_zone_isValid;

    bool m_ticket_checks;
    bool m_ticket_checks_isSet;
    bool m_ticket_checks_isValid;

    bool m_ticket_machine;
    bool m_ticket_machine_isSet;
    bool m_ticket_machine_isValid;

    QString m_ticket_type;
    bool m_ticket_type_isSet;
    bool m_ticket_type_isValid;

    QList<qint32> m_ticket_zones;
    bool m_ticket_zones_isSet;
    bool m_ticket_zones_isValid;

    bool m_vline_reservation;
    bool m_vline_reservation_isSet;
    bool m_vline_reservation_isValid;

    QString m_zone;
    bool m_zone_isSet;
    bool m_zone_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIV3_StopTicket)

#endif // OAIV3_StopTicket_H
