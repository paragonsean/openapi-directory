/**
 * PTV Timetable API - Version 3
 * The PTV Timetable API provides direct access to Public Transport Victoriaâ€™s public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * Documentation for Version 2 of the PTV Timetable API  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.    Credits: This page has been based on Steve Bennett's http://opentransportdata.org/, used with permission.  
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIV3_Disruption.h
 *
 * 
 */

#ifndef OAIV3_Disruption_H
#define OAIV3_Disruption_H

#include <QJsonObject>

#include "OAIV3_DisruptionRoute.h"
#include "OAIV3_DisruptionStop.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIV3_DisruptionRoute;
class OAIV3_DisruptionStop;

class OAIV3_Disruption : public OAIObject {
public:
    OAIV3_Disruption();
    OAIV3_Disruption(QString json);
    ~OAIV3_Disruption() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getColour() const;
    void setColour(const QString &colour);
    bool is_colour_Set() const;
    bool is_colour_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    bool isDisplayOnBoard() const;
    void setDisplayOnBoard(const bool &display_on_board);
    bool is_display_on_board_Set() const;
    bool is_display_on_board_Valid() const;

    bool isDisplayStatus() const;
    void setDisplayStatus(const bool &display_status);
    bool is_display_status_Set() const;
    bool is_display_status_Valid() const;

    qint64 getDisruptionId() const;
    void setDisruptionId(const qint64 &disruption_id);
    bool is_disruption_id_Set() const;
    bool is_disruption_id_Valid() const;

    QString getDisruptionStatus() const;
    void setDisruptionStatus(const QString &disruption_status);
    bool is_disruption_status_Set() const;
    bool is_disruption_status_Valid() const;

    QString getDisruptionType() const;
    void setDisruptionType(const QString &disruption_type);
    bool is_disruption_type_Set() const;
    bool is_disruption_type_Valid() const;

    QDateTime getFromDate() const;
    void setFromDate(const QDateTime &from_date);
    bool is_from_date_Set() const;
    bool is_from_date_Valid() const;

    QDateTime getLastUpdated() const;
    void setLastUpdated(const QDateTime &last_updated);
    bool is_last_updated_Set() const;
    bool is_last_updated_Valid() const;

    QDateTime getPublishedOn() const;
    void setPublishedOn(const QDateTime &published_on);
    bool is_published_on_Set() const;
    bool is_published_on_Valid() const;

    QList<OAIV3_DisruptionRoute> getRoutes() const;
    void setRoutes(const QList<OAIV3_DisruptionRoute> &routes);
    bool is_routes_Set() const;
    bool is_routes_Valid() const;

    QList<OAIV3_DisruptionStop> getStops() const;
    void setStops(const QList<OAIV3_DisruptionStop> &stops);
    bool is_stops_Set() const;
    bool is_stops_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    QDateTime getToDate() const;
    void setToDate(const QDateTime &to_date);
    bool is_to_date_Set() const;
    bool is_to_date_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_colour;
    bool m_colour_isSet;
    bool m_colour_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    bool m_display_on_board;
    bool m_display_on_board_isSet;
    bool m_display_on_board_isValid;

    bool m_display_status;
    bool m_display_status_isSet;
    bool m_display_status_isValid;

    qint64 m_disruption_id;
    bool m_disruption_id_isSet;
    bool m_disruption_id_isValid;

    QString m_disruption_status;
    bool m_disruption_status_isSet;
    bool m_disruption_status_isValid;

    QString m_disruption_type;
    bool m_disruption_type_isSet;
    bool m_disruption_type_isValid;

    QDateTime m_from_date;
    bool m_from_date_isSet;
    bool m_from_date_isValid;

    QDateTime m_last_updated;
    bool m_last_updated_isSet;
    bool m_last_updated_isValid;

    QDateTime m_published_on;
    bool m_published_on_isSet;
    bool m_published_on_isValid;

    QList<OAIV3_DisruptionRoute> m_routes;
    bool m_routes_isSet;
    bool m_routes_isValid;

    QList<OAIV3_DisruptionStop> m_stops;
    bool m_stops_isSet;
    bool m_stops_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;

    QDateTime m_to_date;
    bool m_to_date_isSet;
    bool m_to_date_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIV3_Disruption)

#endif // OAIV3_Disruption_H
