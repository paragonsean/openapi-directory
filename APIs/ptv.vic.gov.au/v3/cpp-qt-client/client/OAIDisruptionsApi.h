/**
 * PTV Timetable API - Version 3
 * The PTV Timetable API provides direct access to Public Transport Victoriaâ€™s public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * Documentation for Version 2 of the PTV Timetable API  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.    Credits: This page has been based on Steve Bennett's http://opentransportdata.org/, used with permission.  
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDisruptionsApi_H
#define OAI_OAIDisruptionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIV3_DisruptionModesResponse.h"
#include "OAIV3_DisruptionResponse.h"
#include "OAIV3_DisruptionsResponse.h"
#include "OAIV3_ErrorResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDisruptionsApi : public QObject {
    Q_OBJECT

public:
    OAIDisruptionsApi(const int timeOut = 0);
    ~OAIDisruptionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  route_types QList<qint32> [optional]
    * @param[in]  disruption_modes QList<qint32> [optional]
    * @param[in]  disruption_status QString [optional]
    * @param[in]  token QString [optional]
    * @param[in]  devid QString [optional]
    * @param[in]  signature QString [optional]
    */
    virtual void disruptionsGetAllDisruptions(const ::OpenAPI::OptionalParam<QList<qint32>> &route_types = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &disruption_modes = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QString> &disruption_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &devid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &signature = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  disruption_id qint64 [required]
    * @param[in]  token QString [optional]
    * @param[in]  devid QString [optional]
    * @param[in]  signature QString [optional]
    */
    virtual void disruptionsGetDisruptionById(const qint64 &disruption_id, const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &devid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &signature = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [optional]
    * @param[in]  devid QString [optional]
    * @param[in]  signature QString [optional]
    */
    virtual void disruptionsGetDisruptionModes(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &devid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &signature = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  route_id qint32 [required]
    * @param[in]  disruption_status QString [optional]
    * @param[in]  token QString [optional]
    * @param[in]  devid QString [optional]
    * @param[in]  signature QString [optional]
    */
    virtual void disruptionsGetDisruptionsByRoute(const qint32 &route_id, const ::OpenAPI::OptionalParam<QString> &disruption_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &devid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &signature = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  route_id qint32 [required]
    * @param[in]  stop_id qint32 [required]
    * @param[in]  disruption_status QString [optional]
    * @param[in]  token QString [optional]
    * @param[in]  devid QString [optional]
    * @param[in]  signature QString [optional]
    */
    virtual void disruptionsGetDisruptionsByRouteAndStop(const qint32 &route_id, const qint32 &stop_id, const ::OpenAPI::OptionalParam<QString> &disruption_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &devid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &signature = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  stop_id qint32 [required]
    * @param[in]  disruption_status QString [optional]
    * @param[in]  token QString [optional]
    * @param[in]  devid QString [optional]
    * @param[in]  signature QString [optional]
    */
    virtual void disruptionsGetDisruptionsByStop(const qint32 &stop_id, const ::OpenAPI::OptionalParam<QString> &disruption_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &devid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &signature = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void disruptionsGetAllDisruptionsCallback(OAIHttpRequestWorker *worker);
    void disruptionsGetDisruptionByIdCallback(OAIHttpRequestWorker *worker);
    void disruptionsGetDisruptionModesCallback(OAIHttpRequestWorker *worker);
    void disruptionsGetDisruptionsByRouteCallback(OAIHttpRequestWorker *worker);
    void disruptionsGetDisruptionsByRouteAndStopCallback(OAIHttpRequestWorker *worker);
    void disruptionsGetDisruptionsByStopCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void disruptionsGetAllDisruptionsSignal(OAIV3_DisruptionsResponse summary);
    void disruptionsGetDisruptionByIdSignal(OAIV3_DisruptionResponse summary);
    void disruptionsGetDisruptionModesSignal(OAIV3_DisruptionModesResponse summary);
    void disruptionsGetDisruptionsByRouteSignal(OAIV3_DisruptionsResponse summary);
    void disruptionsGetDisruptionsByRouteAndStopSignal(OAIV3_DisruptionsResponse summary);
    void disruptionsGetDisruptionsByStopSignal(OAIV3_DisruptionsResponse summary);


    void disruptionsGetAllDisruptionsSignalFull(OAIHttpRequestWorker *worker, OAIV3_DisruptionsResponse summary);
    void disruptionsGetDisruptionByIdSignalFull(OAIHttpRequestWorker *worker, OAIV3_DisruptionResponse summary);
    void disruptionsGetDisruptionModesSignalFull(OAIHttpRequestWorker *worker, OAIV3_DisruptionModesResponse summary);
    void disruptionsGetDisruptionsByRouteSignalFull(OAIHttpRequestWorker *worker, OAIV3_DisruptionsResponse summary);
    void disruptionsGetDisruptionsByRouteAndStopSignalFull(OAIHttpRequestWorker *worker, OAIV3_DisruptionsResponse summary);
    void disruptionsGetDisruptionsByStopSignalFull(OAIHttpRequestWorker *worker, OAIV3_DisruptionsResponse summary);

    Q_DECL_DEPRECATED_X("Use disruptionsGetAllDisruptionsSignalError() instead")
    void disruptionsGetAllDisruptionsSignalE(OAIV3_DisruptionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void disruptionsGetAllDisruptionsSignalError(OAIV3_DisruptionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disruptionsGetDisruptionByIdSignalError() instead")
    void disruptionsGetDisruptionByIdSignalE(OAIV3_DisruptionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void disruptionsGetDisruptionByIdSignalError(OAIV3_DisruptionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disruptionsGetDisruptionModesSignalError() instead")
    void disruptionsGetDisruptionModesSignalE(OAIV3_DisruptionModesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void disruptionsGetDisruptionModesSignalError(OAIV3_DisruptionModesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disruptionsGetDisruptionsByRouteSignalError() instead")
    void disruptionsGetDisruptionsByRouteSignalE(OAIV3_DisruptionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void disruptionsGetDisruptionsByRouteSignalError(OAIV3_DisruptionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disruptionsGetDisruptionsByRouteAndStopSignalError() instead")
    void disruptionsGetDisruptionsByRouteAndStopSignalE(OAIV3_DisruptionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void disruptionsGetDisruptionsByRouteAndStopSignalError(OAIV3_DisruptionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disruptionsGetDisruptionsByStopSignalError() instead")
    void disruptionsGetDisruptionsByStopSignalE(OAIV3_DisruptionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void disruptionsGetDisruptionsByStopSignalError(OAIV3_DisruptionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use disruptionsGetAllDisruptionsSignalErrorFull() instead")
    void disruptionsGetAllDisruptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disruptionsGetAllDisruptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disruptionsGetDisruptionByIdSignalErrorFull() instead")
    void disruptionsGetDisruptionByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disruptionsGetDisruptionByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disruptionsGetDisruptionModesSignalErrorFull() instead")
    void disruptionsGetDisruptionModesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disruptionsGetDisruptionModesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disruptionsGetDisruptionsByRouteSignalErrorFull() instead")
    void disruptionsGetDisruptionsByRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disruptionsGetDisruptionsByRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disruptionsGetDisruptionsByRouteAndStopSignalErrorFull() instead")
    void disruptionsGetDisruptionsByRouteAndStopSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disruptionsGetDisruptionsByRouteAndStopSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disruptionsGetDisruptionsByStopSignalErrorFull() instead")
    void disruptionsGetDisruptionsByStopSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disruptionsGetDisruptionsByStopSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
