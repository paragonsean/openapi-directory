/**
 * PTV Timetable API - Version 3
 * The PTV Timetable API provides direct access to Public Transport Victoriaâ€™s public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * Documentation for Version 2 of the PTV Timetable API  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.    Credits: This page has been based on Steve Bennett's http://opentransportdata.org/, used with permission.  
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIV3_VehiclePosition.h
 *
 * 
 */

#ifndef OAIV3_VehiclePosition_H
#define OAIV3_VehiclePosition_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIV3_VehiclePosition : public OAIObject {
public:
    OAIV3_VehiclePosition();
    OAIV3_VehiclePosition(QString json);
    ~OAIV3_VehiclePosition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getBearing() const;
    void setBearing(const double &bearing);
    bool is_bearing_Set() const;
    bool is_bearing_Valid() const;

    QDateTime getDatetimeUtc() const;
    void setDatetimeUtc(const QDateTime &datetime_utc);
    bool is_datetime_utc_Set() const;
    bool is_datetime_utc_Valid() const;

    QString getDirection() const;
    void setDirection(const QString &direction);
    bool is_direction_Set() const;
    bool is_direction_Valid() const;

    double getEasting() const;
    void setEasting(const double &easting);
    bool is_easting_Set() const;
    bool is_easting_Valid() const;

    QDateTime getExpiryTime() const;
    void setExpiryTime(const QDateTime &expiry_time);
    bool is_expiry_time_Set() const;
    bool is_expiry_time_Valid() const;

    double getLatitude() const;
    void setLatitude(const double &latitude);
    bool is_latitude_Set() const;
    bool is_latitude_Valid() const;

    double getLongitude() const;
    void setLongitude(const double &longitude);
    bool is_longitude_Set() const;
    bool is_longitude_Valid() const;

    double getNorthing() const;
    void setNorthing(const double &northing);
    bool is_northing_Set() const;
    bool is_northing_Valid() const;

    QString getSupplier() const;
    void setSupplier(const QString &supplier);
    bool is_supplier_Set() const;
    bool is_supplier_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_bearing;
    bool m_bearing_isSet;
    bool m_bearing_isValid;

    QDateTime m_datetime_utc;
    bool m_datetime_utc_isSet;
    bool m_datetime_utc_isValid;

    QString m_direction;
    bool m_direction_isSet;
    bool m_direction_isValid;

    double m_easting;
    bool m_easting_isSet;
    bool m_easting_isValid;

    QDateTime m_expiry_time;
    bool m_expiry_time_isSet;
    bool m_expiry_time_isValid;

    double m_latitude;
    bool m_latitude_isSet;
    bool m_latitude_isValid;

    double m_longitude;
    bool m_longitude_isSet;
    bool m_longitude_isValid;

    double m_northing;
    bool m_northing_isSet;
    bool m_northing_isValid;

    QString m_supplier;
    bool m_supplier_isSet;
    bool m_supplier_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIV3_VehiclePosition)

#endif // OAIV3_VehiclePosition_H
