/**
 * PTV Timetable API - Version 3
 * The PTV Timetable API provides direct access to Public Transport Victoriaâ€™s public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * Documentation for Version 2 of the PTV Timetable API  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.    Credits: This page has been based on Steve Bennett's http://opentransportdata.org/, used with permission.  
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIV3_SiriProductionTimetableSubscriptionRequest.h
 *
 * 
 */

#ifndef OAIV3_SiriProductionTimetableSubscriptionRequest_H
#define OAIV3_SiriProductionTimetableSubscriptionRequest_H

#include <QJsonObject>

#include "OAIV3_SiriSubscriptionTopic.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIV3_SiriSubscriptionTopic;

class OAIV3_SiriProductionTimetableSubscriptionRequest : public OAIObject {
public:
    OAIV3_SiriProductionTimetableSubscriptionRequest();
    OAIV3_SiriProductionTimetableSubscriptionRequest(QString json);
    ~OAIV3_SiriProductionTimetableSubscriptionRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getConsumerAddress() const;
    void setConsumerAddress(const QString &consumer_address);
    bool is_consumer_address_Set() const;
    bool is_consumer_address_Valid() const;

    QDateTime getEndTime() const;
    void setEndTime(const QDateTime &end_time);
    bool is_end_time_Set() const;
    bool is_end_time_Valid() const;

    QDateTime getInitialTerminationTime() const;
    void setInitialTerminationTime(const QDateTime &initial_termination_time);
    bool is_initial_termination_time_Set() const;
    bool is_initial_termination_time_Valid() const;

    qint32 getSiriFormat() const;
    void setSiriFormat(const qint32 &siri_format);
    bool is_siri_format_Set() const;
    bool is_siri_format_Valid() const;

    QString getSiriVersion() const;
    void setSiriVersion(const QString &siri_version);
    bool is_siri_version_Set() const;
    bool is_siri_version_Valid() const;

    QDateTime getStartTime() const;
    void setStartTime(const QDateTime &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    QString getSubscriberRef() const;
    void setSubscriberRef(const QString &subscriber_ref);
    bool is_subscriber_ref_Set() const;
    bool is_subscriber_ref_Valid() const;

    QString getSubscriptionRef() const;
    void setSubscriptionRef(const QString &subscription_ref);
    bool is_subscription_ref_Set() const;
    bool is_subscription_ref_Valid() const;

    QList<OAIV3_SiriSubscriptionTopic> getTopics() const;
    void setTopics(const QList<OAIV3_SiriSubscriptionTopic> &topics);
    bool is_topics_Set() const;
    bool is_topics_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_consumer_address;
    bool m_consumer_address_isSet;
    bool m_consumer_address_isValid;

    QDateTime m_end_time;
    bool m_end_time_isSet;
    bool m_end_time_isValid;

    QDateTime m_initial_termination_time;
    bool m_initial_termination_time_isSet;
    bool m_initial_termination_time_isValid;

    qint32 m_siri_format;
    bool m_siri_format_isSet;
    bool m_siri_format_isValid;

    QString m_siri_version;
    bool m_siri_version_isSet;
    bool m_siri_version_isValid;

    QDateTime m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;

    QString m_subscriber_ref;
    bool m_subscriber_ref_isSet;
    bool m_subscriber_ref_isValid;

    QString m_subscription_ref;
    bool m_subscription_ref_isSet;
    bool m_subscription_ref_isValid;

    QList<OAIV3_SiriSubscriptionTopic> m_topics;
    bool m_topics_isSet;
    bool m_topics_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIV3_SiriProductionTimetableSubscriptionRequest)

#endif // OAIV3_SiriProductionTimetableSubscriptionRequest_H
