/**
 * PTV Timetable API - Version 3
 * The PTV Timetable API provides direct access to Public Transport Victoriaâ€™s public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * Documentation for Version 2 of the PTV Timetable API  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.    Credits: This page has been based on Steve Bennett's http://opentransportdata.org/, used with permission.  
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIV3_ResultOutlet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIV3_ResultOutlet::OAIV3_ResultOutlet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIV3_ResultOutlet::OAIV3_ResultOutlet() {
    this->initializeModel();
}

OAIV3_ResultOutlet::~OAIV3_ResultOutlet() {}

void OAIV3_ResultOutlet::initializeModel() {

    m_outlet_business_isSet = false;
    m_outlet_business_isValid = false;

    m_outlet_business_hour_fri_isSet = false;
    m_outlet_business_hour_fri_isValid = false;

    m_outlet_business_hour_mon_isSet = false;
    m_outlet_business_hour_mon_isValid = false;

    m_outlet_business_hour_sat_isSet = false;
    m_outlet_business_hour_sat_isValid = false;

    m_outlet_business_hour_sun_isSet = false;
    m_outlet_business_hour_sun_isValid = false;

    m_outlet_business_hour_thur_isSet = false;
    m_outlet_business_hour_thur_isValid = false;

    m_outlet_business_hour_tue_isSet = false;
    m_outlet_business_hour_tue_isValid = false;

    m_outlet_business_hour_wed_isSet = false;
    m_outlet_business_hour_wed_isValid = false;

    m_outlet_distance_isSet = false;
    m_outlet_distance_isValid = false;

    m_outlet_latitude_isSet = false;
    m_outlet_latitude_isValid = false;

    m_outlet_longitude_isSet = false;
    m_outlet_longitude_isValid = false;

    m_outlet_name_isSet = false;
    m_outlet_name_isValid = false;

    m_outlet_notes_isSet = false;
    m_outlet_notes_isValid = false;

    m_outlet_postcode_isSet = false;
    m_outlet_postcode_isValid = false;

    m_outlet_slid_spid_isSet = false;
    m_outlet_slid_spid_isValid = false;

    m_outlet_suburb_isSet = false;
    m_outlet_suburb_isValid = false;
}

void OAIV3_ResultOutlet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIV3_ResultOutlet::fromJsonObject(QJsonObject json) {

    m_outlet_business_isValid = ::OpenAPI::fromJsonValue(m_outlet_business, json[QString("outlet_business")]);
    m_outlet_business_isSet = !json[QString("outlet_business")].isNull() && m_outlet_business_isValid;

    m_outlet_business_hour_fri_isValid = ::OpenAPI::fromJsonValue(m_outlet_business_hour_fri, json[QString("outlet_business_hour_fri")]);
    m_outlet_business_hour_fri_isSet = !json[QString("outlet_business_hour_fri")].isNull() && m_outlet_business_hour_fri_isValid;

    m_outlet_business_hour_mon_isValid = ::OpenAPI::fromJsonValue(m_outlet_business_hour_mon, json[QString("outlet_business_hour_mon")]);
    m_outlet_business_hour_mon_isSet = !json[QString("outlet_business_hour_mon")].isNull() && m_outlet_business_hour_mon_isValid;

    m_outlet_business_hour_sat_isValid = ::OpenAPI::fromJsonValue(m_outlet_business_hour_sat, json[QString("outlet_business_hour_sat")]);
    m_outlet_business_hour_sat_isSet = !json[QString("outlet_business_hour_sat")].isNull() && m_outlet_business_hour_sat_isValid;

    m_outlet_business_hour_sun_isValid = ::OpenAPI::fromJsonValue(m_outlet_business_hour_sun, json[QString("outlet_business_hour_sun")]);
    m_outlet_business_hour_sun_isSet = !json[QString("outlet_business_hour_sun")].isNull() && m_outlet_business_hour_sun_isValid;

    m_outlet_business_hour_thur_isValid = ::OpenAPI::fromJsonValue(m_outlet_business_hour_thur, json[QString("outlet_business_hour_thur")]);
    m_outlet_business_hour_thur_isSet = !json[QString("outlet_business_hour_thur")].isNull() && m_outlet_business_hour_thur_isValid;

    m_outlet_business_hour_tue_isValid = ::OpenAPI::fromJsonValue(m_outlet_business_hour_tue, json[QString("outlet_business_hour_tue")]);
    m_outlet_business_hour_tue_isSet = !json[QString("outlet_business_hour_tue")].isNull() && m_outlet_business_hour_tue_isValid;

    m_outlet_business_hour_wed_isValid = ::OpenAPI::fromJsonValue(m_outlet_business_hour_wed, json[QString("outlet_business_hour_wed")]);
    m_outlet_business_hour_wed_isSet = !json[QString("outlet_business_hour_wed")].isNull() && m_outlet_business_hour_wed_isValid;

    m_outlet_distance_isValid = ::OpenAPI::fromJsonValue(m_outlet_distance, json[QString("outlet_distance")]);
    m_outlet_distance_isSet = !json[QString("outlet_distance")].isNull() && m_outlet_distance_isValid;

    m_outlet_latitude_isValid = ::OpenAPI::fromJsonValue(m_outlet_latitude, json[QString("outlet_latitude")]);
    m_outlet_latitude_isSet = !json[QString("outlet_latitude")].isNull() && m_outlet_latitude_isValid;

    m_outlet_longitude_isValid = ::OpenAPI::fromJsonValue(m_outlet_longitude, json[QString("outlet_longitude")]);
    m_outlet_longitude_isSet = !json[QString("outlet_longitude")].isNull() && m_outlet_longitude_isValid;

    m_outlet_name_isValid = ::OpenAPI::fromJsonValue(m_outlet_name, json[QString("outlet_name")]);
    m_outlet_name_isSet = !json[QString("outlet_name")].isNull() && m_outlet_name_isValid;

    m_outlet_notes_isValid = ::OpenAPI::fromJsonValue(m_outlet_notes, json[QString("outlet_notes")]);
    m_outlet_notes_isSet = !json[QString("outlet_notes")].isNull() && m_outlet_notes_isValid;

    m_outlet_postcode_isValid = ::OpenAPI::fromJsonValue(m_outlet_postcode, json[QString("outlet_postcode")]);
    m_outlet_postcode_isSet = !json[QString("outlet_postcode")].isNull() && m_outlet_postcode_isValid;

    m_outlet_slid_spid_isValid = ::OpenAPI::fromJsonValue(m_outlet_slid_spid, json[QString("outlet_slid_spid")]);
    m_outlet_slid_spid_isSet = !json[QString("outlet_slid_spid")].isNull() && m_outlet_slid_spid_isValid;

    m_outlet_suburb_isValid = ::OpenAPI::fromJsonValue(m_outlet_suburb, json[QString("outlet_suburb")]);
    m_outlet_suburb_isSet = !json[QString("outlet_suburb")].isNull() && m_outlet_suburb_isValid;
}

QString OAIV3_ResultOutlet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIV3_ResultOutlet::asJsonObject() const {
    QJsonObject obj;
    if (m_outlet_business_isSet) {
        obj.insert(QString("outlet_business"), ::OpenAPI::toJsonValue(m_outlet_business));
    }
    if (m_outlet_business_hour_fri_isSet) {
        obj.insert(QString("outlet_business_hour_fri"), ::OpenAPI::toJsonValue(m_outlet_business_hour_fri));
    }
    if (m_outlet_business_hour_mon_isSet) {
        obj.insert(QString("outlet_business_hour_mon"), ::OpenAPI::toJsonValue(m_outlet_business_hour_mon));
    }
    if (m_outlet_business_hour_sat_isSet) {
        obj.insert(QString("outlet_business_hour_sat"), ::OpenAPI::toJsonValue(m_outlet_business_hour_sat));
    }
    if (m_outlet_business_hour_sun_isSet) {
        obj.insert(QString("outlet_business_hour_sun"), ::OpenAPI::toJsonValue(m_outlet_business_hour_sun));
    }
    if (m_outlet_business_hour_thur_isSet) {
        obj.insert(QString("outlet_business_hour_thur"), ::OpenAPI::toJsonValue(m_outlet_business_hour_thur));
    }
    if (m_outlet_business_hour_tue_isSet) {
        obj.insert(QString("outlet_business_hour_tue"), ::OpenAPI::toJsonValue(m_outlet_business_hour_tue));
    }
    if (m_outlet_business_hour_wed_isSet) {
        obj.insert(QString("outlet_business_hour_wed"), ::OpenAPI::toJsonValue(m_outlet_business_hour_wed));
    }
    if (m_outlet_distance_isSet) {
        obj.insert(QString("outlet_distance"), ::OpenAPI::toJsonValue(m_outlet_distance));
    }
    if (m_outlet_latitude_isSet) {
        obj.insert(QString("outlet_latitude"), ::OpenAPI::toJsonValue(m_outlet_latitude));
    }
    if (m_outlet_longitude_isSet) {
        obj.insert(QString("outlet_longitude"), ::OpenAPI::toJsonValue(m_outlet_longitude));
    }
    if (m_outlet_name_isSet) {
        obj.insert(QString("outlet_name"), ::OpenAPI::toJsonValue(m_outlet_name));
    }
    if (m_outlet_notes_isSet) {
        obj.insert(QString("outlet_notes"), ::OpenAPI::toJsonValue(m_outlet_notes));
    }
    if (m_outlet_postcode_isSet) {
        obj.insert(QString("outlet_postcode"), ::OpenAPI::toJsonValue(m_outlet_postcode));
    }
    if (m_outlet_slid_spid_isSet) {
        obj.insert(QString("outlet_slid_spid"), ::OpenAPI::toJsonValue(m_outlet_slid_spid));
    }
    if (m_outlet_suburb_isSet) {
        obj.insert(QString("outlet_suburb"), ::OpenAPI::toJsonValue(m_outlet_suburb));
    }
    return obj;
}

QString OAIV3_ResultOutlet::getOutletBusiness() const {
    return m_outlet_business;
}
void OAIV3_ResultOutlet::setOutletBusiness(const QString &outlet_business) {
    m_outlet_business = outlet_business;
    m_outlet_business_isSet = true;
}

bool OAIV3_ResultOutlet::is_outlet_business_Set() const{
    return m_outlet_business_isSet;
}

bool OAIV3_ResultOutlet::is_outlet_business_Valid() const{
    return m_outlet_business_isValid;
}

QString OAIV3_ResultOutlet::getOutletBusinessHourFri() const {
    return m_outlet_business_hour_fri;
}
void OAIV3_ResultOutlet::setOutletBusinessHourFri(const QString &outlet_business_hour_fri) {
    m_outlet_business_hour_fri = outlet_business_hour_fri;
    m_outlet_business_hour_fri_isSet = true;
}

bool OAIV3_ResultOutlet::is_outlet_business_hour_fri_Set() const{
    return m_outlet_business_hour_fri_isSet;
}

bool OAIV3_ResultOutlet::is_outlet_business_hour_fri_Valid() const{
    return m_outlet_business_hour_fri_isValid;
}

QString OAIV3_ResultOutlet::getOutletBusinessHourMon() const {
    return m_outlet_business_hour_mon;
}
void OAIV3_ResultOutlet::setOutletBusinessHourMon(const QString &outlet_business_hour_mon) {
    m_outlet_business_hour_mon = outlet_business_hour_mon;
    m_outlet_business_hour_mon_isSet = true;
}

bool OAIV3_ResultOutlet::is_outlet_business_hour_mon_Set() const{
    return m_outlet_business_hour_mon_isSet;
}

bool OAIV3_ResultOutlet::is_outlet_business_hour_mon_Valid() const{
    return m_outlet_business_hour_mon_isValid;
}

QString OAIV3_ResultOutlet::getOutletBusinessHourSat() const {
    return m_outlet_business_hour_sat;
}
void OAIV3_ResultOutlet::setOutletBusinessHourSat(const QString &outlet_business_hour_sat) {
    m_outlet_business_hour_sat = outlet_business_hour_sat;
    m_outlet_business_hour_sat_isSet = true;
}

bool OAIV3_ResultOutlet::is_outlet_business_hour_sat_Set() const{
    return m_outlet_business_hour_sat_isSet;
}

bool OAIV3_ResultOutlet::is_outlet_business_hour_sat_Valid() const{
    return m_outlet_business_hour_sat_isValid;
}

QString OAIV3_ResultOutlet::getOutletBusinessHourSun() const {
    return m_outlet_business_hour_sun;
}
void OAIV3_ResultOutlet::setOutletBusinessHourSun(const QString &outlet_business_hour_sun) {
    m_outlet_business_hour_sun = outlet_business_hour_sun;
    m_outlet_business_hour_sun_isSet = true;
}

bool OAIV3_ResultOutlet::is_outlet_business_hour_sun_Set() const{
    return m_outlet_business_hour_sun_isSet;
}

bool OAIV3_ResultOutlet::is_outlet_business_hour_sun_Valid() const{
    return m_outlet_business_hour_sun_isValid;
}

QString OAIV3_ResultOutlet::getOutletBusinessHourThur() const {
    return m_outlet_business_hour_thur;
}
void OAIV3_ResultOutlet::setOutletBusinessHourThur(const QString &outlet_business_hour_thur) {
    m_outlet_business_hour_thur = outlet_business_hour_thur;
    m_outlet_business_hour_thur_isSet = true;
}

bool OAIV3_ResultOutlet::is_outlet_business_hour_thur_Set() const{
    return m_outlet_business_hour_thur_isSet;
}

bool OAIV3_ResultOutlet::is_outlet_business_hour_thur_Valid() const{
    return m_outlet_business_hour_thur_isValid;
}

QString OAIV3_ResultOutlet::getOutletBusinessHourTue() const {
    return m_outlet_business_hour_tue;
}
void OAIV3_ResultOutlet::setOutletBusinessHourTue(const QString &outlet_business_hour_tue) {
    m_outlet_business_hour_tue = outlet_business_hour_tue;
    m_outlet_business_hour_tue_isSet = true;
}

bool OAIV3_ResultOutlet::is_outlet_business_hour_tue_Set() const{
    return m_outlet_business_hour_tue_isSet;
}

bool OAIV3_ResultOutlet::is_outlet_business_hour_tue_Valid() const{
    return m_outlet_business_hour_tue_isValid;
}

QString OAIV3_ResultOutlet::getOutletBusinessHourWed() const {
    return m_outlet_business_hour_wed;
}
void OAIV3_ResultOutlet::setOutletBusinessHourWed(const QString &outlet_business_hour_wed) {
    m_outlet_business_hour_wed = outlet_business_hour_wed;
    m_outlet_business_hour_wed_isSet = true;
}

bool OAIV3_ResultOutlet::is_outlet_business_hour_wed_Set() const{
    return m_outlet_business_hour_wed_isSet;
}

bool OAIV3_ResultOutlet::is_outlet_business_hour_wed_Valid() const{
    return m_outlet_business_hour_wed_isValid;
}

float OAIV3_ResultOutlet::getOutletDistance() const {
    return m_outlet_distance;
}
void OAIV3_ResultOutlet::setOutletDistance(const float &outlet_distance) {
    m_outlet_distance = outlet_distance;
    m_outlet_distance_isSet = true;
}

bool OAIV3_ResultOutlet::is_outlet_distance_Set() const{
    return m_outlet_distance_isSet;
}

bool OAIV3_ResultOutlet::is_outlet_distance_Valid() const{
    return m_outlet_distance_isValid;
}

float OAIV3_ResultOutlet::getOutletLatitude() const {
    return m_outlet_latitude;
}
void OAIV3_ResultOutlet::setOutletLatitude(const float &outlet_latitude) {
    m_outlet_latitude = outlet_latitude;
    m_outlet_latitude_isSet = true;
}

bool OAIV3_ResultOutlet::is_outlet_latitude_Set() const{
    return m_outlet_latitude_isSet;
}

bool OAIV3_ResultOutlet::is_outlet_latitude_Valid() const{
    return m_outlet_latitude_isValid;
}

float OAIV3_ResultOutlet::getOutletLongitude() const {
    return m_outlet_longitude;
}
void OAIV3_ResultOutlet::setOutletLongitude(const float &outlet_longitude) {
    m_outlet_longitude = outlet_longitude;
    m_outlet_longitude_isSet = true;
}

bool OAIV3_ResultOutlet::is_outlet_longitude_Set() const{
    return m_outlet_longitude_isSet;
}

bool OAIV3_ResultOutlet::is_outlet_longitude_Valid() const{
    return m_outlet_longitude_isValid;
}

QString OAIV3_ResultOutlet::getOutletName() const {
    return m_outlet_name;
}
void OAIV3_ResultOutlet::setOutletName(const QString &outlet_name) {
    m_outlet_name = outlet_name;
    m_outlet_name_isSet = true;
}

bool OAIV3_ResultOutlet::is_outlet_name_Set() const{
    return m_outlet_name_isSet;
}

bool OAIV3_ResultOutlet::is_outlet_name_Valid() const{
    return m_outlet_name_isValid;
}

QString OAIV3_ResultOutlet::getOutletNotes() const {
    return m_outlet_notes;
}
void OAIV3_ResultOutlet::setOutletNotes(const QString &outlet_notes) {
    m_outlet_notes = outlet_notes;
    m_outlet_notes_isSet = true;
}

bool OAIV3_ResultOutlet::is_outlet_notes_Set() const{
    return m_outlet_notes_isSet;
}

bool OAIV3_ResultOutlet::is_outlet_notes_Valid() const{
    return m_outlet_notes_isValid;
}

qint32 OAIV3_ResultOutlet::getOutletPostcode() const {
    return m_outlet_postcode;
}
void OAIV3_ResultOutlet::setOutletPostcode(const qint32 &outlet_postcode) {
    m_outlet_postcode = outlet_postcode;
    m_outlet_postcode_isSet = true;
}

bool OAIV3_ResultOutlet::is_outlet_postcode_Set() const{
    return m_outlet_postcode_isSet;
}

bool OAIV3_ResultOutlet::is_outlet_postcode_Valid() const{
    return m_outlet_postcode_isValid;
}

QString OAIV3_ResultOutlet::getOutletSlidSpid() const {
    return m_outlet_slid_spid;
}
void OAIV3_ResultOutlet::setOutletSlidSpid(const QString &outlet_slid_spid) {
    m_outlet_slid_spid = outlet_slid_spid;
    m_outlet_slid_spid_isSet = true;
}

bool OAIV3_ResultOutlet::is_outlet_slid_spid_Set() const{
    return m_outlet_slid_spid_isSet;
}

bool OAIV3_ResultOutlet::is_outlet_slid_spid_Valid() const{
    return m_outlet_slid_spid_isValid;
}

QString OAIV3_ResultOutlet::getOutletSuburb() const {
    return m_outlet_suburb;
}
void OAIV3_ResultOutlet::setOutletSuburb(const QString &outlet_suburb) {
    m_outlet_suburb = outlet_suburb;
    m_outlet_suburb_isSet = true;
}

bool OAIV3_ResultOutlet::is_outlet_suburb_Set() const{
    return m_outlet_suburb_isSet;
}

bool OAIV3_ResultOutlet::is_outlet_suburb_Valid() const{
    return m_outlet_suburb_isValid;
}

bool OAIV3_ResultOutlet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_outlet_business_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outlet_business_hour_fri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outlet_business_hour_mon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outlet_business_hour_sat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outlet_business_hour_sun_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outlet_business_hour_thur_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outlet_business_hour_tue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outlet_business_hour_wed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outlet_distance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outlet_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outlet_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outlet_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outlet_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outlet_postcode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outlet_slid_spid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outlet_suburb_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIV3_ResultOutlet::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
