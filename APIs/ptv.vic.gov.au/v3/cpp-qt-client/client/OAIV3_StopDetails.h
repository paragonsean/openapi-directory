/**
 * PTV Timetable API - Version 3
 * The PTV Timetable API provides direct access to Public Transport Victoriaâ€™s public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * Documentation for Version 2 of the PTV Timetable API  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.    Credits: This page has been based on Steve Bennett's http://opentransportdata.org/, used with permission.  
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIV3_StopDetails.h
 *
 * 
 */

#ifndef OAIV3_StopDetails_H
#define OAIV3_StopDetails_H

#include <QJsonObject>

#include "OAIObject.h"
#include "OAIV3_StopAccessibility.h"
#include "OAIV3_StopAmenityDetails.h"
#include "OAIV3_StopLocation.h"
#include "OAIV3_StopStaffing.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIV3_StopAccessibility;
class OAIV3_StopAmenityDetails;
class OAIV3_StopLocation;
class OAIV3_StopStaffing;

class OAIV3_StopDetails : public OAIObject {
public:
    OAIV3_StopDetails();
    OAIV3_StopDetails(QString json);
    ~OAIV3_StopDetails() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<qint64> getDisruptionIds() const;
    void setDisruptionIds(const QList<qint64> &disruption_ids);
    bool is_disruption_ids_Set() const;
    bool is_disruption_ids_Valid() const;

    qint32 getRouteType() const;
    void setRouteType(const qint32 &route_type);
    bool is_route_type_Set() const;
    bool is_route_type_Valid() const;

    QList<OAIObject> getRoutes() const;
    void setRoutes(const QList<OAIObject> &routes);
    bool is_routes_Set() const;
    bool is_routes_Valid() const;

    QString getStationDescription() const;
    void setStationDescription(const QString &station_description);
    bool is_station_description_Set() const;
    bool is_station_description_Valid() const;

    QString getStationType() const;
    void setStationType(const QString &station_type);
    bool is_station_type_Set() const;
    bool is_station_type_Valid() const;

    OAIV3_StopAccessibility getStopAccessibility() const;
    void setStopAccessibility(const OAIV3_StopAccessibility &stop_accessibility);
    bool is_stop_accessibility_Set() const;
    bool is_stop_accessibility_Valid() const;

    OAIV3_StopAmenityDetails getStopAmenities() const;
    void setStopAmenities(const OAIV3_StopAmenityDetails &stop_amenities);
    bool is_stop_amenities_Set() const;
    bool is_stop_amenities_Valid() const;

    qint32 getStopId() const;
    void setStopId(const qint32 &stop_id);
    bool is_stop_id_Set() const;
    bool is_stop_id_Valid() const;

    QString getStopLandmark() const;
    void setStopLandmark(const QString &stop_landmark);
    bool is_stop_landmark_Set() const;
    bool is_stop_landmark_Valid() const;

    OAIV3_StopLocation getStopLocation() const;
    void setStopLocation(const OAIV3_StopLocation &stop_location);
    bool is_stop_location_Set() const;
    bool is_stop_location_Valid() const;

    QString getStopName() const;
    void setStopName(const QString &stop_name);
    bool is_stop_name_Set() const;
    bool is_stop_name_Valid() const;

    OAIV3_StopStaffing getStopStaffing() const;
    void setStopStaffing(const OAIV3_StopStaffing &stop_staffing);
    bool is_stop_staffing_Set() const;
    bool is_stop_staffing_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<qint64> m_disruption_ids;
    bool m_disruption_ids_isSet;
    bool m_disruption_ids_isValid;

    qint32 m_route_type;
    bool m_route_type_isSet;
    bool m_route_type_isValid;

    QList<OAIObject> m_routes;
    bool m_routes_isSet;
    bool m_routes_isValid;

    QString m_station_description;
    bool m_station_description_isSet;
    bool m_station_description_isValid;

    QString m_station_type;
    bool m_station_type_isSet;
    bool m_station_type_isValid;

    OAIV3_StopAccessibility m_stop_accessibility;
    bool m_stop_accessibility_isSet;
    bool m_stop_accessibility_isValid;

    OAIV3_StopAmenityDetails m_stop_amenities;
    bool m_stop_amenities_isSet;
    bool m_stop_amenities_isValid;

    qint32 m_stop_id;
    bool m_stop_id_isSet;
    bool m_stop_id_isValid;

    QString m_stop_landmark;
    bool m_stop_landmark_isSet;
    bool m_stop_landmark_isValid;

    OAIV3_StopLocation m_stop_location;
    bool m_stop_location_isSet;
    bool m_stop_location_isValid;

    QString m_stop_name;
    bool m_stop_name_isSet;
    bool m_stop_name_isValid;

    OAIV3_StopStaffing m_stop_staffing;
    bool m_stop_staffing_isSet;
    bool m_stop_staffing_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIV3_StopDetails)

#endif // OAIV3_StopDetails_H
