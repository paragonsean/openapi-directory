/**
 * PTV Timetable API - Version 3
 * The PTV Timetable API provides direct access to Public Transport Victoriaâ€™s public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * Documentation for Version 2 of the PTV Timetable API  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.    Credits: This page has been based on Steve Bennett's http://opentransportdata.org/, used with permission.  
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIV3_Run.h
 *
 * 
 */

#ifndef OAIV3_Run_H
#define OAIV3_Run_H

#include <QJsonObject>

#include "OAIObject.h"
#include "OAIV3_VehicleDescriptor.h"
#include "OAIV3_VehiclePosition.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIV3_VehicleDescriptor;
class OAIV3_VehiclePosition;

class OAIV3_Run : public OAIObject {
public:
    OAIV3_Run();
    OAIV3_Run(QString json);
    ~OAIV3_Run() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDestinationName() const;
    void setDestinationName(const QString &destination_name);
    bool is_destination_name_Set() const;
    bool is_destination_name_Valid() const;

    qint32 getDirectionId() const;
    void setDirectionId(const qint32 &direction_id);
    bool is_direction_id_Set() const;
    bool is_direction_id_Valid() const;

    qint32 getExpressStopCount() const;
    void setExpressStopCount(const qint32 &express_stop_count);
    bool is_express_stop_count_Set() const;
    bool is_express_stop_count_Valid() const;

    qint32 getFinalStopId() const;
    void setFinalStopId(const qint32 &final_stop_id);
    bool is_final_stop_id_Set() const;
    bool is_final_stop_id_Valid() const;

    QList<OAIObject> getGeopath() const;
    void setGeopath(const QList<OAIObject> &geopath);
    bool is_geopath_Set() const;
    bool is_geopath_Valid() const;

    qint32 getRouteId() const;
    void setRouteId(const qint32 &route_id);
    bool is_route_id_Set() const;
    bool is_route_id_Valid() const;

    qint32 getRouteType() const;
    void setRouteType(const qint32 &route_type);
    bool is_route_type_Set() const;
    bool is_route_type_Valid() const;

    qint32 getRunId() const;
    void setRunId(const qint32 &run_id);
    bool is_run_id_Set() const;
    bool is_run_id_Valid() const;

    QString getRunRef() const;
    void setRunRef(const QString &run_ref);
    bool is_run_ref_Set() const;
    bool is_run_ref_Valid() const;

    qint32 getRunSequence() const;
    void setRunSequence(const qint32 &run_sequence);
    bool is_run_sequence_Set() const;
    bool is_run_sequence_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    OAIV3_VehicleDescriptor getVehicleDescriptor() const;
    void setVehicleDescriptor(const OAIV3_VehicleDescriptor &vehicle_descriptor);
    bool is_vehicle_descriptor_Set() const;
    bool is_vehicle_descriptor_Valid() const;

    OAIV3_VehiclePosition getVehiclePosition() const;
    void setVehiclePosition(const OAIV3_VehiclePosition &vehicle_position);
    bool is_vehicle_position_Set() const;
    bool is_vehicle_position_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_destination_name;
    bool m_destination_name_isSet;
    bool m_destination_name_isValid;

    qint32 m_direction_id;
    bool m_direction_id_isSet;
    bool m_direction_id_isValid;

    qint32 m_express_stop_count;
    bool m_express_stop_count_isSet;
    bool m_express_stop_count_isValid;

    qint32 m_final_stop_id;
    bool m_final_stop_id_isSet;
    bool m_final_stop_id_isValid;

    QList<OAIObject> m_geopath;
    bool m_geopath_isSet;
    bool m_geopath_isValid;

    qint32 m_route_id;
    bool m_route_id_isSet;
    bool m_route_id_isValid;

    qint32 m_route_type;
    bool m_route_type_isSet;
    bool m_route_type_isValid;

    qint32 m_run_id;
    bool m_run_id_isSet;
    bool m_run_id_isValid;

    QString m_run_ref;
    bool m_run_ref_isSet;
    bool m_run_ref_isValid;

    qint32 m_run_sequence;
    bool m_run_sequence_isSet;
    bool m_run_sequence_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    OAIV3_VehicleDescriptor m_vehicle_descriptor;
    bool m_vehicle_descriptor_isSet;
    bool m_vehicle_descriptor_isValid;

    OAIV3_VehiclePosition m_vehicle_position;
    bool m_vehicle_position_isSet;
    bool m_vehicle_position_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIV3_Run)

#endif // OAIV3_Run_H
