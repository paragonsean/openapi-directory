/**
 * PTV Timetable API - Version 3
 * The PTV Timetable API provides direct access to Public Transport Victoriaâ€™s public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * Documentation for Version 2 of the PTV Timetable API  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.    Credits: This page has been based on Steve Bennett's http://opentransportdata.org/, used with permission.  
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIV3_Disruption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIV3_Disruption::OAIV3_Disruption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIV3_Disruption::OAIV3_Disruption() {
    this->initializeModel();
}

OAIV3_Disruption::~OAIV3_Disruption() {}

void OAIV3_Disruption::initializeModel() {

    m_colour_isSet = false;
    m_colour_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_on_board_isSet = false;
    m_display_on_board_isValid = false;

    m_display_status_isSet = false;
    m_display_status_isValid = false;

    m_disruption_id_isSet = false;
    m_disruption_id_isValid = false;

    m_disruption_status_isSet = false;
    m_disruption_status_isValid = false;

    m_disruption_type_isSet = false;
    m_disruption_type_isValid = false;

    m_from_date_isSet = false;
    m_from_date_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_published_on_isSet = false;
    m_published_on_isValid = false;

    m_routes_isSet = false;
    m_routes_isValid = false;

    m_stops_isSet = false;
    m_stops_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_to_date_isSet = false;
    m_to_date_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIV3_Disruption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIV3_Disruption::fromJsonObject(QJsonObject json) {

    m_colour_isValid = ::OpenAPI::fromJsonValue(m_colour, json[QString("colour")]);
    m_colour_isSet = !json[QString("colour")].isNull() && m_colour_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_on_board_isValid = ::OpenAPI::fromJsonValue(m_display_on_board, json[QString("display_on_board")]);
    m_display_on_board_isSet = !json[QString("display_on_board")].isNull() && m_display_on_board_isValid;

    m_display_status_isValid = ::OpenAPI::fromJsonValue(m_display_status, json[QString("display_status")]);
    m_display_status_isSet = !json[QString("display_status")].isNull() && m_display_status_isValid;

    m_disruption_id_isValid = ::OpenAPI::fromJsonValue(m_disruption_id, json[QString("disruption_id")]);
    m_disruption_id_isSet = !json[QString("disruption_id")].isNull() && m_disruption_id_isValid;

    m_disruption_status_isValid = ::OpenAPI::fromJsonValue(m_disruption_status, json[QString("disruption_status")]);
    m_disruption_status_isSet = !json[QString("disruption_status")].isNull() && m_disruption_status_isValid;

    m_disruption_type_isValid = ::OpenAPI::fromJsonValue(m_disruption_type, json[QString("disruption_type")]);
    m_disruption_type_isSet = !json[QString("disruption_type")].isNull() && m_disruption_type_isValid;

    m_from_date_isValid = ::OpenAPI::fromJsonValue(m_from_date, json[QString("from_date")]);
    m_from_date_isSet = !json[QString("from_date")].isNull() && m_from_date_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("last_updated")]);
    m_last_updated_isSet = !json[QString("last_updated")].isNull() && m_last_updated_isValid;

    m_published_on_isValid = ::OpenAPI::fromJsonValue(m_published_on, json[QString("published_on")]);
    m_published_on_isSet = !json[QString("published_on")].isNull() && m_published_on_isValid;

    m_routes_isValid = ::OpenAPI::fromJsonValue(m_routes, json[QString("routes")]);
    m_routes_isSet = !json[QString("routes")].isNull() && m_routes_isValid;

    m_stops_isValid = ::OpenAPI::fromJsonValue(m_stops, json[QString("stops")]);
    m_stops_isSet = !json[QString("stops")].isNull() && m_stops_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_to_date_isValid = ::OpenAPI::fromJsonValue(m_to_date, json[QString("to_date")]);
    m_to_date_isSet = !json[QString("to_date")].isNull() && m_to_date_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIV3_Disruption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIV3_Disruption::asJsonObject() const {
    QJsonObject obj;
    if (m_colour_isSet) {
        obj.insert(QString("colour"), ::OpenAPI::toJsonValue(m_colour));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_on_board_isSet) {
        obj.insert(QString("display_on_board"), ::OpenAPI::toJsonValue(m_display_on_board));
    }
    if (m_display_status_isSet) {
        obj.insert(QString("display_status"), ::OpenAPI::toJsonValue(m_display_status));
    }
    if (m_disruption_id_isSet) {
        obj.insert(QString("disruption_id"), ::OpenAPI::toJsonValue(m_disruption_id));
    }
    if (m_disruption_status_isSet) {
        obj.insert(QString("disruption_status"), ::OpenAPI::toJsonValue(m_disruption_status));
    }
    if (m_disruption_type_isSet) {
        obj.insert(QString("disruption_type"), ::OpenAPI::toJsonValue(m_disruption_type));
    }
    if (m_from_date_isSet) {
        obj.insert(QString("from_date"), ::OpenAPI::toJsonValue(m_from_date));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("last_updated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_published_on_isSet) {
        obj.insert(QString("published_on"), ::OpenAPI::toJsonValue(m_published_on));
    }
    if (m_routes.size() > 0) {
        obj.insert(QString("routes"), ::OpenAPI::toJsonValue(m_routes));
    }
    if (m_stops.size() > 0) {
        obj.insert(QString("stops"), ::OpenAPI::toJsonValue(m_stops));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_to_date_isSet) {
        obj.insert(QString("to_date"), ::OpenAPI::toJsonValue(m_to_date));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIV3_Disruption::getColour() const {
    return m_colour;
}
void OAIV3_Disruption::setColour(const QString &colour) {
    m_colour = colour;
    m_colour_isSet = true;
}

bool OAIV3_Disruption::is_colour_Set() const{
    return m_colour_isSet;
}

bool OAIV3_Disruption::is_colour_Valid() const{
    return m_colour_isValid;
}

QString OAIV3_Disruption::getDescription() const {
    return m_description;
}
void OAIV3_Disruption::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIV3_Disruption::is_description_Set() const{
    return m_description_isSet;
}

bool OAIV3_Disruption::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIV3_Disruption::isDisplayOnBoard() const {
    return m_display_on_board;
}
void OAIV3_Disruption::setDisplayOnBoard(const bool &display_on_board) {
    m_display_on_board = display_on_board;
    m_display_on_board_isSet = true;
}

bool OAIV3_Disruption::is_display_on_board_Set() const{
    return m_display_on_board_isSet;
}

bool OAIV3_Disruption::is_display_on_board_Valid() const{
    return m_display_on_board_isValid;
}

bool OAIV3_Disruption::isDisplayStatus() const {
    return m_display_status;
}
void OAIV3_Disruption::setDisplayStatus(const bool &display_status) {
    m_display_status = display_status;
    m_display_status_isSet = true;
}

bool OAIV3_Disruption::is_display_status_Set() const{
    return m_display_status_isSet;
}

bool OAIV3_Disruption::is_display_status_Valid() const{
    return m_display_status_isValid;
}

qint64 OAIV3_Disruption::getDisruptionId() const {
    return m_disruption_id;
}
void OAIV3_Disruption::setDisruptionId(const qint64 &disruption_id) {
    m_disruption_id = disruption_id;
    m_disruption_id_isSet = true;
}

bool OAIV3_Disruption::is_disruption_id_Set() const{
    return m_disruption_id_isSet;
}

bool OAIV3_Disruption::is_disruption_id_Valid() const{
    return m_disruption_id_isValid;
}

QString OAIV3_Disruption::getDisruptionStatus() const {
    return m_disruption_status;
}
void OAIV3_Disruption::setDisruptionStatus(const QString &disruption_status) {
    m_disruption_status = disruption_status;
    m_disruption_status_isSet = true;
}

bool OAIV3_Disruption::is_disruption_status_Set() const{
    return m_disruption_status_isSet;
}

bool OAIV3_Disruption::is_disruption_status_Valid() const{
    return m_disruption_status_isValid;
}

QString OAIV3_Disruption::getDisruptionType() const {
    return m_disruption_type;
}
void OAIV3_Disruption::setDisruptionType(const QString &disruption_type) {
    m_disruption_type = disruption_type;
    m_disruption_type_isSet = true;
}

bool OAIV3_Disruption::is_disruption_type_Set() const{
    return m_disruption_type_isSet;
}

bool OAIV3_Disruption::is_disruption_type_Valid() const{
    return m_disruption_type_isValid;
}

QDateTime OAIV3_Disruption::getFromDate() const {
    return m_from_date;
}
void OAIV3_Disruption::setFromDate(const QDateTime &from_date) {
    m_from_date = from_date;
    m_from_date_isSet = true;
}

bool OAIV3_Disruption::is_from_date_Set() const{
    return m_from_date_isSet;
}

bool OAIV3_Disruption::is_from_date_Valid() const{
    return m_from_date_isValid;
}

QDateTime OAIV3_Disruption::getLastUpdated() const {
    return m_last_updated;
}
void OAIV3_Disruption::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIV3_Disruption::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIV3_Disruption::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QDateTime OAIV3_Disruption::getPublishedOn() const {
    return m_published_on;
}
void OAIV3_Disruption::setPublishedOn(const QDateTime &published_on) {
    m_published_on = published_on;
    m_published_on_isSet = true;
}

bool OAIV3_Disruption::is_published_on_Set() const{
    return m_published_on_isSet;
}

bool OAIV3_Disruption::is_published_on_Valid() const{
    return m_published_on_isValid;
}

QList<OAIV3_DisruptionRoute> OAIV3_Disruption::getRoutes() const {
    return m_routes;
}
void OAIV3_Disruption::setRoutes(const QList<OAIV3_DisruptionRoute> &routes) {
    m_routes = routes;
    m_routes_isSet = true;
}

bool OAIV3_Disruption::is_routes_Set() const{
    return m_routes_isSet;
}

bool OAIV3_Disruption::is_routes_Valid() const{
    return m_routes_isValid;
}

QList<OAIV3_DisruptionStop> OAIV3_Disruption::getStops() const {
    return m_stops;
}
void OAIV3_Disruption::setStops(const QList<OAIV3_DisruptionStop> &stops) {
    m_stops = stops;
    m_stops_isSet = true;
}

bool OAIV3_Disruption::is_stops_Set() const{
    return m_stops_isSet;
}

bool OAIV3_Disruption::is_stops_Valid() const{
    return m_stops_isValid;
}

QString OAIV3_Disruption::getTitle() const {
    return m_title;
}
void OAIV3_Disruption::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIV3_Disruption::is_title_Set() const{
    return m_title_isSet;
}

bool OAIV3_Disruption::is_title_Valid() const{
    return m_title_isValid;
}

QDateTime OAIV3_Disruption::getToDate() const {
    return m_to_date;
}
void OAIV3_Disruption::setToDate(const QDateTime &to_date) {
    m_to_date = to_date;
    m_to_date_isSet = true;
}

bool OAIV3_Disruption::is_to_date_Set() const{
    return m_to_date_isSet;
}

bool OAIV3_Disruption::is_to_date_Valid() const{
    return m_to_date_isValid;
}

QString OAIV3_Disruption::getUrl() const {
    return m_url;
}
void OAIV3_Disruption::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIV3_Disruption::is_url_Set() const{
    return m_url_isSet;
}

bool OAIV3_Disruption::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIV3_Disruption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_colour_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_on_board_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disruption_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disruption_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disruption_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_published_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_routes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_stops.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIV3_Disruption::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
