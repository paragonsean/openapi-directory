/**
 * PTV Timetable API - Version 3
 * The PTV Timetable API provides direct access to Public Transport Victoriaâ€™s public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * Documentation for Version 2 of the PTV Timetable API  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.    Credits: This page has been based on Steve Bennett's http://opentransportdata.org/, used with permission.  
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIV3_Disruptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIV3_Disruptions::OAIV3_Disruptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIV3_Disruptions::OAIV3_Disruptions() {
    this->initializeModel();
}

OAIV3_Disruptions::~OAIV3_Disruptions() {}

void OAIV3_Disruptions::initializeModel() {

    m_ferry_isSet = false;
    m_ferry_isValid = false;

    m_general_isSet = false;
    m_general_isValid = false;

    m_interstate_train_isSet = false;
    m_interstate_train_isValid = false;

    m_metro_bus_isSet = false;
    m_metro_bus_isValid = false;

    m_metro_train_isSet = false;
    m_metro_train_isValid = false;

    m_metro_tram_isSet = false;
    m_metro_tram_isValid = false;

    m_night_bus_isSet = false;
    m_night_bus_isValid = false;

    m_regional_bus_isSet = false;
    m_regional_bus_isValid = false;

    m_regional_coach_isSet = false;
    m_regional_coach_isValid = false;

    m_regional_train_isSet = false;
    m_regional_train_isValid = false;

    m_school_bus_isSet = false;
    m_school_bus_isValid = false;

    m_skybus_isSet = false;
    m_skybus_isValid = false;

    m_taxi_isSet = false;
    m_taxi_isValid = false;

    m_telebus_isSet = false;
    m_telebus_isValid = false;
}

void OAIV3_Disruptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIV3_Disruptions::fromJsonObject(QJsonObject json) {

    m_ferry_isValid = ::OpenAPI::fromJsonValue(m_ferry, json[QString("ferry")]);
    m_ferry_isSet = !json[QString("ferry")].isNull() && m_ferry_isValid;

    m_general_isValid = ::OpenAPI::fromJsonValue(m_general, json[QString("general")]);
    m_general_isSet = !json[QString("general")].isNull() && m_general_isValid;

    m_interstate_train_isValid = ::OpenAPI::fromJsonValue(m_interstate_train, json[QString("interstate_train")]);
    m_interstate_train_isSet = !json[QString("interstate_train")].isNull() && m_interstate_train_isValid;

    m_metro_bus_isValid = ::OpenAPI::fromJsonValue(m_metro_bus, json[QString("metro_bus")]);
    m_metro_bus_isSet = !json[QString("metro_bus")].isNull() && m_metro_bus_isValid;

    m_metro_train_isValid = ::OpenAPI::fromJsonValue(m_metro_train, json[QString("metro_train")]);
    m_metro_train_isSet = !json[QString("metro_train")].isNull() && m_metro_train_isValid;

    m_metro_tram_isValid = ::OpenAPI::fromJsonValue(m_metro_tram, json[QString("metro_tram")]);
    m_metro_tram_isSet = !json[QString("metro_tram")].isNull() && m_metro_tram_isValid;

    m_night_bus_isValid = ::OpenAPI::fromJsonValue(m_night_bus, json[QString("night_bus")]);
    m_night_bus_isSet = !json[QString("night_bus")].isNull() && m_night_bus_isValid;

    m_regional_bus_isValid = ::OpenAPI::fromJsonValue(m_regional_bus, json[QString("regional_bus")]);
    m_regional_bus_isSet = !json[QString("regional_bus")].isNull() && m_regional_bus_isValid;

    m_regional_coach_isValid = ::OpenAPI::fromJsonValue(m_regional_coach, json[QString("regional_coach")]);
    m_regional_coach_isSet = !json[QString("regional_coach")].isNull() && m_regional_coach_isValid;

    m_regional_train_isValid = ::OpenAPI::fromJsonValue(m_regional_train, json[QString("regional_train")]);
    m_regional_train_isSet = !json[QString("regional_train")].isNull() && m_regional_train_isValid;

    m_school_bus_isValid = ::OpenAPI::fromJsonValue(m_school_bus, json[QString("school_bus")]);
    m_school_bus_isSet = !json[QString("school_bus")].isNull() && m_school_bus_isValid;

    m_skybus_isValid = ::OpenAPI::fromJsonValue(m_skybus, json[QString("skybus")]);
    m_skybus_isSet = !json[QString("skybus")].isNull() && m_skybus_isValid;

    m_taxi_isValid = ::OpenAPI::fromJsonValue(m_taxi, json[QString("taxi")]);
    m_taxi_isSet = !json[QString("taxi")].isNull() && m_taxi_isValid;

    m_telebus_isValid = ::OpenAPI::fromJsonValue(m_telebus, json[QString("telebus")]);
    m_telebus_isSet = !json[QString("telebus")].isNull() && m_telebus_isValid;
}

QString OAIV3_Disruptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIV3_Disruptions::asJsonObject() const {
    QJsonObject obj;
    if (m_ferry.size() > 0) {
        obj.insert(QString("ferry"), ::OpenAPI::toJsonValue(m_ferry));
    }
    if (m_general.size() > 0) {
        obj.insert(QString("general"), ::OpenAPI::toJsonValue(m_general));
    }
    if (m_interstate_train.size() > 0) {
        obj.insert(QString("interstate_train"), ::OpenAPI::toJsonValue(m_interstate_train));
    }
    if (m_metro_bus.size() > 0) {
        obj.insert(QString("metro_bus"), ::OpenAPI::toJsonValue(m_metro_bus));
    }
    if (m_metro_train.size() > 0) {
        obj.insert(QString("metro_train"), ::OpenAPI::toJsonValue(m_metro_train));
    }
    if (m_metro_tram.size() > 0) {
        obj.insert(QString("metro_tram"), ::OpenAPI::toJsonValue(m_metro_tram));
    }
    if (m_night_bus.size() > 0) {
        obj.insert(QString("night_bus"), ::OpenAPI::toJsonValue(m_night_bus));
    }
    if (m_regional_bus.size() > 0) {
        obj.insert(QString("regional_bus"), ::OpenAPI::toJsonValue(m_regional_bus));
    }
    if (m_regional_coach.size() > 0) {
        obj.insert(QString("regional_coach"), ::OpenAPI::toJsonValue(m_regional_coach));
    }
    if (m_regional_train.size() > 0) {
        obj.insert(QString("regional_train"), ::OpenAPI::toJsonValue(m_regional_train));
    }
    if (m_school_bus.size() > 0) {
        obj.insert(QString("school_bus"), ::OpenAPI::toJsonValue(m_school_bus));
    }
    if (m_skybus.size() > 0) {
        obj.insert(QString("skybus"), ::OpenAPI::toJsonValue(m_skybus));
    }
    if (m_taxi.size() > 0) {
        obj.insert(QString("taxi"), ::OpenAPI::toJsonValue(m_taxi));
    }
    if (m_telebus.size() > 0) {
        obj.insert(QString("telebus"), ::OpenAPI::toJsonValue(m_telebus));
    }
    return obj;
}

QList<OAIV3_Disruption> OAIV3_Disruptions::getFerry() const {
    return m_ferry;
}
void OAIV3_Disruptions::setFerry(const QList<OAIV3_Disruption> &ferry) {
    m_ferry = ferry;
    m_ferry_isSet = true;
}

bool OAIV3_Disruptions::is_ferry_Set() const{
    return m_ferry_isSet;
}

bool OAIV3_Disruptions::is_ferry_Valid() const{
    return m_ferry_isValid;
}

QList<OAIV3_Disruption> OAIV3_Disruptions::getGeneral() const {
    return m_general;
}
void OAIV3_Disruptions::setGeneral(const QList<OAIV3_Disruption> &general) {
    m_general = general;
    m_general_isSet = true;
}

bool OAIV3_Disruptions::is_general_Set() const{
    return m_general_isSet;
}

bool OAIV3_Disruptions::is_general_Valid() const{
    return m_general_isValid;
}

QList<OAIV3_Disruption> OAIV3_Disruptions::getInterstateTrain() const {
    return m_interstate_train;
}
void OAIV3_Disruptions::setInterstateTrain(const QList<OAIV3_Disruption> &interstate_train) {
    m_interstate_train = interstate_train;
    m_interstate_train_isSet = true;
}

bool OAIV3_Disruptions::is_interstate_train_Set() const{
    return m_interstate_train_isSet;
}

bool OAIV3_Disruptions::is_interstate_train_Valid() const{
    return m_interstate_train_isValid;
}

QList<OAIV3_Disruption> OAIV3_Disruptions::getMetroBus() const {
    return m_metro_bus;
}
void OAIV3_Disruptions::setMetroBus(const QList<OAIV3_Disruption> &metro_bus) {
    m_metro_bus = metro_bus;
    m_metro_bus_isSet = true;
}

bool OAIV3_Disruptions::is_metro_bus_Set() const{
    return m_metro_bus_isSet;
}

bool OAIV3_Disruptions::is_metro_bus_Valid() const{
    return m_metro_bus_isValid;
}

QList<OAIV3_Disruption> OAIV3_Disruptions::getMetroTrain() const {
    return m_metro_train;
}
void OAIV3_Disruptions::setMetroTrain(const QList<OAIV3_Disruption> &metro_train) {
    m_metro_train = metro_train;
    m_metro_train_isSet = true;
}

bool OAIV3_Disruptions::is_metro_train_Set() const{
    return m_metro_train_isSet;
}

bool OAIV3_Disruptions::is_metro_train_Valid() const{
    return m_metro_train_isValid;
}

QList<OAIV3_Disruption> OAIV3_Disruptions::getMetroTram() const {
    return m_metro_tram;
}
void OAIV3_Disruptions::setMetroTram(const QList<OAIV3_Disruption> &metro_tram) {
    m_metro_tram = metro_tram;
    m_metro_tram_isSet = true;
}

bool OAIV3_Disruptions::is_metro_tram_Set() const{
    return m_metro_tram_isSet;
}

bool OAIV3_Disruptions::is_metro_tram_Valid() const{
    return m_metro_tram_isValid;
}

QList<OAIV3_Disruption> OAIV3_Disruptions::getNightBus() const {
    return m_night_bus;
}
void OAIV3_Disruptions::setNightBus(const QList<OAIV3_Disruption> &night_bus) {
    m_night_bus = night_bus;
    m_night_bus_isSet = true;
}

bool OAIV3_Disruptions::is_night_bus_Set() const{
    return m_night_bus_isSet;
}

bool OAIV3_Disruptions::is_night_bus_Valid() const{
    return m_night_bus_isValid;
}

QList<OAIV3_Disruption> OAIV3_Disruptions::getRegionalBus() const {
    return m_regional_bus;
}
void OAIV3_Disruptions::setRegionalBus(const QList<OAIV3_Disruption> &regional_bus) {
    m_regional_bus = regional_bus;
    m_regional_bus_isSet = true;
}

bool OAIV3_Disruptions::is_regional_bus_Set() const{
    return m_regional_bus_isSet;
}

bool OAIV3_Disruptions::is_regional_bus_Valid() const{
    return m_regional_bus_isValid;
}

QList<OAIV3_Disruption> OAIV3_Disruptions::getRegionalCoach() const {
    return m_regional_coach;
}
void OAIV3_Disruptions::setRegionalCoach(const QList<OAIV3_Disruption> &regional_coach) {
    m_regional_coach = regional_coach;
    m_regional_coach_isSet = true;
}

bool OAIV3_Disruptions::is_regional_coach_Set() const{
    return m_regional_coach_isSet;
}

bool OAIV3_Disruptions::is_regional_coach_Valid() const{
    return m_regional_coach_isValid;
}

QList<OAIV3_Disruption> OAIV3_Disruptions::getRegionalTrain() const {
    return m_regional_train;
}
void OAIV3_Disruptions::setRegionalTrain(const QList<OAIV3_Disruption> &regional_train) {
    m_regional_train = regional_train;
    m_regional_train_isSet = true;
}

bool OAIV3_Disruptions::is_regional_train_Set() const{
    return m_regional_train_isSet;
}

bool OAIV3_Disruptions::is_regional_train_Valid() const{
    return m_regional_train_isValid;
}

QList<OAIV3_Disruption> OAIV3_Disruptions::getSchoolBus() const {
    return m_school_bus;
}
void OAIV3_Disruptions::setSchoolBus(const QList<OAIV3_Disruption> &school_bus) {
    m_school_bus = school_bus;
    m_school_bus_isSet = true;
}

bool OAIV3_Disruptions::is_school_bus_Set() const{
    return m_school_bus_isSet;
}

bool OAIV3_Disruptions::is_school_bus_Valid() const{
    return m_school_bus_isValid;
}

QList<OAIV3_Disruption> OAIV3_Disruptions::getSkybus() const {
    return m_skybus;
}
void OAIV3_Disruptions::setSkybus(const QList<OAIV3_Disruption> &skybus) {
    m_skybus = skybus;
    m_skybus_isSet = true;
}

bool OAIV3_Disruptions::is_skybus_Set() const{
    return m_skybus_isSet;
}

bool OAIV3_Disruptions::is_skybus_Valid() const{
    return m_skybus_isValid;
}

QList<OAIV3_Disruption> OAIV3_Disruptions::getTaxi() const {
    return m_taxi;
}
void OAIV3_Disruptions::setTaxi(const QList<OAIV3_Disruption> &taxi) {
    m_taxi = taxi;
    m_taxi_isSet = true;
}

bool OAIV3_Disruptions::is_taxi_Set() const{
    return m_taxi_isSet;
}

bool OAIV3_Disruptions::is_taxi_Valid() const{
    return m_taxi_isValid;
}

QList<OAIV3_Disruption> OAIV3_Disruptions::getTelebus() const {
    return m_telebus;
}
void OAIV3_Disruptions::setTelebus(const QList<OAIV3_Disruption> &telebus) {
    m_telebus = telebus;
    m_telebus_isSet = true;
}

bool OAIV3_Disruptions::is_telebus_Set() const{
    return m_telebus_isSet;
}

bool OAIV3_Disruptions::is_telebus_Valid() const{
    return m_telebus_isValid;
}

bool OAIV3_Disruptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ferry.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_general.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_interstate_train.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metro_bus.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metro_train.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metro_tram.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_night_bus.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_regional_bus.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_regional_coach.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_regional_train.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_school_bus.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_skybus.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_taxi.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_telebus.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIV3_Disruptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
