/**
 * PTV Timetable API - Version 3
 * The PTV Timetable API provides direct access to Public Transport Victoriaâ€™s public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * Documentation for Version 2 of the PTV Timetable API  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.    Credits: This page has been based on Steve Bennett's http://opentransportdata.org/, used with permission.  
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIV3_StopAccessibility.h
 *
 * 
 */

#ifndef OAIV3_StopAccessibility_H
#define OAIV3_StopAccessibility_H

#include <QJsonObject>

#include "OAIV3_StopAccessibilityWheelchair.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIV3_StopAccessibilityWheelchair;

class OAIV3_StopAccessibility : public OAIObject {
public:
    OAIV3_StopAccessibility();
    OAIV3_StopAccessibility(QString json);
    ~OAIV3_StopAccessibility() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAudioCustomerInformation() const;
    void setAudioCustomerInformation(const bool &audio_customer_information);
    bool is_audio_customer_information_Set() const;
    bool is_audio_customer_information_Valid() const;

    bool isEscalator() const;
    void setEscalator(const bool &escalator);
    bool is_escalator_Set() const;
    bool is_escalator_Valid() const;

    bool isHearingLoop() const;
    void setHearingLoop(const bool &hearing_loop);
    bool is_hearing_loop_Set() const;
    bool is_hearing_loop_Valid() const;

    bool isLift() const;
    void setLift(const bool &lift);
    bool is_lift_Set() const;
    bool is_lift_Valid() const;

    bool isLighting() const;
    void setLighting(const bool &lighting);
    bool is_lighting_Set() const;
    bool is_lighting_Valid() const;

    qint32 getPlatformNumber() const;
    void setPlatformNumber(const qint32 &platform_number);
    bool is_platform_number_Set() const;
    bool is_platform_number_Valid() const;

    bool isStairs() const;
    void setStairs(const bool &stairs);
    bool is_stairs_Set() const;
    bool is_stairs_Valid() const;

    bool isStopAccessible() const;
    void setStopAccessible(const bool &stop_accessible);
    bool is_stop_accessible_Set() const;
    bool is_stop_accessible_Valid() const;

    bool isTactileGroundSurfaceIndicator() const;
    void setTactileGroundSurfaceIndicator(const bool &tactile_ground_surface_indicator);
    bool is_tactile_ground_surface_indicator_Set() const;
    bool is_tactile_ground_surface_indicator_Valid() const;

    bool isWaitingRoom() const;
    void setWaitingRoom(const bool &waiting_room);
    bool is_waiting_room_Set() const;
    bool is_waiting_room_Valid() const;

    OAIV3_StopAccessibilityWheelchair getWheelchair() const;
    void setWheelchair(const OAIV3_StopAccessibilityWheelchair &wheelchair);
    bool is_wheelchair_Set() const;
    bool is_wheelchair_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_audio_customer_information;
    bool m_audio_customer_information_isSet;
    bool m_audio_customer_information_isValid;

    bool m_escalator;
    bool m_escalator_isSet;
    bool m_escalator_isValid;

    bool m_hearing_loop;
    bool m_hearing_loop_isSet;
    bool m_hearing_loop_isValid;

    bool m_lift;
    bool m_lift_isSet;
    bool m_lift_isValid;

    bool m_lighting;
    bool m_lighting_isSet;
    bool m_lighting_isValid;

    qint32 m_platform_number;
    bool m_platform_number_isSet;
    bool m_platform_number_isValid;

    bool m_stairs;
    bool m_stairs_isSet;
    bool m_stairs_isValid;

    bool m_stop_accessible;
    bool m_stop_accessible_isSet;
    bool m_stop_accessible_isValid;

    bool m_tactile_ground_surface_indicator;
    bool m_tactile_ground_surface_indicator_isSet;
    bool m_tactile_ground_surface_indicator_isValid;

    bool m_waiting_room;
    bool m_waiting_room_isSet;
    bool m_waiting_room_isValid;

    OAIV3_StopAccessibilityWheelchair m_wheelchair;
    bool m_wheelchair_isSet;
    bool m_wheelchair_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIV3_StopAccessibility)

#endif // OAIV3_StopAccessibility_H
