/**
 * PTV Timetable API - Version 3
 * The PTV Timetable API provides direct access to Public Transport Victoriaâ€™s public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * Documentation for Version 2 of the PTV Timetable API  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.    Credits: This page has been based on Steve Bennett's http://opentransportdata.org/, used with permission.  
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIV3_StopAccessibilityWheelchair.h
 *
 * 
 */

#ifndef OAIV3_StopAccessibilityWheelchair_H
#define OAIV3_StopAccessibilityWheelchair_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIV3_StopAccessibilityWheelchair : public OAIObject {
public:
    OAIV3_StopAccessibilityWheelchair();
    OAIV3_StopAccessibilityWheelchair(QString json);
    ~OAIV3_StopAccessibilityWheelchair() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAccessibleRamp() const;
    void setAccessibleRamp(const bool &accessible_ramp);
    bool is_accessible_ramp_Set() const;
    bool is_accessible_ramp_Valid() const;

    bool isLowTicketCounter() const;
    void setLowTicketCounter(const bool &low_ticket_counter);
    bool is_low_ticket_counter_Set() const;
    bool is_low_ticket_counter_Valid() const;

    bool isManouvering() const;
    void setManouvering(const bool &manouvering);
    bool is_manouvering_Set() const;
    bool is_manouvering_Valid() const;

    bool isParking() const;
    void setParking(const bool &parking);
    bool is_parking_Set() const;
    bool is_parking_Valid() const;

    bool isRaisedPlatform() const;
    void setRaisedPlatform(const bool &raised_platform);
    bool is_raised_platform_Set() const;
    bool is_raised_platform_Valid() const;

    bool isRaisedPlatformShelther() const;
    void setRaisedPlatformShelther(const bool &raised_platform_shelther);
    bool is_raised_platform_shelther_Set() const;
    bool is_raised_platform_shelther_Valid() const;

    bool isRamp() const;
    void setRamp(const bool &ramp);
    bool is_ramp_Set() const;
    bool is_ramp_Valid() const;

    bool isSecondaryPath() const;
    void setSecondaryPath(const bool &secondary_path);
    bool is_secondary_path_Set() const;
    bool is_secondary_path_Valid() const;

    bool isSteepRamp() const;
    void setSteepRamp(const bool &steep_ramp);
    bool is_steep_ramp_Set() const;
    bool is_steep_ramp_Valid() const;

    bool isTelephone() const;
    void setTelephone(const bool &telephone);
    bool is_telephone_Set() const;
    bool is_telephone_Valid() const;

    bool isToilet() const;
    void setToilet(const bool &toilet);
    bool is_toilet_Set() const;
    bool is_toilet_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_accessible_ramp;
    bool m_accessible_ramp_isSet;
    bool m_accessible_ramp_isValid;

    bool m_low_ticket_counter;
    bool m_low_ticket_counter_isSet;
    bool m_low_ticket_counter_isValid;

    bool m_manouvering;
    bool m_manouvering_isSet;
    bool m_manouvering_isValid;

    bool m_parking;
    bool m_parking_isSet;
    bool m_parking_isValid;

    bool m_raised_platform;
    bool m_raised_platform_isSet;
    bool m_raised_platform_isValid;

    bool m_raised_platform_shelther;
    bool m_raised_platform_shelther_isSet;
    bool m_raised_platform_shelther_isValid;

    bool m_ramp;
    bool m_ramp_isSet;
    bool m_ramp_isValid;

    bool m_secondary_path;
    bool m_secondary_path_isSet;
    bool m_secondary_path_isValid;

    bool m_steep_ramp;
    bool m_steep_ramp_isSet;
    bool m_steep_ramp_isValid;

    bool m_telephone;
    bool m_telephone_isSet;
    bool m_telephone_isValid;

    bool m_toilet;
    bool m_toilet_isSet;
    bool m_toilet_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIV3_StopAccessibilityWheelchair)

#endif // OAIV3_StopAccessibilityWheelchair_H
