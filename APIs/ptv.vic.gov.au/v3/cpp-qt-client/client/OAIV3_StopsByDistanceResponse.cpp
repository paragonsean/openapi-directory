/**
 * PTV Timetable API - Version 3
 * The PTV Timetable API provides direct access to Public Transport Victoriaâ€™s public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * Documentation for Version 2 of the PTV Timetable API  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.    Credits: This page has been based on Steve Bennett's http://opentransportdata.org/, used with permission.  
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIV3_StopsByDistanceResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIV3_StopsByDistanceResponse::OAIV3_StopsByDistanceResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIV3_StopsByDistanceResponse::OAIV3_StopsByDistanceResponse() {
    this->initializeModel();
}

OAIV3_StopsByDistanceResponse::~OAIV3_StopsByDistanceResponse() {}

void OAIV3_StopsByDistanceResponse::initializeModel() {

    m_disruptions_isSet = false;
    m_disruptions_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_stops_isSet = false;
    m_stops_isValid = false;
}

void OAIV3_StopsByDistanceResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIV3_StopsByDistanceResponse::fromJsonObject(QJsonObject json) {

    m_disruptions_isValid = ::OpenAPI::fromJsonValue(m_disruptions, json[QString("disruptions")]);
    m_disruptions_isSet = !json[QString("disruptions")].isNull() && m_disruptions_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_stops_isValid = ::OpenAPI::fromJsonValue(m_stops, json[QString("stops")]);
    m_stops_isSet = !json[QString("stops")].isNull() && m_stops_isValid;
}

QString OAIV3_StopsByDistanceResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIV3_StopsByDistanceResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_disruptions.size() > 0) {
        obj.insert(QString("disruptions"), ::OpenAPI::toJsonValue(m_disruptions));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_stops.size() > 0) {
        obj.insert(QString("stops"), ::OpenAPI::toJsonValue(m_stops));
    }
    return obj;
}

QMap<QString, OAIV3_Disruption> OAIV3_StopsByDistanceResponse::getDisruptions() const {
    return m_disruptions;
}
void OAIV3_StopsByDistanceResponse::setDisruptions(const QMap<QString, OAIV3_Disruption> &disruptions) {
    m_disruptions = disruptions;
    m_disruptions_isSet = true;
}

bool OAIV3_StopsByDistanceResponse::is_disruptions_Set() const{
    return m_disruptions_isSet;
}

bool OAIV3_StopsByDistanceResponse::is_disruptions_Valid() const{
    return m_disruptions_isValid;
}

OAIV3_Status OAIV3_StopsByDistanceResponse::getStatus() const {
    return m_status;
}
void OAIV3_StopsByDistanceResponse::setStatus(const OAIV3_Status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIV3_StopsByDistanceResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIV3_StopsByDistanceResponse::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAIV3_StopGeosearch> OAIV3_StopsByDistanceResponse::getStops() const {
    return m_stops;
}
void OAIV3_StopsByDistanceResponse::setStops(const QList<OAIV3_StopGeosearch> &stops) {
    m_stops = stops;
    m_stops_isSet = true;
}

bool OAIV3_StopsByDistanceResponse::is_stops_Set() const{
    return m_stops_isSet;
}

bool OAIV3_StopsByDistanceResponse::is_stops_Valid() const{
    return m_stops_isValid;
}

bool OAIV3_StopsByDistanceResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disruptions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stops.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIV3_StopsByDistanceResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
