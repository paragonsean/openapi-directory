/**
 * PTV Timetable API - Version 3
 * The PTV Timetable API provides direct access to Public Transport Victoriaâ€™s public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * Documentation for Version 2 of the PTV Timetable API  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.    Credits: This page has been based on Steve Bennett's http://opentransportdata.org/, used with permission.  
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIV3_ResultStop.h
 *
 * 
 */

#ifndef OAIV3_ResultStop_H
#define OAIV3_ResultStop_H

#include <QJsonObject>

#include "OAIV3_ResultRoute.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIV3_ResultRoute;

class OAIV3_ResultStop : public OAIObject {
public:
    OAIV3_ResultStop();
    OAIV3_ResultStop(QString json);
    ~OAIV3_ResultStop() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getRouteType() const;
    void setRouteType(const qint32 &route_type);
    bool is_route_type_Set() const;
    bool is_route_type_Valid() const;

    QList<OAIV3_ResultRoute> getRoutes() const;
    void setRoutes(const QList<OAIV3_ResultRoute> &routes);
    bool is_routes_Set() const;
    bool is_routes_Valid() const;

    float getStopDistance() const;
    void setStopDistance(const float &stop_distance);
    bool is_stop_distance_Set() const;
    bool is_stop_distance_Valid() const;

    qint32 getStopId() const;
    void setStopId(const qint32 &stop_id);
    bool is_stop_id_Set() const;
    bool is_stop_id_Valid() const;

    QString getStopLandmark() const;
    void setStopLandmark(const QString &stop_landmark);
    bool is_stop_landmark_Set() const;
    bool is_stop_landmark_Valid() const;

    float getStopLatitude() const;
    void setStopLatitude(const float &stop_latitude);
    bool is_stop_latitude_Set() const;
    bool is_stop_latitude_Valid() const;

    float getStopLongitude() const;
    void setStopLongitude(const float &stop_longitude);
    bool is_stop_longitude_Set() const;
    bool is_stop_longitude_Valid() const;

    QString getStopName() const;
    void setStopName(const QString &stop_name);
    bool is_stop_name_Set() const;
    bool is_stop_name_Valid() const;

    qint32 getStopSequence() const;
    void setStopSequence(const qint32 &stop_sequence);
    bool is_stop_sequence_Set() const;
    bool is_stop_sequence_Valid() const;

    QString getStopSuburb() const;
    void setStopSuburb(const QString &stop_suburb);
    bool is_stop_suburb_Set() const;
    bool is_stop_suburb_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_route_type;
    bool m_route_type_isSet;
    bool m_route_type_isValid;

    QList<OAIV3_ResultRoute> m_routes;
    bool m_routes_isSet;
    bool m_routes_isValid;

    float m_stop_distance;
    bool m_stop_distance_isSet;
    bool m_stop_distance_isValid;

    qint32 m_stop_id;
    bool m_stop_id_isSet;
    bool m_stop_id_isValid;

    QString m_stop_landmark;
    bool m_stop_landmark_isSet;
    bool m_stop_landmark_isValid;

    float m_stop_latitude;
    bool m_stop_latitude_isSet;
    bool m_stop_latitude_isValid;

    float m_stop_longitude;
    bool m_stop_longitude_isSet;
    bool m_stop_longitude_isValid;

    QString m_stop_name;
    bool m_stop_name_isSet;
    bool m_stop_name_isValid;

    qint32 m_stop_sequence;
    bool m_stop_sequence_isSet;
    bool m_stop_sequence_isValid;

    QString m_stop_suburb;
    bool m_stop_suburb_isSet;
    bool m_stop_suburb_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIV3_ResultStop)

#endif // OAIV3_ResultStop_H
