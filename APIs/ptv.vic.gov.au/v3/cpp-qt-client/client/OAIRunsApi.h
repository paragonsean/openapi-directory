/**
 * PTV Timetable API - Version 3
 * The PTV Timetable API provides direct access to Public Transport Victoriaâ€™s public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * Documentation for Version 2 of the PTV Timetable API  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.    Credits: This page has been based on Steve Bennett's http://opentransportdata.org/, used with permission.  
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRunsApi_H
#define OAI_OAIRunsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIV3_ErrorResponse.h"
#include "OAIV3_RunResponse.h"
#include "OAIV3_RunsResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRunsApi : public QObject {
    Q_OBJECT

public:
    OAIRunsApi(const int timeOut = 0);
    ~OAIRunsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  route_id qint32 [required]
    * @param[in]  expand QList<QString> [optional]
    * @param[in]  date_utc QDateTime [optional]
    * @param[in]  token QString [optional]
    * @param[in]  devid QString [optional]
    * @param[in]  signature QString [optional]
    */
    virtual void runsForRoute(const qint32 &route_id, const ::OpenAPI::OptionalParam<QList<QString>> &expand = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDateTime> &date_utc = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &devid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &signature = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  route_id qint32 [required]
    * @param[in]  route_type qint32 [required]
    * @param[in]  expand QList<QString> [required]
    * @param[in]  date_utc QDateTime [optional]
    * @param[in]  token QString [optional]
    * @param[in]  devid QString [optional]
    * @param[in]  signature QString [optional]
    */
    virtual void runsForRouteAndRouteType(const qint32 &route_id, const qint32 &route_type, const QList<QString> &expand, const ::OpenAPI::OptionalParam<QDateTime> &date_utc = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &devid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &signature = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  run_ref QString [required]
    * @param[in]  expand QList<QString> [required]
    * @param[in]  date_utc QDateTime [optional]
    * @param[in]  include_geopath bool [optional]
    * @param[in]  token QString [optional]
    * @param[in]  devid QString [optional]
    * @param[in]  signature QString [optional]
    */
    virtual void runsForRun(const QString &run_ref, const QList<QString> &expand, const ::OpenAPI::OptionalParam<QDateTime> &date_utc = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<bool> &include_geopath = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &devid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &signature = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  run_ref QString [required]
    * @param[in]  route_type qint32 [required]
    * @param[in]  expand QList<QString> [required]
    * @param[in]  date_utc QDateTime [optional]
    * @param[in]  include_geopath bool [optional]
    * @param[in]  token QString [optional]
    * @param[in]  devid QString [optional]
    * @param[in]  signature QString [optional]
    */
    virtual void runsForRunAndRouteType(const QString &run_ref, const qint32 &route_type, const QList<QString> &expand, const ::OpenAPI::OptionalParam<QDateTime> &date_utc = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<bool> &include_geopath = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &devid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &signature = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void runsForRouteCallback(OAIHttpRequestWorker *worker);
    void runsForRouteAndRouteTypeCallback(OAIHttpRequestWorker *worker);
    void runsForRunCallback(OAIHttpRequestWorker *worker);
    void runsForRunAndRouteTypeCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void runsForRouteSignal(OAIV3_RunsResponse summary);
    void runsForRouteAndRouteTypeSignal(OAIV3_RunsResponse summary);
    void runsForRunSignal(OAIV3_RunsResponse summary);
    void runsForRunAndRouteTypeSignal(OAIV3_RunResponse summary);


    void runsForRouteSignalFull(OAIHttpRequestWorker *worker, OAIV3_RunsResponse summary);
    void runsForRouteAndRouteTypeSignalFull(OAIHttpRequestWorker *worker, OAIV3_RunsResponse summary);
    void runsForRunSignalFull(OAIHttpRequestWorker *worker, OAIV3_RunsResponse summary);
    void runsForRunAndRouteTypeSignalFull(OAIHttpRequestWorker *worker, OAIV3_RunResponse summary);

    Q_DECL_DEPRECATED_X("Use runsForRouteSignalError() instead")
    void runsForRouteSignalE(OAIV3_RunsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void runsForRouteSignalError(OAIV3_RunsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use runsForRouteAndRouteTypeSignalError() instead")
    void runsForRouteAndRouteTypeSignalE(OAIV3_RunsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void runsForRouteAndRouteTypeSignalError(OAIV3_RunsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use runsForRunSignalError() instead")
    void runsForRunSignalE(OAIV3_RunsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void runsForRunSignalError(OAIV3_RunsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use runsForRunAndRouteTypeSignalError() instead")
    void runsForRunAndRouteTypeSignalE(OAIV3_RunResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void runsForRunAndRouteTypeSignalError(OAIV3_RunResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use runsForRouteSignalErrorFull() instead")
    void runsForRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void runsForRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use runsForRouteAndRouteTypeSignalErrorFull() instead")
    void runsForRouteAndRouteTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void runsForRouteAndRouteTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use runsForRunSignalErrorFull() instead")
    void runsForRunSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void runsForRunSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use runsForRunAndRouteTypeSignalErrorFull() instead")
    void runsForRunAndRouteTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void runsForRunAndRouteTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
