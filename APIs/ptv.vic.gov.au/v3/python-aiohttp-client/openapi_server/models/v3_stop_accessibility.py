# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.v3_stop_accessibility_wheelchair import V3StopAccessibilityWheelchair
from openapi_server import util


class V3StopAccessibility(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audio_customer_information: bool=None, escalator: bool=None, hearing_loop: bool=None, lift: bool=None, lighting: bool=None, platform_number: int=None, stairs: bool=None, stop_accessible: bool=None, tactile_ground_surface_indicator: bool=None, waiting_room: bool=None, wheelchair: V3StopAccessibilityWheelchair=None):
        """V3StopAccessibility - a model defined in OpenAPI

        :param audio_customer_information: The audio_customer_information of this V3StopAccessibility.
        :param escalator: The escalator of this V3StopAccessibility.
        :param hearing_loop: The hearing_loop of this V3StopAccessibility.
        :param lift: The lift of this V3StopAccessibility.
        :param lighting: The lighting of this V3StopAccessibility.
        :param platform_number: The platform_number of this V3StopAccessibility.
        :param stairs: The stairs of this V3StopAccessibility.
        :param stop_accessible: The stop_accessible of this V3StopAccessibility.
        :param tactile_ground_surface_indicator: The tactile_ground_surface_indicator of this V3StopAccessibility.
        :param waiting_room: The waiting_room of this V3StopAccessibility.
        :param wheelchair: The wheelchair of this V3StopAccessibility.
        """
        self.openapi_types = {
            'audio_customer_information': bool,
            'escalator': bool,
            'hearing_loop': bool,
            'lift': bool,
            'lighting': bool,
            'platform_number': int,
            'stairs': bool,
            'stop_accessible': bool,
            'tactile_ground_surface_indicator': bool,
            'waiting_room': bool,
            'wheelchair': V3StopAccessibilityWheelchair
        }

        self.attribute_map = {
            'audio_customer_information': 'audio_customer_information',
            'escalator': 'escalator',
            'hearing_loop': 'hearing_loop',
            'lift': 'lift',
            'lighting': 'lighting',
            'platform_number': 'platform_number',
            'stairs': 'stairs',
            'stop_accessible': 'stop_accessible',
            'tactile_ground_surface_indicator': 'tactile_ground_surface_indicator',
            'waiting_room': 'waiting_room',
            'wheelchair': 'wheelchair'
        }

        self._audio_customer_information = audio_customer_information
        self._escalator = escalator
        self._hearing_loop = hearing_loop
        self._lift = lift
        self._lighting = lighting
        self._platform_number = platform_number
        self._stairs = stairs
        self._stop_accessible = stop_accessible
        self._tactile_ground_surface_indicator = tactile_ground_surface_indicator
        self._waiting_room = waiting_room
        self._wheelchair = wheelchair

    @classmethod
    def from_dict(cls, dikt: dict) -> 'V3StopAccessibility':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The V3.StopAccessibility of this V3StopAccessibility.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audio_customer_information(self):
        """Gets the audio_customer_information of this V3StopAccessibility.

        Indicates if there is at least one audio customer information at the stop/platform

        :return: The audio_customer_information of this V3StopAccessibility.
        :rtype: bool
        """
        return self._audio_customer_information

    @audio_customer_information.setter
    def audio_customer_information(self, audio_customer_information):
        """Sets the audio_customer_information of this V3StopAccessibility.

        Indicates if there is at least one audio customer information at the stop/platform

        :param audio_customer_information: The audio_customer_information of this V3StopAccessibility.
        :type audio_customer_information: bool
        """

        self._audio_customer_information = audio_customer_information

    @property
    def escalator(self):
        """Gets the escalator of this V3StopAccessibility.

        Indicates if there is at least one accessible escalator at the stop/platform that complies with the Disability Standards for Accessible Public Transport under the Disability Discrimination Act (1992)

        :return: The escalator of this V3StopAccessibility.
        :rtype: bool
        """
        return self._escalator

    @escalator.setter
    def escalator(self, escalator):
        """Sets the escalator of this V3StopAccessibility.

        Indicates if there is at least one accessible escalator at the stop/platform that complies with the Disability Standards for Accessible Public Transport under the Disability Discrimination Act (1992)

        :param escalator: The escalator of this V3StopAccessibility.
        :type escalator: bool
        """

        self._escalator = escalator

    @property
    def hearing_loop(self):
        """Gets the hearing_loop of this V3StopAccessibility.

        Indicates if there is a hearing loop facility at the stop/platform

        :return: The hearing_loop of this V3StopAccessibility.
        :rtype: bool
        """
        return self._hearing_loop

    @hearing_loop.setter
    def hearing_loop(self, hearing_loop):
        """Sets the hearing_loop of this V3StopAccessibility.

        Indicates if there is a hearing loop facility at the stop/platform

        :param hearing_loop: The hearing_loop of this V3StopAccessibility.
        :type hearing_loop: bool
        """

        self._hearing_loop = hearing_loop

    @property
    def lift(self):
        """Gets the lift of this V3StopAccessibility.

        Indicates if there is an elevator at the stop/platform

        :return: The lift of this V3StopAccessibility.
        :rtype: bool
        """
        return self._lift

    @lift.setter
    def lift(self, lift):
        """Sets the lift of this V3StopAccessibility.

        Indicates if there is an elevator at the stop/platform

        :param lift: The lift of this V3StopAccessibility.
        :type lift: bool
        """

        self._lift = lift

    @property
    def lighting(self):
        """Gets the lighting of this V3StopAccessibility.

        Indicates if there is lighting at the stop

        :return: The lighting of this V3StopAccessibility.
        :rtype: bool
        """
        return self._lighting

    @lighting.setter
    def lighting(self, lighting):
        """Sets the lighting of this V3StopAccessibility.

        Indicates if there is lighting at the stop

        :param lighting: The lighting of this V3StopAccessibility.
        :type lighting: bool
        """

        self._lighting = lighting

    @property
    def platform_number(self):
        """Gets the platform_number of this V3StopAccessibility.

        Indicates the platform number for xivic information (Platform 0 indicates general stop facilities)

        :return: The platform_number of this V3StopAccessibility.
        :rtype: int
        """
        return self._platform_number

    @platform_number.setter
    def platform_number(self, platform_number):
        """Sets the platform_number of this V3StopAccessibility.

        Indicates the platform number for xivic information (Platform 0 indicates general stop facilities)

        :param platform_number: The platform_number of this V3StopAccessibility.
        :type platform_number: int
        """

        self._platform_number = platform_number

    @property
    def stairs(self):
        """Gets the stairs of this V3StopAccessibility.

        Indicates if there are stairs available in the stop

        :return: The stairs of this V3StopAccessibility.
        :rtype: bool
        """
        return self._stairs

    @stairs.setter
    def stairs(self, stairs):
        """Sets the stairs of this V3StopAccessibility.

        Indicates if there are stairs available in the stop

        :param stairs: The stairs of this V3StopAccessibility.
        :type stairs: bool
        """

        self._stairs = stairs

    @property
    def stop_accessible(self):
        """Gets the stop_accessible of this V3StopAccessibility.

        Indicates if the stop is accessible

        :return: The stop_accessible of this V3StopAccessibility.
        :rtype: bool
        """
        return self._stop_accessible

    @stop_accessible.setter
    def stop_accessible(self, stop_accessible):
        """Sets the stop_accessible of this V3StopAccessibility.

        Indicates if the stop is accessible

        :param stop_accessible: The stop_accessible of this V3StopAccessibility.
        :type stop_accessible: bool
        """

        self._stop_accessible = stop_accessible

    @property
    def tactile_ground_surface_indicator(self):
        """Gets the tactile_ground_surface_indicator of this V3StopAccessibility.

        Indicates if there are tactile tiles (also known as tactile ground surface indicators, or TGSIs) at the stop

        :return: The tactile_ground_surface_indicator of this V3StopAccessibility.
        :rtype: bool
        """
        return self._tactile_ground_surface_indicator

    @tactile_ground_surface_indicator.setter
    def tactile_ground_surface_indicator(self, tactile_ground_surface_indicator):
        """Sets the tactile_ground_surface_indicator of this V3StopAccessibility.

        Indicates if there are tactile tiles (also known as tactile ground surface indicators, or TGSIs) at the stop

        :param tactile_ground_surface_indicator: The tactile_ground_surface_indicator of this V3StopAccessibility.
        :type tactile_ground_surface_indicator: bool
        """

        self._tactile_ground_surface_indicator = tactile_ground_surface_indicator

    @property
    def waiting_room(self):
        """Gets the waiting_room of this V3StopAccessibility.

        Indicates if there is a general waiting area at the stop

        :return: The waiting_room of this V3StopAccessibility.
        :rtype: bool
        """
        return self._waiting_room

    @waiting_room.setter
    def waiting_room(self, waiting_room):
        """Sets the waiting_room of this V3StopAccessibility.

        Indicates if there is a general waiting area at the stop

        :param waiting_room: The waiting_room of this V3StopAccessibility.
        :type waiting_room: bool
        """

        self._waiting_room = waiting_room

    @property
    def wheelchair(self):
        """Gets the wheelchair of this V3StopAccessibility.


        :return: The wheelchair of this V3StopAccessibility.
        :rtype: V3StopAccessibilityWheelchair
        """
        return self._wheelchair

    @wheelchair.setter
    def wheelchair(self, wheelchair):
        """Sets the wheelchair of this V3StopAccessibility.


        :param wheelchair: The wheelchair of this V3StopAccessibility.
        :type wheelchair: V3StopAccessibilityWheelchair
        """

        self._wheelchair = wheelchair
