# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class V3SiriLineRef(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, direction_ref: int=None, line_ref: str=None):
        """V3SiriLineRef - a model defined in OpenAPI

        :param direction_ref: The direction_ref of this V3SiriLineRef.
        :param line_ref: The line_ref of this V3SiriLineRef.
        """
        self.openapi_types = {
            'direction_ref': int,
            'line_ref': str
        }

        self.attribute_map = {
            'direction_ref': 'direction_ref',
            'line_ref': 'line_ref'
        }

        self._direction_ref = direction_ref
        self._line_ref = line_ref

    @classmethod
    def from_dict(cls, dikt: dict) -> 'V3SiriLineRef':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The V3.SiriLineRef of this V3SiriLineRef.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def direction_ref(self):
        """Gets the direction_ref of this V3SiriLineRef.

        Siri DirectionRef  (in, out, up, down, clockwise, counterclockwise, Inbound, Outbound)

        :return: The direction_ref of this V3SiriLineRef.
        :rtype: int
        """
        return self._direction_ref

    @direction_ref.setter
    def direction_ref(self, direction_ref):
        """Sets the direction_ref of this V3SiriLineRef.

        Siri DirectionRef  (in, out, up, down, clockwise, counterclockwise, Inbound, Outbound)

        :param direction_ref: The direction_ref of this V3SiriLineRef.
        :type direction_ref: int
        """
        allowed_values = [1, 2, 5, 10, 16, 32, 65, 130]  # noqa: E501
        if direction_ref not in allowed_values:
            raise ValueError(
                "Invalid value for `direction_ref` ({0}), must be one of {1}"
                .format(direction_ref, allowed_values)
            )

        self._direction_ref = direction_ref

    @property
    def line_ref(self):
        """Gets the line_ref of this V3SiriLineRef.

        Siri LineRef

        :return: The line_ref of this V3SiriLineRef.
        :rtype: str
        """
        return self._line_ref

    @line_ref.setter
    def line_ref(self, line_ref):
        """Sets the line_ref of this V3SiriLineRef.

        Siri LineRef

        :param line_ref: The line_ref of this V3SiriLineRef.
        :type line_ref: str
        """
        if line_ref is None:
            raise ValueError("Invalid value for `line_ref`, must not be `None`")

        self._line_ref = line_ref
