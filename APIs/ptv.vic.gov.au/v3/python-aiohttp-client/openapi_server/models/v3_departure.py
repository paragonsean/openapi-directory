# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class V3Departure(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, at_platform: bool=None, departure_sequence: int=None, direction_id: int=None, disruption_ids: List[int]=None, estimated_departure_utc: datetime=None, flags: str=None, platform_number: str=None, route_id: int=None, run_id: int=None, run_ref: str=None, scheduled_departure_utc: datetime=None, stop_id: int=None):
        """V3Departure - a model defined in OpenAPI

        :param at_platform: The at_platform of this V3Departure.
        :param departure_sequence: The departure_sequence of this V3Departure.
        :param direction_id: The direction_id of this V3Departure.
        :param disruption_ids: The disruption_ids of this V3Departure.
        :param estimated_departure_utc: The estimated_departure_utc of this V3Departure.
        :param flags: The flags of this V3Departure.
        :param platform_number: The platform_number of this V3Departure.
        :param route_id: The route_id of this V3Departure.
        :param run_id: The run_id of this V3Departure.
        :param run_ref: The run_ref of this V3Departure.
        :param scheduled_departure_utc: The scheduled_departure_utc of this V3Departure.
        :param stop_id: The stop_id of this V3Departure.
        """
        self.openapi_types = {
            'at_platform': bool,
            'departure_sequence': int,
            'direction_id': int,
            'disruption_ids': List[int],
            'estimated_departure_utc': datetime,
            'flags': str,
            'platform_number': str,
            'route_id': int,
            'run_id': int,
            'run_ref': str,
            'scheduled_departure_utc': datetime,
            'stop_id': int
        }

        self.attribute_map = {
            'at_platform': 'at_platform',
            'departure_sequence': 'departure_sequence',
            'direction_id': 'direction_id',
            'disruption_ids': 'disruption_ids',
            'estimated_departure_utc': 'estimated_departure_utc',
            'flags': 'flags',
            'platform_number': 'platform_number',
            'route_id': 'route_id',
            'run_id': 'run_id',
            'run_ref': 'run_ref',
            'scheduled_departure_utc': 'scheduled_departure_utc',
            'stop_id': 'stop_id'
        }

        self._at_platform = at_platform
        self._departure_sequence = departure_sequence
        self._direction_id = direction_id
        self._disruption_ids = disruption_ids
        self._estimated_departure_utc = estimated_departure_utc
        self._flags = flags
        self._platform_number = platform_number
        self._route_id = route_id
        self._run_id = run_id
        self._run_ref = run_ref
        self._scheduled_departure_utc = scheduled_departure_utc
        self._stop_id = stop_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'V3Departure':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The V3.Departure of this V3Departure.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def at_platform(self):
        """Gets the at_platform of this V3Departure.

        Indicates if the metropolitan train service is at the platform at the time of query; returns false for other modes

        :return: The at_platform of this V3Departure.
        :rtype: bool
        """
        return self._at_platform

    @at_platform.setter
    def at_platform(self, at_platform):
        """Sets the at_platform of this V3Departure.

        Indicates if the metropolitan train service is at the platform at the time of query; returns false for other modes

        :param at_platform: The at_platform of this V3Departure.
        :type at_platform: bool
        """

        self._at_platform = at_platform

    @property
    def departure_sequence(self):
        """Gets the departure_sequence of this V3Departure.

        Chronological sequence for the departures in a run. Order ascendingly by this field to get chronological order (earliest first) of departures with the same run_ref. NOTE, this field is not always N+1 or N-1 of the previous or following departure. e.g 100, 200, 250, 300 instead of 1, 2, 3, 4

        :return: The departure_sequence of this V3Departure.
        :rtype: int
        """
        return self._departure_sequence

    @departure_sequence.setter
    def departure_sequence(self, departure_sequence):
        """Sets the departure_sequence of this V3Departure.

        Chronological sequence for the departures in a run. Order ascendingly by this field to get chronological order (earliest first) of departures with the same run_ref. NOTE, this field is not always N+1 or N-1 of the previous or following departure. e.g 100, 200, 250, 300 instead of 1, 2, 3, 4

        :param departure_sequence: The departure_sequence of this V3Departure.
        :type departure_sequence: int
        """

        self._departure_sequence = departure_sequence

    @property
    def direction_id(self):
        """Gets the direction_id of this V3Departure.

        Direction of travel identifier

        :return: The direction_id of this V3Departure.
        :rtype: int
        """
        return self._direction_id

    @direction_id.setter
    def direction_id(self, direction_id):
        """Sets the direction_id of this V3Departure.

        Direction of travel identifier

        :param direction_id: The direction_id of this V3Departure.
        :type direction_id: int
        """

        self._direction_id = direction_id

    @property
    def disruption_ids(self):
        """Gets the disruption_ids of this V3Departure.

        Disruption information identifier(s)

        :return: The disruption_ids of this V3Departure.
        :rtype: List[int]
        """
        return self._disruption_ids

    @disruption_ids.setter
    def disruption_ids(self, disruption_ids):
        """Sets the disruption_ids of this V3Departure.

        Disruption information identifier(s)

        :param disruption_ids: The disruption_ids of this V3Departure.
        :type disruption_ids: List[int]
        """

        self._disruption_ids = disruption_ids

    @property
    def estimated_departure_utc(self):
        """Gets the estimated_departure_utc of this V3Departure.

        Real-time estimate of departure time and date in ISO 8601 UTC format

        :return: The estimated_departure_utc of this V3Departure.
        :rtype: datetime
        """
        return self._estimated_departure_utc

    @estimated_departure_utc.setter
    def estimated_departure_utc(self, estimated_departure_utc):
        """Sets the estimated_departure_utc of this V3Departure.

        Real-time estimate of departure time and date in ISO 8601 UTC format

        :param estimated_departure_utc: The estimated_departure_utc of this V3Departure.
        :type estimated_departure_utc: datetime
        """

        self._estimated_departure_utc = estimated_departure_utc

    @property
    def flags(self):
        """Gets the flags of this V3Departure.

        Flag indicating special condition for run (e.g. RR Reservations Required, GC Guaranteed Connection, DOO Drop Off Only, PUO Pick Up Only, MO Mondays only, TU Tuesdays only, WE Wednesdays only, TH Thursdays only, FR Fridays only, SS School days only; ignore E flag)

        :return: The flags of this V3Departure.
        :rtype: str
        """
        return self._flags

    @flags.setter
    def flags(self, flags):
        """Sets the flags of this V3Departure.

        Flag indicating special condition for run (e.g. RR Reservations Required, GC Guaranteed Connection, DOO Drop Off Only, PUO Pick Up Only, MO Mondays only, TU Tuesdays only, WE Wednesdays only, TH Thursdays only, FR Fridays only, SS School days only; ignore E flag)

        :param flags: The flags of this V3Departure.
        :type flags: str
        """

        self._flags = flags

    @property
    def platform_number(self):
        """Gets the platform_number of this V3Departure.

        Platform number at stop (metropolitan train only; returns null for other modes)

        :return: The platform_number of this V3Departure.
        :rtype: str
        """
        return self._platform_number

    @platform_number.setter
    def platform_number(self, platform_number):
        """Sets the platform_number of this V3Departure.

        Platform number at stop (metropolitan train only; returns null for other modes)

        :param platform_number: The platform_number of this V3Departure.
        :type platform_number: str
        """

        self._platform_number = platform_number

    @property
    def route_id(self):
        """Gets the route_id of this V3Departure.

        Route identifier

        :return: The route_id of this V3Departure.
        :rtype: int
        """
        return self._route_id

    @route_id.setter
    def route_id(self, route_id):
        """Sets the route_id of this V3Departure.

        Route identifier

        :param route_id: The route_id of this V3Departure.
        :type route_id: int
        """

        self._route_id = route_id

    @property
    def run_id(self):
        """Gets the run_id of this V3Departure.

        Numeric trip/service run identifier. Defaults to -1 when run identifier is Alphanumeric

        :return: The run_id of this V3Departure.
        :rtype: int
        """
        return self._run_id

    @run_id.setter
    def run_id(self, run_id):
        """Sets the run_id of this V3Departure.

        Numeric trip/service run identifier. Defaults to -1 when run identifier is Alphanumeric

        :param run_id: The run_id of this V3Departure.
        :type run_id: int
        """

        self._run_id = run_id

    @property
    def run_ref(self):
        """Gets the run_ref of this V3Departure.

        Alphanumeric trip/service run identifier

        :return: The run_ref of this V3Departure.
        :rtype: str
        """
        return self._run_ref

    @run_ref.setter
    def run_ref(self, run_ref):
        """Sets the run_ref of this V3Departure.

        Alphanumeric trip/service run identifier

        :param run_ref: The run_ref of this V3Departure.
        :type run_ref: str
        """

        self._run_ref = run_ref

    @property
    def scheduled_departure_utc(self):
        """Gets the scheduled_departure_utc of this V3Departure.

        Scheduled (i.e. timetabled) departure time and date in ISO 8601 UTC format

        :return: The scheduled_departure_utc of this V3Departure.
        :rtype: datetime
        """
        return self._scheduled_departure_utc

    @scheduled_departure_utc.setter
    def scheduled_departure_utc(self, scheduled_departure_utc):
        """Sets the scheduled_departure_utc of this V3Departure.

        Scheduled (i.e. timetabled) departure time and date in ISO 8601 UTC format

        :param scheduled_departure_utc: The scheduled_departure_utc of this V3Departure.
        :type scheduled_departure_utc: datetime
        """

        self._scheduled_departure_utc = scheduled_departure_utc

    @property
    def stop_id(self):
        """Gets the stop_id of this V3Departure.

        Stop identifier

        :return: The stop_id of this V3Departure.
        :rtype: int
        """
        return self._stop_id

    @stop_id.setter
    def stop_id(self, stop_id):
        """Sets the stop_id of this V3Departure.

        Stop identifier

        :param stop_id: The stop_id of this V3Departure.
        :type stop_id: int
        """

        self._stop_id = stop_id
