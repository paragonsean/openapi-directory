# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.v3_disruption import V3Disruption
from openapi_server.models.v3_status import V3Status
from openapi_server.models.v3_stop_on_route import V3StopOnRoute
from openapi_server import util


class V3StopsOnRouteResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disruptions: Dict[str, V3Disruption]=None, geopath: List[object]=None, status: V3Status=None, stops: List[V3StopOnRoute]=None):
        """V3StopsOnRouteResponse - a model defined in OpenAPI

        :param disruptions: The disruptions of this V3StopsOnRouteResponse.
        :param geopath: The geopath of this V3StopsOnRouteResponse.
        :param status: The status of this V3StopsOnRouteResponse.
        :param stops: The stops of this V3StopsOnRouteResponse.
        """
        self.openapi_types = {
            'disruptions': Dict[str, V3Disruption],
            'geopath': List[object],
            'status': V3Status,
            'stops': List[V3StopOnRoute]
        }

        self.attribute_map = {
            'disruptions': 'disruptions',
            'geopath': 'geopath',
            'status': 'status',
            'stops': 'stops'
        }

        self._disruptions = disruptions
        self._geopath = geopath
        self._status = status
        self._stops = stops

    @classmethod
    def from_dict(cls, dikt: dict) -> 'V3StopsOnRouteResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The V3.StopsOnRouteResponse of this V3StopsOnRouteResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disruptions(self):
        """Gets the disruptions of this V3StopsOnRouteResponse.

        Disruption information applicable to relevant routes or stops

        :return: The disruptions of this V3StopsOnRouteResponse.
        :rtype: Dict[str, V3Disruption]
        """
        return self._disruptions

    @disruptions.setter
    def disruptions(self, disruptions):
        """Sets the disruptions of this V3StopsOnRouteResponse.

        Disruption information applicable to relevant routes or stops

        :param disruptions: The disruptions of this V3StopsOnRouteResponse.
        :type disruptions: Dict[str, V3Disruption]
        """

        self._disruptions = disruptions

    @property
    def geopath(self):
        """Gets the geopath of this V3StopsOnRouteResponse.

        GeoPath for the route

        :return: The geopath of this V3StopsOnRouteResponse.
        :rtype: List[object]
        """
        return self._geopath

    @geopath.setter
    def geopath(self, geopath):
        """Sets the geopath of this V3StopsOnRouteResponse.

        GeoPath for the route

        :param geopath: The geopath of this V3StopsOnRouteResponse.
        :type geopath: List[object]
        """

        self._geopath = geopath

    @property
    def status(self):
        """Gets the status of this V3StopsOnRouteResponse.


        :return: The status of this V3StopsOnRouteResponse.
        :rtype: V3Status
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this V3StopsOnRouteResponse.


        :param status: The status of this V3StopsOnRouteResponse.
        :type status: V3Status
        """

        self._status = status

    @property
    def stops(self):
        """Gets the stops of this V3StopsOnRouteResponse.

        Train stations, tram stops, bus stops, regional coach stops or Night Bus stops

        :return: The stops of this V3StopsOnRouteResponse.
        :rtype: List[V3StopOnRoute]
        """
        return self._stops

    @stops.setter
    def stops(self, stops):
        """Sets the stops of this V3StopsOnRouteResponse.

        Train stations, tram stops, bus stops, regional coach stops or Night Bus stops

        :param stops: The stops of this V3StopsOnRouteResponse.
        :type stops: List[V3StopOnRoute]
        """

        self._stops = stops
