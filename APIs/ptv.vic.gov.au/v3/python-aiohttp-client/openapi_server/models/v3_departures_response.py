# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.v3_departure import V3Departure
from openapi_server.models.v3_direction import V3Direction
from openapi_server.models.v3_disruption import V3Disruption
from openapi_server.models.v3_run import V3Run
from openapi_server.models.v3_status import V3Status
from openapi_server.models.v3_stop_model import V3StopModel
from openapi_server import util


class V3DeparturesResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, departures: List[V3Departure]=None, directions: Dict[str, V3Direction]=None, disruptions: Dict[str, V3Disruption]=None, routes: Dict[str, object]=None, runs: Dict[str, V3Run]=None, status: V3Status=None, stops: Dict[str, V3StopModel]=None):
        """V3DeparturesResponse - a model defined in OpenAPI

        :param departures: The departures of this V3DeparturesResponse.
        :param directions: The directions of this V3DeparturesResponse.
        :param disruptions: The disruptions of this V3DeparturesResponse.
        :param routes: The routes of this V3DeparturesResponse.
        :param runs: The runs of this V3DeparturesResponse.
        :param status: The status of this V3DeparturesResponse.
        :param stops: The stops of this V3DeparturesResponse.
        """
        self.openapi_types = {
            'departures': List[V3Departure],
            'directions': Dict[str, V3Direction],
            'disruptions': Dict[str, V3Disruption],
            'routes': Dict[str, object],
            'runs': Dict[str, V3Run],
            'status': V3Status,
            'stops': Dict[str, V3StopModel]
        }

        self.attribute_map = {
            'departures': 'departures',
            'directions': 'directions',
            'disruptions': 'disruptions',
            'routes': 'routes',
            'runs': 'runs',
            'status': 'status',
            'stops': 'stops'
        }

        self._departures = departures
        self._directions = directions
        self._disruptions = disruptions
        self._routes = routes
        self._runs = runs
        self._status = status
        self._stops = stops

    @classmethod
    def from_dict(cls, dikt: dict) -> 'V3DeparturesResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The V3.DeparturesResponse of this V3DeparturesResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def departures(self):
        """Gets the departures of this V3DeparturesResponse.

        Timetabled and real-time service departures

        :return: The departures of this V3DeparturesResponse.
        :rtype: List[V3Departure]
        """
        return self._departures

    @departures.setter
    def departures(self, departures):
        """Sets the departures of this V3DeparturesResponse.

        Timetabled and real-time service departures

        :param departures: The departures of this V3DeparturesResponse.
        :type departures: List[V3Departure]
        """

        self._departures = departures

    @property
    def directions(self):
        """Gets the directions of this V3DeparturesResponse.

        Directions of travel of route

        :return: The directions of this V3DeparturesResponse.
        :rtype: Dict[str, V3Direction]
        """
        return self._directions

    @directions.setter
    def directions(self, directions):
        """Sets the directions of this V3DeparturesResponse.

        Directions of travel of route

        :param directions: The directions of this V3DeparturesResponse.
        :type directions: Dict[str, V3Direction]
        """

        self._directions = directions

    @property
    def disruptions(self):
        """Gets the disruptions of this V3DeparturesResponse.

        Disruption information applicable to relevant routes or stops

        :return: The disruptions of this V3DeparturesResponse.
        :rtype: Dict[str, V3Disruption]
        """
        return self._disruptions

    @disruptions.setter
    def disruptions(self, disruptions):
        """Sets the disruptions of this V3DeparturesResponse.

        Disruption information applicable to relevant routes or stops

        :param disruptions: The disruptions of this V3DeparturesResponse.
        :type disruptions: Dict[str, V3Disruption]
        """

        self._disruptions = disruptions

    @property
    def routes(self):
        """Gets the routes of this V3DeparturesResponse.

        Train lines, tram routes, bus routes, regional coach routes, Night Bus routes

        :return: The routes of this V3DeparturesResponse.
        :rtype: Dict[str, object]
        """
        return self._routes

    @routes.setter
    def routes(self, routes):
        """Sets the routes of this V3DeparturesResponse.

        Train lines, tram routes, bus routes, regional coach routes, Night Bus routes

        :param routes: The routes of this V3DeparturesResponse.
        :type routes: Dict[str, object]
        """

        self._routes = routes

    @property
    def runs(self):
        """Gets the runs of this V3DeparturesResponse.

        Individual trips/services of a route

        :return: The runs of this V3DeparturesResponse.
        :rtype: Dict[str, V3Run]
        """
        return self._runs

    @runs.setter
    def runs(self, runs):
        """Sets the runs of this V3DeparturesResponse.

        Individual trips/services of a route

        :param runs: The runs of this V3DeparturesResponse.
        :type runs: Dict[str, V3Run]
        """

        self._runs = runs

    @property
    def status(self):
        """Gets the status of this V3DeparturesResponse.


        :return: The status of this V3DeparturesResponse.
        :rtype: V3Status
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this V3DeparturesResponse.


        :param status: The status of this V3DeparturesResponse.
        :type status: V3Status
        """

        self._status = status

    @property
    def stops(self):
        """Gets the stops of this V3DeparturesResponse.

        A train station, tram stop, bus stop, regional coach stop or Night Bus stop

        :return: The stops of this V3DeparturesResponse.
        :rtype: Dict[str, V3StopModel]
        """
        return self._stops

    @stops.setter
    def stops(self, stops):
        """Sets the stops of this V3DeparturesResponse.

        A train station, tram stop, bus stop, regional coach stop or Night Bus stop

        :param stops: The stops of this V3DeparturesResponse.
        :type stops: Dict[str, V3StopModel]
        """

        self._stops = stops
