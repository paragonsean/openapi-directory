# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class V3StopAmenityDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, car_parking: str=None, cctv: bool=None, taxi_rank: bool=None, toilet: bool=None):
        """V3StopAmenityDetails - a model defined in OpenAPI

        :param car_parking: The car_parking of this V3StopAmenityDetails.
        :param cctv: The cctv of this V3StopAmenityDetails.
        :param taxi_rank: The taxi_rank of this V3StopAmenityDetails.
        :param toilet: The toilet of this V3StopAmenityDetails.
        """
        self.openapi_types = {
            'car_parking': str,
            'cctv': bool,
            'taxi_rank': bool,
            'toilet': bool
        }

        self.attribute_map = {
            'car_parking': 'car_parking',
            'cctv': 'cctv',
            'taxi_rank': 'taxi_rank',
            'toilet': 'toilet'
        }

        self._car_parking = car_parking
        self._cctv = cctv
        self._taxi_rank = taxi_rank
        self._toilet = toilet

    @classmethod
    def from_dict(cls, dikt: dict) -> 'V3StopAmenityDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The V3.StopAmenityDetails of this V3StopAmenityDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def car_parking(self):
        """Gets the car_parking of this V3StopAmenityDetails.

        The number of free car parking spots at the stop

        :return: The car_parking of this V3StopAmenityDetails.
        :rtype: str
        """
        return self._car_parking

    @car_parking.setter
    def car_parking(self, car_parking):
        """Sets the car_parking of this V3StopAmenityDetails.

        The number of free car parking spots at the stop

        :param car_parking: The car_parking of this V3StopAmenityDetails.
        :type car_parking: str
        """

        self._car_parking = car_parking

    @property
    def cctv(self):
        """Gets the cctv of this V3StopAmenityDetails.

        Indicates if there are CCTV (i.e. closed circuit television) cameras at the stop

        :return: The cctv of this V3StopAmenityDetails.
        :rtype: bool
        """
        return self._cctv

    @cctv.setter
    def cctv(self, cctv):
        """Sets the cctv of this V3StopAmenityDetails.

        Indicates if there are CCTV (i.e. closed circuit television) cameras at the stop

        :param cctv: The cctv of this V3StopAmenityDetails.
        :type cctv: bool
        """

        self._cctv = cctv

    @property
    def taxi_rank(self):
        """Gets the taxi_rank of this V3StopAmenityDetails.

        Indicates if there is a taxi rank at or near the stop

        :return: The taxi_rank of this V3StopAmenityDetails.
        :rtype: bool
        """
        return self._taxi_rank

    @taxi_rank.setter
    def taxi_rank(self, taxi_rank):
        """Sets the taxi_rank of this V3StopAmenityDetails.

        Indicates if there is a taxi rank at or near the stop

        :param taxi_rank: The taxi_rank of this V3StopAmenityDetails.
        :type taxi_rank: bool
        """

        self._taxi_rank = taxi_rank

    @property
    def toilet(self):
        """Gets the toilet of this V3StopAmenityDetails.

        Indicates if there is a public toilet at or near the stop

        :return: The toilet of this V3StopAmenityDetails.
        :rtype: bool
        """
        return self._toilet

    @toilet.setter
    def toilet(self, toilet):
        """Sets the toilet of this V3StopAmenityDetails.

        Indicates if there is a public toilet at or near the stop

        :param toilet: The toilet of this V3StopAmenityDetails.
        :type toilet: bool
        """

        self._toilet = toilet
