# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class V3SiriDownstreamSubscriptionDeleteRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, subscriber_ref: str=None, subscription_ref: List[str]=None):
        """V3SiriDownstreamSubscriptionDeleteRequest - a model defined in OpenAPI

        :param subscriber_ref: The subscriber_ref of this V3SiriDownstreamSubscriptionDeleteRequest.
        :param subscription_ref: The subscription_ref of this V3SiriDownstreamSubscriptionDeleteRequest.
        """
        self.openapi_types = {
            'subscriber_ref': str,
            'subscription_ref': List[str]
        }

        self.attribute_map = {
            'subscriber_ref': 'subscriber_ref',
            'subscription_ref': 'subscription_ref'
        }

        self._subscriber_ref = subscriber_ref
        self._subscription_ref = subscription_ref

    @classmethod
    def from_dict(cls, dikt: dict) -> 'V3SiriDownstreamSubscriptionDeleteRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The V3.SiriDownstreamSubscriptionDeleteRequest of this V3SiriDownstreamSubscriptionDeleteRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def subscriber_ref(self):
        """Gets the subscriber_ref of this V3SiriDownstreamSubscriptionDeleteRequest.

        Siri Subscriber Ref

        :return: The subscriber_ref of this V3SiriDownstreamSubscriptionDeleteRequest.
        :rtype: str
        """
        return self._subscriber_ref

    @subscriber_ref.setter
    def subscriber_ref(self, subscriber_ref):
        """Sets the subscriber_ref of this V3SiriDownstreamSubscriptionDeleteRequest.

        Siri Subscriber Ref

        :param subscriber_ref: The subscriber_ref of this V3SiriDownstreamSubscriptionDeleteRequest.
        :type subscriber_ref: str
        """
        if subscriber_ref is None:
            raise ValueError("Invalid value for `subscriber_ref`, must not be `None`")

        self._subscriber_ref = subscriber_ref

    @property
    def subscription_ref(self):
        """Gets the subscription_ref of this V3SiriDownstreamSubscriptionDeleteRequest.

        Siri Subscription Reference(s) - Unique to a Subscriber Ref.              If `null`, then all subscriptions will be terminated for the referenced Subscriber.

        :return: The subscription_ref of this V3SiriDownstreamSubscriptionDeleteRequest.
        :rtype: List[str]
        """
        return self._subscription_ref

    @subscription_ref.setter
    def subscription_ref(self, subscription_ref):
        """Sets the subscription_ref of this V3SiriDownstreamSubscriptionDeleteRequest.

        Siri Subscription Reference(s) - Unique to a Subscriber Ref.              If `null`, then all subscriptions will be terminated for the referenced Subscriber.

        :param subscription_ref: The subscription_ref of this V3SiriDownstreamSubscriptionDeleteRequest.
        :type subscription_ref: List[str]
        """

        self._subscription_ref = subscription_ref
