# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.v3_stop_departure_request_route_direction import V3StopDepartureRequestRouteDirection
from openapi_server import util


class V3StopDepartureRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gtfs: bool=None, max_results: int=None, route_directions: List[V3StopDepartureRequestRouteDirection]=None, route_type: int=None, stop_id: int=None):
        """V3StopDepartureRequest - a model defined in OpenAPI

        :param gtfs: The gtfs of this V3StopDepartureRequest.
        :param max_results: The max_results of this V3StopDepartureRequest.
        :param route_directions: The route_directions of this V3StopDepartureRequest.
        :param route_type: The route_type of this V3StopDepartureRequest.
        :param stop_id: The stop_id of this V3StopDepartureRequest.
        """
        self.openapi_types = {
            'gtfs': bool,
            'max_results': int,
            'route_directions': List[V3StopDepartureRequestRouteDirection],
            'route_type': int,
            'stop_id': int
        }

        self.attribute_map = {
            'gtfs': 'gtfs',
            'max_results': 'max_results',
            'route_directions': 'route_directions',
            'route_type': 'route_type',
            'stop_id': 'stop_id'
        }

        self._gtfs = gtfs
        self._max_results = max_results
        self._route_directions = route_directions
        self._route_type = route_type
        self._stop_id = stop_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'V3StopDepartureRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The V3.StopDepartureRequest of this V3StopDepartureRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gtfs(self):
        """Gets the gtfs of this V3StopDepartureRequest.

        Indicates that stop_id parameter will accept \"GTFS stop_id\" data and route_directions[x].route_id parameters will accept route_gtfs_id data

        :return: The gtfs of this V3StopDepartureRequest.
        :rtype: bool
        """
        return self._gtfs

    @gtfs.setter
    def gtfs(self, gtfs):
        """Sets the gtfs of this V3StopDepartureRequest.

        Indicates that stop_id parameter will accept \"GTFS stop_id\" data and route_directions[x].route_id parameters will accept route_gtfs_id data

        :param gtfs: The gtfs of this V3StopDepartureRequest.
        :type gtfs: bool
        """

        self._gtfs = gtfs

    @property
    def max_results(self):
        """Gets the max_results of this V3StopDepartureRequest.

        Maximum number of results returned

        :return: The max_results of this V3StopDepartureRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this V3StopDepartureRequest.

        Maximum number of results returned

        :param max_results: The max_results of this V3StopDepartureRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 2147483647:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `2147483647`")
        if max_results is not None and max_results < 0:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `0`")

        self._max_results = max_results

    @property
    def route_directions(self):
        """Gets the route_directions of this V3StopDepartureRequest.

        The route directions to find departures for at this stop.

        :return: The route_directions of this V3StopDepartureRequest.
        :rtype: List[V3StopDepartureRequestRouteDirection]
        """
        return self._route_directions

    @route_directions.setter
    def route_directions(self, route_directions):
        """Sets the route_directions of this V3StopDepartureRequest.

        The route directions to find departures for at this stop.

        :param route_directions: The route_directions of this V3StopDepartureRequest.
        :type route_directions: List[V3StopDepartureRequestRouteDirection]
        """
        if route_directions is None:
            raise ValueError("Invalid value for `route_directions`, must not be `None`")

        self._route_directions = route_directions

    @property
    def route_type(self):
        """Gets the route_type of this V3StopDepartureRequest.

        Number identifying transport mode; values returned via RouteTypes API

        :return: The route_type of this V3StopDepartureRequest.
        :rtype: int
        """
        return self._route_type

    @route_type.setter
    def route_type(self, route_type):
        """Sets the route_type of this V3StopDepartureRequest.

        Number identifying transport mode; values returned via RouteTypes API

        :param route_type: The route_type of this V3StopDepartureRequest.
        :type route_type: int
        """
        allowed_values = [0, 1, 2, 3, 4]  # noqa: E501
        if route_type not in allowed_values:
            raise ValueError(
                "Invalid value for `route_type` ({0}), must be one of {1}"
                .format(route_type, allowed_values)
            )

        self._route_type = route_type

    @property
    def stop_id(self):
        """Gets the stop_id of this V3StopDepartureRequest.

        Identifier of stop; values returned by Stops API

        :return: The stop_id of this V3StopDepartureRequest.
        :rtype: int
        """
        return self._stop_id

    @stop_id.setter
    def stop_id(self, stop_id):
        """Sets the stop_id of this V3StopDepartureRequest.

        Identifier of stop; values returned by Stops API

        :param stop_id: The stop_id of this V3StopDepartureRequest.
        :type stop_id: int
        """
        if stop_id is not None and stop_id > 2147483647:
            raise ValueError("Invalid value for `stop_id`, must be a value less than or equal to `2147483647`")
        if stop_id is not None and stop_id < 0:
            raise ValueError("Invalid value for `stop_id`, must be a value greater than or equal to `0`")

        self._stop_id = stop_id
