# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.v3_siri_subscription_topic import V3SiriSubscriptionTopic
import re
from openapi_server import util


class V3SiriProductionTimetableSubscriptionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, consumer_address: str=None, end_time: datetime=None, initial_termination_time: datetime=None, siri_format: int=None, siri_version: str=None, start_time: datetime=None, subscriber_ref: str=None, subscription_ref: str=None, topics: List[V3SiriSubscriptionTopic]=None):
        """V3SiriProductionTimetableSubscriptionRequest - a model defined in OpenAPI

        :param consumer_address: The consumer_address of this V3SiriProductionTimetableSubscriptionRequest.
        :param end_time: The end_time of this V3SiriProductionTimetableSubscriptionRequest.
        :param initial_termination_time: The initial_termination_time of this V3SiriProductionTimetableSubscriptionRequest.
        :param siri_format: The siri_format of this V3SiriProductionTimetableSubscriptionRequest.
        :param siri_version: The siri_version of this V3SiriProductionTimetableSubscriptionRequest.
        :param start_time: The start_time of this V3SiriProductionTimetableSubscriptionRequest.
        :param subscriber_ref: The subscriber_ref of this V3SiriProductionTimetableSubscriptionRequest.
        :param subscription_ref: The subscription_ref of this V3SiriProductionTimetableSubscriptionRequest.
        :param topics: The topics of this V3SiriProductionTimetableSubscriptionRequest.
        """
        self.openapi_types = {
            'consumer_address': str,
            'end_time': datetime,
            'initial_termination_time': datetime,
            'siri_format': int,
            'siri_version': str,
            'start_time': datetime,
            'subscriber_ref': str,
            'subscription_ref': str,
            'topics': List[V3SiriSubscriptionTopic]
        }

        self.attribute_map = {
            'consumer_address': 'consumer_address',
            'end_time': 'end_time',
            'initial_termination_time': 'initial_termination_time',
            'siri_format': 'siri_format',
            'siri_version': 'siri_version',
            'start_time': 'start_time',
            'subscriber_ref': 'subscriber_ref',
            'subscription_ref': 'subscription_ref',
            'topics': 'topics'
        }

        self._consumer_address = consumer_address
        self._end_time = end_time
        self._initial_termination_time = initial_termination_time
        self._siri_format = siri_format
        self._siri_version = siri_version
        self._start_time = start_time
        self._subscriber_ref = subscriber_ref
        self._subscription_ref = subscription_ref
        self._topics = topics

    @classmethod
    def from_dict(cls, dikt: dict) -> 'V3SiriProductionTimetableSubscriptionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The V3.SiriProductionTimetableSubscriptionRequest of this V3SiriProductionTimetableSubscriptionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def consumer_address(self):
        """Gets the consumer_address of this V3SiriProductionTimetableSubscriptionRequest.

        Siri Consumer Address - Baseline and Updates will be sent to this address

        :return: The consumer_address of this V3SiriProductionTimetableSubscriptionRequest.
        :rtype: str
        """
        return self._consumer_address

    @consumer_address.setter
    def consumer_address(self, consumer_address):
        """Sets the consumer_address of this V3SiriProductionTimetableSubscriptionRequest.

        Siri Consumer Address - Baseline and Updates will be sent to this address

        :param consumer_address: The consumer_address of this V3SiriProductionTimetableSubscriptionRequest.
        :type consumer_address: str
        """
        if consumer_address is None:
            raise ValueError("Invalid value for `consumer_address`, must not be `None`")

        self._consumer_address = consumer_address

    @property
    def end_time(self):
        """Gets the end_time of this V3SiriProductionTimetableSubscriptionRequest.

        Siri End Time of the Validity Period

        :return: The end_time of this V3SiriProductionTimetableSubscriptionRequest.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this V3SiriProductionTimetableSubscriptionRequest.

        Siri End Time of the Validity Period

        :param end_time: The end_time of this V3SiriProductionTimetableSubscriptionRequest.
        :type end_time: datetime
        """
        if end_time is None:
            raise ValueError("Invalid value for `end_time`, must not be `None`")

        self._end_time = end_time

    @property
    def initial_termination_time(self):
        """Gets the initial_termination_time of this V3SiriProductionTimetableSubscriptionRequest.

        Siri Initial Termination Time - Expiry of the subscription

        :return: The initial_termination_time of this V3SiriProductionTimetableSubscriptionRequest.
        :rtype: datetime
        """
        return self._initial_termination_time

    @initial_termination_time.setter
    def initial_termination_time(self, initial_termination_time):
        """Sets the initial_termination_time of this V3SiriProductionTimetableSubscriptionRequest.

        Siri Initial Termination Time - Expiry of the subscription

        :param initial_termination_time: The initial_termination_time of this V3SiriProductionTimetableSubscriptionRequest.
        :type initial_termination_time: datetime
        """
        if initial_termination_time is None:
            raise ValueError("Invalid value for `initial_termination_time`, must not be `None`")

        self._initial_termination_time = initial_termination_time

    @property
    def siri_format(self):
        """Gets the siri_format of this V3SiriProductionTimetableSubscriptionRequest.

        Siri Message Format 'xml' or 'json'

        :return: The siri_format of this V3SiriProductionTimetableSubscriptionRequest.
        :rtype: int
        """
        return self._siri_format

    @siri_format.setter
    def siri_format(self, siri_format):
        """Sets the siri_format of this V3SiriProductionTimetableSubscriptionRequest.

        Siri Message Format 'xml' or 'json'

        :param siri_format: The siri_format of this V3SiriProductionTimetableSubscriptionRequest.
        :type siri_format: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if siri_format not in allowed_values:
            raise ValueError(
                "Invalid value for `siri_format` ({0}), must be one of {1}"
                .format(siri_format, allowed_values)
            )

        self._siri_format = siri_format

    @property
    def siri_version(self):
        """Gets the siri_version of this V3SiriProductionTimetableSubscriptionRequest.

        Siri Message Version '1.3' or '2.0'

        :return: The siri_version of this V3SiriProductionTimetableSubscriptionRequest.
        :rtype: str
        """
        return self._siri_version

    @siri_version.setter
    def siri_version(self, siri_version):
        """Sets the siri_version of this V3SiriProductionTimetableSubscriptionRequest.

        Siri Message Version '1.3' or '2.0'

        :param siri_version: The siri_version of this V3SiriProductionTimetableSubscriptionRequest.
        :type siri_version: str
        """
        if siri_version is None:
            raise ValueError("Invalid value for `siri_version`, must not be `None`")
        if siri_version is not None and not re.search(r'1.3|2.0', siri_version):
            raise ValueError("Invalid value for `siri_version`, must be a follow pattern or equal to `/1.3|2.0/`")

        self._siri_version = siri_version

    @property
    def start_time(self):
        """Gets the start_time of this V3SiriProductionTimetableSubscriptionRequest.

        Siri Start Time of the Validity Period

        :return: The start_time of this V3SiriProductionTimetableSubscriptionRequest.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this V3SiriProductionTimetableSubscriptionRequest.

        Siri Start Time of the Validity Period

        :param start_time: The start_time of this V3SiriProductionTimetableSubscriptionRequest.
        :type start_time: datetime
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")

        self._start_time = start_time

    @property
    def subscriber_ref(self):
        """Gets the subscriber_ref of this V3SiriProductionTimetableSubscriptionRequest.

        Siri Subscriber Ref

        :return: The subscriber_ref of this V3SiriProductionTimetableSubscriptionRequest.
        :rtype: str
        """
        return self._subscriber_ref

    @subscriber_ref.setter
    def subscriber_ref(self, subscriber_ref):
        """Sets the subscriber_ref of this V3SiriProductionTimetableSubscriptionRequest.

        Siri Subscriber Ref

        :param subscriber_ref: The subscriber_ref of this V3SiriProductionTimetableSubscriptionRequest.
        :type subscriber_ref: str
        """
        if subscriber_ref is None:
            raise ValueError("Invalid value for `subscriber_ref`, must not be `None`")

        self._subscriber_ref = subscriber_ref

    @property
    def subscription_ref(self):
        """Gets the subscription_ref of this V3SiriProductionTimetableSubscriptionRequest.

        Siri Subscription Ref - Unique to a Subscriber Ref

        :return: The subscription_ref of this V3SiriProductionTimetableSubscriptionRequest.
        :rtype: str
        """
        return self._subscription_ref

    @subscription_ref.setter
    def subscription_ref(self, subscription_ref):
        """Sets the subscription_ref of this V3SiriProductionTimetableSubscriptionRequest.

        Siri Subscription Ref - Unique to a Subscriber Ref

        :param subscription_ref: The subscription_ref of this V3SiriProductionTimetableSubscriptionRequest.
        :type subscription_ref: str
        """
        if subscription_ref is None:
            raise ValueError("Invalid value for `subscription_ref`, must not be `None`")

        self._subscription_ref = subscription_ref

    @property
    def topics(self):
        """Gets the topics of this V3SiriProductionTimetableSubscriptionRequest.


        :return: The topics of this V3SiriProductionTimetableSubscriptionRequest.
        :rtype: List[V3SiriSubscriptionTopic]
        """
        return self._topics

    @topics.setter
    def topics(self, topics):
        """Sets the topics of this V3SiriProductionTimetableSubscriptionRequest.


        :param topics: The topics of this V3SiriProductionTimetableSubscriptionRequest.
        :type topics: List[V3SiriSubscriptionTopic]
        """
        if topics is None:
            raise ValueError("Invalid value for `topics`, must not be `None`")

        self._topics = topics
