# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class V3SearchParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, include_addresses: bool=None, include_outlets: bool=None, latitude: float=None, longitude: float=None, match_route_by_suburb: bool=None, match_stop_by_gtfs_stop_id: bool=None, match_stop_by_suburb: bool=None, max_distance: float=None, route_types: List[int]=None):
        """V3SearchParameters - a model defined in OpenAPI

        :param include_addresses: The include_addresses of this V3SearchParameters.
        :param include_outlets: The include_outlets of this V3SearchParameters.
        :param latitude: The latitude of this V3SearchParameters.
        :param longitude: The longitude of this V3SearchParameters.
        :param match_route_by_suburb: The match_route_by_suburb of this V3SearchParameters.
        :param match_stop_by_gtfs_stop_id: The match_stop_by_gtfs_stop_id of this V3SearchParameters.
        :param match_stop_by_suburb: The match_stop_by_suburb of this V3SearchParameters.
        :param max_distance: The max_distance of this V3SearchParameters.
        :param route_types: The route_types of this V3SearchParameters.
        """
        self.openapi_types = {
            'include_addresses': bool,
            'include_outlets': bool,
            'latitude': float,
            'longitude': float,
            'match_route_by_suburb': bool,
            'match_stop_by_gtfs_stop_id': bool,
            'match_stop_by_suburb': bool,
            'max_distance': float,
            'route_types': List[int]
        }

        self.attribute_map = {
            'include_addresses': 'include_addresses',
            'include_outlets': 'include_outlets',
            'latitude': 'latitude',
            'longitude': 'longitude',
            'match_route_by_suburb': 'match_route_by_suburb',
            'match_stop_by_gtfs_stop_id': 'match_stop_by_gtfs_stop_id',
            'match_stop_by_suburb': 'match_stop_by_suburb',
            'max_distance': 'max_distance',
            'route_types': 'route_types'
        }

        self._include_addresses = include_addresses
        self._include_outlets = include_outlets
        self._latitude = latitude
        self._longitude = longitude
        self._match_route_by_suburb = match_route_by_suburb
        self._match_stop_by_gtfs_stop_id = match_stop_by_gtfs_stop_id
        self._match_stop_by_suburb = match_stop_by_suburb
        self._max_distance = max_distance
        self._route_types = route_types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'V3SearchParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The V3.SearchParameters of this V3SearchParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def include_addresses(self):
        """Gets the include_addresses of this V3SearchParameters.

        Placeholder for future development; currently unavailable

        :return: The include_addresses of this V3SearchParameters.
        :rtype: bool
        """
        return self._include_addresses

    @include_addresses.setter
    def include_addresses(self, include_addresses):
        """Sets the include_addresses of this V3SearchParameters.

        Placeholder for future development; currently unavailable

        :param include_addresses: The include_addresses of this V3SearchParameters.
        :type include_addresses: bool
        """

        self._include_addresses = include_addresses

    @property
    def include_outlets(self):
        """Gets the include_outlets of this V3SearchParameters.

        Indicates if outlets will be returned in response (default = true)

        :return: The include_outlets of this V3SearchParameters.
        :rtype: bool
        """
        return self._include_outlets

    @include_outlets.setter
    def include_outlets(self, include_outlets):
        """Sets the include_outlets of this V3SearchParameters.

        Indicates if outlets will be returned in response (default = true)

        :param include_outlets: The include_outlets of this V3SearchParameters.
        :type include_outlets: bool
        """

        self._include_outlets = include_outlets

    @property
    def latitude(self):
        """Gets the latitude of this V3SearchParameters.

        Filter by geographic coordinate of latitude

        :return: The latitude of this V3SearchParameters.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this V3SearchParameters.

        Filter by geographic coordinate of latitude

        :param latitude: The latitude of this V3SearchParameters.
        :type latitude: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this V3SearchParameters.

        Filter by geographic coordinate of longitude

        :return: The longitude of this V3SearchParameters.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this V3SearchParameters.

        Filter by geographic coordinate of longitude

        :param longitude: The longitude of this V3SearchParameters.
        :type longitude: float
        """

        self._longitude = longitude

    @property
    def match_route_by_suburb(self):
        """Gets the match_route_by_suburb of this V3SearchParameters.

        Indicates whether to find routes by suburbs in the search term (default = true)

        :return: The match_route_by_suburb of this V3SearchParameters.
        :rtype: bool
        """
        return self._match_route_by_suburb

    @match_route_by_suburb.setter
    def match_route_by_suburb(self, match_route_by_suburb):
        """Sets the match_route_by_suburb of this V3SearchParameters.

        Indicates whether to find routes by suburbs in the search term (default = true)

        :param match_route_by_suburb: The match_route_by_suburb of this V3SearchParameters.
        :type match_route_by_suburb: bool
        """

        self._match_route_by_suburb = match_route_by_suburb

    @property
    def match_stop_by_gtfs_stop_id(self):
        """Gets the match_stop_by_gtfs_stop_id of this V3SearchParameters.

        Indicates whether to search for stops according to a metlink stop ID (default = false)

        :return: The match_stop_by_gtfs_stop_id of this V3SearchParameters.
        :rtype: bool
        """
        return self._match_stop_by_gtfs_stop_id

    @match_stop_by_gtfs_stop_id.setter
    def match_stop_by_gtfs_stop_id(self, match_stop_by_gtfs_stop_id):
        """Sets the match_stop_by_gtfs_stop_id of this V3SearchParameters.

        Indicates whether to search for stops according to a metlink stop ID (default = false)

        :param match_stop_by_gtfs_stop_id: The match_stop_by_gtfs_stop_id of this V3SearchParameters.
        :type match_stop_by_gtfs_stop_id: bool
        """

        self._match_stop_by_gtfs_stop_id = match_stop_by_gtfs_stop_id

    @property
    def match_stop_by_suburb(self):
        """Gets the match_stop_by_suburb of this V3SearchParameters.

        Indicates whether to find stops by suburbs in the search term (default = true)

        :return: The match_stop_by_suburb of this V3SearchParameters.
        :rtype: bool
        """
        return self._match_stop_by_suburb

    @match_stop_by_suburb.setter
    def match_stop_by_suburb(self, match_stop_by_suburb):
        """Sets the match_stop_by_suburb of this V3SearchParameters.

        Indicates whether to find stops by suburbs in the search term (default = true)

        :param match_stop_by_suburb: The match_stop_by_suburb of this V3SearchParameters.
        :type match_stop_by_suburb: bool
        """

        self._match_stop_by_suburb = match_stop_by_suburb

    @property
    def max_distance(self):
        """Gets the max_distance of this V3SearchParameters.

        Filter by maximum distance (in metres) from location specified via latitude and longitude parameters

        :return: The max_distance of this V3SearchParameters.
        :rtype: float
        """
        return self._max_distance

    @max_distance.setter
    def max_distance(self, max_distance):
        """Sets the max_distance of this V3SearchParameters.

        Filter by maximum distance (in metres) from location specified via latitude and longitude parameters

        :param max_distance: The max_distance of this V3SearchParameters.
        :type max_distance: float
        """

        self._max_distance = max_distance

    @property
    def route_types(self):
        """Gets the route_types of this V3SearchParameters.

        Filter by route_type; values returned via RouteTypes API (note: stops and routes are ordered by route_types specified)

        :return: The route_types of this V3SearchParameters.
        :rtype: List[int]
        """
        return self._route_types

    @route_types.setter
    def route_types(self, route_types):
        """Sets the route_types of this V3SearchParameters.

        Filter by route_type; values returned via RouteTypes API (note: stops and routes are ordered by route_types specified)

        :param route_types: The route_types of this V3SearchParameters.
        :type route_types: List[int]
        """
        allowed_values = [0, 1, 2, 3, 4]  # noqa: E501
        if not set(route_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `route_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(route_types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._route_types = route_types
