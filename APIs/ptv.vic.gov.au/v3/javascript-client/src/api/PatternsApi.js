/**
 * PTV Timetable API - Version 3
 * The PTV Timetable API provides direct access to Public Transport Victoriaâ€™s public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * Documentation for Version 2 of the PTV Timetable API  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.    Credits: This page has been based on Steve Bennett's http://opentransportdata.org/, used with permission.  
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import V3ErrorResponse from '../model/V3ErrorResponse';
import V3StoppingPattern from '../model/V3StoppingPattern';

/**
* Patterns service.
* @module api/PatternsApi
* @version v3
*/
export default class PatternsApi {

    /**
    * Constructs a new PatternsApi. 
    * @alias module:api/PatternsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the patternsGetPatternByRun operation.
     * @callback module:api/PatternsApi~patternsGetPatternByRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V3StoppingPattern} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View the stopping pattern for a specific trip/service run
     * @param {String} runRef The run_ref is the identifier of a run as returned by the departures/_* and runs/_* endpoints. WARNING, run_id is deprecated. Use run_ref instead.
     * @param {module:model/Number} routeType Number identifying transport mode; values returned via RouteTypes API
     * @param {Array.<module:model/String>} expand List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor and None. Default is Disruption. Run must be expanded to receive VehiclePosition and VehicleDescriptor information.
     * @param {Object} opts Optional parameters
     * @param {Number} [stopId] Filter by stop_id; values returned by Stops API
     * @param {Date} [dateUtc] Filter by the date and time of the request (ISO 8601 UTC format)
     * @param {Boolean} [includeSkippedStops] Include any skipped stops in a stopping pattern. Defaults to false.
     * @param {Boolean} [includeGeopath] Indicates if geopath data will be returned (default = false)
     * @param {String} [token] Please ignore
     * @param {String} [devid] Your developer id
     * @param {String} [signature] Authentication signature for request
     * @param {module:api/PatternsApi~patternsGetPatternByRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V3StoppingPattern}
     */
    patternsGetPatternByRun(runRef, routeType, expand, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'runRef' is set
      if (runRef === undefined || runRef === null) {
        throw new Error("Missing the required parameter 'runRef' when calling patternsGetPatternByRun");
      }
      // verify the required parameter 'routeType' is set
      if (routeType === undefined || routeType === null) {
        throw new Error("Missing the required parameter 'routeType' when calling patternsGetPatternByRun");
      }
      // verify the required parameter 'expand' is set
      if (expand === undefined || expand === null) {
        throw new Error("Missing the required parameter 'expand' when calling patternsGetPatternByRun");
      }

      let pathParams = {
        'run_ref': runRef,
        'route_type': routeType
      };
      let queryParams = {
        'expand': this.apiClient.buildCollectionParam(expand, 'multi'),
        'stop_id': opts['stopId'],
        'date_utc': opts['dateUtc'],
        'include_skipped_stops': opts['includeSkippedStops'],
        'include_geopath': opts['includeGeopath'],
        'token': opts['token'],
        'devid': opts['devid'],
        'signature': opts['signature']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html', 'text/json'];
      let returnType = V3StoppingPattern;
      return this.apiClient.callApi(
        '/v3/pattern/run/{run_ref}/route_type/{route_type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
