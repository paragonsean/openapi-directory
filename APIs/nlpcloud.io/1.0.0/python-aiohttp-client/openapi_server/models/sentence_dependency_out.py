# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dependencies_out import DependenciesOut
from openapi_server import util


class SentenceDependencyOut(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dependencies: DependenciesOut=None, sentence: str=None):
        """SentenceDependencyOut - a model defined in OpenAPI

        :param dependencies: The dependencies of this SentenceDependencyOut.
        :param sentence: The sentence of this SentenceDependencyOut.
        """
        self.openapi_types = {
            'dependencies': DependenciesOut,
            'sentence': str
        }

        self.attribute_map = {
            'dependencies': 'dependencies',
            'sentence': 'sentence'
        }

        self._dependencies = dependencies
        self._sentence = sentence

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SentenceDependencyOut':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SentenceDependencyOut of this SentenceDependencyOut.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dependencies(self):
        """Gets the dependencies of this SentenceDependencyOut.


        :return: The dependencies of this SentenceDependencyOut.
        :rtype: DependenciesOut
        """
        return self._dependencies

    @dependencies.setter
    def dependencies(self, dependencies):
        """Sets the dependencies of this SentenceDependencyOut.


        :param dependencies: The dependencies of this SentenceDependencyOut.
        :type dependencies: DependenciesOut
        """
        if dependencies is None:
            raise ValueError("Invalid value for `dependencies`, must not be `None`")

        self._dependencies = dependencies

    @property
    def sentence(self):
        """Gets the sentence of this SentenceDependencyOut.


        :return: The sentence of this SentenceDependencyOut.
        :rtype: str
        """
        return self._sentence

    @sentence.setter
    def sentence(self, sentence):
        """Sets the sentence of this SentenceDependencyOut.


        :param sentence: The sentence of this SentenceDependencyOut.
        :type sentence: str
        """
        if sentence is None:
            raise ValueError("Invalid value for `sentence`, must not be `None`")

        self._sentence = sentence
