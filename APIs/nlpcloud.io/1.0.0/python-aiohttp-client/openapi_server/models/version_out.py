# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VersionOut(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, spacy: str=None):
        """VersionOut - a model defined in OpenAPI

        :param spacy: The spacy of this VersionOut.
        """
        self.openapi_types = {
            'spacy': str
        }

        self.attribute_map = {
            'spacy': 'spacy'
        }

        self._spacy = spacy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VersionOut':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VersionOut of this VersionOut.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def spacy(self):
        """Gets the spacy of this VersionOut.


        :return: The spacy of this VersionOut.
        :rtype: str
        """
        return self._spacy

    @spacy.setter
    def spacy(self, spacy):
        """Sets the spacy of this VersionOut.


        :param spacy: The spacy of this VersionOut.
        :type spacy: str
        """
        if spacy is None:
            raise ValueError("Invalid value for `spacy`, must not be `None`")

        self._spacy = spacy
