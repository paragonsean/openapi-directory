# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Arc(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dir: str=None, end: int=None, label: str=None, start: int=None, text: str=None):
        """Arc - a model defined in OpenAPI

        :param dir: The dir of this Arc.
        :param end: The end of this Arc.
        :param label: The label of this Arc.
        :param start: The start of this Arc.
        :param text: The text of this Arc.
        """
        self.openapi_types = {
            'dir': str,
            'end': int,
            'label': str,
            'start': int,
            'text': str
        }

        self.attribute_map = {
            'dir': 'dir',
            'end': 'end',
            'label': 'label',
            'start': 'start',
            'text': 'text'
        }

        self._dir = dir
        self._end = end
        self._label = label
        self._start = start
        self._text = text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Arc':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Arc of this Arc.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dir(self):
        """Gets the dir of this Arc.


        :return: The dir of this Arc.
        :rtype: str
        """
        return self._dir

    @dir.setter
    def dir(self, dir):
        """Sets the dir of this Arc.


        :param dir: The dir of this Arc.
        :type dir: str
        """
        if dir is None:
            raise ValueError("Invalid value for `dir`, must not be `None`")

        self._dir = dir

    @property
    def end(self):
        """Gets the end of this Arc.


        :return: The end of this Arc.
        :rtype: int
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this Arc.


        :param end: The end of this Arc.
        :type end: int
        """
        if end is None:
            raise ValueError("Invalid value for `end`, must not be `None`")

        self._end = end

    @property
    def label(self):
        """Gets the label of this Arc.


        :return: The label of this Arc.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Arc.


        :param label: The label of this Arc.
        :type label: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")

        self._label = label

    @property
    def start(self):
        """Gets the start of this Arc.


        :return: The start of this Arc.
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this Arc.


        :param start: The start of this Arc.
        :type start: int
        """
        if start is None:
            raise ValueError("Invalid value for `start`, must not be `None`")

        self._start = start

    @property
    def text(self):
        """Gets the text of this Arc.


        :return: The text of this Arc.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Arc.


        :param text: The text of this Arc.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")

        self._text = text
