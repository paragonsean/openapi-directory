# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.arc import Arc
from openapi_server.models.word import Word
from openapi_server import util


class DependenciesOut(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arcs: List[Arc]=None, words: List[Word]=None):
        """DependenciesOut - a model defined in OpenAPI

        :param arcs: The arcs of this DependenciesOut.
        :param words: The words of this DependenciesOut.
        """
        self.openapi_types = {
            'arcs': List[Arc],
            'words': List[Word]
        }

        self.attribute_map = {
            'arcs': 'arcs',
            'words': 'words'
        }

        self._arcs = arcs
        self._words = words

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DependenciesOut':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DependenciesOut of this DependenciesOut.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arcs(self):
        """Gets the arcs of this DependenciesOut.


        :return: The arcs of this DependenciesOut.
        :rtype: List[Arc]
        """
        return self._arcs

    @arcs.setter
    def arcs(self, arcs):
        """Sets the arcs of this DependenciesOut.


        :param arcs: The arcs of this DependenciesOut.
        :type arcs: List[Arc]
        """
        if arcs is None:
            raise ValueError("Invalid value for `arcs`, must not be `None`")

        self._arcs = arcs

    @property
    def words(self):
        """Gets the words of this DependenciesOut.


        :return: The words of this DependenciesOut.
        :rtype: List[Word]
        """
        return self._words

    @words.setter
    def words(self, words):
        """Sets the words of this DependenciesOut.


        :param words: The words of this DependenciesOut.
        :type words: List[Word]
        """
        if words is None:
            raise ValueError("Invalid value for `words`, must not be `None`")

        self._words = words
