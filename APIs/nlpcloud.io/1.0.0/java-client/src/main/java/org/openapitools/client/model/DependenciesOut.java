/*
 * NLPCloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Arc;
import org.openapitools.client.model.Word;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DependenciesOut
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:17.973113-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DependenciesOut {
  public static final String SERIALIZED_NAME_ARCS = "arcs";
  @SerializedName(SERIALIZED_NAME_ARCS)
  private List<Arc> arcs = new ArrayList<>();

  public static final String SERIALIZED_NAME_WORDS = "words";
  @SerializedName(SERIALIZED_NAME_WORDS)
  private List<Word> words = new ArrayList<>();

  public DependenciesOut() {
  }

  public DependenciesOut arcs(List<Arc> arcs) {
    this.arcs = arcs;
    return this;
  }

  public DependenciesOut addArcsItem(Arc arcsItem) {
    if (this.arcs == null) {
      this.arcs = new ArrayList<>();
    }
    this.arcs.add(arcsItem);
    return this;
  }

  /**
   * Get arcs
   * @return arcs
   */
  @javax.annotation.Nonnull
  public List<Arc> getArcs() {
    return arcs;
  }

  public void setArcs(List<Arc> arcs) {
    this.arcs = arcs;
  }


  public DependenciesOut words(List<Word> words) {
    this.words = words;
    return this;
  }

  public DependenciesOut addWordsItem(Word wordsItem) {
    if (this.words == null) {
      this.words = new ArrayList<>();
    }
    this.words.add(wordsItem);
    return this;
  }

  /**
   * Get words
   * @return words
   */
  @javax.annotation.Nonnull
  public List<Word> getWords() {
    return words;
  }

  public void setWords(List<Word> words) {
    this.words = words;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DependenciesOut dependenciesOut = (DependenciesOut) o;
    return Objects.equals(this.arcs, dependenciesOut.arcs) &&
        Objects.equals(this.words, dependenciesOut.words);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arcs, words);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DependenciesOut {\n");
    sb.append("    arcs: ").append(toIndentedString(arcs)).append("\n");
    sb.append("    words: ").append(toIndentedString(words)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arcs");
    openapiFields.add("words");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("arcs");
    openapiRequiredFields.add("words");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DependenciesOut
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DependenciesOut.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DependenciesOut is not found in the empty JSON string", DependenciesOut.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DependenciesOut.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DependenciesOut` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DependenciesOut.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("arcs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `arcs` to be an array in the JSON string but got `%s`", jsonObj.get("arcs").toString()));
      }

      JsonArray jsonArrayarcs = jsonObj.getAsJsonArray("arcs");
      // validate the required field `arcs` (array)
      for (int i = 0; i < jsonArrayarcs.size(); i++) {
        Arc.validateJsonElement(jsonArrayarcs.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("words").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `words` to be an array in the JSON string but got `%s`", jsonObj.get("words").toString()));
      }

      JsonArray jsonArraywords = jsonObj.getAsJsonArray("words");
      // validate the required field `words` (array)
      for (int i = 0; i < jsonArraywords.size(); i++) {
        Word.validateJsonElement(jsonArraywords.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DependenciesOut.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DependenciesOut' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DependenciesOut> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DependenciesOut.class));

       return (TypeAdapter<T>) new TypeAdapter<DependenciesOut>() {
           @Override
           public void write(JsonWriter out, DependenciesOut value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DependenciesOut read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DependenciesOut given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DependenciesOut
   * @throws IOException if the JSON string is invalid with respect to DependenciesOut
   */
  public static DependenciesOut fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DependenciesOut.class);
  }

  /**
   * Convert an instance of DependenciesOut to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

