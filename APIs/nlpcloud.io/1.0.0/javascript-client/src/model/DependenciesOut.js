/**
 * NLPCloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Arc from './Arc';
import Word from './Word';

/**
 * The DependenciesOut model module.
 * @module model/DependenciesOut
 * @version 1.0.0
 */
class DependenciesOut {
    /**
     * Constructs a new <code>DependenciesOut</code>.
     * @alias module:model/DependenciesOut
     * @param arcs {Array.<module:model/Arc>} 
     * @param words {Array.<module:model/Word>} 
     */
    constructor(arcs, words) { 
        
        DependenciesOut.initialize(this, arcs, words);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, arcs, words) { 
        obj['arcs'] = arcs;
        obj['words'] = words;
    }

    /**
     * Constructs a <code>DependenciesOut</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DependenciesOut} obj Optional instance to populate.
     * @return {module:model/DependenciesOut} The populated <code>DependenciesOut</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DependenciesOut();

            if (data.hasOwnProperty('arcs')) {
                obj['arcs'] = ApiClient.convertToType(data['arcs'], [Arc]);
            }
            if (data.hasOwnProperty('words')) {
                obj['words'] = ApiClient.convertToType(data['words'], [Word]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DependenciesOut</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DependenciesOut</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DependenciesOut.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['arcs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['arcs'])) {
                throw new Error("Expected the field `arcs` to be an array in the JSON data but got " + data['arcs']);
            }
            // validate the optional field `arcs` (array)
            for (const item of data['arcs']) {
                Arc.validateJSON(item);
            };
        }
        if (data['words']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['words'])) {
                throw new Error("Expected the field `words` to be an array in the JSON data but got " + data['words']);
            }
            // validate the optional field `words` (array)
            for (const item of data['words']) {
                Word.validateJSON(item);
            };
        }

        return true;
    }


}

DependenciesOut.RequiredProperties = ["arcs", "words"];

/**
 * @member {Array.<module:model/Arc>} arcs
 */
DependenciesOut.prototype['arcs'] = undefined;

/**
 * @member {Array.<module:model/Word>} words
 */
DependenciesOut.prototype['words'] = undefined;






export default DependenciesOut;

