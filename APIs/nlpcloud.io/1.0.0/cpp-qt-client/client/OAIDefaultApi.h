/**
 * NLPCloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDependenciesOut.h"
#include "OAIEntitiesOut.h"
#include "OAIHTTPValidationError.h"
#include "OAISentenceDependenciesOut.h"
#include "OAIUserRequestIn.h"
#include "OAIVersionOut.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_user_request_in OAIUserRequestIn [required]
    */
    virtual void readDependenciesV1EnCoreWebSmDependenciesPost(const OAIUserRequestIn &oai_user_request_in);

    /**
    * @param[in]  oai_user_request_in OAIUserRequestIn [required]
    */
    virtual void readEntitiesV1EnCoreWebSmEntitiesPost(const OAIUserRequestIn &oai_user_request_in);


    virtual void readRootV1EnCoreWebSmGet();

    /**
    * @param[in]  oai_user_request_in OAIUserRequestIn [required]
    */
    virtual void readSentenceDependenciesV1EnCoreWebSmSentenceDependenciesPost(const OAIUserRequestIn &oai_user_request_in);


    virtual void readVersionV1EnCoreWebSmVersionGet();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void readDependenciesV1EnCoreWebSmDependenciesPostCallback(OAIHttpRequestWorker *worker);
    void readEntitiesV1EnCoreWebSmEntitiesPostCallback(OAIHttpRequestWorker *worker);
    void readRootV1EnCoreWebSmGetCallback(OAIHttpRequestWorker *worker);
    void readSentenceDependenciesV1EnCoreWebSmSentenceDependenciesPostCallback(OAIHttpRequestWorker *worker);
    void readVersionV1EnCoreWebSmVersionGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void readDependenciesV1EnCoreWebSmDependenciesPostSignal(OAIDependenciesOut summary);
    void readEntitiesV1EnCoreWebSmEntitiesPostSignal(OAIEntitiesOut summary);
    void readRootV1EnCoreWebSmGetSignal(QJsonValue summary);
    void readSentenceDependenciesV1EnCoreWebSmSentenceDependenciesPostSignal(OAISentenceDependenciesOut summary);
    void readVersionV1EnCoreWebSmVersionGetSignal(OAIVersionOut summary);


    void readDependenciesV1EnCoreWebSmDependenciesPostSignalFull(OAIHttpRequestWorker *worker, OAIDependenciesOut summary);
    void readEntitiesV1EnCoreWebSmEntitiesPostSignalFull(OAIHttpRequestWorker *worker, OAIEntitiesOut summary);
    void readRootV1EnCoreWebSmGetSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void readSentenceDependenciesV1EnCoreWebSmSentenceDependenciesPostSignalFull(OAIHttpRequestWorker *worker, OAISentenceDependenciesOut summary);
    void readVersionV1EnCoreWebSmVersionGetSignalFull(OAIHttpRequestWorker *worker, OAIVersionOut summary);

    Q_DECL_DEPRECATED_X("Use readDependenciesV1EnCoreWebSmDependenciesPostSignalError() instead")
    void readDependenciesV1EnCoreWebSmDependenciesPostSignalE(OAIDependenciesOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void readDependenciesV1EnCoreWebSmDependenciesPostSignalError(OAIDependenciesOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readEntitiesV1EnCoreWebSmEntitiesPostSignalError() instead")
    void readEntitiesV1EnCoreWebSmEntitiesPostSignalE(OAIEntitiesOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void readEntitiesV1EnCoreWebSmEntitiesPostSignalError(OAIEntitiesOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readRootV1EnCoreWebSmGetSignalError() instead")
    void readRootV1EnCoreWebSmGetSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void readRootV1EnCoreWebSmGetSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readSentenceDependenciesV1EnCoreWebSmSentenceDependenciesPostSignalError() instead")
    void readSentenceDependenciesV1EnCoreWebSmSentenceDependenciesPostSignalE(OAISentenceDependenciesOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void readSentenceDependenciesV1EnCoreWebSmSentenceDependenciesPostSignalError(OAISentenceDependenciesOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readVersionV1EnCoreWebSmVersionGetSignalError() instead")
    void readVersionV1EnCoreWebSmVersionGetSignalE(OAIVersionOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void readVersionV1EnCoreWebSmVersionGetSignalError(OAIVersionOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use readDependenciesV1EnCoreWebSmDependenciesPostSignalErrorFull() instead")
    void readDependenciesV1EnCoreWebSmDependenciesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void readDependenciesV1EnCoreWebSmDependenciesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readEntitiesV1EnCoreWebSmEntitiesPostSignalErrorFull() instead")
    void readEntitiesV1EnCoreWebSmEntitiesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void readEntitiesV1EnCoreWebSmEntitiesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readRootV1EnCoreWebSmGetSignalErrorFull() instead")
    void readRootV1EnCoreWebSmGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void readRootV1EnCoreWebSmGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readSentenceDependenciesV1EnCoreWebSmSentenceDependenciesPostSignalErrorFull() instead")
    void readSentenceDependenciesV1EnCoreWebSmSentenceDependenciesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void readSentenceDependenciesV1EnCoreWebSmSentenceDependenciesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readVersionV1EnCoreWebSmVersionGetSignalErrorFull() instead")
    void readVersionV1EnCoreWebSmVersionGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void readVersionV1EnCoreWebSmVersionGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
