/**
 * NLPCloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArc.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArc::OAIArc(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArc::OAIArc() {
    this->initializeModel();
}

OAIArc::~OAIArc() {}

void OAIArc::initializeModel() {

    m_dir_isSet = false;
    m_dir_isValid = false;

    m_end_isSet = false;
    m_end_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;
}

void OAIArc::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIArc::fromJsonObject(QJsonObject json) {

    m_dir_isValid = ::OpenAPI::fromJsonValue(m_dir, json[QString("dir")]);
    m_dir_isSet = !json[QString("dir")].isNull() && m_dir_isValid;

    m_end_isValid = ::OpenAPI::fromJsonValue(m_end, json[QString("end")]);
    m_end_isSet = !json[QString("end")].isNull() && m_end_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;
}

QString OAIArc::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIArc::asJsonObject() const {
    QJsonObject obj;
    if (m_dir_isSet) {
        obj.insert(QString("dir"), ::OpenAPI::toJsonValue(m_dir));
    }
    if (m_end_isSet) {
        obj.insert(QString("end"), ::OpenAPI::toJsonValue(m_end));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_start_isSet) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    return obj;
}

QString OAIArc::getDir() const {
    return m_dir;
}
void OAIArc::setDir(const QString &dir) {
    m_dir = dir;
    m_dir_isSet = true;
}

bool OAIArc::is_dir_Set() const{
    return m_dir_isSet;
}

bool OAIArc::is_dir_Valid() const{
    return m_dir_isValid;
}

qint32 OAIArc::getEnd() const {
    return m_end;
}
void OAIArc::setEnd(const qint32 &end) {
    m_end = end;
    m_end_isSet = true;
}

bool OAIArc::is_end_Set() const{
    return m_end_isSet;
}

bool OAIArc::is_end_Valid() const{
    return m_end_isValid;
}

QString OAIArc::getLabel() const {
    return m_label;
}
void OAIArc::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIArc::is_label_Set() const{
    return m_label_isSet;
}

bool OAIArc::is_label_Valid() const{
    return m_label_isValid;
}

qint32 OAIArc::getStart() const {
    return m_start;
}
void OAIArc::setStart(const qint32 &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAIArc::is_start_Set() const{
    return m_start_isSet;
}

bool OAIArc::is_start_Valid() const{
    return m_start_isValid;
}

QString OAIArc::getText() const {
    return m_text;
}
void OAIArc::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIArc::is_text_Set() const{
    return m_text_isSet;
}

bool OAIArc::is_text_Valid() const{
    return m_text_isValid;
}

bool OAIArc::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dir_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIArc::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_dir_isValid && m_end_isValid && m_label_isValid && m_start_isValid && m_text_isValid && true;
}

} // namespace OpenAPI
