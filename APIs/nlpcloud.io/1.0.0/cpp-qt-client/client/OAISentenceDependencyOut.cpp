/**
 * NLPCloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISentenceDependencyOut.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISentenceDependencyOut::OAISentenceDependencyOut(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISentenceDependencyOut::OAISentenceDependencyOut() {
    this->initializeModel();
}

OAISentenceDependencyOut::~OAISentenceDependencyOut() {}

void OAISentenceDependencyOut::initializeModel() {

    m_dependencies_isSet = false;
    m_dependencies_isValid = false;

    m_sentence_isSet = false;
    m_sentence_isValid = false;
}

void OAISentenceDependencyOut::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISentenceDependencyOut::fromJsonObject(QJsonObject json) {

    m_dependencies_isValid = ::OpenAPI::fromJsonValue(m_dependencies, json[QString("dependencies")]);
    m_dependencies_isSet = !json[QString("dependencies")].isNull() && m_dependencies_isValid;

    m_sentence_isValid = ::OpenAPI::fromJsonValue(m_sentence, json[QString("sentence")]);
    m_sentence_isSet = !json[QString("sentence")].isNull() && m_sentence_isValid;
}

QString OAISentenceDependencyOut::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISentenceDependencyOut::asJsonObject() const {
    QJsonObject obj;
    if (m_dependencies.isSet()) {
        obj.insert(QString("dependencies"), ::OpenAPI::toJsonValue(m_dependencies));
    }
    if (m_sentence_isSet) {
        obj.insert(QString("sentence"), ::OpenAPI::toJsonValue(m_sentence));
    }
    return obj;
}

OAIDependenciesOut OAISentenceDependencyOut::getDependencies() const {
    return m_dependencies;
}
void OAISentenceDependencyOut::setDependencies(const OAIDependenciesOut &dependencies) {
    m_dependencies = dependencies;
    m_dependencies_isSet = true;
}

bool OAISentenceDependencyOut::is_dependencies_Set() const{
    return m_dependencies_isSet;
}

bool OAISentenceDependencyOut::is_dependencies_Valid() const{
    return m_dependencies_isValid;
}

QString OAISentenceDependencyOut::getSentence() const {
    return m_sentence;
}
void OAISentenceDependencyOut::setSentence(const QString &sentence) {
    m_sentence = sentence;
    m_sentence_isSet = true;
}

bool OAISentenceDependencyOut::is_sentence_Set() const{
    return m_sentence_isSet;
}

bool OAISentenceDependencyOut::is_sentence_Valid() const{
    return m_sentence_isValid;
}

bool OAISentenceDependencyOut::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dependencies.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sentence_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISentenceDependencyOut::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_dependencies_isValid && m_sentence_isValid && true;
}

} // namespace OpenAPI
