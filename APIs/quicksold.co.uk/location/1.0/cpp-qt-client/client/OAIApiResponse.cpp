/**
 * Quicksold REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: info@quicksold.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApiResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApiResponse::OAIApiResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApiResponse::OAIApiResponse() {
    this->initializeModel();
}

OAIApiResponse::~OAIApiResponse() {}

void OAIApiResponse::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;
}

void OAIApiResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApiResponse::fromJsonObject(QJsonObject json) {

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;
}

QString OAIApiResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApiResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_data_isSet) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_error_isSet) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_errors_isSet) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    return obj;
}

OAIObject OAIApiResponse::getData() const {
    return m_data;
}
void OAIApiResponse::setData(const OAIObject &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIApiResponse::is_data_Set() const{
    return m_data_isSet;
}

bool OAIApiResponse::is_data_Valid() const{
    return m_data_isValid;
}

QString OAIApiResponse::getError() const {
    return m_error;
}
void OAIApiResponse::setError(const QString &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIApiResponse::is_error_Set() const{
    return m_error_isSet;
}

bool OAIApiResponse::is_error_Valid() const{
    return m_error_isValid;
}

OAIObject OAIApiResponse::getErrors() const {
    return m_errors;
}
void OAIApiResponse::setErrors(const OAIObject &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIApiResponse::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIApiResponse::is_errors_Valid() const{
    return m_errors_isValid;
}

QString OAIApiResponse::getMessage() const {
    return m_message;
}
void OAIApiResponse::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIApiResponse::is_message_Set() const{
    return m_message_isSet;
}

bool OAIApiResponse::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIApiResponse::getPath() const {
    return m_path;
}
void OAIApiResponse::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIApiResponse::is_path_Set() const{
    return m_path_isSet;
}

bool OAIApiResponse::is_path_Valid() const{
    return m_path_isValid;
}

qint32 OAIApiResponse::getStatus() const {
    return m_status;
}
void OAIApiResponse::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIApiResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIApiResponse::is_status_Valid() const{
    return m_status_isValid;
}

qint64 OAIApiResponse::getTimestamp() const {
    return m_timestamp;
}
void OAIApiResponse::setTimestamp(const qint64 &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIApiResponse::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIApiResponse::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

bool OAIApiResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApiResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
