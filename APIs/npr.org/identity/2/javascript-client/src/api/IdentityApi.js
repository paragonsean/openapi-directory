/**
 * NPR Identity Service
 * The entry point to user-specific information
 *
 * The version of the OpenAPI document: 2
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Affiliation from '../model/Affiliation';
import ErrorDocument from '../model/ErrorDocument';
import UserDocument from '../model/UserDocument';

/**
* Identity service.
* @module api/IdentityApi
* @version 2
*/
export default class IdentityApi {

    /**
    * Constructs a new IdentityApi. 
    * @alias module:api/IdentityApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteUser operation.
     * @callback module:api/IdentityApi~deleteUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserDocument} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the user's account
     * Use with caution as some steps are irreverisble. Initiates the user account deletion process, including removal of all user PII and account access.
     * @param {String} authorization Your access token from the Authorization Service. Should start with `Bearer`, followed by a space, followed by the token.
     * @param {module:api/IdentityApi~deleteUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserDocument}
     */
    deleteUser(authorization, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/vnd.collection.doc+json'];
      let returnType = UserDocument;
      return this.apiClient.callApi(
        '/v2/user', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUser operation.
     * @callback module:api/IdentityApi~getUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserDocument} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the latest state information about the logged-in user
     * After a successful login, the client should send a `GET` call approximately once an hour to refresh the user data.
     * @param {String} authorization Your access token from the Authorization Service. Should start with `Bearer`, followed by a space, followed by the token.
     * @param {module:api/IdentityApi~getUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserDocument}
     */
    getUser(authorization, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/vnd.collection.doc+json'];
      let returnType = UserDocument;
      return this.apiClient.callApi(
        '/v2/user', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the inheritFromTempUser operation.
     * @callback module:api/IdentityApi~inheritFromTempUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserDocument} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Copy listening data from a temporary user account to the logged-in user's account
     * This can and should only be used by clients who have access to the `temporary_user` grant type.     Third-party developers do not have access to this grant type by default, and will not need this endpoint.
     * @param {String} authorization Your access token from the Authorization Service. Should start with `Bearer`, followed by a space, followed by the token.
     * @param {Number} tempUser The temporary user's ID before the user registered or logged in
     * @param {module:api/IdentityApi~inheritFromTempUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserDocument}
     */
    inheritFromTempUser(authorization, tempUser, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling inheritFromTempUser");
      }
      // verify the required parameter 'tempUser' is set
      if (tempUser === undefined || tempUser === null) {
        throw new Error("Missing the required parameter 'tempUser' when calling inheritFromTempUser");
      }

      let pathParams = {
      };
      let queryParams = {
        'temp_user': tempUser
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/vnd.collection.doc+json'];
      let returnType = UserDocument;
      return this.apiClient.callApi(
        '/v2/user/inherit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postFollowing operation.
     * @callback module:api/IdentityApi~postFollowingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserDocument} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the following status of the logged-in user for a particular aggregation
     * After a successful call, this returns a User document with an updated list of affiliations.
     * @param {String} authorization Your access token from the Authorization Service. Should start with `Bearer`, followed by a space, followed by the token.
     * @param {module:model/Affiliation} body A JSON-serialized object which contains data about a user affiliation such as the aggregation ID, affiliation rating, aggregation URL, days since last listen, and following status.
     * @param {module:api/IdentityApi~postFollowingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserDocument}
     */
    postFollowing(authorization, body, callback) {
      let postBody = body;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling postFollowing");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postFollowing");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/vnd.collection.doc+json'];
      let returnType = UserDocument;
      return this.apiClient.callApi(
        '/v2/following', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateStations operation.
     * @callback module:api/IdentityApi~updateStationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserDocument} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the logged-in user's favorite station(s)
     * Right now, only the primary station can be changed. Previously selected stations will not be deleted, but the new station will be moved to first in the array.
     * @param {String} authorization Your access token from the Authorization Service. Should start with `Bearer`, followed by a space, followed by the token.
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} [body] A JSON-serialized array of station IDs
     * @param {module:api/IdentityApi~updateStationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserDocument}
     */
    updateStations(authorization, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling updateStations");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'application/vnd.collection.doc+json'];
      let accepts = ['application/json', 'application/vnd.collection.doc+json'];
      let returnType = UserDocument;
      return this.apiClient.callApi(
        '/v2/stations', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
