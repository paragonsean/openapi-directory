/**
 * NPR Identity Service
 * The entry point to user-specific information
 *
 * The version of the OpenAPI document: 2
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Cohort model module.
 * @module model/Cohort
 * @version 2
 */
class Cohort {
    /**
     * Constructs a new <code>Cohort</code>.
     * An experimental grouping for User Experience A/B Testing
     * @alias module:model/Cohort
     * @param id {String} A short ID for this cohort; ignored on a PUT
     * @param name {String} A text string identifying the cohort, useful for metrics; ignored on a PUT
     */
    constructor(id, name) { 
        
        Cohort.initialize(this, id, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, name) { 
        obj['id'] = id;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>Cohort</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Cohort} obj Optional instance to populate.
     * @return {module:model/Cohort} The populated <code>Cohort</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Cohort();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('public')) {
                obj['public'] = ApiClient.convertToType(data['public'], 'String');
            }
            if (data.hasOwnProperty('test')) {
                obj['test'] = ApiClient.convertToType(data['test'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Cohort</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Cohort</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Cohort.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['public'] && !(typeof data['public'] === 'string' || data['public'] instanceof String)) {
            throw new Error("Expected the field `public` to be a primitive type in the JSON string but got " + data['public']);
        }
        // ensure the json data is a string
        if (data['test'] && !(typeof data['test'] === 'string' || data['test'] instanceof String)) {
            throw new Error("Expected the field `test` to be a primitive type in the JSON string but got " + data['test']);
        }

        return true;
    }


}

Cohort.RequiredProperties = ["id", "name"];

/**
 * A short ID for this cohort; ignored on a PUT
 * @member {String} id
 */
Cohort.prototype['id'] = undefined;

/**
 * A text string identifying the cohort, useful for metrics; ignored on a PUT
 * @member {String} name
 */
Cohort.prototype['name'] = undefined;

/**
 * For internal use only; represents the current configuration file being used by the Listening Service
 * @member {String} public
 */
Cohort.prototype['public'] = undefined;

/**
 * For internal use only; represents the test configuration file being used by the Listening Service
 * @member {String} test
 */
Cohort.prototype['test'] = undefined;






export default Cohort;

