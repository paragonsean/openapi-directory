/**
 * NPR Identity Service
 * The entry point to user-specific information
 *
 * The version of the OpenAPI document: 2
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Affiliation from './Affiliation';
import Algolia from './Algolia';
import Cohort from './Cohort';
import Organization from './Organization';

/**
 * The UserData model module.
 * @module model/UserData
 * @version 2
 */
class UserData {
    /**
     * Constructs a new <code>UserData</code>.
     * Object; see description of a user object below
     * @alias module:model/UserData
     * @param algolia {Array.<module:model/Algolia>} Use this information to search Algolia for stories
     * @param cohort {module:model/Cohort} 
     * @param id {String} Some unique identifier for the user
     * @param organizations {Array.<module:model/Organization>} User's chosen NPR Member Station(s)
     */
    constructor(algolia, cohort, id, organizations) { 
        
        UserData.initialize(this, algolia, cohort, id, organizations);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, algolia, cohort, id, organizations) { 
        obj['algolia'] = algolia;
        obj['cohort'] = cohort;
        obj['id'] = id;
        obj['organizations'] = organizations;
    }

    /**
     * Constructs a <code>UserData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserData} obj Optional instance to populate.
     * @return {module:model/UserData} The populated <code>UserData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserData();

            if (data.hasOwnProperty('affiliations')) {
                obj['affiliations'] = ApiClient.convertToType(data['affiliations'], [Affiliation]);
            }
            if (data.hasOwnProperty('algolia')) {
                obj['algolia'] = ApiClient.convertToType(data['algolia'], [Algolia]);
            }
            if (data.hasOwnProperty('cohort')) {
                obj['cohort'] = Cohort.constructFromObject(data['cohort']);
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('firstName')) {
                obj['firstName'] = ApiClient.convertToType(data['firstName'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('lastName')) {
                obj['lastName'] = ApiClient.convertToType(data['lastName'], 'String');
            }
            if (data.hasOwnProperty('organizations')) {
                obj['organizations'] = ApiClient.convertToType(data['organizations'], [Organization]);
            }
            if (data.hasOwnProperty('totalListeningTime')) {
                obj['totalListeningTime'] = ApiClient.convertToType(data['totalListeningTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UserData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['affiliations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['affiliations'])) {
                throw new Error("Expected the field `affiliations` to be an array in the JSON data but got " + data['affiliations']);
            }
            // validate the optional field `affiliations` (array)
            for (const item of data['affiliations']) {
                Affiliation.validateJSON(item);
            };
        }
        if (data['algolia']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['algolia'])) {
                throw new Error("Expected the field `algolia` to be an array in the JSON data but got " + data['algolia']);
            }
            // validate the optional field `algolia` (array)
            for (const item of data['algolia']) {
                Algolia.validateJSON(item);
            };
        }
        // validate the optional field `cohort`
        if (data['cohort']) { // data not null
          Cohort.validateJSON(data['cohort']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['firstName'] && !(typeof data['firstName'] === 'string' || data['firstName'] instanceof String)) {
            throw new Error("Expected the field `firstName` to be a primitive type in the JSON string but got " + data['firstName']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['lastName'] && !(typeof data['lastName'] === 'string' || data['lastName'] instanceof String)) {
            throw new Error("Expected the field `lastName` to be a primitive type in the JSON string but got " + data['lastName']);
        }
        if (data['organizations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['organizations'])) {
                throw new Error("Expected the field `organizations` to be an array in the JSON data but got " + data['organizations']);
            }
            // validate the optional field `organizations` (array)
            for (const item of data['organizations']) {
                Organization.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['totalListeningTime'] && !(typeof data['totalListeningTime'] === 'string' || data['totalListeningTime'] instanceof String)) {
            throw new Error("Expected the field `totalListeningTime` to be a primitive type in the JSON string but got " + data['totalListeningTime']);
        }

        return true;
    }


}

UserData.RequiredProperties = ["algolia", "cohort", "id", "organizations"];

/**
 * Program(s) that the user has positively interacted with
 * @member {Array.<module:model/Affiliation>} affiliations
 */
UserData.prototype['affiliations'] = undefined;

/**
 * Use this information to search Algolia for stories
 * @member {Array.<module:model/Algolia>} algolia
 */
UserData.prototype['algolia'] = undefined;

/**
 * @member {module:model/Cohort} cohort
 */
UserData.prototype['cohort'] = undefined;

/**
 * The user's email address
 * @member {String} email
 */
UserData.prototype['email'] = undefined;

/**
 * The user's first name
 * @member {String} firstName
 */
UserData.prototype['firstName'] = undefined;

/**
 * Some unique identifier for the user
 * @member {String} id
 */
UserData.prototype['id'] = undefined;

/**
 * The user's last name
 * @member {String} lastName
 */
UserData.prototype['lastName'] = undefined;

/**
 * User's chosen NPR Member Station(s)
 * @member {Array.<module:model/Organization>} organizations
 */
UserData.prototype['organizations'] = undefined;

/**
 * Internal use only. User's total listening time across all platforms.
 * @member {String} totalListeningTime
 */
UserData.prototype['totalListeningTime'] = undefined;






export default UserData;

