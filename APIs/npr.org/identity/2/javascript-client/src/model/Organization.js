/**
 * NPR Identity Service
 * The entry point to user-specific information
 *
 * The version of the OpenAPI document: 2
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Organization model module.
 * @module model/Organization
 * @version 2
 */
class Organization {
    /**
     * Constructs a new <code>Organization</code>.
     * A station that a user has an affiliation with
     * @alias module:model/Organization
     * @param call {String} Station call letters
     * @param city {String} A short description of the station's main market city
     * @param displayName {String} A short displayable text field for the end user, strictly text; ignored on PUT
     * @param id {String} Some unique identifier for the organization for the user
     */
    constructor(call, city, displayName, id) { 
        
        Organization.initialize(this, call, city, displayName, id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, call, city, displayName, id) { 
        obj['call'] = call;
        obj['city'] = city;
        obj['displayName'] = displayName;
        obj['id'] = id;
    }

    /**
     * Constructs a <code>Organization</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Organization} obj Optional instance to populate.
     * @return {module:model/Organization} The populated <code>Organization</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Organization();

            if (data.hasOwnProperty('call')) {
                obj['call'] = ApiClient.convertToType(data['call'], 'String');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('donationUrl')) {
                obj['donationUrl'] = ApiClient.convertToType(data['donationUrl'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('logo')) {
                obj['logo'] = ApiClient.convertToType(data['logo'], 'String');
            }
            if (data.hasOwnProperty('notif_org')) {
                obj['notif_org'] = ApiClient.convertToType(data['notif_org'], ['String']);
            }
            if (data.hasOwnProperty('serviceId')) {
                obj['serviceId'] = ApiClient.convertToType(data['serviceId'], 'String');
            }
            if (data.hasOwnProperty('smallLogo')) {
                obj['smallLogo'] = ApiClient.convertToType(data['smallLogo'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Organization</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Organization</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Organization.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['call'] && !(typeof data['call'] === 'string' || data['call'] instanceof String)) {
            throw new Error("Expected the field `call` to be a primitive type in the JSON string but got " + data['call']);
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['donationUrl'] && !(typeof data['donationUrl'] === 'string' || data['donationUrl'] instanceof String)) {
            throw new Error("Expected the field `donationUrl` to be a primitive type in the JSON string but got " + data['donationUrl']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['logo'] && !(typeof data['logo'] === 'string' || data['logo'] instanceof String)) {
            throw new Error("Expected the field `logo` to be a primitive type in the JSON string but got " + data['logo']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['notif_org'])) {
            throw new Error("Expected the field `notif_org` to be an array in the JSON data but got " + data['notif_org']);
        }
        // ensure the json data is a string
        if (data['serviceId'] && !(typeof data['serviceId'] === 'string' || data['serviceId'] instanceof String)) {
            throw new Error("Expected the field `serviceId` to be a primitive type in the JSON string but got " + data['serviceId']);
        }
        // ensure the json data is a string
        if (data['smallLogo'] && !(typeof data['smallLogo'] === 'string' || data['smallLogo'] instanceof String)) {
            throw new Error("Expected the field `smallLogo` to be a primitive type in the JSON string but got " + data['smallLogo']);
        }

        return true;
    }


}

Organization.RequiredProperties = ["call", "city", "displayName", "id"];

/**
 * Station call letters
 * @member {String} call
 */
Organization.prototype['call'] = undefined;

/**
 * A short description of the station's main market city
 * @member {String} city
 */
Organization.prototype['city'] = undefined;

/**
 * A short displayable text field for the end user, strictly text; ignored on PUT
 * @member {String} displayName
 */
Organization.prototype['displayName'] = undefined;

/**
 * Station donation page URL
 * @member {String} donationUrl
 */
Organization.prototype['donationUrl'] = undefined;

/**
 * Some unique identifier for the organization for the user
 * @member {String} id
 */
Organization.prototype['id'] = undefined;

/**
 * Station logo image url
 * @member {String} logo
 */
Organization.prototype['logo'] = undefined;

/**
 * The topic in Firebase Cloud Messaging to which the device should subscribe if it supports notifications and the user wants notifications about their localized station.
 * @member {Array.<String>} notif_org
 */
Organization.prototype['notif_org'] = undefined;

/**
 * Some unique identifier for the user's organization's primary service, or null if the org has no services
 * @member {String} serviceId
 */
Organization.prototype['serviceId'] = undefined;

/**
 * Station logo image url
 * @member {String} smallLogo
 */
Organization.prototype['smallLogo'] = undefined;






export default Organization;

