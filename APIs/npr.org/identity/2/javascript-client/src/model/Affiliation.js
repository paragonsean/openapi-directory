/**
 * NPR Identity Service
 * The entry point to user-specific information
 *
 * The version of the OpenAPI document: 2
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Affiliation model module.
 * @module model/Affiliation
 * @version 2
 */
class Affiliation {
    /**
     * Constructs a new <code>Affiliation</code>.
     * A program (aggregation) that a given user has shown an affiliation with
     * @alias module:model/Affiliation
     * @param following {Boolean} Whether or not the user is following the aggregation. When changing affiliation status, the client is expected to toggle this value and then send the entire object back.
     * @param href {String} A link to more details about the program from the NPR Story API
     * @param id {String} A unique identifier for the aggregation (program)
     */
    constructor(following, href, id) { 
        
        Affiliation.initialize(this, following, href, id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, following, href, id) { 
        obj['following'] = following || false;
        obj['href'] = href;
        obj['id'] = id;
    }

    /**
     * Constructs a <code>Affiliation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Affiliation} obj Optional instance to populate.
     * @return {module:model/Affiliation} The populated <code>Affiliation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Affiliation();

            if (data.hasOwnProperty('daysSinceLastListen')) {
                obj['daysSinceLastListen'] = ApiClient.convertToType(data['daysSinceLastListen'], 'Number');
            }
            if (data.hasOwnProperty('following')) {
                obj['following'] = ApiClient.convertToType(data['following'], 'Boolean');
            }
            if (data.hasOwnProperty('href')) {
                obj['href'] = ApiClient.convertToType(data['href'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('notif_following')) {
                obj['notif_following'] = ApiClient.convertToType(data['notif_following'], ['String']);
            }
            if (data.hasOwnProperty('notif_rated')) {
                obj['notif_rated'] = ApiClient.convertToType(data['notif_rated'], ['String']);
            }
            if (data.hasOwnProperty('rating')) {
                obj['rating'] = ApiClient.convertToType(data['rating'], 'Number');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Affiliation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Affiliation</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Affiliation.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['href'] && !(typeof data['href'] === 'string' || data['href'] instanceof String)) {
            throw new Error("Expected the field `href` to be a primitive type in the JSON string but got " + data['href']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['notif_following'])) {
            throw new Error("Expected the field `notif_following` to be an array in the JSON data but got " + data['notif_following']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['notif_rated'])) {
            throw new Error("Expected the field `notif_rated` to be an array in the JSON data but got " + data['notif_rated']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}

Affiliation.RequiredProperties = ["following", "href", "id"];

/**
 * The number of days since a user last listened to a story from this aggregation. Absent if user never listened to the aggregation.
 * @member {Number} daysSinceLastListen
 */
Affiliation.prototype['daysSinceLastListen'] = undefined;

/**
 * Whether or not the user is following the aggregation. When changing affiliation status, the client is expected to toggle this value and then send the entire object back.
 * @member {Boolean} following
 * @default false
 */
Affiliation.prototype['following'] = false;

/**
 * A link to more details about the program from the NPR Story API
 * @member {String} href
 */
Affiliation.prototype['href'] = undefined;

/**
 * A unique identifier for the aggregation (program)
 * @member {String} id
 */
Affiliation.prototype['id'] = undefined;

/**
 * The topic in Firebase Cloud Messaging to which the device should subscribe if it supports notifications and the user wants notifications about the podcasts they follow.
 * @member {Array.<String>} notif_following
 */
Affiliation.prototype['notif_following'] = undefined;

/**
 * The topic in Firebase Cloud Messaging to which the device should subscribe if it supports notifications and the user wants notifications about the podcasts they have highly rated.
 * @member {Array.<String>} notif_rated
 */
Affiliation.prototype['notif_rated'] = undefined;

/**
 * The user's average rating for this affiliation on a scale of 0-1. Absent if user never listened to the aggregation.
 * @member {Number} rating
 */
Affiliation.prototype['rating'] = undefined;

/**
 * The title for the aggregation (program)
 * @member {String} title
 */
Affiliation.prototype['title'] = undefined;






export default Affiliation;

