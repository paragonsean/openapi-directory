/**
 * NPR Identity Service
 * The entry point to user-specific information
 *
 * The version of the OpenAPI document: 2
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CollectionDocument from './CollectionDocument';
import UserData from './UserData';

/**
 * The UserDocument model module.
 * @module model/UserDocument
 * @version 2
 */
class UserDocument {
    /**
     * Constructs a new <code>UserDocument</code>.
     * @alias module:model/UserDocument
     * @implements module:model/CollectionDocument
     * @param attributes {module:model/UserData} 
     * @param errors {Array.<Object>} A list of encountered errors, ignored on POST, PUT
     * @param href {String} A URL representation of the resource; should generally be ignored by clients unless noted otherwise
     * @param items {Array.<Object>} Not used, ignored on a PUT
     * @param links {Object} A list of links, not used by the Identity Service; ignored on a PUT
     * @param version {String} The version of the Collection.Doc+JSON spec being used
     */
    constructor(attributes, errors, href, items, links, version) { 
        CollectionDocument.initialize(this, attributes, errors, href, items, links, version);
        UserDocument.initialize(this, attributes, errors, href, items, links, version);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, attributes, errors, href, items, links, version) { 
        obj['attributes'] = attributes;
        obj['errors'] = errors;
        obj['href'] = href;
        obj['items'] = items;
        obj['links'] = links;
        obj['version'] = version || '1.0';
    }

    /**
     * Constructs a <code>UserDocument</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserDocument} obj Optional instance to populate.
     * @return {module:model/UserDocument} The populated <code>UserDocument</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserDocument();
            CollectionDocument.constructFromObject(data, obj);

            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = UserData.constructFromObject(data['attributes']);
            }
            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], [Object]);
            }
            if (data.hasOwnProperty('href')) {
                obj['href'] = ApiClient.convertToType(data['href'], 'String');
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [Object]);
            }
            if (data.hasOwnProperty('links')) {
                obj['links'] = ApiClient.convertToType(data['links'], Object);
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserDocument</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserDocument</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UserDocument.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `attributes`
        if (data['attributes']) { // data not null
          UserData.validateJSON(data['attributes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['errors'])) {
            throw new Error("Expected the field `errors` to be an array in the JSON data but got " + data['errors']);
        }
        // ensure the json data is a string
        if (data['href'] && !(typeof data['href'] === 'string' || data['href'] instanceof String)) {
            throw new Error("Expected the field `href` to be a primitive type in the JSON string but got " + data['href']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['items'])) {
            throw new Error("Expected the field `items` to be an array in the JSON data but got " + data['items']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}

UserDocument.RequiredProperties = ["attributes", "errors", "href", "items", "links", "version"];

/**
 * @member {module:model/UserData} attributes
 */
UserDocument.prototype['attributes'] = undefined;

/**
 * A list of encountered errors, ignored on POST, PUT
 * @member {Array.<Object>} errors
 */
UserDocument.prototype['errors'] = undefined;

/**
 * A URL representation of the resource; should generally be ignored by clients unless noted otherwise
 * @member {String} href
 */
UserDocument.prototype['href'] = undefined;

/**
 * Not used, ignored on a PUT
 * @member {Array.<Object>} items
 */
UserDocument.prototype['items'] = undefined;

/**
 * A list of links, not used by the Identity Service; ignored on a PUT
 * @member {Object} links
 */
UserDocument.prototype['links'] = undefined;

/**
 * The version of the Collection.Doc+JSON spec being used
 * @member {String} version
 * @default '1.0'
 */
UserDocument.prototype['version'] = '1.0';


// Implement CollectionDocument interface:
/**
 * @member {Object} attributes
 */
CollectionDocument.prototype['attributes'] = undefined;
/**
 * A list of encountered errors, ignored on POST, PUT
 * @member {Array.<Object>} errors
 */
CollectionDocument.prototype['errors'] = undefined;
/**
 * A URL representation of the resource; should generally be ignored by clients unless noted otherwise
 * @member {String} href
 */
CollectionDocument.prototype['href'] = undefined;
/**
 * @member {Array.<Object>} items
 */
CollectionDocument.prototype['items'] = undefined;
/**
 * @member {Object} links
 */
CollectionDocument.prototype['links'] = undefined;
/**
 * The version of the Collection.Doc+JSON spec being used
 * @member {String} version
 * @default '1.0'
 */
CollectionDocument.prototype['version'] = '1.0';




export default UserDocument;

