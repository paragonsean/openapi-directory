# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Cohort(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, name: str=None, public: str=None, test: str=None):
        """Cohort - a model defined in OpenAPI

        :param id: The id of this Cohort.
        :param name: The name of this Cohort.
        :param public: The public of this Cohort.
        :param test: The test of this Cohort.
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'public': str,
            'test': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'public': 'public',
            'test': 'test'
        }

        self._id = id
        self._name = name
        self._public = public
        self._test = test

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Cohort':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Cohort of this Cohort.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Cohort.

        A short ID for this cohort; ignored on a PUT

        :return: The id of this Cohort.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Cohort.

        A short ID for this cohort; ignored on a PUT

        :param id: The id of this Cohort.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this Cohort.

        A text string identifying the cohort, useful for metrics; ignored on a PUT

        :return: The name of this Cohort.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Cohort.

        A text string identifying the cohort, useful for metrics; ignored on a PUT

        :param name: The name of this Cohort.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def public(self):
        """Gets the public of this Cohort.

        For internal use only; represents the current configuration file being used by the Listening Service

        :return: The public of this Cohort.
        :rtype: str
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this Cohort.

        For internal use only; represents the current configuration file being used by the Listening Service

        :param public: The public of this Cohort.
        :type public: str
        """

        self._public = public

    @property
    def test(self):
        """Gets the test of this Cohort.

        For internal use only; represents the test configuration file being used by the Listening Service

        :return: The test of this Cohort.
        :rtype: str
        """
        return self._test

    @test.setter
    def test(self, test):
        """Sets the test of this Cohort.

        For internal use only; represents the test configuration file being used by the Listening Service

        :param test: The test of this Cohort.
        :type test: str
        """

        self._test = test
