# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Organization(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, call: str=None, city: str=None, display_name: str=None, donation_url: str=None, id: str=None, logo: str=None, notif_org: List[str]=None, service_id: str=None, small_logo: str=None):
        """Organization - a model defined in OpenAPI

        :param call: The call of this Organization.
        :param city: The city of this Organization.
        :param display_name: The display_name of this Organization.
        :param donation_url: The donation_url of this Organization.
        :param id: The id of this Organization.
        :param logo: The logo of this Organization.
        :param notif_org: The notif_org of this Organization.
        :param service_id: The service_id of this Organization.
        :param small_logo: The small_logo of this Organization.
        """
        self.openapi_types = {
            'call': str,
            'city': str,
            'display_name': str,
            'donation_url': str,
            'id': str,
            'logo': str,
            'notif_org': List[str],
            'service_id': str,
            'small_logo': str
        }

        self.attribute_map = {
            'call': 'call',
            'city': 'city',
            'display_name': 'displayName',
            'donation_url': 'donationUrl',
            'id': 'id',
            'logo': 'logo',
            'notif_org': 'notif_org',
            'service_id': 'serviceId',
            'small_logo': 'smallLogo'
        }

        self._call = call
        self._city = city
        self._display_name = display_name
        self._donation_url = donation_url
        self._id = id
        self._logo = logo
        self._notif_org = notif_org
        self._service_id = service_id
        self._small_logo = small_logo

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Organization':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Organization of this Organization.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def call(self):
        """Gets the call of this Organization.

        Station call letters

        :return: The call of this Organization.
        :rtype: str
        """
        return self._call

    @call.setter
    def call(self, call):
        """Sets the call of this Organization.

        Station call letters

        :param call: The call of this Organization.
        :type call: str
        """
        if call is None:
            raise ValueError("Invalid value for `call`, must not be `None`")

        self._call = call

    @property
    def city(self):
        """Gets the city of this Organization.

        A short description of the station's main market city

        :return: The city of this Organization.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Organization.

        A short description of the station's main market city

        :param city: The city of this Organization.
        :type city: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")

        self._city = city

    @property
    def display_name(self):
        """Gets the display_name of this Organization.

        A short displayable text field for the end user, strictly text; ignored on PUT

        :return: The display_name of this Organization.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Organization.

        A short displayable text field for the end user, strictly text; ignored on PUT

        :param display_name: The display_name of this Organization.
        :type display_name: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")

        self._display_name = display_name

    @property
    def donation_url(self):
        """Gets the donation_url of this Organization.

        Station donation page URL

        :return: The donation_url of this Organization.
        :rtype: str
        """
        return self._donation_url

    @donation_url.setter
    def donation_url(self, donation_url):
        """Sets the donation_url of this Organization.

        Station donation page URL

        :param donation_url: The donation_url of this Organization.
        :type donation_url: str
        """

        self._donation_url = donation_url

    @property
    def id(self):
        """Gets the id of this Organization.

        Some unique identifier for the organization for the user

        :return: The id of this Organization.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Organization.

        Some unique identifier for the organization for the user

        :param id: The id of this Organization.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def logo(self):
        """Gets the logo of this Organization.

        Station logo image url

        :return: The logo of this Organization.
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this Organization.

        Station logo image url

        :param logo: The logo of this Organization.
        :type logo: str
        """

        self._logo = logo

    @property
    def notif_org(self):
        """Gets the notif_org of this Organization.

        The topic in Firebase Cloud Messaging to which the device should subscribe if it supports notifications and the user wants notifications about their localized station.

        :return: The notif_org of this Organization.
        :rtype: List[str]
        """
        return self._notif_org

    @notif_org.setter
    def notif_org(self, notif_org):
        """Sets the notif_org of this Organization.

        The topic in Firebase Cloud Messaging to which the device should subscribe if it supports notifications and the user wants notifications about their localized station.

        :param notif_org: The notif_org of this Organization.
        :type notif_org: List[str]
        """

        self._notif_org = notif_org

    @property
    def service_id(self):
        """Gets the service_id of this Organization.

        Some unique identifier for the user's organization's primary service, or null if the org has no services

        :return: The service_id of this Organization.
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this Organization.

        Some unique identifier for the user's organization's primary service, or null if the org has no services

        :param service_id: The service_id of this Organization.
        :type service_id: str
        """

        self._service_id = service_id

    @property
    def small_logo(self):
        """Gets the small_logo of this Organization.

        Station logo image url

        :return: The small_logo of this Organization.
        :rtype: str
        """
        return self._small_logo

    @small_logo.setter
    def small_logo(self, small_logo):
        """Sets the small_logo of this Organization.

        Station logo image url

        :param small_logo: The small_logo of this Organization.
        :type small_logo: str
        """

        self._small_logo = small_logo
