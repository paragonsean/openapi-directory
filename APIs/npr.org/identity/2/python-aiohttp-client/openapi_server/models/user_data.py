# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.affiliation import Affiliation
from openapi_server.models.algolia import Algolia
from openapi_server.models.cohort import Cohort
from openapi_server.models.organization import Organization
from openapi_server import util


class UserData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, affiliations: List[Affiliation]=None, algolia: List[Algolia]=None, cohort: Cohort=None, email: str=None, first_name: str=None, id: str=None, last_name: str=None, organizations: List[Organization]=None, total_listening_time: str=None):
        """UserData - a model defined in OpenAPI

        :param affiliations: The affiliations of this UserData.
        :param algolia: The algolia of this UserData.
        :param cohort: The cohort of this UserData.
        :param email: The email of this UserData.
        :param first_name: The first_name of this UserData.
        :param id: The id of this UserData.
        :param last_name: The last_name of this UserData.
        :param organizations: The organizations of this UserData.
        :param total_listening_time: The total_listening_time of this UserData.
        """
        self.openapi_types = {
            'affiliations': List[Affiliation],
            'algolia': List[Algolia],
            'cohort': Cohort,
            'email': str,
            'first_name': str,
            'id': str,
            'last_name': str,
            'organizations': List[Organization],
            'total_listening_time': str
        }

        self.attribute_map = {
            'affiliations': 'affiliations',
            'algolia': 'algolia',
            'cohort': 'cohort',
            'email': 'email',
            'first_name': 'firstName',
            'id': 'id',
            'last_name': 'lastName',
            'organizations': 'organizations',
            'total_listening_time': 'totalListeningTime'
        }

        self._affiliations = affiliations
        self._algolia = algolia
        self._cohort = cohort
        self._email = email
        self._first_name = first_name
        self._id = id
        self._last_name = last_name
        self._organizations = organizations
        self._total_listening_time = total_listening_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserData of this UserData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def affiliations(self):
        """Gets the affiliations of this UserData.

        Program(s) that the user has positively interacted with

        :return: The affiliations of this UserData.
        :rtype: List[Affiliation]
        """
        return self._affiliations

    @affiliations.setter
    def affiliations(self, affiliations):
        """Sets the affiliations of this UserData.

        Program(s) that the user has positively interacted with

        :param affiliations: The affiliations of this UserData.
        :type affiliations: List[Affiliation]
        """

        self._affiliations = affiliations

    @property
    def algolia(self):
        """Gets the algolia of this UserData.

        Use this information to search Algolia for stories

        :return: The algolia of this UserData.
        :rtype: List[Algolia]
        """
        return self._algolia

    @algolia.setter
    def algolia(self, algolia):
        """Sets the algolia of this UserData.

        Use this information to search Algolia for stories

        :param algolia: The algolia of this UserData.
        :type algolia: List[Algolia]
        """
        if algolia is None:
            raise ValueError("Invalid value for `algolia`, must not be `None`")

        self._algolia = algolia

    @property
    def cohort(self):
        """Gets the cohort of this UserData.


        :return: The cohort of this UserData.
        :rtype: Cohort
        """
        return self._cohort

    @cohort.setter
    def cohort(self, cohort):
        """Sets the cohort of this UserData.


        :param cohort: The cohort of this UserData.
        :type cohort: Cohort
        """
        if cohort is None:
            raise ValueError("Invalid value for `cohort`, must not be `None`")

        self._cohort = cohort

    @property
    def email(self):
        """Gets the email of this UserData.

        The user's email address

        :return: The email of this UserData.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserData.

        The user's email address

        :param email: The email of this UserData.
        :type email: str
        """

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this UserData.

        The user's first name

        :return: The first_name of this UserData.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UserData.

        The user's first name

        :param first_name: The first_name of this UserData.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def id(self):
        """Gets the id of this UserData.

        Some unique identifier for the user

        :return: The id of this UserData.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserData.

        Some unique identifier for the user

        :param id: The id of this UserData.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def last_name(self):
        """Gets the last_name of this UserData.

        The user's last name

        :return: The last_name of this UserData.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UserData.

        The user's last name

        :param last_name: The last_name of this UserData.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def organizations(self):
        """Gets the organizations of this UserData.

        User's chosen NPR Member Station(s)

        :return: The organizations of this UserData.
        :rtype: List[Organization]
        """
        return self._organizations

    @organizations.setter
    def organizations(self, organizations):
        """Sets the organizations of this UserData.

        User's chosen NPR Member Station(s)

        :param organizations: The organizations of this UserData.
        :type organizations: List[Organization]
        """
        if organizations is None:
            raise ValueError("Invalid value for `organizations`, must not be `None`")

        self._organizations = organizations

    @property
    def total_listening_time(self):
        """Gets the total_listening_time of this UserData.

        Internal use only. User's total listening time across all platforms.

        :return: The total_listening_time of this UserData.
        :rtype: str
        """
        return self._total_listening_time

    @total_listening_time.setter
    def total_listening_time(self, total_listening_time):
        """Sets the total_listening_time of this UserData.

        Internal use only. User's total listening time across all platforms.

        :param total_listening_time: The total_listening_time of this UserData.
        :type total_listening_time: str
        """

        self._total_listening_time = total_listening_time
