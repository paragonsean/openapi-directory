# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CollectionDocument(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes: object=None, errors: List[object]=None, href: str=None, items: List[object]=None, links: object=None, version: str='1.0'):
        """CollectionDocument - a model defined in OpenAPI

        :param attributes: The attributes of this CollectionDocument.
        :param errors: The errors of this CollectionDocument.
        :param href: The href of this CollectionDocument.
        :param items: The items of this CollectionDocument.
        :param links: The links of this CollectionDocument.
        :param version: The version of this CollectionDocument.
        """
        self.openapi_types = {
            'attributes': object,
            'errors': List[object],
            'href': str,
            'items': List[object],
            'links': object,
            'version': str
        }

        self.attribute_map = {
            'attributes': 'attributes',
            'errors': 'errors',
            'href': 'href',
            'items': 'items',
            'links': 'links',
            'version': 'version'
        }

        self._attributes = attributes
        self._errors = errors
        self._href = href
        self._items = items
        self._links = links
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CollectionDocument':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CollectionDocument of this CollectionDocument.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this CollectionDocument.


        :return: The attributes of this CollectionDocument.
        :rtype: object
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this CollectionDocument.


        :param attributes: The attributes of this CollectionDocument.
        :type attributes: object
        """
        if attributes is None:
            raise ValueError("Invalid value for `attributes`, must not be `None`")

        self._attributes = attributes

    @property
    def errors(self):
        """Gets the errors of this CollectionDocument.

        A list of encountered errors, ignored on POST, PUT

        :return: The errors of this CollectionDocument.
        :rtype: List[object]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this CollectionDocument.

        A list of encountered errors, ignored on POST, PUT

        :param errors: The errors of this CollectionDocument.
        :type errors: List[object]
        """
        if errors is None:
            raise ValueError("Invalid value for `errors`, must not be `None`")

        self._errors = errors

    @property
    def href(self):
        """Gets the href of this CollectionDocument.

        A URL representation of the resource; should generally be ignored by clients unless noted otherwise

        :return: The href of this CollectionDocument.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this CollectionDocument.

        A URL representation of the resource; should generally be ignored by clients unless noted otherwise

        :param href: The href of this CollectionDocument.
        :type href: str
        """
        if href is None:
            raise ValueError("Invalid value for `href`, must not be `None`")

        self._href = href

    @property
    def items(self):
        """Gets the items of this CollectionDocument.


        :return: The items of this CollectionDocument.
        :rtype: List[object]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this CollectionDocument.


        :param items: The items of this CollectionDocument.
        :type items: List[object]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")

        self._items = items

    @property
    def links(self):
        """Gets the links of this CollectionDocument.


        :return: The links of this CollectionDocument.
        :rtype: object
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this CollectionDocument.


        :param links: The links of this CollectionDocument.
        :type links: object
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links

    @property
    def version(self):
        """Gets the version of this CollectionDocument.

        The version of the Collection.Doc+JSON spec being used

        :return: The version of this CollectionDocument.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this CollectionDocument.

        The version of the Collection.Doc+JSON spec being used

        :param version: The version of this CollectionDocument.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version
