/**
 * NPR Identity Service
 * The entry point to user-specific information
 *
 * The version of the OpenAPI document: 2
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIIdentityApi_H
#define OAI_OAIIdentityApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAffiliation.h"
#include "OAIErrorDocument.h"
#include "OAIUserDocument.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIIdentityApi : public QObject {
    Q_OBJECT

public:
    OAIIdentityApi(const int timeOut = 0);
    ~OAIIdentityApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  authorization QString [required]
    */
    virtual void deleteUser(const QString &authorization);

    /**
    * @param[in]  authorization QString [required]
    */
    virtual void getUser(const QString &authorization);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  temp_user qint32 [required]
    */
    virtual void inheritFromTempUser(const QString &authorization, const qint32 &temp_user);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  body OAIAffiliation [required]
    */
    virtual void postFollowing(const QString &authorization, const OAIAffiliation &body);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  body QList<qint32> [optional]
    */
    virtual void updateStations(const QString &authorization, const ::OpenAPI::OptionalParam<QList<qint32>> &body = ::OpenAPI::OptionalParam<QList<qint32>>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteUserCallback(OAIHttpRequestWorker *worker);
    void getUserCallback(OAIHttpRequestWorker *worker);
    void inheritFromTempUserCallback(OAIHttpRequestWorker *worker);
    void postFollowingCallback(OAIHttpRequestWorker *worker);
    void updateStationsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteUserSignal(OAIUserDocument summary);
    void getUserSignal(OAIUserDocument summary);
    void inheritFromTempUserSignal(OAIUserDocument summary);
    void postFollowingSignal(OAIUserDocument summary);
    void updateStationsSignal(OAIUserDocument summary);


    void deleteUserSignalFull(OAIHttpRequestWorker *worker, OAIUserDocument summary);
    void getUserSignalFull(OAIHttpRequestWorker *worker, OAIUserDocument summary);
    void inheritFromTempUserSignalFull(OAIHttpRequestWorker *worker, OAIUserDocument summary);
    void postFollowingSignalFull(OAIHttpRequestWorker *worker, OAIUserDocument summary);
    void updateStationsSignalFull(OAIHttpRequestWorker *worker, OAIUserDocument summary);

    Q_DECL_DEPRECATED_X("Use deleteUserSignalError() instead")
    void deleteUserSignalE(OAIUserDocument summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUserSignalError(OAIUserDocument summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserSignalError() instead")
    void getUserSignalE(OAIUserDocument summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserSignalError(OAIUserDocument summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inheritFromTempUserSignalError() instead")
    void inheritFromTempUserSignalE(OAIUserDocument summary, QNetworkReply::NetworkError error_type, QString error_str);
    void inheritFromTempUserSignalError(OAIUserDocument summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postFollowingSignalError() instead")
    void postFollowingSignalE(OAIUserDocument summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postFollowingSignalError(OAIUserDocument summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateStationsSignalError() instead")
    void updateStationsSignalE(OAIUserDocument summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateStationsSignalError(OAIUserDocument summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteUserSignalErrorFull() instead")
    void deleteUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserSignalErrorFull() instead")
    void getUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inheritFromTempUserSignalErrorFull() instead")
    void inheritFromTempUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inheritFromTempUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postFollowingSignalErrorFull() instead")
    void postFollowingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postFollowingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateStationsSignalErrorFull() instead")
    void updateStationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateStationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
