/**
 * NPR Identity Service
 * The entry point to user-specific information
 *
 * The version of the OpenAPI document: 2
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICohort.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICohort::OAICohort(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICohort::OAICohort() {
    this->initializeModel();
}

OAICohort::~OAICohort() {}

void OAICohort::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_r_public_isSet = false;
    m_r_public_isValid = false;

    m_test_isSet = false;
    m_test_isValid = false;
}

void OAICohort::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICohort::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_r_public_isValid = ::OpenAPI::fromJsonValue(m_r_public, json[QString("public")]);
    m_r_public_isSet = !json[QString("public")].isNull() && m_r_public_isValid;

    m_test_isValid = ::OpenAPI::fromJsonValue(m_test, json[QString("test")]);
    m_test_isSet = !json[QString("test")].isNull() && m_test_isValid;
}

QString OAICohort::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICohort::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_r_public_isSet) {
        obj.insert(QString("public"), ::OpenAPI::toJsonValue(m_r_public));
    }
    if (m_test_isSet) {
        obj.insert(QString("test"), ::OpenAPI::toJsonValue(m_test));
    }
    return obj;
}

QString OAICohort::getId() const {
    return m_id;
}
void OAICohort::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICohort::is_id_Set() const{
    return m_id_isSet;
}

bool OAICohort::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICohort::getName() const {
    return m_name;
}
void OAICohort::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICohort::is_name_Set() const{
    return m_name_isSet;
}

bool OAICohort::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICohort::getRPublic() const {
    return m_r_public;
}
void OAICohort::setRPublic(const QString &r_public) {
    m_r_public = r_public;
    m_r_public_isSet = true;
}

bool OAICohort::is_r_public_Set() const{
    return m_r_public_isSet;
}

bool OAICohort::is_r_public_Valid() const{
    return m_r_public_isValid;
}

QString OAICohort::getTest() const {
    return m_test;
}
void OAICohort::setTest(const QString &test) {
    m_test = test;
    m_test_isSet = true;
}

bool OAICohort::is_test_Set() const{
    return m_test_isSet;
}

bool OAICohort::is_test_Valid() const{
    return m_test_isValid;
}

bool OAICohort::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_public_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICohort::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
