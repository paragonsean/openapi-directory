/**
 * NPR Identity Service
 * The entry point to user-specific information
 *
 * The version of the OpenAPI document: 2
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrganization.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrganization::OAIOrganization(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrganization::OAIOrganization() {
    this->initializeModel();
}

OAIOrganization::~OAIOrganization() {}

void OAIOrganization::initializeModel() {

    m_call_isSet = false;
    m_call_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_donation_url_isSet = false;
    m_donation_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_logo_isSet = false;
    m_logo_isValid = false;

    m_notif_org_isSet = false;
    m_notif_org_isValid = false;

    m_service_id_isSet = false;
    m_service_id_isValid = false;

    m_small_logo_isSet = false;
    m_small_logo_isValid = false;
}

void OAIOrganization::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrganization::fromJsonObject(QJsonObject json) {

    m_call_isValid = ::OpenAPI::fromJsonValue(m_call, json[QString("call")]);
    m_call_isSet = !json[QString("call")].isNull() && m_call_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_donation_url_isValid = ::OpenAPI::fromJsonValue(m_donation_url, json[QString("donationUrl")]);
    m_donation_url_isSet = !json[QString("donationUrl")].isNull() && m_donation_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_logo_isValid = ::OpenAPI::fromJsonValue(m_logo, json[QString("logo")]);
    m_logo_isSet = !json[QString("logo")].isNull() && m_logo_isValid;

    m_notif_org_isValid = ::OpenAPI::fromJsonValue(m_notif_org, json[QString("notif_org")]);
    m_notif_org_isSet = !json[QString("notif_org")].isNull() && m_notif_org_isValid;

    m_service_id_isValid = ::OpenAPI::fromJsonValue(m_service_id, json[QString("serviceId")]);
    m_service_id_isSet = !json[QString("serviceId")].isNull() && m_service_id_isValid;

    m_small_logo_isValid = ::OpenAPI::fromJsonValue(m_small_logo, json[QString("smallLogo")]);
    m_small_logo_isSet = !json[QString("smallLogo")].isNull() && m_small_logo_isValid;
}

QString OAIOrganization::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrganization::asJsonObject() const {
    QJsonObject obj;
    if (m_call_isSet) {
        obj.insert(QString("call"), ::OpenAPI::toJsonValue(m_call));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_donation_url_isSet) {
        obj.insert(QString("donationUrl"), ::OpenAPI::toJsonValue(m_donation_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_logo_isSet) {
        obj.insert(QString("logo"), ::OpenAPI::toJsonValue(m_logo));
    }
    if (m_notif_org.size() > 0) {
        obj.insert(QString("notif_org"), ::OpenAPI::toJsonValue(m_notif_org));
    }
    if (m_service_id_isSet) {
        obj.insert(QString("serviceId"), ::OpenAPI::toJsonValue(m_service_id));
    }
    if (m_small_logo_isSet) {
        obj.insert(QString("smallLogo"), ::OpenAPI::toJsonValue(m_small_logo));
    }
    return obj;
}

QString OAIOrganization::getCall() const {
    return m_call;
}
void OAIOrganization::setCall(const QString &call) {
    m_call = call;
    m_call_isSet = true;
}

bool OAIOrganization::is_call_Set() const{
    return m_call_isSet;
}

bool OAIOrganization::is_call_Valid() const{
    return m_call_isValid;
}

QString OAIOrganization::getCity() const {
    return m_city;
}
void OAIOrganization::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIOrganization::is_city_Set() const{
    return m_city_isSet;
}

bool OAIOrganization::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIOrganization::getDisplayName() const {
    return m_display_name;
}
void OAIOrganization::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIOrganization::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIOrganization::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIOrganization::getDonationUrl() const {
    return m_donation_url;
}
void OAIOrganization::setDonationUrl(const QString &donation_url) {
    m_donation_url = donation_url;
    m_donation_url_isSet = true;
}

bool OAIOrganization::is_donation_url_Set() const{
    return m_donation_url_isSet;
}

bool OAIOrganization::is_donation_url_Valid() const{
    return m_donation_url_isValid;
}

QString OAIOrganization::getId() const {
    return m_id;
}
void OAIOrganization::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOrganization::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOrganization::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIOrganization::getLogo() const {
    return m_logo;
}
void OAIOrganization::setLogo(const QString &logo) {
    m_logo = logo;
    m_logo_isSet = true;
}

bool OAIOrganization::is_logo_Set() const{
    return m_logo_isSet;
}

bool OAIOrganization::is_logo_Valid() const{
    return m_logo_isValid;
}

QList<QString> OAIOrganization::getNotifOrg() const {
    return m_notif_org;
}
void OAIOrganization::setNotifOrg(const QList<QString> &notif_org) {
    m_notif_org = notif_org;
    m_notif_org_isSet = true;
}

bool OAIOrganization::is_notif_org_Set() const{
    return m_notif_org_isSet;
}

bool OAIOrganization::is_notif_org_Valid() const{
    return m_notif_org_isValid;
}

QString OAIOrganization::getServiceId() const {
    return m_service_id;
}
void OAIOrganization::setServiceId(const QString &service_id) {
    m_service_id = service_id;
    m_service_id_isSet = true;
}

bool OAIOrganization::is_service_id_Set() const{
    return m_service_id_isSet;
}

bool OAIOrganization::is_service_id_Valid() const{
    return m_service_id_isValid;
}

QString OAIOrganization::getSmallLogo() const {
    return m_small_logo;
}
void OAIOrganization::setSmallLogo(const QString &small_logo) {
    m_small_logo = small_logo;
    m_small_logo_isSet = true;
}

bool OAIOrganization::is_small_logo_Set() const{
    return m_small_logo_isSet;
}

bool OAIOrganization::is_small_logo_Valid() const{
    return m_small_logo_isValid;
}

bool OAIOrganization::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_call_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_donation_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notif_org.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_small_logo_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrganization::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_call_isValid && m_city_isValid && m_display_name_isValid && m_id_isValid && true;
}

} // namespace OpenAPI
