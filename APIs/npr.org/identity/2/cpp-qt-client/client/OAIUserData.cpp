/**
 * NPR Identity Service
 * The entry point to user-specific information
 *
 * The version of the OpenAPI document: 2
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserData::OAIUserData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserData::OAIUserData() {
    this->initializeModel();
}

OAIUserData::~OAIUserData() {}

void OAIUserData::initializeModel() {

    m_affiliations_isSet = false;
    m_affiliations_isValid = false;

    m_algolia_isSet = false;
    m_algolia_isValid = false;

    m_cohort_isSet = false;
    m_cohort_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_organizations_isSet = false;
    m_organizations_isValid = false;

    m_total_listening_time_isSet = false;
    m_total_listening_time_isValid = false;
}

void OAIUserData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserData::fromJsonObject(QJsonObject json) {

    m_affiliations_isValid = ::OpenAPI::fromJsonValue(m_affiliations, json[QString("affiliations")]);
    m_affiliations_isSet = !json[QString("affiliations")].isNull() && m_affiliations_isValid;

    m_algolia_isValid = ::OpenAPI::fromJsonValue(m_algolia, json[QString("algolia")]);
    m_algolia_isSet = !json[QString("algolia")].isNull() && m_algolia_isValid;

    m_cohort_isValid = ::OpenAPI::fromJsonValue(m_cohort, json[QString("cohort")]);
    m_cohort_isSet = !json[QString("cohort")].isNull() && m_cohort_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("firstName")]);
    m_first_name_isSet = !json[QString("firstName")].isNull() && m_first_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("lastName")]);
    m_last_name_isSet = !json[QString("lastName")].isNull() && m_last_name_isValid;

    m_organizations_isValid = ::OpenAPI::fromJsonValue(m_organizations, json[QString("organizations")]);
    m_organizations_isSet = !json[QString("organizations")].isNull() && m_organizations_isValid;

    m_total_listening_time_isValid = ::OpenAPI::fromJsonValue(m_total_listening_time, json[QString("totalListeningTime")]);
    m_total_listening_time_isSet = !json[QString("totalListeningTime")].isNull() && m_total_listening_time_isValid;
}

QString OAIUserData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserData::asJsonObject() const {
    QJsonObject obj;
    if (m_affiliations.size() > 0) {
        obj.insert(QString("affiliations"), ::OpenAPI::toJsonValue(m_affiliations));
    }
    if (m_algolia.size() > 0) {
        obj.insert(QString("algolia"), ::OpenAPI::toJsonValue(m_algolia));
    }
    if (m_cohort.isSet()) {
        obj.insert(QString("cohort"), ::OpenAPI::toJsonValue(m_cohort));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("firstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("lastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_organizations.size() > 0) {
        obj.insert(QString("organizations"), ::OpenAPI::toJsonValue(m_organizations));
    }
    if (m_total_listening_time_isSet) {
        obj.insert(QString("totalListeningTime"), ::OpenAPI::toJsonValue(m_total_listening_time));
    }
    return obj;
}

QList<OAIAffiliation> OAIUserData::getAffiliations() const {
    return m_affiliations;
}
void OAIUserData::setAffiliations(const QList<OAIAffiliation> &affiliations) {
    m_affiliations = affiliations;
    m_affiliations_isSet = true;
}

bool OAIUserData::is_affiliations_Set() const{
    return m_affiliations_isSet;
}

bool OAIUserData::is_affiliations_Valid() const{
    return m_affiliations_isValid;
}

QList<OAIAlgolia> OAIUserData::getAlgolia() const {
    return m_algolia;
}
void OAIUserData::setAlgolia(const QList<OAIAlgolia> &algolia) {
    m_algolia = algolia;
    m_algolia_isSet = true;
}

bool OAIUserData::is_algolia_Set() const{
    return m_algolia_isSet;
}

bool OAIUserData::is_algolia_Valid() const{
    return m_algolia_isValid;
}

OAICohort OAIUserData::getCohort() const {
    return m_cohort;
}
void OAIUserData::setCohort(const OAICohort &cohort) {
    m_cohort = cohort;
    m_cohort_isSet = true;
}

bool OAIUserData::is_cohort_Set() const{
    return m_cohort_isSet;
}

bool OAIUserData::is_cohort_Valid() const{
    return m_cohort_isValid;
}

QString OAIUserData::getEmail() const {
    return m_email;
}
void OAIUserData::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIUserData::is_email_Set() const{
    return m_email_isSet;
}

bool OAIUserData::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIUserData::getFirstName() const {
    return m_first_name;
}
void OAIUserData::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIUserData::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIUserData::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIUserData::getId() const {
    return m_id;
}
void OAIUserData::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUserData::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUserData::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIUserData::getLastName() const {
    return m_last_name;
}
void OAIUserData::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIUserData::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIUserData::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QList<OAIOrganization> OAIUserData::getOrganizations() const {
    return m_organizations;
}
void OAIUserData::setOrganizations(const QList<OAIOrganization> &organizations) {
    m_organizations = organizations;
    m_organizations_isSet = true;
}

bool OAIUserData::is_organizations_Set() const{
    return m_organizations_isSet;
}

bool OAIUserData::is_organizations_Valid() const{
    return m_organizations_isValid;
}

QString OAIUserData::getTotalListeningTime() const {
    return m_total_listening_time;
}
void OAIUserData::setTotalListeningTime(const QString &total_listening_time) {
    m_total_listening_time = total_listening_time;
    m_total_listening_time_isSet = true;
}

bool OAIUserData::is_total_listening_time_Set() const{
    return m_total_listening_time_isSet;
}

bool OAIUserData::is_total_listening_time_Valid() const{
    return m_total_listening_time_isValid;
}

bool OAIUserData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_affiliations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_algolia.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cohort.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organizations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_listening_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_algolia_isValid && m_cohort_isValid && m_id_isValid && m_organizations_isValid && true;
}

} // namespace OpenAPI
