/*
 * NPR Identity Service
 * The entry point to user-specific information
 *
 * The version of the OpenAPI document: 2
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A station that a user has an affiliation with
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:07.691948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Organization {
  public static final String SERIALIZED_NAME_CALL = "call";
  @SerializedName(SERIALIZED_NAME_CALL)
  private String call;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_DONATION_URL = "donationUrl";
  @SerializedName(SERIALIZED_NAME_DONATION_URL)
  private String donationUrl;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LOGO = "logo";
  @SerializedName(SERIALIZED_NAME_LOGO)
  private String logo;

  public static final String SERIALIZED_NAME_NOTIF_ORG = "notif_org";
  @SerializedName(SERIALIZED_NAME_NOTIF_ORG)
  private List<String> notifOrg = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERVICE_ID = "serviceId";
  @SerializedName(SERIALIZED_NAME_SERVICE_ID)
  private String serviceId;

  public static final String SERIALIZED_NAME_SMALL_LOGO = "smallLogo";
  @SerializedName(SERIALIZED_NAME_SMALL_LOGO)
  private String smallLogo;

  public Organization() {
  }

  public Organization call(String call) {
    this.call = call;
    return this;
  }

  /**
   * Station call letters
   * @return call
   */
  @javax.annotation.Nonnull
  public String getCall() {
    return call;
  }

  public void setCall(String call) {
    this.call = call;
  }


  public Organization city(String city) {
    this.city = city;
    return this;
  }

  /**
   * A short description of the station&#39;s main market city
   * @return city
   */
  @javax.annotation.Nonnull
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public Organization displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * A short displayable text field for the end user, strictly text; ignored on PUT
   * @return displayName
   */
  @javax.annotation.Nonnull
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public Organization donationUrl(String donationUrl) {
    this.donationUrl = donationUrl;
    return this;
  }

  /**
   * Station donation page URL
   * @return donationUrl
   */
  @javax.annotation.Nullable
  public String getDonationUrl() {
    return donationUrl;
  }

  public void setDonationUrl(String donationUrl) {
    this.donationUrl = donationUrl;
  }


  public Organization id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Some unique identifier for the organization for the user
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Organization logo(String logo) {
    this.logo = logo;
    return this;
  }

  /**
   * Station logo image url
   * @return logo
   */
  @javax.annotation.Nullable
  public String getLogo() {
    return logo;
  }

  public void setLogo(String logo) {
    this.logo = logo;
  }


  public Organization notifOrg(List<String> notifOrg) {
    this.notifOrg = notifOrg;
    return this;
  }

  public Organization addNotifOrgItem(String notifOrgItem) {
    if (this.notifOrg == null) {
      this.notifOrg = new ArrayList<>();
    }
    this.notifOrg.add(notifOrgItem);
    return this;
  }

  /**
   * The topic in Firebase Cloud Messaging to which the device should subscribe if it supports notifications and the user wants notifications about their localized station.
   * @return notifOrg
   */
  @javax.annotation.Nullable
  public List<String> getNotifOrg() {
    return notifOrg;
  }

  public void setNotifOrg(List<String> notifOrg) {
    this.notifOrg = notifOrg;
  }


  public Organization serviceId(String serviceId) {
    this.serviceId = serviceId;
    return this;
  }

  /**
   * Some unique identifier for the user&#39;s organization&#39;s primary service, or null if the org has no services
   * @return serviceId
   */
  @javax.annotation.Nullable
  public String getServiceId() {
    return serviceId;
  }

  public void setServiceId(String serviceId) {
    this.serviceId = serviceId;
  }


  public Organization smallLogo(String smallLogo) {
    this.smallLogo = smallLogo;
    return this;
  }

  /**
   * Station logo image url
   * @return smallLogo
   */
  @javax.annotation.Nullable
  public String getSmallLogo() {
    return smallLogo;
  }

  public void setSmallLogo(String smallLogo) {
    this.smallLogo = smallLogo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Organization organization = (Organization) o;
    return Objects.equals(this.call, organization.call) &&
        Objects.equals(this.city, organization.city) &&
        Objects.equals(this.displayName, organization.displayName) &&
        Objects.equals(this.donationUrl, organization.donationUrl) &&
        Objects.equals(this.id, organization.id) &&
        Objects.equals(this.logo, organization.logo) &&
        Objects.equals(this.notifOrg, organization.notifOrg) &&
        Objects.equals(this.serviceId, organization.serviceId) &&
        Objects.equals(this.smallLogo, organization.smallLogo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(call, city, displayName, donationUrl, id, logo, notifOrg, serviceId, smallLogo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Organization {\n");
    sb.append("    call: ").append(toIndentedString(call)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    donationUrl: ").append(toIndentedString(donationUrl)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    logo: ").append(toIndentedString(logo)).append("\n");
    sb.append("    notifOrg: ").append(toIndentedString(notifOrg)).append("\n");
    sb.append("    serviceId: ").append(toIndentedString(serviceId)).append("\n");
    sb.append("    smallLogo: ").append(toIndentedString(smallLogo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("call");
    openapiFields.add("city");
    openapiFields.add("displayName");
    openapiFields.add("donationUrl");
    openapiFields.add("id");
    openapiFields.add("logo");
    openapiFields.add("notif_org");
    openapiFields.add("serviceId");
    openapiFields.add("smallLogo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("call");
    openapiRequiredFields.add("city");
    openapiRequiredFields.add("displayName");
    openapiRequiredFields.add("id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Organization
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Organization.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Organization is not found in the empty JSON string", Organization.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Organization.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Organization` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Organization.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("call").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `call` to be a primitive type in the JSON string but got `%s`", jsonObj.get("call").toString()));
      }
      if (!jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if (!jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("donationUrl") != null && !jsonObj.get("donationUrl").isJsonNull()) && !jsonObj.get("donationUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `donationUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("donationUrl").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("logo") != null && !jsonObj.get("logo").isJsonNull()) && !jsonObj.get("logo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logo").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("notif_org") != null && !jsonObj.get("notif_org").isJsonNull() && !jsonObj.get("notif_org").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `notif_org` to be an array in the JSON string but got `%s`", jsonObj.get("notif_org").toString()));
      }
      if ((jsonObj.get("serviceId") != null && !jsonObj.get("serviceId").isJsonNull()) && !jsonObj.get("serviceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceId").toString()));
      }
      if ((jsonObj.get("smallLogo") != null && !jsonObj.get("smallLogo").isJsonNull()) && !jsonObj.get("smallLogo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `smallLogo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("smallLogo").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Organization.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Organization' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Organization> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Organization.class));

       return (TypeAdapter<T>) new TypeAdapter<Organization>() {
           @Override
           public void write(JsonWriter out, Organization value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Organization read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Organization given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Organization
   * @throws IOException if the JSON string is invalid with respect to Organization
   */
  public static Organization fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Organization.class);
  }

  /**
   * Convert an instance of Organization to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

