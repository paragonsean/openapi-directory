/*
 * NPR Identity Service
 * The entry point to user-specific information
 *
 * The version of the OpenAPI document: 2
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Affiliation;
import org.openapitools.client.model.ErrorDocument;
import java.time.OffsetDateTime;
import org.openapitools.client.model.UserDocument;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IdentityApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IdentityApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IdentityApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteUser
     * @param authorization Your access token from the Authorization Service. Should start with &#x60;Bearer&#x60;, followed by a space, followed by the token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 401 </td><td> The client is not authorized to complete this request. Check to ensure a valid access token was passed in the headers. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A server error </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 503 </td><td> The system is undergoing maintenance and we are unable to fulfill this request. Look for a &#x60;Retry-After&#x60; header to see the predicted time the system will be back up. </td><td>  * Retry-After - The predicted time the system will be back up <br>  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserCall(String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/user";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.collection.doc+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUserValidateBeforeCall(String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deleteUser(Async)");
        }

        return deleteUserCall(authorization, _callback);

    }

    /**
     * Delete the user&#39;s account
     * Use with caution as some steps are irreverisble. Initiates the user account deletion process, including removal of all user PII and account access.
     * @param authorization Your access token from the Authorization Service. Should start with &#x60;Bearer&#x60;, followed by a space, followed by the token. (required)
     * @return UserDocument
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 401 </td><td> The client is not authorized to complete this request. Check to ensure a valid access token was passed in the headers. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A server error </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 503 </td><td> The system is undergoing maintenance and we are unable to fulfill this request. Look for a &#x60;Retry-After&#x60; header to see the predicted time the system will be back up. </td><td>  * Retry-After - The predicted time the system will be back up <br>  </td></tr>
     </table>
     */
    public UserDocument deleteUser(String authorization) throws ApiException {
        ApiResponse<UserDocument> localVarResp = deleteUserWithHttpInfo(authorization);
        return localVarResp.getData();
    }

    /**
     * Delete the user&#39;s account
     * Use with caution as some steps are irreverisble. Initiates the user account deletion process, including removal of all user PII and account access.
     * @param authorization Your access token from the Authorization Service. Should start with &#x60;Bearer&#x60;, followed by a space, followed by the token. (required)
     * @return ApiResponse&lt;UserDocument&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 401 </td><td> The client is not authorized to complete this request. Check to ensure a valid access token was passed in the headers. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A server error </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 503 </td><td> The system is undergoing maintenance and we are unable to fulfill this request. Look for a &#x60;Retry-After&#x60; header to see the predicted time the system will be back up. </td><td>  * Retry-After - The predicted time the system will be back up <br>  </td></tr>
     </table>
     */
    public ApiResponse<UserDocument> deleteUserWithHttpInfo(String authorization) throws ApiException {
        okhttp3.Call localVarCall = deleteUserValidateBeforeCall(authorization, null);
        Type localVarReturnType = new TypeToken<UserDocument>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete the user&#39;s account (asynchronously)
     * Use with caution as some steps are irreverisble. Initiates the user account deletion process, including removal of all user PII and account access.
     * @param authorization Your access token from the Authorization Service. Should start with &#x60;Bearer&#x60;, followed by a space, followed by the token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 401 </td><td> The client is not authorized to complete this request. Check to ensure a valid access token was passed in the headers. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A server error </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 503 </td><td> The system is undergoing maintenance and we are unable to fulfill this request. Look for a &#x60;Retry-After&#x60; header to see the predicted time the system will be back up. </td><td>  * Retry-After - The predicted time the system will be back up <br>  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserAsync(String authorization, final ApiCallback<UserDocument> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUserValidateBeforeCall(authorization, _callback);
        Type localVarReturnType = new TypeToken<UserDocument>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUser
     * @param authorization Your access token from the Authorization Service. Should start with &#x60;Bearer&#x60;, followed by a space, followed by the token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 401 </td><td> The client is not authorized to complete this request. Check to ensure a valid access token was passed in the headers. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The client has exceeded the number of daily calls as per their rate limit. For now, this only applies to prototype applications and untrusted clients. Trusted clients will never be rate-limited, nor will any production apps. </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 500 </td><td> A server error </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 503 </td><td> The system is undergoing maintenance and we are unable to fulfill this request. Look for a &#x60;Retry-After&#x60; header to see the predicted time the system will be back up. </td><td>  * Retry-After - The predicted time the system will be back up <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getUserCall(String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/user";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.collection.doc+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserValidateBeforeCall(String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getUser(Async)");
        }

        return getUserCall(authorization, _callback);

    }

    /**
     * Get the latest state information about the logged-in user
     * After a successful login, the client should send a &#x60;GET&#x60; call approximately once an hour to refresh the user data.
     * @param authorization Your access token from the Authorization Service. Should start with &#x60;Bearer&#x60;, followed by a space, followed by the token. (required)
     * @return UserDocument
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 401 </td><td> The client is not authorized to complete this request. Check to ensure a valid access token was passed in the headers. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The client has exceeded the number of daily calls as per their rate limit. For now, this only applies to prototype applications and untrusted clients. Trusted clients will never be rate-limited, nor will any production apps. </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 500 </td><td> A server error </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 503 </td><td> The system is undergoing maintenance and we are unable to fulfill this request. Look for a &#x60;Retry-After&#x60; header to see the predicted time the system will be back up. </td><td>  * Retry-After - The predicted time the system will be back up <br>  </td></tr>
     </table>
     */
    public UserDocument getUser(String authorization) throws ApiException {
        ApiResponse<UserDocument> localVarResp = getUserWithHttpInfo(authorization);
        return localVarResp.getData();
    }

    /**
     * Get the latest state information about the logged-in user
     * After a successful login, the client should send a &#x60;GET&#x60; call approximately once an hour to refresh the user data.
     * @param authorization Your access token from the Authorization Service. Should start with &#x60;Bearer&#x60;, followed by a space, followed by the token. (required)
     * @return ApiResponse&lt;UserDocument&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 401 </td><td> The client is not authorized to complete this request. Check to ensure a valid access token was passed in the headers. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The client has exceeded the number of daily calls as per their rate limit. For now, this only applies to prototype applications and untrusted clients. Trusted clients will never be rate-limited, nor will any production apps. </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 500 </td><td> A server error </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 503 </td><td> The system is undergoing maintenance and we are unable to fulfill this request. Look for a &#x60;Retry-After&#x60; header to see the predicted time the system will be back up. </td><td>  * Retry-After - The predicted time the system will be back up <br>  </td></tr>
     </table>
     */
    public ApiResponse<UserDocument> getUserWithHttpInfo(String authorization) throws ApiException {
        okhttp3.Call localVarCall = getUserValidateBeforeCall(authorization, null);
        Type localVarReturnType = new TypeToken<UserDocument>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the latest state information about the logged-in user (asynchronously)
     * After a successful login, the client should send a &#x60;GET&#x60; call approximately once an hour to refresh the user data.
     * @param authorization Your access token from the Authorization Service. Should start with &#x60;Bearer&#x60;, followed by a space, followed by the token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 401 </td><td> The client is not authorized to complete this request. Check to ensure a valid access token was passed in the headers. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The client has exceeded the number of daily calls as per their rate limit. For now, this only applies to prototype applications and untrusted clients. Trusted clients will never be rate-limited, nor will any production apps. </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 500 </td><td> A server error </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 503 </td><td> The system is undergoing maintenance and we are unable to fulfill this request. Look for a &#x60;Retry-After&#x60; header to see the predicted time the system will be back up. </td><td>  * Retry-After - The predicted time the system will be back up <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getUserAsync(String authorization, final ApiCallback<UserDocument> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserValidateBeforeCall(authorization, _callback);
        Type localVarReturnType = new TypeToken<UserDocument>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for inheritFromTempUser
     * @param authorization Your access token from the Authorization Service. Should start with &#x60;Bearer&#x60;, followed by a space, followed by the token. (required)
     * @param tempUser The temporary user&#39;s ID before the user registered or logged in (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The request was successful </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 400 </td><td> A bad request; generally, one or more parameters passed in were incorrect or missing </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 429 </td><td> The client has exceeded the number of daily calls as per their rate limit. For now, this only applies to prototype applications and untrusted clients. Trusted clients will never be rate-limited, nor will any production apps. </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 500 </td><td> A server error </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 503 </td><td> The system is undergoing maintenance and we are unable to fulfill this request. Look for a &#x60;Retry-After&#x60; header to see the predicted time the system will be back up. </td><td>  * Retry-After - The predicted time the system will be back up <br>  </td></tr>
     </table>
     */
    public okhttp3.Call inheritFromTempUserCall(String authorization, Integer tempUser, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/user/inherit";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tempUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("temp_user", tempUser));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.collection.doc+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call inheritFromTempUserValidateBeforeCall(String authorization, Integer tempUser, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling inheritFromTempUser(Async)");
        }

        // verify the required parameter 'tempUser' is set
        if (tempUser == null) {
            throw new ApiException("Missing the required parameter 'tempUser' when calling inheritFromTempUser(Async)");
        }

        return inheritFromTempUserCall(authorization, tempUser, _callback);

    }

    /**
     * Copy listening data from a temporary user account to the logged-in user&#39;s account
     * This can and should only be used by clients who have access to the &#x60;temporary_user&#x60; grant type.     Third-party developers do not have access to this grant type by default, and will not need this endpoint.
     * @param authorization Your access token from the Authorization Service. Should start with &#x60;Bearer&#x60;, followed by a space, followed by the token. (required)
     * @param tempUser The temporary user&#39;s ID before the user registered or logged in (required)
     * @return UserDocument
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The request was successful </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 400 </td><td> A bad request; generally, one or more parameters passed in were incorrect or missing </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 429 </td><td> The client has exceeded the number of daily calls as per their rate limit. For now, this only applies to prototype applications and untrusted clients. Trusted clients will never be rate-limited, nor will any production apps. </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 500 </td><td> A server error </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 503 </td><td> The system is undergoing maintenance and we are unable to fulfill this request. Look for a &#x60;Retry-After&#x60; header to see the predicted time the system will be back up. </td><td>  * Retry-After - The predicted time the system will be back up <br>  </td></tr>
     </table>
     */
    public UserDocument inheritFromTempUser(String authorization, Integer tempUser) throws ApiException {
        ApiResponse<UserDocument> localVarResp = inheritFromTempUserWithHttpInfo(authorization, tempUser);
        return localVarResp.getData();
    }

    /**
     * Copy listening data from a temporary user account to the logged-in user&#39;s account
     * This can and should only be used by clients who have access to the &#x60;temporary_user&#x60; grant type.     Third-party developers do not have access to this grant type by default, and will not need this endpoint.
     * @param authorization Your access token from the Authorization Service. Should start with &#x60;Bearer&#x60;, followed by a space, followed by the token. (required)
     * @param tempUser The temporary user&#39;s ID before the user registered or logged in (required)
     * @return ApiResponse&lt;UserDocument&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The request was successful </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 400 </td><td> A bad request; generally, one or more parameters passed in were incorrect or missing </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 429 </td><td> The client has exceeded the number of daily calls as per their rate limit. For now, this only applies to prototype applications and untrusted clients. Trusted clients will never be rate-limited, nor will any production apps. </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 500 </td><td> A server error </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 503 </td><td> The system is undergoing maintenance and we are unable to fulfill this request. Look for a &#x60;Retry-After&#x60; header to see the predicted time the system will be back up. </td><td>  * Retry-After - The predicted time the system will be back up <br>  </td></tr>
     </table>
     */
    public ApiResponse<UserDocument> inheritFromTempUserWithHttpInfo(String authorization, Integer tempUser) throws ApiException {
        okhttp3.Call localVarCall = inheritFromTempUserValidateBeforeCall(authorization, tempUser, null);
        Type localVarReturnType = new TypeToken<UserDocument>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Copy listening data from a temporary user account to the logged-in user&#39;s account (asynchronously)
     * This can and should only be used by clients who have access to the &#x60;temporary_user&#x60; grant type.     Third-party developers do not have access to this grant type by default, and will not need this endpoint.
     * @param authorization Your access token from the Authorization Service. Should start with &#x60;Bearer&#x60;, followed by a space, followed by the token. (required)
     * @param tempUser The temporary user&#39;s ID before the user registered or logged in (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The request was successful </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 400 </td><td> A bad request; generally, one or more parameters passed in were incorrect or missing </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 429 </td><td> The client has exceeded the number of daily calls as per their rate limit. For now, this only applies to prototype applications and untrusted clients. Trusted clients will never be rate-limited, nor will any production apps. </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 500 </td><td> A server error </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 503 </td><td> The system is undergoing maintenance and we are unable to fulfill this request. Look for a &#x60;Retry-After&#x60; header to see the predicted time the system will be back up. </td><td>  * Retry-After - The predicted time the system will be back up <br>  </td></tr>
     </table>
     */
    public okhttp3.Call inheritFromTempUserAsync(String authorization, Integer tempUser, final ApiCallback<UserDocument> _callback) throws ApiException {

        okhttp3.Call localVarCall = inheritFromTempUserValidateBeforeCall(authorization, tempUser, _callback);
        Type localVarReturnType = new TypeToken<UserDocument>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postFollowing
     * @param authorization Your access token from the Authorization Service. Should start with &#x60;Bearer&#x60;, followed by a space, followed by the token. (required)
     * @param body A JSON-serialized object which contains data about a user affiliation such as the aggregation ID, affiliation rating, aggregation URL, days since last listen, and following status. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The request was successful </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 400 </td><td> A bad request; generally, one or more parameters passed in were incorrect or missing </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 401 </td><td> The client is not authorized to complete this request. Check to ensure a valid access token was passed in the headers. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The client has exceeded the number of daily calls as per their rate limit. For now, this only applies to prototype applications and untrusted clients. Trusted clients will never be rate-limited, nor will any production apps. </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 500 </td><td> A server error </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 503 </td><td> The system is undergoing maintenance and we are unable to fulfill this request. Look for a &#x60;Retry-After&#x60; header to see the predicted time the system will be back up. </td><td>  * Retry-After - The predicted time the system will be back up <br>  </td></tr>
     </table>
     */
    public okhttp3.Call postFollowingCall(String authorization, Affiliation body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v2/following";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.collection.doc+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postFollowingValidateBeforeCall(String authorization, Affiliation body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling postFollowing(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postFollowing(Async)");
        }

        return postFollowingCall(authorization, body, _callback);

    }

    /**
     * Update the following status of the logged-in user for a particular aggregation
     * After a successful call, this returns a User document with an updated list of affiliations.
     * @param authorization Your access token from the Authorization Service. Should start with &#x60;Bearer&#x60;, followed by a space, followed by the token. (required)
     * @param body A JSON-serialized object which contains data about a user affiliation such as the aggregation ID, affiliation rating, aggregation URL, days since last listen, and following status. (required)
     * @return UserDocument
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The request was successful </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 400 </td><td> A bad request; generally, one or more parameters passed in were incorrect or missing </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 401 </td><td> The client is not authorized to complete this request. Check to ensure a valid access token was passed in the headers. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The client has exceeded the number of daily calls as per their rate limit. For now, this only applies to prototype applications and untrusted clients. Trusted clients will never be rate-limited, nor will any production apps. </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 500 </td><td> A server error </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 503 </td><td> The system is undergoing maintenance and we are unable to fulfill this request. Look for a &#x60;Retry-After&#x60; header to see the predicted time the system will be back up. </td><td>  * Retry-After - The predicted time the system will be back up <br>  </td></tr>
     </table>
     */
    public UserDocument postFollowing(String authorization, Affiliation body) throws ApiException {
        ApiResponse<UserDocument> localVarResp = postFollowingWithHttpInfo(authorization, body);
        return localVarResp.getData();
    }

    /**
     * Update the following status of the logged-in user for a particular aggregation
     * After a successful call, this returns a User document with an updated list of affiliations.
     * @param authorization Your access token from the Authorization Service. Should start with &#x60;Bearer&#x60;, followed by a space, followed by the token. (required)
     * @param body A JSON-serialized object which contains data about a user affiliation such as the aggregation ID, affiliation rating, aggregation URL, days since last listen, and following status. (required)
     * @return ApiResponse&lt;UserDocument&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The request was successful </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 400 </td><td> A bad request; generally, one or more parameters passed in were incorrect or missing </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 401 </td><td> The client is not authorized to complete this request. Check to ensure a valid access token was passed in the headers. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The client has exceeded the number of daily calls as per their rate limit. For now, this only applies to prototype applications and untrusted clients. Trusted clients will never be rate-limited, nor will any production apps. </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 500 </td><td> A server error </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 503 </td><td> The system is undergoing maintenance and we are unable to fulfill this request. Look for a &#x60;Retry-After&#x60; header to see the predicted time the system will be back up. </td><td>  * Retry-After - The predicted time the system will be back up <br>  </td></tr>
     </table>
     */
    public ApiResponse<UserDocument> postFollowingWithHttpInfo(String authorization, Affiliation body) throws ApiException {
        okhttp3.Call localVarCall = postFollowingValidateBeforeCall(authorization, body, null);
        Type localVarReturnType = new TypeToken<UserDocument>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the following status of the logged-in user for a particular aggregation (asynchronously)
     * After a successful call, this returns a User document with an updated list of affiliations.
     * @param authorization Your access token from the Authorization Service. Should start with &#x60;Bearer&#x60;, followed by a space, followed by the token. (required)
     * @param body A JSON-serialized object which contains data about a user affiliation such as the aggregation ID, affiliation rating, aggregation URL, days since last listen, and following status. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The request was successful </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 400 </td><td> A bad request; generally, one or more parameters passed in were incorrect or missing </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 401 </td><td> The client is not authorized to complete this request. Check to ensure a valid access token was passed in the headers. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The client has exceeded the number of daily calls as per their rate limit. For now, this only applies to prototype applications and untrusted clients. Trusted clients will never be rate-limited, nor will any production apps. </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 500 </td><td> A server error </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 503 </td><td> The system is undergoing maintenance and we are unable to fulfill this request. Look for a &#x60;Retry-After&#x60; header to see the predicted time the system will be back up. </td><td>  * Retry-After - The predicted time the system will be back up <br>  </td></tr>
     </table>
     */
    public okhttp3.Call postFollowingAsync(String authorization, Affiliation body, final ApiCallback<UserDocument> _callback) throws ApiException {

        okhttp3.Call localVarCall = postFollowingValidateBeforeCall(authorization, body, _callback);
        Type localVarReturnType = new TypeToken<UserDocument>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateStations
     * @param authorization Your access token from the Authorization Service. Should start with &#x60;Bearer&#x60;, followed by a space, followed by the token. (required)
     * @param body A JSON-serialized array of station IDs (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The request was successful </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 400 </td><td> A bad request; generally, one or more parameters passed in were incorrect or missing </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 401 </td><td> The client is not authorized to complete this request. Check to ensure a valid access token was passed in the headers. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The client has exceeded the number of daily calls as per their rate limit. For now, this only applies to prototype applications and untrusted clients. Trusted clients will never be rate-limited, nor will any production apps. </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 500 </td><td> A server error </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 503 </td><td> The system is undergoing maintenance and we are unable to fulfill this request. Look for a &#x60;Retry-After&#x60; header to see the predicted time the system will be back up. </td><td>  * Retry-After - The predicted time the system will be back up <br>  </td></tr>
     </table>
     */
    public okhttp3.Call updateStationsCall(String authorization, List<Integer> body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v2/stations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.collection.doc+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/vnd.collection.doc+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateStationsValidateBeforeCall(String authorization, List<Integer> body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling updateStations(Async)");
        }

        return updateStationsCall(authorization, body, _callback);

    }

    /**
     * Update the logged-in user&#39;s favorite station(s)
     * Right now, only the primary station can be changed. Previously selected stations will not be deleted, but the new station will be moved to first in the array.
     * @param authorization Your access token from the Authorization Service. Should start with &#x60;Bearer&#x60;, followed by a space, followed by the token. (required)
     * @param body A JSON-serialized array of station IDs (optional)
     * @return UserDocument
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The request was successful </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 400 </td><td> A bad request; generally, one or more parameters passed in were incorrect or missing </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 401 </td><td> The client is not authorized to complete this request. Check to ensure a valid access token was passed in the headers. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The client has exceeded the number of daily calls as per their rate limit. For now, this only applies to prototype applications and untrusted clients. Trusted clients will never be rate-limited, nor will any production apps. </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 500 </td><td> A server error </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 503 </td><td> The system is undergoing maintenance and we are unable to fulfill this request. Look for a &#x60;Retry-After&#x60; header to see the predicted time the system will be back up. </td><td>  * Retry-After - The predicted time the system will be back up <br>  </td></tr>
     </table>
     */
    public UserDocument updateStations(String authorization, List<Integer> body) throws ApiException {
        ApiResponse<UserDocument> localVarResp = updateStationsWithHttpInfo(authorization, body);
        return localVarResp.getData();
    }

    /**
     * Update the logged-in user&#39;s favorite station(s)
     * Right now, only the primary station can be changed. Previously selected stations will not be deleted, but the new station will be moved to first in the array.
     * @param authorization Your access token from the Authorization Service. Should start with &#x60;Bearer&#x60;, followed by a space, followed by the token. (required)
     * @param body A JSON-serialized array of station IDs (optional)
     * @return ApiResponse&lt;UserDocument&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The request was successful </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 400 </td><td> A bad request; generally, one or more parameters passed in were incorrect or missing </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 401 </td><td> The client is not authorized to complete this request. Check to ensure a valid access token was passed in the headers. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The client has exceeded the number of daily calls as per their rate limit. For now, this only applies to prototype applications and untrusted clients. Trusted clients will never be rate-limited, nor will any production apps. </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 500 </td><td> A server error </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 503 </td><td> The system is undergoing maintenance and we are unable to fulfill this request. Look for a &#x60;Retry-After&#x60; header to see the predicted time the system will be back up. </td><td>  * Retry-After - The predicted time the system will be back up <br>  </td></tr>
     </table>
     */
    public ApiResponse<UserDocument> updateStationsWithHttpInfo(String authorization, List<Integer> body) throws ApiException {
        okhttp3.Call localVarCall = updateStationsValidateBeforeCall(authorization, body, null);
        Type localVarReturnType = new TypeToken<UserDocument>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the logged-in user&#39;s favorite station(s) (asynchronously)
     * Right now, only the primary station can be changed. Previously selected stations will not be deleted, but the new station will be moved to first in the array.
     * @param authorization Your access token from the Authorization Service. Should start with &#x60;Bearer&#x60;, followed by a space, followed by the token. (required)
     * @param body A JSON-serialized array of station IDs (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The request was successful </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 400 </td><td> A bad request; generally, one or more parameters passed in were incorrect or missing </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 401 </td><td> The client is not authorized to complete this request. Check to ensure a valid access token was passed in the headers. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The client has exceeded the number of daily calls as per their rate limit. For now, this only applies to prototype applications and untrusted clients. Trusted clients will never be rate-limited, nor will any production apps. </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 500 </td><td> A server error </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 503 </td><td> The system is undergoing maintenance and we are unable to fulfill this request. Look for a &#x60;Retry-After&#x60; header to see the predicted time the system will be back up. </td><td>  * Retry-After - The predicted time the system will be back up <br>  </td></tr>
     </table>
     */
    public okhttp3.Call updateStationsAsync(String authorization, List<Integer> body, final ApiCallback<UserDocument> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateStationsValidateBeforeCall(authorization, body, _callback);
        Type localVarReturnType = new TypeToken<UserDocument>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
