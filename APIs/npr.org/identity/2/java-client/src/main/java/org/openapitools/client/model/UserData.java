/*
 * NPR Identity Service
 * The entry point to user-specific information
 *
 * The version of the OpenAPI document: 2
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Affiliation;
import org.openapitools.client.model.Algolia;
import org.openapitools.client.model.Cohort;
import org.openapitools.client.model.Organization;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Object; see description of a user object below
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:07.691948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UserData {
  public static final String SERIALIZED_NAME_AFFILIATIONS = "affiliations";
  @SerializedName(SERIALIZED_NAME_AFFILIATIONS)
  private List<Affiliation> affiliations = new ArrayList<>();

  public static final String SERIALIZED_NAME_ALGOLIA = "algolia";
  @SerializedName(SERIALIZED_NAME_ALGOLIA)
  private List<Algolia> algolia = new ArrayList<>();

  public static final String SERIALIZED_NAME_COHORT = "cohort";
  @SerializedName(SERIALIZED_NAME_COHORT)
  private Cohort cohort;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_ORGANIZATIONS = "organizations";
  @SerializedName(SERIALIZED_NAME_ORGANIZATIONS)
  private List<Organization> organizations = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOTAL_LISTENING_TIME = "totalListeningTime";
  @SerializedName(SERIALIZED_NAME_TOTAL_LISTENING_TIME)
  private String totalListeningTime;

  public UserData() {
  }

  public UserData affiliations(List<Affiliation> affiliations) {
    this.affiliations = affiliations;
    return this;
  }

  public UserData addAffiliationsItem(Affiliation affiliationsItem) {
    if (this.affiliations == null) {
      this.affiliations = new ArrayList<>();
    }
    this.affiliations.add(affiliationsItem);
    return this;
  }

  /**
   * Program(s) that the user has positively interacted with
   * @return affiliations
   */
  @javax.annotation.Nullable
  public List<Affiliation> getAffiliations() {
    return affiliations;
  }

  public void setAffiliations(List<Affiliation> affiliations) {
    this.affiliations = affiliations;
  }


  public UserData algolia(List<Algolia> algolia) {
    this.algolia = algolia;
    return this;
  }

  public UserData addAlgoliaItem(Algolia algoliaItem) {
    if (this.algolia == null) {
      this.algolia = new ArrayList<>();
    }
    this.algolia.add(algoliaItem);
    return this;
  }

  /**
   * Use this information to search Algolia for stories
   * @return algolia
   */
  @javax.annotation.Nonnull
  public List<Algolia> getAlgolia() {
    return algolia;
  }

  public void setAlgolia(List<Algolia> algolia) {
    this.algolia = algolia;
  }


  public UserData cohort(Cohort cohort) {
    this.cohort = cohort;
    return this;
  }

  /**
   * Get cohort
   * @return cohort
   */
  @javax.annotation.Nonnull
  public Cohort getCohort() {
    return cohort;
  }

  public void setCohort(Cohort cohort) {
    this.cohort = cohort;
  }


  public UserData email(String email) {
    this.email = email;
    return this;
  }

  /**
   * The user&#39;s email address
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public UserData firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * The user&#39;s first name
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public UserData id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Some unique identifier for the user
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public UserData lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * The user&#39;s last name
   * @return lastName
   */
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public UserData organizations(List<Organization> organizations) {
    this.organizations = organizations;
    return this;
  }

  public UserData addOrganizationsItem(Organization organizationsItem) {
    if (this.organizations == null) {
      this.organizations = new ArrayList<>();
    }
    this.organizations.add(organizationsItem);
    return this;
  }

  /**
   * User&#39;s chosen NPR Member Station(s)
   * @return organizations
   */
  @javax.annotation.Nonnull
  public List<Organization> getOrganizations() {
    return organizations;
  }

  public void setOrganizations(List<Organization> organizations) {
    this.organizations = organizations;
  }


  public UserData totalListeningTime(String totalListeningTime) {
    this.totalListeningTime = totalListeningTime;
    return this;
  }

  /**
   * Internal use only. User&#39;s total listening time across all platforms.
   * @return totalListeningTime
   */
  @javax.annotation.Nullable
  public String getTotalListeningTime() {
    return totalListeningTime;
  }

  public void setTotalListeningTime(String totalListeningTime) {
    this.totalListeningTime = totalListeningTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserData userData = (UserData) o;
    return Objects.equals(this.affiliations, userData.affiliations) &&
        Objects.equals(this.algolia, userData.algolia) &&
        Objects.equals(this.cohort, userData.cohort) &&
        Objects.equals(this.email, userData.email) &&
        Objects.equals(this.firstName, userData.firstName) &&
        Objects.equals(this.id, userData.id) &&
        Objects.equals(this.lastName, userData.lastName) &&
        Objects.equals(this.organizations, userData.organizations) &&
        Objects.equals(this.totalListeningTime, userData.totalListeningTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(affiliations, algolia, cohort, email, firstName, id, lastName, organizations, totalListeningTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserData {\n");
    sb.append("    affiliations: ").append(toIndentedString(affiliations)).append("\n");
    sb.append("    algolia: ").append(toIndentedString(algolia)).append("\n");
    sb.append("    cohort: ").append(toIndentedString(cohort)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    organizations: ").append(toIndentedString(organizations)).append("\n");
    sb.append("    totalListeningTime: ").append(toIndentedString(totalListeningTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("affiliations");
    openapiFields.add("algolia");
    openapiFields.add("cohort");
    openapiFields.add("email");
    openapiFields.add("firstName");
    openapiFields.add("id");
    openapiFields.add("lastName");
    openapiFields.add("organizations");
    openapiFields.add("totalListeningTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("algolia");
    openapiRequiredFields.add("cohort");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("organizations");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserData is not found in the empty JSON string", UserData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UserData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("affiliations") != null && !jsonObj.get("affiliations").isJsonNull()) {
        JsonArray jsonArrayaffiliations = jsonObj.getAsJsonArray("affiliations");
        if (jsonArrayaffiliations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("affiliations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `affiliations` to be an array in the JSON string but got `%s`", jsonObj.get("affiliations").toString()));
          }

          // validate the optional field `affiliations` (array)
          for (int i = 0; i < jsonArrayaffiliations.size(); i++) {
            Affiliation.validateJsonElement(jsonArrayaffiliations.get(i));
          };
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("algolia").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `algolia` to be an array in the JSON string but got `%s`", jsonObj.get("algolia").toString()));
      }

      JsonArray jsonArrayalgolia = jsonObj.getAsJsonArray("algolia");
      // validate the required field `algolia` (array)
      for (int i = 0; i < jsonArrayalgolia.size(); i++) {
        Algolia.validateJsonElement(jsonArrayalgolia.get(i));
      };
      // validate the required field `cohort`
      Cohort.validateJsonElement(jsonObj.get("cohort"));
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonNull()) && !jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("lastName") != null && !jsonObj.get("lastName").isJsonNull()) && !jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("organizations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `organizations` to be an array in the JSON string but got `%s`", jsonObj.get("organizations").toString()));
      }

      JsonArray jsonArrayorganizations = jsonObj.getAsJsonArray("organizations");
      // validate the required field `organizations` (array)
      for (int i = 0; i < jsonArrayorganizations.size(); i++) {
        Organization.validateJsonElement(jsonArrayorganizations.get(i));
      };
      if ((jsonObj.get("totalListeningTime") != null && !jsonObj.get("totalListeningTime").isJsonNull()) && !jsonObj.get("totalListeningTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalListeningTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalListeningTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserData.class));

       return (TypeAdapter<T>) new TypeAdapter<UserData>() {
           @Override
           public void write(JsonWriter out, UserData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserData
   * @throws IOException if the JSON string is invalid with respect to UserData
   */
  public static UserData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserData.class);
  }

  /**
   * Convert an instance of UserData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

