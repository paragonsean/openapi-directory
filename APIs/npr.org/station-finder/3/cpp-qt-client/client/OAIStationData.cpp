/**
 * NPR Station Finder Service
 * Allows clients to look up NPR member station information
 *
 * The version of the OpenAPI document: 3
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStationData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStationData::OAIStationData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStationData::OAIStationData() {
    this->initializeModel();
}

OAIStationData::~OAIStationData() {}

void OAIStationData::initializeModel() {

    m_brand_isSet = false;
    m_brand_isValid = false;

    m_eligibility_isSet = false;
    m_eligibility_isValid = false;

    m_guid_isSet = false;
    m_guid_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;

    m_newscast_isSet = false;
    m_newscast_isValid = false;

    m_org_id_isSet = false;
    m_org_id_isValid = false;
}

void OAIStationData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStationData::fromJsonObject(QJsonObject json) {

    m_brand_isValid = ::OpenAPI::fromJsonValue(m_brand, json[QString("brand")]);
    m_brand_isSet = !json[QString("brand")].isNull() && m_brand_isValid;

    m_eligibility_isValid = ::OpenAPI::fromJsonValue(m_eligibility, json[QString("eligibility")]);
    m_eligibility_isSet = !json[QString("eligibility")].isNull() && m_eligibility_isValid;

    m_guid_isValid = ::OpenAPI::fromJsonValue(m_guid, json[QString("guid")]);
    m_guid_isSet = !json[QString("guid")].isNull() && m_guid_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_newscast_isValid = ::OpenAPI::fromJsonValue(m_newscast, json[QString("newscast")]);
    m_newscast_isSet = !json[QString("newscast")].isNull() && m_newscast_isValid;

    m_org_id_isValid = ::OpenAPI::fromJsonValue(m_org_id, json[QString("orgId")]);
    m_org_id_isSet = !json[QString("orgId")].isNull() && m_org_id_isValid;
}

QString OAIStationData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStationData::asJsonObject() const {
    QJsonObject obj;
    if (m_brand.isSet()) {
        obj.insert(QString("brand"), ::OpenAPI::toJsonValue(m_brand));
    }
    if (m_eligibility.isSet()) {
        obj.insert(QString("eligibility"), ::OpenAPI::toJsonValue(m_eligibility));
    }
    if (m_guid_isSet) {
        obj.insert(QString("guid"), ::OpenAPI::toJsonValue(m_guid));
    }
    if (m_network.isSet()) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_newscast.isSet()) {
        obj.insert(QString("newscast"), ::OpenAPI::toJsonValue(m_newscast));
    }
    if (m_org_id_isSet) {
        obj.insert(QString("orgId"), ::OpenAPI::toJsonValue(m_org_id));
    }
    return obj;
}

OAIStationBrandData OAIStationData::getBrand() const {
    return m_brand;
}
void OAIStationData::setBrand(const OAIStationBrandData &brand) {
    m_brand = brand;
    m_brand_isSet = true;
}

bool OAIStationData::is_brand_Set() const{
    return m_brand_isSet;
}

bool OAIStationData::is_brand_Valid() const{
    return m_brand_isValid;
}

OAIStationEligibilityData OAIStationData::getEligibility() const {
    return m_eligibility;
}
void OAIStationData::setEligibility(const OAIStationEligibilityData &eligibility) {
    m_eligibility = eligibility;
    m_eligibility_isSet = true;
}

bool OAIStationData::is_eligibility_Set() const{
    return m_eligibility_isSet;
}

bool OAIStationData::is_eligibility_Valid() const{
    return m_eligibility_isValid;
}

QString OAIStationData::getGuid() const {
    return m_guid;
}
void OAIStationData::setGuid(const QString &guid) {
    m_guid = guid;
    m_guid_isSet = true;
}

bool OAIStationData::is_guid_Set() const{
    return m_guid_isSet;
}

bool OAIStationData::is_guid_Valid() const{
    return m_guid_isValid;
}

OAIStationNetworkData OAIStationData::getNetwork() const {
    return m_network;
}
void OAIStationData::setNetwork(const OAIStationNetworkData &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAIStationData::is_network_Set() const{
    return m_network_isSet;
}

bool OAIStationData::is_network_Valid() const{
    return m_network_isValid;
}

OAIStationNewscastData OAIStationData::getNewscast() const {
    return m_newscast;
}
void OAIStationData::setNewscast(const OAIStationNewscastData &newscast) {
    m_newscast = newscast;
    m_newscast_isSet = true;
}

bool OAIStationData::is_newscast_Set() const{
    return m_newscast_isSet;
}

bool OAIStationData::is_newscast_Valid() const{
    return m_newscast_isValid;
}

QString OAIStationData::getOrgId() const {
    return m_org_id;
}
void OAIStationData::setOrgId(const QString &org_id) {
    m_org_id = org_id;
    m_org_id_isSet = true;
}

bool OAIStationData::is_org_id_Set() const{
    return m_org_id_isSet;
}

bool OAIStationData::is_org_id_Valid() const{
    return m_org_id_isValid;
}

bool OAIStationData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_brand.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_eligibility.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_newscast.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_org_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStationData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_brand_isValid && m_eligibility_isValid && m_guid_isValid && m_network_isValid && m_org_id_isValid && true;
}

} // namespace OpenAPI
