/**
 * NPR Station Finder Service
 * Allows clients to look up NPR member station information
 *
 * The version of the OpenAPI document: 3
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAffiliation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAffiliation::OAIAffiliation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAffiliation::OAIAffiliation() {
    this->initializeModel();
}

OAIAffiliation::~OAIAffiliation() {}

void OAIAffiliation::initializeModel() {

    m_days_since_last_listen_isSet = false;
    m_days_since_last_listen_isValid = false;

    m_following_isSet = false;
    m_following_isValid = false;

    m_href_isSet = false;
    m_href_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_notif_following_isSet = false;
    m_notif_following_isValid = false;

    m_notif_rated_isSet = false;
    m_notif_rated_isValid = false;

    m_rating_isSet = false;
    m_rating_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIAffiliation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAffiliation::fromJsonObject(QJsonObject json) {

    m_days_since_last_listen_isValid = ::OpenAPI::fromJsonValue(m_days_since_last_listen, json[QString("daysSinceLastListen")]);
    m_days_since_last_listen_isSet = !json[QString("daysSinceLastListen")].isNull() && m_days_since_last_listen_isValid;

    m_following_isValid = ::OpenAPI::fromJsonValue(m_following, json[QString("following")]);
    m_following_isSet = !json[QString("following")].isNull() && m_following_isValid;

    m_href_isValid = ::OpenAPI::fromJsonValue(m_href, json[QString("href")]);
    m_href_isSet = !json[QString("href")].isNull() && m_href_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_notif_following_isValid = ::OpenAPI::fromJsonValue(m_notif_following, json[QString("notif_following")]);
    m_notif_following_isSet = !json[QString("notif_following")].isNull() && m_notif_following_isValid;

    m_notif_rated_isValid = ::OpenAPI::fromJsonValue(m_notif_rated, json[QString("notif_rated")]);
    m_notif_rated_isSet = !json[QString("notif_rated")].isNull() && m_notif_rated_isValid;

    m_rating_isValid = ::OpenAPI::fromJsonValue(m_rating, json[QString("rating")]);
    m_rating_isSet = !json[QString("rating")].isNull() && m_rating_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIAffiliation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAffiliation::asJsonObject() const {
    QJsonObject obj;
    if (m_days_since_last_listen_isSet) {
        obj.insert(QString("daysSinceLastListen"), ::OpenAPI::toJsonValue(m_days_since_last_listen));
    }
    if (m_following_isSet) {
        obj.insert(QString("following"), ::OpenAPI::toJsonValue(m_following));
    }
    if (m_href_isSet) {
        obj.insert(QString("href"), ::OpenAPI::toJsonValue(m_href));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_notif_following.size() > 0) {
        obj.insert(QString("notif_following"), ::OpenAPI::toJsonValue(m_notif_following));
    }
    if (m_notif_rated.size() > 0) {
        obj.insert(QString("notif_rated"), ::OpenAPI::toJsonValue(m_notif_rated));
    }
    if (m_rating_isSet) {
        obj.insert(QString("rating"), ::OpenAPI::toJsonValue(m_rating));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

qint32 OAIAffiliation::getDaysSinceLastListen() const {
    return m_days_since_last_listen;
}
void OAIAffiliation::setDaysSinceLastListen(const qint32 &days_since_last_listen) {
    m_days_since_last_listen = days_since_last_listen;
    m_days_since_last_listen_isSet = true;
}

bool OAIAffiliation::is_days_since_last_listen_Set() const{
    return m_days_since_last_listen_isSet;
}

bool OAIAffiliation::is_days_since_last_listen_Valid() const{
    return m_days_since_last_listen_isValid;
}

bool OAIAffiliation::isFollowing() const {
    return m_following;
}
void OAIAffiliation::setFollowing(const bool &following) {
    m_following = following;
    m_following_isSet = true;
}

bool OAIAffiliation::is_following_Set() const{
    return m_following_isSet;
}

bool OAIAffiliation::is_following_Valid() const{
    return m_following_isValid;
}

QString OAIAffiliation::getHref() const {
    return m_href;
}
void OAIAffiliation::setHref(const QString &href) {
    m_href = href;
    m_href_isSet = true;
}

bool OAIAffiliation::is_href_Set() const{
    return m_href_isSet;
}

bool OAIAffiliation::is_href_Valid() const{
    return m_href_isValid;
}

QString OAIAffiliation::getId() const {
    return m_id;
}
void OAIAffiliation::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAffiliation::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAffiliation::is_id_Valid() const{
    return m_id_isValid;
}

QList<QString> OAIAffiliation::getNotifFollowing() const {
    return m_notif_following;
}
void OAIAffiliation::setNotifFollowing(const QList<QString> &notif_following) {
    m_notif_following = notif_following;
    m_notif_following_isSet = true;
}

bool OAIAffiliation::is_notif_following_Set() const{
    return m_notif_following_isSet;
}

bool OAIAffiliation::is_notif_following_Valid() const{
    return m_notif_following_isValid;
}

QList<QString> OAIAffiliation::getNotifRated() const {
    return m_notif_rated;
}
void OAIAffiliation::setNotifRated(const QList<QString> &notif_rated) {
    m_notif_rated = notif_rated;
    m_notif_rated_isSet = true;
}

bool OAIAffiliation::is_notif_rated_Set() const{
    return m_notif_rated_isSet;
}

bool OAIAffiliation::is_notif_rated_Valid() const{
    return m_notif_rated_isValid;
}

float OAIAffiliation::getRating() const {
    return m_rating;
}
void OAIAffiliation::setRating(const float &rating) {
    m_rating = rating;
    m_rating_isSet = true;
}

bool OAIAffiliation::is_rating_Set() const{
    return m_rating_isSet;
}

bool OAIAffiliation::is_rating_Valid() const{
    return m_rating_isValid;
}

QString OAIAffiliation::getTitle() const {
    return m_title;
}
void OAIAffiliation::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIAffiliation::is_title_Set() const{
    return m_title_isSet;
}

bool OAIAffiliation::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIAffiliation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_days_since_last_listen_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_following_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_href_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notif_following.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_notif_rated.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAffiliation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_following_isValid && m_href_isValid && m_id_isValid && true;
}

} // namespace OpenAPI
