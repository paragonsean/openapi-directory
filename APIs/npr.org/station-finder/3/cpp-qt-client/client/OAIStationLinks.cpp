/**
 * NPR Station Finder Service
 * Allows clients to look up NPR member station information
 *
 * The version of the OpenAPI document: 3
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStationLinks.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStationLinks::OAIStationLinks(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStationLinks::OAIStationLinks() {
    this->initializeModel();
}

OAIStationLinks::~OAIStationLinks() {}

void OAIStationLinks::initializeModel() {

    m_brand_isSet = false;
    m_brand_isValid = false;

    m_donation_isSet = false;
    m_donation_isValid = false;

    m_podcasts_isSet = false;
    m_podcasts_isValid = false;

    m_related_isSet = false;
    m_related_isValid = false;

    m_streams_isSet = false;
    m_streams_isValid = false;
}

void OAIStationLinks::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStationLinks::fromJsonObject(QJsonObject json) {

    m_brand_isValid = ::OpenAPI::fromJsonValue(m_brand, json[QString("brand")]);
    m_brand_isSet = !json[QString("brand")].isNull() && m_brand_isValid;

    m_donation_isValid = ::OpenAPI::fromJsonValue(m_donation, json[QString("donation")]);
    m_donation_isSet = !json[QString("donation")].isNull() && m_donation_isValid;

    m_podcasts_isValid = ::OpenAPI::fromJsonValue(m_podcasts, json[QString("podcasts")]);
    m_podcasts_isSet = !json[QString("podcasts")].isNull() && m_podcasts_isValid;

    m_related_isValid = ::OpenAPI::fromJsonValue(m_related, json[QString("related")]);
    m_related_isSet = !json[QString("related")].isNull() && m_related_isValid;

    m_streams_isValid = ::OpenAPI::fromJsonValue(m_streams, json[QString("streams")]);
    m_streams_isSet = !json[QString("streams")].isNull() && m_streams_isValid;
}

QString OAIStationLinks::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStationLinks::asJsonObject() const {
    QJsonObject obj;
    if (m_brand.size() > 0) {
        obj.insert(QString("brand"), ::OpenAPI::toJsonValue(m_brand));
    }
    if (m_donation.size() > 0) {
        obj.insert(QString("donation"), ::OpenAPI::toJsonValue(m_donation));
    }
    if (m_podcasts.size() > 0) {
        obj.insert(QString("podcasts"), ::OpenAPI::toJsonValue(m_podcasts));
    }
    if (m_related.size() > 0) {
        obj.insert(QString("related"), ::OpenAPI::toJsonValue(m_related));
    }
    if (m_streams.size() > 0) {
        obj.insert(QString("streams"), ::OpenAPI::toJsonValue(m_streams));
    }
    return obj;
}

QList<OAIStationBrandLink> OAIStationLinks::getBrand() const {
    return m_brand;
}
void OAIStationLinks::setBrand(const QList<OAIStationBrandLink> &brand) {
    m_brand = brand;
    m_brand_isSet = true;
}

bool OAIStationLinks::is_brand_Set() const{
    return m_brand_isSet;
}

bool OAIStationLinks::is_brand_Valid() const{
    return m_brand_isValid;
}

QList<OAIStationDonationLink> OAIStationLinks::getDonation() const {
    return m_donation;
}
void OAIStationLinks::setDonation(const QList<OAIStationDonationLink> &donation) {
    m_donation = donation;
    m_donation_isSet = true;
}

bool OAIStationLinks::is_donation_Set() const{
    return m_donation_isSet;
}

bool OAIStationLinks::is_donation_Valid() const{
    return m_donation_isValid;
}

QList<OAIStationPodcastsLink> OAIStationLinks::getPodcasts() const {
    return m_podcasts;
}
void OAIStationLinks::setPodcasts(const QList<OAIStationPodcastsLink> &podcasts) {
    m_podcasts = podcasts;
    m_podcasts_isSet = true;
}

bool OAIStationLinks::is_podcasts_Set() const{
    return m_podcasts_isSet;
}

bool OAIStationLinks::is_podcasts_Valid() const{
    return m_podcasts_isValid;
}

QList<OAIStationRelatedLink> OAIStationLinks::getRelated() const {
    return m_related;
}
void OAIStationLinks::setRelated(const QList<OAIStationRelatedLink> &related) {
    m_related = related;
    m_related_isSet = true;
}

bool OAIStationLinks::is_related_Set() const{
    return m_related_isSet;
}

bool OAIStationLinks::is_related_Valid() const{
    return m_related_isValid;
}

QList<OAIStationStreamsLink> OAIStationLinks::getStreams() const {
    return m_streams;
}
void OAIStationLinks::setStreams(const QList<OAIStationStreamsLink> &streams) {
    m_streams = streams;
    m_streams_isSet = true;
}

bool OAIStationLinks::is_streams_Set() const{
    return m_streams_isSet;
}

bool OAIStationLinks::is_streams_Valid() const{
    return m_streams_isValid;
}

bool OAIStationLinks::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_brand.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_donation.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_podcasts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_related.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_streams.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStationLinks::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_brand_isValid && true;
}

} // namespace OpenAPI
