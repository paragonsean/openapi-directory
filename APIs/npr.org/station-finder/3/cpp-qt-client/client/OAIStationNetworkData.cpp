/**
 * NPR Station Finder Service
 * Allows clients to look up NPR member station information
 *
 * The version of the OpenAPI document: 3
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStationNetworkData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStationNetworkData::OAIStationNetworkData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStationNetworkData::OAIStationNetworkData() {
    this->initializeModel();
}

OAIStationNetworkData::~OAIStationNetworkData() {}

void OAIStationNetworkData::initializeModel() {

    m_current_org_id_isSet = false;
    m_current_org_id_isValid = false;

    m_tier1_isSet = false;
    m_tier1_isValid = false;

    m_uses_inheritance_isSet = false;
    m_uses_inheritance_isValid = false;
}

void OAIStationNetworkData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStationNetworkData::fromJsonObject(QJsonObject json) {

    m_current_org_id_isValid = ::OpenAPI::fromJsonValue(m_current_org_id, json[QString("currentOrgId")]);
    m_current_org_id_isSet = !json[QString("currentOrgId")].isNull() && m_current_org_id_isValid;

    m_tier1_isValid = ::OpenAPI::fromJsonValue(m_tier1, json[QString("tier1")]);
    m_tier1_isSet = !json[QString("tier1")].isNull() && m_tier1_isValid;

    m_uses_inheritance_isValid = ::OpenAPI::fromJsonValue(m_uses_inheritance, json[QString("usesInheritance")]);
    m_uses_inheritance_isSet = !json[QString("usesInheritance")].isNull() && m_uses_inheritance_isValid;
}

QString OAIStationNetworkData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStationNetworkData::asJsonObject() const {
    QJsonObject obj;
    if (m_current_org_id_isSet) {
        obj.insert(QString("currentOrgId"), ::OpenAPI::toJsonValue(m_current_org_id));
    }
    if (m_tier1.isSet()) {
        obj.insert(QString("tier1"), ::OpenAPI::toJsonValue(m_tier1));
    }
    if (m_uses_inheritance_isSet) {
        obj.insert(QString("usesInheritance"), ::OpenAPI::toJsonValue(m_uses_inheritance));
    }
    return obj;
}

QString OAIStationNetworkData::getCurrentOrgId() const {
    return m_current_org_id;
}
void OAIStationNetworkData::setCurrentOrgId(const QString &current_org_id) {
    m_current_org_id = current_org_id;
    m_current_org_id_isSet = true;
}

bool OAIStationNetworkData::is_current_org_id_Set() const{
    return m_current_org_id_isSet;
}

bool OAIStationNetworkData::is_current_org_id_Valid() const{
    return m_current_org_id_isValid;
}

OAIStationNetworkTierOneData OAIStationNetworkData::getTier1() const {
    return m_tier1;
}
void OAIStationNetworkData::setTier1(const OAIStationNetworkTierOneData &tier1) {
    m_tier1 = tier1;
    m_tier1_isSet = true;
}

bool OAIStationNetworkData::is_tier1_Set() const{
    return m_tier1_isSet;
}

bool OAIStationNetworkData::is_tier1_Valid() const{
    return m_tier1_isValid;
}

bool OAIStationNetworkData::isUsesInheritance() const {
    return m_uses_inheritance;
}
void OAIStationNetworkData::setUsesInheritance(const bool &uses_inheritance) {
    m_uses_inheritance = uses_inheritance;
    m_uses_inheritance_isSet = true;
}

bool OAIStationNetworkData::is_uses_inheritance_Set() const{
    return m_uses_inheritance_isSet;
}

bool OAIStationNetworkData::is_uses_inheritance_Valid() const{
    return m_uses_inheritance_isValid;
}

bool OAIStationNetworkData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_org_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tier1.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uses_inheritance_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStationNetworkData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_current_org_id_isValid && m_uses_inheritance_isValid && true;
}

} // namespace OpenAPI
