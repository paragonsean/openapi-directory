/**
 * NPR Station Finder Service
 * Allows clients to look up NPR member station information
 *
 * The version of the OpenAPI document: 3
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStationEligibilityData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStationEligibilityData::OAIStationEligibilityData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStationEligibilityData::OAIStationEligibilityData() {
    this->initializeModel();
}

OAIStationEligibilityData::~OAIStationEligibilityData() {}

void OAIStationEligibilityData::initializeModel() {

    m_format_isSet = false;
    m_format_isValid = false;

    m_localization_isSet = false;
    m_localization_isValid = false;

    m_music_only_isSet = false;
    m_music_only_isValid = false;

    m_npr_one_isSet = false;
    m_npr_one_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIStationEligibilityData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStationEligibilityData::fromJsonObject(QJsonObject json) {

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_localization_isValid = ::OpenAPI::fromJsonValue(m_localization, json[QString("localization")]);
    m_localization_isSet = !json[QString("localization")].isNull() && m_localization_isValid;

    m_music_only_isValid = ::OpenAPI::fromJsonValue(m_music_only, json[QString("musicOnly")]);
    m_music_only_isSet = !json[QString("musicOnly")].isNull() && m_music_only_isValid;

    m_npr_one_isValid = ::OpenAPI::fromJsonValue(m_npr_one, json[QString("nprOne")]);
    m_npr_one_isSet = !json[QString("nprOne")].isNull() && m_npr_one_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIStationEligibilityData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStationEligibilityData::asJsonObject() const {
    QJsonObject obj;
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_localization_isSet) {
        obj.insert(QString("localization"), ::OpenAPI::toJsonValue(m_localization));
    }
    if (m_music_only_isSet) {
        obj.insert(QString("musicOnly"), ::OpenAPI::toJsonValue(m_music_only));
    }
    if (m_npr_one_isSet) {
        obj.insert(QString("nprOne"), ::OpenAPI::toJsonValue(m_npr_one));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIStationEligibilityData::getFormat() const {
    return m_format;
}
void OAIStationEligibilityData::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIStationEligibilityData::is_format_Set() const{
    return m_format_isSet;
}

bool OAIStationEligibilityData::is_format_Valid() const{
    return m_format_isValid;
}

QString OAIStationEligibilityData::getLocalization() const {
    return m_localization;
}
void OAIStationEligibilityData::setLocalization(const QString &localization) {
    m_localization = localization;
    m_localization_isSet = true;
}

bool OAIStationEligibilityData::is_localization_Set() const{
    return m_localization_isSet;
}

bool OAIStationEligibilityData::is_localization_Valid() const{
    return m_localization_isValid;
}

bool OAIStationEligibilityData::isMusicOnly() const {
    return m_music_only;
}
void OAIStationEligibilityData::setMusicOnly(const bool &music_only) {
    m_music_only = music_only;
    m_music_only_isSet = true;
}

bool OAIStationEligibilityData::is_music_only_Set() const{
    return m_music_only_isSet;
}

bool OAIStationEligibilityData::is_music_only_Valid() const{
    return m_music_only_isValid;
}

bool OAIStationEligibilityData::isNprOne() const {
    return m_npr_one;
}
void OAIStationEligibilityData::setNprOne(const bool &npr_one) {
    m_npr_one = npr_one;
    m_npr_one_isSet = true;
}

bool OAIStationEligibilityData::is_npr_one_Set() const{
    return m_npr_one_isSet;
}

bool OAIStationEligibilityData::is_npr_one_Valid() const{
    return m_npr_one_isValid;
}

QString OAIStationEligibilityData::getStatus() const {
    return m_status;
}
void OAIStationEligibilityData::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIStationEligibilityData::is_status_Set() const{
    return m_status_isSet;
}

bool OAIStationEligibilityData::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIStationEligibilityData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_localization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_music_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_npr_one_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStationEligibilityData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_format_isValid && m_music_only_isValid && m_npr_one_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
