/**
 * NPR Station Finder Service
 * Allows clients to look up NPR member station information
 *
 * The version of the OpenAPI document: 3
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStationSearchMetaData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStationSearchMetaData::OAIStationSearchMetaData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStationSearchMetaData::OAIStationSearchMetaData() {
    this->initializeModel();
}

OAIStationSearchMetaData::~OAIStationSearchMetaData() {}

void OAIStationSearchMetaData::initializeModel() {

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_lat_isSet = false;
    m_lat_isValid = false;

    m_lon_isSet = false;
    m_lon_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIStationSearchMetaData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStationSearchMetaData::fromJsonObject(QJsonObject json) {

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("countryCode")]);
    m_country_code_isSet = !json[QString("countryCode")].isNull() && m_country_code_isValid;

    m_lat_isValid = ::OpenAPI::fromJsonValue(m_lat, json[QString("lat")]);
    m_lat_isSet = !json[QString("lat")].isNull() && m_lat_isValid;

    m_lon_isValid = ::OpenAPI::fromJsonValue(m_lon, json[QString("lon")]);
    m_lon_isSet = !json[QString("lon")].isNull() && m_lon_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIStationSearchMetaData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStationSearchMetaData::asJsonObject() const {
    QJsonObject obj;
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("countryCode"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_lat_isSet) {
        obj.insert(QString("lat"), ::OpenAPI::toJsonValue(m_lat));
    }
    if (m_lon_isSet) {
        obj.insert(QString("lon"), ::OpenAPI::toJsonValue(m_lon));
    }
    if (m_query_isSet) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIStationSearchMetaData::getCity() const {
    return m_city;
}
void OAIStationSearchMetaData::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIStationSearchMetaData::is_city_Set() const{
    return m_city_isSet;
}

bool OAIStationSearchMetaData::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIStationSearchMetaData::getCountryCode() const {
    return m_country_code;
}
void OAIStationSearchMetaData::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIStationSearchMetaData::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIStationSearchMetaData::is_country_code_Valid() const{
    return m_country_code_isValid;
}

float OAIStationSearchMetaData::getLat() const {
    return m_lat;
}
void OAIStationSearchMetaData::setLat(const float &lat) {
    m_lat = lat;
    m_lat_isSet = true;
}

bool OAIStationSearchMetaData::is_lat_Set() const{
    return m_lat_isSet;
}

bool OAIStationSearchMetaData::is_lat_Valid() const{
    return m_lat_isValid;
}

float OAIStationSearchMetaData::getLon() const {
    return m_lon;
}
void OAIStationSearchMetaData::setLon(const float &lon) {
    m_lon = lon;
    m_lon_isSet = true;
}

bool OAIStationSearchMetaData::is_lon_Set() const{
    return m_lon_isSet;
}

bool OAIStationSearchMetaData::is_lon_Valid() const{
    return m_lon_isValid;
}

QString OAIStationSearchMetaData::getQuery() const {
    return m_query;
}
void OAIStationSearchMetaData::setQuery(const QString &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAIStationSearchMetaData::is_query_Set() const{
    return m_query_isSet;
}

bool OAIStationSearchMetaData::is_query_Valid() const{
    return m_query_isValid;
}

QString OAIStationSearchMetaData::getState() const {
    return m_state;
}
void OAIStationSearchMetaData::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIStationSearchMetaData::is_state_Set() const{
    return m_state_isSet;
}

bool OAIStationSearchMetaData::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIStationSearchMetaData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStationSearchMetaData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
