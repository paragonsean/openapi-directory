# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class StationNetworkTierThreeData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, name: str=None, uses_inheritance: bool=None):
        """StationNetworkTierThreeData - a model defined in OpenAPI

        :param id: The id of this StationNetworkTierThreeData.
        :param name: The name of this StationNetworkTierThreeData.
        :param uses_inheritance: The uses_inheritance of this StationNetworkTierThreeData.
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'uses_inheritance': bool
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'uses_inheritance': 'usesInheritance'
        }

        self._id = id
        self._name = name
        self._uses_inheritance = uses_inheritance

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StationNetworkTierThreeData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StationNetworkTierThreeData of this StationNetworkTierThreeData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this StationNetworkTierThreeData.

        The unique identifier of a tier 3 organization in the network

        :return: The id of this StationNetworkTierThreeData.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StationNetworkTierThreeData.

        The unique identifier of a tier 3 organization in the network

        :param id: The id of this StationNetworkTierThreeData.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and not re.search(r'^\d{1,4}$', id):
            raise ValueError("Invalid value for `id`, must be a follow pattern or equal to `/^\d{1,4}$/`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this StationNetworkTierThreeData.

        The display name for a tier 3 organization in the network

        :return: The name of this StationNetworkTierThreeData.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StationNetworkTierThreeData.

        The display name for a tier 3 organization in the network

        :param name: The name of this StationNetworkTierThreeData.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def uses_inheritance(self):
        """Gets the uses_inheritance of this StationNetworkTierThreeData.

        Whether or not this station inherits from a parent organization, also referred to as a network

        :return: The uses_inheritance of this StationNetworkTierThreeData.
        :rtype: bool
        """
        return self._uses_inheritance

    @uses_inheritance.setter
    def uses_inheritance(self, uses_inheritance):
        """Sets the uses_inheritance of this StationNetworkTierThreeData.

        Whether or not this station inherits from a parent organization, also referred to as a network

        :param uses_inheritance: The uses_inheritance of this StationNetworkTierThreeData.
        :type uses_inheritance: bool
        """
        if uses_inheritance is None:
            raise ValueError("Invalid value for `uses_inheritance`, must not be `None`")

        self._uses_inheritance = uses_inheritance
