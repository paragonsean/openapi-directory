# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StationEligibilityData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, format: str='Public Radio', localization: str='Show everywhere', music_only: bool=False, npr_one: bool=True, status: str='1'):
        """StationEligibilityData - a model defined in OpenAPI

        :param format: The format of this StationEligibilityData.
        :param localization: The localization of this StationEligibilityData.
        :param music_only: The music_only of this StationEligibilityData.
        :param npr_one: The npr_one of this StationEligibilityData.
        :param status: The status of this StationEligibilityData.
        """
        self.openapi_types = {
            'format': str,
            'localization': str,
            'music_only': bool,
            'npr_one': bool,
            'status': str
        }

        self.attribute_map = {
            'format': 'format',
            'localization': 'localization',
            'music_only': 'musicOnly',
            'npr_one': 'nprOne',
            'status': 'status'
        }

        self._format = format
        self._localization = localization
        self._music_only = music_only
        self._npr_one = npr_one
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StationEligibilityData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StationEligibilityData of this StationEligibilityData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def format(self):
        """Gets the format of this StationEligibilityData.

        The format of the programming on this station

        :return: The format of this StationEligibilityData.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this StationEligibilityData.

        The format of the programming on this station

        :param format: The format of this StationEligibilityData.
        :type format: str
        """
        if format is None:
            raise ValueError("Invalid value for `format`, must not be `None`")

        self._format = format

    @property
    def localization(self):
        """Gets the localization of this StationEligibilityData.

        Whether or not this station should be shown in search for news context, any context or no context

        :return: The localization of this StationEligibilityData.
        :rtype: str
        """
        return self._localization

    @localization.setter
    def localization(self, localization):
        """Sets the localization of this StationEligibilityData.

        Whether or not this station should be shown in search for news context, any context or no context

        :param localization: The localization of this StationEligibilityData.
        :type localization: str
        """

        self._localization = localization

    @property
    def music_only(self):
        """Gets the music_only of this StationEligibilityData.

        Whether or not this station only plays music.  Deprecated.

        :return: The music_only of this StationEligibilityData.
        :rtype: bool
        """
        return self._music_only

    @music_only.setter
    def music_only(self, music_only):
        """Sets the music_only of this StationEligibilityData.

        Whether or not this station only plays music.  Deprecated.

        :param music_only: The music_only of this StationEligibilityData.
        :type music_only: bool
        """
        if music_only is None:
            raise ValueError("Invalid value for `music_only`, must not be `None`")

        self._music_only = music_only

    @property
    def npr_one(self):
        """Gets the npr_one of this StationEligibilityData.

        Whether or not this station is considered an NPR One station

        :return: The npr_one of this StationEligibilityData.
        :rtype: bool
        """
        return self._npr_one

    @npr_one.setter
    def npr_one(self, npr_one):
        """Sets the npr_one of this StationEligibilityData.

        Whether or not this station is considered an NPR One station

        :param npr_one: The npr_one of this StationEligibilityData.
        :type npr_one: bool
        """
        if npr_one is None:
            raise ValueError("Invalid value for `npr_one`, must not be `None`")

        self._npr_one = npr_one

    @property
    def status(self):
        """Gets the status of this StationEligibilityData.

        The status of the station within NPR's system, not typically used by consumers

        :return: The status of this StationEligibilityData.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this StationEligibilityData.

        The status of the station within NPR's system, not typically used by consumers

        :param status: The status of this StationEligibilityData.
        :type status: str
        """
        allowed_values = ["1", "9", "10", "12", "15"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
