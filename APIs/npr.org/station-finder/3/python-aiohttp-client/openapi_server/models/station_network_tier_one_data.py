# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.station_network_tier_two_data import StationNetworkTierTwoData
import re
from openapi_server import util


class StationNetworkTierOneData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, name: str=None, status: str='10', tier2: List[StationNetworkTierTwoData]=None, uses_inheritance: bool=None):
        """StationNetworkTierOneData - a model defined in OpenAPI

        :param id: The id of this StationNetworkTierOneData.
        :param name: The name of this StationNetworkTierOneData.
        :param status: The status of this StationNetworkTierOneData.
        :param tier2: The tier2 of this StationNetworkTierOneData.
        :param uses_inheritance: The uses_inheritance of this StationNetworkTierOneData.
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'status': str,
            'tier2': List[StationNetworkTierTwoData],
            'uses_inheritance': bool
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'status': 'status',
            'tier2': 'tier2',
            'uses_inheritance': 'usesInheritance'
        }

        self._id = id
        self._name = name
        self._status = status
        self._tier2 = tier2
        self._uses_inheritance = uses_inheritance

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StationNetworkTierOneData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StationNetworkTierOneData of this StationNetworkTierOneData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this StationNetworkTierOneData.

        The unique identifier of the top-level organization in the network

        :return: The id of this StationNetworkTierOneData.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StationNetworkTierOneData.

        The unique identifier of the top-level organization in the network

        :param id: The id of this StationNetworkTierOneData.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and not re.search(r'^\d{1,4}$', id):
            raise ValueError("Invalid value for `id`, must be a follow pattern or equal to `/^\d{1,4}$/`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this StationNetworkTierOneData.

        The display name for the top-level organization in the network

        :return: The name of this StationNetworkTierOneData.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StationNetworkTierOneData.

        The display name for the top-level organization in the network

        :param name: The name of this StationNetworkTierOneData.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def status(self):
        """Gets the status of this StationNetworkTierOneData.

        The status of the top-level organization within NPR's system, not typically used by consumers

        :return: The status of this StationNetworkTierOneData.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this StationNetworkTierOneData.

        The status of the top-level organization within NPR's system, not typically used by consumers

        :param status: The status of this StationNetworkTierOneData.
        :type status: str
        """
        allowed_values = ["1", "9", "10", "12", "15"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def tier2(self):
        """Gets the tier2 of this StationNetworkTierOneData.

        One or more stations that are hierarchical children of this organization

        :return: The tier2 of this StationNetworkTierOneData.
        :rtype: List[StationNetworkTierTwoData]
        """
        return self._tier2

    @tier2.setter
    def tier2(self, tier2):
        """Sets the tier2 of this StationNetworkTierOneData.

        One or more stations that are hierarchical children of this organization

        :param tier2: The tier2 of this StationNetworkTierOneData.
        :type tier2: List[StationNetworkTierTwoData]
        """

        self._tier2 = tier2

    @property
    def uses_inheritance(self):
        """Gets the uses_inheritance of this StationNetworkTierOneData.

        Whether or not this station inherits from a parent organization, also referred to as a network

        :return: The uses_inheritance of this StationNetworkTierOneData.
        :rtype: bool
        """
        return self._uses_inheritance

    @uses_inheritance.setter
    def uses_inheritance(self, uses_inheritance):
        """Sets the uses_inheritance of this StationNetworkTierOneData.

        Whether or not this station inherits from a parent organization, also referred to as a network

        :param uses_inheritance: The uses_inheritance of this StationNetworkTierOneData.
        :type uses_inheritance: bool
        """
        if uses_inheritance is None:
            raise ValueError("Invalid value for `uses_inheritance`, must not be `None`")

        self._uses_inheritance = uses_inheritance
