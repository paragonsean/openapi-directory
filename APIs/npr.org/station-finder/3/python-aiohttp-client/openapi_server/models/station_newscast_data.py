# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class StationNewscastData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, recency: int=None):
        """StationNewscastData - a model defined in OpenAPI

        :param id: The id of this StationNewscastData.
        :param recency: The recency of this StationNewscastData.
        """
        self.openapi_types = {
            'id': str,
            'recency': int
        }

        self.attribute_map = {
            'id': 'id',
            'recency': 'recency'
        }

        self._id = id
        self._recency = recency

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StationNewscastData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StationNewscastData of this StationNewscastData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this StationNewscastData.

        The ID of the newscast that should be played for this station; this is handled internally by other microservices such as the NPR One Listening Service, so this field should typically not be used by consumers

        :return: The id of this StationNewscastData.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StationNewscastData.

        The ID of the newscast that should be played for this station; this is handled internally by other microservices such as the NPR One Listening Service, so this field should typically not be used by consumers

        :param id: The id of this StationNewscastData.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and not re.search(r'^\d{1,4}$', id):
            raise ValueError("Invalid value for `id`, must be a follow pattern or equal to `/^\d{1,4}$/`")

        self._id = id

    @property
    def recency(self):
        """Gets the recency of this StationNewscastData.

        How often the newscast should be played, in minutes; a value of `null` implies no information is available, and sensible defaults should be used

        :return: The recency of this StationNewscastData.
        :rtype: int
        """
        return self._recency

    @recency.setter
    def recency(self, recency):
        """Sets the recency of this StationNewscastData.

        How often the newscast should be played, in minutes; a value of `null` implies no information is available, and sensible defaults should be used

        :param recency: The recency of this StationNewscastData.
        :type recency: int
        """
        if recency is None:
            raise ValueError("Invalid value for `recency`, must not be `None`")

        self._recency = recency
