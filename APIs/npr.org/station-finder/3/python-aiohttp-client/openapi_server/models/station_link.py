# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class StationLink(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, href: str=None, guid: str=None, title: str='', type_name: str=None):
        """StationLink - a model defined in OpenAPI

        :param href: The href of this StationLink.
        :param guid: The guid of this StationLink.
        :param title: The title of this StationLink.
        :param type_name: The type_name of this StationLink.
        """
        self.openapi_types = {
            'href': str,
            'guid': str,
            'title': str,
            'type_name': str
        }

        self.attribute_map = {
            'href': 'href',
            'guid': 'guid',
            'title': 'title',
            'type_name': 'typeName'
        }

        self._href = href
        self._guid = guid
        self._title = title
        self._type_name = type_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StationLink':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StationLink of this StationLink.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def href(self):
        """Gets the href of this StationLink.

        The link to be followed

        :return: The href of this StationLink.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this StationLink.

        The link to be followed

        :param href: The href of this StationLink.
        :type href: str
        """
        if href is None:
            raise ValueError("Invalid value for `href`, must not be `None`")

        self._href = href

    @property
    def guid(self):
        """Gets the guid of this StationLink.

        The system's internal unique identifier for a link, not typically used by consumers

        :return: The guid of this StationLink.
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this StationLink.

        The system's internal unique identifier for a link, not typically used by consumers

        :param guid: The guid of this StationLink.
        :type guid: str
        """
        if guid is not None and not re.search(r'^[0-9a-f]{32}$', guid):
            raise ValueError("Invalid value for `guid`, must be a follow pattern or equal to `/^[0-9a-f]{32}$/`")

        self._guid = guid

    @property
    def title(self):
        """Gets the title of this StationLink.

        The link text, provided by the station, for the URL

        :return: The title of this StationLink.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this StationLink.

        The link text, provided by the station, for the URL

        :param title: The title of this StationLink.
        :type title: str
        """

        self._title = title

    @property
    def type_name(self):
        """Gets the type_name of this StationLink.

        The semantic name corresponding to the `typeId`

        :return: The type_name of this StationLink.
        :rtype: str
        """
        return self._type_name

    @type_name.setter
    def type_name(self, type_name):
        """Sets the type_name of this StationLink.

        The semantic name corresponding to the `typeId`

        :param type_name: The type_name of this StationLink.
        :type type_name: str
        """
        if type_name is None:
            raise ValueError("Invalid value for `type_name`, must not be `None`")

        self._type_name = type_name
