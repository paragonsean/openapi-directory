# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StationSearchMetaData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city: str=None, country_code: str=None, lat: float=None, lon: float=None, query: str=None, state: str=None):
        """StationSearchMetaData - a model defined in OpenAPI

        :param city: The city of this StationSearchMetaData.
        :param country_code: The country_code of this StationSearchMetaData.
        :param lat: The lat of this StationSearchMetaData.
        :param lon: The lon of this StationSearchMetaData.
        :param query: The query of this StationSearchMetaData.
        :param state: The state of this StationSearchMetaData.
        """
        self.openapi_types = {
            'city': str,
            'country_code': str,
            'lat': float,
            'lon': float,
            'query': str,
            'state': str
        }

        self.attribute_map = {
            'city': 'city',
            'country_code': 'countryCode',
            'lat': 'lat',
            'lon': 'lon',
            'query': 'query',
            'state': 'state'
        }

        self._city = city
        self._country_code = country_code
        self._lat = lat
        self._lon = lon
        self._query = query
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StationSearchMetaData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StationSearchMetaData of this StationSearchMetaData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city(self):
        """Gets the city of this StationSearchMetaData.

        The city searched for in the original request

        :return: The city of this StationSearchMetaData.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this StationSearchMetaData.

        The city searched for in the original request

        :param city: The city of this StationSearchMetaData.
        :type city: str
        """

        self._city = city

    @property
    def country_code(self):
        """Gets the country_code of this StationSearchMetaData.

        The country where the original request originated, as determined by geolocation. The countryCode is in ISO 3166-1 numeric format

        :return: The country_code of this StationSearchMetaData.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this StationSearchMetaData.

        The country where the original request originated, as determined by geolocation. The countryCode is in ISO 3166-1 numeric format

        :param country_code: The country_code of this StationSearchMetaData.
        :type country_code: str
        """

        self._country_code = country_code

    @property
    def lat(self):
        """Gets the lat of this StationSearchMetaData.

        The latitude parameter used in the original request

        :return: The lat of this StationSearchMetaData.
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this StationSearchMetaData.

        The latitude parameter used in the original request

        :param lat: The lat of this StationSearchMetaData.
        :type lat: float
        """

        self._lat = lat

    @property
    def lon(self):
        """Gets the lon of this StationSearchMetaData.

        The longitude parameter in the original request

        :return: The lon of this StationSearchMetaData.
        :rtype: float
        """
        return self._lon

    @lon.setter
    def lon(self, lon):
        """Sets the lon of this StationSearchMetaData.

        The longitude parameter in the original request

        :param lon: The lon of this StationSearchMetaData.
        :type lon: float
        """

        self._lon = lon

    @property
    def query(self):
        """Gets the query of this StationSearchMetaData.

        The search terms used in the original request

        :return: The query of this StationSearchMetaData.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this StationSearchMetaData.

        The search terms used in the original request

        :param query: The query of this StationSearchMetaData.
        :type query: str
        """

        self._query = query

    @property
    def state(self):
        """Gets the state of this StationSearchMetaData.

        The state searched for in the original request

        :return: The state of this StationSearchMetaData.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this StationSearchMetaData.

        The state searched for in the original request

        :param state: The state of this StationSearchMetaData.
        :type state: str
        """

        self._state = state
