# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class StationBrandData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, band: str='FM', call: str=None, frequency: str=None, market_city: str=None, market_state: str=None, name: str=None, tagline: str=''):
        """StationBrandData - a model defined in OpenAPI

        :param band: The band of this StationBrandData.
        :param call: The call of this StationBrandData.
        :param frequency: The frequency of this StationBrandData.
        :param market_city: The market_city of this StationBrandData.
        :param market_state: The market_state of this StationBrandData.
        :param name: The name of this StationBrandData.
        :param tagline: The tagline of this StationBrandData.
        """
        self.openapi_types = {
            'band': str,
            'call': str,
            'frequency': str,
            'market_city': str,
            'market_state': str,
            'name': str,
            'tagline': str
        }

        self.attribute_map = {
            'band': 'band',
            'call': 'call',
            'frequency': 'frequency',
            'market_city': 'marketCity',
            'market_state': 'marketState',
            'name': 'name',
            'tagline': 'tagline'
        }

        self._band = band
        self._call = call
        self._frequency = frequency
        self._market_city = market_city
        self._market_state = market_state
        self._name = name
        self._tagline = tagline

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StationBrandData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StationBrandData of this StationBrandData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def band(self):
        """Gets the band of this StationBrandData.

        The subsection of the radio spectrum -- 'AM' or 'FM' -- where this station can be heard

        :return: The band of this StationBrandData.
        :rtype: str
        """
        return self._band

    @band.setter
    def band(self, band):
        """Sets the band of this StationBrandData.

        The subsection of the radio spectrum -- 'AM' or 'FM' -- where this station can be heard

        :param band: The band of this StationBrandData.
        :type band: str
        """
        allowed_values = ["FM", "AM"]  # noqa: E501
        if band not in allowed_values:
            raise ValueError(
                "Invalid value for `band` ({0}), must be one of {1}"
                .format(band, allowed_values)
            )

        self._band = band

    @property
    def call(self):
        """Gets the call of this StationBrandData.

        The three-to-four-letter identifying code for this station. Please use this with caution; most stations prefer to be identified by their `name` in client applications instead of `call`.

        :return: The call of this StationBrandData.
        :rtype: str
        """
        return self._call

    @call.setter
    def call(self, call):
        """Sets the call of this StationBrandData.

        The three-to-four-letter identifying code for this station. Please use this with caution; most stations prefer to be identified by their `name` in client applications instead of `call`.

        :param call: The call of this StationBrandData.
        :type call: str
        """
        if call is not None and not re.search(r'^(W|K)[A-Z]{2,3}$', call):
            raise ValueError("Invalid value for `call`, must be a follow pattern or equal to `/^(W|K)[A-Z]{2,3}$/`")

        self._call = call

    @property
    def frequency(self):
        """Gets the frequency of this StationBrandData.

        Where on the radio dial the station can be heard. If the `band` is AM, the frequency will be between 540 and 1600. If the `band` is FM, the frequency will be between 87.8 and 108.0.

        :return: The frequency of this StationBrandData.
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this StationBrandData.

        Where on the radio dial the station can be heard. If the `band` is AM, the frequency will be between 540 and 1600. If the `band` is FM, the frequency will be between 87.8 and 108.0.

        :param frequency: The frequency of this StationBrandData.
        :type frequency: str
        """
        if frequency is not None and not re.search(r'^\d{2,3}\.?\d$', frequency):
            raise ValueError("Invalid value for `frequency`, must be a follow pattern or equal to `/^\d{2,3}\.?\d$/`")

        self._frequency = frequency

    @property
    def market_city(self):
        """Gets the market_city of this StationBrandData.

        The city that the station is most closely associated with. This may or may not be the city the station is licensed in and it may or may not be the city that the station or the station's antenna is located in.

        :return: The market_city of this StationBrandData.
        :rtype: str
        """
        return self._market_city

    @market_city.setter
    def market_city(self, market_city):
        """Sets the market_city of this StationBrandData.

        The city that the station is most closely associated with. This may or may not be the city the station is licensed in and it may or may not be the city that the station or the station's antenna is located in.

        :param market_city: The market_city of this StationBrandData.
        :type market_city: str
        """
        if market_city is None:
            raise ValueError("Invalid value for `market_city`, must not be `None`")
        if market_city is not None and not re.search(r'^[A-Za-z \'\.]+$', market_city):
            raise ValueError("Invalid value for `market_city`, must be a follow pattern or equal to `/^[A-Za-z '\.]+$/`")

        self._market_city = market_city

    @property
    def market_state(self):
        """Gets the market_state of this StationBrandData.

        The state that the station is most closely associated with. This may or may not be the state the station is licensed in and it may or may not be the state that the station or the station's antenna is located in.

        :return: The market_state of this StationBrandData.
        :rtype: str
        """
        return self._market_state

    @market_state.setter
    def market_state(self, market_state):
        """Sets the market_state of this StationBrandData.

        The state that the station is most closely associated with. This may or may not be the state the station is licensed in and it may or may not be the state that the station or the station's antenna is located in.

        :param market_state: The market_state of this StationBrandData.
        :type market_state: str
        """
        if market_state is None:
            raise ValueError("Invalid value for `market_state`, must not be `None`")
        if market_state is not None and not re.search(r'^[A-Z]{2}$', market_state):
            raise ValueError("Invalid value for `market_state`, must be a follow pattern or equal to `/^[A-Z]{2}$/`")

        self._market_state = market_state

    @property
    def name(self):
        """Gets the name of this StationBrandData.

        The display name for the station. In most cases, this will be the same as `call` letters combined with band. When returning networks, it will return the network name (e.g. Minnesota Public Radio).

        :return: The name of this StationBrandData.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StationBrandData.

        The display name for the station. In most cases, this will be the same as `call` letters combined with band. When returning networks, it will return the network name (e.g. Minnesota Public Radio).

        :param name: The name of this StationBrandData.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def tagline(self):
        """Gets the tagline of this StationBrandData.

        A short text-logo for the station

        :return: The tagline of this StationBrandData.
        :rtype: str
        """
        return self._tagline

    @tagline.setter
    def tagline(self, tagline):
        """Sets the tagline of this StationBrandData.

        A short text-logo for the station

        :param tagline: The tagline of this StationBrandData.
        :type tagline: str
        """
        if tagline is None:
            raise ValueError("Invalid value for `tagline`, must not be `None`")

        self._tagline = tagline
