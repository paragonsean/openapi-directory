# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.station_brand_link import StationBrandLink
from openapi_server.models.station_donation_link import StationDonationLink
from openapi_server.models.station_podcasts_link import StationPodcastsLink
from openapi_server.models.station_related_link import StationRelatedLink
from openapi_server.models.station_streams_link import StationStreamsLink
from openapi_server import util


class StationLinks(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, brand: List[StationBrandLink]=None, donation: List[StationDonationLink]=None, podcasts: List[StationPodcastsLink]=None, related: List[StationRelatedLink]=None, streams: List[StationStreamsLink]=None):
        """StationLinks - a model defined in OpenAPI

        :param brand: The brand of this StationLinks.
        :param donation: The donation of this StationLinks.
        :param podcasts: The podcasts of this StationLinks.
        :param related: The related of this StationLinks.
        :param streams: The streams of this StationLinks.
        """
        self.openapi_types = {
            'brand': List[StationBrandLink],
            'donation': List[StationDonationLink],
            'podcasts': List[StationPodcastsLink],
            'related': List[StationRelatedLink],
            'streams': List[StationStreamsLink]
        }

        self.attribute_map = {
            'brand': 'brand',
            'donation': 'donation',
            'podcasts': 'podcasts',
            'related': 'related',
            'streams': 'streams'
        }

        self._brand = brand
        self._donation = donation
        self._podcasts = podcasts
        self._related = related
        self._streams = streams

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StationLinks':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StationLinks of this StationLinks.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def brand(self):
        """Gets the brand of this StationLinks.

        One or more links to a web page for the station

        :return: The brand of this StationLinks.
        :rtype: List[StationBrandLink]
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this StationLinks.

        One or more links to a web page for the station

        :param brand: The brand of this StationLinks.
        :type brand: List[StationBrandLink]
        """
        if brand is None:
            raise ValueError("Invalid value for `brand`, must not be `None`")

        self._brand = brand

    @property
    def donation(self):
        """Gets the donation of this StationLinks.

        One or more links to audio files related to this station

        :return: The donation of this StationLinks.
        :rtype: List[StationDonationLink]
        """
        return self._donation

    @donation.setter
    def donation(self, donation):
        """Sets the donation of this StationLinks.

        One or more links to audio files related to this station

        :param donation: The donation of this StationLinks.
        :type donation: List[StationDonationLink]
        """

        self._donation = donation

    @property
    def podcasts(self):
        """Gets the podcasts of this StationLinks.

        One or more links to podcasts related to this station

        :return: The podcasts of this StationLinks.
        :rtype: List[StationPodcastsLink]
        """
        return self._podcasts

    @podcasts.setter
    def podcasts(self, podcasts):
        """Sets the podcasts of this StationLinks.

        One or more links to podcasts related to this station

        :param podcasts: The podcasts of this StationLinks.
        :type podcasts: List[StationPodcastsLink]
        """

        self._podcasts = podcasts

    @property
    def related(self):
        """Gets the related of this StationLinks.

        One or more links to miscellaneous related content for the station; these typically are not present, and clients should generally not need to use any of these

        :return: The related of this StationLinks.
        :rtype: List[StationRelatedLink]
        """
        return self._related

    @related.setter
    def related(self, related):
        """Sets the related of this StationLinks.

        One or more links to miscellaneous related content for the station; these typically are not present, and clients should generally not need to use any of these

        :param related: The related of this StationLinks.
        :type related: List[StationRelatedLink]
        """

        self._related = related

    @property
    def streams(self):
        """Gets the streams of this StationLinks.

        One or more links to audio streams related to the station

        :return: The streams of this StationLinks.
        :rtype: List[StationStreamsLink]
        """
        return self._streams

    @streams.setter
    def streams(self, streams):
        """Sets the streams of this StationLinks.

        One or more links to audio streams related to the station

        :param streams: The streams of this StationLinks.
        :type streams: List[StationStreamsLink]
        """

        self._streams = streams
