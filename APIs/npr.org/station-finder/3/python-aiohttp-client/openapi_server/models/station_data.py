# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.station_brand_data import StationBrandData
from openapi_server.models.station_eligibility_data import StationEligibilityData
from openapi_server.models.station_network_data import StationNetworkData
from openapi_server.models.station_newscast_data import StationNewscastData
import re
from openapi_server import util


class StationData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, brand: StationBrandData=None, eligibility: StationEligibilityData=None, guid: str=None, network: StationNetworkData=None, newscast: StationNewscastData=None, org_id: str=None):
        """StationData - a model defined in OpenAPI

        :param brand: The brand of this StationData.
        :param eligibility: The eligibility of this StationData.
        :param guid: The guid of this StationData.
        :param network: The network of this StationData.
        :param newscast: The newscast of this StationData.
        :param org_id: The org_id of this StationData.
        """
        self.openapi_types = {
            'brand': StationBrandData,
            'eligibility': StationEligibilityData,
            'guid': str,
            'network': StationNetworkData,
            'newscast': StationNewscastData,
            'org_id': str
        }

        self.attribute_map = {
            'brand': 'brand',
            'eligibility': 'eligibility',
            'guid': 'guid',
            'network': 'network',
            'newscast': 'newscast',
            'org_id': 'orgId'
        }

        self._brand = brand
        self._eligibility = eligibility
        self._guid = guid
        self._network = network
        self._newscast = newscast
        self._org_id = org_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StationData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StationData of this StationData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def brand(self):
        """Gets the brand of this StationData.


        :return: The brand of this StationData.
        :rtype: StationBrandData
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this StationData.


        :param brand: The brand of this StationData.
        :type brand: StationBrandData
        """
        if brand is None:
            raise ValueError("Invalid value for `brand`, must not be `None`")

        self._brand = brand

    @property
    def eligibility(self):
        """Gets the eligibility of this StationData.


        :return: The eligibility of this StationData.
        :rtype: StationEligibilityData
        """
        return self._eligibility

    @eligibility.setter
    def eligibility(self, eligibility):
        """Sets the eligibility of this StationData.


        :param eligibility: The eligibility of this StationData.
        :type eligibility: StationEligibilityData
        """
        if eligibility is None:
            raise ValueError("Invalid value for `eligibility`, must not be `None`")

        self._eligibility = eligibility

    @property
    def guid(self):
        """Gets the guid of this StationData.

        The system's internal unique identifier for a station, not typically used by other APIs or consumers

        :return: The guid of this StationData.
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this StationData.

        The system's internal unique identifier for a station, not typically used by other APIs or consumers

        :param guid: The guid of this StationData.
        :type guid: str
        """
        if guid is None:
            raise ValueError("Invalid value for `guid`, must not be `None`")
        if guid is not None and not re.search(r'^[0-9a-f]{32}$', guid):
            raise ValueError("Invalid value for `guid`, must be a follow pattern or equal to `/^[0-9a-f]{32}$/`")

        self._guid = guid

    @property
    def network(self):
        """Gets the network of this StationData.


        :return: The network of this StationData.
        :rtype: StationNetworkData
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this StationData.


        :param network: The network of this StationData.
        :type network: StationNetworkData
        """
        if network is None:
            raise ValueError("Invalid value for `network`, must not be `None`")

        self._network = network

    @property
    def newscast(self):
        """Gets the newscast of this StationData.


        :return: The newscast of this StationData.
        :rtype: StationNewscastData
        """
        return self._newscast

    @newscast.setter
    def newscast(self, newscast):
        """Sets the newscast of this StationData.


        :param newscast: The newscast of this StationData.
        :type newscast: StationNewscastData
        """

        self._newscast = newscast

    @property
    def org_id(self):
        """Gets the org_id of this StationData.

        The system's unique ID for this station, used across NPR One Microservices and NPR's other APIs

        :return: The org_id of this StationData.
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this StationData.

        The system's unique ID for this station, used across NPR One Microservices and NPR's other APIs

        :param org_id: The org_id of this StationData.
        :type org_id: str
        """
        if org_id is None:
            raise ValueError("Invalid value for `org_id`, must not be `None`")
        if org_id is not None and not re.search(r'^\d{1,4}$', org_id):
            raise ValueError("Invalid value for `org_id`, must be a follow pattern or equal to `/^\d{1,4}$/`")

        self._org_id = org_id
