# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StationBrandLink(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, href: str=None, content_type: str=None, rel: str='homepage'):
        """StationBrandLink - a model defined in OpenAPI

        :param href: The href of this StationBrandLink.
        :param content_type: The content_type of this StationBrandLink.
        :param rel: The rel of this StationBrandLink.
        """
        self.openapi_types = {
            'href': str,
            'content_type': str,
            'rel': str
        }

        self.attribute_map = {
            'href': 'href',
            'content_type': 'content-type',
            'rel': 'rel'
        }

        self._href = href
        self._content_type = content_type
        self._rel = rel

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StationBrandLink':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StationBrandLink of this StationBrandLink.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def href(self):
        """Gets the href of this StationBrandLink.

        The link to be followed

        :return: The href of this StationBrandLink.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this StationBrandLink.

        The link to be followed

        :param href: The href of this StationBrandLink.
        :type href: str
        """
        if href is None:
            raise ValueError("Invalid value for `href`, must not be `None`")

        self._href = href

    @property
    def content_type(self):
        """Gets the content_type of this StationBrandLink.

        The MIME type of the response of this link

        :return: The content_type of this StationBrandLink.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this StationBrandLink.

        The MIME type of the response of this link

        :param content_type: The content_type of this StationBrandLink.
        :type content_type: str
        """
        if content_type is None:
            raise ValueError("Invalid value for `content_type`, must not be `None`")

        self._content_type = content_type

    @property
    def rel(self):
        """Gets the rel of this StationBrandLink.

        A short string identifier describing the way the way the link relates to the document

        :return: The rel of this StationBrandLink.
        :rtype: str
        """
        return self._rel

    @rel.setter
    def rel(self, rel):
        """Sets the rel of this StationBrandLink.

        A short string identifier describing the way the way the link relates to the document

        :param rel: The rel of this StationBrandLink.
        :type rel: str
        """
        allowed_values = ["homepage", "logo", "small-logo", "hello-id-audio", "station-message-audio", "twitter", "facebook"]  # noqa: E501
        if rel not in allowed_values:
            raise ValueError(
                "Invalid value for `rel` ({0}), must be one of {1}"
                .format(rel, allowed_values)
            )

        self._rel = rel
