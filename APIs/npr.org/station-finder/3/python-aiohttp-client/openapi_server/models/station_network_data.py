# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.station_network_tier_one_data import StationNetworkTierOneData
import re
from openapi_server import util


class StationNetworkData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current_org_id: str=None, tier1: StationNetworkTierOneData=None, uses_inheritance: bool=None):
        """StationNetworkData - a model defined in OpenAPI

        :param current_org_id: The current_org_id of this StationNetworkData.
        :param tier1: The tier1 of this StationNetworkData.
        :param uses_inheritance: The uses_inheritance of this StationNetworkData.
        """
        self.openapi_types = {
            'current_org_id': str,
            'tier1': StationNetworkTierOneData,
            'uses_inheritance': bool
        }

        self.attribute_map = {
            'current_org_id': 'currentOrgId',
            'tier1': 'tier1',
            'uses_inheritance': 'usesInheritance'
        }

        self._current_org_id = current_org_id
        self._tier1 = tier1
        self._uses_inheritance = uses_inheritance

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StationNetworkData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StationNetworkData of this StationNetworkData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current_org_id(self):
        """Gets the current_org_id of this StationNetworkData.

        The current station being viewed. Client applications should generally ignore this field.

        :return: The current_org_id of this StationNetworkData.
        :rtype: str
        """
        return self._current_org_id

    @current_org_id.setter
    def current_org_id(self, current_org_id):
        """Sets the current_org_id of this StationNetworkData.

        The current station being viewed. Client applications should generally ignore this field.

        :param current_org_id: The current_org_id of this StationNetworkData.
        :type current_org_id: str
        """
        if current_org_id is None:
            raise ValueError("Invalid value for `current_org_id`, must not be `None`")
        if current_org_id is not None and not re.search(r'^\d{1,4}$', current_org_id):
            raise ValueError("Invalid value for `current_org_id`, must be a follow pattern or equal to `/^\d{1,4}$/`")

        self._current_org_id = current_org_id

    @property
    def tier1(self):
        """Gets the tier1 of this StationNetworkData.


        :return: The tier1 of this StationNetworkData.
        :rtype: StationNetworkTierOneData
        """
        return self._tier1

    @tier1.setter
    def tier1(self, tier1):
        """Sets the tier1 of this StationNetworkData.


        :param tier1: The tier1 of this StationNetworkData.
        :type tier1: StationNetworkTierOneData
        """

        self._tier1 = tier1

    @property
    def uses_inheritance(self):
        """Gets the uses_inheritance of this StationNetworkData.

        Whether or not the current station inherits from a parent organization, also referred to as a network

        :return: The uses_inheritance of this StationNetworkData.
        :rtype: bool
        """
        return self._uses_inheritance

    @uses_inheritance.setter
    def uses_inheritance(self, uses_inheritance):
        """Sets the uses_inheritance of this StationNetworkData.

        Whether or not the current station inherits from a parent organization, also referred to as a network

        :param uses_inheritance: The uses_inheritance of this StationNetworkData.
        :type uses_inheritance: bool
        """
        if uses_inheritance is None:
            raise ValueError("Invalid value for `uses_inheritance`, must not be `None`")

        self._uses_inheritance = uses_inheritance
