/*
 * NPR Station Finder Service
 * Allows clients to look up NPR member station information
 *
 * The version of the OpenAPI document: 3
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ErrorDocument;
import java.time.OffsetDateTime;
import org.openapitools.client.model.StationDocument;
import org.openapitools.client.model.StationListDocument;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for StationfinderApi
 */
@Disabled
public class StationfinderApiTest {

    private final StationfinderApi api = new StationfinderApi();

    /**
     * Retrieve metadata for the station with the given numeric ID
     *
     * This endpoint retrieves information about a given station, based on its numeric ID, which is consistent across all of NPR&#39;s APIs.  A typical use case for this data is for clients who want to create a dropdown menu, modal/pop-up or dedicated page displaying more information about the station the client is localized to, including, for example, links to the station&#39;s homepage and donation (pledge) page.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStationByIdTest() throws ApiException {
        String authorization = null;
        Long stationId = null;
        StationDocument response = api.getStationById(authorization, stationId);
        // TODO: test validations
    }

    /**
     * List stations close to you or filter by search criteria
     *
     * This endpoint has two main use cases:  - If no query parameters passed in, it returns a list of stations that are geographically closest to the calling client (based on GeoIP information) - If one or more query parameters are passed in, it performs a search of NPR stations that match those search criteria (not taking into account the client&#39;s physical location)  Clients wanting to implement a &#39;Change Station&#39; UI should use this endpoint to power their search. In most cases, you&#39;ll want to build a search interface that uses one of the 3 provided schemas: &#x60;lat&#x60; and &#x60;lon&#x60; (using e.g. the HTML5 Geolocation API), &#x60;city&#x60; and &#x60;state&#x60;, _or_ the generic &#x60;q&#x60; query which can accept a station name, call letters, network name, or zip code. Technically speaking, &#x60;q&#x60; can also take in either a city name or a state name, but using the &#x60;city&#x60; and &#x60;state&#x60; parameters together will yield more accurate geographic search results than &#x60;q&#x3D;{cityName}&#x60;.  The &#x60;lat&#x60; and &#x60;lon&#x60; query parameters should always be passed in together (otherwise the API will return a 400 error), and if included in the query, they will take precedence over any other search criteria; that is, &#x60;lat&#x60; and &#x60;lon&#x60; will do a purely geographic search and not take into account &#x60;q&#x60;, &#x60;city&#x60; or &#x60;state&#x60;.  Similarly, &#x60;city&#x60; and/or &#x60;state&#x60; will take precedence over (and ignore) &#x60;q&#x60;.  If clients want to be able to offer multiple types of searches (e.g. &#39;Search for a station name, city or zipcode&#39;) using a *single* search input form, &#x60;q&#x60; should be used. But again, be aware that using &#x60;city&#x60; and &#x60;state&#x60; together will yield more accurate search results than &#x60;q&#x3D;{cityName}&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchStationsTest() throws ApiException {
        String authorization = null;
        String q = null;
        String city = null;
        String state = null;
        Float lat = null;
        Float lon = null;
        StationListDocument response = api.searchStations(authorization, q, city, state, lat, lon);
        // TODO: test validations
    }

}
