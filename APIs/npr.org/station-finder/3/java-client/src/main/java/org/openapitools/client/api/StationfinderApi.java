/*
 * NPR Station Finder Service
 * Allows clients to look up NPR member station information
 *
 * The version of the OpenAPI document: 3
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorDocument;
import java.time.OffsetDateTime;
import org.openapitools.client.model.StationDocument;
import org.openapitools.client.model.StationListDocument;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StationfinderApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StationfinderApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StationfinderApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getStationById
     * @param authorization Your access token from the Authorization Service. Should start with &#x60;Bearer&#x60;, followed by a space, followed by the token. (required)
     * @param stationId The numeric ID of a station (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A document describing the station with the given ID </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 400 </td><td> A bad request; generally, one or more parameters passed in were incorrect or missing </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 401 </td><td> The client is not authorized to complete this request. Check to ensure a valid access token was passed in the headers. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource with the requested ID could not be found, and the server was unable to complete the request. </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 429 </td><td> The client has exceeded the number of daily calls as per their rate limit. For now, this only applies to prototype applications and untrusted clients. Trusted clients will never be rate-limited, nor will any production apps. </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 500 </td><td> A server error </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 503 </td><td> The system is undergoing maintenance and we are unable to fulfill this request. Look for a &#x60;Retry-After&#x60; header to see the predicted time the system will be back up. </td><td>  * Retry-After - The predicted time the system will be back up <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getStationByIdCall(String authorization, Long stationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/stations/{stationId}"
            .replace("{" + "stationId" + "}", localVarApiClient.escapeString(stationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.collection.doc+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStationByIdValidateBeforeCall(String authorization, Long stationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getStationById(Async)");
        }

        // verify the required parameter 'stationId' is set
        if (stationId == null) {
            throw new ApiException("Missing the required parameter 'stationId' when calling getStationById(Async)");
        }

        return getStationByIdCall(authorization, stationId, _callback);

    }

    /**
     * Retrieve metadata for the station with the given numeric ID
     * This endpoint retrieves information about a given station, based on its numeric ID, which is consistent across all of NPR&#39;s APIs.  A typical use case for this data is for clients who want to create a dropdown menu, modal/pop-up or dedicated page displaying more information about the station the client is localized to, including, for example, links to the station&#39;s homepage and donation (pledge) page.
     * @param authorization Your access token from the Authorization Service. Should start with &#x60;Bearer&#x60;, followed by a space, followed by the token. (required)
     * @param stationId The numeric ID of a station (required)
     * @return StationDocument
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A document describing the station with the given ID </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 400 </td><td> A bad request; generally, one or more parameters passed in were incorrect or missing </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 401 </td><td> The client is not authorized to complete this request. Check to ensure a valid access token was passed in the headers. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource with the requested ID could not be found, and the server was unable to complete the request. </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 429 </td><td> The client has exceeded the number of daily calls as per their rate limit. For now, this only applies to prototype applications and untrusted clients. Trusted clients will never be rate-limited, nor will any production apps. </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 500 </td><td> A server error </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 503 </td><td> The system is undergoing maintenance and we are unable to fulfill this request. Look for a &#x60;Retry-After&#x60; header to see the predicted time the system will be back up. </td><td>  * Retry-After - The predicted time the system will be back up <br>  </td></tr>
     </table>
     */
    public StationDocument getStationById(String authorization, Long stationId) throws ApiException {
        ApiResponse<StationDocument> localVarResp = getStationByIdWithHttpInfo(authorization, stationId);
        return localVarResp.getData();
    }

    /**
     * Retrieve metadata for the station with the given numeric ID
     * This endpoint retrieves information about a given station, based on its numeric ID, which is consistent across all of NPR&#39;s APIs.  A typical use case for this data is for clients who want to create a dropdown menu, modal/pop-up or dedicated page displaying more information about the station the client is localized to, including, for example, links to the station&#39;s homepage and donation (pledge) page.
     * @param authorization Your access token from the Authorization Service. Should start with &#x60;Bearer&#x60;, followed by a space, followed by the token. (required)
     * @param stationId The numeric ID of a station (required)
     * @return ApiResponse&lt;StationDocument&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A document describing the station with the given ID </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 400 </td><td> A bad request; generally, one or more parameters passed in were incorrect or missing </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 401 </td><td> The client is not authorized to complete this request. Check to ensure a valid access token was passed in the headers. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource with the requested ID could not be found, and the server was unable to complete the request. </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 429 </td><td> The client has exceeded the number of daily calls as per their rate limit. For now, this only applies to prototype applications and untrusted clients. Trusted clients will never be rate-limited, nor will any production apps. </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 500 </td><td> A server error </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 503 </td><td> The system is undergoing maintenance and we are unable to fulfill this request. Look for a &#x60;Retry-After&#x60; header to see the predicted time the system will be back up. </td><td>  * Retry-After - The predicted time the system will be back up <br>  </td></tr>
     </table>
     */
    public ApiResponse<StationDocument> getStationByIdWithHttpInfo(String authorization, Long stationId) throws ApiException {
        okhttp3.Call localVarCall = getStationByIdValidateBeforeCall(authorization, stationId, null);
        Type localVarReturnType = new TypeToken<StationDocument>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve metadata for the station with the given numeric ID (asynchronously)
     * This endpoint retrieves information about a given station, based on its numeric ID, which is consistent across all of NPR&#39;s APIs.  A typical use case for this data is for clients who want to create a dropdown menu, modal/pop-up or dedicated page displaying more information about the station the client is localized to, including, for example, links to the station&#39;s homepage and donation (pledge) page.
     * @param authorization Your access token from the Authorization Service. Should start with &#x60;Bearer&#x60;, followed by a space, followed by the token. (required)
     * @param stationId The numeric ID of a station (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A document describing the station with the given ID </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 400 </td><td> A bad request; generally, one or more parameters passed in were incorrect or missing </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 401 </td><td> The client is not authorized to complete this request. Check to ensure a valid access token was passed in the headers. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource with the requested ID could not be found, and the server was unable to complete the request. </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 429 </td><td> The client has exceeded the number of daily calls as per their rate limit. For now, this only applies to prototype applications and untrusted clients. Trusted clients will never be rate-limited, nor will any production apps. </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 500 </td><td> A server error </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 503 </td><td> The system is undergoing maintenance and we are unable to fulfill this request. Look for a &#x60;Retry-After&#x60; header to see the predicted time the system will be back up. </td><td>  * Retry-After - The predicted time the system will be back up <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getStationByIdAsync(String authorization, Long stationId, final ApiCallback<StationDocument> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStationByIdValidateBeforeCall(authorization, stationId, _callback);
        Type localVarReturnType = new TypeToken<StationDocument>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchStations
     * @param authorization Your access token from the Authorization Service. Should start with &#x60;Bearer&#x60;, followed by a space, followed by the token. (required)
     * @param q Search terms to search on; can be a station name, network name, call letters, or zipcode (optional)
     * @param city A city to look for stations from; intended to be paired with &#x60;state&#x60; (optional)
     * @param state A state to look for stations from (using the 2-letter abbreviation); intended to be paired with &#x60;city&#x60; (optional)
     * @param lat A latitude value from a geographic coordinate system; only works if paired with &#x60;lon&#x60; (optional)
     * @param lon A longitude value from a geographic coordinate system; only works if paired with &#x60;lat&#x60; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of one or more stations matching the search query </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 400 </td><td> A bad request; generally, one or more parameters passed in were incorrect or missing </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 401 </td><td> The client is not authorized to complete this request. Check to ensure a valid access token was passed in the headers. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The client has exceeded the number of daily calls as per their rate limit. For now, this only applies to prototype applications and untrusted clients. Trusted clients will never be rate-limited, nor will any production apps. </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 500 </td><td> A server error </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 503 </td><td> The system is undergoing maintenance and we are unable to fulfill this request. Look for a &#x60;Retry-After&#x60; header to see the predicted time the system will be back up. </td><td>  * Retry-After - The predicted time the system will be back up <br>  </td></tr>
     </table>
     */
    public okhttp3.Call searchStationsCall(String authorization, String q, String city, String state, Float lat, Float lon, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/stations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (city != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("city", city));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lat", lat));
        }

        if (lon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lon", lon));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.collection.doc+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchStationsValidateBeforeCall(String authorization, String q, String city, String state, Float lat, Float lon, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling searchStations(Async)");
        }

        return searchStationsCall(authorization, q, city, state, lat, lon, _callback);

    }

    /**
     * List stations close to you or filter by search criteria
     * This endpoint has two main use cases:  - If no query parameters passed in, it returns a list of stations that are geographically closest to the calling client (based on GeoIP information) - If one or more query parameters are passed in, it performs a search of NPR stations that match those search criteria (not taking into account the client&#39;s physical location)  Clients wanting to implement a &#39;Change Station&#39; UI should use this endpoint to power their search. In most cases, you&#39;ll want to build a search interface that uses one of the 3 provided schemas: &#x60;lat&#x60; and &#x60;lon&#x60; (using e.g. the HTML5 Geolocation API), &#x60;city&#x60; and &#x60;state&#x60;, _or_ the generic &#x60;q&#x60; query which can accept a station name, call letters, network name, or zip code. Technically speaking, &#x60;q&#x60; can also take in either a city name or a state name, but using the &#x60;city&#x60; and &#x60;state&#x60; parameters together will yield more accurate geographic search results than &#x60;q&#x3D;{cityName}&#x60;.  The &#x60;lat&#x60; and &#x60;lon&#x60; query parameters should always be passed in together (otherwise the API will return a 400 error), and if included in the query, they will take precedence over any other search criteria; that is, &#x60;lat&#x60; and &#x60;lon&#x60; will do a purely geographic search and not take into account &#x60;q&#x60;, &#x60;city&#x60; or &#x60;state&#x60;.  Similarly, &#x60;city&#x60; and/or &#x60;state&#x60; will take precedence over (and ignore) &#x60;q&#x60;.  If clients want to be able to offer multiple types of searches (e.g. &#39;Search for a station name, city or zipcode&#39;) using a *single* search input form, &#x60;q&#x60; should be used. But again, be aware that using &#x60;city&#x60; and &#x60;state&#x60; together will yield more accurate search results than &#x60;q&#x3D;{cityName}&#x60;.
     * @param authorization Your access token from the Authorization Service. Should start with &#x60;Bearer&#x60;, followed by a space, followed by the token. (required)
     * @param q Search terms to search on; can be a station name, network name, call letters, or zipcode (optional)
     * @param city A city to look for stations from; intended to be paired with &#x60;state&#x60; (optional)
     * @param state A state to look for stations from (using the 2-letter abbreviation); intended to be paired with &#x60;city&#x60; (optional)
     * @param lat A latitude value from a geographic coordinate system; only works if paired with &#x60;lon&#x60; (optional)
     * @param lon A longitude value from a geographic coordinate system; only works if paired with &#x60;lat&#x60; (optional)
     * @return StationListDocument
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of one or more stations matching the search query </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 400 </td><td> A bad request; generally, one or more parameters passed in were incorrect or missing </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 401 </td><td> The client is not authorized to complete this request. Check to ensure a valid access token was passed in the headers. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The client has exceeded the number of daily calls as per their rate limit. For now, this only applies to prototype applications and untrusted clients. Trusted clients will never be rate-limited, nor will any production apps. </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 500 </td><td> A server error </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 503 </td><td> The system is undergoing maintenance and we are unable to fulfill this request. Look for a &#x60;Retry-After&#x60; header to see the predicted time the system will be back up. </td><td>  * Retry-After - The predicted time the system will be back up <br>  </td></tr>
     </table>
     */
    public StationListDocument searchStations(String authorization, String q, String city, String state, Float lat, Float lon) throws ApiException {
        ApiResponse<StationListDocument> localVarResp = searchStationsWithHttpInfo(authorization, q, city, state, lat, lon);
        return localVarResp.getData();
    }

    /**
     * List stations close to you or filter by search criteria
     * This endpoint has two main use cases:  - If no query parameters passed in, it returns a list of stations that are geographically closest to the calling client (based on GeoIP information) - If one or more query parameters are passed in, it performs a search of NPR stations that match those search criteria (not taking into account the client&#39;s physical location)  Clients wanting to implement a &#39;Change Station&#39; UI should use this endpoint to power their search. In most cases, you&#39;ll want to build a search interface that uses one of the 3 provided schemas: &#x60;lat&#x60; and &#x60;lon&#x60; (using e.g. the HTML5 Geolocation API), &#x60;city&#x60; and &#x60;state&#x60;, _or_ the generic &#x60;q&#x60; query which can accept a station name, call letters, network name, or zip code. Technically speaking, &#x60;q&#x60; can also take in either a city name or a state name, but using the &#x60;city&#x60; and &#x60;state&#x60; parameters together will yield more accurate geographic search results than &#x60;q&#x3D;{cityName}&#x60;.  The &#x60;lat&#x60; and &#x60;lon&#x60; query parameters should always be passed in together (otherwise the API will return a 400 error), and if included in the query, they will take precedence over any other search criteria; that is, &#x60;lat&#x60; and &#x60;lon&#x60; will do a purely geographic search and not take into account &#x60;q&#x60;, &#x60;city&#x60; or &#x60;state&#x60;.  Similarly, &#x60;city&#x60; and/or &#x60;state&#x60; will take precedence over (and ignore) &#x60;q&#x60;.  If clients want to be able to offer multiple types of searches (e.g. &#39;Search for a station name, city or zipcode&#39;) using a *single* search input form, &#x60;q&#x60; should be used. But again, be aware that using &#x60;city&#x60; and &#x60;state&#x60; together will yield more accurate search results than &#x60;q&#x3D;{cityName}&#x60;.
     * @param authorization Your access token from the Authorization Service. Should start with &#x60;Bearer&#x60;, followed by a space, followed by the token. (required)
     * @param q Search terms to search on; can be a station name, network name, call letters, or zipcode (optional)
     * @param city A city to look for stations from; intended to be paired with &#x60;state&#x60; (optional)
     * @param state A state to look for stations from (using the 2-letter abbreviation); intended to be paired with &#x60;city&#x60; (optional)
     * @param lat A latitude value from a geographic coordinate system; only works if paired with &#x60;lon&#x60; (optional)
     * @param lon A longitude value from a geographic coordinate system; only works if paired with &#x60;lat&#x60; (optional)
     * @return ApiResponse&lt;StationListDocument&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of one or more stations matching the search query </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 400 </td><td> A bad request; generally, one or more parameters passed in were incorrect or missing </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 401 </td><td> The client is not authorized to complete this request. Check to ensure a valid access token was passed in the headers. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The client has exceeded the number of daily calls as per their rate limit. For now, this only applies to prototype applications and untrusted clients. Trusted clients will never be rate-limited, nor will any production apps. </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 500 </td><td> A server error </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 503 </td><td> The system is undergoing maintenance and we are unable to fulfill this request. Look for a &#x60;Retry-After&#x60; header to see the predicted time the system will be back up. </td><td>  * Retry-After - The predicted time the system will be back up <br>  </td></tr>
     </table>
     */
    public ApiResponse<StationListDocument> searchStationsWithHttpInfo(String authorization, String q, String city, String state, Float lat, Float lon) throws ApiException {
        okhttp3.Call localVarCall = searchStationsValidateBeforeCall(authorization, q, city, state, lat, lon, null);
        Type localVarReturnType = new TypeToken<StationListDocument>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List stations close to you or filter by search criteria (asynchronously)
     * This endpoint has two main use cases:  - If no query parameters passed in, it returns a list of stations that are geographically closest to the calling client (based on GeoIP information) - If one or more query parameters are passed in, it performs a search of NPR stations that match those search criteria (not taking into account the client&#39;s physical location)  Clients wanting to implement a &#39;Change Station&#39; UI should use this endpoint to power their search. In most cases, you&#39;ll want to build a search interface that uses one of the 3 provided schemas: &#x60;lat&#x60; and &#x60;lon&#x60; (using e.g. the HTML5 Geolocation API), &#x60;city&#x60; and &#x60;state&#x60;, _or_ the generic &#x60;q&#x60; query which can accept a station name, call letters, network name, or zip code. Technically speaking, &#x60;q&#x60; can also take in either a city name or a state name, but using the &#x60;city&#x60; and &#x60;state&#x60; parameters together will yield more accurate geographic search results than &#x60;q&#x3D;{cityName}&#x60;.  The &#x60;lat&#x60; and &#x60;lon&#x60; query parameters should always be passed in together (otherwise the API will return a 400 error), and if included in the query, they will take precedence over any other search criteria; that is, &#x60;lat&#x60; and &#x60;lon&#x60; will do a purely geographic search and not take into account &#x60;q&#x60;, &#x60;city&#x60; or &#x60;state&#x60;.  Similarly, &#x60;city&#x60; and/or &#x60;state&#x60; will take precedence over (and ignore) &#x60;q&#x60;.  If clients want to be able to offer multiple types of searches (e.g. &#39;Search for a station name, city or zipcode&#39;) using a *single* search input form, &#x60;q&#x60; should be used. But again, be aware that using &#x60;city&#x60; and &#x60;state&#x60; together will yield more accurate search results than &#x60;q&#x3D;{cityName}&#x60;.
     * @param authorization Your access token from the Authorization Service. Should start with &#x60;Bearer&#x60;, followed by a space, followed by the token. (required)
     * @param q Search terms to search on; can be a station name, network name, call letters, or zipcode (optional)
     * @param city A city to look for stations from; intended to be paired with &#x60;state&#x60; (optional)
     * @param state A state to look for stations from (using the 2-letter abbreviation); intended to be paired with &#x60;city&#x60; (optional)
     * @param lat A latitude value from a geographic coordinate system; only works if paired with &#x60;lon&#x60; (optional)
     * @param lon A longitude value from a geographic coordinate system; only works if paired with &#x60;lat&#x60; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of one or more stations matching the search query </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 400 </td><td> A bad request; generally, one or more parameters passed in were incorrect or missing </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 401 </td><td> The client is not authorized to complete this request. Check to ensure a valid access token was passed in the headers. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The client has exceeded the number of daily calls as per their rate limit. For now, this only applies to prototype applications and untrusted clients. Trusted clients will never be rate-limited, nor will any production apps. </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 500 </td><td> A server error </td><td>  * X-RateLimit-Remaining - The number of remaining requests in the current period <br>  * X-RateLimit-Reset - The number of seconds left in the current period <br>  * X-RateLimit-Limit - The number of allowed requests in the current period <br>  </td></tr>
        <tr><td> 503 </td><td> The system is undergoing maintenance and we are unable to fulfill this request. Look for a &#x60;Retry-After&#x60; header to see the predicted time the system will be back up. </td><td>  * Retry-After - The predicted time the system will be back up <br>  </td></tr>
     </table>
     */
    public okhttp3.Call searchStationsAsync(String authorization, String q, String city, String state, Float lat, Float lon, final ApiCallback<StationListDocument> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchStationsValidateBeforeCall(authorization, q, city, state, lat, lon, _callback);
        Type localVarReturnType = new TypeToken<StationListDocument>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
