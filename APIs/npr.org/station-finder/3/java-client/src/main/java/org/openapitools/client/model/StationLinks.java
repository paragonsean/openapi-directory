/*
 * NPR Station Finder Service
 * Allows clients to look up NPR member station information
 *
 * The version of the OpenAPI document: 3
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.StationBrandLink;
import org.openapitools.client.model.StationDonationLink;
import org.openapitools.client.model.StationPodcastsLink;
import org.openapitools.client.model.StationRelatedLink;
import org.openapitools.client.model.StationStreamsLink;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StationLinks
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:01.214324-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StationLinks {
  public static final String SERIALIZED_NAME_BRAND = "brand";
  @SerializedName(SERIALIZED_NAME_BRAND)
  private List<StationBrandLink> brand = new ArrayList<>();

  public static final String SERIALIZED_NAME_DONATION = "donation";
  @SerializedName(SERIALIZED_NAME_DONATION)
  private List<StationDonationLink> donation = new ArrayList<>();

  public static final String SERIALIZED_NAME_PODCASTS = "podcasts";
  @SerializedName(SERIALIZED_NAME_PODCASTS)
  private List<StationPodcastsLink> podcasts = new ArrayList<>();

  public static final String SERIALIZED_NAME_RELATED = "related";
  @SerializedName(SERIALIZED_NAME_RELATED)
  private List<StationRelatedLink> related = new ArrayList<>();

  public static final String SERIALIZED_NAME_STREAMS = "streams";
  @SerializedName(SERIALIZED_NAME_STREAMS)
  private List<StationStreamsLink> streams = new ArrayList<>();

  public StationLinks() {
  }

  public StationLinks brand(List<StationBrandLink> brand) {
    this.brand = brand;
    return this;
  }

  public StationLinks addBrandItem(StationBrandLink brandItem) {
    if (this.brand == null) {
      this.brand = new ArrayList<>();
    }
    this.brand.add(brandItem);
    return this;
  }

  /**
   * One or more links to a web page for the station
   * @return brand
   */
  @javax.annotation.Nonnull
  public List<StationBrandLink> getBrand() {
    return brand;
  }

  public void setBrand(List<StationBrandLink> brand) {
    this.brand = brand;
  }


  public StationLinks donation(List<StationDonationLink> donation) {
    this.donation = donation;
    return this;
  }

  public StationLinks addDonationItem(StationDonationLink donationItem) {
    if (this.donation == null) {
      this.donation = new ArrayList<>();
    }
    this.donation.add(donationItem);
    return this;
  }

  /**
   * One or more links to audio files related to this station
   * @return donation
   */
  @javax.annotation.Nullable
  public List<StationDonationLink> getDonation() {
    return donation;
  }

  public void setDonation(List<StationDonationLink> donation) {
    this.donation = donation;
  }


  public StationLinks podcasts(List<StationPodcastsLink> podcasts) {
    this.podcasts = podcasts;
    return this;
  }

  public StationLinks addPodcastsItem(StationPodcastsLink podcastsItem) {
    if (this.podcasts == null) {
      this.podcasts = new ArrayList<>();
    }
    this.podcasts.add(podcastsItem);
    return this;
  }

  /**
   * One or more links to podcasts related to this station
   * @return podcasts
   */
  @javax.annotation.Nullable
  public List<StationPodcastsLink> getPodcasts() {
    return podcasts;
  }

  public void setPodcasts(List<StationPodcastsLink> podcasts) {
    this.podcasts = podcasts;
  }


  public StationLinks related(List<StationRelatedLink> related) {
    this.related = related;
    return this;
  }

  public StationLinks addRelatedItem(StationRelatedLink relatedItem) {
    if (this.related == null) {
      this.related = new ArrayList<>();
    }
    this.related.add(relatedItem);
    return this;
  }

  /**
   * One or more links to miscellaneous related content for the station; these typically are not present, and clients should generally not need to use any of these
   * @return related
   */
  @javax.annotation.Nullable
  public List<StationRelatedLink> getRelated() {
    return related;
  }

  public void setRelated(List<StationRelatedLink> related) {
    this.related = related;
  }


  public StationLinks streams(List<StationStreamsLink> streams) {
    this.streams = streams;
    return this;
  }

  public StationLinks addStreamsItem(StationStreamsLink streamsItem) {
    if (this.streams == null) {
      this.streams = new ArrayList<>();
    }
    this.streams.add(streamsItem);
    return this;
  }

  /**
   * One or more links to audio streams related to the station
   * @return streams
   */
  @javax.annotation.Nullable
  public List<StationStreamsLink> getStreams() {
    return streams;
  }

  public void setStreams(List<StationStreamsLink> streams) {
    this.streams = streams;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StationLinks stationLinks = (StationLinks) o;
    return Objects.equals(this.brand, stationLinks.brand) &&
        Objects.equals(this.donation, stationLinks.donation) &&
        Objects.equals(this.podcasts, stationLinks.podcasts) &&
        Objects.equals(this.related, stationLinks.related) &&
        Objects.equals(this.streams, stationLinks.streams);
  }

  @Override
  public int hashCode() {
    return Objects.hash(brand, donation, podcasts, related, streams);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StationLinks {\n");
    sb.append("    brand: ").append(toIndentedString(brand)).append("\n");
    sb.append("    donation: ").append(toIndentedString(donation)).append("\n");
    sb.append("    podcasts: ").append(toIndentedString(podcasts)).append("\n");
    sb.append("    related: ").append(toIndentedString(related)).append("\n");
    sb.append("    streams: ").append(toIndentedString(streams)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("brand");
    openapiFields.add("donation");
    openapiFields.add("podcasts");
    openapiFields.add("related");
    openapiFields.add("streams");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("brand");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StationLinks
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StationLinks.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StationLinks is not found in the empty JSON string", StationLinks.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StationLinks.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StationLinks` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StationLinks.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("brand").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `brand` to be an array in the JSON string but got `%s`", jsonObj.get("brand").toString()));
      }

      JsonArray jsonArraybrand = jsonObj.getAsJsonArray("brand");
      // validate the required field `brand` (array)
      for (int i = 0; i < jsonArraybrand.size(); i++) {
        StationBrandLink.validateJsonElement(jsonArraybrand.get(i));
      };
      if (jsonObj.get("donation") != null && !jsonObj.get("donation").isJsonNull()) {
        JsonArray jsonArraydonation = jsonObj.getAsJsonArray("donation");
        if (jsonArraydonation != null) {
          // ensure the json data is an array
          if (!jsonObj.get("donation").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `donation` to be an array in the JSON string but got `%s`", jsonObj.get("donation").toString()));
          }

          // validate the optional field `donation` (array)
          for (int i = 0; i < jsonArraydonation.size(); i++) {
            StationDonationLink.validateJsonElement(jsonArraydonation.get(i));
          };
        }
      }
      if (jsonObj.get("podcasts") != null && !jsonObj.get("podcasts").isJsonNull()) {
        JsonArray jsonArraypodcasts = jsonObj.getAsJsonArray("podcasts");
        if (jsonArraypodcasts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("podcasts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `podcasts` to be an array in the JSON string but got `%s`", jsonObj.get("podcasts").toString()));
          }

          // validate the optional field `podcasts` (array)
          for (int i = 0; i < jsonArraypodcasts.size(); i++) {
            StationPodcastsLink.validateJsonElement(jsonArraypodcasts.get(i));
          };
        }
      }
      if (jsonObj.get("related") != null && !jsonObj.get("related").isJsonNull()) {
        JsonArray jsonArrayrelated = jsonObj.getAsJsonArray("related");
        if (jsonArrayrelated != null) {
          // ensure the json data is an array
          if (!jsonObj.get("related").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `related` to be an array in the JSON string but got `%s`", jsonObj.get("related").toString()));
          }

          // validate the optional field `related` (array)
          for (int i = 0; i < jsonArrayrelated.size(); i++) {
            StationRelatedLink.validateJsonElement(jsonArrayrelated.get(i));
          };
        }
      }
      if (jsonObj.get("streams") != null && !jsonObj.get("streams").isJsonNull()) {
        JsonArray jsonArraystreams = jsonObj.getAsJsonArray("streams");
        if (jsonArraystreams != null) {
          // ensure the json data is an array
          if (!jsonObj.get("streams").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `streams` to be an array in the JSON string but got `%s`", jsonObj.get("streams").toString()));
          }

          // validate the optional field `streams` (array)
          for (int i = 0; i < jsonArraystreams.size(); i++) {
            StationStreamsLink.validateJsonElement(jsonArraystreams.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StationLinks.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StationLinks' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StationLinks> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StationLinks.class));

       return (TypeAdapter<T>) new TypeAdapter<StationLinks>() {
           @Override
           public void write(JsonWriter out, StationLinks value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StationLinks read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StationLinks given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StationLinks
   * @throws IOException if the JSON string is invalid with respect to StationLinks
   */
  public static StationLinks fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StationLinks.class);
  }

  /**
   * Convert an instance of StationLinks to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

