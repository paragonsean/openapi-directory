/*
 * NPR Station Finder Service
 * Allows clients to look up NPR member station information
 *
 * The version of the OpenAPI document: 3
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A link to a web page, logo, or audio file related to the branding of the station
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:01.214324-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StationBrandLink {
  public static final String SERIALIZED_NAME_HREF = "href";
  @SerializedName(SERIALIZED_NAME_HREF)
  private URI href;

  public static final String SERIALIZED_NAME_CONTENT_TYPE = "content-type";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
  private String contentType;

  /**
   * A short string identifier describing the way the way the link relates to the document
   */
  @JsonAdapter(RelEnum.Adapter.class)
  public enum RelEnum {
    HOMEPAGE("homepage"),
    
    LOGO("logo"),
    
    SMALL_LOGO("small-logo"),
    
    HELLO_ID_AUDIO("hello-id-audio"),
    
    STATION_MESSAGE_AUDIO("station-message-audio"),
    
    TWITTER("twitter"),
    
    FACEBOOK("facebook");

    private String value;

    RelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RelEnum fromValue(String value) {
      for (RelEnum b : RelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REL = "rel";
  @SerializedName(SERIALIZED_NAME_REL)
  private RelEnum rel = RelEnum.HOMEPAGE;

  public StationBrandLink() {
  }

  public StationBrandLink href(URI href) {
    this.href = href;
    return this;
  }

  /**
   * The link to be followed
   * @return href
   */
  @javax.annotation.Nonnull
  public URI getHref() {
    return href;
  }

  public void setHref(URI href) {
    this.href = href;
  }


  public StationBrandLink contentType(String contentType) {
    this.contentType = contentType;
    return this;
  }

  /**
   * The MIME type of the response of this link
   * @return contentType
   */
  @javax.annotation.Nonnull
  public String getContentType() {
    return contentType;
  }

  public void setContentType(String contentType) {
    this.contentType = contentType;
  }


  public StationBrandLink rel(RelEnum rel) {
    this.rel = rel;
    return this;
  }

  /**
   * A short string identifier describing the way the way the link relates to the document
   * @return rel
   */
  @javax.annotation.Nonnull
  public RelEnum getRel() {
    return rel;
  }

  public void setRel(RelEnum rel) {
    this.rel = rel;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StationBrandLink stationBrandLink = (StationBrandLink) o;
    return Objects.equals(this.href, stationBrandLink.href) &&
        Objects.equals(this.contentType, stationBrandLink.contentType) &&
        Objects.equals(this.rel, stationBrandLink.rel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(href, contentType, rel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StationBrandLink {\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    rel: ").append(toIndentedString(rel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("href");
    openapiFields.add("content-type");
    openapiFields.add("rel");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("href");
    openapiRequiredFields.add("content-type");
    openapiRequiredFields.add("rel");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StationBrandLink
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StationBrandLink.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StationBrandLink is not found in the empty JSON string", StationBrandLink.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StationBrandLink.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StationBrandLink` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StationBrandLink.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("href").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `href` to be a primitive type in the JSON string but got `%s`", jsonObj.get("href").toString()));
      }
      if (!jsonObj.get("content-type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content-type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content-type").toString()));
      }
      if (!jsonObj.get("rel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rel").toString()));
      }
      // validate the required field `rel`
      RelEnum.validateJsonElement(jsonObj.get("rel"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StationBrandLink.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StationBrandLink' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StationBrandLink> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StationBrandLink.class));

       return (TypeAdapter<T>) new TypeAdapter<StationBrandLink>() {
           @Override
           public void write(JsonWriter out, StationBrandLink value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StationBrandLink read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StationBrandLink given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StationBrandLink
   * @throws IOException if the JSON string is invalid with respect to StationBrandLink
   */
  public static StationBrandLink fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StationBrandLink.class);
  }

  /**
   * Convert an instance of StationBrandLink to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

