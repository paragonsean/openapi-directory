/*
 * NPR Station Finder Service
 * Allows clients to look up NPR member station information
 *
 * The version of the OpenAPI document: 3
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A program (aggregation) that a given user has shown an affiliation with
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:01.214324-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Affiliation {
  public static final String SERIALIZED_NAME_DAYS_SINCE_LAST_LISTEN = "daysSinceLastListen";
  @SerializedName(SERIALIZED_NAME_DAYS_SINCE_LAST_LISTEN)
  private Integer daysSinceLastListen;

  public static final String SERIALIZED_NAME_FOLLOWING = "following";
  @SerializedName(SERIALIZED_NAME_FOLLOWING)
  private Boolean following = false;

  public static final String SERIALIZED_NAME_HREF = "href";
  @SerializedName(SERIALIZED_NAME_HREF)
  private String href;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NOTIF_FOLLOWING = "notif_following";
  @SerializedName(SERIALIZED_NAME_NOTIF_FOLLOWING)
  private List<String> notifFollowing = new ArrayList<>();

  public static final String SERIALIZED_NAME_NOTIF_RATED = "notif_rated";
  @SerializedName(SERIALIZED_NAME_NOTIF_RATED)
  private List<String> notifRated = new ArrayList<>();

  public static final String SERIALIZED_NAME_RATING = "rating";
  @SerializedName(SERIALIZED_NAME_RATING)
  private Float rating;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public Affiliation() {
  }

  public Affiliation daysSinceLastListen(Integer daysSinceLastListen) {
    this.daysSinceLastListen = daysSinceLastListen;
    return this;
  }

  /**
   * The number of days since a user last listened to a story from this aggregation. Absent if user never listened to the aggregation.
   * @return daysSinceLastListen
   */
  @javax.annotation.Nullable
  public Integer getDaysSinceLastListen() {
    return daysSinceLastListen;
  }

  public void setDaysSinceLastListen(Integer daysSinceLastListen) {
    this.daysSinceLastListen = daysSinceLastListen;
  }


  public Affiliation following(Boolean following) {
    this.following = following;
    return this;
  }

  /**
   * Whether or not the user is following the aggregation. When changing affiliation status, the client is expected to toggle this value and then send the entire object back.
   * @return following
   */
  @javax.annotation.Nonnull
  public Boolean getFollowing() {
    return following;
  }

  public void setFollowing(Boolean following) {
    this.following = following;
  }


  public Affiliation href(String href) {
    this.href = href;
    return this;
  }

  /**
   * A link to more details about the program from the NPR Story API
   * @return href
   */
  @javax.annotation.Nonnull
  public String getHref() {
    return href;
  }

  public void setHref(String href) {
    this.href = href;
  }


  public Affiliation id(String id) {
    this.id = id;
    return this;
  }

  /**
   * A unique identifier for the aggregation (program)
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Affiliation notifFollowing(List<String> notifFollowing) {
    this.notifFollowing = notifFollowing;
    return this;
  }

  public Affiliation addNotifFollowingItem(String notifFollowingItem) {
    if (this.notifFollowing == null) {
      this.notifFollowing = new ArrayList<>();
    }
    this.notifFollowing.add(notifFollowingItem);
    return this;
  }

  /**
   * The topic in Firebase Cloud Messaging to which the device should subscribe if it supports notifications and the user wants notifications about the podcasts they follow.
   * @return notifFollowing
   */
  @javax.annotation.Nullable
  public List<String> getNotifFollowing() {
    return notifFollowing;
  }

  public void setNotifFollowing(List<String> notifFollowing) {
    this.notifFollowing = notifFollowing;
  }


  public Affiliation notifRated(List<String> notifRated) {
    this.notifRated = notifRated;
    return this;
  }

  public Affiliation addNotifRatedItem(String notifRatedItem) {
    if (this.notifRated == null) {
      this.notifRated = new ArrayList<>();
    }
    this.notifRated.add(notifRatedItem);
    return this;
  }

  /**
   * The topic in Firebase Cloud Messaging to which the device should subscribe if it supports notifications and the user wants notifications about the podcasts they have highly rated.
   * @return notifRated
   */
  @javax.annotation.Nullable
  public List<String> getNotifRated() {
    return notifRated;
  }

  public void setNotifRated(List<String> notifRated) {
    this.notifRated = notifRated;
  }


  public Affiliation rating(Float rating) {
    this.rating = rating;
    return this;
  }

  /**
   * The user&#39;s average rating for this affiliation on a scale of 0-1. Absent if user never listened to the aggregation.
   * @return rating
   */
  @javax.annotation.Nullable
  public Float getRating() {
    return rating;
  }

  public void setRating(Float rating) {
    this.rating = rating;
  }


  public Affiliation title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The title for the aggregation (program)
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Affiliation affiliation = (Affiliation) o;
    return Objects.equals(this.daysSinceLastListen, affiliation.daysSinceLastListen) &&
        Objects.equals(this.following, affiliation.following) &&
        Objects.equals(this.href, affiliation.href) &&
        Objects.equals(this.id, affiliation.id) &&
        Objects.equals(this.notifFollowing, affiliation.notifFollowing) &&
        Objects.equals(this.notifRated, affiliation.notifRated) &&
        Objects.equals(this.rating, affiliation.rating) &&
        Objects.equals(this.title, affiliation.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(daysSinceLastListen, following, href, id, notifFollowing, notifRated, rating, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Affiliation {\n");
    sb.append("    daysSinceLastListen: ").append(toIndentedString(daysSinceLastListen)).append("\n");
    sb.append("    following: ").append(toIndentedString(following)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    notifFollowing: ").append(toIndentedString(notifFollowing)).append("\n");
    sb.append("    notifRated: ").append(toIndentedString(notifRated)).append("\n");
    sb.append("    rating: ").append(toIndentedString(rating)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("daysSinceLastListen");
    openapiFields.add("following");
    openapiFields.add("href");
    openapiFields.add("id");
    openapiFields.add("notif_following");
    openapiFields.add("notif_rated");
    openapiFields.add("rating");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("following");
    openapiRequiredFields.add("href");
    openapiRequiredFields.add("id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Affiliation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Affiliation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Affiliation is not found in the empty JSON string", Affiliation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Affiliation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Affiliation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Affiliation.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("href").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `href` to be a primitive type in the JSON string but got `%s`", jsonObj.get("href").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("notif_following") != null && !jsonObj.get("notif_following").isJsonNull() && !jsonObj.get("notif_following").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `notif_following` to be an array in the JSON string but got `%s`", jsonObj.get("notif_following").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("notif_rated") != null && !jsonObj.get("notif_rated").isJsonNull() && !jsonObj.get("notif_rated").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `notif_rated` to be an array in the JSON string but got `%s`", jsonObj.get("notif_rated").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Affiliation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Affiliation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Affiliation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Affiliation.class));

       return (TypeAdapter<T>) new TypeAdapter<Affiliation>() {
           @Override
           public void write(JsonWriter out, Affiliation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Affiliation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Affiliation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Affiliation
   * @throws IOException if the JSON string is invalid with respect to Affiliation
   */
  public static Affiliation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Affiliation.class);
  }

  /**
   * Convert an instance of Affiliation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

