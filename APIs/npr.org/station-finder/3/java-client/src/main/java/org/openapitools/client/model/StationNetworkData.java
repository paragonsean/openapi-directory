/*
 * NPR Station Finder Service
 * Allows clients to look up NPR member station information
 *
 * The version of the OpenAPI document: 3
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.StationNetworkTierOneData;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Metadata about the network, if this station is part of a network
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:01.214324-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StationNetworkData {
  public static final String SERIALIZED_NAME_CURRENT_ORG_ID = "currentOrgId";
  @SerializedName(SERIALIZED_NAME_CURRENT_ORG_ID)
  private String currentOrgId;

  public static final String SERIALIZED_NAME_TIER1 = "tier1";
  @SerializedName(SERIALIZED_NAME_TIER1)
  private StationNetworkTierOneData tier1;

  public static final String SERIALIZED_NAME_USES_INHERITANCE = "usesInheritance";
  @SerializedName(SERIALIZED_NAME_USES_INHERITANCE)
  private Boolean usesInheritance;

  public StationNetworkData() {
  }

  public StationNetworkData currentOrgId(String currentOrgId) {
    this.currentOrgId = currentOrgId;
    return this;
  }

  /**
   * The current station being viewed. Client applications should generally ignore this field.
   * @return currentOrgId
   */
  @javax.annotation.Nonnull
  public String getCurrentOrgId() {
    return currentOrgId;
  }

  public void setCurrentOrgId(String currentOrgId) {
    this.currentOrgId = currentOrgId;
  }


  public StationNetworkData tier1(StationNetworkTierOneData tier1) {
    this.tier1 = tier1;
    return this;
  }

  /**
   * Get tier1
   * @return tier1
   */
  @javax.annotation.Nullable
  public StationNetworkTierOneData getTier1() {
    return tier1;
  }

  public void setTier1(StationNetworkTierOneData tier1) {
    this.tier1 = tier1;
  }


  public StationNetworkData usesInheritance(Boolean usesInheritance) {
    this.usesInheritance = usesInheritance;
    return this;
  }

  /**
   * Whether or not the current station inherits from a parent organization, also referred to as a network
   * @return usesInheritance
   */
  @javax.annotation.Nonnull
  public Boolean getUsesInheritance() {
    return usesInheritance;
  }

  public void setUsesInheritance(Boolean usesInheritance) {
    this.usesInheritance = usesInheritance;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StationNetworkData stationNetworkData = (StationNetworkData) o;
    return Objects.equals(this.currentOrgId, stationNetworkData.currentOrgId) &&
        Objects.equals(this.tier1, stationNetworkData.tier1) &&
        Objects.equals(this.usesInheritance, stationNetworkData.usesInheritance);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currentOrgId, tier1, usesInheritance);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StationNetworkData {\n");
    sb.append("    currentOrgId: ").append(toIndentedString(currentOrgId)).append("\n");
    sb.append("    tier1: ").append(toIndentedString(tier1)).append("\n");
    sb.append("    usesInheritance: ").append(toIndentedString(usesInheritance)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currentOrgId");
    openapiFields.add("tier1");
    openapiFields.add("usesInheritance");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("currentOrgId");
    openapiRequiredFields.add("usesInheritance");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StationNetworkData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StationNetworkData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StationNetworkData is not found in the empty JSON string", StationNetworkData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StationNetworkData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StationNetworkData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StationNetworkData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("currentOrgId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currentOrgId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currentOrgId").toString()));
      }
      // validate the optional field `tier1`
      if (jsonObj.get("tier1") != null && !jsonObj.get("tier1").isJsonNull()) {
        StationNetworkTierOneData.validateJsonElement(jsonObj.get("tier1"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StationNetworkData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StationNetworkData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StationNetworkData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StationNetworkData.class));

       return (TypeAdapter<T>) new TypeAdapter<StationNetworkData>() {
           @Override
           public void write(JsonWriter out, StationNetworkData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StationNetworkData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StationNetworkData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StationNetworkData
   * @throws IOException if the JSON string is invalid with respect to StationNetworkData
   */
  public static StationNetworkData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StationNetworkData.class);
  }

  /**
   * Convert an instance of StationNetworkData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

