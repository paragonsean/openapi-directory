/**
 * NPR Station Finder Service
 * Allows clients to look up NPR member station information
 *
 * The version of the OpenAPI document: 3
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorDocument from '../model/ErrorDocument';
import StationDocument from '../model/StationDocument';
import StationListDocument from '../model/StationListDocument';

/**
* Stationfinder service.
* @module api/StationfinderApi
* @version 3
*/
export default class StationfinderApi {

    /**
    * Constructs a new StationfinderApi. 
    * @alias module:api/StationfinderApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getStationById operation.
     * @callback module:api/StationfinderApi~getStationByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StationDocument} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve metadata for the station with the given numeric ID
     * This endpoint retrieves information about a given station, based on its numeric ID, which is consistent across all of NPR's APIs.  A typical use case for this data is for clients who want to create a dropdown menu, modal/pop-up or dedicated page displaying more information about the station the client is localized to, including, for example, links to the station's homepage and donation (pledge) page.
     * @param {String} authorization Your access token from the Authorization Service. Should start with `Bearer`, followed by a space, followed by the token.
     * @param {Number} stationId The numeric ID of a station
     * @param {module:api/StationfinderApi~getStationByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StationDocument}
     */
    getStationById(authorization, stationId, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getStationById");
      }
      // verify the required parameter 'stationId' is set
      if (stationId === undefined || stationId === null) {
        throw new Error("Missing the required parameter 'stationId' when calling getStationById");
      }

      let pathParams = {
        'stationId': stationId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/vnd.collection.doc+json'];
      let returnType = StationDocument;
      return this.apiClient.callApi(
        '/v3/stations/{stationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchStations operation.
     * @callback module:api/StationfinderApi~searchStationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StationListDocument} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List stations close to you or filter by search criteria
     * This endpoint has two main use cases:  - If no query parameters passed in, it returns a list of stations that are geographically closest to the calling client (based on GeoIP information) - If one or more query parameters are passed in, it performs a search of NPR stations that match those search criteria (not taking into account the client's physical location)  Clients wanting to implement a 'Change Station' UI should use this endpoint to power their search. In most cases, you'll want to build a search interface that uses one of the 3 provided schemas: `lat` and `lon` (using e.g. the HTML5 Geolocation API), `city` and `state`, _or_ the generic `q` query which can accept a station name, call letters, network name, or zip code. Technically speaking, `q` can also take in either a city name or a state name, but using the `city` and `state` parameters together will yield more accurate geographic search results than `q={cityName}`.  The `lat` and `lon` query parameters should always be passed in together (otherwise the API will return a 400 error), and if included in the query, they will take precedence over any other search criteria; that is, `lat` and `lon` will do a purely geographic search and not take into account `q`, `city` or `state`.  Similarly, `city` and/or `state` will take precedence over (and ignore) `q`.  If clients want to be able to offer multiple types of searches (e.g. 'Search for a station name, city or zipcode') using a *single* search input form, `q` should be used. But again, be aware that using `city` and `state` together will yield more accurate search results than `q={cityName}`.
     * @param {String} authorization Your access token from the Authorization Service. Should start with `Bearer`, followed by a space, followed by the token.
     * @param {Object} opts Optional parameters
     * @param {String} [q] Search terms to search on; can be a station name, network name, call letters, or zipcode
     * @param {String} [city] A city to look for stations from; intended to be paired with `state`
     * @param {String} [state] A state to look for stations from (using the 2-letter abbreviation); intended to be paired with `city`
     * @param {Number} [lat] A latitude value from a geographic coordinate system; only works if paired with `lon`
     * @param {Number} [lon] A longitude value from a geographic coordinate system; only works if paired with `lat`
     * @param {module:api/StationfinderApi~searchStationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StationListDocument}
     */
    searchStations(authorization, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling searchStations");
      }

      let pathParams = {
      };
      let queryParams = {
        'q': opts['q'],
        'city': opts['city'],
        'state': opts['state'],
        'lat': opts['lat'],
        'lon': opts['lon']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/vnd.collection.doc+json'];
      let returnType = StationListDocument;
      return this.apiClient.callApi(
        '/v3/stations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
