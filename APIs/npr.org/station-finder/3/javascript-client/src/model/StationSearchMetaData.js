/**
 * NPR Station Finder Service
 * Allows clients to look up NPR member station information
 *
 * The version of the OpenAPI document: 3
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The StationSearchMetaData model module.
 * @module model/StationSearchMetaData
 * @version 3
 */
class StationSearchMetaData {
    /**
     * Constructs a new <code>StationSearchMetaData</code>.
     * @alias module:model/StationSearchMetaData
     */
    constructor() { 
        
        StationSearchMetaData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StationSearchMetaData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StationSearchMetaData} obj Optional instance to populate.
     * @return {module:model/StationSearchMetaData} The populated <code>StationSearchMetaData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StationSearchMetaData();

            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('countryCode')) {
                obj['countryCode'] = ApiClient.convertToType(data['countryCode'], 'String');
            }
            if (data.hasOwnProperty('lat')) {
                obj['lat'] = ApiClient.convertToType(data['lat'], 'Number');
            }
            if (data.hasOwnProperty('lon')) {
                obj['lon'] = ApiClient.convertToType(data['lon'], 'Number');
            }
            if (data.hasOwnProperty('query')) {
                obj['query'] = ApiClient.convertToType(data['query'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StationSearchMetaData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StationSearchMetaData</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['countryCode'] && !(typeof data['countryCode'] === 'string' || data['countryCode'] instanceof String)) {
            throw new Error("Expected the field `countryCode` to be a primitive type in the JSON string but got " + data['countryCode']);
        }
        // ensure the json data is a string
        if (data['query'] && !(typeof data['query'] === 'string' || data['query'] instanceof String)) {
            throw new Error("Expected the field `query` to be a primitive type in the JSON string but got " + data['query']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * The city searched for in the original request
 * @member {String} city
 */
StationSearchMetaData.prototype['city'] = undefined;

/**
 * The country where the original request originated, as determined by geolocation. The countryCode is in ISO 3166-1 numeric format
 * @member {String} countryCode
 */
StationSearchMetaData.prototype['countryCode'] = undefined;

/**
 * The latitude parameter used in the original request
 * @member {Number} lat
 */
StationSearchMetaData.prototype['lat'] = undefined;

/**
 * The longitude parameter in the original request
 * @member {Number} lon
 */
StationSearchMetaData.prototype['lon'] = undefined;

/**
 * The search terms used in the original request
 * @member {String} query
 */
StationSearchMetaData.prototype['query'] = undefined;

/**
 * The state searched for in the original request
 * @member {String} state
 */
StationSearchMetaData.prototype['state'] = undefined;






export default StationSearchMetaData;

