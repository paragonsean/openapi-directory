/**
 * NPR Station Finder Service
 * Allows clients to look up NPR member station information
 *
 * The version of the OpenAPI document: 3
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AbstractCDocLink from './AbstractCDocLink';

/**
 * The StationBrandLink model module.
 * @module model/StationBrandLink
 * @version 3
 */
class StationBrandLink {
    /**
     * Constructs a new <code>StationBrandLink</code>.
     * A link to a web page, logo, or audio file related to the branding of the station
     * @alias module:model/StationBrandLink
     * @implements module:model/AbstractCDocLink
     * @param href {String} The link to be followed
     * @param contentType {String} The MIME type of the response of this link
     * @param rel {module:model/StationBrandLink.RelEnum} A short string identifier describing the way the way the link relates to the document
     */
    constructor(href, contentType, rel) { 
        AbstractCDocLink.initialize(this, href, contentType);
        StationBrandLink.initialize(this, href, contentType, rel);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, href, contentType, rel) { 
        obj['href'] = href;
        obj['content-type'] = contentType;
        obj['rel'] = rel || 'homepage';
    }

    /**
     * Constructs a <code>StationBrandLink</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StationBrandLink} obj Optional instance to populate.
     * @return {module:model/StationBrandLink} The populated <code>StationBrandLink</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StationBrandLink();
            AbstractCDocLink.constructFromObject(data, obj);

            if (data.hasOwnProperty('href')) {
                obj['href'] = ApiClient.convertToType(data['href'], 'String');
            }
            if (data.hasOwnProperty('content-type')) {
                obj['content-type'] = ApiClient.convertToType(data['content-type'], 'String');
            }
            if (data.hasOwnProperty('rel')) {
                obj['rel'] = ApiClient.convertToType(data['rel'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StationBrandLink</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StationBrandLink</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of StationBrandLink.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['href'] && !(typeof data['href'] === 'string' || data['href'] instanceof String)) {
            throw new Error("Expected the field `href` to be a primitive type in the JSON string but got " + data['href']);
        }
        // ensure the json data is a string
        if (data['content-type'] && !(typeof data['content-type'] === 'string' || data['content-type'] instanceof String)) {
            throw new Error("Expected the field `content-type` to be a primitive type in the JSON string but got " + data['content-type']);
        }
        // ensure the json data is a string
        if (data['rel'] && !(typeof data['rel'] === 'string' || data['rel'] instanceof String)) {
            throw new Error("Expected the field `rel` to be a primitive type in the JSON string but got " + data['rel']);
        }

        return true;
    }


}

StationBrandLink.RequiredProperties = ["href", "content-type", "rel"];

/**
 * The link to be followed
 * @member {String} href
 */
StationBrandLink.prototype['href'] = undefined;

/**
 * The MIME type of the response of this link
 * @member {String} content-type
 */
StationBrandLink.prototype['content-type'] = undefined;

/**
 * A short string identifier describing the way the way the link relates to the document
 * @member {module:model/StationBrandLink.RelEnum} rel
 * @default 'homepage'
 */
StationBrandLink.prototype['rel'] = 'homepage';


// Implement AbstractCDocLink interface:
/**
 * The link to be followed
 * @member {String} href
 */
AbstractCDocLink.prototype['href'] = undefined;
/**
 * The MIME type of the response of this link
 * @member {String} content-type
 */
AbstractCDocLink.prototype['content-type'] = undefined;



/**
 * Allowed values for the <code>rel</code> property.
 * @enum {String}
 * @readonly
 */
StationBrandLink['RelEnum'] = {

    /**
     * value: "homepage"
     * @const
     */
    "homepage": "homepage",

    /**
     * value: "logo"
     * @const
     */
    "logo": "logo",

    /**
     * value: "small-logo"
     * @const
     */
    "small-logo": "small-logo",

    /**
     * value: "hello-id-audio"
     * @const
     */
    "hello-id-audio": "hello-id-audio",

    /**
     * value: "station-message-audio"
     * @const
     */
    "station-message-audio": "station-message-audio",

    /**
     * value: "twitter"
     * @const
     */
    "twitter": "twitter",

    /**
     * value: "facebook"
     * @const
     */
    "facebook": "facebook"
};



export default StationBrandLink;

