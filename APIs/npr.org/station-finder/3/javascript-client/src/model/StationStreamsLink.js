/**
 * NPR Station Finder Service
 * Allows clients to look up NPR member station information
 *
 * The version of the OpenAPI document: 3
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import StationLink from './StationLink';

/**
 * The StationStreamsLink model module.
 * @module model/StationStreamsLink
 * @version 3
 */
class StationStreamsLink {
    /**
     * Constructs a new <code>StationStreamsLink</code>.
     * A link to an audio stream related to the station
     * @alias module:model/StationStreamsLink
     * @implements module:model/StationLink
     * @param href {String} The link to be followed
     * @param typeName {String} The semantic name corresponding to the `typeId`
     * @param typeId {module:model/StationStreamsLink.TypeIdEnum} An identifier for the type of stream
     */
    constructor(href, typeName, typeId) { 
        StationLink.initialize(this, href, typeName);
        StationStreamsLink.initialize(this, href, typeName, typeId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, href, typeName, typeId) { 
        obj['href'] = href;
        obj['title'] = '';
        obj['typeName'] = typeName;
        obj['isPrimaryStream'] = true;
        obj['typeId'] = typeId || '10';
    }

    /**
     * Constructs a <code>StationStreamsLink</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StationStreamsLink} obj Optional instance to populate.
     * @return {module:model/StationStreamsLink} The populated <code>StationStreamsLink</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StationStreamsLink();
            StationLink.constructFromObject(data, obj);

            if (data.hasOwnProperty('href')) {
                obj['href'] = ApiClient.convertToType(data['href'], 'String');
            }
            if (data.hasOwnProperty('guid')) {
                obj['guid'] = ApiClient.convertToType(data['guid'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('typeName')) {
                obj['typeName'] = ApiClient.convertToType(data['typeName'], 'String');
            }
            if (data.hasOwnProperty('isPrimaryStream')) {
                obj['isPrimaryStream'] = ApiClient.convertToType(data['isPrimaryStream'], 'Boolean');
            }
            if (data.hasOwnProperty('typeId')) {
                obj['typeId'] = ApiClient.convertToType(data['typeId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StationStreamsLink</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StationStreamsLink</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of StationStreamsLink.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['href'] && !(typeof data['href'] === 'string' || data['href'] instanceof String)) {
            throw new Error("Expected the field `href` to be a primitive type in the JSON string but got " + data['href']);
        }
        // ensure the json data is a string
        if (data['guid'] && !(typeof data['guid'] === 'string' || data['guid'] instanceof String)) {
            throw new Error("Expected the field `guid` to be a primitive type in the JSON string but got " + data['guid']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['typeName'] && !(typeof data['typeName'] === 'string' || data['typeName'] instanceof String)) {
            throw new Error("Expected the field `typeName` to be a primitive type in the JSON string but got " + data['typeName']);
        }
        // ensure the json data is a string
        if (data['typeId'] && !(typeof data['typeId'] === 'string' || data['typeId'] instanceof String)) {
            throw new Error("Expected the field `typeId` to be a primitive type in the JSON string but got " + data['typeId']);
        }

        return true;
    }


}

StationStreamsLink.RequiredProperties = ["href", "typeName", "typeId"];

/**
 * The link to be followed
 * @member {String} href
 */
StationStreamsLink.prototype['href'] = undefined;

/**
 * The system's internal unique identifier for a link, not typically used by consumers
 * @member {String} guid
 */
StationStreamsLink.prototype['guid'] = undefined;

/**
 * The link text, provided by the station, for the URL
 * @member {String} title
 * @default ''
 */
StationStreamsLink.prototype['title'] = '';

/**
 * The semantic name corresponding to the `typeId`
 * @member {String} typeName
 */
StationStreamsLink.prototype['typeName'] = undefined;

/**
 * Whether or not this stream is considered the station's primary stream
 * @member {Boolean} isPrimaryStream
 * @default true
 */
StationStreamsLink.prototype['isPrimaryStream'] = true;

/**
 * An identifier for the type of stream
 * @member {module:model/StationStreamsLink.TypeIdEnum} typeId
 * @default '10'
 */
StationStreamsLink.prototype['typeId'] = '10';


// Implement StationLink interface:
/**
 * The link to be followed
 * @member {String} href
 */
StationLink.prototype['href'] = undefined;
/**
 * The system's internal unique identifier for a link, not typically used by consumers
 * @member {String} guid
 */
StationLink.prototype['guid'] = undefined;
/**
 * The link text, provided by the station, for the URL
 * @member {String} title
 * @default ''
 */
StationLink.prototype['title'] = '';
/**
 * The semantic name corresponding to the `typeId`
 * @member {String} typeName
 */
StationLink.prototype['typeName'] = undefined;



/**
 * Allowed values for the <code>typeId</code> property.
 * @enum {String}
 * @readonly
 */
StationStreamsLink['TypeIdEnum'] = {

    /**
     * value: "10"
     * @const
     */
    "10": "10",

    /**
     * value: "11"
     * @const
     */
    "11": "11",

    /**
     * value: "12"
     * @const
     */
    "12": "12",

    /**
     * value: "13"
     * @const
     */
    "13": "13"
};



export default StationStreamsLink;

