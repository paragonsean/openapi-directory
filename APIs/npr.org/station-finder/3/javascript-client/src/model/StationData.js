/**
 * NPR Station Finder Service
 * Allows clients to look up NPR member station information
 *
 * The version of the OpenAPI document: 3
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import StationBrandData from './StationBrandData';
import StationEligibilityData from './StationEligibilityData';
import StationNetworkData from './StationNetworkData';
import StationNewscastData from './StationNewscastData';

/**
 * The StationData model module.
 * @module model/StationData
 * @version 3
 */
class StationData {
    /**
     * Constructs a new <code>StationData</code>.
     * @alias module:model/StationData
     * @param brand {module:model/StationBrandData} 
     * @param eligibility {module:model/StationEligibilityData} 
     * @param guid {String} The system's internal unique identifier for a station, not typically used by other APIs or consumers
     * @param network {module:model/StationNetworkData} 
     * @param orgId {String} The system's unique ID for this station, used across NPR One Microservices and NPR's other APIs
     */
    constructor(brand, eligibility, guid, network, orgId) { 
        
        StationData.initialize(this, brand, eligibility, guid, network, orgId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, brand, eligibility, guid, network, orgId) { 
        obj['brand'] = brand;
        obj['eligibility'] = eligibility;
        obj['guid'] = guid;
        obj['network'] = network;
        obj['orgId'] = orgId;
    }

    /**
     * Constructs a <code>StationData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StationData} obj Optional instance to populate.
     * @return {module:model/StationData} The populated <code>StationData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StationData();

            if (data.hasOwnProperty('brand')) {
                obj['brand'] = StationBrandData.constructFromObject(data['brand']);
            }
            if (data.hasOwnProperty('eligibility')) {
                obj['eligibility'] = StationEligibilityData.constructFromObject(data['eligibility']);
            }
            if (data.hasOwnProperty('guid')) {
                obj['guid'] = ApiClient.convertToType(data['guid'], 'String');
            }
            if (data.hasOwnProperty('network')) {
                obj['network'] = StationNetworkData.constructFromObject(data['network']);
            }
            if (data.hasOwnProperty('newscast')) {
                obj['newscast'] = StationNewscastData.constructFromObject(data['newscast']);
            }
            if (data.hasOwnProperty('orgId')) {
                obj['orgId'] = ApiClient.convertToType(data['orgId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StationData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StationData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of StationData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `brand`
        if (data['brand']) { // data not null
          StationBrandData.validateJSON(data['brand']);
        }
        // validate the optional field `eligibility`
        if (data['eligibility']) { // data not null
          StationEligibilityData.validateJSON(data['eligibility']);
        }
        // ensure the json data is a string
        if (data['guid'] && !(typeof data['guid'] === 'string' || data['guid'] instanceof String)) {
            throw new Error("Expected the field `guid` to be a primitive type in the JSON string but got " + data['guid']);
        }
        // validate the optional field `network`
        if (data['network']) { // data not null
          StationNetworkData.validateJSON(data['network']);
        }
        // validate the optional field `newscast`
        if (data['newscast']) { // data not null
          StationNewscastData.validateJSON(data['newscast']);
        }
        // ensure the json data is a string
        if (data['orgId'] && !(typeof data['orgId'] === 'string' || data['orgId'] instanceof String)) {
            throw new Error("Expected the field `orgId` to be a primitive type in the JSON string but got " + data['orgId']);
        }

        return true;
    }


}

StationData.RequiredProperties = ["brand", "eligibility", "guid", "network", "orgId"];

/**
 * @member {module:model/StationBrandData} brand
 */
StationData.prototype['brand'] = undefined;

/**
 * @member {module:model/StationEligibilityData} eligibility
 */
StationData.prototype['eligibility'] = undefined;

/**
 * The system's internal unique identifier for a station, not typically used by other APIs or consumers
 * @member {String} guid
 */
StationData.prototype['guid'] = undefined;

/**
 * @member {module:model/StationNetworkData} network
 */
StationData.prototype['network'] = undefined;

/**
 * @member {module:model/StationNewscastData} newscast
 */
StationData.prototype['newscast'] = undefined;

/**
 * The system's unique ID for this station, used across NPR One Microservices and NPR's other APIs
 * @member {String} orgId
 */
StationData.prototype['orgId'] = undefined;






export default StationData;

