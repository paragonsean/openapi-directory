/**
 * NPR Station Finder Service
 * Allows clients to look up NPR member station information
 *
 * The version of the OpenAPI document: 3
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import StationBrandLink from './StationBrandLink';
import StationDonationLink from './StationDonationLink';
import StationPodcastsLink from './StationPodcastsLink';
import StationRelatedLink from './StationRelatedLink';
import StationStreamsLink from './StationStreamsLink';

/**
 * The StationLinks model module.
 * @module model/StationLinks
 * @version 3
 */
class StationLinks {
    /**
     * Constructs a new <code>StationLinks</code>.
     * @alias module:model/StationLinks
     * @param brand {Array.<module:model/StationBrandLink>} One or more links to a web page for the station
     */
    constructor(brand) { 
        
        StationLinks.initialize(this, brand);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, brand) { 
        obj['brand'] = brand;
    }

    /**
     * Constructs a <code>StationLinks</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StationLinks} obj Optional instance to populate.
     * @return {module:model/StationLinks} The populated <code>StationLinks</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StationLinks();

            if (data.hasOwnProperty('brand')) {
                obj['brand'] = ApiClient.convertToType(data['brand'], [StationBrandLink]);
            }
            if (data.hasOwnProperty('donation')) {
                obj['donation'] = ApiClient.convertToType(data['donation'], [StationDonationLink]);
            }
            if (data.hasOwnProperty('podcasts')) {
                obj['podcasts'] = ApiClient.convertToType(data['podcasts'], [StationPodcastsLink]);
            }
            if (data.hasOwnProperty('related')) {
                obj['related'] = ApiClient.convertToType(data['related'], [StationRelatedLink]);
            }
            if (data.hasOwnProperty('streams')) {
                obj['streams'] = ApiClient.convertToType(data['streams'], [StationStreamsLink]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StationLinks</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StationLinks</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of StationLinks.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['brand']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['brand'])) {
                throw new Error("Expected the field `brand` to be an array in the JSON data but got " + data['brand']);
            }
            // validate the optional field `brand` (array)
            for (const item of data['brand']) {
                StationBrandLink.validateJSON(item);
            };
        }
        if (data['donation']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['donation'])) {
                throw new Error("Expected the field `donation` to be an array in the JSON data but got " + data['donation']);
            }
            // validate the optional field `donation` (array)
            for (const item of data['donation']) {
                StationDonationLink.validateJSON(item);
            };
        }
        if (data['podcasts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['podcasts'])) {
                throw new Error("Expected the field `podcasts` to be an array in the JSON data but got " + data['podcasts']);
            }
            // validate the optional field `podcasts` (array)
            for (const item of data['podcasts']) {
                StationPodcastsLink.validateJSON(item);
            };
        }
        if (data['related']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['related'])) {
                throw new Error("Expected the field `related` to be an array in the JSON data but got " + data['related']);
            }
            // validate the optional field `related` (array)
            for (const item of data['related']) {
                StationRelatedLink.validateJSON(item);
            };
        }
        if (data['streams']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['streams'])) {
                throw new Error("Expected the field `streams` to be an array in the JSON data but got " + data['streams']);
            }
            // validate the optional field `streams` (array)
            for (const item of data['streams']) {
                StationStreamsLink.validateJSON(item);
            };
        }

        return true;
    }


}

StationLinks.RequiredProperties = ["brand"];

/**
 * One or more links to a web page for the station
 * @member {Array.<module:model/StationBrandLink>} brand
 */
StationLinks.prototype['brand'] = undefined;

/**
 * One or more links to audio files related to this station
 * @member {Array.<module:model/StationDonationLink>} donation
 */
StationLinks.prototype['donation'] = undefined;

/**
 * One or more links to podcasts related to this station
 * @member {Array.<module:model/StationPodcastsLink>} podcasts
 */
StationLinks.prototype['podcasts'] = undefined;

/**
 * One or more links to miscellaneous related content for the station; these typically are not present, and clients should generally not need to use any of these
 * @member {Array.<module:model/StationRelatedLink>} related
 */
StationLinks.prototype['related'] = undefined;

/**
 * One or more links to audio streams related to the station
 * @member {Array.<module:model/StationStreamsLink>} streams
 */
StationLinks.prototype['streams'] = undefined;






export default StationLinks;

