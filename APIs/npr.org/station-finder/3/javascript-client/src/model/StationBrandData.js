/**
 * NPR Station Finder Service
 * Allows clients to look up NPR member station information
 *
 * The version of the OpenAPI document: 3
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The StationBrandData model module.
 * @module model/StationBrandData
 * @version 3
 */
class StationBrandData {
    /**
     * Constructs a new <code>StationBrandData</code>.
     * An associative array of brand-related metadata for this station
     * @alias module:model/StationBrandData
     * @param marketCity {String} The city that the station is most closely associated with. This may or may not be the city the station is licensed in and it may or may not be the city that the station or the station's antenna is located in.
     * @param marketState {String} The state that the station is most closely associated with. This may or may not be the state the station is licensed in and it may or may not be the state that the station or the station's antenna is located in.
     * @param name {String} The display name for the station. In most cases, this will be the same as `call` letters combined with band. When returning networks, it will return the network name (e.g. Minnesota Public Radio).
     * @param tagline {String} A short text-logo for the station
     */
    constructor(marketCity, marketState, name, tagline) { 
        
        StationBrandData.initialize(this, marketCity, marketState, name, tagline);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, marketCity, marketState, name, tagline) { 
        obj['band'] = 'FM';
        obj['marketCity'] = marketCity;
        obj['marketState'] = marketState;
        obj['name'] = name;
        obj['tagline'] = tagline || '';
    }

    /**
     * Constructs a <code>StationBrandData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StationBrandData} obj Optional instance to populate.
     * @return {module:model/StationBrandData} The populated <code>StationBrandData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StationBrandData();

            if (data.hasOwnProperty('band')) {
                obj['band'] = ApiClient.convertToType(data['band'], 'String');
            }
            if (data.hasOwnProperty('call')) {
                obj['call'] = ApiClient.convertToType(data['call'], 'String');
            }
            if (data.hasOwnProperty('frequency')) {
                obj['frequency'] = ApiClient.convertToType(data['frequency'], 'String');
            }
            if (data.hasOwnProperty('marketCity')) {
                obj['marketCity'] = ApiClient.convertToType(data['marketCity'], 'String');
            }
            if (data.hasOwnProperty('marketState')) {
                obj['marketState'] = ApiClient.convertToType(data['marketState'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('tagline')) {
                obj['tagline'] = ApiClient.convertToType(data['tagline'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StationBrandData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StationBrandData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of StationBrandData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['band'] && !(typeof data['band'] === 'string' || data['band'] instanceof String)) {
            throw new Error("Expected the field `band` to be a primitive type in the JSON string but got " + data['band']);
        }
        // ensure the json data is a string
        if (data['call'] && !(typeof data['call'] === 'string' || data['call'] instanceof String)) {
            throw new Error("Expected the field `call` to be a primitive type in the JSON string but got " + data['call']);
        }
        // ensure the json data is a string
        if (data['frequency'] && !(typeof data['frequency'] === 'string' || data['frequency'] instanceof String)) {
            throw new Error("Expected the field `frequency` to be a primitive type in the JSON string but got " + data['frequency']);
        }
        // ensure the json data is a string
        if (data['marketCity'] && !(typeof data['marketCity'] === 'string' || data['marketCity'] instanceof String)) {
            throw new Error("Expected the field `marketCity` to be a primitive type in the JSON string but got " + data['marketCity']);
        }
        // ensure the json data is a string
        if (data['marketState'] && !(typeof data['marketState'] === 'string' || data['marketState'] instanceof String)) {
            throw new Error("Expected the field `marketState` to be a primitive type in the JSON string but got " + data['marketState']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['tagline'] && !(typeof data['tagline'] === 'string' || data['tagline'] instanceof String)) {
            throw new Error("Expected the field `tagline` to be a primitive type in the JSON string but got " + data['tagline']);
        }

        return true;
    }


}

StationBrandData.RequiredProperties = ["marketCity", "marketState", "name", "tagline"];

/**
 * The subsection of the radio spectrum -- 'AM' or 'FM' -- where this station can be heard
 * @member {module:model/StationBrandData.BandEnum} band
 * @default 'FM'
 */
StationBrandData.prototype['band'] = 'FM';

/**
 * The three-to-four-letter identifying code for this station. Please use this with caution; most stations prefer to be identified by their `name` in client applications instead of `call`.
 * @member {String} call
 */
StationBrandData.prototype['call'] = undefined;

/**
 * Where on the radio dial the station can be heard. If the `band` is AM, the frequency will be between 540 and 1600. If the `band` is FM, the frequency will be between 87.8 and 108.0.
 * @member {String} frequency
 */
StationBrandData.prototype['frequency'] = undefined;

/**
 * The city that the station is most closely associated with. This may or may not be the city the station is licensed in and it may or may not be the city that the station or the station's antenna is located in.
 * @member {String} marketCity
 */
StationBrandData.prototype['marketCity'] = undefined;

/**
 * The state that the station is most closely associated with. This may or may not be the state the station is licensed in and it may or may not be the state that the station or the station's antenna is located in.
 * @member {String} marketState
 */
StationBrandData.prototype['marketState'] = undefined;

/**
 * The display name for the station. In most cases, this will be the same as `call` letters combined with band. When returning networks, it will return the network name (e.g. Minnesota Public Radio).
 * @member {String} name
 */
StationBrandData.prototype['name'] = undefined;

/**
 * A short text-logo for the station
 * @member {String} tagline
 * @default ''
 */
StationBrandData.prototype['tagline'] = '';





/**
 * Allowed values for the <code>band</code> property.
 * @enum {String}
 * @readonly
 */
StationBrandData['BandEnum'] = {

    /**
     * value: "FM"
     * @const
     */
    "FM": "FM",

    /**
     * value: "AM"
     * @const
     */
    "AM": "AM"
};



export default StationBrandData;

