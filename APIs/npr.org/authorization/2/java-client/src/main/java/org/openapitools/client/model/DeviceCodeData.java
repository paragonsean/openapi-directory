/*
 * NPR Authorization Service
 * The interface to our OAuth2 server
 *
 * The version of the OpenAPI document: 2
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DeviceCodeData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:55.310067-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeviceCodeData {
  public static final String SERIALIZED_NAME_DEVICE_CODE = "device_code";
  @SerializedName(SERIALIZED_NAME_DEVICE_CODE)
  private String deviceCode;

  public static final String SERIALIZED_NAME_EXPIRES_IN = "expires_in";
  @SerializedName(SERIALIZED_NAME_EXPIRES_IN)
  private Integer expiresIn = 1800;

  public static final String SERIALIZED_NAME_INTERVAL = "interval";
  @SerializedName(SERIALIZED_NAME_INTERVAL)
  private Integer interval = 5;

  public static final String SERIALIZED_NAME_USER_CODE = "user_code";
  @SerializedName(SERIALIZED_NAME_USER_CODE)
  private String userCode;

  public static final String SERIALIZED_NAME_VERIFICATION_URI = "verification_uri";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_URI)
  private String verificationUri = "http://npr.org/device";

  public DeviceCodeData() {
  }

  public DeviceCodeData deviceCode(String deviceCode) {
    this.deviceCode = deviceCode;
    return this;
  }

  /**
   * 40-character code for the device to input into the /token endpoint, not for display to the user
   * @return deviceCode
   */
  @javax.annotation.Nonnull
  public String getDeviceCode() {
    return deviceCode;
  }

  public void setDeviceCode(String deviceCode) {
    this.deviceCode = deviceCode;
  }


  public DeviceCodeData expiresIn(Integer expiresIn) {
    this.expiresIn = expiresIn;
    return this;
  }

  /**
   * The number of seconds for which this set of codes will be valid, after which they will be purged
   * @return expiresIn
   */
  @javax.annotation.Nonnull
  public Integer getExpiresIn() {
    return expiresIn;
  }

  public void setExpiresIn(Integer expiresIn) {
    this.expiresIn = expiresIn;
  }


  public DeviceCodeData interval(Integer interval) {
    this.interval = interval;
    return this;
  }

  /**
   * The number of seconds the client application should maintain between requests to the /token endpoint
   * @return interval
   */
  @javax.annotation.Nonnull
  public Integer getInterval() {
    return interval;
  }

  public void setInterval(Integer interval) {
    this.interval = interval;
  }


  public DeviceCodeData userCode(String userCode) {
    this.userCode = userCode;
    return this;
  }

  /**
   * 6-character alphanumeric code for the user to enter at http://npr.org/device, to be displayed by the client application
   * @return userCode
   */
  @javax.annotation.Nonnull
  public String getUserCode() {
    return userCode;
  }

  public void setUserCode(String userCode) {
    this.userCode = userCode;
  }


  public DeviceCodeData verificationUri(String verificationUri) {
    this.verificationUri = verificationUri;
    return this;
  }

  /**
   * The URL where the user should input their code, to be displayed by the client application
   * @return verificationUri
   */
  @javax.annotation.Nonnull
  public String getVerificationUri() {
    return verificationUri;
  }

  public void setVerificationUri(String verificationUri) {
    this.verificationUri = verificationUri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceCodeData deviceCodeData = (DeviceCodeData) o;
    return Objects.equals(this.deviceCode, deviceCodeData.deviceCode) &&
        Objects.equals(this.expiresIn, deviceCodeData.expiresIn) &&
        Objects.equals(this.interval, deviceCodeData.interval) &&
        Objects.equals(this.userCode, deviceCodeData.userCode) &&
        Objects.equals(this.verificationUri, deviceCodeData.verificationUri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deviceCode, expiresIn, interval, userCode, verificationUri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceCodeData {\n");
    sb.append("    deviceCode: ").append(toIndentedString(deviceCode)).append("\n");
    sb.append("    expiresIn: ").append(toIndentedString(expiresIn)).append("\n");
    sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
    sb.append("    userCode: ").append(toIndentedString(userCode)).append("\n");
    sb.append("    verificationUri: ").append(toIndentedString(verificationUri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("device_code");
    openapiFields.add("expires_in");
    openapiFields.add("interval");
    openapiFields.add("user_code");
    openapiFields.add("verification_uri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("device_code");
    openapiRequiredFields.add("expires_in");
    openapiRequiredFields.add("interval");
    openapiRequiredFields.add("user_code");
    openapiRequiredFields.add("verification_uri");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeviceCodeData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeviceCodeData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeviceCodeData is not found in the empty JSON string", DeviceCodeData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeviceCodeData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeviceCodeData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DeviceCodeData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("device_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `device_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("device_code").toString()));
      }
      if (!jsonObj.get("user_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_code").toString()));
      }
      if (!jsonObj.get("verification_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verification_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verification_uri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeviceCodeData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeviceCodeData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeviceCodeData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeviceCodeData.class));

       return (TypeAdapter<T>) new TypeAdapter<DeviceCodeData>() {
           @Override
           public void write(JsonWriter out, DeviceCodeData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeviceCodeData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeviceCodeData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeviceCodeData
   * @throws IOException if the JSON string is invalid with respect to DeviceCodeData
   */
  public static DeviceCodeData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeviceCodeData.class);
  }

  /**
   * Convert an instance of DeviceCodeData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

