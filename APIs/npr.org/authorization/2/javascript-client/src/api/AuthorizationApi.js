/**
 * NPR Authorization Service
 * The interface to our OAuth2 server
 *
 * The version of the OpenAPI document: 2
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccessTokenData from '../model/AccessTokenData';
import DeviceCodeData from '../model/DeviceCodeData';
import SimpleError from '../model/SimpleError';

/**
* Authorization service.
* @module api/AuthorizationApi
* @version 2
*/
export default class AuthorizationApi {

    /**
    * Constructs a new AuthorizationApi. 
    * @alias module:api/AuthorizationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createToken operation.
     * @callback module:api/AuthorizationApi~createTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccessTokenData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new OAuth2 access token
     * Please be aware that the required parameters are contingent on the `grant_type` that you select.  For the `authorization_code` grant type, you are **required** to pass in the `code` and `redirect_uri` parameters. `service`, `username` and `password` parameters will be ignored.  For the `client_credentials` grant type, you do not need to pass in any additional parameters beyond the basic requirements. `code`, `redirect_uri`, `service`, `username` and `password` parameters will be ignored.  For the `device_code` grant type, you are **required** to pass in the `code` parameter. If you are a third-party developer, you are also required to provide the `scope` parameter; see the documentation for `GET /v2/authorize` for possible values. `redirect_uri`, `service`, `username` and `password` parameters will be ignored.  For the `password` grant type, you are **required** to pass in the `username` and `password` parameters. The `code` and `redirect_uri` parameters are ignored. Third-party developers do not have access to this grant type.  For the `refresh_token` grant type, you are **required** to pass in the `refresh_token` parameter. The `scope` parameter can optionally be used to request a different set of scopes than were used in the original request, but it **cannot** contain any scopes that were not previously requested. If not specified, then `scope` will be set to whichever scopes were used for the original access token request. If trading in an old non-expiring access token for a refresh-enabled token, set the value of `refresh_token` to the access token value and `token_type_hint` must be set to `access_token`. `code`, `redirect_uri`, `service`, `username` and `password` parameters will be ignored.  The `anonymous_user` grant type is a custom grant type created by NPR to suit our needs for functionality such as our &quot;try-before-you-buy&quot; experience. If you are a third-party developer, you will not have access to this grant type unless we have explicitly given you permission within our system. For this grant type, if you are a third-party developer, you are required to provide the `scope` parameter; see the documentation for `GET /v2/authorize` for possible values. `code`, `redirect_uri`, `service`, `username` and `password` parameters will be ignored.  The `third_party` grant type is another custom grant type created by NPR to handle login via third-party providers such as Facebook and Google. If you are a third-party developer, you will not have access to this grant types unless we have explicitly given you permission within our system. For this grant type, you are **required** to pass in the `service` and `token` parameters. If you are a third-party developer, you are also required to provide the `scope` parameter; see the documentation for `GET /v2/authorize` for possible values. The `code` and `redirect_uri` parameters are ignored.  If you are unsure of which grant type to select, assume that `authorization_code` is the one you want.  Note that at this time, refresh tokens are an opt-in feature; however, in the future, they will gradually transition to being opt-out, and ultimately required for all clients. Our general guidance at this time is that if this endpoint starts returning refresh tokens for you, you are responsible for implementing the code to handle them appropriately in accordance with the OAuth 2.0 spec. For more information about our gradual rollout of this feature, please contact the NPR One API team.
     * @param {module:model/String} grantType The type of grant the client is requesting
     * @param {String} clientId The client's ID, required for all grant types.
     * @param {String} clientSecret The client's secret, required for all grant types.
     * @param {Object} opts Optional parameters
     * @param {String} [code] Required for `authorization_code` and `device_code` grant types. The authorization code from a successful call to `/v2/authorize`, or a device code from a successful call to `/v2/device`.
     * @param {String} [redirectUri] Required for `authorization_code` grant type. The requested redirect_uri.
     * @param {String} [username] Required for `password` grant type. The email address of an NPR user.
     * @param {String} [password] Required for `password` grant type. The password that matches the user specified with the username parameter.
     * @param {module:model/String} [service] Required for `third_party` grant type. The name of the third-party login provider.
     * @param {String} [refreshToken] Required for `refresh_token` grant type. A valid refresh token from a previous successful call to `POST /v2/token`.
     * @param {String} [scope] Required for third-party developers using the `device_code` and `third_party` grant types. Optionally used by the `refresh_token` grant type. A space-separated list of scope(s) requested by the application.
     * @param {module:model/String} [tokenTypeHint] A hint about the type of the token submitted for a new access and refresh token. If unspecified, the default value is assumed to be `refresh_token`.
     * @param {module:api/AuthorizationApi~createTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccessTokenData}
     */
    createToken(grantType, clientId, clientSecret, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'grantType' is set
      if (grantType === undefined || grantType === null) {
        throw new Error("Missing the required parameter 'grantType' when calling createToken");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling createToken");
      }
      // verify the required parameter 'clientSecret' is set
      if (clientSecret === undefined || clientSecret === null) {
        throw new Error("Missing the required parameter 'clientSecret' when calling createToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'grant_type': grantType,
        'client_id': clientId,
        'client_secret': clientSecret,
        'code': opts['code'],
        'redirect_uri': opts['redirectUri'],
        'username': opts['username'],
        'password': opts['password'],
        'service': opts['service'],
        'refresh_token': opts['refreshToken'],
        'scope': opts['scope'],
        'token_type_hint': opts['tokenTypeHint']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = AccessTokenData;
      return this.apiClient.callApi(
        '/v2/token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the generateDeviceCode operation.
     * @callback module:api/AuthorizationApi~generateDeviceCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceCodeData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiate an OAuth2 login flow for limited input devices
     * This flow should only be used by clients who cannot show a native webview or do not have advanced input controls. It is an alternative to `GET /v2/authorize`.  Third-party clients will need to use one or the other of these two endpoints, but they will generally not use both.
     * @param {String} clientId The client's ID
     * @param {String} clientSecret The client's secret key
     * @param {Object} opts Optional parameters
     * @param {String} [scope] A space-separated list of scope(s) requested by the application. Required for all untrusted clients; will be ignored for trusted clients.
     * @param {module:api/AuthorizationApi~generateDeviceCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceCodeData}
     */
    generateDeviceCode(clientId, clientSecret, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling generateDeviceCode");
      }
      // verify the required parameter 'clientSecret' is set
      if (clientSecret === undefined || clientSecret === null) {
        throw new Error("Missing the required parameter 'clientSecret' when calling generateDeviceCode");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'client_id': clientId,
        'client_secret': clientSecret,
        'scope': opts['scope']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = DeviceCodeData;
      return this.apiClient.callApi(
        '/v2/device', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the revokeToken operation.
     * @callback module:api/AuthorizationApi~revokeTokenCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Revoke an existing OAuth2 access token
     * Our implementation follows the proposed IETF specification [RFC-7009](https://tools.ietf.org/html/rfc7009).  If your client application offers the ability to for a logged-in user to log out, and you have access to a long-lived `client_credentials` token (i.e. you have generated one that you are storing securely for the lifetime of the entire app install), we suggest (but do not require) that you call this endpoint and revoke the access token belonging to the logged-in user as part of your logout process. If you do not already have a long-lived `client_credentials` token, please don't generate one just for the purposes of calling this endpoint.  If you are building a prototype application, we also recommend that you use this endpoint to clean up access tokens that you generate during the testing of your app and do not intend to reuse.  Note that revoking an access token will automatically revoke any refresh tokens associated with it, and vice-versa.
     * @param {String} authorization A `client_credentials` access token from the same client application as the token being revoked. Should start with `Bearer`, followed by a space, followed by the token.
     * @param {String} token The access token or refresh token that the client wants to have revoked.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [tokenTypeHint] A hint about the type of the token submitted for revocation. If unspecified, the default value is assumed to be `access_token`.
     * @param {module:api/AuthorizationApi~revokeTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    revokeToken(authorization, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling revokeToken");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling revokeToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
        'token': token,
        'token_type_hint': opts['tokenTypeHint']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/token/revoke', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
