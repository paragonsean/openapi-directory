/**
 * NPR Authorization Service
 * The interface to our OAuth2 server
 *
 * The version of the OpenAPI document: 2
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SimpleError model module.
 * @module model/SimpleError
 * @version 2
 */
class SimpleError {
    /**
     * Constructs a new <code>SimpleError</code>.
     * A simple representation of an error result from an API call, rarely used; in most cases we still return a Collection.doc+JSON document for errors
     * @alias module:model/SimpleError
     * @param message {String} A message describing the error that occurred
     * @param type {String} A short string representing the type of error that occurred
     */
    constructor(message, type) { 
        
        SimpleError.initialize(this, message, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, message, type) { 
        obj['message'] = message;
        obj['type'] = type || 'error';
    }

    /**
     * Constructs a <code>SimpleError</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SimpleError} obj Optional instance to populate.
     * @return {module:model/SimpleError} The populated <code>SimpleError</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SimpleError();

            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SimpleError</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SimpleError</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SimpleError.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

SimpleError.RequiredProperties = ["message", "type"];

/**
 * A message describing the error that occurred
 * @member {String} message
 */
SimpleError.prototype['message'] = undefined;

/**
 * A short string representing the type of error that occurred
 * @member {String} type
 * @default 'error'
 */
SimpleError.prototype['type'] = 'error';






export default SimpleError;

