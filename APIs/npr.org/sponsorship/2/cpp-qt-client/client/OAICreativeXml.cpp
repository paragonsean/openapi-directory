/**
 * NPR Sponsorship Service
 * Sponsorship for non-NPR One client applications
 *
 * The version of the OpenAPI document: 2
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreativeXml.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreativeXml::OAICreativeXml(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreativeXml::OAICreativeXml() {
    this->initializeModel();
}

OAICreativeXml::~OAICreativeXml() {}

void OAICreativeXml::initializeModel() {

    m_companion_ads_isSet = false;
    m_companion_ads_isValid = false;

    m_linear_isSet = false;
    m_linear_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_sequence_isSet = false;
    m_sequence_isValid = false;
}

void OAICreativeXml::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreativeXml::fromJsonObject(QJsonObject json) {

    m_companion_ads_isValid = ::OpenAPI::fromJsonValue(m_companion_ads, json[QString("CompanionAds")]);
    m_companion_ads_isSet = !json[QString("CompanionAds")].isNull() && m_companion_ads_isValid;

    m_linear_isValid = ::OpenAPI::fromJsonValue(m_linear, json[QString("Linear")]);
    m_linear_isSet = !json[QString("Linear")].isNull() && m_linear_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_sequence_isValid = ::OpenAPI::fromJsonValue(m_sequence, json[QString("sequence")]);
    m_sequence_isSet = !json[QString("sequence")].isNull() && m_sequence_isValid;
}

QString OAICreativeXml::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreativeXml::asJsonObject() const {
    QJsonObject obj;
    if (m_companion_ads.size() > 0) {
        obj.insert(QString("CompanionAds"), ::OpenAPI::toJsonValue(m_companion_ads));
    }
    if (m_linear.isSet()) {
        obj.insert(QString("Linear"), ::OpenAPI::toJsonValue(m_linear));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_sequence_isSet) {
        obj.insert(QString("sequence"), ::OpenAPI::toJsonValue(m_sequence));
    }
    return obj;
}

QList<OAICompanionXml> OAICreativeXml::getCompanionAds() const {
    return m_companion_ads;
}
void OAICreativeXml::setCompanionAds(const QList<OAICompanionXml> &companion_ads) {
    m_companion_ads = companion_ads;
    m_companion_ads_isSet = true;
}

bool OAICreativeXml::is_companion_ads_Set() const{
    return m_companion_ads_isSet;
}

bool OAICreativeXml::is_companion_ads_Valid() const{
    return m_companion_ads_isValid;
}

OAILinearXml OAICreativeXml::getLinear() const {
    return m_linear;
}
void OAICreativeXml::setLinear(const OAILinearXml &linear) {
    m_linear = linear;
    m_linear_isSet = true;
}

bool OAICreativeXml::is_linear_Set() const{
    return m_linear_isSet;
}

bool OAICreativeXml::is_linear_Valid() const{
    return m_linear_isValid;
}

qint32 OAICreativeXml::getId() const {
    return m_id;
}
void OAICreativeXml::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICreativeXml::is_id_Set() const{
    return m_id_isSet;
}

bool OAICreativeXml::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAICreativeXml::getSequence() const {
    return m_sequence;
}
void OAICreativeXml::setSequence(const qint32 &sequence) {
    m_sequence = sequence;
    m_sequence_isSet = true;
}

bool OAICreativeXml::is_sequence_Set() const{
    return m_sequence_isSet;
}

bool OAICreativeXml::is_sequence_Valid() const{
    return m_sequence_isValid;
}

bool OAICreativeXml::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_companion_ads.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_linear.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sequence_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreativeXml::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_sequence_isValid && true;
}

} // namespace OpenAPI
