/**
 * NPR Sponsorship Service
 * Sponsorship for non-NPR One client applications
 *
 * The version of the OpenAPI document: 2
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICompanionXml.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICompanionXml::OAICompanionXml(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICompanionXml::OAICompanionXml() {
    this->initializeModel();
}

OAICompanionXml::~OAICompanionXml() {}

void OAICompanionXml::initializeModel() {

    m_companion_click_through_isSet = false;
    m_companion_click_through_isValid = false;

    m_static_resource_isSet = false;
    m_static_resource_isValid = false;

    m_tracking_events_isSet = false;
    m_tracking_events_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAICompanionXml::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICompanionXml::fromJsonObject(QJsonObject json) {

    m_companion_click_through_isValid = ::OpenAPI::fromJsonValue(m_companion_click_through, json[QString("CompanionClickThrough")]);
    m_companion_click_through_isSet = !json[QString("CompanionClickThrough")].isNull() && m_companion_click_through_isValid;

    m_static_resource_isValid = ::OpenAPI::fromJsonValue(m_static_resource, json[QString("StaticResource")]);
    m_static_resource_isSet = !json[QString("StaticResource")].isNull() && m_static_resource_isValid;

    m_tracking_events_isValid = ::OpenAPI::fromJsonValue(m_tracking_events, json[QString("TrackingEvents")]);
    m_tracking_events_isSet = !json[QString("TrackingEvents")].isNull() && m_tracking_events_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAICompanionXml::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICompanionXml::asJsonObject() const {
    QJsonObject obj;
    if (m_companion_click_through_isSet) {
        obj.insert(QString("CompanionClickThrough"), ::OpenAPI::toJsonValue(m_companion_click_through));
    }
    if (m_static_resource_isSet) {
        obj.insert(QString("StaticResource"), ::OpenAPI::toJsonValue(m_static_resource));
    }
    if (m_tracking_events.size() > 0) {
        obj.insert(QString("TrackingEvents"), ::OpenAPI::toJsonValue(m_tracking_events));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

QString OAICompanionXml::getCompanionClickThrough() const {
    return m_companion_click_through;
}
void OAICompanionXml::setCompanionClickThrough(const QString &companion_click_through) {
    m_companion_click_through = companion_click_through;
    m_companion_click_through_isSet = true;
}

bool OAICompanionXml::is_companion_click_through_Set() const{
    return m_companion_click_through_isSet;
}

bool OAICompanionXml::is_companion_click_through_Valid() const{
    return m_companion_click_through_isValid;
}

QString OAICompanionXml::getStaticResource() const {
    return m_static_resource;
}
void OAICompanionXml::setStaticResource(const QString &static_resource) {
    m_static_resource = static_resource;
    m_static_resource_isSet = true;
}

bool OAICompanionXml::is_static_resource_Set() const{
    return m_static_resource_isSet;
}

bool OAICompanionXml::is_static_resource_Valid() const{
    return m_static_resource_isValid;
}

QList<QString> OAICompanionXml::getTrackingEvents() const {
    return m_tracking_events;
}
void OAICompanionXml::setTrackingEvents(const QList<QString> &tracking_events) {
    m_tracking_events = tracking_events;
    m_tracking_events_isSet = true;
}

bool OAICompanionXml::is_tracking_events_Set() const{
    return m_tracking_events_isSet;
}

bool OAICompanionXml::is_tracking_events_Valid() const{
    return m_tracking_events_isValid;
}

qint32 OAICompanionXml::getHeight() const {
    return m_height;
}
void OAICompanionXml::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAICompanionXml::is_height_Set() const{
    return m_height_isSet;
}

bool OAICompanionXml::is_height_Valid() const{
    return m_height_isValid;
}

qint32 OAICompanionXml::getId() const {
    return m_id;
}
void OAICompanionXml::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICompanionXml::is_id_Set() const{
    return m_id_isSet;
}

bool OAICompanionXml::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAICompanionXml::getWidth() const {
    return m_width;
}
void OAICompanionXml::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAICompanionXml::is_width_Set() const{
    return m_width_isSet;
}

bool OAICompanionXml::is_width_Valid() const{
    return m_width_isValid;
}

bool OAICompanionXml::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_companion_click_through_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_static_resource_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracking_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICompanionXml::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
