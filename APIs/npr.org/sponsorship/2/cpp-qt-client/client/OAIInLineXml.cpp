/**
 * NPR Sponsorship Service
 * Sponsorship for non-NPR One client applications
 *
 * The version of the OpenAPI document: 2
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInLineXml.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInLineXml::OAIInLineXml(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInLineXml::OAIInLineXml() {
    this->initializeModel();
}

OAIInLineXml::~OAIInLineXml() {}

void OAIInLineXml::initializeModel() {

    m_ad_system_isSet = false;
    m_ad_system_isValid = false;

    m_ad_title_isSet = false;
    m_ad_title_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_creatives_isSet = false;
    m_creatives_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_extensions_isSet = false;
    m_extensions_isValid = false;

    m_impression_isSet = false;
    m_impression_isValid = false;
}

void OAIInLineXml::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInLineXml::fromJsonObject(QJsonObject json) {

    m_ad_system_isValid = ::OpenAPI::fromJsonValue(m_ad_system, json[QString("AdSystem")]);
    m_ad_system_isSet = !json[QString("AdSystem")].isNull() && m_ad_system_isValid;

    m_ad_title_isValid = ::OpenAPI::fromJsonValue(m_ad_title, json[QString("AdTitle")]);
    m_ad_title_isSet = !json[QString("AdTitle")].isNull() && m_ad_title_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("Category")]);
    m_category_isSet = !json[QString("Category")].isNull() && m_category_isValid;

    m_creatives_isValid = ::OpenAPI::fromJsonValue(m_creatives, json[QString("Creatives")]);
    m_creatives_isSet = !json[QString("Creatives")].isNull() && m_creatives_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_extensions_isValid = ::OpenAPI::fromJsonValue(m_extensions, json[QString("Extensions")]);
    m_extensions_isSet = !json[QString("Extensions")].isNull() && m_extensions_isValid;

    m_impression_isValid = ::OpenAPI::fromJsonValue(m_impression, json[QString("Impression")]);
    m_impression_isSet = !json[QString("Impression")].isNull() && m_impression_isValid;
}

QString OAIInLineXml::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInLineXml::asJsonObject() const {
    QJsonObject obj;
    if (m_ad_system_isSet) {
        obj.insert(QString("AdSystem"), ::OpenAPI::toJsonValue(m_ad_system));
    }
    if (m_ad_title_isSet) {
        obj.insert(QString("AdTitle"), ::OpenAPI::toJsonValue(m_ad_title));
    }
    if (m_category_isSet) {
        obj.insert(QString("Category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_creatives.size() > 0) {
        obj.insert(QString("Creatives"), ::OpenAPI::toJsonValue(m_creatives));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_extensions.size() > 0) {
        obj.insert(QString("Extensions"), ::OpenAPI::toJsonValue(m_extensions));
    }
    if (m_impression.size() > 0) {
        obj.insert(QString("Impression"), ::OpenAPI::toJsonValue(m_impression));
    }
    return obj;
}

QString OAIInLineXml::getAdSystem() const {
    return m_ad_system;
}
void OAIInLineXml::setAdSystem(const QString &ad_system) {
    m_ad_system = ad_system;
    m_ad_system_isSet = true;
}

bool OAIInLineXml::is_ad_system_Set() const{
    return m_ad_system_isSet;
}

bool OAIInLineXml::is_ad_system_Valid() const{
    return m_ad_system_isValid;
}

QString OAIInLineXml::getAdTitle() const {
    return m_ad_title;
}
void OAIInLineXml::setAdTitle(const QString &ad_title) {
    m_ad_title = ad_title;
    m_ad_title_isSet = true;
}

bool OAIInLineXml::is_ad_title_Set() const{
    return m_ad_title_isSet;
}

bool OAIInLineXml::is_ad_title_Valid() const{
    return m_ad_title_isValid;
}

QString OAIInLineXml::getCategory() const {
    return m_category;
}
void OAIInLineXml::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIInLineXml::is_category_Set() const{
    return m_category_isSet;
}

bool OAIInLineXml::is_category_Valid() const{
    return m_category_isValid;
}

QList<OAICreativeXml> OAIInLineXml::getCreatives() const {
    return m_creatives;
}
void OAIInLineXml::setCreatives(const QList<OAICreativeXml> &creatives) {
    m_creatives = creatives;
    m_creatives_isSet = true;
}

bool OAIInLineXml::is_creatives_Set() const{
    return m_creatives_isSet;
}

bool OAIInLineXml::is_creatives_Valid() const{
    return m_creatives_isValid;
}

QString OAIInLineXml::getDescription() const {
    return m_description;
}
void OAIInLineXml::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIInLineXml::is_description_Set() const{
    return m_description_isSet;
}

bool OAIInLineXml::is_description_Valid() const{
    return m_description_isValid;
}

QList<QString> OAIInLineXml::getExtensions() const {
    return m_extensions;
}
void OAIInLineXml::setExtensions(const QList<QString> &extensions) {
    m_extensions = extensions;
    m_extensions_isSet = true;
}

bool OAIInLineXml::is_extensions_Set() const{
    return m_extensions_isSet;
}

bool OAIInLineXml::is_extensions_Valid() const{
    return m_extensions_isValid;
}

QList<QString> OAIInLineXml::getImpression() const {
    return m_impression;
}
void OAIInLineXml::setImpression(const QList<QString> &impression) {
    m_impression = impression;
    m_impression_isSet = true;
}

bool OAIInLineXml::is_impression_Set() const{
    return m_impression_isSet;
}

bool OAIInLineXml::is_impression_Valid() const{
    return m_impression_isValid;
}

bool OAIInLineXml::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ad_system_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ad_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creatives.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extensions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_impression.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInLineXml::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
