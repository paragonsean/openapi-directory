/*
 * NPR Sponsorship Service
 * Sponsorship for non-NPR One client applications
 *
 * The version of the OpenAPI document: 2
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreativeXml;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * InLineXml
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:04.098780-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InLineXml {
  public static final String SERIALIZED_NAME_AD_SYSTEM = "AdSystem";
  @SerializedName(SERIALIZED_NAME_AD_SYSTEM)
  private String adSystem;

  public static final String SERIALIZED_NAME_AD_TITLE = "AdTitle";
  @SerializedName(SERIALIZED_NAME_AD_TITLE)
  private String adTitle;

  public static final String SERIALIZED_NAME_CATEGORY = "Category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_CREATIVES = "Creatives";
  @SerializedName(SERIALIZED_NAME_CREATIVES)
  private List<CreativeXml> creatives = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EXTENSIONS = "Extensions";
  @SerializedName(SERIALIZED_NAME_EXTENSIONS)
  private List<String> extensions = new ArrayList<>();

  public static final String SERIALIZED_NAME_IMPRESSION = "Impression";
  @SerializedName(SERIALIZED_NAME_IMPRESSION)
  private List<String> impression = new ArrayList<>();

  public InLineXml() {
  }

  public InLineXml adSystem(String adSystem) {
    this.adSystem = adSystem;
    return this;
  }

  /**
   * Get adSystem
   * @return adSystem
   */
  @javax.annotation.Nullable
  public String getAdSystem() {
    return adSystem;
  }

  public void setAdSystem(String adSystem) {
    this.adSystem = adSystem;
  }


  public InLineXml adTitle(String adTitle) {
    this.adTitle = adTitle;
    return this;
  }

  /**
   * Get adTitle
   * @return adTitle
   */
  @javax.annotation.Nullable
  public String getAdTitle() {
    return adTitle;
  }

  public void setAdTitle(String adTitle) {
    this.adTitle = adTitle;
  }


  public InLineXml category(String category) {
    this.category = category;
    return this;
  }

  /**
   * Get category
   * @return category
   */
  @javax.annotation.Nullable
  public String getCategory() {
    return category;
  }

  public void setCategory(String category) {
    this.category = category;
  }


  public InLineXml creatives(List<CreativeXml> creatives) {
    this.creatives = creatives;
    return this;
  }

  public InLineXml addCreativesItem(CreativeXml creativesItem) {
    if (this.creatives == null) {
      this.creatives = new ArrayList<>();
    }
    this.creatives.add(creativesItem);
    return this;
  }

  /**
   * Get creatives
   * @return creatives
   */
  @javax.annotation.Nullable
  public List<CreativeXml> getCreatives() {
    return creatives;
  }

  public void setCreatives(List<CreativeXml> creatives) {
    this.creatives = creatives;
  }


  public InLineXml description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public InLineXml extensions(List<String> extensions) {
    this.extensions = extensions;
    return this;
  }

  public InLineXml addExtensionsItem(String extensionsItem) {
    if (this.extensions == null) {
      this.extensions = new ArrayList<>();
    }
    this.extensions.add(extensionsItem);
    return this;
  }

  /**
   * Get extensions
   * @return extensions
   */
  @javax.annotation.Nullable
  public List<String> getExtensions() {
    return extensions;
  }

  public void setExtensions(List<String> extensions) {
    this.extensions = extensions;
  }


  public InLineXml impression(List<String> impression) {
    this.impression = impression;
    return this;
  }

  public InLineXml addImpressionItem(String impressionItem) {
    if (this.impression == null) {
      this.impression = new ArrayList<>();
    }
    this.impression.add(impressionItem);
    return this;
  }

  /**
   * Get impression
   * @return impression
   */
  @javax.annotation.Nullable
  public List<String> getImpression() {
    return impression;
  }

  public void setImpression(List<String> impression) {
    this.impression = impression;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InLineXml inLineXml = (InLineXml) o;
    return Objects.equals(this.adSystem, inLineXml.adSystem) &&
        Objects.equals(this.adTitle, inLineXml.adTitle) &&
        Objects.equals(this.category, inLineXml.category) &&
        Objects.equals(this.creatives, inLineXml.creatives) &&
        Objects.equals(this.description, inLineXml.description) &&
        Objects.equals(this.extensions, inLineXml.extensions) &&
        Objects.equals(this.impression, inLineXml.impression);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adSystem, adTitle, category, creatives, description, extensions, impression);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InLineXml {\n");
    sb.append("    adSystem: ").append(toIndentedString(adSystem)).append("\n");
    sb.append("    adTitle: ").append(toIndentedString(adTitle)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    creatives: ").append(toIndentedString(creatives)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    extensions: ").append(toIndentedString(extensions)).append("\n");
    sb.append("    impression: ").append(toIndentedString(impression)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AdSystem");
    openapiFields.add("AdTitle");
    openapiFields.add("Category");
    openapiFields.add("Creatives");
    openapiFields.add("Description");
    openapiFields.add("Extensions");
    openapiFields.add("Impression");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InLineXml
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InLineXml.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InLineXml is not found in the empty JSON string", InLineXml.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InLineXml.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InLineXml` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AdSystem") != null && !jsonObj.get("AdSystem").isJsonNull()) && !jsonObj.get("AdSystem").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AdSystem` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AdSystem").toString()));
      }
      if ((jsonObj.get("AdTitle") != null && !jsonObj.get("AdTitle").isJsonNull()) && !jsonObj.get("AdTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AdTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AdTitle").toString()));
      }
      if ((jsonObj.get("Category") != null && !jsonObj.get("Category").isJsonNull()) && !jsonObj.get("Category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Category").toString()));
      }
      if (jsonObj.get("Creatives") != null && !jsonObj.get("Creatives").isJsonNull()) {
        JsonArray jsonArraycreatives = jsonObj.getAsJsonArray("Creatives");
        if (jsonArraycreatives != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Creatives").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Creatives` to be an array in the JSON string but got `%s`", jsonObj.get("Creatives").toString()));
          }

          // validate the optional field `Creatives` (array)
          for (int i = 0; i < jsonArraycreatives.size(); i++) {
            CreativeXml.validateJsonElement(jsonArraycreatives.get(i));
          };
        }
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Extensions") != null && !jsonObj.get("Extensions").isJsonNull() && !jsonObj.get("Extensions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Extensions` to be an array in the JSON string but got `%s`", jsonObj.get("Extensions").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Impression") != null && !jsonObj.get("Impression").isJsonNull() && !jsonObj.get("Impression").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Impression` to be an array in the JSON string but got `%s`", jsonObj.get("Impression").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InLineXml.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InLineXml' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InLineXml> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InLineXml.class));

       return (TypeAdapter<T>) new TypeAdapter<InLineXml>() {
           @Override
           public void write(JsonWriter out, InLineXml value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InLineXml read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InLineXml given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InLineXml
   * @throws IOException if the JSON string is invalid with respect to InLineXml
   */
  public static InLineXml fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InLineXml.class);
  }

  /**
   * Convert an instance of InLineXml to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

