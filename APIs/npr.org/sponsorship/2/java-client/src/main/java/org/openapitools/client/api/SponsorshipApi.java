/*
 * NPR Sponsorship Service
 * Sponsorship for non-NPR One client applications
 *
 * The version of the OpenAPI document: 2
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error;
import org.openapitools.client.model.ErrorXmlDocument;
import org.openapitools.client.model.UserAdDocument;
import org.openapitools.client.model.VASTXml;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SponsorshipApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SponsorshipApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SponsorshipApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getAds
     * @param authorization Your access token from the Authorization Service. Should start with &#x60;Bearer&#x60;, followed by a space, followed by the token. (required)
     * @param xAdvertisingID A device-specific advertising identifier, if possible. Apple&#39;s IDFA is an example. (optional)
     * @param forceResult Whether to force a synchronous call to our external sponsorship provider; the default behavior is asynchronous. (optional)
     * @param adCount How many sponsorship units to request in one call; if left unspecified, the default behavior is to return only 1. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request completed successfully; a VAST XML document is returned. Note that this response will only be returned if either &#x60;force&#x3D;true&#x60; was passed in the querystring, or a call to get sponsorship was previously made, and ads now exist in the cache for this user; otherwise, the 202 response is returned. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Request accepted. Check back later for actual ads. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A bad request; generally, one or more parameters passed in were incorrect or missing </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdsCall(String authorization, String xAdvertisingID, Boolean forceResult, Integer adCount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/ads";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (forceResult != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("forceResult", forceResult));
        }

        if (adCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("adCount", adCount));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xAdvertisingID != null) {
            localVarHeaderParams.put("X-Advertising-ID", localVarApiClient.parameterToString(xAdvertisingID));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAdsValidateBeforeCall(String authorization, String xAdvertisingID, Boolean forceResult, Integer adCount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getAds(Async)");
        }

        return getAdsCall(authorization, xAdvertisingID, forceResult, adCount, _callback);

    }

    /**
     * Request VAST sponsorship units
     * **Not** for use by NPR One clients (for whom sponsorship is already integrated into the Listening Service), this endpoint is designed to be used by our other client applications to request sponsorship on behalf of a user. Sponsorship units are returned in the form of VAST XML. It is worth noting that this endpoint attempts to always return XML, even in the case of exceptions.  The default behavior of this endpoint is asynchronous; on an initial request, a call to our external sponsorship provider is placed on a queue, which is typically processed within 3 minutes. Once the sponsorship call is received and processed, the returned sponsorship units are placed in a cache on our server for the current user. Subsequent calls to this endpoint will return VAST sponsorship units from this cache until tracking information is submitted, which removes the ad from the cache and will automatically request additional ads asynchronously if there are fewer than a certain number remaining in the cache.  For development purposes, it&#39;s worth noting that there is currently no way to clear a user&#39;s cache without submitting some form of tracking.
     * @param authorization Your access token from the Authorization Service. Should start with &#x60;Bearer&#x60;, followed by a space, followed by the token. (required)
     * @param xAdvertisingID A device-specific advertising identifier, if possible. Apple&#39;s IDFA is an example. (optional)
     * @param forceResult Whether to force a synchronous call to our external sponsorship provider; the default behavior is asynchronous. (optional)
     * @param adCount How many sponsorship units to request in one call; if left unspecified, the default behavior is to return only 1. (optional)
     * @return VASTXml
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request completed successfully; a VAST XML document is returned. Note that this response will only be returned if either &#x60;force&#x3D;true&#x60; was passed in the querystring, or a call to get sponsorship was previously made, and ads now exist in the cache for this user; otherwise, the 202 response is returned. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Request accepted. Check back later for actual ads. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A bad request; generally, one or more parameters passed in were incorrect or missing </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A server error </td><td>  -  </td></tr>
     </table>
     */
    public VASTXml getAds(String authorization, String xAdvertisingID, Boolean forceResult, Integer adCount) throws ApiException {
        ApiResponse<VASTXml> localVarResp = getAdsWithHttpInfo(authorization, xAdvertisingID, forceResult, adCount);
        return localVarResp.getData();
    }

    /**
     * Request VAST sponsorship units
     * **Not** for use by NPR One clients (for whom sponsorship is already integrated into the Listening Service), this endpoint is designed to be used by our other client applications to request sponsorship on behalf of a user. Sponsorship units are returned in the form of VAST XML. It is worth noting that this endpoint attempts to always return XML, even in the case of exceptions.  The default behavior of this endpoint is asynchronous; on an initial request, a call to our external sponsorship provider is placed on a queue, which is typically processed within 3 minutes. Once the sponsorship call is received and processed, the returned sponsorship units are placed in a cache on our server for the current user. Subsequent calls to this endpoint will return VAST sponsorship units from this cache until tracking information is submitted, which removes the ad from the cache and will automatically request additional ads asynchronously if there are fewer than a certain number remaining in the cache.  For development purposes, it&#39;s worth noting that there is currently no way to clear a user&#39;s cache without submitting some form of tracking.
     * @param authorization Your access token from the Authorization Service. Should start with &#x60;Bearer&#x60;, followed by a space, followed by the token. (required)
     * @param xAdvertisingID A device-specific advertising identifier, if possible. Apple&#39;s IDFA is an example. (optional)
     * @param forceResult Whether to force a synchronous call to our external sponsorship provider; the default behavior is asynchronous. (optional)
     * @param adCount How many sponsorship units to request in one call; if left unspecified, the default behavior is to return only 1. (optional)
     * @return ApiResponse&lt;VASTXml&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request completed successfully; a VAST XML document is returned. Note that this response will only be returned if either &#x60;force&#x3D;true&#x60; was passed in the querystring, or a call to get sponsorship was previously made, and ads now exist in the cache for this user; otherwise, the 202 response is returned. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Request accepted. Check back later for actual ads. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A bad request; generally, one or more parameters passed in were incorrect or missing </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VASTXml> getAdsWithHttpInfo(String authorization, String xAdvertisingID, Boolean forceResult, Integer adCount) throws ApiException {
        okhttp3.Call localVarCall = getAdsValidateBeforeCall(authorization, xAdvertisingID, forceResult, adCount, null);
        Type localVarReturnType = new TypeToken<VASTXml>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Request VAST sponsorship units (asynchronously)
     * **Not** for use by NPR One clients (for whom sponsorship is already integrated into the Listening Service), this endpoint is designed to be used by our other client applications to request sponsorship on behalf of a user. Sponsorship units are returned in the form of VAST XML. It is worth noting that this endpoint attempts to always return XML, even in the case of exceptions.  The default behavior of this endpoint is asynchronous; on an initial request, a call to our external sponsorship provider is placed on a queue, which is typically processed within 3 minutes. Once the sponsorship call is received and processed, the returned sponsorship units are placed in a cache on our server for the current user. Subsequent calls to this endpoint will return VAST sponsorship units from this cache until tracking information is submitted, which removes the ad from the cache and will automatically request additional ads asynchronously if there are fewer than a certain number remaining in the cache.  For development purposes, it&#39;s worth noting that there is currently no way to clear a user&#39;s cache without submitting some form of tracking.
     * @param authorization Your access token from the Authorization Service. Should start with &#x60;Bearer&#x60;, followed by a space, followed by the token. (required)
     * @param xAdvertisingID A device-specific advertising identifier, if possible. Apple&#39;s IDFA is an example. (optional)
     * @param forceResult Whether to force a synchronous call to our external sponsorship provider; the default behavior is asynchronous. (optional)
     * @param adCount How many sponsorship units to request in one call; if left unspecified, the default behavior is to return only 1. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request completed successfully; a VAST XML document is returned. Note that this response will only be returned if either &#x60;force&#x3D;true&#x60; was passed in the querystring, or a call to get sponsorship was previously made, and ads now exist in the cache for this user; otherwise, the 202 response is returned. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Request accepted. Check back later for actual ads. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A bad request; generally, one or more parameters passed in were incorrect or missing </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdsAsync(String authorization, String xAdvertisingID, Boolean forceResult, Integer adCount, final ApiCallback<VASTXml> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAdsValidateBeforeCall(authorization, xAdvertisingID, forceResult, adCount, _callback);
        Type localVarReturnType = new TypeToken<VASTXml>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for receiveAdTracking
     * @param authorization Your access token from the Authorization Service. Should start with &#x60;Bearer&#x60;, followed by a space, followed by the token. (required)
     * @param body A JSON object representing sponsorship tracking data to submit to our external provider. (required)
     * @param xAdvertisingID A device-specific advertising identifier, if possible. Apple&#39;s IDFA is an example. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request completed successfully, but there is nothing that we need to return to the caller. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A bad request; generally, one or more parameters passed in were incorrect or missing </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call receiveAdTrackingCall(String authorization, UserAdDocument body, String xAdvertisingID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v2/ads";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xAdvertisingID != null) {
            localVarHeaderParams.put("X-Advertising-ID", localVarApiClient.parameterToString(xAdvertisingID));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call receiveAdTrackingValidateBeforeCall(String authorization, UserAdDocument body, String xAdvertisingID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling receiveAdTracking(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling receiveAdTracking(Async)");
        }

        return receiveAdTrackingCall(authorization, body, xAdvertisingID, _callback);

    }

    /**
     * Record tracking data for VAST sponsorship units
     * **Not** for use by NPR One clients (for whom sponsorship is already integrated into the Listening Service), this endpoint is designed to be used by our other client applications to submit tracking information for sponsorship units obtained from the &#x60;GET /sponsorship/v2/ads&#x60; endpoint.  The tracking information should be submitted in the body of the request in the form of a JSON object following the Collection.Doc+JSON specification.
     * @param authorization Your access token from the Authorization Service. Should start with &#x60;Bearer&#x60;, followed by a space, followed by the token. (required)
     * @param body A JSON object representing sponsorship tracking data to submit to our external provider. (required)
     * @param xAdvertisingID A device-specific advertising identifier, if possible. Apple&#39;s IDFA is an example. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request completed successfully, but there is nothing that we need to return to the caller. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A bad request; generally, one or more parameters passed in were incorrect or missing </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A server error </td><td>  -  </td></tr>
     </table>
     */
    public void receiveAdTracking(String authorization, UserAdDocument body, String xAdvertisingID) throws ApiException {
        receiveAdTrackingWithHttpInfo(authorization, body, xAdvertisingID);
    }

    /**
     * Record tracking data for VAST sponsorship units
     * **Not** for use by NPR One clients (for whom sponsorship is already integrated into the Listening Service), this endpoint is designed to be used by our other client applications to submit tracking information for sponsorship units obtained from the &#x60;GET /sponsorship/v2/ads&#x60; endpoint.  The tracking information should be submitted in the body of the request in the form of a JSON object following the Collection.Doc+JSON specification.
     * @param authorization Your access token from the Authorization Service. Should start with &#x60;Bearer&#x60;, followed by a space, followed by the token. (required)
     * @param body A JSON object representing sponsorship tracking data to submit to our external provider. (required)
     * @param xAdvertisingID A device-specific advertising identifier, if possible. Apple&#39;s IDFA is an example. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request completed successfully, but there is nothing that we need to return to the caller. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A bad request; generally, one or more parameters passed in were incorrect or missing </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> receiveAdTrackingWithHttpInfo(String authorization, UserAdDocument body, String xAdvertisingID) throws ApiException {
        okhttp3.Call localVarCall = receiveAdTrackingValidateBeforeCall(authorization, body, xAdvertisingID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Record tracking data for VAST sponsorship units (asynchronously)
     * **Not** for use by NPR One clients (for whom sponsorship is already integrated into the Listening Service), this endpoint is designed to be used by our other client applications to submit tracking information for sponsorship units obtained from the &#x60;GET /sponsorship/v2/ads&#x60; endpoint.  The tracking information should be submitted in the body of the request in the form of a JSON object following the Collection.Doc+JSON specification.
     * @param authorization Your access token from the Authorization Service. Should start with &#x60;Bearer&#x60;, followed by a space, followed by the token. (required)
     * @param body A JSON object representing sponsorship tracking data to submit to our external provider. (required)
     * @param xAdvertisingID A device-specific advertising identifier, if possible. Apple&#39;s IDFA is an example. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request completed successfully, but there is nothing that we need to return to the caller. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A bad request; generally, one or more parameters passed in were incorrect or missing </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call receiveAdTrackingAsync(String authorization, UserAdDocument body, String xAdvertisingID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = receiveAdTrackingValidateBeforeCall(authorization, body, xAdvertisingID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
