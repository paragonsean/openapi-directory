/*
 * NPR Sponsorship Service
 * Sponsorship for non-NPR One client applications
 *
 * The version of the OpenAPI document: 2
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CompanionXml;
import org.openapitools.client.model.LinearXml;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreativeXml
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:04.098780-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreativeXml {
  public static final String SERIALIZED_NAME_COMPANION_ADS = "CompanionAds";
  @SerializedName(SERIALIZED_NAME_COMPANION_ADS)
  private List<CompanionXml> companionAds = new ArrayList<>();

  public static final String SERIALIZED_NAME_LINEAR = "Linear";
  @SerializedName(SERIALIZED_NAME_LINEAR)
  private LinearXml linear;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_SEQUENCE = "sequence";
  @SerializedName(SERIALIZED_NAME_SEQUENCE)
  private Integer sequence = 1;

  public CreativeXml() {
  }

  public CreativeXml companionAds(List<CompanionXml> companionAds) {
    this.companionAds = companionAds;
    return this;
  }

  public CreativeXml addCompanionAdsItem(CompanionXml companionAdsItem) {
    if (this.companionAds == null) {
      this.companionAds = new ArrayList<>();
    }
    this.companionAds.add(companionAdsItem);
    return this;
  }

  /**
   * Get companionAds
   * @return companionAds
   */
  @javax.annotation.Nullable
  public List<CompanionXml> getCompanionAds() {
    return companionAds;
  }

  public void setCompanionAds(List<CompanionXml> companionAds) {
    this.companionAds = companionAds;
  }


  public CreativeXml linear(LinearXml linear) {
    this.linear = linear;
    return this;
  }

  /**
   * Get linear
   * @return linear
   */
  @javax.annotation.Nullable
  public LinearXml getLinear() {
    return linear;
  }

  public void setLinear(LinearXml linear) {
    this.linear = linear;
  }


  public CreativeXml id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public CreativeXml sequence(Integer sequence) {
    this.sequence = sequence;
    return this;
  }

  /**
   * Get sequence
   * @return sequence
   */
  @javax.annotation.Nonnull
  public Integer getSequence() {
    return sequence;
  }

  public void setSequence(Integer sequence) {
    this.sequence = sequence;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreativeXml creativeXml = (CreativeXml) o;
    return Objects.equals(this.companionAds, creativeXml.companionAds) &&
        Objects.equals(this.linear, creativeXml.linear) &&
        Objects.equals(this.id, creativeXml.id) &&
        Objects.equals(this.sequence, creativeXml.sequence);
  }

  @Override
  public int hashCode() {
    return Objects.hash(companionAds, linear, id, sequence);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreativeXml {\n");
    sb.append("    companionAds: ").append(toIndentedString(companionAds)).append("\n");
    sb.append("    linear: ").append(toIndentedString(linear)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    sequence: ").append(toIndentedString(sequence)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CompanionAds");
    openapiFields.add("Linear");
    openapiFields.add("id");
    openapiFields.add("sequence");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("sequence");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreativeXml
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreativeXml.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreativeXml is not found in the empty JSON string", CreativeXml.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreativeXml.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreativeXml` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreativeXml.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("CompanionAds") != null && !jsonObj.get("CompanionAds").isJsonNull()) {
        JsonArray jsonArraycompanionAds = jsonObj.getAsJsonArray("CompanionAds");
        if (jsonArraycompanionAds != null) {
          // ensure the json data is an array
          if (!jsonObj.get("CompanionAds").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `CompanionAds` to be an array in the JSON string but got `%s`", jsonObj.get("CompanionAds").toString()));
          }

          // validate the optional field `CompanionAds` (array)
          for (int i = 0; i < jsonArraycompanionAds.size(); i++) {
            CompanionXml.validateJsonElement(jsonArraycompanionAds.get(i));
          };
        }
      }
      // validate the optional field `Linear`
      if (jsonObj.get("Linear") != null && !jsonObj.get("Linear").isJsonNull()) {
        LinearXml.validateJsonElement(jsonObj.get("Linear"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreativeXml.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreativeXml' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreativeXml> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreativeXml.class));

       return (TypeAdapter<T>) new TypeAdapter<CreativeXml>() {
           @Override
           public void write(JsonWriter out, CreativeXml value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreativeXml read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreativeXml given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreativeXml
   * @throws IOException if the JSON string is invalid with respect to CreativeXml
   */
  public static CreativeXml fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreativeXml.class);
  }

  /**
   * Convert an instance of CreativeXml to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

