/*
 * NPR Sponsorship Service
 * Sponsorship for non-NPR One client applications
 *
 * The version of the OpenAPI document: 2
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CompanionXml
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:04.098780-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CompanionXml {
  public static final String SERIALIZED_NAME_COMPANION_CLICK_THROUGH = "CompanionClickThrough";
  @SerializedName(SERIALIZED_NAME_COMPANION_CLICK_THROUGH)
  private String companionClickThrough;

  public static final String SERIALIZED_NAME_STATIC_RESOURCE = "StaticResource";
  @SerializedName(SERIALIZED_NAME_STATIC_RESOURCE)
  private String staticResource;

  public static final String SERIALIZED_NAME_TRACKING_EVENTS = "TrackingEvents";
  @SerializedName(SERIALIZED_NAME_TRACKING_EVENTS)
  private List<String> trackingEvents = new ArrayList<>();

  public static final String SERIALIZED_NAME_HEIGHT = "height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private Integer height;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_WIDTH = "width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private Integer width;

  public CompanionXml() {
  }

  public CompanionXml companionClickThrough(String companionClickThrough) {
    this.companionClickThrough = companionClickThrough;
    return this;
  }

  /**
   * Get companionClickThrough
   * @return companionClickThrough
   */
  @javax.annotation.Nullable
  public String getCompanionClickThrough() {
    return companionClickThrough;
  }

  public void setCompanionClickThrough(String companionClickThrough) {
    this.companionClickThrough = companionClickThrough;
  }


  public CompanionXml staticResource(String staticResource) {
    this.staticResource = staticResource;
    return this;
  }

  /**
   * Get staticResource
   * @return staticResource
   */
  @javax.annotation.Nullable
  public String getStaticResource() {
    return staticResource;
  }

  public void setStaticResource(String staticResource) {
    this.staticResource = staticResource;
  }


  public CompanionXml trackingEvents(List<String> trackingEvents) {
    this.trackingEvents = trackingEvents;
    return this;
  }

  public CompanionXml addTrackingEventsItem(String trackingEventsItem) {
    if (this.trackingEvents == null) {
      this.trackingEvents = new ArrayList<>();
    }
    this.trackingEvents.add(trackingEventsItem);
    return this;
  }

  /**
   * Get trackingEvents
   * @return trackingEvents
   */
  @javax.annotation.Nullable
  public List<String> getTrackingEvents() {
    return trackingEvents;
  }

  public void setTrackingEvents(List<String> trackingEvents) {
    this.trackingEvents = trackingEvents;
  }


  public CompanionXml height(Integer height) {
    this.height = height;
    return this;
  }

  /**
   * Get height
   * @return height
   */
  @javax.annotation.Nullable
  public Integer getHeight() {
    return height;
  }

  public void setHeight(Integer height) {
    this.height = height;
  }


  public CompanionXml id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public CompanionXml width(Integer width) {
    this.width = width;
    return this;
  }

  /**
   * Get width
   * @return width
   */
  @javax.annotation.Nullable
  public Integer getWidth() {
    return width;
  }

  public void setWidth(Integer width) {
    this.width = width;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompanionXml companionXml = (CompanionXml) o;
    return Objects.equals(this.companionClickThrough, companionXml.companionClickThrough) &&
        Objects.equals(this.staticResource, companionXml.staticResource) &&
        Objects.equals(this.trackingEvents, companionXml.trackingEvents) &&
        Objects.equals(this.height, companionXml.height) &&
        Objects.equals(this.id, companionXml.id) &&
        Objects.equals(this.width, companionXml.width);
  }

  @Override
  public int hashCode() {
    return Objects.hash(companionClickThrough, staticResource, trackingEvents, height, id, width);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompanionXml {\n");
    sb.append("    companionClickThrough: ").append(toIndentedString(companionClickThrough)).append("\n");
    sb.append("    staticResource: ").append(toIndentedString(staticResource)).append("\n");
    sb.append("    trackingEvents: ").append(toIndentedString(trackingEvents)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CompanionClickThrough");
    openapiFields.add("StaticResource");
    openapiFields.add("TrackingEvents");
    openapiFields.add("height");
    openapiFields.add("id");
    openapiFields.add("width");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CompanionXml
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CompanionXml.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CompanionXml is not found in the empty JSON string", CompanionXml.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CompanionXml.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CompanionXml` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("CompanionClickThrough") != null && !jsonObj.get("CompanionClickThrough").isJsonNull()) && !jsonObj.get("CompanionClickThrough").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CompanionClickThrough` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CompanionClickThrough").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("TrackingEvents") != null && !jsonObj.get("TrackingEvents").isJsonNull() && !jsonObj.get("TrackingEvents").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `TrackingEvents` to be an array in the JSON string but got `%s`", jsonObj.get("TrackingEvents").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CompanionXml.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CompanionXml' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CompanionXml> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CompanionXml.class));

       return (TypeAdapter<T>) new TypeAdapter<CompanionXml>() {
           @Override
           public void write(JsonWriter out, CompanionXml value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CompanionXml read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CompanionXml given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CompanionXml
   * @throws IOException if the JSON string is invalid with respect to CompanionXml
   */
  public static CompanionXml fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CompanionXml.class);
  }

  /**
   * Convert an instance of CompanionXml to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

