/**
 * NPR Sponsorship Service
 * Sponsorship for non-NPR One client applications
 *
 * The version of the OpenAPI document: 2
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CompanionXml from './CompanionXml';
import LinearXml from './LinearXml';

/**
 * The CreativeXml model module.
 * @module model/CreativeXml
 * @version 2
 */
class CreativeXml {
    /**
     * Constructs a new <code>CreativeXml</code>.
     * @alias module:model/CreativeXml
     * @param sequence {Number} 
     */
    constructor(sequence) { 
        
        CreativeXml.initialize(this, sequence);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, sequence) { 
        obj['sequence'] = sequence || 1;
    }

    /**
     * Constructs a <code>CreativeXml</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreativeXml} obj Optional instance to populate.
     * @return {module:model/CreativeXml} The populated <code>CreativeXml</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreativeXml();

            if (data.hasOwnProperty('CompanionAds')) {
                obj['CompanionAds'] = ApiClient.convertToType(data['CompanionAds'], [CompanionXml]);
            }
            if (data.hasOwnProperty('Linear')) {
                obj['Linear'] = LinearXml.constructFromObject(data['Linear']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('sequence')) {
                obj['sequence'] = ApiClient.convertToType(data['sequence'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreativeXml</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreativeXml</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreativeXml.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['CompanionAds']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['CompanionAds'])) {
                throw new Error("Expected the field `CompanionAds` to be an array in the JSON data but got " + data['CompanionAds']);
            }
            // validate the optional field `CompanionAds` (array)
            for (const item of data['CompanionAds']) {
                CompanionXml.validateJSON(item);
            };
        }
        // validate the optional field `Linear`
        if (data['Linear']) { // data not null
          LinearXml.validateJSON(data['Linear']);
        }

        return true;
    }


}

CreativeXml.RequiredProperties = ["sequence"];

/**
 * @member {Array.<module:model/CompanionXml>} CompanionAds
 */
CreativeXml.prototype['CompanionAds'] = undefined;

/**
 * @member {module:model/LinearXml} Linear
 */
CreativeXml.prototype['Linear'] = undefined;

/**
 * @member {Number} id
 */
CreativeXml.prototype['id'] = undefined;

/**
 * @member {Number} sequence
 * @default 1
 */
CreativeXml.prototype['sequence'] = 1;






export default CreativeXml;

