/**
 * NPR Sponsorship Service
 * Sponsorship for non-NPR One client applications
 *
 * The version of the OpenAPI document: 2
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreativeXml from './CreativeXml';

/**
 * The InLineXml model module.
 * @module model/InLineXml
 * @version 2
 */
class InLineXml {
    /**
     * Constructs a new <code>InLineXml</code>.
     * @alias module:model/InLineXml
     */
    constructor() { 
        
        InLineXml.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InLineXml</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InLineXml} obj Optional instance to populate.
     * @return {module:model/InLineXml} The populated <code>InLineXml</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InLineXml();

            if (data.hasOwnProperty('AdSystem')) {
                obj['AdSystem'] = ApiClient.convertToType(data['AdSystem'], 'String');
            }
            if (data.hasOwnProperty('AdTitle')) {
                obj['AdTitle'] = ApiClient.convertToType(data['AdTitle'], 'String');
            }
            if (data.hasOwnProperty('Category')) {
                obj['Category'] = ApiClient.convertToType(data['Category'], 'String');
            }
            if (data.hasOwnProperty('Creatives')) {
                obj['Creatives'] = ApiClient.convertToType(data['Creatives'], [CreativeXml]);
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('Extensions')) {
                obj['Extensions'] = ApiClient.convertToType(data['Extensions'], ['String']);
            }
            if (data.hasOwnProperty('Impression')) {
                obj['Impression'] = ApiClient.convertToType(data['Impression'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InLineXml</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InLineXml</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['AdSystem'] && !(typeof data['AdSystem'] === 'string' || data['AdSystem'] instanceof String)) {
            throw new Error("Expected the field `AdSystem` to be a primitive type in the JSON string but got " + data['AdSystem']);
        }
        // ensure the json data is a string
        if (data['AdTitle'] && !(typeof data['AdTitle'] === 'string' || data['AdTitle'] instanceof String)) {
            throw new Error("Expected the field `AdTitle` to be a primitive type in the JSON string but got " + data['AdTitle']);
        }
        // ensure the json data is a string
        if (data['Category'] && !(typeof data['Category'] === 'string' || data['Category'] instanceof String)) {
            throw new Error("Expected the field `Category` to be a primitive type in the JSON string but got " + data['Category']);
        }
        if (data['Creatives']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Creatives'])) {
                throw new Error("Expected the field `Creatives` to be an array in the JSON data but got " + data['Creatives']);
            }
            // validate the optional field `Creatives` (array)
            for (const item of data['Creatives']) {
                CreativeXml.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['Description'] && !(typeof data['Description'] === 'string' || data['Description'] instanceof String)) {
            throw new Error("Expected the field `Description` to be a primitive type in the JSON string but got " + data['Description']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['Extensions'])) {
            throw new Error("Expected the field `Extensions` to be an array in the JSON data but got " + data['Extensions']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['Impression'])) {
            throw new Error("Expected the field `Impression` to be an array in the JSON data but got " + data['Impression']);
        }

        return true;
    }


}



/**
 * @member {String} AdSystem
 */
InLineXml.prototype['AdSystem'] = undefined;

/**
 * @member {String} AdTitle
 */
InLineXml.prototype['AdTitle'] = undefined;

/**
 * @member {String} Category
 */
InLineXml.prototype['Category'] = undefined;

/**
 * @member {Array.<module:model/CreativeXml>} Creatives
 */
InLineXml.prototype['Creatives'] = undefined;

/**
 * @member {String} Description
 */
InLineXml.prototype['Description'] = undefined;

/**
 * @member {Array.<String>} Extensions
 */
InLineXml.prototype['Extensions'] = undefined;

/**
 * @member {Array.<String>} Impression
 */
InLineXml.prototype['Impression'] = undefined;






export default InLineXml;

