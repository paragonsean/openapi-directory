/**
 * NPR Sponsorship Service
 * Sponsorship for non-NPR One client applications
 *
 * The version of the OpenAPI document: 2
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import ErrorXmlDocument from '../model/ErrorXmlDocument';
import UserAdDocument from '../model/UserAdDocument';
import VASTXml from '../model/VASTXml';

/**
* Sponsorship service.
* @module api/SponsorshipApi
* @version 2
*/
export default class SponsorshipApi {

    /**
    * Constructs a new SponsorshipApi. 
    * @alias module:api/SponsorshipApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAds operation.
     * @callback module:api/SponsorshipApi~getAdsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VASTXml} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request VAST sponsorship units
     * **Not** for use by NPR One clients (for whom sponsorship is already integrated into the Listening Service), this endpoint is designed to be used by our other client applications to request sponsorship on behalf of a user. Sponsorship units are returned in the form of VAST XML. It is worth noting that this endpoint attempts to always return XML, even in the case of exceptions.  The default behavior of this endpoint is asynchronous; on an initial request, a call to our external sponsorship provider is placed on a queue, which is typically processed within 3 minutes. Once the sponsorship call is received and processed, the returned sponsorship units are placed in a cache on our server for the current user. Subsequent calls to this endpoint will return VAST sponsorship units from this cache until tracking information is submitted, which removes the ad from the cache and will automatically request additional ads asynchronously if there are fewer than a certain number remaining in the cache.  For development purposes, it's worth noting that there is currently no way to clear a user's cache without submitting some form of tracking.
     * @param {String} authorization Your access token from the Authorization Service. Should start with `Bearer`, followed by a space, followed by the token.
     * @param {Object} opts Optional parameters
     * @param {String} [xAdvertisingID] A device-specific advertising identifier, if possible. Apple's IDFA is an example.
     * @param {Boolean} [forceResult] Whether to force a synchronous call to our external sponsorship provider; the default behavior is asynchronous.
     * @param {Number} [adCount] How many sponsorship units to request in one call; if left unspecified, the default behavior is to return only 1.
     * @param {module:api/SponsorshipApi~getAdsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VASTXml}
     */
    getAds(authorization, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getAds");
      }

      let pathParams = {
      };
      let queryParams = {
        'forceResult': opts['forceResult'],
        'adCount': opts['adCount']
      };
      let headerParams = {
        'Authorization': authorization,
        'X-Advertising-ID': opts['xAdvertisingID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = VASTXml;
      return this.apiClient.callApi(
        '/v2/ads', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the receiveAdTracking operation.
     * @callback module:api/SponsorshipApi~receiveAdTrackingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Record tracking data for VAST sponsorship units
     * **Not** for use by NPR One clients (for whom sponsorship is already integrated into the Listening Service), this endpoint is designed to be used by our other client applications to submit tracking information for sponsorship units obtained from the `GET /sponsorship/v2/ads` endpoint.  The tracking information should be submitted in the body of the request in the form of a JSON object following the Collection.Doc+JSON specification.
     * @param {String} authorization Your access token from the Authorization Service. Should start with `Bearer`, followed by a space, followed by the token.
     * @param {module:model/UserAdDocument} body A JSON object representing sponsorship tracking data to submit to our external provider.
     * @param {Object} opts Optional parameters
     * @param {String} [xAdvertisingID] A device-specific advertising identifier, if possible. Apple's IDFA is an example.
     * @param {module:api/SponsorshipApi~receiveAdTrackingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    receiveAdTracking(authorization, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling receiveAdTracking");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling receiveAdTracking");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-Advertising-ID': opts['xAdvertisingID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/ads', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
