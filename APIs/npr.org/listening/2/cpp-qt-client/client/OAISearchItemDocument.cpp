/**
 * NPR Listening Service
 * Audio recommendations tailored to a user's preferences
 *
 * The version of the OpenAPI document: 2
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchItemDocument.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchItemDocument::OAISearchItemDocument(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchItemDocument::OAISearchItemDocument() {
    this->initializeModel();
}

OAISearchItemDocument::~OAISearchItemDocument() {}

void OAISearchItemDocument::initializeModel() {

    m_if_type_aggregation_isSet = false;
    m_if_type_aggregation_isValid = false;

    m_if_type_audio_isSet = false;
    m_if_type_audio_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAISearchItemDocument::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchItemDocument::fromJsonObject(QJsonObject json) {

    m_if_type_aggregation_isValid = ::OpenAPI::fromJsonValue(m_if_type_aggregation, json[QString("ifTypeAggregation")]);
    m_if_type_aggregation_isSet = !json[QString("ifTypeAggregation")].isNull() && m_if_type_aggregation_isValid;

    m_if_type_audio_isValid = ::OpenAPI::fromJsonValue(m_if_type_audio, json[QString("ifTypeAudio")]);
    m_if_type_audio_isSet = !json[QString("ifTypeAudio")].isNull() && m_if_type_audio_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAISearchItemDocument::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchItemDocument::asJsonObject() const {
    QJsonObject obj;
    if (m_if_type_aggregation.isSet()) {
        obj.insert(QString("ifTypeAggregation"), ::OpenAPI::toJsonValue(m_if_type_aggregation));
    }
    if (m_if_type_audio.isSet()) {
        obj.insert(QString("ifTypeAudio"), ::OpenAPI::toJsonValue(m_if_type_audio));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIAggregationAudioItemListDocument OAISearchItemDocument::getIfTypeAggregation() const {
    return m_if_type_aggregation;
}
void OAISearchItemDocument::setIfTypeAggregation(const OAIAggregationAudioItemListDocument &if_type_aggregation) {
    m_if_type_aggregation = if_type_aggregation;
    m_if_type_aggregation_isSet = true;
}

bool OAISearchItemDocument::is_if_type_aggregation_Set() const{
    return m_if_type_aggregation_isSet;
}

bool OAISearchItemDocument::is_if_type_aggregation_Valid() const{
    return m_if_type_aggregation_isValid;
}

OAIAudioItemDocument OAISearchItemDocument::getIfTypeAudio() const {
    return m_if_type_audio;
}
void OAISearchItemDocument::setIfTypeAudio(const OAIAudioItemDocument &if_type_audio) {
    m_if_type_audio = if_type_audio;
    m_if_type_audio_isSet = true;
}

bool OAISearchItemDocument::is_if_type_audio_Set() const{
    return m_if_type_audio_isSet;
}

bool OAISearchItemDocument::is_if_type_audio_Valid() const{
    return m_if_type_audio_isValid;
}

QString OAISearchItemDocument::getType() const {
    return m_type;
}
void OAISearchItemDocument::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISearchItemDocument::is_type_Set() const{
    return m_type_isSet;
}

bool OAISearchItemDocument::is_type_Valid() const{
    return m_type_isValid;
}

bool OAISearchItemDocument::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_if_type_aggregation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_if_type_audio.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchItemDocument::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
