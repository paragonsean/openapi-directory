/**
 * NPR Listening Service
 * Audio recommendations tailored to a user's preferences
 *
 * The version of the OpenAPI document: 2
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRatingData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRatingData::OAIRatingData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRatingData::OAIRatingData() {
    this->initializeModel();
}

OAIRatingData::~OAIRatingData() {}

void OAIRatingData::initializeModel() {

    m_affiliations_isSet = false;
    m_affiliations_isValid = false;

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_cohort_isSet = false;
    m_cohort_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_elapsed_isSet = false;
    m_elapsed_isValid = false;

    m_media_id_isSet = false;
    m_media_id_isValid = false;

    m_origin_isSet = false;
    m_origin_isValid = false;

    m_rating_isSet = false;
    m_rating_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;
}

void OAIRatingData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRatingData::fromJsonObject(QJsonObject json) {

    m_affiliations_isValid = ::OpenAPI::fromJsonValue(m_affiliations, json[QString("affiliations")]);
    m_affiliations_isSet = !json[QString("affiliations")].isNull() && m_affiliations_isValid;

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_cohort_isValid = ::OpenAPI::fromJsonValue(m_cohort, json[QString("cohort")]);
    m_cohort_isSet = !json[QString("cohort")].isNull() && m_cohort_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_elapsed_isValid = ::OpenAPI::fromJsonValue(m_elapsed, json[QString("elapsed")]);
    m_elapsed_isSet = !json[QString("elapsed")].isNull() && m_elapsed_isValid;

    m_media_id_isValid = ::OpenAPI::fromJsonValue(m_media_id, json[QString("mediaId")]);
    m_media_id_isSet = !json[QString("mediaId")].isNull() && m_media_id_isValid;

    m_origin_isValid = ::OpenAPI::fromJsonValue(m_origin, json[QString("origin")]);
    m_origin_isSet = !json[QString("origin")].isNull() && m_origin_isValid;

    m_rating_isValid = ::OpenAPI::fromJsonValue(m_rating, json[QString("rating")]);
    m_rating_isSet = !json[QString("rating")].isNull() && m_rating_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;
}

QString OAIRatingData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRatingData::asJsonObject() const {
    QJsonObject obj;
    if (m_affiliations.size() > 0) {
        obj.insert(QString("affiliations"), ::OpenAPI::toJsonValue(m_affiliations));
    }
    if (m_channel_isSet) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_cohort_isSet) {
        obj.insert(QString("cohort"), ::OpenAPI::toJsonValue(m_cohort));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_elapsed_isSet) {
        obj.insert(QString("elapsed"), ::OpenAPI::toJsonValue(m_elapsed));
    }
    if (m_media_id_isSet) {
        obj.insert(QString("mediaId"), ::OpenAPI::toJsonValue(m_media_id));
    }
    if (m_origin_isSet) {
        obj.insert(QString("origin"), ::OpenAPI::toJsonValue(m_origin));
    }
    if (m_rating_isSet) {
        obj.insert(QString("rating"), ::OpenAPI::toJsonValue(m_rating));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    return obj;
}

QList<OAIObject> OAIRatingData::getAffiliations() const {
    return m_affiliations;
}
void OAIRatingData::setAffiliations(const QList<OAIObject> &affiliations) {
    m_affiliations = affiliations;
    m_affiliations_isSet = true;
}

bool OAIRatingData::is_affiliations_Set() const{
    return m_affiliations_isSet;
}

bool OAIRatingData::is_affiliations_Valid() const{
    return m_affiliations_isValid;
}

QString OAIRatingData::getChannel() const {
    return m_channel;
}
void OAIRatingData::setChannel(const QString &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAIRatingData::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAIRatingData::is_channel_Valid() const{
    return m_channel_isValid;
}

QString OAIRatingData::getCohort() const {
    return m_cohort;
}
void OAIRatingData::setCohort(const QString &cohort) {
    m_cohort = cohort;
    m_cohort_isSet = true;
}

bool OAIRatingData::is_cohort_Set() const{
    return m_cohort_isSet;
}

bool OAIRatingData::is_cohort_Valid() const{
    return m_cohort_isValid;
}

qint32 OAIRatingData::getDuration() const {
    return m_duration;
}
void OAIRatingData::setDuration(const qint32 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIRatingData::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIRatingData::is_duration_Valid() const{
    return m_duration_isValid;
}

qint32 OAIRatingData::getElapsed() const {
    return m_elapsed;
}
void OAIRatingData::setElapsed(const qint32 &elapsed) {
    m_elapsed = elapsed;
    m_elapsed_isSet = true;
}

bool OAIRatingData::is_elapsed_Set() const{
    return m_elapsed_isSet;
}

bool OAIRatingData::is_elapsed_Valid() const{
    return m_elapsed_isValid;
}

QString OAIRatingData::getMediaId() const {
    return m_media_id;
}
void OAIRatingData::setMediaId(const QString &media_id) {
    m_media_id = media_id;
    m_media_id_isSet = true;
}

bool OAIRatingData::is_media_id_Set() const{
    return m_media_id_isSet;
}

bool OAIRatingData::is_media_id_Valid() const{
    return m_media_id_isValid;
}

QString OAIRatingData::getOrigin() const {
    return m_origin;
}
void OAIRatingData::setOrigin(const QString &origin) {
    m_origin = origin;
    m_origin_isSet = true;
}

bool OAIRatingData::is_origin_Set() const{
    return m_origin_isSet;
}

bool OAIRatingData::is_origin_Valid() const{
    return m_origin_isValid;
}

QString OAIRatingData::getRating() const {
    return m_rating;
}
void OAIRatingData::setRating(const QString &rating) {
    m_rating = rating;
    m_rating_isSet = true;
}

bool OAIRatingData::is_rating_Set() const{
    return m_rating_isSet;
}

bool OAIRatingData::is_rating_Valid() const{
    return m_rating_isValid;
}

QDateTime OAIRatingData::getTimestamp() const {
    return m_timestamp;
}
void OAIRatingData::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIRatingData::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIRatingData::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

bool OAIRatingData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_affiliations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cohort_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_elapsed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRatingData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_channel_isValid && m_cohort_isValid && m_duration_isValid && m_elapsed_isValid && m_media_id_isValid && m_origin_isValid && m_rating_isValid && m_timestamp_isValid && true;
}

} // namespace OpenAPI
