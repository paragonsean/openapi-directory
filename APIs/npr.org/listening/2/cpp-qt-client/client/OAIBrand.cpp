/**
 * NPR Listening Service
 * Audio recommendations tailored to a user's preferences
 *
 * The version of the OpenAPI document: 2
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBrand.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBrand::OAIBrand(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBrand::OAIBrand() {
    this->initializeModel();
}

OAIBrand::~OAIBrand() {}

void OAIBrand::initializeModel() {

    m_band_isSet = false;
    m_band_isValid = false;

    m_call_isSet = false;
    m_call_isValid = false;

    m_frequency_isSet = false;
    m_frequency_isValid = false;

    m_market_city_isSet = false;
    m_market_city_isValid = false;

    m_market_state_isSet = false;
    m_market_state_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_tagline_isSet = false;
    m_tagline_isValid = false;
}

void OAIBrand::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBrand::fromJsonObject(QJsonObject json) {

    m_band_isValid = ::OpenAPI::fromJsonValue(m_band, json[QString("band")]);
    m_band_isSet = !json[QString("band")].isNull() && m_band_isValid;

    m_call_isValid = ::OpenAPI::fromJsonValue(m_call, json[QString("call")]);
    m_call_isSet = !json[QString("call")].isNull() && m_call_isValid;

    m_frequency_isValid = ::OpenAPI::fromJsonValue(m_frequency, json[QString("frequency")]);
    m_frequency_isSet = !json[QString("frequency")].isNull() && m_frequency_isValid;

    m_market_city_isValid = ::OpenAPI::fromJsonValue(m_market_city, json[QString("marketCity")]);
    m_market_city_isSet = !json[QString("marketCity")].isNull() && m_market_city_isValid;

    m_market_state_isValid = ::OpenAPI::fromJsonValue(m_market_state, json[QString("marketState")]);
    m_market_state_isSet = !json[QString("marketState")].isNull() && m_market_state_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_tagline_isValid = ::OpenAPI::fromJsonValue(m_tagline, json[QString("tagline")]);
    m_tagline_isSet = !json[QString("tagline")].isNull() && m_tagline_isValid;
}

QString OAIBrand::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBrand::asJsonObject() const {
    QJsonObject obj;
    if (m_band_isSet) {
        obj.insert(QString("band"), ::OpenAPI::toJsonValue(m_band));
    }
    if (m_call_isSet) {
        obj.insert(QString("call"), ::OpenAPI::toJsonValue(m_call));
    }
    if (m_frequency_isSet) {
        obj.insert(QString("frequency"), ::OpenAPI::toJsonValue(m_frequency));
    }
    if (m_market_city_isSet) {
        obj.insert(QString("marketCity"), ::OpenAPI::toJsonValue(m_market_city));
    }
    if (m_market_state_isSet) {
        obj.insert(QString("marketState"), ::OpenAPI::toJsonValue(m_market_state));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_tagline_isSet) {
        obj.insert(QString("tagline"), ::OpenAPI::toJsonValue(m_tagline));
    }
    return obj;
}

QString OAIBrand::getBand() const {
    return m_band;
}
void OAIBrand::setBand(const QString &band) {
    m_band = band;
    m_band_isSet = true;
}

bool OAIBrand::is_band_Set() const{
    return m_band_isSet;
}

bool OAIBrand::is_band_Valid() const{
    return m_band_isValid;
}

QString OAIBrand::getCall() const {
    return m_call;
}
void OAIBrand::setCall(const QString &call) {
    m_call = call;
    m_call_isSet = true;
}

bool OAIBrand::is_call_Set() const{
    return m_call_isSet;
}

bool OAIBrand::is_call_Valid() const{
    return m_call_isValid;
}

QString OAIBrand::getFrequency() const {
    return m_frequency;
}
void OAIBrand::setFrequency(const QString &frequency) {
    m_frequency = frequency;
    m_frequency_isSet = true;
}

bool OAIBrand::is_frequency_Set() const{
    return m_frequency_isSet;
}

bool OAIBrand::is_frequency_Valid() const{
    return m_frequency_isValid;
}

QString OAIBrand::getMarketCity() const {
    return m_market_city;
}
void OAIBrand::setMarketCity(const QString &market_city) {
    m_market_city = market_city;
    m_market_city_isSet = true;
}

bool OAIBrand::is_market_city_Set() const{
    return m_market_city_isSet;
}

bool OAIBrand::is_market_city_Valid() const{
    return m_market_city_isValid;
}

QString OAIBrand::getMarketState() const {
    return m_market_state;
}
void OAIBrand::setMarketState(const QString &market_state) {
    m_market_state = market_state;
    m_market_state_isSet = true;
}

bool OAIBrand::is_market_state_Set() const{
    return m_market_state_isSet;
}

bool OAIBrand::is_market_state_Valid() const{
    return m_market_state_isValid;
}

QString OAIBrand::getName() const {
    return m_name;
}
void OAIBrand::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBrand::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBrand::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIBrand::getTagline() const {
    return m_tagline;
}
void OAIBrand::setTagline(const QString &tagline) {
    m_tagline = tagline;
    m_tagline_isSet = true;
}

bool OAIBrand::is_tagline_Set() const{
    return m_tagline_isSet;
}

bool OAIBrand::is_tagline_Valid() const{
    return m_tagline_isValid;
}

bool OAIBrand::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_band_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_call_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_market_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_market_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tagline_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBrand::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_call_isValid && m_market_city_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
