/**
 * NPR Listening Service
 * Audio recommendations tailored to a user's preferences
 *
 * The version of the OpenAPI document: 2
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChannelData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChannelData::OAIChannelData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChannelData::OAIChannelData() {
    this->initializeModel();
}

OAIChannelData::~OAIChannelData() {}

void OAIChannelData::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_type_isSet = false;
    m_display_type_isValid = false;

    m_empty_text_isSet = false;
    m_empty_text_isValid = false;

    m_full_name_isSet = false;
    m_full_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_refresh_rule_isSet = false;
    m_refresh_rule_isValid = false;
}

void OAIChannelData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChannelData::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_type_isValid = ::OpenAPI::fromJsonValue(m_display_type, json[QString("displayType")]);
    m_display_type_isSet = !json[QString("displayType")].isNull() && m_display_type_isValid;

    m_empty_text_isValid = ::OpenAPI::fromJsonValue(m_empty_text, json[QString("emptyText")]);
    m_empty_text_isSet = !json[QString("emptyText")].isNull() && m_empty_text_isValid;

    m_full_name_isValid = ::OpenAPI::fromJsonValue(m_full_name, json[QString("fullName")]);
    m_full_name_isSet = !json[QString("fullName")].isNull() && m_full_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_refresh_rule_isValid = ::OpenAPI::fromJsonValue(m_refresh_rule, json[QString("refreshRule")]);
    m_refresh_rule_isSet = !json[QString("refreshRule")].isNull() && m_refresh_rule_isValid;
}

QString OAIChannelData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChannelData::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_type_isSet) {
        obj.insert(QString("displayType"), ::OpenAPI::toJsonValue(m_display_type));
    }
    if (m_empty_text_isSet) {
        obj.insert(QString("emptyText"), ::OpenAPI::toJsonValue(m_empty_text));
    }
    if (m_full_name_isSet) {
        obj.insert(QString("fullName"), ::OpenAPI::toJsonValue(m_full_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_refresh_rule_isSet) {
        obj.insert(QString("refreshRule"), ::OpenAPI::toJsonValue(m_refresh_rule));
    }
    return obj;
}

QString OAIChannelData::getDescription() const {
    return m_description;
}
void OAIChannelData::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIChannelData::is_description_Set() const{
    return m_description_isSet;
}

bool OAIChannelData::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIChannelData::getDisplayType() const {
    return m_display_type;
}
void OAIChannelData::setDisplayType(const QString &display_type) {
    m_display_type = display_type;
    m_display_type_isSet = true;
}

bool OAIChannelData::is_display_type_Set() const{
    return m_display_type_isSet;
}

bool OAIChannelData::is_display_type_Valid() const{
    return m_display_type_isValid;
}

QString OAIChannelData::getEmptyText() const {
    return m_empty_text;
}
void OAIChannelData::setEmptyText(const QString &empty_text) {
    m_empty_text = empty_text;
    m_empty_text_isSet = true;
}

bool OAIChannelData::is_empty_text_Set() const{
    return m_empty_text_isSet;
}

bool OAIChannelData::is_empty_text_Valid() const{
    return m_empty_text_isValid;
}

QString OAIChannelData::getFullName() const {
    return m_full_name;
}
void OAIChannelData::setFullName(const QString &full_name) {
    m_full_name = full_name;
    m_full_name_isSet = true;
}

bool OAIChannelData::is_full_name_Set() const{
    return m_full_name_isSet;
}

bool OAIChannelData::is_full_name_Valid() const{
    return m_full_name_isValid;
}

QString OAIChannelData::getId() const {
    return m_id;
}
void OAIChannelData::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIChannelData::is_id_Set() const{
    return m_id_isSet;
}

bool OAIChannelData::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIChannelData::getRefreshRule() const {
    return m_refresh_rule;
}
void OAIChannelData::setRefreshRule(const qint32 &refresh_rule) {
    m_refresh_rule = refresh_rule;
    m_refresh_rule_isSet = true;
}

bool OAIChannelData::is_refresh_rule_Set() const{
    return m_refresh_rule_isSet;
}

bool OAIChannelData::is_refresh_rule_Valid() const{
    return m_refresh_rule_isValid;
}

bool OAIChannelData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_empty_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_rule_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChannelData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_description_isValid && m_full_name_isValid && m_id_isValid && true;
}

} // namespace OpenAPI
