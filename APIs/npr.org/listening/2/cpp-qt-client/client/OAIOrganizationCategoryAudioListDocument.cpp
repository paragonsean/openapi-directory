/**
 * NPR Listening Service
 * Audio recommendations tailored to a user's preferences
 *
 * The version of the OpenAPI document: 2
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrganizationCategoryAudioListDocument.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrganizationCategoryAudioListDocument::OAIOrganizationCategoryAudioListDocument(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrganizationCategoryAudioListDocument::OAIOrganizationCategoryAudioListDocument() {
    this->initializeModel();
}

OAIOrganizationCategoryAudioListDocument::~OAIOrganizationCategoryAudioListDocument() {}

void OAIOrganizationCategoryAudioListDocument::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_href_isSet = false;
    m_href_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIOrganizationCategoryAudioListDocument::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrganizationCategoryAudioListDocument::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_href_isValid = ::OpenAPI::fromJsonValue(m_href, json[QString("href")]);
    m_href_isSet = !json[QString("href")].isNull() && m_href_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIOrganizationCategoryAudioListDocument::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrganizationCategoryAudioListDocument::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes.isSet()) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_href_isSet) {
        obj.insert(QString("href"), ::OpenAPI::toJsonValue(m_href));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_links.isSet()) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

OAICategoryData OAIOrganizationCategoryAudioListDocument::getAttributes() const {
    return m_attributes;
}
void OAIOrganizationCategoryAudioListDocument::setAttributes(const OAICategoryData &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIOrganizationCategoryAudioListDocument::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIOrganizationCategoryAudioListDocument::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QList<OAIObject> OAIOrganizationCategoryAudioListDocument::getErrors() const {
    return m_errors;
}
void OAIOrganizationCategoryAudioListDocument::setErrors(const QList<OAIObject> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIOrganizationCategoryAudioListDocument::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIOrganizationCategoryAudioListDocument::is_errors_Valid() const{
    return m_errors_isValid;
}

QString OAIOrganizationCategoryAudioListDocument::getHref() const {
    return m_href;
}
void OAIOrganizationCategoryAudioListDocument::setHref(const QString &href) {
    m_href = href;
    m_href_isSet = true;
}

bool OAIOrganizationCategoryAudioListDocument::is_href_Set() const{
    return m_href_isSet;
}

bool OAIOrganizationCategoryAudioListDocument::is_href_Valid() const{
    return m_href_isValid;
}

QList<OAIAudioItemDocument> OAIOrganizationCategoryAudioListDocument::getItems() const {
    return m_items;
}
void OAIOrganizationCategoryAudioListDocument::setItems(const QList<OAIAudioItemDocument> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIOrganizationCategoryAudioListDocument::is_items_Set() const{
    return m_items_isSet;
}

bool OAIOrganizationCategoryAudioListDocument::is_items_Valid() const{
    return m_items_isValid;
}

OAICategoryLinks OAIOrganizationCategoryAudioListDocument::getLinks() const {
    return m_links;
}
void OAIOrganizationCategoryAudioListDocument::setLinks(const OAICategoryLinks &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIOrganizationCategoryAudioListDocument::is_links_Set() const{
    return m_links_isSet;
}

bool OAIOrganizationCategoryAudioListDocument::is_links_Valid() const{
    return m_links_isValid;
}

QString OAIOrganizationCategoryAudioListDocument::getVersion() const {
    return m_version;
}
void OAIOrganizationCategoryAudioListDocument::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIOrganizationCategoryAudioListDocument::is_version_Set() const{
    return m_version_isSet;
}

bool OAIOrganizationCategoryAudioListDocument::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIOrganizationCategoryAudioListDocument::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_href_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrganizationCategoryAudioListDocument::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_attributes_isValid && m_errors_isValid && m_href_isValid && m_items_isValid && m_links_isValid && m_version_isValid && true;
}

} // namespace OpenAPI
