/**
 * NPR Listening Service
 * Audio recommendations tailored to a user's preferences
 *
 * The version of the OpenAPI document: 2
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAggregationAudioItemListDocument.h"
#include "OAIAudioItemListDocument.h"
#include "OAIChannelsDocument.h"
#include "OAIErrorDocument.h"
#include "OAIOrganizationCategoryAudioListDocument.h"
#include "OAIOrganizationOverviewDocument.h"
#include "OAIRatingData.h"
#include "OAISearchListDocument.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  agg_id qint64 [required]
    * @param[in]  authorization QString [required]
    * @param[in]  start_num qint32 [optional]
    */
    virtual void getAggRecommendations(const qint64 &agg_id, const QString &authorization, const ::OpenAPI::OptionalParam<qint32> &start_num = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  explore_only bool [optional]
    */
    virtual void getChannels(const QString &authorization, const ::OpenAPI::OptionalParam<bool> &explore_only = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  authorization QString [required]
    */
    virtual void getHistory(const QString &authorization);

    /**
    * @param[in]  org_id qint64 [required]
    * @param[in]  category QString [required]
    * @param[in]  authorization QString [required]
    */
    virtual void getOrganizationCategory(const qint64 &org_id, const QString &category, const QString &authorization);

    /**
    * @param[in]  org_id qint64 [required]
    * @param[in]  authorization QString [required]
    */
    virtual void getOrganizationOverview(const qint64 &org_id, const QString &authorization);

    /**
    * @param[in]  authorization QString [required]
    */
    virtual void getPromo(const QString &authorization);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_advertising_id QString [optional]
    * @param[in]  channel QString [optional]
    * @param[in]  shared_media_id QString [optional]
    * @param[in]  notified_media_id QString [optional]
    */
    virtual void getRecommendations(const QString &authorization, const ::OpenAPI::OptionalParam<QString> &x_advertising_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &channel = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &shared_media_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &notified_media_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  search_terms QString [required]
    */
    virtual void getSearchRecommendations(const QString &authorization, const QString &search_terms);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  body QList<OAIRatingData> [required]
    * @param[in]  x_advertising_id QString [optional]
    * @param[in]  channel QString [optional]
    * @param[in]  recommend bool [optional]
    */
    virtual void postRating(const QString &authorization, const QList<OAIRatingData> &body, const ::OpenAPI::OptionalParam<QString> &x_advertising_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &channel = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &recommend = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getAggRecommendationsCallback(OAIHttpRequestWorker *worker);
    void getChannelsCallback(OAIHttpRequestWorker *worker);
    void getHistoryCallback(OAIHttpRequestWorker *worker);
    void getOrganizationCategoryCallback(OAIHttpRequestWorker *worker);
    void getOrganizationOverviewCallback(OAIHttpRequestWorker *worker);
    void getPromoCallback(OAIHttpRequestWorker *worker);
    void getRecommendationsCallback(OAIHttpRequestWorker *worker);
    void getSearchRecommendationsCallback(OAIHttpRequestWorker *worker);
    void postRatingCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getAggRecommendationsSignal(OAIAggregationAudioItemListDocument summary);
    void getChannelsSignal(OAIChannelsDocument summary);
    void getHistorySignal(OAIAudioItemListDocument summary);
    void getOrganizationCategorySignal(OAIOrganizationCategoryAudioListDocument summary);
    void getOrganizationOverviewSignal(OAIOrganizationOverviewDocument summary);
    void getPromoSignal(OAIAudioItemListDocument summary);
    void getRecommendationsSignal(OAIAudioItemListDocument summary);
    void getSearchRecommendationsSignal(OAISearchListDocument summary);
    void postRatingSignal(OAIAudioItemListDocument summary);


    void getAggRecommendationsSignalFull(OAIHttpRequestWorker *worker, OAIAggregationAudioItemListDocument summary);
    void getChannelsSignalFull(OAIHttpRequestWorker *worker, OAIChannelsDocument summary);
    void getHistorySignalFull(OAIHttpRequestWorker *worker, OAIAudioItemListDocument summary);
    void getOrganizationCategorySignalFull(OAIHttpRequestWorker *worker, OAIOrganizationCategoryAudioListDocument summary);
    void getOrganizationOverviewSignalFull(OAIHttpRequestWorker *worker, OAIOrganizationOverviewDocument summary);
    void getPromoSignalFull(OAIHttpRequestWorker *worker, OAIAudioItemListDocument summary);
    void getRecommendationsSignalFull(OAIHttpRequestWorker *worker, OAIAudioItemListDocument summary);
    void getSearchRecommendationsSignalFull(OAIHttpRequestWorker *worker, OAISearchListDocument summary);
    void postRatingSignalFull(OAIHttpRequestWorker *worker, OAIAudioItemListDocument summary);

    Q_DECL_DEPRECATED_X("Use getAggRecommendationsSignalError() instead")
    void getAggRecommendationsSignalE(OAIAggregationAudioItemListDocument summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAggRecommendationsSignalError(OAIAggregationAudioItemListDocument summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChannelsSignalError() instead")
    void getChannelsSignalE(OAIChannelsDocument summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getChannelsSignalError(OAIChannelsDocument summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHistorySignalError() instead")
    void getHistorySignalE(OAIAudioItemListDocument summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getHistorySignalError(OAIAudioItemListDocument summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationCategorySignalError() instead")
    void getOrganizationCategorySignalE(OAIOrganizationCategoryAudioListDocument summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationCategorySignalError(OAIOrganizationCategoryAudioListDocument summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationOverviewSignalError() instead")
    void getOrganizationOverviewSignalE(OAIOrganizationOverviewDocument summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationOverviewSignalError(OAIOrganizationOverviewDocument summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPromoSignalError() instead")
    void getPromoSignalE(OAIAudioItemListDocument summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPromoSignalError(OAIAudioItemListDocument summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecommendationsSignalError() instead")
    void getRecommendationsSignalE(OAIAudioItemListDocument summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecommendationsSignalError(OAIAudioItemListDocument summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSearchRecommendationsSignalError() instead")
    void getSearchRecommendationsSignalE(OAISearchListDocument summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSearchRecommendationsSignalError(OAISearchListDocument summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postRatingSignalError() instead")
    void postRatingSignalE(OAIAudioItemListDocument summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postRatingSignalError(OAIAudioItemListDocument summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getAggRecommendationsSignalErrorFull() instead")
    void getAggRecommendationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAggRecommendationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChannelsSignalErrorFull() instead")
    void getChannelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getChannelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHistorySignalErrorFull() instead")
    void getHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationCategorySignalErrorFull() instead")
    void getOrganizationCategorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationCategorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationOverviewSignalErrorFull() instead")
    void getOrganizationOverviewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationOverviewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPromoSignalErrorFull() instead")
    void getPromoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPromoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecommendationsSignalErrorFull() instead")
    void getRecommendationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecommendationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSearchRecommendationsSignalErrorFull() instead")
    void getSearchRecommendationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSearchRecommendationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postRatingSignalErrorFull() instead")
    void postRatingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postRatingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
