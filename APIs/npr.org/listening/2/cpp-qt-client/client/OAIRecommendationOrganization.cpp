/**
 * NPR Listening Service
 * Audio recommendations tailored to a user's preferences
 *
 * The version of the OpenAPI document: 2
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecommendationOrganization.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecommendationOrganization::OAIRecommendationOrganization(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecommendationOrganization::OAIRecommendationOrganization() {
    this->initializeModel();
}

OAIRecommendationOrganization::~OAIRecommendationOrganization() {}

void OAIRecommendationOrganization::initializeModel() {

    m_donate_url_isSet = false;
    m_donate_url_isValid = false;

    m_homepage_url_isSet = false;
    m_homepage_url_isValid = false;

    m_logo_url_isSet = false;
    m_logo_url_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIRecommendationOrganization::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecommendationOrganization::fromJsonObject(QJsonObject json) {

    m_donate_url_isValid = ::OpenAPI::fromJsonValue(m_donate_url, json[QString("donateUrl")]);
    m_donate_url_isSet = !json[QString("donateUrl")].isNull() && m_donate_url_isValid;

    m_homepage_url_isValid = ::OpenAPI::fromJsonValue(m_homepage_url, json[QString("homepageUrl")]);
    m_homepage_url_isSet = !json[QString("homepageUrl")].isNull() && m_homepage_url_isValid;

    m_logo_url_isValid = ::OpenAPI::fromJsonValue(m_logo_url, json[QString("logoUrl")]);
    m_logo_url_isSet = !json[QString("logoUrl")].isNull() && m_logo_url_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIRecommendationOrganization::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecommendationOrganization::asJsonObject() const {
    QJsonObject obj;
    if (m_donate_url_isSet) {
        obj.insert(QString("donateUrl"), ::OpenAPI::toJsonValue(m_donate_url));
    }
    if (m_homepage_url_isSet) {
        obj.insert(QString("homepageUrl"), ::OpenAPI::toJsonValue(m_homepage_url));
    }
    if (m_logo_url_isSet) {
        obj.insert(QString("logoUrl"), ::OpenAPI::toJsonValue(m_logo_url));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIRecommendationOrganization::getDonateUrl() const {
    return m_donate_url;
}
void OAIRecommendationOrganization::setDonateUrl(const QString &donate_url) {
    m_donate_url = donate_url;
    m_donate_url_isSet = true;
}

bool OAIRecommendationOrganization::is_donate_url_Set() const{
    return m_donate_url_isSet;
}

bool OAIRecommendationOrganization::is_donate_url_Valid() const{
    return m_donate_url_isValid;
}

QString OAIRecommendationOrganization::getHomepageUrl() const {
    return m_homepage_url;
}
void OAIRecommendationOrganization::setHomepageUrl(const QString &homepage_url) {
    m_homepage_url = homepage_url;
    m_homepage_url_isSet = true;
}

bool OAIRecommendationOrganization::is_homepage_url_Set() const{
    return m_homepage_url_isSet;
}

bool OAIRecommendationOrganization::is_homepage_url_Valid() const{
    return m_homepage_url_isValid;
}

QString OAIRecommendationOrganization::getLogoUrl() const {
    return m_logo_url;
}
void OAIRecommendationOrganization::setLogoUrl(const QString &logo_url) {
    m_logo_url = logo_url;
    m_logo_url_isSet = true;
}

bool OAIRecommendationOrganization::is_logo_url_Set() const{
    return m_logo_url_isSet;
}

bool OAIRecommendationOrganization::is_logo_url_Valid() const{
    return m_logo_url_isValid;
}

QString OAIRecommendationOrganization::getName() const {
    return m_name;
}
void OAIRecommendationOrganization::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRecommendationOrganization::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRecommendationOrganization::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIRecommendationOrganization::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_donate_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_homepage_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logo_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecommendationOrganization::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
