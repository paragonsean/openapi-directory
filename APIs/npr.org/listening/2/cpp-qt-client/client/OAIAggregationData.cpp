/**
 * NPR Listening Service
 * Audio recommendations tailored to a user's preferences
 *
 * The version of the OpenAPI document: 2
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAggregationData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAggregationData::OAIAggregationData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAggregationData::OAIAggregationData() {
    this->initializeModel();
}

OAIAggregationData::~OAIAggregationData() {}

void OAIAggregationData::initializeModel() {

    m_affiliation_isSet = false;
    m_affiliation_isValid = false;

    m_affiliation_meta_isSet = false;
    m_affiliation_meta_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_provider_isSet = false;
    m_provider_isValid = false;

    m_station_isSet = false;
    m_station_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIAggregationData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAggregationData::fromJsonObject(QJsonObject json) {

    m_affiliation_isValid = ::OpenAPI::fromJsonValue(m_affiliation, json[QString("affiliation")]);
    m_affiliation_isSet = !json[QString("affiliation")].isNull() && m_affiliation_isValid;

    m_affiliation_meta_isValid = ::OpenAPI::fromJsonValue(m_affiliation_meta, json[QString("affiliationMeta")]);
    m_affiliation_meta_isSet = !json[QString("affiliationMeta")].isNull() && m_affiliation_meta_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("provider")]);
    m_provider_isSet = !json[QString("provider")].isNull() && m_provider_isValid;

    m_station_isValid = ::OpenAPI::fromJsonValue(m_station, json[QString("station")]);
    m_station_isSet = !json[QString("station")].isNull() && m_station_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIAggregationData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAggregationData::asJsonObject() const {
    QJsonObject obj;
    if (m_affiliation_isSet) {
        obj.insert(QString("affiliation"), ::OpenAPI::toJsonValue(m_affiliation));
    }
    if (m_affiliation_meta.isSet()) {
        obj.insert(QString("affiliationMeta"), ::OpenAPI::toJsonValue(m_affiliation_meta));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_provider_isSet) {
        obj.insert(QString("provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    if (m_station_isSet) {
        obj.insert(QString("station"), ::OpenAPI::toJsonValue(m_station));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIAggregationData::getAffiliation() const {
    return m_affiliation;
}
void OAIAggregationData::setAffiliation(const QString &affiliation) {
    m_affiliation = affiliation;
    m_affiliation_isSet = true;
}

bool OAIAggregationData::is_affiliation_Set() const{
    return m_affiliation_isSet;
}

bool OAIAggregationData::is_affiliation_Valid() const{
    return m_affiliation_isValid;
}

OAIAffiliation OAIAggregationData::getAffiliationMeta() const {
    return m_affiliation_meta;
}
void OAIAggregationData::setAffiliationMeta(const OAIAffiliation &affiliation_meta) {
    m_affiliation_meta = affiliation_meta;
    m_affiliation_meta_isSet = true;
}

bool OAIAggregationData::is_affiliation_meta_Set() const{
    return m_affiliation_meta_isSet;
}

bool OAIAggregationData::is_affiliation_meta_Valid() const{
    return m_affiliation_meta_isValid;
}

QString OAIAggregationData::getDescription() const {
    return m_description;
}
void OAIAggregationData::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAggregationData::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAggregationData::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIAggregationData::getProvider() const {
    return m_provider;
}
void OAIAggregationData::setProvider(const QString &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAIAggregationData::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAIAggregationData::is_provider_Valid() const{
    return m_provider_isValid;
}

QString OAIAggregationData::getStation() const {
    return m_station;
}
void OAIAggregationData::setStation(const QString &station) {
    m_station = station;
    m_station_isSet = true;
}

bool OAIAggregationData::is_station_Set() const{
    return m_station_isSet;
}

bool OAIAggregationData::is_station_Valid() const{
    return m_station_isValid;
}

QString OAIAggregationData::getTitle() const {
    return m_title;
}
void OAIAggregationData::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIAggregationData::is_title_Set() const{
    return m_title_isSet;
}

bool OAIAggregationData::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIAggregationData::getType() const {
    return m_type;
}
void OAIAggregationData::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAggregationData::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAggregationData::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIAggregationData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_affiliation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_affiliation_meta.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_station_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAggregationData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_affiliation_isValid && m_title_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
