/**
 * NPR Listening Service
 * Audio recommendations tailored to a user's preferences
 *
 * The version of the OpenAPI document: 2
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAudioItemLinks.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAudioItemLinks::OAIAudioItemLinks(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAudioItemLinks::OAIAudioItemLinks() {
    this->initializeModel();
}

OAIAudioItemLinks::~OAIAudioItemLinks() {}

void OAIAudioItemLinks::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_audio_isSet = false;
    m_audio_isValid = false;

    m_binge_isSet = false;
    m_binge_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_onramps_isSet = false;
    m_onramps_isValid = false;

    m_ratings_isSet = false;
    m_ratings_isValid = false;

    m_recommendations_isSet = false;
    m_recommendations_isValid = false;

    m_stream_metadata_isSet = false;
    m_stream_metadata_isValid = false;

    m_up_isSet = false;
    m_up_isValid = false;

    m_web_isSet = false;
    m_web_isValid = false;
}

void OAIAudioItemLinks::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAudioItemLinks::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_audio_isValid = ::OpenAPI::fromJsonValue(m_audio, json[QString("audio")]);
    m_audio_isSet = !json[QString("audio")].isNull() && m_audio_isValid;

    m_binge_isValid = ::OpenAPI::fromJsonValue(m_binge, json[QString("binge")]);
    m_binge_isSet = !json[QString("binge")].isNull() && m_binge_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_onramps_isValid = ::OpenAPI::fromJsonValue(m_onramps, json[QString("onramps")]);
    m_onramps_isSet = !json[QString("onramps")].isNull() && m_onramps_isValid;

    m_ratings_isValid = ::OpenAPI::fromJsonValue(m_ratings, json[QString("ratings")]);
    m_ratings_isSet = !json[QString("ratings")].isNull() && m_ratings_isValid;

    m_recommendations_isValid = ::OpenAPI::fromJsonValue(m_recommendations, json[QString("recommendations")]);
    m_recommendations_isSet = !json[QString("recommendations")].isNull() && m_recommendations_isValid;

    m_stream_metadata_isValid = ::OpenAPI::fromJsonValue(m_stream_metadata, json[QString("stream-metadata")]);
    m_stream_metadata_isSet = !json[QString("stream-metadata")].isNull() && m_stream_metadata_isValid;

    m_up_isValid = ::OpenAPI::fromJsonValue(m_up, json[QString("up")]);
    m_up_isSet = !json[QString("up")].isNull() && m_up_isValid;

    m_web_isValid = ::OpenAPI::fromJsonValue(m_web, json[QString("web")]);
    m_web_isSet = !json[QString("web")].isNull() && m_web_isValid;
}

QString OAIAudioItemLinks::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAudioItemLinks::asJsonObject() const {
    QJsonObject obj;
    if (m_action.size() > 0) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_audio.size() > 0) {
        obj.insert(QString("audio"), ::OpenAPI::toJsonValue(m_audio));
    }
    if (m_binge.size() > 0) {
        obj.insert(QString("binge"), ::OpenAPI::toJsonValue(m_binge));
    }
    if (m_image.size() > 0) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_onramps.size() > 0) {
        obj.insert(QString("onramps"), ::OpenAPI::toJsonValue(m_onramps));
    }
    if (m_ratings.size() > 0) {
        obj.insert(QString("ratings"), ::OpenAPI::toJsonValue(m_ratings));
    }
    if (m_recommendations.size() > 0) {
        obj.insert(QString("recommendations"), ::OpenAPI::toJsonValue(m_recommendations));
    }
    if (m_stream_metadata.size() > 0) {
        obj.insert(QString("stream-metadata"), ::OpenAPI::toJsonValue(m_stream_metadata));
    }
    if (m_up.size() > 0) {
        obj.insert(QString("up"), ::OpenAPI::toJsonValue(m_up));
    }
    if (m_web.size() > 0) {
        obj.insert(QString("web"), ::OpenAPI::toJsonValue(m_web));
    }
    return obj;
}

QList<OAIOtherLink> OAIAudioItemLinks::getAction() const {
    return m_action;
}
void OAIAudioItemLinks::setAction(const QList<OAIOtherLink> &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIAudioItemLinks::is_action_Set() const{
    return m_action_isSet;
}

bool OAIAudioItemLinks::is_action_Valid() const{
    return m_action_isValid;
}

QList<OAIAudioLink> OAIAudioItemLinks::getAudio() const {
    return m_audio;
}
void OAIAudioItemLinks::setAudio(const QList<OAIAudioLink> &audio) {
    m_audio = audio;
    m_audio_isSet = true;
}

bool OAIAudioItemLinks::is_audio_Set() const{
    return m_audio_isSet;
}

bool OAIAudioItemLinks::is_audio_Valid() const{
    return m_audio_isValid;
}

QList<OAIOtherLink> OAIAudioItemLinks::getBinge() const {
    return m_binge;
}
void OAIAudioItemLinks::setBinge(const QList<OAIOtherLink> &binge) {
    m_binge = binge;
    m_binge_isSet = true;
}

bool OAIAudioItemLinks::is_binge_Set() const{
    return m_binge_isSet;
}

bool OAIAudioItemLinks::is_binge_Valid() const{
    return m_binge_isValid;
}

QList<OAIImageLink> OAIAudioItemLinks::getImage() const {
    return m_image;
}
void OAIAudioItemLinks::setImage(const QList<OAIImageLink> &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIAudioItemLinks::is_image_Set() const{
    return m_image_isSet;
}

bool OAIAudioItemLinks::is_image_Valid() const{
    return m_image_isValid;
}

QList<OAIOtherLink> OAIAudioItemLinks::getOnramps() const {
    return m_onramps;
}
void OAIAudioItemLinks::setOnramps(const QList<OAIOtherLink> &onramps) {
    m_onramps = onramps;
    m_onramps_isSet = true;
}

bool OAIAudioItemLinks::is_onramps_Set() const{
    return m_onramps_isSet;
}

bool OAIAudioItemLinks::is_onramps_Valid() const{
    return m_onramps_isValid;
}

QList<OAIOtherLink> OAIAudioItemLinks::getRatings() const {
    return m_ratings;
}
void OAIAudioItemLinks::setRatings(const QList<OAIOtherLink> &ratings) {
    m_ratings = ratings;
    m_ratings_isSet = true;
}

bool OAIAudioItemLinks::is_ratings_Set() const{
    return m_ratings_isSet;
}

bool OAIAudioItemLinks::is_ratings_Valid() const{
    return m_ratings_isValid;
}

QList<OAIOtherLink> OAIAudioItemLinks::getRecommendations() const {
    return m_recommendations;
}
void OAIAudioItemLinks::setRecommendations(const QList<OAIOtherLink> &recommendations) {
    m_recommendations = recommendations;
    m_recommendations_isSet = true;
}

bool OAIAudioItemLinks::is_recommendations_Set() const{
    return m_recommendations_isSet;
}

bool OAIAudioItemLinks::is_recommendations_Valid() const{
    return m_recommendations_isValid;
}

QList<OAIOtherLink> OAIAudioItemLinks::getStreamMetadata() const {
    return m_stream_metadata;
}
void OAIAudioItemLinks::setStreamMetadata(const QList<OAIOtherLink> &stream_metadata) {
    m_stream_metadata = stream_metadata;
    m_stream_metadata_isSet = true;
}

bool OAIAudioItemLinks::is_stream_metadata_Set() const{
    return m_stream_metadata_isSet;
}

bool OAIAudioItemLinks::is_stream_metadata_Valid() const{
    return m_stream_metadata_isValid;
}

QList<OAIOtherLink> OAIAudioItemLinks::getUp() const {
    return m_up;
}
void OAIAudioItemLinks::setUp(const QList<OAIOtherLink> &up) {
    m_up = up;
    m_up_isSet = true;
}

bool OAIAudioItemLinks::is_up_Set() const{
    return m_up_isSet;
}

bool OAIAudioItemLinks::is_up_Valid() const{
    return m_up_isValid;
}

QList<OAIOtherLink> OAIAudioItemLinks::getWeb() const {
    return m_web;
}
void OAIAudioItemLinks::setWeb(const QList<OAIOtherLink> &web) {
    m_web = web;
    m_web_isSet = true;
}

bool OAIAudioItemLinks::is_web_Set() const{
    return m_web_isSet;
}

bool OAIAudioItemLinks::is_web_Valid() const{
    return m_web_isValid;
}

bool OAIAudioItemLinks::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_audio.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_binge.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_image.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_onramps.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ratings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommendations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_up.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_web.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAudioItemLinks::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
