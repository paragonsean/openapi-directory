/**
 * NPR Listening Service
 * Audio recommendations tailored to a user's preferences
 *
 * The version of the OpenAPI document: 2
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageLink.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageLink::OAIImageLink(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageLink::OAIImageLink() {
    this->initializeModel();
}

OAIImageLink::~OAIImageLink() {}

void OAIImageLink::initializeModel() {

    m_href_isSet = false;
    m_href_isValid = false;

    m_caption_isSet = false;
    m_caption_isValid = false;

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_producer_isSet = false;
    m_producer_isValid = false;

    m_provider_isSet = false;
    m_provider_isValid = false;

    m_rel_isSet = false;
    m_rel_isValid = false;
}

void OAIImageLink::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageLink::fromJsonObject(QJsonObject json) {

    m_href_isValid = ::OpenAPI::fromJsonValue(m_href, json[QString("href")]);
    m_href_isSet = !json[QString("href")].isNull() && m_href_isValid;

    m_caption_isValid = ::OpenAPI::fromJsonValue(m_caption, json[QString("caption")]);
    m_caption_isSet = !json[QString("caption")].isNull() && m_caption_isValid;

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("content-type")]);
    m_content_type_isSet = !json[QString("content-type")].isNull() && m_content_type_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_producer_isValid = ::OpenAPI::fromJsonValue(m_producer, json[QString("producer")]);
    m_producer_isSet = !json[QString("producer")].isNull() && m_producer_isValid;

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("provider")]);
    m_provider_isSet = !json[QString("provider")].isNull() && m_provider_isValid;

    m_rel_isValid = ::OpenAPI::fromJsonValue(m_rel, json[QString("rel")]);
    m_rel_isSet = !json[QString("rel")].isNull() && m_rel_isValid;
}

QString OAIImageLink::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageLink::asJsonObject() const {
    QJsonObject obj;
    if (m_href_isSet) {
        obj.insert(QString("href"), ::OpenAPI::toJsonValue(m_href));
    }
    if (m_caption_isSet) {
        obj.insert(QString("caption"), ::OpenAPI::toJsonValue(m_caption));
    }
    if (m_content_type_isSet) {
        obj.insert(QString("content-type"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_image_isSet) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_producer_isSet) {
        obj.insert(QString("producer"), ::OpenAPI::toJsonValue(m_producer));
    }
    if (m_provider_isSet) {
        obj.insert(QString("provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    if (m_rel_isSet) {
        obj.insert(QString("rel"), ::OpenAPI::toJsonValue(m_rel));
    }
    return obj;
}

QString OAIImageLink::getHref() const {
    return m_href;
}
void OAIImageLink::setHref(const QString &href) {
    m_href = href;
    m_href_isSet = true;
}

bool OAIImageLink::is_href_Set() const{
    return m_href_isSet;
}

bool OAIImageLink::is_href_Valid() const{
    return m_href_isValid;
}

QString OAIImageLink::getCaption() const {
    return m_caption;
}
void OAIImageLink::setCaption(const QString &caption) {
    m_caption = caption;
    m_caption_isSet = true;
}

bool OAIImageLink::is_caption_Set() const{
    return m_caption_isSet;
}

bool OAIImageLink::is_caption_Valid() const{
    return m_caption_isValid;
}

QString OAIImageLink::getContentType() const {
    return m_content_type;
}
void OAIImageLink::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIImageLink::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIImageLink::is_content_type_Valid() const{
    return m_content_type_isValid;
}

QString OAIImageLink::getImage() const {
    return m_image;
}
void OAIImageLink::setImage(const QString &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIImageLink::is_image_Set() const{
    return m_image_isSet;
}

bool OAIImageLink::is_image_Valid() const{
    return m_image_isValid;
}

QString OAIImageLink::getProducer() const {
    return m_producer;
}
void OAIImageLink::setProducer(const QString &producer) {
    m_producer = producer;
    m_producer_isSet = true;
}

bool OAIImageLink::is_producer_Set() const{
    return m_producer_isSet;
}

bool OAIImageLink::is_producer_Valid() const{
    return m_producer_isValid;
}

QString OAIImageLink::getProvider() const {
    return m_provider;
}
void OAIImageLink::setProvider(const QString &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAIImageLink::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAIImageLink::is_provider_Valid() const{
    return m_provider_isValid;
}

QString OAIImageLink::getRel() const {
    return m_rel;
}
void OAIImageLink::setRel(const QString &rel) {
    m_rel = rel;
    m_rel_isSet = true;
}

bool OAIImageLink::is_rel_Set() const{
    return m_rel_isSet;
}

bool OAIImageLink::is_rel_Valid() const{
    return m_rel_isValid;
}

bool OAIImageLink::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_href_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_caption_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_producer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rel_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageLink::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_href_isValid && m_content_type_isValid && true;
}

} // namespace OpenAPI
