/**
 * NPR Listening Service
 * Audio recommendations tailored to a user's preferences
 *
 * The version of the OpenAPI document: 2
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOtherLink.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOtherLink::OAIOtherLink(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOtherLink::OAIOtherLink() {
    this->initializeModel();
}

OAIOtherLink::~OAIOtherLink() {}

void OAIOtherLink::initializeModel() {

    m_href_isSet = false;
    m_href_isValid = false;

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_link_text_isSet = false;
    m_link_text_isValid = false;

    m_poll_interval_isSet = false;
    m_poll_interval_isValid = false;
}

void OAIOtherLink::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOtherLink::fromJsonObject(QJsonObject json) {

    m_href_isValid = ::OpenAPI::fromJsonValue(m_href, json[QString("href")]);
    m_href_isSet = !json[QString("href")].isNull() && m_href_isValid;

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("content-type")]);
    m_content_type_isSet = !json[QString("content-type")].isNull() && m_content_type_isValid;

    m_link_text_isValid = ::OpenAPI::fromJsonValue(m_link_text, json[QString("linkText")]);
    m_link_text_isSet = !json[QString("linkText")].isNull() && m_link_text_isValid;

    m_poll_interval_isValid = ::OpenAPI::fromJsonValue(m_poll_interval, json[QString("pollInterval")]);
    m_poll_interval_isSet = !json[QString("pollInterval")].isNull() && m_poll_interval_isValid;
}

QString OAIOtherLink::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOtherLink::asJsonObject() const {
    QJsonObject obj;
    if (m_href_isSet) {
        obj.insert(QString("href"), ::OpenAPI::toJsonValue(m_href));
    }
    if (m_content_type_isSet) {
        obj.insert(QString("content-type"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_link_text_isSet) {
        obj.insert(QString("linkText"), ::OpenAPI::toJsonValue(m_link_text));
    }
    if (m_poll_interval_isSet) {
        obj.insert(QString("pollInterval"), ::OpenAPI::toJsonValue(m_poll_interval));
    }
    return obj;
}

QString OAIOtherLink::getHref() const {
    return m_href;
}
void OAIOtherLink::setHref(const QString &href) {
    m_href = href;
    m_href_isSet = true;
}

bool OAIOtherLink::is_href_Set() const{
    return m_href_isSet;
}

bool OAIOtherLink::is_href_Valid() const{
    return m_href_isValid;
}

QString OAIOtherLink::getContentType() const {
    return m_content_type;
}
void OAIOtherLink::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIOtherLink::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIOtherLink::is_content_type_Valid() const{
    return m_content_type_isValid;
}

QString OAIOtherLink::getLinkText() const {
    return m_link_text;
}
void OAIOtherLink::setLinkText(const QString &link_text) {
    m_link_text = link_text;
    m_link_text_isSet = true;
}

bool OAIOtherLink::is_link_text_Set() const{
    return m_link_text_isSet;
}

bool OAIOtherLink::is_link_text_Valid() const{
    return m_link_text_isValid;
}

qint32 OAIOtherLink::getPollInterval() const {
    return m_poll_interval;
}
void OAIOtherLink::setPollInterval(const qint32 &poll_interval) {
    m_poll_interval = poll_interval;
    m_poll_interval_isSet = true;
}

bool OAIOtherLink::is_poll_interval_Set() const{
    return m_poll_interval_isSet;
}

bool OAIOtherLink::is_poll_interval_Valid() const{
    return m_poll_interval_isValid;
}

bool OAIOtherLink::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_href_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_poll_interval_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOtherLink::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_href_isValid && m_content_type_isValid && true;
}

} // namespace OpenAPI
