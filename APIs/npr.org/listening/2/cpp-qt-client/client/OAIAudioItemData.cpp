/**
 * NPR Listening Service
 * Audio recommendations tailored to a user's preferences
 *
 * The version of the OpenAPI document: 2
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAudioItemData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAudioItemData::OAIAudioItemData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAudioItemData::OAIAudioItemData() {
    this->initializeModel();
}

OAIAudioItemData::~OAIAudioItemData() {}

void OAIAudioItemData::initializeModel() {

    m_album_isSet = false;
    m_album_isValid = false;

    m_artist_isSet = false;
    m_artist_isValid = false;

    m_audio_title_isSet = false;
    m_audio_title_isValid = false;

    m_binge_agg_id_isSet = false;
    m_binge_agg_id_isValid = false;

    m_button_isSet = false;
    m_button_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_expires_isSet = false;
    m_expires_isValid = false;

    m_geofence_isSet = false;
    m_geofence_isValid = false;

    m_in_flow_isSet = false;
    m_in_flow_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_organization_isSet = false;
    m_organization_isValid = false;

    m_primary_isSet = false;
    m_primary_isValid = false;

    m_program_isSet = false;
    m_program_isValid = false;

    m_provider_isSet = false;
    m_provider_isValid = false;

    m_rating_isSet = false;
    m_rating_isValid = false;

    m_rationale_isSet = false;
    m_rationale_isValid = false;

    m_skippable_isSet = false;
    m_skippable_isValid = false;

    m_slug_isSet = false;
    m_slug_isValid = false;

    m_song_isSet = false;
    m_song_isValid = false;

    m_stream_guid_isSet = false;
    m_stream_guid_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;

    m_unavailable_text_isSet = false;
    m_unavailable_text_isValid = false;
}

void OAIAudioItemData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAudioItemData::fromJsonObject(QJsonObject json) {

    m_album_isValid = ::OpenAPI::fromJsonValue(m_album, json[QString("album")]);
    m_album_isSet = !json[QString("album")].isNull() && m_album_isValid;

    m_artist_isValid = ::OpenAPI::fromJsonValue(m_artist, json[QString("artist")]);
    m_artist_isSet = !json[QString("artist")].isNull() && m_artist_isValid;

    m_audio_title_isValid = ::OpenAPI::fromJsonValue(m_audio_title, json[QString("audioTitle")]);
    m_audio_title_isSet = !json[QString("audioTitle")].isNull() && m_audio_title_isValid;

    m_binge_agg_id_isValid = ::OpenAPI::fromJsonValue(m_binge_agg_id, json[QString("bingeAggId")]);
    m_binge_agg_id_isSet = !json[QString("bingeAggId")].isNull() && m_binge_agg_id_isValid;

    m_button_isValid = ::OpenAPI::fromJsonValue(m_button, json[QString("button")]);
    m_button_isSet = !json[QString("button")].isNull() && m_button_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_expires_isValid = ::OpenAPI::fromJsonValue(m_expires, json[QString("expires")]);
    m_expires_isSet = !json[QString("expires")].isNull() && m_expires_isValid;

    m_geofence_isValid = ::OpenAPI::fromJsonValue(m_geofence, json[QString("geofence")]);
    m_geofence_isSet = !json[QString("geofence")].isNull() && m_geofence_isValid;

    m_in_flow_isValid = ::OpenAPI::fromJsonValue(m_in_flow, json[QString("inFlow")]);
    m_in_flow_isSet = !json[QString("inFlow")].isNull() && m_in_flow_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_organization_isValid = ::OpenAPI::fromJsonValue(m_organization, json[QString("organization")]);
    m_organization_isSet = !json[QString("organization")].isNull() && m_organization_isValid;

    m_primary_isValid = ::OpenAPI::fromJsonValue(m_primary, json[QString("primary")]);
    m_primary_isSet = !json[QString("primary")].isNull() && m_primary_isValid;

    m_program_isValid = ::OpenAPI::fromJsonValue(m_program, json[QString("program")]);
    m_program_isSet = !json[QString("program")].isNull() && m_program_isValid;

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("provider")]);
    m_provider_isSet = !json[QString("provider")].isNull() && m_provider_isValid;

    m_rating_isValid = ::OpenAPI::fromJsonValue(m_rating, json[QString("rating")]);
    m_rating_isSet = !json[QString("rating")].isNull() && m_rating_isValid;

    m_rationale_isValid = ::OpenAPI::fromJsonValue(m_rationale, json[QString("rationale")]);
    m_rationale_isSet = !json[QString("rationale")].isNull() && m_rationale_isValid;

    m_skippable_isValid = ::OpenAPI::fromJsonValue(m_skippable, json[QString("skippable")]);
    m_skippable_isSet = !json[QString("skippable")].isNull() && m_skippable_isValid;

    m_slug_isValid = ::OpenAPI::fromJsonValue(m_slug, json[QString("slug")]);
    m_slug_isSet = !json[QString("slug")].isNull() && m_slug_isValid;

    m_song_isValid = ::OpenAPI::fromJsonValue(m_song, json[QString("song")]);
    m_song_isSet = !json[QString("song")].isNull() && m_song_isValid;

    m_stream_guid_isValid = ::OpenAPI::fromJsonValue(m_stream_guid, json[QString("streamGuid")]);
    m_stream_guid_isSet = !json[QString("streamGuid")].isNull() && m_stream_guid_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;

    m_unavailable_text_isValid = ::OpenAPI::fromJsonValue(m_unavailable_text, json[QString("unavailableText")]);
    m_unavailable_text_isSet = !json[QString("unavailableText")].isNull() && m_unavailable_text_isValid;
}

QString OAIAudioItemData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAudioItemData::asJsonObject() const {
    QJsonObject obj;
    if (m_album_isSet) {
        obj.insert(QString("album"), ::OpenAPI::toJsonValue(m_album));
    }
    if (m_artist_isSet) {
        obj.insert(QString("artist"), ::OpenAPI::toJsonValue(m_artist));
    }
    if (m_audio_title_isSet) {
        obj.insert(QString("audioTitle"), ::OpenAPI::toJsonValue(m_audio_title));
    }
    if (m_binge_agg_id_isSet) {
        obj.insert(QString("bingeAggId"), ::OpenAPI::toJsonValue(m_binge_agg_id));
    }
    if (m_button_isSet) {
        obj.insert(QString("button"), ::OpenAPI::toJsonValue(m_button));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_expires_isSet) {
        obj.insert(QString("expires"), ::OpenAPI::toJsonValue(m_expires));
    }
    if (m_geofence.isSet()) {
        obj.insert(QString("geofence"), ::OpenAPI::toJsonValue(m_geofence));
    }
    if (m_in_flow_isSet) {
        obj.insert(QString("inFlow"), ::OpenAPI::toJsonValue(m_in_flow));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_organization.isSet()) {
        obj.insert(QString("organization"), ::OpenAPI::toJsonValue(m_organization));
    }
    if (m_primary_isSet) {
        obj.insert(QString("primary"), ::OpenAPI::toJsonValue(m_primary));
    }
    if (m_program_isSet) {
        obj.insert(QString("program"), ::OpenAPI::toJsonValue(m_program));
    }
    if (m_provider_isSet) {
        obj.insert(QString("provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    if (m_rating.isSet()) {
        obj.insert(QString("rating"), ::OpenAPI::toJsonValue(m_rating));
    }
    if (m_rationale_isSet) {
        obj.insert(QString("rationale"), ::OpenAPI::toJsonValue(m_rationale));
    }
    if (m_skippable_isSet) {
        obj.insert(QString("skippable"), ::OpenAPI::toJsonValue(m_skippable));
    }
    if (m_slug_isSet) {
        obj.insert(QString("slug"), ::OpenAPI::toJsonValue(m_slug));
    }
    if (m_song_isSet) {
        obj.insert(QString("song"), ::OpenAPI::toJsonValue(m_song));
    }
    if (m_stream_guid_isSet) {
        obj.insert(QString("streamGuid"), ::OpenAPI::toJsonValue(m_stream_guid));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    if (m_unavailable_text_isSet) {
        obj.insert(QString("unavailableText"), ::OpenAPI::toJsonValue(m_unavailable_text));
    }
    return obj;
}

QString OAIAudioItemData::getAlbum() const {
    return m_album;
}
void OAIAudioItemData::setAlbum(const QString &album) {
    m_album = album;
    m_album_isSet = true;
}

bool OAIAudioItemData::is_album_Set() const{
    return m_album_isSet;
}

bool OAIAudioItemData::is_album_Valid() const{
    return m_album_isValid;
}

QString OAIAudioItemData::getArtist() const {
    return m_artist;
}
void OAIAudioItemData::setArtist(const QString &artist) {
    m_artist = artist;
    m_artist_isSet = true;
}

bool OAIAudioItemData::is_artist_Set() const{
    return m_artist_isSet;
}

bool OAIAudioItemData::is_artist_Valid() const{
    return m_artist_isValid;
}

QString OAIAudioItemData::getAudioTitle() const {
    return m_audio_title;
}
void OAIAudioItemData::setAudioTitle(const QString &audio_title) {
    m_audio_title = audio_title;
    m_audio_title_isSet = true;
}

bool OAIAudioItemData::is_audio_title_Set() const{
    return m_audio_title_isSet;
}

bool OAIAudioItemData::is_audio_title_Valid() const{
    return m_audio_title_isValid;
}

QString OAIAudioItemData::getBingeAggId() const {
    return m_binge_agg_id;
}
void OAIAudioItemData::setBingeAggId(const QString &binge_agg_id) {
    m_binge_agg_id = binge_agg_id;
    m_binge_agg_id_isSet = true;
}

bool OAIAudioItemData::is_binge_agg_id_Set() const{
    return m_binge_agg_id_isSet;
}

bool OAIAudioItemData::is_binge_agg_id_Valid() const{
    return m_binge_agg_id_isValid;
}

QString OAIAudioItemData::getButton() const {
    return m_button;
}
void OAIAudioItemData::setButton(const QString &button) {
    m_button = button;
    m_button_isSet = true;
}

bool OAIAudioItemData::is_button_Set() const{
    return m_button_isSet;
}

bool OAIAudioItemData::is_button_Valid() const{
    return m_button_isValid;
}

QDateTime OAIAudioItemData::getDate() const {
    return m_date;
}
void OAIAudioItemData::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIAudioItemData::is_date_Set() const{
    return m_date_isSet;
}

bool OAIAudioItemData::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIAudioItemData::getDescription() const {
    return m_description;
}
void OAIAudioItemData::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAudioItemData::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAudioItemData::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIAudioItemData::getDuration() const {
    return m_duration;
}
void OAIAudioItemData::setDuration(const qint32 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIAudioItemData::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIAudioItemData::is_duration_Valid() const{
    return m_duration_isValid;
}

QDateTime OAIAudioItemData::getExpires() const {
    return m_expires;
}
void OAIAudioItemData::setExpires(const QDateTime &expires) {
    m_expires = expires;
    m_expires_isSet = true;
}

bool OAIAudioItemData::is_expires_Set() const{
    return m_expires_isSet;
}

bool OAIAudioItemData::is_expires_Valid() const{
    return m_expires_isValid;
}

OAIGeofence OAIAudioItemData::getGeofence() const {
    return m_geofence;
}
void OAIAudioItemData::setGeofence(const OAIGeofence &geofence) {
    m_geofence = geofence;
    m_geofence_isSet = true;
}

bool OAIAudioItemData::is_geofence_Set() const{
    return m_geofence_isSet;
}

bool OAIAudioItemData::is_geofence_Valid() const{
    return m_geofence_isValid;
}

bool OAIAudioItemData::isInFlow() const {
    return m_in_flow;
}
void OAIAudioItemData::setInFlow(const bool &in_flow) {
    m_in_flow = in_flow;
    m_in_flow_isSet = true;
}

bool OAIAudioItemData::is_in_flow_Set() const{
    return m_in_flow_isSet;
}

bool OAIAudioItemData::is_in_flow_Valid() const{
    return m_in_flow_isValid;
}

QString OAIAudioItemData::getLabel() const {
    return m_label;
}
void OAIAudioItemData::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIAudioItemData::is_label_Set() const{
    return m_label_isSet;
}

bool OAIAudioItemData::is_label_Valid() const{
    return m_label_isValid;
}

OAIRecommendationOrganization OAIAudioItemData::getOrganization() const {
    return m_organization;
}
void OAIAudioItemData::setOrganization(const OAIRecommendationOrganization &organization) {
    m_organization = organization;
    m_organization_isSet = true;
}

bool OAIAudioItemData::is_organization_Set() const{
    return m_organization_isSet;
}

bool OAIAudioItemData::is_organization_Valid() const{
    return m_organization_isValid;
}

bool OAIAudioItemData::isPrimary() const {
    return m_primary;
}
void OAIAudioItemData::setPrimary(const bool &primary) {
    m_primary = primary;
    m_primary_isSet = true;
}

bool OAIAudioItemData::is_primary_Set() const{
    return m_primary_isSet;
}

bool OAIAudioItemData::is_primary_Valid() const{
    return m_primary_isValid;
}

QString OAIAudioItemData::getProgram() const {
    return m_program;
}
void OAIAudioItemData::setProgram(const QString &program) {
    m_program = program;
    m_program_isSet = true;
}

bool OAIAudioItemData::is_program_Set() const{
    return m_program_isSet;
}

bool OAIAudioItemData::is_program_Valid() const{
    return m_program_isValid;
}

QString OAIAudioItemData::getProvider() const {
    return m_provider;
}
void OAIAudioItemData::setProvider(const QString &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAIAudioItemData::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAIAudioItemData::is_provider_Valid() const{
    return m_provider_isValid;
}

OAIRatingData OAIAudioItemData::getRating() const {
    return m_rating;
}
void OAIAudioItemData::setRating(const OAIRatingData &rating) {
    m_rating = rating;
    m_rating_isSet = true;
}

bool OAIAudioItemData::is_rating_Set() const{
    return m_rating_isSet;
}

bool OAIAudioItemData::is_rating_Valid() const{
    return m_rating_isValid;
}

QString OAIAudioItemData::getRationale() const {
    return m_rationale;
}
void OAIAudioItemData::setRationale(const QString &rationale) {
    m_rationale = rationale;
    m_rationale_isSet = true;
}

bool OAIAudioItemData::is_rationale_Set() const{
    return m_rationale_isSet;
}

bool OAIAudioItemData::is_rationale_Valid() const{
    return m_rationale_isValid;
}

bool OAIAudioItemData::isSkippable() const {
    return m_skippable;
}
void OAIAudioItemData::setSkippable(const bool &skippable) {
    m_skippable = skippable;
    m_skippable_isSet = true;
}

bool OAIAudioItemData::is_skippable_Set() const{
    return m_skippable_isSet;
}

bool OAIAudioItemData::is_skippable_Valid() const{
    return m_skippable_isValid;
}

QString OAIAudioItemData::getSlug() const {
    return m_slug;
}
void OAIAudioItemData::setSlug(const QString &slug) {
    m_slug = slug;
    m_slug_isSet = true;
}

bool OAIAudioItemData::is_slug_Set() const{
    return m_slug_isSet;
}

bool OAIAudioItemData::is_slug_Valid() const{
    return m_slug_isValid;
}

QString OAIAudioItemData::getSong() const {
    return m_song;
}
void OAIAudioItemData::setSong(const QString &song) {
    m_song = song;
    m_song_isSet = true;
}

bool OAIAudioItemData::is_song_Set() const{
    return m_song_isSet;
}

bool OAIAudioItemData::is_song_Valid() const{
    return m_song_isValid;
}

QString OAIAudioItemData::getStreamGuid() const {
    return m_stream_guid;
}
void OAIAudioItemData::setStreamGuid(const QString &stream_guid) {
    m_stream_guid = stream_guid;
    m_stream_guid_isSet = true;
}

bool OAIAudioItemData::is_stream_guid_Set() const{
    return m_stream_guid_isSet;
}

bool OAIAudioItemData::is_stream_guid_Valid() const{
    return m_stream_guid_isValid;
}

QString OAIAudioItemData::getTitle() const {
    return m_title;
}
void OAIAudioItemData::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIAudioItemData::is_title_Set() const{
    return m_title_isSet;
}

bool OAIAudioItemData::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIAudioItemData::getType() const {
    return m_type;
}
void OAIAudioItemData::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAudioItemData::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAudioItemData::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIAudioItemData::getUid() const {
    return m_uid;
}
void OAIAudioItemData::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIAudioItemData::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIAudioItemData::is_uid_Valid() const{
    return m_uid_isValid;
}

QString OAIAudioItemData::getUnavailableText() const {
    return m_unavailable_text;
}
void OAIAudioItemData::setUnavailableText(const QString &unavailable_text) {
    m_unavailable_text = unavailable_text;
    m_unavailable_text_isSet = true;
}

bool OAIAudioItemData::is_unavailable_text_Set() const{
    return m_unavailable_text_isSet;
}

bool OAIAudioItemData::is_unavailable_text_Valid() const{
    return m_unavailable_text_isValid;
}

bool OAIAudioItemData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_album_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_artist_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_audio_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_binge_agg_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_button_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_geofence.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_flow_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_program_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rationale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skippable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slug_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_song_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unavailable_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAudioItemData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_rating_isValid && m_rationale_isValid && m_skippable_isValid && m_title_isValid && m_type_isValid && m_uid_isValid && true;
}

} // namespace OpenAPI
