/*
 * NPR Listening Service
 * Audio recommendations tailored to a user's preferences
 *
 * The version of the OpenAPI document: 2
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Branding information for the organization
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:09.518817-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Brand {
  public static final String SERIALIZED_NAME_BAND = "band";
  @SerializedName(SERIALIZED_NAME_BAND)
  private String band;

  public static final String SERIALIZED_NAME_CALL = "call";
  @SerializedName(SERIALIZED_NAME_CALL)
  private String call;

  public static final String SERIALIZED_NAME_FREQUENCY = "frequency";
  @SerializedName(SERIALIZED_NAME_FREQUENCY)
  private String frequency;

  public static final String SERIALIZED_NAME_MARKET_CITY = "marketCity";
  @SerializedName(SERIALIZED_NAME_MARKET_CITY)
  private String marketCity;

  public static final String SERIALIZED_NAME_MARKET_STATE = "marketState";
  @SerializedName(SERIALIZED_NAME_MARKET_STATE)
  private String marketState;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TAGLINE = "tagline";
  @SerializedName(SERIALIZED_NAME_TAGLINE)
  private String tagline;

  public Brand() {
  }

  public Brand band(String band) {
    this.band = band;
    return this;
  }

  /**
   * The radio band for the organization if they are a station (AM or FM)
   * @return band
   */
  @javax.annotation.Nullable
  public String getBand() {
    return band;
  }

  public void setBand(String band) {
    this.band = band;
  }


  public Brand call(String call) {
    this.call = call;
    return this;
  }

  /**
   * The call letter for the organization if they are a station
   * @return call
   */
  @javax.annotation.Nonnull
  public String getCall() {
    return call;
  }

  public void setCall(String call) {
    this.call = call;
  }


  public Brand frequency(String frequency) {
    this.frequency = frequency;
    return this;
  }

  /**
   * The radio frequency for the organization if they are a station
   * @return frequency
   */
  @javax.annotation.Nullable
  public String getFrequency() {
    return frequency;
  }

  public void setFrequency(String frequency) {
    this.frequency = frequency;
  }


  public Brand marketCity(String marketCity) {
    this.marketCity = marketCity;
    return this;
  }

  /**
   * The market city for the organization
   * @return marketCity
   */
  @javax.annotation.Nonnull
  public String getMarketCity() {
    return marketCity;
  }

  public void setMarketCity(String marketCity) {
    this.marketCity = marketCity;
  }


  public Brand marketState(String marketState) {
    this.marketState = marketState;
    return this;
  }

  /**
   * The market state for the organization
   * @return marketState
   */
  @javax.annotation.Nullable
  public String getMarketState() {
    return marketState;
  }

  public void setMarketState(String marketState) {
    this.marketState = marketState;
  }


  public Brand name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the organization
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Brand tagline(String tagline) {
    this.tagline = tagline;
    return this;
  }

  /**
   * The tagline for the organization
   * @return tagline
   */
  @javax.annotation.Nullable
  public String getTagline() {
    return tagline;
  }

  public void setTagline(String tagline) {
    this.tagline = tagline;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Brand brand = (Brand) o;
    return Objects.equals(this.band, brand.band) &&
        Objects.equals(this.call, brand.call) &&
        Objects.equals(this.frequency, brand.frequency) &&
        Objects.equals(this.marketCity, brand.marketCity) &&
        Objects.equals(this.marketState, brand.marketState) &&
        Objects.equals(this.name, brand.name) &&
        Objects.equals(this.tagline, brand.tagline);
  }

  @Override
  public int hashCode() {
    return Objects.hash(band, call, frequency, marketCity, marketState, name, tagline);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Brand {\n");
    sb.append("    band: ").append(toIndentedString(band)).append("\n");
    sb.append("    call: ").append(toIndentedString(call)).append("\n");
    sb.append("    frequency: ").append(toIndentedString(frequency)).append("\n");
    sb.append("    marketCity: ").append(toIndentedString(marketCity)).append("\n");
    sb.append("    marketState: ").append(toIndentedString(marketState)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    tagline: ").append(toIndentedString(tagline)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("band");
    openapiFields.add("call");
    openapiFields.add("frequency");
    openapiFields.add("marketCity");
    openapiFields.add("marketState");
    openapiFields.add("name");
    openapiFields.add("tagline");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("call");
    openapiRequiredFields.add("marketCity");
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Brand
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Brand.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Brand is not found in the empty JSON string", Brand.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Brand.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Brand` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Brand.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("band") != null && !jsonObj.get("band").isJsonNull()) && !jsonObj.get("band").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `band` to be a primitive type in the JSON string but got `%s`", jsonObj.get("band").toString()));
      }
      if (!jsonObj.get("call").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `call` to be a primitive type in the JSON string but got `%s`", jsonObj.get("call").toString()));
      }
      if ((jsonObj.get("frequency") != null && !jsonObj.get("frequency").isJsonNull()) && !jsonObj.get("frequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `frequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("frequency").toString()));
      }
      if (!jsonObj.get("marketCity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `marketCity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("marketCity").toString()));
      }
      if ((jsonObj.get("marketState") != null && !jsonObj.get("marketState").isJsonNull()) && !jsonObj.get("marketState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `marketState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("marketState").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("tagline") != null && !jsonObj.get("tagline").isJsonNull()) && !jsonObj.get("tagline").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tagline` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tagline").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Brand.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Brand' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Brand> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Brand.class));

       return (TypeAdapter<T>) new TypeAdapter<Brand>() {
           @Override
           public void write(JsonWriter out, Brand value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Brand read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Brand given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Brand
   * @throws IOException if the JSON string is invalid with respect to Brand
   */
  public static Brand fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Brand.class);
  }

  /**
   * Convert an instance of Brand to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

