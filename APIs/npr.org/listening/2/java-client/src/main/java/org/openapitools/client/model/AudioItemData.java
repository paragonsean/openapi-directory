/*
 * NPR Listening Service
 * Audio recommendations tailored to a user's preferences
 *
 * The version of the OpenAPI document: 2
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.Geofence;
import org.openapitools.client.model.RatingData;
import org.openapitools.client.model.RecommendationOrganization;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AudioItemData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:09.518817-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AudioItemData {
  public static final String SERIALIZED_NAME_ALBUM = "album";
  @SerializedName(SERIALIZED_NAME_ALBUM)
  private String album;

  public static final String SERIALIZED_NAME_ARTIST = "artist";
  @SerializedName(SERIALIZED_NAME_ARTIST)
  private String artist;

  public static final String SERIALIZED_NAME_AUDIO_TITLE = "audioTitle";
  @SerializedName(SERIALIZED_NAME_AUDIO_TITLE)
  private String audioTitle;

  public static final String SERIALIZED_NAME_BINGE_AGG_ID = "bingeAggId";
  @SerializedName(SERIALIZED_NAME_BINGE_AGG_ID)
  private String bingeAggId;

  public static final String SERIALIZED_NAME_BUTTON = "button";
  @SerializedName(SERIALIZED_NAME_BUTTON)
  private String button;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private OffsetDateTime date;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Integer duration;

  public static final String SERIALIZED_NAME_EXPIRES = "expires";
  @SerializedName(SERIALIZED_NAME_EXPIRES)
  private OffsetDateTime expires;

  public static final String SERIALIZED_NAME_GEOFENCE = "geofence";
  @SerializedName(SERIALIZED_NAME_GEOFENCE)
  private Geofence geofence;

  public static final String SERIALIZED_NAME_IN_FLOW = "inFlow";
  @SerializedName(SERIALIZED_NAME_IN_FLOW)
  private Boolean inFlow;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_ORGANIZATION = "organization";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION)
  private RecommendationOrganization organization;

  public static final String SERIALIZED_NAME_PRIMARY = "primary";
  @SerializedName(SERIALIZED_NAME_PRIMARY)
  private Boolean primary;

  public static final String SERIALIZED_NAME_PROGRAM = "program";
  @SerializedName(SERIALIZED_NAME_PROGRAM)
  private String program;

  public static final String SERIALIZED_NAME_PROVIDER = "provider";
  @SerializedName(SERIALIZED_NAME_PROVIDER)
  private String provider = "NPR";

  public static final String SERIALIZED_NAME_RATING = "rating";
  @SerializedName(SERIALIZED_NAME_RATING)
  private RatingData rating;

  public static final String SERIALIZED_NAME_RATIONALE = "rationale";
  @SerializedName(SERIALIZED_NAME_RATIONALE)
  private String rationale;

  public static final String SERIALIZED_NAME_SKIPPABLE = "skippable";
  @SerializedName(SERIALIZED_NAME_SKIPPABLE)
  private Boolean skippable = true;

  public static final String SERIALIZED_NAME_SLUG = "slug";
  @SerializedName(SERIALIZED_NAME_SLUG)
  private String slug;

  public static final String SERIALIZED_NAME_SONG = "song";
  @SerializedName(SERIALIZED_NAME_SONG)
  private String song;

  public static final String SERIALIZED_NAME_STREAM_GUID = "streamGuid";
  @SerializedName(SERIALIZED_NAME_STREAM_GUID)
  private String streamGuid;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  /**
   * Help determine how content is displayed; for more information, see &lt;a href&#x3D;&#39;https://dev.npr.org/design/general-specifications/playing-audio/&#39;&gt;our design guidelines&lt;/a&gt;
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    AUDIO("audio"),
    
    SPONSORSHIP("sponsorship"),
    
    STATION_ID("stationId"),
    
    INTRO("intro"),
    
    DONATE("donate"),
    
    FEATURE_CARD_INFORMATIONAL("featureCardInformational"),
    
    FEATURE_CARD_NOTIFICATION("featureCardNotification"),
    
    FEATURE_CARD_PROMOTION("featureCardPromotion"),
    
    FEATURE_CARD_EXTERNAL_LINK("featureCardExternalLink"),
    
    FEATURE_CARD_ASYNC_REQUEST("featureCardAsyncRequest");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type = TypeEnum.AUDIO;

  public static final String SERIALIZED_NAME_UID = "uid";
  @SerializedName(SERIALIZED_NAME_UID)
  private String uid;

  public static final String SERIALIZED_NAME_UNAVAILABLE_TEXT = "unavailableText";
  @SerializedName(SERIALIZED_NAME_UNAVAILABLE_TEXT)
  private String unavailableText;

  public AudioItemData() {
  }

  public AudioItemData album(String album) {
    this.album = album;
    return this;
  }

  /**
   * Album information associated with the media
   * @return album
   */
  @javax.annotation.Nullable
  public String getAlbum() {
    return album;
  }

  public void setAlbum(String album) {
    this.album = album;
  }


  public AudioItemData artist(String artist) {
    this.artist = artist;
    return this;
  }

  /**
   * The artist associated with the media
   * @return artist
   */
  @javax.annotation.Nullable
  public String getArtist() {
    return artist;
  }

  public void setArtist(String artist) {
    this.artist = artist;
  }


  public AudioItemData audioTitle(String audioTitle) {
    this.audioTitle = audioTitle;
    return this;
  }

  /**
   * For first-party client use only
   * @return audioTitle
   */
  @javax.annotation.Nullable
  public String getAudioTitle() {
    return audioTitle;
  }

  public void setAudioTitle(String audioTitle) {
    this.audioTitle = audioTitle;
  }


  public AudioItemData bingeAggId(String bingeAggId) {
    this.bingeAggId = bingeAggId;
    return this;
  }

  /**
   * Indicates which aggregration ID this recommendation was binged from
   * @return bingeAggId
   */
  @javax.annotation.Nullable
  public String getBingeAggId() {
    return bingeAggId;
  }

  public void setBingeAggId(String bingeAggId) {
    this.bingeAggId = bingeAggId;
  }


  public AudioItemData button(String button) {
    this.button = button;
    return this;
  }

  /**
   * The text contents of an action button displayed on the client
   * @return button
   */
  @javax.annotation.Nullable
  public String getButton() {
    return button;
  }

  public void setButton(String button) {
    this.button = button;
  }


  public AudioItemData date(OffsetDateTime date) {
    this.date = date;
    return this;
  }

  /**
   * The publication date in ISO-8601 format
   * @return date
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDate() {
    return date;
  }

  public void setDate(OffsetDateTime date) {
    this.date = date;
  }


  public AudioItemData description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A short description or teaser
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public AudioItemData duration(Integer duration) {
    this.duration = duration;
    return this;
  }

  /**
   * The length of the audio content in seconds
   * minimum: 0
   * maximum: 9999
   * @return duration
   */
  @javax.annotation.Nullable
  public Integer getDuration() {
    return duration;
  }

  public void setDuration(Integer duration) {
    this.duration = duration;
  }


  public AudioItemData expires(OffsetDateTime expires) {
    this.expires = expires;
    return this;
  }

  /**
   * The media&#39;s expiration date in ISO-8601 format
   * @return expires
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpires() {
    return expires;
  }

  public void setExpires(OffsetDateTime expires) {
    this.expires = expires;
  }


  public AudioItemData geofence(Geofence geofence) {
    this.geofence = geofence;
    return this;
  }

  /**
   * Get geofence
   * @return geofence
   */
  @javax.annotation.Nullable
  public Geofence getGeofence() {
    return geofence;
  }

  public void setGeofence(Geofence geofence) {
    this.geofence = geofence;
  }


  public AudioItemData inFlow(Boolean inFlow) {
    this.inFlow = inFlow;
    return this;
  }

  /**
   * Indicates the likelihood of being within a flow, useful for stateful playback buttons
   * @return inFlow
   */
  @javax.annotation.Nullable
  public Boolean getInFlow() {
    return inFlow;
  }

  public void setInFlow(Boolean inFlow) {
    this.inFlow = inFlow;
  }


  public AudioItemData label(String label) {
    this.label = label;
    return this;
  }

  /**
   * The record label associated with the media
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  public AudioItemData organization(RecommendationOrganization organization) {
    this.organization = organization;
    return this;
  }

  /**
   * Get organization
   * @return organization
   */
  @javax.annotation.Nullable
  public RecommendationOrganization getOrganization() {
    return organization;
  }

  public void setOrganization(RecommendationOrganization organization) {
    this.organization = organization;
  }


  public AudioItemData primary(Boolean primary) {
    this.primary = primary;
    return this;
  }

  /**
   * Whether the audio is the primary audio of the story to which it is associated
   * @return primary
   */
  @javax.annotation.Nullable
  public Boolean getPrimary() {
    return primary;
  }

  public void setPrimary(Boolean primary) {
    this.primary = primary;
  }


  public AudioItemData program(String program) {
    this.program = program;
    return this;
  }

  /**
   * The program associated with this media
   * @return program
   */
  @javax.annotation.Nullable
  public String getProgram() {
    return program;
  }

  public void setProgram(String program) {
    this.program = program;
  }


  public AudioItemData provider(String provider) {
    this.provider = provider;
    return this;
  }

  /**
   * The name of the organization providing this media
   * @return provider
   */
  @javax.annotation.Nullable
  public String getProvider() {
    return provider;
  }

  public void setProvider(String provider) {
    this.provider = provider;
  }


  public AudioItemData rating(RatingData rating) {
    this.rating = rating;
    return this;
  }

  /**
   * Get rating
   * @return rating
   */
  @javax.annotation.Nonnull
  public RatingData getRating() {
    return rating;
  }

  public void setRating(RatingData rating) {
    this.rating = rating;
  }


  public AudioItemData rationale(String rationale) {
    this.rationale = rationale;
    return this;
  }

  /**
   * A short summary of why this content was recommended
   * @return rationale
   */
  @javax.annotation.Nonnull
  public String getRationale() {
    return rationale;
  }

  public void setRationale(String rationale) {
    this.rationale = rationale;
  }


  public AudioItemData skippable(Boolean skippable) {
    this.skippable = skippable;
    return this;
  }

  /**
   * Whether the client should allow this content to be skipped
   * @return skippable
   */
  @javax.annotation.Nonnull
  public Boolean getSkippable() {
    return skippable;
  }

  public void setSkippable(Boolean skippable) {
    this.skippable = skippable;
  }


  public AudioItemData slug(String slug) {
    this.slug = slug;
    return this;
  }

  /**
   * A tag or category for this media
   * @return slug
   */
  @javax.annotation.Nullable
  public String getSlug() {
    return slug;
  }

  public void setSlug(String slug) {
    this.slug = slug;
  }


  public AudioItemData song(String song) {
    this.song = song;
    return this;
  }

  /**
   * The song title associated with the media
   * @return song
   */
  @javax.annotation.Nullable
  public String getSong() {
    return song;
  }

  public void setSong(String song) {
    this.song = song;
  }


  public AudioItemData streamGuid(String streamGuid) {
    this.streamGuid = streamGuid;
    return this;
  }

  /**
   * The full GUID of the live stream returned within the recommendation
   * @return streamGuid
   */
  @javax.annotation.Nullable
  public String getStreamGuid() {
    return streamGuid;
  }

  public void setStreamGuid(String streamGuid) {
    this.streamGuid = streamGuid;
  }


  public AudioItemData title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The title of this media
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public AudioItemData type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Help determine how content is displayed; for more information, see &lt;a href&#x3D;&#39;https://dev.npr.org/design/general-specifications/playing-audio/&#39;&gt;our design guidelines&lt;/a&gt;
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public AudioItemData uid(String uid) {
    this.uid = uid;
    return this;
  }

  /**
   * The media ID (for use in ratings objects)
   * @return uid
   */
  @javax.annotation.Nonnull
  public String getUid() {
    return uid;
  }

  public void setUid(String uid) {
    this.uid = uid;
  }


  public AudioItemData unavailableText(String unavailableText) {
    this.unavailableText = unavailableText;
    return this;
  }

  /**
   * The text contents to be displayed on the client if no media URLs are available
   * @return unavailableText
   */
  @javax.annotation.Nullable
  public String getUnavailableText() {
    return unavailableText;
  }

  public void setUnavailableText(String unavailableText) {
    this.unavailableText = unavailableText;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AudioItemData audioItemData = (AudioItemData) o;
    return Objects.equals(this.album, audioItemData.album) &&
        Objects.equals(this.artist, audioItemData.artist) &&
        Objects.equals(this.audioTitle, audioItemData.audioTitle) &&
        Objects.equals(this.bingeAggId, audioItemData.bingeAggId) &&
        Objects.equals(this.button, audioItemData.button) &&
        Objects.equals(this.date, audioItemData.date) &&
        Objects.equals(this.description, audioItemData.description) &&
        Objects.equals(this.duration, audioItemData.duration) &&
        Objects.equals(this.expires, audioItemData.expires) &&
        Objects.equals(this.geofence, audioItemData.geofence) &&
        Objects.equals(this.inFlow, audioItemData.inFlow) &&
        Objects.equals(this.label, audioItemData.label) &&
        Objects.equals(this.organization, audioItemData.organization) &&
        Objects.equals(this.primary, audioItemData.primary) &&
        Objects.equals(this.program, audioItemData.program) &&
        Objects.equals(this.provider, audioItemData.provider) &&
        Objects.equals(this.rating, audioItemData.rating) &&
        Objects.equals(this.rationale, audioItemData.rationale) &&
        Objects.equals(this.skippable, audioItemData.skippable) &&
        Objects.equals(this.slug, audioItemData.slug) &&
        Objects.equals(this.song, audioItemData.song) &&
        Objects.equals(this.streamGuid, audioItemData.streamGuid) &&
        Objects.equals(this.title, audioItemData.title) &&
        Objects.equals(this.type, audioItemData.type) &&
        Objects.equals(this.uid, audioItemData.uid) &&
        Objects.equals(this.unavailableText, audioItemData.unavailableText);
  }

  @Override
  public int hashCode() {
    return Objects.hash(album, artist, audioTitle, bingeAggId, button, date, description, duration, expires, geofence, inFlow, label, organization, primary, program, provider, rating, rationale, skippable, slug, song, streamGuid, title, type, uid, unavailableText);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AudioItemData {\n");
    sb.append("    album: ").append(toIndentedString(album)).append("\n");
    sb.append("    artist: ").append(toIndentedString(artist)).append("\n");
    sb.append("    audioTitle: ").append(toIndentedString(audioTitle)).append("\n");
    sb.append("    bingeAggId: ").append(toIndentedString(bingeAggId)).append("\n");
    sb.append("    button: ").append(toIndentedString(button)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    expires: ").append(toIndentedString(expires)).append("\n");
    sb.append("    geofence: ").append(toIndentedString(geofence)).append("\n");
    sb.append("    inFlow: ").append(toIndentedString(inFlow)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    organization: ").append(toIndentedString(organization)).append("\n");
    sb.append("    primary: ").append(toIndentedString(primary)).append("\n");
    sb.append("    program: ").append(toIndentedString(program)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    rating: ").append(toIndentedString(rating)).append("\n");
    sb.append("    rationale: ").append(toIndentedString(rationale)).append("\n");
    sb.append("    skippable: ").append(toIndentedString(skippable)).append("\n");
    sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
    sb.append("    song: ").append(toIndentedString(song)).append("\n");
    sb.append("    streamGuid: ").append(toIndentedString(streamGuid)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("    unavailableText: ").append(toIndentedString(unavailableText)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("album");
    openapiFields.add("artist");
    openapiFields.add("audioTitle");
    openapiFields.add("bingeAggId");
    openapiFields.add("button");
    openapiFields.add("date");
    openapiFields.add("description");
    openapiFields.add("duration");
    openapiFields.add("expires");
    openapiFields.add("geofence");
    openapiFields.add("inFlow");
    openapiFields.add("label");
    openapiFields.add("organization");
    openapiFields.add("primary");
    openapiFields.add("program");
    openapiFields.add("provider");
    openapiFields.add("rating");
    openapiFields.add("rationale");
    openapiFields.add("skippable");
    openapiFields.add("slug");
    openapiFields.add("song");
    openapiFields.add("streamGuid");
    openapiFields.add("title");
    openapiFields.add("type");
    openapiFields.add("uid");
    openapiFields.add("unavailableText");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("rating");
    openapiRequiredFields.add("rationale");
    openapiRequiredFields.add("skippable");
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("uid");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AudioItemData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AudioItemData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AudioItemData is not found in the empty JSON string", AudioItemData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AudioItemData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AudioItemData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AudioItemData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("album") != null && !jsonObj.get("album").isJsonNull()) && !jsonObj.get("album").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `album` to be a primitive type in the JSON string but got `%s`", jsonObj.get("album").toString()));
      }
      if ((jsonObj.get("artist") != null && !jsonObj.get("artist").isJsonNull()) && !jsonObj.get("artist").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `artist` to be a primitive type in the JSON string but got `%s`", jsonObj.get("artist").toString()));
      }
      if ((jsonObj.get("audioTitle") != null && !jsonObj.get("audioTitle").isJsonNull()) && !jsonObj.get("audioTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `audioTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("audioTitle").toString()));
      }
      if ((jsonObj.get("bingeAggId") != null && !jsonObj.get("bingeAggId").isJsonNull()) && !jsonObj.get("bingeAggId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bingeAggId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bingeAggId").toString()));
      }
      if ((jsonObj.get("button") != null && !jsonObj.get("button").isJsonNull()) && !jsonObj.get("button").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `button` to be a primitive type in the JSON string but got `%s`", jsonObj.get("button").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `geofence`
      if (jsonObj.get("geofence") != null && !jsonObj.get("geofence").isJsonNull()) {
        Geofence.validateJsonElement(jsonObj.get("geofence"));
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      // validate the optional field `organization`
      if (jsonObj.get("organization") != null && !jsonObj.get("organization").isJsonNull()) {
        RecommendationOrganization.validateJsonElement(jsonObj.get("organization"));
      }
      if ((jsonObj.get("program") != null && !jsonObj.get("program").isJsonNull()) && !jsonObj.get("program").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `program` to be a primitive type in the JSON string but got `%s`", jsonObj.get("program").toString()));
      }
      if ((jsonObj.get("provider") != null && !jsonObj.get("provider").isJsonNull()) && !jsonObj.get("provider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider").toString()));
      }
      // validate the required field `rating`
      RatingData.validateJsonElement(jsonObj.get("rating"));
      if (!jsonObj.get("rationale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rationale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rationale").toString()));
      }
      if ((jsonObj.get("slug") != null && !jsonObj.get("slug").isJsonNull()) && !jsonObj.get("slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slug").toString()));
      }
      if ((jsonObj.get("song") != null && !jsonObj.get("song").isJsonNull()) && !jsonObj.get("song").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `song` to be a primitive type in the JSON string but got `%s`", jsonObj.get("song").toString()));
      }
      if ((jsonObj.get("streamGuid") != null && !jsonObj.get("streamGuid").isJsonNull()) && !jsonObj.get("streamGuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `streamGuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("streamGuid").toString()));
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
      if (!jsonObj.get("uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid").toString()));
      }
      if ((jsonObj.get("unavailableText") != null && !jsonObj.get("unavailableText").isJsonNull()) && !jsonObj.get("unavailableText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unavailableText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unavailableText").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AudioItemData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AudioItemData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AudioItemData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AudioItemData.class));

       return (TypeAdapter<T>) new TypeAdapter<AudioItemData>() {
           @Override
           public void write(JsonWriter out, AudioItemData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AudioItemData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AudioItemData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AudioItemData
   * @throws IOException if the JSON string is invalid with respect to AudioItemData
   */
  public static AudioItemData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AudioItemData.class);
  }

  /**
   * Convert an instance of AudioItemData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

