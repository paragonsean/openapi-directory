/*
 * NPR Listening Service
 * Audio recommendations tailored to a user's preferences
 *
 * The version of the OpenAPI document: 2
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ImageLink;
import org.openapitools.client.model.OtherLink;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AggregationLinks
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:09.518817-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AggregationLinks {
  public static final String SERIALIZED_NAME_BINGE = "binge";
  @SerializedName(SERIALIZED_NAME_BINGE)
  private List<OtherLink> binge = new ArrayList<>();

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private List<ImageLink> image = new ArrayList<>();

  public static final String SERIALIZED_NAME_MORE = "more";
  @SerializedName(SERIALIZED_NAME_MORE)
  private List<OtherLink> more = new ArrayList<>();

  public static final String SERIALIZED_NAME_WEB = "web";
  @SerializedName(SERIALIZED_NAME_WEB)
  private List<OtherLink> web = new ArrayList<>();

  public AggregationLinks() {
  }

  public AggregationLinks binge(List<OtherLink> binge) {
    this.binge = binge;
    return this;
  }

  public AggregationLinks addBingeItem(OtherLink bingeItem) {
    if (this.binge == null) {
      this.binge = new ArrayList<>();
    }
    this.binge.add(bingeItem);
    return this;
  }

  /**
   * One or more links to more unrated / unheard recommendations from this aggregation
   * @return binge
   */
  @javax.annotation.Nullable
  public List<OtherLink> getBinge() {
    return binge;
  }

  public void setBinge(List<OtherLink> binge) {
    this.binge = binge;
  }


  public AggregationLinks image(List<ImageLink> image) {
    this.image = image;
    return this;
  }

  public AggregationLinks addImageItem(ImageLink imageItem) {
    if (this.image == null) {
      this.image = new ArrayList<>();
    }
    this.image.add(imageItem);
    return this;
  }

  /**
   * One or more links to an image, along with metadata for display
   * @return image
   */
  @javax.annotation.Nullable
  public List<ImageLink> getImage() {
    return image;
  }

  public void setImage(List<ImageLink> image) {
    this.image = image;
  }


  public AggregationLinks more(List<OtherLink> more) {
    this.more = more;
    return this;
  }

  public AggregationLinks addMoreItem(OtherLink moreItem) {
    if (this.more == null) {
      this.more = new ArrayList<>();
    }
    this.more.add(moreItem);
    return this;
  }

  /**
   * One or more links to more episodes for the aggregation
   * @return more
   */
  @javax.annotation.Nullable
  public List<OtherLink> getMore() {
    return more;
  }

  public void setMore(List<OtherLink> more) {
    this.more = more;
  }


  public AggregationLinks web(List<OtherLink> web) {
    this.web = web;
    return this;
  }

  public AggregationLinks addWebItem(OtherLink webItem) {
    if (this.web == null) {
      this.web = new ArrayList<>();
    }
    this.web.add(webItem);
    return this;
  }

  /**
   * One or more links to a web page for the item
   * @return web
   */
  @javax.annotation.Nullable
  public List<OtherLink> getWeb() {
    return web;
  }

  public void setWeb(List<OtherLink> web) {
    this.web = web;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AggregationLinks aggregationLinks = (AggregationLinks) o;
    return Objects.equals(this.binge, aggregationLinks.binge) &&
        Objects.equals(this.image, aggregationLinks.image) &&
        Objects.equals(this.more, aggregationLinks.more) &&
        Objects.equals(this.web, aggregationLinks.web);
  }

  @Override
  public int hashCode() {
    return Objects.hash(binge, image, more, web);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AggregationLinks {\n");
    sb.append("    binge: ").append(toIndentedString(binge)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    more: ").append(toIndentedString(more)).append("\n");
    sb.append("    web: ").append(toIndentedString(web)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("binge");
    openapiFields.add("image");
    openapiFields.add("more");
    openapiFields.add("web");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AggregationLinks
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AggregationLinks.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AggregationLinks is not found in the empty JSON string", AggregationLinks.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AggregationLinks.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AggregationLinks` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("binge") != null && !jsonObj.get("binge").isJsonNull()) {
        JsonArray jsonArraybinge = jsonObj.getAsJsonArray("binge");
        if (jsonArraybinge != null) {
          // ensure the json data is an array
          if (!jsonObj.get("binge").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `binge` to be an array in the JSON string but got `%s`", jsonObj.get("binge").toString()));
          }

          // validate the optional field `binge` (array)
          for (int i = 0; i < jsonArraybinge.size(); i++) {
            OtherLink.validateJsonElement(jsonArraybinge.get(i));
          };
        }
      }
      if (jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) {
        JsonArray jsonArrayimage = jsonObj.getAsJsonArray("image");
        if (jsonArrayimage != null) {
          // ensure the json data is an array
          if (!jsonObj.get("image").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `image` to be an array in the JSON string but got `%s`", jsonObj.get("image").toString()));
          }

          // validate the optional field `image` (array)
          for (int i = 0; i < jsonArrayimage.size(); i++) {
            ImageLink.validateJsonElement(jsonArrayimage.get(i));
          };
        }
      }
      if (jsonObj.get("more") != null && !jsonObj.get("more").isJsonNull()) {
        JsonArray jsonArraymore = jsonObj.getAsJsonArray("more");
        if (jsonArraymore != null) {
          // ensure the json data is an array
          if (!jsonObj.get("more").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `more` to be an array in the JSON string but got `%s`", jsonObj.get("more").toString()));
          }

          // validate the optional field `more` (array)
          for (int i = 0; i < jsonArraymore.size(); i++) {
            OtherLink.validateJsonElement(jsonArraymore.get(i));
          };
        }
      }
      if (jsonObj.get("web") != null && !jsonObj.get("web").isJsonNull()) {
        JsonArray jsonArrayweb = jsonObj.getAsJsonArray("web");
        if (jsonArrayweb != null) {
          // ensure the json data is an array
          if (!jsonObj.get("web").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `web` to be an array in the JSON string but got `%s`", jsonObj.get("web").toString()));
          }

          // validate the optional field `web` (array)
          for (int i = 0; i < jsonArrayweb.size(); i++) {
            OtherLink.validateJsonElement(jsonArrayweb.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AggregationLinks.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AggregationLinks' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AggregationLinks> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AggregationLinks.class));

       return (TypeAdapter<T>) new TypeAdapter<AggregationLinks>() {
           @Override
           public void write(JsonWriter out, AggregationLinks value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AggregationLinks read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AggregationLinks given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AggregationLinks
   * @throws IOException if the JSON string is invalid with respect to AggregationLinks
   */
  public static AggregationLinks fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AggregationLinks.class);
  }

  /**
   * Convert an instance of AggregationLinks to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

