/*
 * NPR Listening Service
 * Audio recommendations tailored to a user's preferences
 *
 * The version of the OpenAPI document: 2
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ChannelData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:09.518817-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChannelData {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * How clients should display this channel in the explore view
   */
  @JsonAdapter(DisplayTypeEnum.Adapter.class)
  public enum DisplayTypeEnum {
    DEFAULT("default"),
    
    SHOW("show"),
    
    PLAYABLE("playable"),
    
    NEWSCAST("newscast");

    private String value;

    DisplayTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DisplayTypeEnum fromValue(String value) {
      for (DisplayTypeEnum b : DisplayTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DisplayTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DisplayTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DisplayTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DisplayTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DisplayTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DISPLAY_TYPE = "displayType";
  @SerializedName(SERIALIZED_NAME_DISPLAY_TYPE)
  private DisplayTypeEnum displayType;

  public static final String SERIALIZED_NAME_EMPTY_TEXT = "emptyText";
  @SerializedName(SERIALIZED_NAME_EMPTY_TEXT)
  private String emptyText;

  public static final String SERIALIZED_NAME_FULL_NAME = "fullName";
  @SerializedName(SERIALIZED_NAME_FULL_NAME)
  private String fullName;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_REFRESH_RULE = "refreshRule";
  @SerializedName(SERIALIZED_NAME_REFRESH_RULE)
  private Integer refreshRule;

  public ChannelData() {
  }

  public ChannelData description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A longer description of what this channel focuses on
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ChannelData displayType(DisplayTypeEnum displayType) {
    this.displayType = displayType;
    return this;
  }

  /**
   * How clients should display this channel in the explore view
   * @return displayType
   */
  @javax.annotation.Nullable
  public DisplayTypeEnum getDisplayType() {
    return displayType;
  }

  public void setDisplayType(DisplayTypeEnum displayType) {
    this.displayType = displayType;
  }


  public ChannelData emptyText(String emptyText) {
    this.emptyText = emptyText;
    return this;
  }

  /**
   * Text for clients to display when the channel contains no recommendations
   * @return emptyText
   */
  @javax.annotation.Nullable
  public String getEmptyText() {
    return emptyText;
  }

  public void setEmptyText(String emptyText) {
    this.emptyText = emptyText;
  }


  public ChannelData fullName(String fullName) {
    this.fullName = fullName;
    return this;
  }

  /**
   * A short description of what this channel focuses on
   * @return fullName
   */
  @javax.annotation.Nonnull
  public String getFullName() {
    return fullName;
  }

  public void setFullName(String fullName) {
    this.fullName = fullName;
  }


  public ChannelData id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The actual value that should be sent
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ChannelData refreshRule(Integer refreshRule) {
    this.refreshRule = refreshRule;
    return this;
  }

  /**
   * In the explore view of a client, this field indicates how this channel should be refreshed.  This is an experimental field and subject to change, but for now zero indicates the client should refresh this channel every time a START rating is sent for a type&#x3D;audio recommendation, while a 1 would indicate it can be refreshed much less often, such as on a 30 minute timer. 2 would indicate even less time to update, say every hour. We are still experimenting on the number of rules necessary and the best implementation for each type of rule. 
   * @return refreshRule
   */
  @javax.annotation.Nullable
  public Integer getRefreshRule() {
    return refreshRule;
  }

  public void setRefreshRule(Integer refreshRule) {
    this.refreshRule = refreshRule;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChannelData channelData = (ChannelData) o;
    return Objects.equals(this.description, channelData.description) &&
        Objects.equals(this.displayType, channelData.displayType) &&
        Objects.equals(this.emptyText, channelData.emptyText) &&
        Objects.equals(this.fullName, channelData.fullName) &&
        Objects.equals(this.id, channelData.id) &&
        Objects.equals(this.refreshRule, channelData.refreshRule);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, displayType, emptyText, fullName, id, refreshRule);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChannelData {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayType: ").append(toIndentedString(displayType)).append("\n");
    sb.append("    emptyText: ").append(toIndentedString(emptyText)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    refreshRule: ").append(toIndentedString(refreshRule)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("displayType");
    openapiFields.add("emptyText");
    openapiFields.add("fullName");
    openapiFields.add("id");
    openapiFields.add("refreshRule");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("fullName");
    openapiRequiredFields.add("id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChannelData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChannelData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChannelData is not found in the empty JSON string", ChannelData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChannelData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChannelData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ChannelData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("displayType") != null && !jsonObj.get("displayType").isJsonNull()) && !jsonObj.get("displayType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayType").toString()));
      }
      // validate the optional field `displayType`
      if (jsonObj.get("displayType") != null && !jsonObj.get("displayType").isJsonNull()) {
        DisplayTypeEnum.validateJsonElement(jsonObj.get("displayType"));
      }
      if ((jsonObj.get("emptyText") != null && !jsonObj.get("emptyText").isJsonNull()) && !jsonObj.get("emptyText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emptyText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emptyText").toString()));
      }
      if (!jsonObj.get("fullName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fullName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fullName").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChannelData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChannelData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChannelData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChannelData.class));

       return (TypeAdapter<T>) new TypeAdapter<ChannelData>() {
           @Override
           public void write(JsonWriter out, ChannelData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChannelData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChannelData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChannelData
   * @throws IOException if the JSON string is invalid with respect to ChannelData
   */
  public static ChannelData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChannelData.class);
  }

  /**
   * Convert an instance of ChannelData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

