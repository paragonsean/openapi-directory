/*
 * NPR Listening Service
 * Audio recommendations tailored to a user's preferences
 *
 * The version of the OpenAPI document: 2
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RatingData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:09.518817-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RatingData {
  public static final String SERIALIZED_NAME_AFFILIATIONS = "affiliations";
  @SerializedName(SERIALIZED_NAME_AFFILIATIONS)
  private List<Object> affiliations = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHANNEL = "channel";
  @SerializedName(SERIALIZED_NAME_CHANNEL)
  private String channel = "npr";

  public static final String SERIALIZED_NAME_COHORT = "cohort";
  @SerializedName(SERIALIZED_NAME_COHORT)
  private String cohort;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Integer duration;

  public static final String SERIALIZED_NAME_ELAPSED = "elapsed";
  @SerializedName(SERIALIZED_NAME_ELAPSED)
  private Integer elapsed;

  public static final String SERIALIZED_NAME_MEDIA_ID = "mediaId";
  @SerializedName(SERIALIZED_NAME_MEDIA_ID)
  private String mediaId;

  public static final String SERIALIZED_NAME_ORIGIN = "origin";
  @SerializedName(SERIALIZED_NAME_ORIGIN)
  private String origin;

  public static final String SERIALIZED_NAME_RATING = "rating";
  @SerializedName(SERIALIZED_NAME_RATING)
  private String rating;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public RatingData() {
  }

  public RatingData affiliations(List<Object> affiliations) {
    this.affiliations = affiliations;
    return this;
  }

  public RatingData addAffiliationsItem(Object affiliationsItem) {
    if (this.affiliations == null) {
      this.affiliations = new ArrayList<>();
    }
    this.affiliations.add(affiliationsItem);
    return this;
  }

  /**
   * An array of IDs &amp; other data about collections or podcasts the user has ratings for; produced by the server and should be sent back as received; used for tracking program and podcast suggestions
   * @return affiliations
   */
  @javax.annotation.Nullable
  public List<Object> getAffiliations() {
    return affiliations;
  }

  public void setAffiliations(List<Object> affiliations) {
    this.affiliations = affiliations;
  }


  public RatingData channel(String channel) {
    this.channel = channel;
    return this;
  }

  /**
   * The channel this media item was pulled from
   * @return channel
   */
  @javax.annotation.Nonnull
  public String getChannel() {
    return channel;
  }

  public void setChannel(String channel) {
    this.channel = channel;
  }


  public RatingData cohort(String cohort) {
    this.cohort = cohort;
    return this;
  }

  /**
   * The primary cohort of the current logged-in user
   * @return cohort
   */
  @javax.annotation.Nonnull
  public String getCohort() {
    return cohort;
  }

  public void setCohort(String cohort) {
    this.cohort = cohort;
  }


  public RatingData duration(Integer duration) {
    this.duration = duration;
    return this;
  }

  /**
   * Number of seconds this audio piece is expected to last
   * minimum: 0
   * maximum: 9999
   * @return duration
   */
  @javax.annotation.Nonnull
  public Integer getDuration() {
    return duration;
  }

  public void setDuration(Integer duration) {
    this.duration = duration;
  }


  public RatingData elapsed(Integer elapsed) {
    this.elapsed = elapsed;
    return this;
  }

  /**
   * Number of seconds since the start of playback for this media item, as an integer
   * minimum: 0
   * maximum: 9999
   * @return elapsed
   */
  @javax.annotation.Nonnull
  public Integer getElapsed() {
    return elapsed;
  }

  public void setElapsed(Integer elapsed) {
    this.elapsed = elapsed;
  }


  public RatingData mediaId(String mediaId) {
    this.mediaId = mediaId;
    return this;
  }

  /**
   * The media id as given by the media object
   * @return mediaId
   */
  @javax.annotation.Nonnull
  public String getMediaId() {
    return mediaId;
  }

  public void setMediaId(String mediaId) {
    this.mediaId = mediaId;
  }


  public RatingData origin(String origin) {
    this.origin = origin;
    return this;
  }

  /**
   * How the recommendation was generated
   * @return origin
   */
  @javax.annotation.Nonnull
  public String getOrigin() {
    return origin;
  }

  public void setOrigin(String origin) {
    this.origin = origin;
  }


  public RatingData rating(String rating) {
    this.rating = rating;
    return this;
  }

  /**
   * String representing the rating
   * @return rating
   */
  @javax.annotation.Nonnull
  public String getRating() {
    return rating;
  }

  public void setRating(String rating) {
    this.rating = rating;
  }


  public RatingData timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * ISO-8601 formatted date/time; typically replaced by the client with the actual rating time
   * @return timestamp
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RatingData ratingData = (RatingData) o;
    return Objects.equals(this.affiliations, ratingData.affiliations) &&
        Objects.equals(this.channel, ratingData.channel) &&
        Objects.equals(this.cohort, ratingData.cohort) &&
        Objects.equals(this.duration, ratingData.duration) &&
        Objects.equals(this.elapsed, ratingData.elapsed) &&
        Objects.equals(this.mediaId, ratingData.mediaId) &&
        Objects.equals(this.origin, ratingData.origin) &&
        Objects.equals(this.rating, ratingData.rating) &&
        Objects.equals(this.timestamp, ratingData.timestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(affiliations, channel, cohort, duration, elapsed, mediaId, origin, rating, timestamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RatingData {\n");
    sb.append("    affiliations: ").append(toIndentedString(affiliations)).append("\n");
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("    cohort: ").append(toIndentedString(cohort)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    elapsed: ").append(toIndentedString(elapsed)).append("\n");
    sb.append("    mediaId: ").append(toIndentedString(mediaId)).append("\n");
    sb.append("    origin: ").append(toIndentedString(origin)).append("\n");
    sb.append("    rating: ").append(toIndentedString(rating)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("affiliations");
    openapiFields.add("channel");
    openapiFields.add("cohort");
    openapiFields.add("duration");
    openapiFields.add("elapsed");
    openapiFields.add("mediaId");
    openapiFields.add("origin");
    openapiFields.add("rating");
    openapiFields.add("timestamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("channel");
    openapiRequiredFields.add("cohort");
    openapiRequiredFields.add("duration");
    openapiRequiredFields.add("elapsed");
    openapiRequiredFields.add("mediaId");
    openapiRequiredFields.add("origin");
    openapiRequiredFields.add("rating");
    openapiRequiredFields.add("timestamp");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RatingData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RatingData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RatingData is not found in the empty JSON string", RatingData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RatingData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RatingData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RatingData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("affiliations") != null && !jsonObj.get("affiliations").isJsonNull() && !jsonObj.get("affiliations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `affiliations` to be an array in the JSON string but got `%s`", jsonObj.get("affiliations").toString()));
      }
      if (!jsonObj.get("channel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channel").toString()));
      }
      if (!jsonObj.get("cohort").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cohort` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cohort").toString()));
      }
      if (!jsonObj.get("mediaId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mediaId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mediaId").toString()));
      }
      if (!jsonObj.get("origin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `origin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("origin").toString()));
      }
      if (!jsonObj.get("rating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rating").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RatingData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RatingData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RatingData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RatingData.class));

       return (TypeAdapter<T>) new TypeAdapter<RatingData>() {
           @Override
           public void write(JsonWriter out, RatingData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RatingData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RatingData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RatingData
   * @throws IOException if the JSON string is invalid with respect to RatingData
   */
  public static RatingData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RatingData.class);
  }

  /**
   * Convert an instance of RatingData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

