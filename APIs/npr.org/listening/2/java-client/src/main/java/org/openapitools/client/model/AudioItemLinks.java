/*
 * NPR Listening Service
 * Audio recommendations tailored to a user's preferences
 *
 * The version of the OpenAPI document: 2
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AudioLink;
import org.openapitools.client.model.ImageLink;
import org.openapitools.client.model.OtherLink;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AudioItemLinks
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:09.518817-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AudioItemLinks {
  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private List<OtherLink> action = new ArrayList<>();

  public static final String SERIALIZED_NAME_AUDIO = "audio";
  @SerializedName(SERIALIZED_NAME_AUDIO)
  private List<AudioLink> audio = new ArrayList<>();

  public static final String SERIALIZED_NAME_BINGE = "binge";
  @SerializedName(SERIALIZED_NAME_BINGE)
  private List<OtherLink> binge = new ArrayList<>();

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private List<ImageLink> image = new ArrayList<>();

  public static final String SERIALIZED_NAME_ONRAMPS = "onramps";
  @SerializedName(SERIALIZED_NAME_ONRAMPS)
  private List<OtherLink> onramps = new ArrayList<>();

  public static final String SERIALIZED_NAME_RATINGS = "ratings";
  @SerializedName(SERIALIZED_NAME_RATINGS)
  private List<OtherLink> ratings = new ArrayList<>();

  public static final String SERIALIZED_NAME_RECOMMENDATIONS = "recommendations";
  @SerializedName(SERIALIZED_NAME_RECOMMENDATIONS)
  private List<OtherLink> recommendations = new ArrayList<>();

  public static final String SERIALIZED_NAME_STREAM_METADATA = "stream-metadata";
  @SerializedName(SERIALIZED_NAME_STREAM_METADATA)
  private List<OtherLink> streamMetadata = new ArrayList<>();

  public static final String SERIALIZED_NAME_UP = "up";
  @SerializedName(SERIALIZED_NAME_UP)
  private List<OtherLink> up = new ArrayList<>();

  public static final String SERIALIZED_NAME_WEB = "web";
  @SerializedName(SERIALIZED_NAME_WEB)
  private List<OtherLink> web = new ArrayList<>();

  public AudioItemLinks() {
  }

  public AudioItemLinks action(List<OtherLink> action) {
    this.action = action;
    return this;
  }

  public AudioItemLinks addActionItem(OtherLink actionItem) {
    if (this.action == null) {
      this.action = new ArrayList<>();
    }
    this.action.add(actionItem);
    return this;
  }

  /**
   * One or more links to be trigged by user actions, usually when a button is clicked
   * @return action
   */
  @javax.annotation.Nullable
  public List<OtherLink> getAction() {
    return action;
  }

  public void setAction(List<OtherLink> action) {
    this.action = action;
  }


  public AudioItemLinks audio(List<AudioLink> audio) {
    this.audio = audio;
    return this;
  }

  public AudioItemLinks addAudioItem(AudioLink audioItem) {
    if (this.audio == null) {
      this.audio = new ArrayList<>();
    }
    this.audio.add(audioItem);
    return this;
  }

  /**
   * One or more links to audio files for the item
   * @return audio
   */
  @javax.annotation.Nullable
  public List<AudioLink> getAudio() {
    return audio;
  }

  public void setAudio(List<AudioLink> audio) {
    this.audio = audio;
  }


  public AudioItemLinks binge(List<OtherLink> binge) {
    this.binge = binge;
    return this;
  }

  public AudioItemLinks addBingeItem(OtherLink bingeItem) {
    if (this.binge == null) {
      this.binge = new ArrayList<>();
    }
    this.binge.add(bingeItem);
    return this;
  }

  /**
   * One or more links that start a flow-based experience focused on the aggregation
   * @return binge
   */
  @javax.annotation.Nullable
  public List<OtherLink> getBinge() {
    return binge;
  }

  public void setBinge(List<OtherLink> binge) {
    this.binge = binge;
  }


  public AudioItemLinks image(List<ImageLink> image) {
    this.image = image;
    return this;
  }

  public AudioItemLinks addImageItem(ImageLink imageItem) {
    if (this.image == null) {
      this.image = new ArrayList<>();
    }
    this.image.add(imageItem);
    return this;
  }

  /**
   * One or more links to an image, along with metadata for display
   * @return image
   */
  @javax.annotation.Nullable
  public List<ImageLink> getImage() {
    return image;
  }

  public void setImage(List<ImageLink> image) {
    this.image = image;
  }


  public AudioItemLinks onramps(List<OtherLink> onramps) {
    this.onramps = onramps;
    return this;
  }

  public AudioItemLinks addOnrampsItem(OtherLink onrampsItem) {
    if (this.onramps == null) {
      this.onramps = new ArrayList<>();
    }
    this.onramps.add(onrampsItem);
    return this;
  }

  /**
   * One or more shareable links for the item
   * @return onramps
   */
  @javax.annotation.Nullable
  public List<OtherLink> getOnramps() {
    return onramps;
  }

  public void setOnramps(List<OtherLink> onramps) {
    this.onramps = onramps;
  }


  public AudioItemLinks ratings(List<OtherLink> ratings) {
    this.ratings = ratings;
    return this;
  }

  public AudioItemLinks addRatingsItem(OtherLink ratingsItem) {
    if (this.ratings == null) {
      this.ratings = new ArrayList<>();
    }
    this.ratings.add(ratingsItem);
    return this;
  }

  /**
   * This is an alternate URL to use to POST the ratings JSON. Difference between this and &#39;recommendations&#39; is that &#39;ratings&#39; will NOT return back recommendations of audio to play next.
   * @return ratings
   */
  @javax.annotation.Nullable
  public List<OtherLink> getRatings() {
    return ratings;
  }

  public void setRatings(List<OtherLink> ratings) {
    this.ratings = ratings;
  }


  public AudioItemLinks recommendations(List<OtherLink> recommendations) {
    this.recommendations = recommendations;
    return this;
  }

  public AudioItemLinks addRecommendationsItem(OtherLink recommendationsItem) {
    if (this.recommendations == null) {
      this.recommendations = new ArrayList<>();
    }
    this.recommendations.add(recommendationsItem);
    return this;
  }

  /**
   * This is the URL that should be POSTed with the ratings JSON when this audio starts to play
   * @return recommendations
   */
  @javax.annotation.Nullable
  public List<OtherLink> getRecommendations() {
    return recommendations;
  }

  public void setRecommendations(List<OtherLink> recommendations) {
    this.recommendations = recommendations;
  }


  public AudioItemLinks streamMetadata(List<OtherLink> streamMetadata) {
    this.streamMetadata = streamMetadata;
    return this;
  }

  public AudioItemLinks addStreamMetadataItem(OtherLink streamMetadataItem) {
    if (this.streamMetadata == null) {
      this.streamMetadata = new ArrayList<>();
    }
    this.streamMetadata.add(streamMetadataItem);
    return this;
  }

  /**
   * Links that can be polled to retreive current program metadata for a given stream
   * @return streamMetadata
   */
  @javax.annotation.Nullable
  public List<OtherLink> getStreamMetadata() {
    return streamMetadata;
  }

  public void setStreamMetadata(List<OtherLink> streamMetadata) {
    this.streamMetadata = streamMetadata;
  }


  public AudioItemLinks up(List<OtherLink> up) {
    this.up = up;
    return this;
  }

  public AudioItemLinks addUpItem(OtherLink upItem) {
    if (this.up == null) {
      this.up = new ArrayList<>();
    }
    this.up.add(upItem);
    return this;
  }

  /**
   * One or more links to more details about the program or podcast with which this item is associated
   * @return up
   */
  @javax.annotation.Nullable
  public List<OtherLink> getUp() {
    return up;
  }

  public void setUp(List<OtherLink> up) {
    this.up = up;
  }


  public AudioItemLinks web(List<OtherLink> web) {
    this.web = web;
    return this;
  }

  public AudioItemLinks addWebItem(OtherLink webItem) {
    if (this.web == null) {
      this.web = new ArrayList<>();
    }
    this.web.add(webItem);
    return this;
  }

  /**
   * One or more links to a web page for the item
   * @return web
   */
  @javax.annotation.Nullable
  public List<OtherLink> getWeb() {
    return web;
  }

  public void setWeb(List<OtherLink> web) {
    this.web = web;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AudioItemLinks audioItemLinks = (AudioItemLinks) o;
    return Objects.equals(this.action, audioItemLinks.action) &&
        Objects.equals(this.audio, audioItemLinks.audio) &&
        Objects.equals(this.binge, audioItemLinks.binge) &&
        Objects.equals(this.image, audioItemLinks.image) &&
        Objects.equals(this.onramps, audioItemLinks.onramps) &&
        Objects.equals(this.ratings, audioItemLinks.ratings) &&
        Objects.equals(this.recommendations, audioItemLinks.recommendations) &&
        Objects.equals(this.streamMetadata, audioItemLinks.streamMetadata) &&
        Objects.equals(this.up, audioItemLinks.up) &&
        Objects.equals(this.web, audioItemLinks.web);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, audio, binge, image, onramps, ratings, recommendations, streamMetadata, up, web);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AudioItemLinks {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    audio: ").append(toIndentedString(audio)).append("\n");
    sb.append("    binge: ").append(toIndentedString(binge)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    onramps: ").append(toIndentedString(onramps)).append("\n");
    sb.append("    ratings: ").append(toIndentedString(ratings)).append("\n");
    sb.append("    recommendations: ").append(toIndentedString(recommendations)).append("\n");
    sb.append("    streamMetadata: ").append(toIndentedString(streamMetadata)).append("\n");
    sb.append("    up: ").append(toIndentedString(up)).append("\n");
    sb.append("    web: ").append(toIndentedString(web)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("audio");
    openapiFields.add("binge");
    openapiFields.add("image");
    openapiFields.add("onramps");
    openapiFields.add("ratings");
    openapiFields.add("recommendations");
    openapiFields.add("stream-metadata");
    openapiFields.add("up");
    openapiFields.add("web");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AudioItemLinks
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AudioItemLinks.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AudioItemLinks is not found in the empty JSON string", AudioItemLinks.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AudioItemLinks.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AudioItemLinks` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("action") != null && !jsonObj.get("action").isJsonNull()) {
        JsonArray jsonArrayaction = jsonObj.getAsJsonArray("action");
        if (jsonArrayaction != null) {
          // ensure the json data is an array
          if (!jsonObj.get("action").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `action` to be an array in the JSON string but got `%s`", jsonObj.get("action").toString()));
          }

          // validate the optional field `action` (array)
          for (int i = 0; i < jsonArrayaction.size(); i++) {
            OtherLink.validateJsonElement(jsonArrayaction.get(i));
          };
        }
      }
      if (jsonObj.get("audio") != null && !jsonObj.get("audio").isJsonNull()) {
        JsonArray jsonArrayaudio = jsonObj.getAsJsonArray("audio");
        if (jsonArrayaudio != null) {
          // ensure the json data is an array
          if (!jsonObj.get("audio").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `audio` to be an array in the JSON string but got `%s`", jsonObj.get("audio").toString()));
          }

          // validate the optional field `audio` (array)
          for (int i = 0; i < jsonArrayaudio.size(); i++) {
            AudioLink.validateJsonElement(jsonArrayaudio.get(i));
          };
        }
      }
      if (jsonObj.get("binge") != null && !jsonObj.get("binge").isJsonNull()) {
        JsonArray jsonArraybinge = jsonObj.getAsJsonArray("binge");
        if (jsonArraybinge != null) {
          // ensure the json data is an array
          if (!jsonObj.get("binge").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `binge` to be an array in the JSON string but got `%s`", jsonObj.get("binge").toString()));
          }

          // validate the optional field `binge` (array)
          for (int i = 0; i < jsonArraybinge.size(); i++) {
            OtherLink.validateJsonElement(jsonArraybinge.get(i));
          };
        }
      }
      if (jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) {
        JsonArray jsonArrayimage = jsonObj.getAsJsonArray("image");
        if (jsonArrayimage != null) {
          // ensure the json data is an array
          if (!jsonObj.get("image").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `image` to be an array in the JSON string but got `%s`", jsonObj.get("image").toString()));
          }

          // validate the optional field `image` (array)
          for (int i = 0; i < jsonArrayimage.size(); i++) {
            ImageLink.validateJsonElement(jsonArrayimage.get(i));
          };
        }
      }
      if (jsonObj.get("onramps") != null && !jsonObj.get("onramps").isJsonNull()) {
        JsonArray jsonArrayonramps = jsonObj.getAsJsonArray("onramps");
        if (jsonArrayonramps != null) {
          // ensure the json data is an array
          if (!jsonObj.get("onramps").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `onramps` to be an array in the JSON string but got `%s`", jsonObj.get("onramps").toString()));
          }

          // validate the optional field `onramps` (array)
          for (int i = 0; i < jsonArrayonramps.size(); i++) {
            OtherLink.validateJsonElement(jsonArrayonramps.get(i));
          };
        }
      }
      if (jsonObj.get("ratings") != null && !jsonObj.get("ratings").isJsonNull()) {
        JsonArray jsonArrayratings = jsonObj.getAsJsonArray("ratings");
        if (jsonArrayratings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ratings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ratings` to be an array in the JSON string but got `%s`", jsonObj.get("ratings").toString()));
          }

          // validate the optional field `ratings` (array)
          for (int i = 0; i < jsonArrayratings.size(); i++) {
            OtherLink.validateJsonElement(jsonArrayratings.get(i));
          };
        }
      }
      if (jsonObj.get("recommendations") != null && !jsonObj.get("recommendations").isJsonNull()) {
        JsonArray jsonArrayrecommendations = jsonObj.getAsJsonArray("recommendations");
        if (jsonArrayrecommendations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("recommendations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `recommendations` to be an array in the JSON string but got `%s`", jsonObj.get("recommendations").toString()));
          }

          // validate the optional field `recommendations` (array)
          for (int i = 0; i < jsonArrayrecommendations.size(); i++) {
            OtherLink.validateJsonElement(jsonArrayrecommendations.get(i));
          };
        }
      }
      if (jsonObj.get("stream-metadata") != null && !jsonObj.get("stream-metadata").isJsonNull()) {
        JsonArray jsonArraystreamMetadata = jsonObj.getAsJsonArray("stream-metadata");
        if (jsonArraystreamMetadata != null) {
          // ensure the json data is an array
          if (!jsonObj.get("stream-metadata").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `stream-metadata` to be an array in the JSON string but got `%s`", jsonObj.get("stream-metadata").toString()));
          }

          // validate the optional field `stream-metadata` (array)
          for (int i = 0; i < jsonArraystreamMetadata.size(); i++) {
            OtherLink.validateJsonElement(jsonArraystreamMetadata.get(i));
          };
        }
      }
      if (jsonObj.get("up") != null && !jsonObj.get("up").isJsonNull()) {
        JsonArray jsonArrayup = jsonObj.getAsJsonArray("up");
        if (jsonArrayup != null) {
          // ensure the json data is an array
          if (!jsonObj.get("up").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `up` to be an array in the JSON string but got `%s`", jsonObj.get("up").toString()));
          }

          // validate the optional field `up` (array)
          for (int i = 0; i < jsonArrayup.size(); i++) {
            OtherLink.validateJsonElement(jsonArrayup.get(i));
          };
        }
      }
      if (jsonObj.get("web") != null && !jsonObj.get("web").isJsonNull()) {
        JsonArray jsonArrayweb = jsonObj.getAsJsonArray("web");
        if (jsonArrayweb != null) {
          // ensure the json data is an array
          if (!jsonObj.get("web").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `web` to be an array in the JSON string but got `%s`", jsonObj.get("web").toString()));
          }

          // validate the optional field `web` (array)
          for (int i = 0; i < jsonArrayweb.size(); i++) {
            OtherLink.validateJsonElement(jsonArrayweb.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AudioItemLinks.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AudioItemLinks' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AudioItemLinks> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AudioItemLinks.class));

       return (TypeAdapter<T>) new TypeAdapter<AudioItemLinks>() {
           @Override
           public void write(JsonWriter out, AudioItemLinks value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AudioItemLinks read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AudioItemLinks given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AudioItemLinks
   * @throws IOException if the JSON string is invalid with respect to AudioItemLinks
   */
  public static AudioItemLinks fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AudioItemLinks.class);
  }

  /**
   * Convert an instance of AudioItemLinks to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

