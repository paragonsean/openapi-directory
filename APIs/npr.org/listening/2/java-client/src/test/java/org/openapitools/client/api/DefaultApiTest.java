/*
 * NPR Listening Service
 * Audio recommendations tailored to a user's preferences
 *
 * The version of the OpenAPI document: 2
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AggregationAudioItemListDocument;
import org.openapitools.client.model.AudioItemListDocument;
import org.openapitools.client.model.ChannelsDocument;
import org.openapitools.client.model.ErrorDocument;
import java.time.OffsetDateTime;
import org.openapitools.client.model.OrganizationCategoryAudioListDocument;
import org.openapitools.client.model.OrganizationOverviewDocument;
import org.openapitools.client.model.RatingData;
import org.openapitools.client.model.SearchListDocument;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Get a set of recommendations for an aggregation independent of the user&#39;s listening history
     *
     * This endpoint provides a list of recent audio items associated with the aggregation along with metadata about the aggregation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAggRecommendationsTest() throws ApiException {
        Long aggId = null;
        String authorization = null;
        Integer startNum = null;
        AggregationAudioItemListDocument response = api.getAggRecommendations(aggId, authorization, startNum);
        // TODO: test validations
    }

    /**
     * Get the list of available channels
     *
     * These channels allow the user to specify a focus for the content returned in the recommendations endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChannelsTest() throws ApiException {
        String authorization = null;
        Boolean exploreOnly = null;
        ChannelsDocument response = api.getChannels(authorization, exploreOnly);
        // TODO: test validations
    }

    /**
     * Get recent ratings the logged-in user has submitted
     *
     * This endpoint provides the list of recently-rated audio recommendations that the logged-in user has consumed. Some rated recommendations are filtered, such as sponsorship and donation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getHistoryTest() throws ApiException {
        String authorization = null;
        AudioItemListDocument response = api.getHistory(authorization);
        // TODO: test validations
    }

    /**
     * Get a list of recommendations from a category of content from an organization
     *
     * This endpoint provides a list of recommendations from a category of content from  an organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationCategoryTest() throws ApiException {
        Long orgId = null;
        String category = null;
        String authorization = null;
        OrganizationCategoryAudioListDocument response = api.getOrganizationCategory(orgId, category, authorization);
        // TODO: test validations
    }

    /**
     * Get a variety of details about an organization including various lists of recent audio items
     *
     * This endpoint provides a variety of details about an organization including various lists of recent audio items.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationOverviewTest() throws ApiException {
        Long orgId = null;
        String authorization = null;
        OrganizationOverviewDocument response = api.getOrganizationOverview(orgId, authorization);
        // TODO: test validations
    }

    /**
     * Retrieve the most recent promo audio heard by the logged-in user
     *
     * Gets the most recently played promo for which the user has neither tapped through the promo or listened to the target story.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPromoTest() throws ApiException {
        String authorization = null;
        AudioItemListDocument response = api.getPromo(authorization);
        // TODO: test validations
    }

    /**
     * Get a list of media for the logged-in user from NPR&#39;s recommendation engine
     *
     * This endpoint returns a list of audio recommendations. It is designed to be used for an initial list of recommendations, and then &#x60;POST /v2/ratings?recommend&#x3D;true&#x60; should be used for subsequent requests for recommendations.  A fully-populated link to the ratings endpoint is returned with each individual recommendation and is located in the AudioItemDocument under the &#x60;links[&#39;recommendations&#39;]&#x60; object. The query parameters in this link should not be modified. Be sure to copy and send back the entire ratings object (RatingData), as new fields may be added to it in the future.  A 500 will be returned if there are no eligible remaining recommendations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecommendationsTest() throws ApiException {
        String authorization = null;
        String xAdvertisingID = null;
        String channel = null;
        String sharedMediaId = null;
        String notifiedMediaId = null;
        AudioItemListDocument response = api.getRecommendations(authorization, xAdvertisingID, channel, sharedMediaId, notifiedMediaId);
        // TODO: test validations
    }

    /**
     * Get a list of recent audio and aggregation items associated with search terms
     *
     * In the schema shown below, SearchItemDocument is not an actual type of returned object; the object returned by a search will be either an AggregationAudioItemListDocument or an AudioItemDocument.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSearchRecommendationsTest() throws ApiException {
        String authorization = null;
        String searchTerms = null;
        SearchListDocument response = api.getSearchRecommendations(authorization, searchTerms);
        // TODO: test validations
    }

    /**
     * Collect new ratings for media previously recommended to the logged-in user
     *
     * This endpoint is the main mechanism for providing feedback from the user to NPR about the recommendations that are obtained from &#x60;GET /listening/v2/recommendations&#x60;.  A fully-populated link to this endpoint is returned with each individual recommendation and is located in the AudioItemDocument under the &#x60;links[&#39;recommendations&#39;]&#x60; object. The query parameters in this link should not be modified. Be sure to copy and send back the entire ratings object (RatingData), as new fields may be added to it in the future.  This endpoint can return a blank JSON.doc or AudioItemDocument depending on the &#x60;recommend&#x3D;true|false&#x60; parameter. The &#x60;recommend&#x3D;true&#x60; flag allows this endpoint to both receive ratings and send back recommendations in the same call.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postRatingTest() throws ApiException {
        String authorization = null;
        List<RatingData> body = null;
        String xAdvertisingID = null;
        String channel = null;
        Boolean recommend = null;
        AudioItemListDocument response = api.postRating(authorization, body, xAdvertisingID, channel, recommend);
        // TODO: test validations
    }

}
