/**
 * NPR Listening Service
 * Audio recommendations tailored to a user's preferences
 *
 * The version of the OpenAPI document: 2
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AggregationAudioItemListDocument from '../model/AggregationAudioItemListDocument';
import AudioItemListDocument from '../model/AudioItemListDocument';
import ChannelsDocument from '../model/ChannelsDocument';
import ErrorDocument from '../model/ErrorDocument';
import OrganizationCategoryAudioListDocument from '../model/OrganizationCategoryAudioListDocument';
import OrganizationOverviewDocument from '../model/OrganizationOverviewDocument';
import RatingData from '../model/RatingData';
import SearchListDocument from '../model/SearchListDocument';

/**
* Default service.
* @module api/DefaultApi
* @version 2
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAggRecommendations operation.
     * @callback module:api/DefaultApi~getAggRecommendationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AggregationAudioItemListDocument} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a set of recommendations for an aggregation independent of the user's listening history
     * This endpoint provides a list of recent audio items associated with the aggregation along with metadata about the aggregation.
     * @param {Number} aggId ID of an aggregation such as a program or podcast. If the specified ID is a program that publishes rundowns, the latest rundown will be returned.
     * @param {String} authorization Your access token from the Authorization Service. Should start with `Bearer`, followed by a space, followed by the token.
     * @param {Object} opts Optional parameters
     * @param {Number} [startNum = 0)] The result to start with. Allows paging through the episodes of a podcast or program, with the default, `startNum=0`, being the most recent episode. Ignored for programs that publish a rundown.
     * @param {module:api/DefaultApi~getAggRecommendationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AggregationAudioItemListDocument}
     */
    getAggRecommendations(aggId, authorization, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'aggId' is set
      if (aggId === undefined || aggId === null) {
        throw new Error("Missing the required parameter 'aggId' when calling getAggRecommendations");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getAggRecommendations");
      }

      let pathParams = {
        'aggId': aggId
      };
      let queryParams = {
        'startNum': opts['startNum']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/vnd.collection.doc+json'];
      let returnType = AggregationAudioItemListDocument;
      return this.apiClient.callApi(
        '/v2/aggregation/{aggId}/recommendations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChannels operation.
     * @callback module:api/DefaultApi~getChannelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChannelsDocument} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of available channels
     * These channels allow the user to specify a focus for the content returned in the recommendations endpoint.
     * @param {String} authorization Your access token from the Authorization Service. Should start with `Bearer`, followed by a space, followed by the token.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [exploreOnly = false)] If set to `true`, this call will return only channels that should be shown in the client's `Explore` view
     * @param {module:api/DefaultApi~getChannelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChannelsDocument}
     */
    getChannels(authorization, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getChannels");
      }

      let pathParams = {
      };
      let queryParams = {
        'exploreOnly': opts['exploreOnly']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/vnd.collection.doc+json'];
      let returnType = ChannelsDocument;
      return this.apiClient.callApi(
        '/v2/channels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getHistory operation.
     * @callback module:api/DefaultApi~getHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AudioItemListDocument} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get recent ratings the logged-in user has submitted
     * This endpoint provides the list of recently-rated audio recommendations that the logged-in user has consumed. Some rated recommendations are filtered, such as sponsorship and donation.
     * @param {String} authorization Your access token from the Authorization Service. Should start with `Bearer`, followed by a space, followed by the token.
     * @param {module:api/DefaultApi~getHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AudioItemListDocument}
     */
    getHistory(authorization, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getHistory");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/vnd.collection.doc+json'];
      let returnType = AudioItemListDocument;
      return this.apiClient.callApi(
        '/v2/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationCategory operation.
     * @callback module:api/DefaultApi~getOrganizationCategoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrganizationCategoryAudioListDocument} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of recommendations from a category of content from an organization
     * This endpoint provides a list of recommendations from a category of content from  an organization.
     * @param {Number} orgId ID of an organization, such as an NPR One station
     * @param {module:model/String} category One of the three categories of content - newscast, story, or podcast
     * @param {String} authorization Your access token from the Authorization Service. Should start with `Bearer`, followed by a space, followed by the token.
     * @param {module:api/DefaultApi~getOrganizationCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrganizationCategoryAudioListDocument}
     */
    getOrganizationCategory(orgId, category, authorization, callback) {
      let postBody = null;
      // verify the required parameter 'orgId' is set
      if (orgId === undefined || orgId === null) {
        throw new Error("Missing the required parameter 'orgId' when calling getOrganizationCategory");
      }
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling getOrganizationCategory");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getOrganizationCategory");
      }

      let pathParams = {
        'orgId': orgId,
        'category': category
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/vnd.collection.doc+json'];
      let returnType = OrganizationCategoryAudioListDocument;
      return this.apiClient.callApi(
        '/v2/organizations/{orgId}/categories/{category}/recommendations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationOverview operation.
     * @callback module:api/DefaultApi~getOrganizationOverviewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrganizationOverviewDocument} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a variety of details about an organization including various lists of recent audio items
     * This endpoint provides a variety of details about an organization including various lists of recent audio items.
     * @param {Number} orgId ID of an organization, such as an NPR One station
     * @param {String} authorization Your access token from the Authorization Service. Should start with `Bearer`, followed by a space, followed by the token.
     * @param {module:api/DefaultApi~getOrganizationOverviewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrganizationOverviewDocument}
     */
    getOrganizationOverview(orgId, authorization, callback) {
      let postBody = null;
      // verify the required parameter 'orgId' is set
      if (orgId === undefined || orgId === null) {
        throw new Error("Missing the required parameter 'orgId' when calling getOrganizationOverview");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getOrganizationOverview");
      }

      let pathParams = {
        'orgId': orgId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/vnd.collection.doc+json'];
      let returnType = OrganizationOverviewDocument;
      return this.apiClient.callApi(
        '/v2/organizations/{orgId}/recommendations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPromo operation.
     * @callback module:api/DefaultApi~getPromoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AudioItemListDocument} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the most recent promo audio heard by the logged-in user
     * Gets the most recently played promo for which the user has neither tapped through the promo or listened to the target story.
     * @param {String} authorization Your access token from the Authorization Service. Should start with `Bearer`, followed by a space, followed by the token.
     * @param {module:api/DefaultApi~getPromoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AudioItemListDocument}
     */
    getPromo(authorization, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getPromo");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/vnd.collection.doc+json'];
      let returnType = AudioItemListDocument;
      return this.apiClient.callApi(
        '/v2/promo/recommendations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecommendations operation.
     * @callback module:api/DefaultApi~getRecommendationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AudioItemListDocument} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of media for the logged-in user from NPR's recommendation engine
     * This endpoint returns a list of audio recommendations. It is designed to be used for an initial list of recommendations, and then `POST /v2/ratings?recommend=true` should be used for subsequent requests for recommendations.  A fully-populated link to the ratings endpoint is returned with each individual recommendation and is located in the AudioItemDocument under the `links['recommendations']` object. The query parameters in this link should not be modified. Be sure to copy and send back the entire ratings object (RatingData), as new fields may be added to it in the future.  A 500 will be returned if there are no eligible remaining recommendations.
     * @param {String} authorization Your access token from the Authorization Service. Should start with `Bearer`, followed by a space, followed by the token.
     * @param {Object} opts Optional parameters
     * @param {String} [xAdvertisingID] A device-specific advertising identifier, if possible. Apple's IDFA is an example.
     * @param {module:model/String} [channel = 'npr')] Determines the focus of the recommendations returned. Channel `npr` is recommended for most use cases.
     * @param {String} [sharedMediaId] This media was shared directly with the user; if provided, the service will add this recommendation to the top of the list
     * @param {String} [notifiedMediaId] The user received a push notification about this media; if provided, the service will add this recommendation to the top of the list
     * @param {module:api/DefaultApi~getRecommendationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AudioItemListDocument}
     */
    getRecommendations(authorization, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getRecommendations");
      }

      let pathParams = {
      };
      let queryParams = {
        'channel': opts['channel'],
        'sharedMediaId': opts['sharedMediaId'],
        'notifiedMediaId': opts['notifiedMediaId']
      };
      let headerParams = {
        'Authorization': authorization,
        'X-Advertising-ID': opts['xAdvertisingID']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/vnd.collection.doc+json'];
      let returnType = AudioItemListDocument;
      return this.apiClient.callApi(
        '/v2/recommendations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSearchRecommendations operation.
     * @callback module:api/DefaultApi~getSearchRecommendationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchListDocument} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of recent audio and aggregation items associated with search terms
     * In the schema shown below, SearchItemDocument is not an actual type of returned object; the object returned by a search will be either an AggregationAudioItemListDocument or an AudioItemDocument.
     * @param {String} authorization Your access token from the Authorization Service. Should start with `Bearer`, followed by a space, followed by the token.
     * @param {String} searchTerms Search terms to search on; can include URL-encoded punctuation
     * @param {module:api/DefaultApi~getSearchRecommendationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchListDocument}
     */
    getSearchRecommendations(authorization, searchTerms, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getSearchRecommendations");
      }
      // verify the required parameter 'searchTerms' is set
      if (searchTerms === undefined || searchTerms === null) {
        throw new Error("Missing the required parameter 'searchTerms' when calling getSearchRecommendations");
      }

      let pathParams = {
      };
      let queryParams = {
        'searchTerms': searchTerms
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/vnd.collection.doc+json'];
      let returnType = SearchListDocument;
      return this.apiClient.callApi(
        '/v2/search/recommendations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postRating operation.
     * @callback module:api/DefaultApi~postRatingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AudioItemListDocument} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Collect new ratings for media previously recommended to the logged-in user
     * This endpoint is the main mechanism for providing feedback from the user to NPR about the recommendations that are obtained from `GET /listening/v2/recommendations`.  A fully-populated link to this endpoint is returned with each individual recommendation and is located in the AudioItemDocument under the `links['recommendations']` object. The query parameters in this link should not be modified. Be sure to copy and send back the entire ratings object (RatingData), as new fields may be added to it in the future.  This endpoint can return a blank JSON.doc or AudioItemDocument depending on the `recommend=true|false` parameter. The `recommend=true` flag allows this endpoint to both receive ratings and send back recommendations in the same call.
     * @param {String} authorization Your access token from the Authorization Service. Should start with `Bearer`, followed by a space, followed by the token.
     * @param {Array.<module:model/RatingData>} body A list of RatingData objects which contains data about ratings such as the id of the content, the rating value, elapsed time and more.
     * @param {Object} opts Optional parameters
     * @param {String} [xAdvertisingID] A device-specific advertising identifier, if possible. Apple's IDFA is an example.
     * @param {module:model/String} [channel = 'npr')] Determines the focus of the recommendations returned. Channel `npr` is recommended for most use cases.
     * @param {Boolean} [recommend = true)] If set to `false`, this call will return a blank document; otherwise it will return a new recommendation object
     * @param {module:api/DefaultApi~postRatingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AudioItemListDocument}
     */
    postRating(authorization, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling postRating");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postRating");
      }

      let pathParams = {
      };
      let queryParams = {
        'channel': opts['channel'],
        'recommend': opts['recommend']
      };
      let headerParams = {
        'Authorization': authorization,
        'X-Advertising-ID': opts['xAdvertisingID']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/vnd.collection.doc+json'];
      let returnType = AudioItemListDocument;
      return this.apiClient.callApi(
        '/v2/ratings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
