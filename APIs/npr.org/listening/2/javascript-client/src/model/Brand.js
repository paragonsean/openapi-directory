/**
 * NPR Listening Service
 * Audio recommendations tailored to a user's preferences
 *
 * The version of the OpenAPI document: 2
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Brand model module.
 * @module model/Brand
 * @version 2
 */
class Brand {
    /**
     * Constructs a new <code>Brand</code>.
     * Branding information for the organization
     * @alias module:model/Brand
     * @param call {String} The call letter for the organization if they are a station
     * @param marketCity {String} The market city for the organization
     * @param name {String} The name of the organization
     */
    constructor(call, marketCity, name) { 
        
        Brand.initialize(this, call, marketCity, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, call, marketCity, name) { 
        obj['call'] = call;
        obj['marketCity'] = marketCity;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>Brand</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Brand} obj Optional instance to populate.
     * @return {module:model/Brand} The populated <code>Brand</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Brand();

            if (data.hasOwnProperty('band')) {
                obj['band'] = ApiClient.convertToType(data['band'], 'String');
            }
            if (data.hasOwnProperty('call')) {
                obj['call'] = ApiClient.convertToType(data['call'], 'String');
            }
            if (data.hasOwnProperty('frequency')) {
                obj['frequency'] = ApiClient.convertToType(data['frequency'], 'String');
            }
            if (data.hasOwnProperty('marketCity')) {
                obj['marketCity'] = ApiClient.convertToType(data['marketCity'], 'String');
            }
            if (data.hasOwnProperty('marketState')) {
                obj['marketState'] = ApiClient.convertToType(data['marketState'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('tagline')) {
                obj['tagline'] = ApiClient.convertToType(data['tagline'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Brand</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Brand</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Brand.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['band'] && !(typeof data['band'] === 'string' || data['band'] instanceof String)) {
            throw new Error("Expected the field `band` to be a primitive type in the JSON string but got " + data['band']);
        }
        // ensure the json data is a string
        if (data['call'] && !(typeof data['call'] === 'string' || data['call'] instanceof String)) {
            throw new Error("Expected the field `call` to be a primitive type in the JSON string but got " + data['call']);
        }
        // ensure the json data is a string
        if (data['frequency'] && !(typeof data['frequency'] === 'string' || data['frequency'] instanceof String)) {
            throw new Error("Expected the field `frequency` to be a primitive type in the JSON string but got " + data['frequency']);
        }
        // ensure the json data is a string
        if (data['marketCity'] && !(typeof data['marketCity'] === 'string' || data['marketCity'] instanceof String)) {
            throw new Error("Expected the field `marketCity` to be a primitive type in the JSON string but got " + data['marketCity']);
        }
        // ensure the json data is a string
        if (data['marketState'] && !(typeof data['marketState'] === 'string' || data['marketState'] instanceof String)) {
            throw new Error("Expected the field `marketState` to be a primitive type in the JSON string but got " + data['marketState']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['tagline'] && !(typeof data['tagline'] === 'string' || data['tagline'] instanceof String)) {
            throw new Error("Expected the field `tagline` to be a primitive type in the JSON string but got " + data['tagline']);
        }

        return true;
    }


}

Brand.RequiredProperties = ["call", "marketCity", "name"];

/**
 * The radio band for the organization if they are a station (AM or FM)
 * @member {String} band
 */
Brand.prototype['band'] = undefined;

/**
 * The call letter for the organization if they are a station
 * @member {String} call
 */
Brand.prototype['call'] = undefined;

/**
 * The radio frequency for the organization if they are a station
 * @member {String} frequency
 */
Brand.prototype['frequency'] = undefined;

/**
 * The market city for the organization
 * @member {String} marketCity
 */
Brand.prototype['marketCity'] = undefined;

/**
 * The market state for the organization
 * @member {String} marketState
 */
Brand.prototype['marketState'] = undefined;

/**
 * The name of the organization
 * @member {String} name
 */
Brand.prototype['name'] = undefined;

/**
 * The tagline for the organization
 * @member {String} tagline
 */
Brand.prototype['tagline'] = undefined;






export default Brand;

