/**
 * NPR Listening Service
 * Audio recommendations tailored to a user's preferences
 *
 * The version of the OpenAPI document: 2
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AbstractLink from './AbstractLink';

/**
 * The ImageLink model module.
 * @module model/ImageLink
 * @version 2
 */
class ImageLink {
    /**
     * Constructs a new <code>ImageLink</code>.
     * An image, along with metadata for display
     * @alias module:model/ImageLink
     * @implements module:model/AbstractLink
     * @param href {String} The link to be followed
     * @param contentType {module:model/ImageLink.ContentTypeEnum} The MIME type of the response of this link; note that the enumerated list of possible values is not exhaustive and other MIME types could occur. The list should be treated as examples, rather than absolutes.
     */
    constructor(href, contentType) { 
        AbstractLink.initialize(this, href);
        ImageLink.initialize(this, href, contentType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, href, contentType) { 
        obj['href'] = href;
        obj['content-type'] = contentType || 'image/jpeg';
        obj['rel'] = 'logo_square';
    }

    /**
     * Constructs a <code>ImageLink</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImageLink} obj Optional instance to populate.
     * @return {module:model/ImageLink} The populated <code>ImageLink</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImageLink();
            AbstractLink.constructFromObject(data, obj);

            if (data.hasOwnProperty('href')) {
                obj['href'] = ApiClient.convertToType(data['href'], 'String');
            }
            if (data.hasOwnProperty('caption')) {
                obj['caption'] = ApiClient.convertToType(data['caption'], 'String');
            }
            if (data.hasOwnProperty('content-type')) {
                obj['content-type'] = ApiClient.convertToType(data['content-type'], 'String');
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = ApiClient.convertToType(data['image'], 'String');
            }
            if (data.hasOwnProperty('producer')) {
                obj['producer'] = ApiClient.convertToType(data['producer'], 'String');
            }
            if (data.hasOwnProperty('provider')) {
                obj['provider'] = ApiClient.convertToType(data['provider'], 'String');
            }
            if (data.hasOwnProperty('rel')) {
                obj['rel'] = ApiClient.convertToType(data['rel'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImageLink</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImageLink</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ImageLink.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['href'] && !(typeof data['href'] === 'string' || data['href'] instanceof String)) {
            throw new Error("Expected the field `href` to be a primitive type in the JSON string but got " + data['href']);
        }
        // ensure the json data is a string
        if (data['caption'] && !(typeof data['caption'] === 'string' || data['caption'] instanceof String)) {
            throw new Error("Expected the field `caption` to be a primitive type in the JSON string but got " + data['caption']);
        }
        // ensure the json data is a string
        if (data['content-type'] && !(typeof data['content-type'] === 'string' || data['content-type'] instanceof String)) {
            throw new Error("Expected the field `content-type` to be a primitive type in the JSON string but got " + data['content-type']);
        }
        // ensure the json data is a string
        if (data['image'] && !(typeof data['image'] === 'string' || data['image'] instanceof String)) {
            throw new Error("Expected the field `image` to be a primitive type in the JSON string but got " + data['image']);
        }
        // ensure the json data is a string
        if (data['producer'] && !(typeof data['producer'] === 'string' || data['producer'] instanceof String)) {
            throw new Error("Expected the field `producer` to be a primitive type in the JSON string but got " + data['producer']);
        }
        // ensure the json data is a string
        if (data['provider'] && !(typeof data['provider'] === 'string' || data['provider'] instanceof String)) {
            throw new Error("Expected the field `provider` to be a primitive type in the JSON string but got " + data['provider']);
        }
        // ensure the json data is a string
        if (data['rel'] && !(typeof data['rel'] === 'string' || data['rel'] instanceof String)) {
            throw new Error("Expected the field `rel` to be a primitive type in the JSON string but got " + data['rel']);
        }

        return true;
    }


}

ImageLink.RequiredProperties = ["href", "content-type"];

/**
 * The link to be followed
 * @member {String} href
 */
ImageLink.prototype['href'] = undefined;

/**
 * The caption of the image; can be used as alternate text for accessibility
 * @member {String} caption
 */
ImageLink.prototype['caption'] = undefined;

/**
 * The MIME type of the response of this link; note that the enumerated list of possible values is not exhaustive and other MIME types could occur. The list should be treated as examples, rather than absolutes.
 * @member {module:model/ImageLink.ContentTypeEnum} content-type
 * @default 'image/jpeg'
 */
ImageLink.prototype['content-type'] = 'image/jpeg';

/**
 * A unique identifier for the image
 * @member {String} image
 */
ImageLink.prototype['image'] = undefined;

/**
 * The producer of the image; should be used for properly attributing the image when it exists
 * @member {String} producer
 */
ImageLink.prototype['producer'] = undefined;

/**
 * The provider of the image; should be used for properly attributing the image when it exists
 * @member {String} provider
 */
ImageLink.prototype['provider'] = undefined;

/**
 * The crop type or intended display style/size; note that the enumerated list of possible values is not exhaustive and other values could occur. The list should be treated as examples, rather than absolutes.
 * @member {module:model/ImageLink.RelEnum} rel
 * @default 'logo_square'
 */
ImageLink.prototype['rel'] = 'logo_square';


// Implement AbstractLink interface:
/**
 * The link to be followed
 * @member {String} href
 */
AbstractLink.prototype['href'] = undefined;



/**
 * Allowed values for the <code>content-type</code> property.
 * @enum {String}
 * @readonly
 */
ImageLink['ContentTypeEnum'] = {

    /**
     * value: "image/jpeg"
     * @const
     */
    "jpeg": "image/jpeg",

    /**
     * value: "image/png"
     * @const
     */
    "png": "image/png",

    /**
     * value: "image/gif"
     * @const
     */
    "gif": "image/gif"
};


/**
 * Allowed values for the <code>rel</code> property.
 * @enum {String}
 * @readonly
 */
ImageLink['RelEnum'] = {

    /**
     * value: "logo_square"
     * @const
     */
    "logo_square": "logo_square",

    /**
     * value: "icon"
     * @const
     */
    "icon": "icon",

    /**
     * value: "wide"
     * @const
     */
    "wide": "wide",

    /**
     * value: "standard"
     * @const
     */
    "standard": "standard",

    /**
     * value: "square"
     * @const
     */
    "square": "square",

    /**
     * value: "enlargement"
     * @const
     */
    "enlargement": "enlargement",

    /**
     * value: "custom"
     * @const
     */
    "custom": "custom"
};



export default ImageLink;

