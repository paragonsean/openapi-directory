/**
 * NPR Listening Service
 * Audio recommendations tailored to a user's preferences
 *
 * The version of the OpenAPI document: 2
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Geofence from './Geofence';
import RatingData from './RatingData';
import RecommendationOrganization from './RecommendationOrganization';

/**
 * The AudioItemData model module.
 * @module model/AudioItemData
 * @version 2
 */
class AudioItemData {
    /**
     * Constructs a new <code>AudioItemData</code>.
     * @alias module:model/AudioItemData
     * @param rating {module:model/RatingData} 
     * @param rationale {String} A short summary of why this content was recommended
     * @param skippable {Boolean} Whether the client should allow this content to be skipped
     * @param title {String} The title of this media
     * @param type {module:model/AudioItemData.TypeEnum} Help determine how content is displayed; for more information, see <a href='https://dev.npr.org/design/general-specifications/playing-audio/'>our design guidelines</a>
     * @param uid {String} The media ID (for use in ratings objects)
     */
    constructor(rating, rationale, skippable, title, type, uid) { 
        
        AudioItemData.initialize(this, rating, rationale, skippable, title, type, uid);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, rating, rationale, skippable, title, type, uid) { 
        obj['provider'] = 'NPR';
        obj['rating'] = rating;
        obj['rationale'] = rationale;
        obj['skippable'] = skippable || true;
        obj['title'] = title;
        obj['type'] = type || 'audio';
        obj['uid'] = uid;
    }

    /**
     * Constructs a <code>AudioItemData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AudioItemData} obj Optional instance to populate.
     * @return {module:model/AudioItemData} The populated <code>AudioItemData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AudioItemData();

            if (data.hasOwnProperty('album')) {
                obj['album'] = ApiClient.convertToType(data['album'], 'String');
            }
            if (data.hasOwnProperty('artist')) {
                obj['artist'] = ApiClient.convertToType(data['artist'], 'String');
            }
            if (data.hasOwnProperty('audioTitle')) {
                obj['audioTitle'] = ApiClient.convertToType(data['audioTitle'], 'String');
            }
            if (data.hasOwnProperty('bingeAggId')) {
                obj['bingeAggId'] = ApiClient.convertToType(data['bingeAggId'], 'String');
            }
            if (data.hasOwnProperty('button')) {
                obj['button'] = ApiClient.convertToType(data['button'], 'String');
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'Number');
            }
            if (data.hasOwnProperty('expires')) {
                obj['expires'] = ApiClient.convertToType(data['expires'], 'Date');
            }
            if (data.hasOwnProperty('geofence')) {
                obj['geofence'] = Geofence.constructFromObject(data['geofence']);
            }
            if (data.hasOwnProperty('inFlow')) {
                obj['inFlow'] = ApiClient.convertToType(data['inFlow'], 'Boolean');
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('organization')) {
                obj['organization'] = RecommendationOrganization.constructFromObject(data['organization']);
            }
            if (data.hasOwnProperty('primary')) {
                obj['primary'] = ApiClient.convertToType(data['primary'], 'Boolean');
            }
            if (data.hasOwnProperty('program')) {
                obj['program'] = ApiClient.convertToType(data['program'], 'String');
            }
            if (data.hasOwnProperty('provider')) {
                obj['provider'] = ApiClient.convertToType(data['provider'], 'String');
            }
            if (data.hasOwnProperty('rating')) {
                obj['rating'] = RatingData.constructFromObject(data['rating']);
            }
            if (data.hasOwnProperty('rationale')) {
                obj['rationale'] = ApiClient.convertToType(data['rationale'], 'String');
            }
            if (data.hasOwnProperty('skippable')) {
                obj['skippable'] = ApiClient.convertToType(data['skippable'], 'Boolean');
            }
            if (data.hasOwnProperty('slug')) {
                obj['slug'] = ApiClient.convertToType(data['slug'], 'String');
            }
            if (data.hasOwnProperty('song')) {
                obj['song'] = ApiClient.convertToType(data['song'], 'String');
            }
            if (data.hasOwnProperty('streamGuid')) {
                obj['streamGuid'] = ApiClient.convertToType(data['streamGuid'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('uid')) {
                obj['uid'] = ApiClient.convertToType(data['uid'], 'String');
            }
            if (data.hasOwnProperty('unavailableText')) {
                obj['unavailableText'] = ApiClient.convertToType(data['unavailableText'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AudioItemData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AudioItemData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AudioItemData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['album'] && !(typeof data['album'] === 'string' || data['album'] instanceof String)) {
            throw new Error("Expected the field `album` to be a primitive type in the JSON string but got " + data['album']);
        }
        // ensure the json data is a string
        if (data['artist'] && !(typeof data['artist'] === 'string' || data['artist'] instanceof String)) {
            throw new Error("Expected the field `artist` to be a primitive type in the JSON string but got " + data['artist']);
        }
        // ensure the json data is a string
        if (data['audioTitle'] && !(typeof data['audioTitle'] === 'string' || data['audioTitle'] instanceof String)) {
            throw new Error("Expected the field `audioTitle` to be a primitive type in the JSON string but got " + data['audioTitle']);
        }
        // ensure the json data is a string
        if (data['bingeAggId'] && !(typeof data['bingeAggId'] === 'string' || data['bingeAggId'] instanceof String)) {
            throw new Error("Expected the field `bingeAggId` to be a primitive type in the JSON string but got " + data['bingeAggId']);
        }
        // ensure the json data is a string
        if (data['button'] && !(typeof data['button'] === 'string' || data['button'] instanceof String)) {
            throw new Error("Expected the field `button` to be a primitive type in the JSON string but got " + data['button']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `geofence`
        if (data['geofence']) { // data not null
          Geofence.validateJSON(data['geofence']);
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // validate the optional field `organization`
        if (data['organization']) { // data not null
          RecommendationOrganization.validateJSON(data['organization']);
        }
        // ensure the json data is a string
        if (data['program'] && !(typeof data['program'] === 'string' || data['program'] instanceof String)) {
            throw new Error("Expected the field `program` to be a primitive type in the JSON string but got " + data['program']);
        }
        // ensure the json data is a string
        if (data['provider'] && !(typeof data['provider'] === 'string' || data['provider'] instanceof String)) {
            throw new Error("Expected the field `provider` to be a primitive type in the JSON string but got " + data['provider']);
        }
        // validate the optional field `rating`
        if (data['rating']) { // data not null
          RatingData.validateJSON(data['rating']);
        }
        // ensure the json data is a string
        if (data['rationale'] && !(typeof data['rationale'] === 'string' || data['rationale'] instanceof String)) {
            throw new Error("Expected the field `rationale` to be a primitive type in the JSON string but got " + data['rationale']);
        }
        // ensure the json data is a string
        if (data['slug'] && !(typeof data['slug'] === 'string' || data['slug'] instanceof String)) {
            throw new Error("Expected the field `slug` to be a primitive type in the JSON string but got " + data['slug']);
        }
        // ensure the json data is a string
        if (data['song'] && !(typeof data['song'] === 'string' || data['song'] instanceof String)) {
            throw new Error("Expected the field `song` to be a primitive type in the JSON string but got " + data['song']);
        }
        // ensure the json data is a string
        if (data['streamGuid'] && !(typeof data['streamGuid'] === 'string' || data['streamGuid'] instanceof String)) {
            throw new Error("Expected the field `streamGuid` to be a primitive type in the JSON string but got " + data['streamGuid']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['uid'] && !(typeof data['uid'] === 'string' || data['uid'] instanceof String)) {
            throw new Error("Expected the field `uid` to be a primitive type in the JSON string but got " + data['uid']);
        }
        // ensure the json data is a string
        if (data['unavailableText'] && !(typeof data['unavailableText'] === 'string' || data['unavailableText'] instanceof String)) {
            throw new Error("Expected the field `unavailableText` to be a primitive type in the JSON string but got " + data['unavailableText']);
        }

        return true;
    }


}

AudioItemData.RequiredProperties = ["rating", "rationale", "skippable", "title", "type", "uid"];

/**
 * Album information associated with the media
 * @member {String} album
 */
AudioItemData.prototype['album'] = undefined;

/**
 * The artist associated with the media
 * @member {String} artist
 */
AudioItemData.prototype['artist'] = undefined;

/**
 * For first-party client use only
 * @member {String} audioTitle
 */
AudioItemData.prototype['audioTitle'] = undefined;

/**
 * Indicates which aggregration ID this recommendation was binged from
 * @member {String} bingeAggId
 */
AudioItemData.prototype['bingeAggId'] = undefined;

/**
 * The text contents of an action button displayed on the client
 * @member {String} button
 */
AudioItemData.prototype['button'] = undefined;

/**
 * The publication date in ISO-8601 format
 * @member {Date} date
 */
AudioItemData.prototype['date'] = undefined;

/**
 * A short description or teaser
 * @member {String} description
 */
AudioItemData.prototype['description'] = undefined;

/**
 * The length of the audio content in seconds
 * @member {Number} duration
 */
AudioItemData.prototype['duration'] = undefined;

/**
 * The media's expiration date in ISO-8601 format
 * @member {Date} expires
 */
AudioItemData.prototype['expires'] = undefined;

/**
 * @member {module:model/Geofence} geofence
 */
AudioItemData.prototype['geofence'] = undefined;

/**
 * Indicates the likelihood of being within a flow, useful for stateful playback buttons
 * @member {Boolean} inFlow
 */
AudioItemData.prototype['inFlow'] = undefined;

/**
 * The record label associated with the media
 * @member {String} label
 */
AudioItemData.prototype['label'] = undefined;

/**
 * @member {module:model/RecommendationOrganization} organization
 */
AudioItemData.prototype['organization'] = undefined;

/**
 * Whether the audio is the primary audio of the story to which it is associated
 * @member {Boolean} primary
 */
AudioItemData.prototype['primary'] = undefined;

/**
 * The program associated with this media
 * @member {String} program
 */
AudioItemData.prototype['program'] = undefined;

/**
 * The name of the organization providing this media
 * @member {String} provider
 * @default 'NPR'
 */
AudioItemData.prototype['provider'] = 'NPR';

/**
 * @member {module:model/RatingData} rating
 */
AudioItemData.prototype['rating'] = undefined;

/**
 * A short summary of why this content was recommended
 * @member {String} rationale
 */
AudioItemData.prototype['rationale'] = undefined;

/**
 * Whether the client should allow this content to be skipped
 * @member {Boolean} skippable
 * @default true
 */
AudioItemData.prototype['skippable'] = true;

/**
 * A tag or category for this media
 * @member {String} slug
 */
AudioItemData.prototype['slug'] = undefined;

/**
 * The song title associated with the media
 * @member {String} song
 */
AudioItemData.prototype['song'] = undefined;

/**
 * The full GUID of the live stream returned within the recommendation
 * @member {String} streamGuid
 */
AudioItemData.prototype['streamGuid'] = undefined;

/**
 * The title of this media
 * @member {String} title
 */
AudioItemData.prototype['title'] = undefined;

/**
 * Help determine how content is displayed; for more information, see <a href='https://dev.npr.org/design/general-specifications/playing-audio/'>our design guidelines</a>
 * @member {module:model/AudioItemData.TypeEnum} type
 * @default 'audio'
 */
AudioItemData.prototype['type'] = 'audio';

/**
 * The media ID (for use in ratings objects)
 * @member {String} uid
 */
AudioItemData.prototype['uid'] = undefined;

/**
 * The text contents to be displayed on the client if no media URLs are available
 * @member {String} unavailableText
 */
AudioItemData.prototype['unavailableText'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
AudioItemData['TypeEnum'] = {

    /**
     * value: "audio"
     * @const
     */
    "audio": "audio",

    /**
     * value: "sponsorship"
     * @const
     */
    "sponsorship": "sponsorship",

    /**
     * value: "stationId"
     * @const
     */
    "stationId": "stationId",

    /**
     * value: "intro"
     * @const
     */
    "intro": "intro",

    /**
     * value: "donate"
     * @const
     */
    "donate": "donate",

    /**
     * value: "featureCardInformational"
     * @const
     */
    "featureCardInformational": "featureCardInformational",

    /**
     * value: "featureCardNotification"
     * @const
     */
    "featureCardNotification": "featureCardNotification",

    /**
     * value: "featureCardPromotion"
     * @const
     */
    "featureCardPromotion": "featureCardPromotion",

    /**
     * value: "featureCardExternalLink"
     * @const
     */
    "featureCardExternalLink": "featureCardExternalLink",

    /**
     * value: "featureCardAsyncRequest"
     * @const
     */
    "featureCardAsyncRequest": "featureCardAsyncRequest"
};



export default AudioItemData;

