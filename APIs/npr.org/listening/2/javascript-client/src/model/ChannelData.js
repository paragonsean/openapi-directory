/**
 * NPR Listening Service
 * Audio recommendations tailored to a user's preferences
 *
 * The version of the OpenAPI document: 2
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ChannelData model module.
 * @module model/ChannelData
 * @version 2
 */
class ChannelData {
    /**
     * Constructs a new <code>ChannelData</code>.
     * @alias module:model/ChannelData
     * @param description {String} A longer description of what this channel focuses on
     * @param fullName {String} A short description of what this channel focuses on
     * @param id {String} The actual value that should be sent
     */
    constructor(description, fullName, id) { 
        
        ChannelData.initialize(this, description, fullName, id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, description, fullName, id) { 
        obj['description'] = description;
        obj['fullName'] = fullName;
        obj['id'] = id;
    }

    /**
     * Constructs a <code>ChannelData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChannelData} obj Optional instance to populate.
     * @return {module:model/ChannelData} The populated <code>ChannelData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChannelData();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayType')) {
                obj['displayType'] = ApiClient.convertToType(data['displayType'], 'String');
            }
            if (data.hasOwnProperty('emptyText')) {
                obj['emptyText'] = ApiClient.convertToType(data['emptyText'], 'String');
            }
            if (data.hasOwnProperty('fullName')) {
                obj['fullName'] = ApiClient.convertToType(data['fullName'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('refreshRule')) {
                obj['refreshRule'] = ApiClient.convertToType(data['refreshRule'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChannelData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChannelData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ChannelData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayType'] && !(typeof data['displayType'] === 'string' || data['displayType'] instanceof String)) {
            throw new Error("Expected the field `displayType` to be a primitive type in the JSON string but got " + data['displayType']);
        }
        // ensure the json data is a string
        if (data['emptyText'] && !(typeof data['emptyText'] === 'string' || data['emptyText'] instanceof String)) {
            throw new Error("Expected the field `emptyText` to be a primitive type in the JSON string but got " + data['emptyText']);
        }
        // ensure the json data is a string
        if (data['fullName'] && !(typeof data['fullName'] === 'string' || data['fullName'] instanceof String)) {
            throw new Error("Expected the field `fullName` to be a primitive type in the JSON string but got " + data['fullName']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }

        return true;
    }


}

ChannelData.RequiredProperties = ["description", "fullName", "id"];

/**
 * A longer description of what this channel focuses on
 * @member {String} description
 */
ChannelData.prototype['description'] = undefined;

/**
 * How clients should display this channel in the explore view
 * @member {module:model/ChannelData.DisplayTypeEnum} displayType
 */
ChannelData.prototype['displayType'] = undefined;

/**
 * Text for clients to display when the channel contains no recommendations
 * @member {String} emptyText
 */
ChannelData.prototype['emptyText'] = undefined;

/**
 * A short description of what this channel focuses on
 * @member {String} fullName
 */
ChannelData.prototype['fullName'] = undefined;

/**
 * The actual value that should be sent
 * @member {String} id
 */
ChannelData.prototype['id'] = undefined;

/**
 * In the explore view of a client, this field indicates how this channel should be refreshed.  This is an experimental field and subject to change, but for now zero indicates the client should refresh this channel every time a START rating is sent for a type=audio recommendation, while a 1 would indicate it can be refreshed much less often, such as on a 30 minute timer. 2 would indicate even less time to update, say every hour. We are still experimenting on the number of rules necessary and the best implementation for each type of rule. 
 * @member {Number} refreshRule
 */
ChannelData.prototype['refreshRule'] = undefined;





/**
 * Allowed values for the <code>displayType</code> property.
 * @enum {String}
 * @readonly
 */
ChannelData['DisplayTypeEnum'] = {

    /**
     * value: "default"
     * @const
     */
    "default": "default",

    /**
     * value: "show"
     * @const
     */
    "show": "show",

    /**
     * value: "playable"
     * @const
     */
    "playable": "playable",

    /**
     * value: "newscast"
     * @const
     */
    "newscast": "newscast"
};



export default ChannelData;

