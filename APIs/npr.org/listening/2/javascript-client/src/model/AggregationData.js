/**
 * NPR Listening Service
 * Audio recommendations tailored to a user's preferences
 *
 * The version of the OpenAPI document: 2
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Affiliation from './Affiliation';

/**
 * The AggregationData model module.
 * @module model/AggregationData
 * @version 2
 */
class AggregationData {
    /**
     * Constructs a new <code>AggregationData</code>.
     * @alias module:model/AggregationData
     * @param affiliation {String} A unique identifier for the aggregation
     * @param title {String} The title of this aggregation
     * @param type {module:model/AggregationData.TypeEnum} The type of list returned; will always be `aggregation`; useful for parsing search results
     */
    constructor(affiliation, title, type) { 
        
        AggregationData.initialize(this, affiliation, title, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, affiliation, title, type) { 
        obj['affiliation'] = affiliation;
        obj['provider'] = 'NPR';
        obj['station'] = 'NPR';
        obj['title'] = title;
        obj['type'] = type || 'aggregation';
    }

    /**
     * Constructs a <code>AggregationData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AggregationData} obj Optional instance to populate.
     * @return {module:model/AggregationData} The populated <code>AggregationData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AggregationData();

            if (data.hasOwnProperty('affiliation')) {
                obj['affiliation'] = ApiClient.convertToType(data['affiliation'], 'String');
            }
            if (data.hasOwnProperty('affiliationMeta')) {
                obj['affiliationMeta'] = Affiliation.constructFromObject(data['affiliationMeta']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('provider')) {
                obj['provider'] = ApiClient.convertToType(data['provider'], 'String');
            }
            if (data.hasOwnProperty('station')) {
                obj['station'] = ApiClient.convertToType(data['station'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AggregationData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AggregationData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AggregationData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['affiliation'] && !(typeof data['affiliation'] === 'string' || data['affiliation'] instanceof String)) {
            throw new Error("Expected the field `affiliation` to be a primitive type in the JSON string but got " + data['affiliation']);
        }
        // validate the optional field `affiliationMeta`
        if (data['affiliationMeta']) { // data not null
          Affiliation.validateJSON(data['affiliationMeta']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['provider'] && !(typeof data['provider'] === 'string' || data['provider'] instanceof String)) {
            throw new Error("Expected the field `provider` to be a primitive type in the JSON string but got " + data['provider']);
        }
        // ensure the json data is a string
        if (data['station'] && !(typeof data['station'] === 'string' || data['station'] instanceof String)) {
            throw new Error("Expected the field `station` to be a primitive type in the JSON string but got " + data['station']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

AggregationData.RequiredProperties = ["affiliation", "title", "type"];

/**
 * A unique identifier for the aggregation
 * @member {String} affiliation
 */
AggregationData.prototype['affiliation'] = undefined;

/**
 * @member {module:model/Affiliation} affiliationMeta
 */
AggregationData.prototype['affiliationMeta'] = undefined;

/**
 * A short description or teaser
 * @member {String} description
 */
AggregationData.prototype['description'] = undefined;

/**
 * The producer of this aggregation
 * @member {String} provider
 * @default 'NPR'
 */
AggregationData.prototype['provider'] = 'NPR';

/**
 * Deprecated - clients should switch to use provider.
 * @member {String} station
 * @default 'NPR'
 */
AggregationData.prototype['station'] = 'NPR';

/**
 * The title of this aggregation
 * @member {String} title
 */
AggregationData.prototype['title'] = undefined;

/**
 * The type of list returned; will always be `aggregation`; useful for parsing search results
 * @member {module:model/AggregationData.TypeEnum} type
 * @default 'aggregation'
 */
AggregationData.prototype['type'] = 'aggregation';





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
AggregationData['TypeEnum'] = {

    /**
     * value: "aggregation"
     * @const
     */
    "aggregation": "aggregation"
};



export default AggregationData;

