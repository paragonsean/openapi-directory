/**
 * NPR Listening Service
 * Audio recommendations tailored to a user's preferences
 *
 * The version of the OpenAPI document: 2
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RatingData model module.
 * @module model/RatingData
 * @version 2
 */
class RatingData {
    /**
     * Constructs a new <code>RatingData</code>.
     * @alias module:model/RatingData
     * @param channel {String} The channel this media item was pulled from
     * @param cohort {String} The primary cohort of the current logged-in user
     * @param duration {Number} Number of seconds this audio piece is expected to last
     * @param elapsed {Number} Number of seconds since the start of playback for this media item, as an integer
     * @param mediaId {String} The media id as given by the media object
     * @param origin {String} How the recommendation was generated
     * @param rating {String} String representing the rating
     * @param timestamp {Date} ISO-8601 formatted date/time; typically replaced by the client with the actual rating time
     */
    constructor(channel, cohort, duration, elapsed, mediaId, origin, rating, timestamp) { 
        
        RatingData.initialize(this, channel, cohort, duration, elapsed, mediaId, origin, rating, timestamp);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, channel, cohort, duration, elapsed, mediaId, origin, rating, timestamp) { 
        obj['channel'] = channel || 'npr';
        obj['cohort'] = cohort;
        obj['duration'] = duration;
        obj['elapsed'] = elapsed;
        obj['mediaId'] = mediaId;
        obj['origin'] = origin;
        obj['rating'] = rating;
        obj['timestamp'] = timestamp;
    }

    /**
     * Constructs a <code>RatingData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RatingData} obj Optional instance to populate.
     * @return {module:model/RatingData} The populated <code>RatingData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RatingData();

            if (data.hasOwnProperty('affiliations')) {
                obj['affiliations'] = ApiClient.convertToType(data['affiliations'], [Object]);
            }
            if (data.hasOwnProperty('channel')) {
                obj['channel'] = ApiClient.convertToType(data['channel'], 'String');
            }
            if (data.hasOwnProperty('cohort')) {
                obj['cohort'] = ApiClient.convertToType(data['cohort'], 'String');
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'Number');
            }
            if (data.hasOwnProperty('elapsed')) {
                obj['elapsed'] = ApiClient.convertToType(data['elapsed'], 'Number');
            }
            if (data.hasOwnProperty('mediaId')) {
                obj['mediaId'] = ApiClient.convertToType(data['mediaId'], 'String');
            }
            if (data.hasOwnProperty('origin')) {
                obj['origin'] = ApiClient.convertToType(data['origin'], 'String');
            }
            if (data.hasOwnProperty('rating')) {
                obj['rating'] = ApiClient.convertToType(data['rating'], 'String');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RatingData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RatingData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RatingData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['affiliations'])) {
            throw new Error("Expected the field `affiliations` to be an array in the JSON data but got " + data['affiliations']);
        }
        // ensure the json data is a string
        if (data['channel'] && !(typeof data['channel'] === 'string' || data['channel'] instanceof String)) {
            throw new Error("Expected the field `channel` to be a primitive type in the JSON string but got " + data['channel']);
        }
        // ensure the json data is a string
        if (data['cohort'] && !(typeof data['cohort'] === 'string' || data['cohort'] instanceof String)) {
            throw new Error("Expected the field `cohort` to be a primitive type in the JSON string but got " + data['cohort']);
        }
        // ensure the json data is a string
        if (data['mediaId'] && !(typeof data['mediaId'] === 'string' || data['mediaId'] instanceof String)) {
            throw new Error("Expected the field `mediaId` to be a primitive type in the JSON string but got " + data['mediaId']);
        }
        // ensure the json data is a string
        if (data['origin'] && !(typeof data['origin'] === 'string' || data['origin'] instanceof String)) {
            throw new Error("Expected the field `origin` to be a primitive type in the JSON string but got " + data['origin']);
        }
        // ensure the json data is a string
        if (data['rating'] && !(typeof data['rating'] === 'string' || data['rating'] instanceof String)) {
            throw new Error("Expected the field `rating` to be a primitive type in the JSON string but got " + data['rating']);
        }

        return true;
    }


}

RatingData.RequiredProperties = ["channel", "cohort", "duration", "elapsed", "mediaId", "origin", "rating", "timestamp"];

/**
 * An array of IDs & other data about collections or podcasts the user has ratings for; produced by the server and should be sent back as received; used for tracking program and podcast suggestions
 * @member {Array.<Object>} affiliations
 */
RatingData.prototype['affiliations'] = undefined;

/**
 * The channel this media item was pulled from
 * @member {String} channel
 * @default 'npr'
 */
RatingData.prototype['channel'] = 'npr';

/**
 * The primary cohort of the current logged-in user
 * @member {String} cohort
 */
RatingData.prototype['cohort'] = undefined;

/**
 * Number of seconds this audio piece is expected to last
 * @member {Number} duration
 */
RatingData.prototype['duration'] = undefined;

/**
 * Number of seconds since the start of playback for this media item, as an integer
 * @member {Number} elapsed
 */
RatingData.prototype['elapsed'] = undefined;

/**
 * The media id as given by the media object
 * @member {String} mediaId
 */
RatingData.prototype['mediaId'] = undefined;

/**
 * How the recommendation was generated
 * @member {String} origin
 */
RatingData.prototype['origin'] = undefined;

/**
 * String representing the rating
 * @member {String} rating
 */
RatingData.prototype['rating'] = undefined;

/**
 * ISO-8601 formatted date/time; typically replaced by the client with the actual rating time
 * @member {Date} timestamp
 */
RatingData.prototype['timestamp'] = undefined;






export default RatingData;

