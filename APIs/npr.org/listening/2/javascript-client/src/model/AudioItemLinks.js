/**
 * NPR Listening Service
 * Audio recommendations tailored to a user's preferences
 *
 * The version of the OpenAPI document: 2
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AudioLink from './AudioLink';
import ImageLink from './ImageLink';
import OtherLink from './OtherLink';

/**
 * The AudioItemLinks model module.
 * @module model/AudioItemLinks
 * @version 2
 */
class AudioItemLinks {
    /**
     * Constructs a new <code>AudioItemLinks</code>.
     * @alias module:model/AudioItemLinks
     */
    constructor() { 
        
        AudioItemLinks.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AudioItemLinks</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AudioItemLinks} obj Optional instance to populate.
     * @return {module:model/AudioItemLinks} The populated <code>AudioItemLinks</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AudioItemLinks();

            if (data.hasOwnProperty('action')) {
                obj['action'] = ApiClient.convertToType(data['action'], [OtherLink]);
            }
            if (data.hasOwnProperty('audio')) {
                obj['audio'] = ApiClient.convertToType(data['audio'], [AudioLink]);
            }
            if (data.hasOwnProperty('binge')) {
                obj['binge'] = ApiClient.convertToType(data['binge'], [OtherLink]);
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = ApiClient.convertToType(data['image'], [ImageLink]);
            }
            if (data.hasOwnProperty('onramps')) {
                obj['onramps'] = ApiClient.convertToType(data['onramps'], [OtherLink]);
            }
            if (data.hasOwnProperty('ratings')) {
                obj['ratings'] = ApiClient.convertToType(data['ratings'], [OtherLink]);
            }
            if (data.hasOwnProperty('recommendations')) {
                obj['recommendations'] = ApiClient.convertToType(data['recommendations'], [OtherLink]);
            }
            if (data.hasOwnProperty('stream-metadata')) {
                obj['stream-metadata'] = ApiClient.convertToType(data['stream-metadata'], [OtherLink]);
            }
            if (data.hasOwnProperty('up')) {
                obj['up'] = ApiClient.convertToType(data['up'], [OtherLink]);
            }
            if (data.hasOwnProperty('web')) {
                obj['web'] = ApiClient.convertToType(data['web'], [OtherLink]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AudioItemLinks</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AudioItemLinks</code>.
     */
    static validateJSON(data) {
        if (data['action']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['action'])) {
                throw new Error("Expected the field `action` to be an array in the JSON data but got " + data['action']);
            }
            // validate the optional field `action` (array)
            for (const item of data['action']) {
                OtherLink.validateJSON(item);
            };
        }
        if (data['audio']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['audio'])) {
                throw new Error("Expected the field `audio` to be an array in the JSON data but got " + data['audio']);
            }
            // validate the optional field `audio` (array)
            for (const item of data['audio']) {
                AudioLink.validateJSON(item);
            };
        }
        if (data['binge']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['binge'])) {
                throw new Error("Expected the field `binge` to be an array in the JSON data but got " + data['binge']);
            }
            // validate the optional field `binge` (array)
            for (const item of data['binge']) {
                OtherLink.validateJSON(item);
            };
        }
        if (data['image']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['image'])) {
                throw new Error("Expected the field `image` to be an array in the JSON data but got " + data['image']);
            }
            // validate the optional field `image` (array)
            for (const item of data['image']) {
                ImageLink.validateJSON(item);
            };
        }
        if (data['onramps']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['onramps'])) {
                throw new Error("Expected the field `onramps` to be an array in the JSON data but got " + data['onramps']);
            }
            // validate the optional field `onramps` (array)
            for (const item of data['onramps']) {
                OtherLink.validateJSON(item);
            };
        }
        if (data['ratings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ratings'])) {
                throw new Error("Expected the field `ratings` to be an array in the JSON data but got " + data['ratings']);
            }
            // validate the optional field `ratings` (array)
            for (const item of data['ratings']) {
                OtherLink.validateJSON(item);
            };
        }
        if (data['recommendations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['recommendations'])) {
                throw new Error("Expected the field `recommendations` to be an array in the JSON data but got " + data['recommendations']);
            }
            // validate the optional field `recommendations` (array)
            for (const item of data['recommendations']) {
                OtherLink.validateJSON(item);
            };
        }
        if (data['stream-metadata']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['stream-metadata'])) {
                throw new Error("Expected the field `stream-metadata` to be an array in the JSON data but got " + data['stream-metadata']);
            }
            // validate the optional field `stream-metadata` (array)
            for (const item of data['stream-metadata']) {
                OtherLink.validateJSON(item);
            };
        }
        if (data['up']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['up'])) {
                throw new Error("Expected the field `up` to be an array in the JSON data but got " + data['up']);
            }
            // validate the optional field `up` (array)
            for (const item of data['up']) {
                OtherLink.validateJSON(item);
            };
        }
        if (data['web']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['web'])) {
                throw new Error("Expected the field `web` to be an array in the JSON data but got " + data['web']);
            }
            // validate the optional field `web` (array)
            for (const item of data['web']) {
                OtherLink.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * One or more links to be trigged by user actions, usually when a button is clicked
 * @member {Array.<module:model/OtherLink>} action
 */
AudioItemLinks.prototype['action'] = undefined;

/**
 * One or more links to audio files for the item
 * @member {Array.<module:model/AudioLink>} audio
 */
AudioItemLinks.prototype['audio'] = undefined;

/**
 * One or more links that start a flow-based experience focused on the aggregation
 * @member {Array.<module:model/OtherLink>} binge
 */
AudioItemLinks.prototype['binge'] = undefined;

/**
 * One or more links to an image, along with metadata for display
 * @member {Array.<module:model/ImageLink>} image
 */
AudioItemLinks.prototype['image'] = undefined;

/**
 * One or more shareable links for the item
 * @member {Array.<module:model/OtherLink>} onramps
 */
AudioItemLinks.prototype['onramps'] = undefined;

/**
 * This is an alternate URL to use to POST the ratings JSON. Difference between this and 'recommendations' is that 'ratings' will NOT return back recommendations of audio to play next.
 * @member {Array.<module:model/OtherLink>} ratings
 */
AudioItemLinks.prototype['ratings'] = undefined;

/**
 * This is the URL that should be POSTed with the ratings JSON when this audio starts to play
 * @member {Array.<module:model/OtherLink>} recommendations
 */
AudioItemLinks.prototype['recommendations'] = undefined;

/**
 * Links that can be polled to retreive current program metadata for a given stream
 * @member {Array.<module:model/OtherLink>} stream-metadata
 */
AudioItemLinks.prototype['stream-metadata'] = undefined;

/**
 * One or more links to more details about the program or podcast with which this item is associated
 * @member {Array.<module:model/OtherLink>} up
 */
AudioItemLinks.prototype['up'] = undefined;

/**
 * One or more links to a web page for the item
 * @member {Array.<module:model/OtherLink>} web
 */
AudioItemLinks.prototype['web'] = undefined;






export default AudioItemLinks;

