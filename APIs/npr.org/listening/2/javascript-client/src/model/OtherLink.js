/**
 * NPR Listening Service
 * Audio recommendations tailored to a user's preferences
 *
 * The version of the OpenAPI document: 2
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AbstractLink from './AbstractLink';

/**
 * The OtherLink model module.
 * @module model/OtherLink
 * @version 2
 */
class OtherLink {
    /**
     * Constructs a new <code>OtherLink</code>.
     * An individual link from a list of links
     * @alias module:model/OtherLink
     * @implements module:model/AbstractLink
     * @param href {String} The link to be followed
     * @param contentType {module:model/OtherLink.ContentTypeEnum} The MIME type of the response of this link; note that the enumerated list of possible values is not exhaustive and other MIME types could occur. The list should be treated as examples, rather than absolutes.
     */
    constructor(href, contentType) { 
        AbstractLink.initialize(this, href);
        OtherLink.initialize(this, href, contentType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, href, contentType) { 
        obj['href'] = href;
        obj['content-type'] = contentType || 'application/json';
    }

    /**
     * Constructs a <code>OtherLink</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OtherLink} obj Optional instance to populate.
     * @return {module:model/OtherLink} The populated <code>OtherLink</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OtherLink();
            AbstractLink.constructFromObject(data, obj);

            if (data.hasOwnProperty('href')) {
                obj['href'] = ApiClient.convertToType(data['href'], 'String');
            }
            if (data.hasOwnProperty('content-type')) {
                obj['content-type'] = ApiClient.convertToType(data['content-type'], 'String');
            }
            if (data.hasOwnProperty('linkText')) {
                obj['linkText'] = ApiClient.convertToType(data['linkText'], 'String');
            }
            if (data.hasOwnProperty('pollInterval')) {
                obj['pollInterval'] = ApiClient.convertToType(data['pollInterval'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OtherLink</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OtherLink</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OtherLink.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['href'] && !(typeof data['href'] === 'string' || data['href'] instanceof String)) {
            throw new Error("Expected the field `href` to be a primitive type in the JSON string but got " + data['href']);
        }
        // ensure the json data is a string
        if (data['content-type'] && !(typeof data['content-type'] === 'string' || data['content-type'] instanceof String)) {
            throw new Error("Expected the field `content-type` to be a primitive type in the JSON string but got " + data['content-type']);
        }
        // ensure the json data is a string
        if (data['linkText'] && !(typeof data['linkText'] === 'string' || data['linkText'] instanceof String)) {
            throw new Error("Expected the field `linkText` to be a primitive type in the JSON string but got " + data['linkText']);
        }

        return true;
    }


}

OtherLink.RequiredProperties = ["href", "content-type"];

/**
 * The link to be followed
 * @member {String} href
 */
OtherLink.prototype['href'] = undefined;

/**
 * The MIME type of the response of this link; note that the enumerated list of possible values is not exhaustive and other MIME types could occur. The list should be treated as examples, rather than absolutes.
 * @member {module:model/OtherLink.ContentTypeEnum} content-type
 * @default 'application/json'
 */
OtherLink.prototype['content-type'] = 'application/json';

/**
 * Text recommended to accompany the link. For example, 'Read Story' with a full story link, or 'Read Transcript' with a transcript link.
 * @member {String} linkText
 */
OtherLink.prototype['linkText'] = undefined;

/**
 * When present, the recommended number of seconds between requests to the given URL
 * @member {Number} pollInterval
 */
OtherLink.prototype['pollInterval'] = undefined;


// Implement AbstractLink interface:
/**
 * The link to be followed
 * @member {String} href
 */
AbstractLink.prototype['href'] = undefined;



/**
 * Allowed values for the <code>content-type</code> property.
 * @enum {String}
 * @readonly
 */
OtherLink['ContentTypeEnum'] = {

    /**
     * value: "application/json"
     * @const
     */
    "application/json": "application/json",

    /**
     * value: "application/xml"
     * @const
     */
    "application/xml": "application/xml",

    /**
     * value: "text/html"
     * @const
     */
    "text/html": "text/html"
};



export default OtherLink;

