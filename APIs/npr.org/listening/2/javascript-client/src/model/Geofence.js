/**
 * NPR Listening Service
 * Audio recommendations tailored to a user's preferences
 *
 * The version of the OpenAPI document: 2
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Geofence model module.
 * @module model/Geofence
 * @version 2
 */
class Geofence {
    /**
     * Constructs a new <code>Geofence</code>.
     * The geographic restrictions that should be applied by the client before playing this media
     * @alias module:model/Geofence
     * @param countries {Array.<String>} The list of countries as ISO 3166-1 abbreviations in which this media should be available if restricted is true
     * @param restricted {Boolean} Whether any geographic restrictions should be applied
     */
    constructor(countries, restricted) { 
        
        Geofence.initialize(this, countries, restricted);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, countries, restricted) { 
        obj['countries'] = countries;
        obj['restricted'] = restricted || false;
    }

    /**
     * Constructs a <code>Geofence</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Geofence} obj Optional instance to populate.
     * @return {module:model/Geofence} The populated <code>Geofence</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Geofence();

            if (data.hasOwnProperty('countries')) {
                obj['countries'] = ApiClient.convertToType(data['countries'], ['String']);
            }
            if (data.hasOwnProperty('restricted')) {
                obj['restricted'] = ApiClient.convertToType(data['restricted'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Geofence</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Geofence</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Geofence.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['countries'])) {
            throw new Error("Expected the field `countries` to be an array in the JSON data but got " + data['countries']);
        }

        return true;
    }


}

Geofence.RequiredProperties = ["countries", "restricted"];

/**
 * The list of countries as ISO 3166-1 abbreviations in which this media should be available if restricted is true
 * @member {Array.<String>} countries
 */
Geofence.prototype['countries'] = undefined;

/**
 * Whether any geographic restrictions should be applied
 * @member {Boolean} restricted
 * @default false
 */
Geofence.prototype['restricted'] = false;






export default Geofence;

