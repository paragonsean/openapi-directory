/**
 * NPR Listening Service
 * Audio recommendations tailored to a user's preferences
 *
 * The version of the OpenAPI document: 2
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CategoryData model module.
 * @module model/CategoryData
 * @version 2
 */
class CategoryData {
    /**
     * Constructs a new <code>CategoryData</code>.
     * @alias module:model/CategoryData
     * @param title {String} The title of this category
     * @param type {String} The type of list returned; will always be `category`
     */
    constructor(title, type) { 
        
        CategoryData.initialize(this, title, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, title, type) { 
        obj['title'] = title;
        obj['type'] = type || 'category';
    }

    /**
     * Constructs a <code>CategoryData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CategoryData} obj Optional instance to populate.
     * @return {module:model/CategoryData} The populated <code>CategoryData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CategoryData();

            if (data.hasOwnProperty('displayType')) {
                obj['displayType'] = ApiClient.convertToType(data['displayType'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CategoryData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CategoryData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CategoryData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['displayType'] && !(typeof data['displayType'] === 'string' || data['displayType'] instanceof String)) {
            throw new Error("Expected the field `displayType` to be a primitive type in the JSON string but got " + data['displayType']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

CategoryData.RequiredProperties = ["title", "type"];

/**
 * How clients should display this channel in the station profile view
 * @member {module:model/CategoryData.DisplayTypeEnum} displayType
 */
CategoryData.prototype['displayType'] = undefined;

/**
 * The title of this category
 * @member {String} title
 */
CategoryData.prototype['title'] = undefined;

/**
 * The type of list returned; will always be `category`
 * @member {String} type
 * @default 'category'
 */
CategoryData.prototype['type'] = 'category';





/**
 * Allowed values for the <code>displayType</code> property.
 * @enum {String}
 * @readonly
 */
CategoryData['DisplayTypeEnum'] = {

    /**
     * value: "default"
     * @const
     */
    "default": "default",

    /**
     * value: "show"
     * @const
     */
    "show": "show",

    /**
     * value: "playable"
     * @const
     */
    "playable": "playable",

    /**
     * value: "newscast"
     * @const
     */
    "newscast": "newscast"
};



export default CategoryData;

