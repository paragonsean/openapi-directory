/**
 * NPR Listening Service
 * Audio recommendations tailored to a user's preferences
 *
 * The version of the OpenAPI document: 2
 * Contact: NPROneEnterprise@npr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NprListeningService);
  }
}(this, function(expect, NprListeningService) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NprListeningService.AudioItemData();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AudioItemData', function() {
    it('should create an instance of AudioItemData', function() {
      // uncomment below and update the code to test AudioItemData
      //var instance = new NprListeningService.AudioItemData();
      //expect(instance).to.be.a(NprListeningService.AudioItemData);
    });

    it('should have the property album (base name: "album")', function() {
      // uncomment below and update the code to test the property album
      //var instance = new NprListeningService.AudioItemData();
      //expect(instance).to.be();
    });

    it('should have the property artist (base name: "artist")', function() {
      // uncomment below and update the code to test the property artist
      //var instance = new NprListeningService.AudioItemData();
      //expect(instance).to.be();
    });

    it('should have the property audioTitle (base name: "audioTitle")', function() {
      // uncomment below and update the code to test the property audioTitle
      //var instance = new NprListeningService.AudioItemData();
      //expect(instance).to.be();
    });

    it('should have the property bingeAggId (base name: "bingeAggId")', function() {
      // uncomment below and update the code to test the property bingeAggId
      //var instance = new NprListeningService.AudioItemData();
      //expect(instance).to.be();
    });

    it('should have the property button (base name: "button")', function() {
      // uncomment below and update the code to test the property button
      //var instance = new NprListeningService.AudioItemData();
      //expect(instance).to.be();
    });

    it('should have the property date (base name: "date")', function() {
      // uncomment below and update the code to test the property date
      //var instance = new NprListeningService.AudioItemData();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new NprListeningService.AudioItemData();
      //expect(instance).to.be();
    });

    it('should have the property duration (base name: "duration")', function() {
      // uncomment below and update the code to test the property duration
      //var instance = new NprListeningService.AudioItemData();
      //expect(instance).to.be();
    });

    it('should have the property expires (base name: "expires")', function() {
      // uncomment below and update the code to test the property expires
      //var instance = new NprListeningService.AudioItemData();
      //expect(instance).to.be();
    });

    it('should have the property geofence (base name: "geofence")', function() {
      // uncomment below and update the code to test the property geofence
      //var instance = new NprListeningService.AudioItemData();
      //expect(instance).to.be();
    });

    it('should have the property inFlow (base name: "inFlow")', function() {
      // uncomment below and update the code to test the property inFlow
      //var instance = new NprListeningService.AudioItemData();
      //expect(instance).to.be();
    });

    it('should have the property label (base name: "label")', function() {
      // uncomment below and update the code to test the property label
      //var instance = new NprListeningService.AudioItemData();
      //expect(instance).to.be();
    });

    it('should have the property organization (base name: "organization")', function() {
      // uncomment below and update the code to test the property organization
      //var instance = new NprListeningService.AudioItemData();
      //expect(instance).to.be();
    });

    it('should have the property primary (base name: "primary")', function() {
      // uncomment below and update the code to test the property primary
      //var instance = new NprListeningService.AudioItemData();
      //expect(instance).to.be();
    });

    it('should have the property program (base name: "program")', function() {
      // uncomment below and update the code to test the property program
      //var instance = new NprListeningService.AudioItemData();
      //expect(instance).to.be();
    });

    it('should have the property provider (base name: "provider")', function() {
      // uncomment below and update the code to test the property provider
      //var instance = new NprListeningService.AudioItemData();
      //expect(instance).to.be();
    });

    it('should have the property rating (base name: "rating")', function() {
      // uncomment below and update the code to test the property rating
      //var instance = new NprListeningService.AudioItemData();
      //expect(instance).to.be();
    });

    it('should have the property rationale (base name: "rationale")', function() {
      // uncomment below and update the code to test the property rationale
      //var instance = new NprListeningService.AudioItemData();
      //expect(instance).to.be();
    });

    it('should have the property skippable (base name: "skippable")', function() {
      // uncomment below and update the code to test the property skippable
      //var instance = new NprListeningService.AudioItemData();
      //expect(instance).to.be();
    });

    it('should have the property slug (base name: "slug")', function() {
      // uncomment below and update the code to test the property slug
      //var instance = new NprListeningService.AudioItemData();
      //expect(instance).to.be();
    });

    it('should have the property song (base name: "song")', function() {
      // uncomment below and update the code to test the property song
      //var instance = new NprListeningService.AudioItemData();
      //expect(instance).to.be();
    });

    it('should have the property streamGuid (base name: "streamGuid")', function() {
      // uncomment below and update the code to test the property streamGuid
      //var instance = new NprListeningService.AudioItemData();
      //expect(instance).to.be();
    });

    it('should have the property title (base name: "title")', function() {
      // uncomment below and update the code to test the property title
      //var instance = new NprListeningService.AudioItemData();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new NprListeningService.AudioItemData();
      //expect(instance).to.be();
    });

    it('should have the property uid (base name: "uid")', function() {
      // uncomment below and update the code to test the property uid
      //var instance = new NprListeningService.AudioItemData();
      //expect(instance).to.be();
    });

    it('should have the property unavailableText (base name: "unavailableText")', function() {
      // uncomment below and update the code to test the property unavailableText
      //var instance = new NprListeningService.AudioItemData();
      //expect(instance).to.be();
    });

  });

}));
