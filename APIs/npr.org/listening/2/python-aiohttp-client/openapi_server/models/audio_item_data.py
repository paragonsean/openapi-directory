# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.geofence import Geofence
from openapi_server.models.rating_data import RatingData
from openapi_server.models.recommendation_organization import RecommendationOrganization
import re
from openapi_server import util


class AudioItemData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, album: str=None, artist: str=None, audio_title: str=None, binge_agg_id: str=None, button: str=None, _date: datetime=None, description: str=None, duration: int=None, expires: datetime=None, geofence: Geofence=None, in_flow: bool=None, label: str=None, organization: RecommendationOrganization=None, primary: bool=None, program: str=None, provider: str='NPR', rating: RatingData=None, rationale: str=None, skippable: bool=True, slug: str=None, song: str=None, stream_guid: str=None, title: str=None, type: str='audio', uid: str=None, unavailable_text: str=None):
        """AudioItemData - a model defined in OpenAPI

        :param album: The album of this AudioItemData.
        :param artist: The artist of this AudioItemData.
        :param audio_title: The audio_title of this AudioItemData.
        :param binge_agg_id: The binge_agg_id of this AudioItemData.
        :param button: The button of this AudioItemData.
        :param _date: The _date of this AudioItemData.
        :param description: The description of this AudioItemData.
        :param duration: The duration of this AudioItemData.
        :param expires: The expires of this AudioItemData.
        :param geofence: The geofence of this AudioItemData.
        :param in_flow: The in_flow of this AudioItemData.
        :param label: The label of this AudioItemData.
        :param organization: The organization of this AudioItemData.
        :param primary: The primary of this AudioItemData.
        :param program: The program of this AudioItemData.
        :param provider: The provider of this AudioItemData.
        :param rating: The rating of this AudioItemData.
        :param rationale: The rationale of this AudioItemData.
        :param skippable: The skippable of this AudioItemData.
        :param slug: The slug of this AudioItemData.
        :param song: The song of this AudioItemData.
        :param stream_guid: The stream_guid of this AudioItemData.
        :param title: The title of this AudioItemData.
        :param type: The type of this AudioItemData.
        :param uid: The uid of this AudioItemData.
        :param unavailable_text: The unavailable_text of this AudioItemData.
        """
        self.openapi_types = {
            'album': str,
            'artist': str,
            'audio_title': str,
            'binge_agg_id': str,
            'button': str,
            '_date': datetime,
            'description': str,
            'duration': int,
            'expires': datetime,
            'geofence': Geofence,
            'in_flow': bool,
            'label': str,
            'organization': RecommendationOrganization,
            'primary': bool,
            'program': str,
            'provider': str,
            'rating': RatingData,
            'rationale': str,
            'skippable': bool,
            'slug': str,
            'song': str,
            'stream_guid': str,
            'title': str,
            'type': str,
            'uid': str,
            'unavailable_text': str
        }

        self.attribute_map = {
            'album': 'album',
            'artist': 'artist',
            'audio_title': 'audioTitle',
            'binge_agg_id': 'bingeAggId',
            'button': 'button',
            '_date': 'date',
            'description': 'description',
            'duration': 'duration',
            'expires': 'expires',
            'geofence': 'geofence',
            'in_flow': 'inFlow',
            'label': 'label',
            'organization': 'organization',
            'primary': 'primary',
            'program': 'program',
            'provider': 'provider',
            'rating': 'rating',
            'rationale': 'rationale',
            'skippable': 'skippable',
            'slug': 'slug',
            'song': 'song',
            'stream_guid': 'streamGuid',
            'title': 'title',
            'type': 'type',
            'uid': 'uid',
            'unavailable_text': 'unavailableText'
        }

        self._album = album
        self._artist = artist
        self._audio_title = audio_title
        self._binge_agg_id = binge_agg_id
        self._button = button
        self.__date = _date
        self._description = description
        self._duration = duration
        self._expires = expires
        self._geofence = geofence
        self._in_flow = in_flow
        self._label = label
        self._organization = organization
        self._primary = primary
        self._program = program
        self._provider = provider
        self._rating = rating
        self._rationale = rationale
        self._skippable = skippable
        self._slug = slug
        self._song = song
        self._stream_guid = stream_guid
        self._title = title
        self._type = type
        self._uid = uid
        self._unavailable_text = unavailable_text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AudioItemData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AudioItemData of this AudioItemData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def album(self):
        """Gets the album of this AudioItemData.

        Album information associated with the media

        :return: The album of this AudioItemData.
        :rtype: str
        """
        return self._album

    @album.setter
    def album(self, album):
        """Sets the album of this AudioItemData.

        Album information associated with the media

        :param album: The album of this AudioItemData.
        :type album: str
        """

        self._album = album

    @property
    def artist(self):
        """Gets the artist of this AudioItemData.

        The artist associated with the media

        :return: The artist of this AudioItemData.
        :rtype: str
        """
        return self._artist

    @artist.setter
    def artist(self, artist):
        """Sets the artist of this AudioItemData.

        The artist associated with the media

        :param artist: The artist of this AudioItemData.
        :type artist: str
        """

        self._artist = artist

    @property
    def audio_title(self):
        """Gets the audio_title of this AudioItemData.

        For first-party client use only

        :return: The audio_title of this AudioItemData.
        :rtype: str
        """
        return self._audio_title

    @audio_title.setter
    def audio_title(self, audio_title):
        """Sets the audio_title of this AudioItemData.

        For first-party client use only

        :param audio_title: The audio_title of this AudioItemData.
        :type audio_title: str
        """

        self._audio_title = audio_title

    @property
    def binge_agg_id(self):
        """Gets the binge_agg_id of this AudioItemData.

        Indicates which aggregration ID this recommendation was binged from

        :return: The binge_agg_id of this AudioItemData.
        :rtype: str
        """
        return self._binge_agg_id

    @binge_agg_id.setter
    def binge_agg_id(self, binge_agg_id):
        """Sets the binge_agg_id of this AudioItemData.

        Indicates which aggregration ID this recommendation was binged from

        :param binge_agg_id: The binge_agg_id of this AudioItemData.
        :type binge_agg_id: str
        """

        self._binge_agg_id = binge_agg_id

    @property
    def button(self):
        """Gets the button of this AudioItemData.

        The text contents of an action button displayed on the client

        :return: The button of this AudioItemData.
        :rtype: str
        """
        return self._button

    @button.setter
    def button(self, button):
        """Sets the button of this AudioItemData.

        The text contents of an action button displayed on the client

        :param button: The button of this AudioItemData.
        :type button: str
        """

        self._button = button

    @property
    def _date(self):
        """Gets the _date of this AudioItemData.

        The publication date in ISO-8601 format

        :return: The _date of this AudioItemData.
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this AudioItemData.

        The publication date in ISO-8601 format

        :param _date: The _date of this AudioItemData.
        :type _date: datetime
        """

        self.__date = _date

    @property
    def description(self):
        """Gets the description of this AudioItemData.

        A short description or teaser

        :return: The description of this AudioItemData.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AudioItemData.

        A short description or teaser

        :param description: The description of this AudioItemData.
        :type description: str
        """

        self._description = description

    @property
    def duration(self):
        """Gets the duration of this AudioItemData.

        The length of the audio content in seconds

        :return: The duration of this AudioItemData.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this AudioItemData.

        The length of the audio content in seconds

        :param duration: The duration of this AudioItemData.
        :type duration: int
        """
        if duration is not None and duration > 9999:
            raise ValueError("Invalid value for `duration`, must be a value less than or equal to `9999`")
        if duration is not None and duration < 0:
            raise ValueError("Invalid value for `duration`, must be a value greater than or equal to `0`")

        self._duration = duration

    @property
    def expires(self):
        """Gets the expires of this AudioItemData.

        The media's expiration date in ISO-8601 format

        :return: The expires of this AudioItemData.
        :rtype: datetime
        """
        return self._expires

    @expires.setter
    def expires(self, expires):
        """Sets the expires of this AudioItemData.

        The media's expiration date in ISO-8601 format

        :param expires: The expires of this AudioItemData.
        :type expires: datetime
        """

        self._expires = expires

    @property
    def geofence(self):
        """Gets the geofence of this AudioItemData.


        :return: The geofence of this AudioItemData.
        :rtype: Geofence
        """
        return self._geofence

    @geofence.setter
    def geofence(self, geofence):
        """Sets the geofence of this AudioItemData.


        :param geofence: The geofence of this AudioItemData.
        :type geofence: Geofence
        """

        self._geofence = geofence

    @property
    def in_flow(self):
        """Gets the in_flow of this AudioItemData.

        Indicates the likelihood of being within a flow, useful for stateful playback buttons

        :return: The in_flow of this AudioItemData.
        :rtype: bool
        """
        return self._in_flow

    @in_flow.setter
    def in_flow(self, in_flow):
        """Sets the in_flow of this AudioItemData.

        Indicates the likelihood of being within a flow, useful for stateful playback buttons

        :param in_flow: The in_flow of this AudioItemData.
        :type in_flow: bool
        """

        self._in_flow = in_flow

    @property
    def label(self):
        """Gets the label of this AudioItemData.

        The record label associated with the media

        :return: The label of this AudioItemData.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this AudioItemData.

        The record label associated with the media

        :param label: The label of this AudioItemData.
        :type label: str
        """

        self._label = label

    @property
    def organization(self):
        """Gets the organization of this AudioItemData.


        :return: The organization of this AudioItemData.
        :rtype: RecommendationOrganization
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this AudioItemData.


        :param organization: The organization of this AudioItemData.
        :type organization: RecommendationOrganization
        """

        self._organization = organization

    @property
    def primary(self):
        """Gets the primary of this AudioItemData.

        Whether the audio is the primary audio of the story to which it is associated

        :return: The primary of this AudioItemData.
        :rtype: bool
        """
        return self._primary

    @primary.setter
    def primary(self, primary):
        """Sets the primary of this AudioItemData.

        Whether the audio is the primary audio of the story to which it is associated

        :param primary: The primary of this AudioItemData.
        :type primary: bool
        """

        self._primary = primary

    @property
    def program(self):
        """Gets the program of this AudioItemData.

        The program associated with this media

        :return: The program of this AudioItemData.
        :rtype: str
        """
        return self._program

    @program.setter
    def program(self, program):
        """Sets the program of this AudioItemData.

        The program associated with this media

        :param program: The program of this AudioItemData.
        :type program: str
        """

        self._program = program

    @property
    def provider(self):
        """Gets the provider of this AudioItemData.

        The name of the organization providing this media

        :return: The provider of this AudioItemData.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this AudioItemData.

        The name of the organization providing this media

        :param provider: The provider of this AudioItemData.
        :type provider: str
        """

        self._provider = provider

    @property
    def rating(self):
        """Gets the rating of this AudioItemData.


        :return: The rating of this AudioItemData.
        :rtype: RatingData
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this AudioItemData.


        :param rating: The rating of this AudioItemData.
        :type rating: RatingData
        """
        if rating is None:
            raise ValueError("Invalid value for `rating`, must not be `None`")

        self._rating = rating

    @property
    def rationale(self):
        """Gets the rationale of this AudioItemData.

        A short summary of why this content was recommended

        :return: The rationale of this AudioItemData.
        :rtype: str
        """
        return self._rationale

    @rationale.setter
    def rationale(self, rationale):
        """Sets the rationale of this AudioItemData.

        A short summary of why this content was recommended

        :param rationale: The rationale of this AudioItemData.
        :type rationale: str
        """
        if rationale is None:
            raise ValueError("Invalid value for `rationale`, must not be `None`")

        self._rationale = rationale

    @property
    def skippable(self):
        """Gets the skippable of this AudioItemData.

        Whether the client should allow this content to be skipped

        :return: The skippable of this AudioItemData.
        :rtype: bool
        """
        return self._skippable

    @skippable.setter
    def skippable(self, skippable):
        """Sets the skippable of this AudioItemData.

        Whether the client should allow this content to be skipped

        :param skippable: The skippable of this AudioItemData.
        :type skippable: bool
        """
        if skippable is None:
            raise ValueError("Invalid value for `skippable`, must not be `None`")

        self._skippable = skippable

    @property
    def slug(self):
        """Gets the slug of this AudioItemData.

        A tag or category for this media

        :return: The slug of this AudioItemData.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this AudioItemData.

        A tag or category for this media

        :param slug: The slug of this AudioItemData.
        :type slug: str
        """

        self._slug = slug

    @property
    def song(self):
        """Gets the song of this AudioItemData.

        The song title associated with the media

        :return: The song of this AudioItemData.
        :rtype: str
        """
        return self._song

    @song.setter
    def song(self, song):
        """Sets the song of this AudioItemData.

        The song title associated with the media

        :param song: The song of this AudioItemData.
        :type song: str
        """

        self._song = song

    @property
    def stream_guid(self):
        """Gets the stream_guid of this AudioItemData.

        The full GUID of the live stream returned within the recommendation

        :return: The stream_guid of this AudioItemData.
        :rtype: str
        """
        return self._stream_guid

    @stream_guid.setter
    def stream_guid(self, stream_guid):
        """Sets the stream_guid of this AudioItemData.

        The full GUID of the live stream returned within the recommendation

        :param stream_guid: The stream_guid of this AudioItemData.
        :type stream_guid: str
        """

        self._stream_guid = stream_guid

    @property
    def title(self):
        """Gets the title of this AudioItemData.

        The title of this media

        :return: The title of this AudioItemData.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this AudioItemData.

        The title of this media

        :param title: The title of this AudioItemData.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def type(self):
        """Gets the type of this AudioItemData.

        Help determine how content is displayed; for more information, see <a href='https://dev.npr.org/design/general-specifications/playing-audio/'>our design guidelines</a>

        :return: The type of this AudioItemData.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AudioItemData.

        Help determine how content is displayed; for more information, see <a href='https://dev.npr.org/design/general-specifications/playing-audio/'>our design guidelines</a>

        :param type: The type of this AudioItemData.
        :type type: str
        """
        allowed_values = ["audio", "sponsorship", "stationId", "intro", "donate", "featureCardInformational", "featureCardNotification", "featureCardPromotion", "featureCardExternalLink", "featureCardAsyncRequest"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def uid(self):
        """Gets the uid of this AudioItemData.

        The media ID (for use in ratings objects)

        :return: The uid of this AudioItemData.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this AudioItemData.

        The media ID (for use in ratings objects)

        :param uid: The uid of this AudioItemData.
        :type uid: str
        """
        if uid is None:
            raise ValueError("Invalid value for `uid`, must not be `None`")
        if uid is not None and not re.search(r'^\d{3,}:[\w-]{5,}$', uid):
            raise ValueError("Invalid value for `uid`, must be a follow pattern or equal to `/^\d{3,}:[\w-]{5,}$/`")

        self._uid = uid

    @property
    def unavailable_text(self):
        """Gets the unavailable_text of this AudioItemData.

        The text contents to be displayed on the client if no media URLs are available

        :return: The unavailable_text of this AudioItemData.
        :rtype: str
        """
        return self._unavailable_text

    @unavailable_text.setter
    def unavailable_text(self, unavailable_text):
        """Sets the unavailable_text of this AudioItemData.

        The text contents to be displayed on the client if no media URLs are available

        :param unavailable_text: The unavailable_text of this AudioItemData.
        :type unavailable_text: str
        """

        self._unavailable_text = unavailable_text
