# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RecommendationOrganization(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, donate_url: str=None, homepage_url: str=None, logo_url: str=None, name: str=None):
        """RecommendationOrganization - a model defined in OpenAPI

        :param donate_url: The donate_url of this RecommendationOrganization.
        :param homepage_url: The homepage_url of this RecommendationOrganization.
        :param logo_url: The logo_url of this RecommendationOrganization.
        :param name: The name of this RecommendationOrganization.
        """
        self.openapi_types = {
            'donate_url': str,
            'homepage_url': str,
            'logo_url': str,
            'name': str
        }

        self.attribute_map = {
            'donate_url': 'donateUrl',
            'homepage_url': 'homepageUrl',
            'logo_url': 'logoUrl',
            'name': 'name'
        }

        self._donate_url = donate_url
        self._homepage_url = homepage_url
        self._logo_url = logo_url
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RecommendationOrganization':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RecommendationOrganization of this RecommendationOrganization.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def donate_url(self):
        """Gets the donate_url of this RecommendationOrganization.

        The URL of the organization's donate page

        :return: The donate_url of this RecommendationOrganization.
        :rtype: str
        """
        return self._donate_url

    @donate_url.setter
    def donate_url(self, donate_url):
        """Sets the donate_url of this RecommendationOrganization.

        The URL of the organization's donate page

        :param donate_url: The donate_url of this RecommendationOrganization.
        :type donate_url: str
        """

        self._donate_url = donate_url

    @property
    def homepage_url(self):
        """Gets the homepage_url of this RecommendationOrganization.

        The URL of the organization's homepage

        :return: The homepage_url of this RecommendationOrganization.
        :rtype: str
        """
        return self._homepage_url

    @homepage_url.setter
    def homepage_url(self, homepage_url):
        """Sets the homepage_url of this RecommendationOrganization.

        The URL of the organization's homepage

        :param homepage_url: The homepage_url of this RecommendationOrganization.
        :type homepage_url: str
        """

        self._homepage_url = homepage_url

    @property
    def logo_url(self):
        """Gets the logo_url of this RecommendationOrganization.

        A URL for an image of the organization's logo

        :return: The logo_url of this RecommendationOrganization.
        :rtype: str
        """
        return self._logo_url

    @logo_url.setter
    def logo_url(self, logo_url):
        """Sets the logo_url of this RecommendationOrganization.

        A URL for an image of the organization's logo

        :param logo_url: The logo_url of this RecommendationOrganization.
        :type logo_url: str
        """

        self._logo_url = logo_url

    @property
    def name(self):
        """Gets the name of this RecommendationOrganization.

        The name of the organization

        :return: The name of this RecommendationOrganization.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RecommendationOrganization.

        The name of the organization

        :param name: The name of this RecommendationOrganization.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
