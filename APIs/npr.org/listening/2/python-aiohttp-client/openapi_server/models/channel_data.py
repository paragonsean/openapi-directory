# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ChannelData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, display_type: str=None, empty_text: str=None, full_name: str=None, id: str=None, refresh_rule: int=None):
        """ChannelData - a model defined in OpenAPI

        :param description: The description of this ChannelData.
        :param display_type: The display_type of this ChannelData.
        :param empty_text: The empty_text of this ChannelData.
        :param full_name: The full_name of this ChannelData.
        :param id: The id of this ChannelData.
        :param refresh_rule: The refresh_rule of this ChannelData.
        """
        self.openapi_types = {
            'description': str,
            'display_type': str,
            'empty_text': str,
            'full_name': str,
            'id': str,
            'refresh_rule': int
        }

        self.attribute_map = {
            'description': 'description',
            'display_type': 'displayType',
            'empty_text': 'emptyText',
            'full_name': 'fullName',
            'id': 'id',
            'refresh_rule': 'refreshRule'
        }

        self._description = description
        self._display_type = display_type
        self._empty_text = empty_text
        self._full_name = full_name
        self._id = id
        self._refresh_rule = refresh_rule

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChannelData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChannelData of this ChannelData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this ChannelData.

        A longer description of what this channel focuses on

        :return: The description of this ChannelData.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ChannelData.

        A longer description of what this channel focuses on

        :param description: The description of this ChannelData.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def display_type(self):
        """Gets the display_type of this ChannelData.

        How clients should display this channel in the explore view

        :return: The display_type of this ChannelData.
        :rtype: str
        """
        return self._display_type

    @display_type.setter
    def display_type(self, display_type):
        """Sets the display_type of this ChannelData.

        How clients should display this channel in the explore view

        :param display_type: The display_type of this ChannelData.
        :type display_type: str
        """
        allowed_values = ["default", "show", "playable", "newscast"]  # noqa: E501
        if display_type not in allowed_values:
            raise ValueError(
                "Invalid value for `display_type` ({0}), must be one of {1}"
                .format(display_type, allowed_values)
            )

        self._display_type = display_type

    @property
    def empty_text(self):
        """Gets the empty_text of this ChannelData.

        Text for clients to display when the channel contains no recommendations

        :return: The empty_text of this ChannelData.
        :rtype: str
        """
        return self._empty_text

    @empty_text.setter
    def empty_text(self, empty_text):
        """Sets the empty_text of this ChannelData.

        Text for clients to display when the channel contains no recommendations

        :param empty_text: The empty_text of this ChannelData.
        :type empty_text: str
        """

        self._empty_text = empty_text

    @property
    def full_name(self):
        """Gets the full_name of this ChannelData.

        A short description of what this channel focuses on

        :return: The full_name of this ChannelData.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this ChannelData.

        A short description of what this channel focuses on

        :param full_name: The full_name of this ChannelData.
        :type full_name: str
        """
        if full_name is None:
            raise ValueError("Invalid value for `full_name`, must not be `None`")

        self._full_name = full_name

    @property
    def id(self):
        """Gets the id of this ChannelData.

        The actual value that should be sent

        :return: The id of this ChannelData.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ChannelData.

        The actual value that should be sent

        :param id: The id of this ChannelData.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def refresh_rule(self):
        """Gets the refresh_rule of this ChannelData.

        In the explore view of a client, this field indicates how this channel should be refreshed.  This is an experimental field and subject to change, but for now zero indicates the client should refresh this channel every time a START rating is sent for a type=audio recommendation, while a 1 would indicate it can be refreshed much less often, such as on a 30 minute timer. 2 would indicate even less time to update, say every hour. We are still experimenting on the number of rules necessary and the best implementation for each type of rule. 

        :return: The refresh_rule of this ChannelData.
        :rtype: int
        """
        return self._refresh_rule

    @refresh_rule.setter
    def refresh_rule(self, refresh_rule):
        """Sets the refresh_rule of this ChannelData.

        In the explore view of a client, this field indicates how this channel should be refreshed.  This is an experimental field and subject to change, but for now zero indicates the client should refresh this channel every time a START rating is sent for a type=audio recommendation, while a 1 would indicate it can be refreshed much less often, such as on a 30 minute timer. 2 would indicate even less time to update, say every hour. We are still experimenting on the number of rules necessary and the best implementation for each type of rule. 

        :param refresh_rule: The refresh_rule of this ChannelData.
        :type refresh_rule: int
        """

        self._refresh_rule = refresh_rule
