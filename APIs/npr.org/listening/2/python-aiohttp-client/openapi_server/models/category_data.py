# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CategoryData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_type: str=None, title: str=None, type: str='category'):
        """CategoryData - a model defined in OpenAPI

        :param display_type: The display_type of this CategoryData.
        :param title: The title of this CategoryData.
        :param type: The type of this CategoryData.
        """
        self.openapi_types = {
            'display_type': str,
            'title': str,
            'type': str
        }

        self.attribute_map = {
            'display_type': 'displayType',
            'title': 'title',
            'type': 'type'
        }

        self._display_type = display_type
        self._title = title
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CategoryData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CategoryData of this CategoryData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_type(self):
        """Gets the display_type of this CategoryData.

        How clients should display this channel in the station profile view

        :return: The display_type of this CategoryData.
        :rtype: str
        """
        return self._display_type

    @display_type.setter
    def display_type(self, display_type):
        """Sets the display_type of this CategoryData.

        How clients should display this channel in the station profile view

        :param display_type: The display_type of this CategoryData.
        :type display_type: str
        """
        allowed_values = ["default", "show", "playable", "newscast"]  # noqa: E501
        if display_type not in allowed_values:
            raise ValueError(
                "Invalid value for `display_type` ({0}), must be one of {1}"
                .format(display_type, allowed_values)
            )

        self._display_type = display_type

    @property
    def title(self):
        """Gets the title of this CategoryData.

        The title of this category

        :return: The title of this CategoryData.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CategoryData.

        The title of this category

        :param title: The title of this CategoryData.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def type(self):
        """Gets the type of this CategoryData.

        The type of list returned; will always be `category`

        :return: The type of this CategoryData.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CategoryData.

        The type of list returned; will always be `category`

        :param type: The type of this CategoryData.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
