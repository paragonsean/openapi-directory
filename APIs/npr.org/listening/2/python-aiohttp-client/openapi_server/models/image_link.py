# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ImageLink(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, href: str=None, caption: str=None, content_type: str='jpeg', image: str=None, producer: str=None, provider: str=None, rel: str='logo_square'):
        """ImageLink - a model defined in OpenAPI

        :param href: The href of this ImageLink.
        :param caption: The caption of this ImageLink.
        :param content_type: The content_type of this ImageLink.
        :param image: The image of this ImageLink.
        :param producer: The producer of this ImageLink.
        :param provider: The provider of this ImageLink.
        :param rel: The rel of this ImageLink.
        """
        self.openapi_types = {
            'href': str,
            'caption': str,
            'content_type': str,
            'image': str,
            'producer': str,
            'provider': str,
            'rel': str
        }

        self.attribute_map = {
            'href': 'href',
            'caption': 'caption',
            'content_type': 'content-type',
            'image': 'image',
            'producer': 'producer',
            'provider': 'provider',
            'rel': 'rel'
        }

        self._href = href
        self._caption = caption
        self._content_type = content_type
        self._image = image
        self._producer = producer
        self._provider = provider
        self._rel = rel

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageLink':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImageLink of this ImageLink.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def href(self):
        """Gets the href of this ImageLink.

        The link to be followed

        :return: The href of this ImageLink.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this ImageLink.

        The link to be followed

        :param href: The href of this ImageLink.
        :type href: str
        """
        if href is None:
            raise ValueError("Invalid value for `href`, must not be `None`")

        self._href = href

    @property
    def caption(self):
        """Gets the caption of this ImageLink.

        The caption of the image; can be used as alternate text for accessibility

        :return: The caption of this ImageLink.
        :rtype: str
        """
        return self._caption

    @caption.setter
    def caption(self, caption):
        """Sets the caption of this ImageLink.

        The caption of the image; can be used as alternate text for accessibility

        :param caption: The caption of this ImageLink.
        :type caption: str
        """

        self._caption = caption

    @property
    def content_type(self):
        """Gets the content_type of this ImageLink.

        The MIME type of the response of this link; note that the enumerated list of possible values is not exhaustive and other MIME types could occur. The list should be treated as examples, rather than absolutes.

        :return: The content_type of this ImageLink.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this ImageLink.

        The MIME type of the response of this link; note that the enumerated list of possible values is not exhaustive and other MIME types could occur. The list should be treated as examples, rather than absolutes.

        :param content_type: The content_type of this ImageLink.
        :type content_type: str
        """
        allowed_values = ["image/jpeg", "image/png", "image/gif"]  # noqa: E501
        if content_type not in allowed_values:
            raise ValueError(
                "Invalid value for `content_type` ({0}), must be one of {1}"
                .format(content_type, allowed_values)
            )

        self._content_type = content_type

    @property
    def image(self):
        """Gets the image of this ImageLink.

        A unique identifier for the image

        :return: The image of this ImageLink.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this ImageLink.

        A unique identifier for the image

        :param image: The image of this ImageLink.
        :type image: str
        """

        self._image = image

    @property
    def producer(self):
        """Gets the producer of this ImageLink.

        The producer of the image; should be used for properly attributing the image when it exists

        :return: The producer of this ImageLink.
        :rtype: str
        """
        return self._producer

    @producer.setter
    def producer(self, producer):
        """Sets the producer of this ImageLink.

        The producer of the image; should be used for properly attributing the image when it exists

        :param producer: The producer of this ImageLink.
        :type producer: str
        """

        self._producer = producer

    @property
    def provider(self):
        """Gets the provider of this ImageLink.

        The provider of the image; should be used for properly attributing the image when it exists

        :return: The provider of this ImageLink.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this ImageLink.

        The provider of the image; should be used for properly attributing the image when it exists

        :param provider: The provider of this ImageLink.
        :type provider: str
        """

        self._provider = provider

    @property
    def rel(self):
        """Gets the rel of this ImageLink.

        The crop type or intended display style/size; note that the enumerated list of possible values is not exhaustive and other values could occur. The list should be treated as examples, rather than absolutes.

        :return: The rel of this ImageLink.
        :rtype: str
        """
        return self._rel

    @rel.setter
    def rel(self, rel):
        """Sets the rel of this ImageLink.

        The crop type or intended display style/size; note that the enumerated list of possible values is not exhaustive and other values could occur. The list should be treated as examples, rather than absolutes.

        :param rel: The rel of this ImageLink.
        :type rel: str
        """
        allowed_values = ["logo_square", "icon", "wide", "standard", "square", "enlargement", "custom"]  # noqa: E501
        if rel not in allowed_values:
            raise ValueError(
                "Invalid value for `rel` ({0}), must be one of {1}"
                .format(rel, allowed_values)
            )

        self._rel = rel
