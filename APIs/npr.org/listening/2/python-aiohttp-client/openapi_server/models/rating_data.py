# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class RatingData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, affiliations: List[object]=None, channel: str='npr', cohort: str=None, duration: int=None, elapsed: int=None, media_id: str=None, origin: str=None, rating: str=None, timestamp: datetime=None):
        """RatingData - a model defined in OpenAPI

        :param affiliations: The affiliations of this RatingData.
        :param channel: The channel of this RatingData.
        :param cohort: The cohort of this RatingData.
        :param duration: The duration of this RatingData.
        :param elapsed: The elapsed of this RatingData.
        :param media_id: The media_id of this RatingData.
        :param origin: The origin of this RatingData.
        :param rating: The rating of this RatingData.
        :param timestamp: The timestamp of this RatingData.
        """
        self.openapi_types = {
            'affiliations': List[object],
            'channel': str,
            'cohort': str,
            'duration': int,
            'elapsed': int,
            'media_id': str,
            'origin': str,
            'rating': str,
            'timestamp': datetime
        }

        self.attribute_map = {
            'affiliations': 'affiliations',
            'channel': 'channel',
            'cohort': 'cohort',
            'duration': 'duration',
            'elapsed': 'elapsed',
            'media_id': 'mediaId',
            'origin': 'origin',
            'rating': 'rating',
            'timestamp': 'timestamp'
        }

        self._affiliations = affiliations
        self._channel = channel
        self._cohort = cohort
        self._duration = duration
        self._elapsed = elapsed
        self._media_id = media_id
        self._origin = origin
        self._rating = rating
        self._timestamp = timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RatingData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RatingData of this RatingData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def affiliations(self):
        """Gets the affiliations of this RatingData.

        An array of IDs & other data about collections or podcasts the user has ratings for; produced by the server and should be sent back as received; used for tracking program and podcast suggestions

        :return: The affiliations of this RatingData.
        :rtype: List[object]
        """
        return self._affiliations

    @affiliations.setter
    def affiliations(self, affiliations):
        """Sets the affiliations of this RatingData.

        An array of IDs & other data about collections or podcasts the user has ratings for; produced by the server and should be sent back as received; used for tracking program and podcast suggestions

        :param affiliations: The affiliations of this RatingData.
        :type affiliations: List[object]
        """

        self._affiliations = affiliations

    @property
    def channel(self):
        """Gets the channel of this RatingData.

        The channel this media item was pulled from

        :return: The channel of this RatingData.
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this RatingData.

        The channel this media item was pulled from

        :param channel: The channel of this RatingData.
        :type channel: str
        """
        if channel is None:
            raise ValueError("Invalid value for `channel`, must not be `None`")

        self._channel = channel

    @property
    def cohort(self):
        """Gets the cohort of this RatingData.

        The primary cohort of the current logged-in user

        :return: The cohort of this RatingData.
        :rtype: str
        """
        return self._cohort

    @cohort.setter
    def cohort(self, cohort):
        """Sets the cohort of this RatingData.

        The primary cohort of the current logged-in user

        :param cohort: The cohort of this RatingData.
        :type cohort: str
        """
        if cohort is None:
            raise ValueError("Invalid value for `cohort`, must not be `None`")

        self._cohort = cohort

    @property
    def duration(self):
        """Gets the duration of this RatingData.

        Number of seconds this audio piece is expected to last

        :return: The duration of this RatingData.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this RatingData.

        Number of seconds this audio piece is expected to last

        :param duration: The duration of this RatingData.
        :type duration: int
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")
        if duration is not None and duration > 9999:
            raise ValueError("Invalid value for `duration`, must be a value less than or equal to `9999`")
        if duration is not None and duration < 0:
            raise ValueError("Invalid value for `duration`, must be a value greater than or equal to `0`")

        self._duration = duration

    @property
    def elapsed(self):
        """Gets the elapsed of this RatingData.

        Number of seconds since the start of playback for this media item, as an integer

        :return: The elapsed of this RatingData.
        :rtype: int
        """
        return self._elapsed

    @elapsed.setter
    def elapsed(self, elapsed):
        """Sets the elapsed of this RatingData.

        Number of seconds since the start of playback for this media item, as an integer

        :param elapsed: The elapsed of this RatingData.
        :type elapsed: int
        """
        if elapsed is None:
            raise ValueError("Invalid value for `elapsed`, must not be `None`")
        if elapsed is not None and elapsed > 9999:
            raise ValueError("Invalid value for `elapsed`, must be a value less than or equal to `9999`")
        if elapsed is not None and elapsed < 0:
            raise ValueError("Invalid value for `elapsed`, must be a value greater than or equal to `0`")

        self._elapsed = elapsed

    @property
    def media_id(self):
        """Gets the media_id of this RatingData.

        The media id as given by the media object

        :return: The media_id of this RatingData.
        :rtype: str
        """
        return self._media_id

    @media_id.setter
    def media_id(self, media_id):
        """Sets the media_id of this RatingData.

        The media id as given by the media object

        :param media_id: The media_id of this RatingData.
        :type media_id: str
        """
        if media_id is None:
            raise ValueError("Invalid value for `media_id`, must not be `None`")
        if media_id is not None and not re.search(r'^\d{3,}:[\w-]{5,}$', media_id):
            raise ValueError("Invalid value for `media_id`, must be a follow pattern or equal to `/^\d{3,}:[\w-]{5,}$/`")

        self._media_id = media_id

    @property
    def origin(self):
        """Gets the origin of this RatingData.

        How the recommendation was generated

        :return: The origin of this RatingData.
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this RatingData.

        How the recommendation was generated

        :param origin: The origin of this RatingData.
        :type origin: str
        """
        if origin is None:
            raise ValueError("Invalid value for `origin`, must not be `None`")
        if origin is not None and not re.search(r'^[A-Z0-9_]{2,10}$', origin):
            raise ValueError("Invalid value for `origin`, must be a follow pattern or equal to `/^[A-Z0-9_]{2,10}$/`")

        self._origin = origin

    @property
    def rating(self):
        """Gets the rating of this RatingData.

        String representing the rating

        :return: The rating of this RatingData.
        :rtype: str
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this RatingData.

        String representing the rating

        :param rating: The rating of this RatingData.
        :type rating: str
        """
        if rating is None:
            raise ValueError("Invalid value for `rating`, must not be `None`")
        if rating is not None and not re.search(r'^[A-Z0-9_]{2,10}$', rating):
            raise ValueError("Invalid value for `rating`, must be a follow pattern or equal to `/^[A-Z0-9_]{2,10}$/`")

        self._rating = rating

    @property
    def timestamp(self):
        """Gets the timestamp of this RatingData.

        ISO-8601 formatted date/time; typically replaced by the client with the actual rating time

        :return: The timestamp of this RatingData.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this RatingData.

        ISO-8601 formatted date/time; typically replaced by the client with the actual rating time

        :param timestamp: The timestamp of this RatingData.
        :type timestamp: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")

        self._timestamp = timestamp
