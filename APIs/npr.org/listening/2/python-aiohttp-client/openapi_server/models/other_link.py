# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OtherLink(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, href: str=None, content_type: str='application/json', link_text: str=None, poll_interval: int=None):
        """OtherLink - a model defined in OpenAPI

        :param href: The href of this OtherLink.
        :param content_type: The content_type of this OtherLink.
        :param link_text: The link_text of this OtherLink.
        :param poll_interval: The poll_interval of this OtherLink.
        """
        self.openapi_types = {
            'href': str,
            'content_type': str,
            'link_text': str,
            'poll_interval': int
        }

        self.attribute_map = {
            'href': 'href',
            'content_type': 'content-type',
            'link_text': 'linkText',
            'poll_interval': 'pollInterval'
        }

        self._href = href
        self._content_type = content_type
        self._link_text = link_text
        self._poll_interval = poll_interval

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OtherLink':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OtherLink of this OtherLink.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def href(self):
        """Gets the href of this OtherLink.

        The link to be followed

        :return: The href of this OtherLink.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this OtherLink.

        The link to be followed

        :param href: The href of this OtherLink.
        :type href: str
        """
        if href is None:
            raise ValueError("Invalid value for `href`, must not be `None`")

        self._href = href

    @property
    def content_type(self):
        """Gets the content_type of this OtherLink.

        The MIME type of the response of this link; note that the enumerated list of possible values is not exhaustive and other MIME types could occur. The list should be treated as examples, rather than absolutes.

        :return: The content_type of this OtherLink.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this OtherLink.

        The MIME type of the response of this link; note that the enumerated list of possible values is not exhaustive and other MIME types could occur. The list should be treated as examples, rather than absolutes.

        :param content_type: The content_type of this OtherLink.
        :type content_type: str
        """
        allowed_values = ["application/json", "application/xml", "text/html"]  # noqa: E501
        if content_type not in allowed_values:
            raise ValueError(
                "Invalid value for `content_type` ({0}), must be one of {1}"
                .format(content_type, allowed_values)
            )

        self._content_type = content_type

    @property
    def link_text(self):
        """Gets the link_text of this OtherLink.

        Text recommended to accompany the link. For example, 'Read Story' with a full story link, or 'Read Transcript' with a transcript link.

        :return: The link_text of this OtherLink.
        :rtype: str
        """
        return self._link_text

    @link_text.setter
    def link_text(self, link_text):
        """Sets the link_text of this OtherLink.

        Text recommended to accompany the link. For example, 'Read Story' with a full story link, or 'Read Transcript' with a transcript link.

        :param link_text: The link_text of this OtherLink.
        :type link_text: str
        """

        self._link_text = link_text

    @property
    def poll_interval(self):
        """Gets the poll_interval of this OtherLink.

        When present, the recommended number of seconds between requests to the given URL

        :return: The poll_interval of this OtherLink.
        :rtype: int
        """
        return self._poll_interval

    @poll_interval.setter
    def poll_interval(self, poll_interval):
        """Sets the poll_interval of this OtherLink.

        When present, the recommended number of seconds between requests to the given URL

        :param poll_interval: The poll_interval of this OtherLink.
        :type poll_interval: int
        """

        self._poll_interval = poll_interval
