# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.aggregation_audio_item_list_document import AggregationAudioItemListDocument
from openapi_server.models.audio_item_document import AudioItemDocument
from openapi_server import util


class SearchItemDocument(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, if_type_aggregation: AggregationAudioItemListDocument=None, if_type_audio: AudioItemDocument=None, type: str=None):
        """SearchItemDocument - a model defined in OpenAPI

        :param if_type_aggregation: The if_type_aggregation of this SearchItemDocument.
        :param if_type_audio: The if_type_audio of this SearchItemDocument.
        :param type: The type of this SearchItemDocument.
        """
        self.openapi_types = {
            'if_type_aggregation': AggregationAudioItemListDocument,
            'if_type_audio': AudioItemDocument,
            'type': str
        }

        self.attribute_map = {
            'if_type_aggregation': 'ifTypeAggregation',
            'if_type_audio': 'ifTypeAudio',
            'type': 'type'
        }

        self._if_type_aggregation = if_type_aggregation
        self._if_type_audio = if_type_audio
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchItemDocument':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchItemDocument of this SearchItemDocument.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def if_type_aggregation(self):
        """Gets the if_type_aggregation of this SearchItemDocument.


        :return: The if_type_aggregation of this SearchItemDocument.
        :rtype: AggregationAudioItemListDocument
        """
        return self._if_type_aggregation

    @if_type_aggregation.setter
    def if_type_aggregation(self, if_type_aggregation):
        """Sets the if_type_aggregation of this SearchItemDocument.


        :param if_type_aggregation: The if_type_aggregation of this SearchItemDocument.
        :type if_type_aggregation: AggregationAudioItemListDocument
        """

        self._if_type_aggregation = if_type_aggregation

    @property
    def if_type_audio(self):
        """Gets the if_type_audio of this SearchItemDocument.


        :return: The if_type_audio of this SearchItemDocument.
        :rtype: AudioItemDocument
        """
        return self._if_type_audio

    @if_type_audio.setter
    def if_type_audio(self, if_type_audio):
        """Sets the if_type_audio of this SearchItemDocument.


        :param if_type_audio: The if_type_audio of this SearchItemDocument.
        :type if_type_audio: AudioItemDocument
        """

        self._if_type_audio = if_type_audio

    @property
    def type(self):
        """Gets the type of this SearchItemDocument.

        The type of search result, which is either an AggregationAudioItemListDocument or an AudioItemDocument

        :return: The type of this SearchItemDocument.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SearchItemDocument.

        The type of search result, which is either an AggregationAudioItemListDocument or an AudioItemDocument

        :param type: The type of this SearchItemDocument.
        :type type: str
        """
        allowed_values = ["audio", "aggregation"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
