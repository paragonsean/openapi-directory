# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Affiliation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, days_since_last_listen: int=None, following: bool=False, href: str=None, id: int=None, notif_following: List[str]=None, notif_rated: List[str]=None, rating: float=None, title: str=None):
        """Affiliation - a model defined in OpenAPI

        :param days_since_last_listen: The days_since_last_listen of this Affiliation.
        :param following: The following of this Affiliation.
        :param href: The href of this Affiliation.
        :param id: The id of this Affiliation.
        :param notif_following: The notif_following of this Affiliation.
        :param notif_rated: The notif_rated of this Affiliation.
        :param rating: The rating of this Affiliation.
        :param title: The title of this Affiliation.
        """
        self.openapi_types = {
            'days_since_last_listen': int,
            'following': bool,
            'href': str,
            'id': int,
            'notif_following': List[str],
            'notif_rated': List[str],
            'rating': float,
            'title': str
        }

        self.attribute_map = {
            'days_since_last_listen': 'daysSinceLastListen',
            'following': 'following',
            'href': 'href',
            'id': 'id',
            'notif_following': 'notif_following',
            'notif_rated': 'notif_rated',
            'rating': 'rating',
            'title': 'title'
        }

        self._days_since_last_listen = days_since_last_listen
        self._following = following
        self._href = href
        self._id = id
        self._notif_following = notif_following
        self._notif_rated = notif_rated
        self._rating = rating
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Affiliation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Affiliation of this Affiliation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def days_since_last_listen(self):
        """Gets the days_since_last_listen of this Affiliation.

        The number of days since a user last listened to a story from this aggregation. Absent if user never listened to the aggregation.

        :return: The days_since_last_listen of this Affiliation.
        :rtype: int
        """
        return self._days_since_last_listen

    @days_since_last_listen.setter
    def days_since_last_listen(self, days_since_last_listen):
        """Sets the days_since_last_listen of this Affiliation.

        The number of days since a user last listened to a story from this aggregation. Absent if user never listened to the aggregation.

        :param days_since_last_listen: The days_since_last_listen of this Affiliation.
        :type days_since_last_listen: int
        """

        self._days_since_last_listen = days_since_last_listen

    @property
    def following(self):
        """Gets the following of this Affiliation.

        Whether or not the user is following the aggregation. When changing affiliation status, the client is expected to toggle this value and then send the entire object back.

        :return: The following of this Affiliation.
        :rtype: bool
        """
        return self._following

    @following.setter
    def following(self, following):
        """Sets the following of this Affiliation.

        Whether or not the user is following the aggregation. When changing affiliation status, the client is expected to toggle this value and then send the entire object back.

        :param following: The following of this Affiliation.
        :type following: bool
        """
        if following is None:
            raise ValueError("Invalid value for `following`, must not be `None`")

        self._following = following

    @property
    def href(self):
        """Gets the href of this Affiliation.

        A link to more details about the program from the NPR Story API

        :return: The href of this Affiliation.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this Affiliation.

        A link to more details about the program from the NPR Story API

        :param href: The href of this Affiliation.
        :type href: str
        """
        if href is None:
            raise ValueError("Invalid value for `href`, must not be `None`")

        self._href = href

    @property
    def id(self):
        """Gets the id of this Affiliation.

        A unique identifier for the aggregation (program)

        :return: The id of this Affiliation.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Affiliation.

        A unique identifier for the aggregation (program)

        :param id: The id of this Affiliation.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def notif_following(self):
        """Gets the notif_following of this Affiliation.

        The topic in Firebase Cloud Messaging to which the device should subscribe if it supports notifications and the user wants notifications about the podcasts they follow.

        :return: The notif_following of this Affiliation.
        :rtype: List[str]
        """
        return self._notif_following

    @notif_following.setter
    def notif_following(self, notif_following):
        """Sets the notif_following of this Affiliation.

        The topic in Firebase Cloud Messaging to which the device should subscribe if it supports notifications and the user wants notifications about the podcasts they follow.

        :param notif_following: The notif_following of this Affiliation.
        :type notif_following: List[str]
        """

        self._notif_following = notif_following

    @property
    def notif_rated(self):
        """Gets the notif_rated of this Affiliation.

        The topic in Firebase Cloud Messaging to which the device should subscribe if it supports notifications and the user wants notifications about the podcasts they have highly rated.

        :return: The notif_rated of this Affiliation.
        :rtype: List[str]
        """
        return self._notif_rated

    @notif_rated.setter
    def notif_rated(self, notif_rated):
        """Sets the notif_rated of this Affiliation.

        The topic in Firebase Cloud Messaging to which the device should subscribe if it supports notifications and the user wants notifications about the podcasts they have highly rated.

        :param notif_rated: The notif_rated of this Affiliation.
        :type notif_rated: List[str]
        """

        self._notif_rated = notif_rated

    @property
    def rating(self):
        """Gets the rating of this Affiliation.

        The user's average rating for this affiliation on a scale of 0-1. Absent if user never listened to the aggregation.

        :return: The rating of this Affiliation.
        :rtype: float
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this Affiliation.

        The user's average rating for this affiliation on a scale of 0-1. Absent if user never listened to the aggregation.

        :param rating: The rating of this Affiliation.
        :type rating: float
        """

        self._rating = rating

    @property
    def title(self):
        """Gets the title of this Affiliation.

        The title for the aggregation (program)

        :return: The title of this Affiliation.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Affiliation.

        The title for the aggregation (program)

        :param title: The title of this Affiliation.
        :type title: str
        """

        self._title = title
