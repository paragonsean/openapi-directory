# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Brand(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, band: str=None, call: str=None, frequency: str=None, market_city: str=None, market_state: str=None, name: str=None, tagline: str=None):
        """Brand - a model defined in OpenAPI

        :param band: The band of this Brand.
        :param call: The call of this Brand.
        :param frequency: The frequency of this Brand.
        :param market_city: The market_city of this Brand.
        :param market_state: The market_state of this Brand.
        :param name: The name of this Brand.
        :param tagline: The tagline of this Brand.
        """
        self.openapi_types = {
            'band': str,
            'call': str,
            'frequency': str,
            'market_city': str,
            'market_state': str,
            'name': str,
            'tagline': str
        }

        self.attribute_map = {
            'band': 'band',
            'call': 'call',
            'frequency': 'frequency',
            'market_city': 'marketCity',
            'market_state': 'marketState',
            'name': 'name',
            'tagline': 'tagline'
        }

        self._band = band
        self._call = call
        self._frequency = frequency
        self._market_city = market_city
        self._market_state = market_state
        self._name = name
        self._tagline = tagline

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Brand':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Brand of this Brand.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def band(self):
        """Gets the band of this Brand.

        The radio band for the organization if they are a station (AM or FM)

        :return: The band of this Brand.
        :rtype: str
        """
        return self._band

    @band.setter
    def band(self, band):
        """Sets the band of this Brand.

        The radio band for the organization if they are a station (AM or FM)

        :param band: The band of this Brand.
        :type band: str
        """

        self._band = band

    @property
    def call(self):
        """Gets the call of this Brand.

        The call letter for the organization if they are a station

        :return: The call of this Brand.
        :rtype: str
        """
        return self._call

    @call.setter
    def call(self, call):
        """Sets the call of this Brand.

        The call letter for the organization if they are a station

        :param call: The call of this Brand.
        :type call: str
        """
        if call is None:
            raise ValueError("Invalid value for `call`, must not be `None`")

        self._call = call

    @property
    def frequency(self):
        """Gets the frequency of this Brand.

        The radio frequency for the organization if they are a station

        :return: The frequency of this Brand.
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this Brand.

        The radio frequency for the organization if they are a station

        :param frequency: The frequency of this Brand.
        :type frequency: str
        """

        self._frequency = frequency

    @property
    def market_city(self):
        """Gets the market_city of this Brand.

        The market city for the organization

        :return: The market_city of this Brand.
        :rtype: str
        """
        return self._market_city

    @market_city.setter
    def market_city(self, market_city):
        """Sets the market_city of this Brand.

        The market city for the organization

        :param market_city: The market_city of this Brand.
        :type market_city: str
        """
        if market_city is None:
            raise ValueError("Invalid value for `market_city`, must not be `None`")

        self._market_city = market_city

    @property
    def market_state(self):
        """Gets the market_state of this Brand.

        The market state for the organization

        :return: The market_state of this Brand.
        :rtype: str
        """
        return self._market_state

    @market_state.setter
    def market_state(self, market_state):
        """Sets the market_state of this Brand.

        The market state for the organization

        :param market_state: The market_state of this Brand.
        :type market_state: str
        """

        self._market_state = market_state

    @property
    def name(self):
        """Gets the name of this Brand.

        The name of the organization

        :return: The name of this Brand.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Brand.

        The name of the organization

        :param name: The name of this Brand.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def tagline(self):
        """Gets the tagline of this Brand.

        The tagline for the organization

        :return: The tagline of this Brand.
        :rtype: str
        """
        return self._tagline

    @tagline.setter
    def tagline(self, tagline):
        """Sets the tagline of this Brand.

        The tagline for the organization

        :param tagline: The tagline of this Brand.
        :type tagline: str
        """

        self._tagline = tagline
