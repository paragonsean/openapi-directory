# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Geofence(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, countries: List[str]=None, restricted: bool=False):
        """Geofence - a model defined in OpenAPI

        :param countries: The countries of this Geofence.
        :param restricted: The restricted of this Geofence.
        """
        self.openapi_types = {
            'countries': List[str],
            'restricted': bool
        }

        self.attribute_map = {
            'countries': 'countries',
            'restricted': 'restricted'
        }

        self._countries = countries
        self._restricted = restricted

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Geofence':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Geofence of this Geofence.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def countries(self):
        """Gets the countries of this Geofence.

        The list of countries as ISO 3166-1 abbreviations in which this media should be available if restricted is true

        :return: The countries of this Geofence.
        :rtype: List[str]
        """
        return self._countries

    @countries.setter
    def countries(self, countries):
        """Sets the countries of this Geofence.

        The list of countries as ISO 3166-1 abbreviations in which this media should be available if restricted is true

        :param countries: The countries of this Geofence.
        :type countries: List[str]
        """
        if countries is None:
            raise ValueError("Invalid value for `countries`, must not be `None`")

        self._countries = countries

    @property
    def restricted(self):
        """Gets the restricted of this Geofence.

        Whether any geographic restrictions should be applied

        :return: The restricted of this Geofence.
        :rtype: bool
        """
        return self._restricted

    @restricted.setter
    def restricted(self, restricted):
        """Sets the restricted of this Geofence.

        Whether any geographic restrictions should be applied

        :param restricted: The restricted of this Geofence.
        :type restricted: bool
        """
        if restricted is None:
            raise ValueError("Invalid value for `restricted`, must not be `None`")

        self._restricted = restricted
