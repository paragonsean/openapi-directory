# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.affiliation import Affiliation
from openapi_server import util


class AggregationData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, affiliation: str=None, affiliation_meta: Affiliation=None, description: str=None, provider: str='NPR', station: str='NPR', title: str=None, type: str='aggregation'):
        """AggregationData - a model defined in OpenAPI

        :param affiliation: The affiliation of this AggregationData.
        :param affiliation_meta: The affiliation_meta of this AggregationData.
        :param description: The description of this AggregationData.
        :param provider: The provider of this AggregationData.
        :param station: The station of this AggregationData.
        :param title: The title of this AggregationData.
        :param type: The type of this AggregationData.
        """
        self.openapi_types = {
            'affiliation': str,
            'affiliation_meta': Affiliation,
            'description': str,
            'provider': str,
            'station': str,
            'title': str,
            'type': str
        }

        self.attribute_map = {
            'affiliation': 'affiliation',
            'affiliation_meta': 'affiliationMeta',
            'description': 'description',
            'provider': 'provider',
            'station': 'station',
            'title': 'title',
            'type': 'type'
        }

        self._affiliation = affiliation
        self._affiliation_meta = affiliation_meta
        self._description = description
        self._provider = provider
        self._station = station
        self._title = title
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AggregationData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AggregationData of this AggregationData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def affiliation(self):
        """Gets the affiliation of this AggregationData.

        A unique identifier for the aggregation

        :return: The affiliation of this AggregationData.
        :rtype: str
        """
        return self._affiliation

    @affiliation.setter
    def affiliation(self, affiliation):
        """Sets the affiliation of this AggregationData.

        A unique identifier for the aggregation

        :param affiliation: The affiliation of this AggregationData.
        :type affiliation: str
        """
        if affiliation is None:
            raise ValueError("Invalid value for `affiliation`, must not be `None`")

        self._affiliation = affiliation

    @property
    def affiliation_meta(self):
        """Gets the affiliation_meta of this AggregationData.


        :return: The affiliation_meta of this AggregationData.
        :rtype: Affiliation
        """
        return self._affiliation_meta

    @affiliation_meta.setter
    def affiliation_meta(self, affiliation_meta):
        """Sets the affiliation_meta of this AggregationData.


        :param affiliation_meta: The affiliation_meta of this AggregationData.
        :type affiliation_meta: Affiliation
        """

        self._affiliation_meta = affiliation_meta

    @property
    def description(self):
        """Gets the description of this AggregationData.

        A short description or teaser

        :return: The description of this AggregationData.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AggregationData.

        A short description or teaser

        :param description: The description of this AggregationData.
        :type description: str
        """

        self._description = description

    @property
    def provider(self):
        """Gets the provider of this AggregationData.

        The producer of this aggregation

        :return: The provider of this AggregationData.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this AggregationData.

        The producer of this aggregation

        :param provider: The provider of this AggregationData.
        :type provider: str
        """

        self._provider = provider

    @property
    def station(self):
        """Gets the station of this AggregationData.

        Deprecated - clients should switch to use provider.

        :return: The station of this AggregationData.
        :rtype: str
        """
        return self._station

    @station.setter
    def station(self, station):
        """Sets the station of this AggregationData.

        Deprecated - clients should switch to use provider.

        :param station: The station of this AggregationData.
        :type station: str
        """

        self._station = station

    @property
    def title(self):
        """Gets the title of this AggregationData.

        The title of this aggregation

        :return: The title of this AggregationData.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this AggregationData.

        The title of this aggregation

        :param title: The title of this AggregationData.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def type(self):
        """Gets the type of this AggregationData.

        The type of list returned; will always be `aggregation`; useful for parsing search results

        :return: The type of this AggregationData.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AggregationData.

        The type of list returned; will always be `aggregation`; useful for parsing search results

        :param type: The type of this AggregationData.
        :type type: str
        """
        allowed_values = ["aggregation"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
