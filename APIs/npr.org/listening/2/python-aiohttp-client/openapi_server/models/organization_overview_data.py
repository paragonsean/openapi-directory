# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.brand import Brand
from openapi_server import util


class OrganizationOverviewData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, brand: Brand=None, home: bool=None, type: str='organization'):
        """OrganizationOverviewData - a model defined in OpenAPI

        :param brand: The brand of this OrganizationOverviewData.
        :param home: The home of this OrganizationOverviewData.
        :param type: The type of this OrganizationOverviewData.
        """
        self.openapi_types = {
            'brand': Brand,
            'home': bool,
            'type': str
        }

        self.attribute_map = {
            'brand': 'brand',
            'home': 'home',
            'type': 'type'
        }

        self._brand = brand
        self._home = home
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrganizationOverviewData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrganizationOverviewData of this OrganizationOverviewData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def brand(self):
        """Gets the brand of this OrganizationOverviewData.


        :return: The brand of this OrganizationOverviewData.
        :rtype: Brand
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this OrganizationOverviewData.


        :param brand: The brand of this OrganizationOverviewData.
        :type brand: Brand
        """
        if brand is None:
            raise ValueError("Invalid value for `brand`, must not be `None`")

        self._brand = brand

    @property
    def home(self):
        """Gets the home of this OrganizationOverviewData.

        Flag indicating if the current view is in the user's home network

        :return: The home of this OrganizationOverviewData.
        :rtype: bool
        """
        return self._home

    @home.setter
    def home(self, home):
        """Sets the home of this OrganizationOverviewData.

        Flag indicating if the current view is in the user's home network

        :param home: The home of this OrganizationOverviewData.
        :type home: bool
        """

        self._home = home

    @property
    def type(self):
        """Gets the type of this OrganizationOverviewData.

        The type of list returned; will always be `organization`

        :return: The type of this OrganizationOverviewData.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OrganizationOverviewData.

        The type of list returned; will always be `organization`

        :param type: The type of this OrganizationOverviewData.
        :type type: str
        """
        allowed_values = ["organization"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
