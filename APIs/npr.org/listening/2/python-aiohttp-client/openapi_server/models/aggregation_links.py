# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image_link import ImageLink
from openapi_server.models.other_link import OtherLink
from openapi_server import util


class AggregationLinks(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, binge: List[OtherLink]=None, image: List[ImageLink]=None, more: List[OtherLink]=None, web: List[OtherLink]=None):
        """AggregationLinks - a model defined in OpenAPI

        :param binge: The binge of this AggregationLinks.
        :param image: The image of this AggregationLinks.
        :param more: The more of this AggregationLinks.
        :param web: The web of this AggregationLinks.
        """
        self.openapi_types = {
            'binge': List[OtherLink],
            'image': List[ImageLink],
            'more': List[OtherLink],
            'web': List[OtherLink]
        }

        self.attribute_map = {
            'binge': 'binge',
            'image': 'image',
            'more': 'more',
            'web': 'web'
        }

        self._binge = binge
        self._image = image
        self._more = more
        self._web = web

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AggregationLinks':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AggregationLinks of this AggregationLinks.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def binge(self):
        """Gets the binge of this AggregationLinks.

        One or more links to more unrated / unheard recommendations from this aggregation

        :return: The binge of this AggregationLinks.
        :rtype: List[OtherLink]
        """
        return self._binge

    @binge.setter
    def binge(self, binge):
        """Sets the binge of this AggregationLinks.

        One or more links to more unrated / unheard recommendations from this aggregation

        :param binge: The binge of this AggregationLinks.
        :type binge: List[OtherLink]
        """

        self._binge = binge

    @property
    def image(self):
        """Gets the image of this AggregationLinks.

        One or more links to an image, along with metadata for display

        :return: The image of this AggregationLinks.
        :rtype: List[ImageLink]
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this AggregationLinks.

        One or more links to an image, along with metadata for display

        :param image: The image of this AggregationLinks.
        :type image: List[ImageLink]
        """

        self._image = image

    @property
    def more(self):
        """Gets the more of this AggregationLinks.

        One or more links to more episodes for the aggregation

        :return: The more of this AggregationLinks.
        :rtype: List[OtherLink]
        """
        return self._more

    @more.setter
    def more(self, more):
        """Sets the more of this AggregationLinks.

        One or more links to more episodes for the aggregation

        :param more: The more of this AggregationLinks.
        :type more: List[OtherLink]
        """

        self._more = more

    @property
    def web(self):
        """Gets the web of this AggregationLinks.

        One or more links to a web page for the item

        :return: The web of this AggregationLinks.
        :rtype: List[OtherLink]
        """
        return self._web

    @web.setter
    def web(self, web):
        """Sets the web of this AggregationLinks.

        One or more links to a web page for the item

        :param web: The web of this AggregationLinks.
        :type web: List[OtherLink]
        """

        self._web = web
