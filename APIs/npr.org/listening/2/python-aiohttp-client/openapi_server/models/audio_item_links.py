# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.audio_link import AudioLink
from openapi_server.models.image_link import ImageLink
from openapi_server.models.other_link import OtherLink
from openapi_server import util


class AudioItemLinks(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: List[OtherLink]=None, audio: List[AudioLink]=None, binge: List[OtherLink]=None, image: List[ImageLink]=None, onramps: List[OtherLink]=None, ratings: List[OtherLink]=None, recommendations: List[OtherLink]=None, stream_metadata: List[OtherLink]=None, up: List[OtherLink]=None, web: List[OtherLink]=None):
        """AudioItemLinks - a model defined in OpenAPI

        :param action: The action of this AudioItemLinks.
        :param audio: The audio of this AudioItemLinks.
        :param binge: The binge of this AudioItemLinks.
        :param image: The image of this AudioItemLinks.
        :param onramps: The onramps of this AudioItemLinks.
        :param ratings: The ratings of this AudioItemLinks.
        :param recommendations: The recommendations of this AudioItemLinks.
        :param stream_metadata: The stream_metadata of this AudioItemLinks.
        :param up: The up of this AudioItemLinks.
        :param web: The web of this AudioItemLinks.
        """
        self.openapi_types = {
            'action': List[OtherLink],
            'audio': List[AudioLink],
            'binge': List[OtherLink],
            'image': List[ImageLink],
            'onramps': List[OtherLink],
            'ratings': List[OtherLink],
            'recommendations': List[OtherLink],
            'stream_metadata': List[OtherLink],
            'up': List[OtherLink],
            'web': List[OtherLink]
        }

        self.attribute_map = {
            'action': 'action',
            'audio': 'audio',
            'binge': 'binge',
            'image': 'image',
            'onramps': 'onramps',
            'ratings': 'ratings',
            'recommendations': 'recommendations',
            'stream_metadata': 'stream-metadata',
            'up': 'up',
            'web': 'web'
        }

        self._action = action
        self._audio = audio
        self._binge = binge
        self._image = image
        self._onramps = onramps
        self._ratings = ratings
        self._recommendations = recommendations
        self._stream_metadata = stream_metadata
        self._up = up
        self._web = web

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AudioItemLinks':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AudioItemLinks of this AudioItemLinks.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this AudioItemLinks.

        One or more links to be trigged by user actions, usually when a button is clicked

        :return: The action of this AudioItemLinks.
        :rtype: List[OtherLink]
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this AudioItemLinks.

        One or more links to be trigged by user actions, usually when a button is clicked

        :param action: The action of this AudioItemLinks.
        :type action: List[OtherLink]
        """

        self._action = action

    @property
    def audio(self):
        """Gets the audio of this AudioItemLinks.

        One or more links to audio files for the item

        :return: The audio of this AudioItemLinks.
        :rtype: List[AudioLink]
        """
        return self._audio

    @audio.setter
    def audio(self, audio):
        """Sets the audio of this AudioItemLinks.

        One or more links to audio files for the item

        :param audio: The audio of this AudioItemLinks.
        :type audio: List[AudioLink]
        """

        self._audio = audio

    @property
    def binge(self):
        """Gets the binge of this AudioItemLinks.

        One or more links that start a flow-based experience focused on the aggregation

        :return: The binge of this AudioItemLinks.
        :rtype: List[OtherLink]
        """
        return self._binge

    @binge.setter
    def binge(self, binge):
        """Sets the binge of this AudioItemLinks.

        One or more links that start a flow-based experience focused on the aggregation

        :param binge: The binge of this AudioItemLinks.
        :type binge: List[OtherLink]
        """

        self._binge = binge

    @property
    def image(self):
        """Gets the image of this AudioItemLinks.

        One or more links to an image, along with metadata for display

        :return: The image of this AudioItemLinks.
        :rtype: List[ImageLink]
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this AudioItemLinks.

        One or more links to an image, along with metadata for display

        :param image: The image of this AudioItemLinks.
        :type image: List[ImageLink]
        """

        self._image = image

    @property
    def onramps(self):
        """Gets the onramps of this AudioItemLinks.

        One or more shareable links for the item

        :return: The onramps of this AudioItemLinks.
        :rtype: List[OtherLink]
        """
        return self._onramps

    @onramps.setter
    def onramps(self, onramps):
        """Sets the onramps of this AudioItemLinks.

        One or more shareable links for the item

        :param onramps: The onramps of this AudioItemLinks.
        :type onramps: List[OtherLink]
        """

        self._onramps = onramps

    @property
    def ratings(self):
        """Gets the ratings of this AudioItemLinks.

        This is an alternate URL to use to POST the ratings JSON. Difference between this and 'recommendations' is that 'ratings' will NOT return back recommendations of audio to play next.

        :return: The ratings of this AudioItemLinks.
        :rtype: List[OtherLink]
        """
        return self._ratings

    @ratings.setter
    def ratings(self, ratings):
        """Sets the ratings of this AudioItemLinks.

        This is an alternate URL to use to POST the ratings JSON. Difference between this and 'recommendations' is that 'ratings' will NOT return back recommendations of audio to play next.

        :param ratings: The ratings of this AudioItemLinks.
        :type ratings: List[OtherLink]
        """

        self._ratings = ratings

    @property
    def recommendations(self):
        """Gets the recommendations of this AudioItemLinks.

        This is the URL that should be POSTed with the ratings JSON when this audio starts to play

        :return: The recommendations of this AudioItemLinks.
        :rtype: List[OtherLink]
        """
        return self._recommendations

    @recommendations.setter
    def recommendations(self, recommendations):
        """Sets the recommendations of this AudioItemLinks.

        This is the URL that should be POSTed with the ratings JSON when this audio starts to play

        :param recommendations: The recommendations of this AudioItemLinks.
        :type recommendations: List[OtherLink]
        """

        self._recommendations = recommendations

    @property
    def stream_metadata(self):
        """Gets the stream_metadata of this AudioItemLinks.

        Links that can be polled to retreive current program metadata for a given stream

        :return: The stream_metadata of this AudioItemLinks.
        :rtype: List[OtherLink]
        """
        return self._stream_metadata

    @stream_metadata.setter
    def stream_metadata(self, stream_metadata):
        """Sets the stream_metadata of this AudioItemLinks.

        Links that can be polled to retreive current program metadata for a given stream

        :param stream_metadata: The stream_metadata of this AudioItemLinks.
        :type stream_metadata: List[OtherLink]
        """

        self._stream_metadata = stream_metadata

    @property
    def up(self):
        """Gets the up of this AudioItemLinks.

        One or more links to more details about the program or podcast with which this item is associated

        :return: The up of this AudioItemLinks.
        :rtype: List[OtherLink]
        """
        return self._up

    @up.setter
    def up(self, up):
        """Sets the up of this AudioItemLinks.

        One or more links to more details about the program or podcast with which this item is associated

        :param up: The up of this AudioItemLinks.
        :type up: List[OtherLink]
        """

        self._up = up

    @property
    def web(self):
        """Gets the web of this AudioItemLinks.

        One or more links to a web page for the item

        :return: The web of this AudioItemLinks.
        :rtype: List[OtherLink]
        """
        return self._web

    @web.setter
    def web(self, web):
        """Sets the web of this AudioItemLinks.

        One or more links to a web page for the item

        :param web: The web of this AudioItemLinks.
        :type web: List[OtherLink]
        """

        self._web = web
