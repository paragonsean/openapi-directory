/*
 * Health ID Service
 * It is important to standardize the process of identification of an individual across healthcare providers, to ensure that the created medical records are issued to the right individual or accessed by a Health Information User through appropriate consent.  In order to issue a Health ID to an individual, one only needs basic demographic details like Name, Year of Birth, Gender. In addition, citizens should be able to update contact information easily.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateAccountByVerifiedMobileRequest;
import org.openapitools.client.model.CreateAccountJwtResponse;
import org.openapitools.client.model.GenerateMobileOTPRequest;
import org.openapitools.client.model.MobileVerificationToken;
import org.openapitools.client.model.ResendOTPRequest;
import org.openapitools.client.model.TxnResponse;
import org.openapitools.client.model.VerifyMobileRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RegistrationWithMobileNumberApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RegistrationWithMobileNumberApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RegistrationWithMobileNumberApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for generateMobileOTPUsingPOST1
     * @param generateOtpRequest generateOtpRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateMobileOTPUsingPOST1Call(GenerateMobileOTPRequest generateOtpRequest, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = generateOtpRequest;

        // create path and map variables
        String localVarPath = "/v1/registration/mobile/generateOtp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization", "X-HIP-ID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateMobileOTPUsingPOST1ValidateBeforeCall(GenerateMobileOTPRequest generateOtpRequest, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'generateOtpRequest' is set
        if (generateOtpRequest == null) {
            throw new ApiException("Missing the required parameter 'generateOtpRequest' when calling generateMobileOTPUsingPOST1(Async)");
        }

        return generateMobileOTPUsingPOST1Call(generateOtpRequest, acceptLanguage, _callback);

    }

    /**
     * Generate Mobile OTP to start registration
     * Generate Mobile OTP to start registration transaction.
     * @param generateOtpRequest generateOtpRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return TxnResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public TxnResponse generateMobileOTPUsingPOST1(GenerateMobileOTPRequest generateOtpRequest, String acceptLanguage) throws ApiException {
        ApiResponse<TxnResponse> localVarResp = generateMobileOTPUsingPOST1WithHttpInfo(generateOtpRequest, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Generate Mobile OTP to start registration
     * Generate Mobile OTP to start registration transaction.
     * @param generateOtpRequest generateOtpRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;TxnResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TxnResponse> generateMobileOTPUsingPOST1WithHttpInfo(GenerateMobileOTPRequest generateOtpRequest, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = generateMobileOTPUsingPOST1ValidateBeforeCall(generateOtpRequest, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<TxnResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate Mobile OTP to start registration (asynchronously)
     * Generate Mobile OTP to start registration transaction.
     * @param generateOtpRequest generateOtpRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateMobileOTPUsingPOST1Async(GenerateMobileOTPRequest generateOtpRequest, String acceptLanguage, final ApiCallback<TxnResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateMobileOTPUsingPOST1ValidateBeforeCall(generateOtpRequest, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<TxnResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resentOtpUsingPOST
     * @param resendRequest resendRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resentOtpUsingPOSTCall(ResendOTPRequest resendRequest, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resendRequest;

        // create path and map variables
        String localVarPath = "/v1/registration/mobile/resendOtp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization", "X-HIP-ID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resentOtpUsingPOSTValidateBeforeCall(ResendOTPRequest resendRequest, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resendRequest' is set
        if (resendRequest == null) {
            throw new ApiException("Missing the required parameter 'resendRequest' when calling resentOtpUsingPOST(Async)");
        }

        return resentOtpUsingPOSTCall(resendRequest, acceptLanguage, _callback);

    }

    /**
     * Resend Mobile OTP for Health ID registration
     * Resend Mobile OTP in an existing transaction in case previous OTP is not received.
     * @param resendRequest resendRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return Boolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Boolean resentOtpUsingPOST(ResendOTPRequest resendRequest, String acceptLanguage) throws ApiException {
        ApiResponse<Boolean> localVarResp = resentOtpUsingPOSTWithHttpInfo(resendRequest, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Resend Mobile OTP for Health ID registration
     * Resend Mobile OTP in an existing transaction in case previous OTP is not received.
     * @param resendRequest resendRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Boolean> resentOtpUsingPOSTWithHttpInfo(ResendOTPRequest resendRequest, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = resentOtpUsingPOSTValidateBeforeCall(resendRequest, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Resend Mobile OTP for Health ID registration (asynchronously)
     * Resend Mobile OTP in an existing transaction in case previous OTP is not received.
     * @param resendRequest resendRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resentOtpUsingPOSTAsync(ResendOTPRequest resendRequest, String acceptLanguage, final ApiCallback<Boolean> _callback) throws ApiException {

        okhttp3.Call localVarCall = resentOtpUsingPOSTValidateBeforeCall(resendRequest, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifyMobileOTPUsingPOST
     * @param verifyOtpRequest verifyOtpRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyMobileOTPUsingPOSTCall(VerifyMobileRequest verifyOtpRequest, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = verifyOtpRequest;

        // create path and map variables
        String localVarPath = "/v1/registration/mobile/verifyOtp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization", "X-HIP-ID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyMobileOTPUsingPOSTValidateBeforeCall(VerifyMobileRequest verifyOtpRequest, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'verifyOtpRequest' is set
        if (verifyOtpRequest == null) {
            throw new ApiException("Missing the required parameter 'verifyOtpRequest' when calling verifyMobileOTPUsingPOST(Async)");
        }

        return verifyMobileOTPUsingPOSTCall(verifyOtpRequest, acceptLanguage, _callback);

    }

    /**
     * Verify Mobile OTP sent as part of registration transaction.
     * Verify Mobile OTP in current registration transaction.
     * @param verifyOtpRequest verifyOtpRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return MobileVerificationToken
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public MobileVerificationToken verifyMobileOTPUsingPOST(VerifyMobileRequest verifyOtpRequest, String acceptLanguage) throws ApiException {
        ApiResponse<MobileVerificationToken> localVarResp = verifyMobileOTPUsingPOSTWithHttpInfo(verifyOtpRequest, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Verify Mobile OTP sent as part of registration transaction.
     * Verify Mobile OTP in current registration transaction.
     * @param verifyOtpRequest verifyOtpRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;MobileVerificationToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MobileVerificationToken> verifyMobileOTPUsingPOSTWithHttpInfo(VerifyMobileRequest verifyOtpRequest, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = verifyMobileOTPUsingPOSTValidateBeforeCall(verifyOtpRequest, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<MobileVerificationToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Verify Mobile OTP sent as part of registration transaction. (asynchronously)
     * Verify Mobile OTP in current registration transaction.
     * @param verifyOtpRequest verifyOtpRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyMobileOTPUsingPOSTAsync(VerifyMobileRequest verifyOtpRequest, String acceptLanguage, final ApiCallback<MobileVerificationToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyMobileOTPUsingPOSTValidateBeforeCall(verifyOtpRequest, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<MobileVerificationToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifyUserViaMobileUsingPOST
     * @param createAccountRequest createAccountRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyUserViaMobileUsingPOSTCall(CreateAccountByVerifiedMobileRequest createAccountRequest, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAccountRequest;

        // create path and map variables
        String localVarPath = "/v1/registration/mobile/createHealthId";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization", "X-HIP-ID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyUserViaMobileUsingPOSTValidateBeforeCall(CreateAccountByVerifiedMobileRequest createAccountRequest, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createAccountRequest' is set
        if (createAccountRequest == null) {
            throw new ApiException("Missing the required parameter 'createAccountRequest' when calling verifyUserViaMobileUsingPOST(Async)");
        }

        return verifyUserViaMobileUsingPOSTCall(createAccountRequest, acceptLanguage, _callback);

    }

    /**
     * Create Health ID with verified mobile token
     * 
     * @param createAccountRequest createAccountRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return CreateAccountJwtResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public CreateAccountJwtResponse verifyUserViaMobileUsingPOST(CreateAccountByVerifiedMobileRequest createAccountRequest, String acceptLanguage) throws ApiException {
        ApiResponse<CreateAccountJwtResponse> localVarResp = verifyUserViaMobileUsingPOSTWithHttpInfo(createAccountRequest, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Create Health ID with verified mobile token
     * 
     * @param createAccountRequest createAccountRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;CreateAccountJwtResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAccountJwtResponse> verifyUserViaMobileUsingPOSTWithHttpInfo(CreateAccountByVerifiedMobileRequest createAccountRequest, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = verifyUserViaMobileUsingPOSTValidateBeforeCall(createAccountRequest, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<CreateAccountJwtResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Health ID with verified mobile token (asynchronously)
     * 
     * @param createAccountRequest createAccountRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyUserViaMobileUsingPOSTAsync(CreateAccountByVerifiedMobileRequest createAccountRequest, String acceptLanguage, final ApiCallback<CreateAccountJwtResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyUserViaMobileUsingPOSTValidateBeforeCall(createAccountRequest, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<CreateAccountJwtResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
