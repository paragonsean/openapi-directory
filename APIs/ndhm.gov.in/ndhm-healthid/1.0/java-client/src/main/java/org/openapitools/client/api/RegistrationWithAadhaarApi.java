/*
 * Health ID Service
 * It is important to standardize the process of identification of an individual across healthcare providers, to ensure that the created medical records are issued to the right individual or accessed by a Health Information User through appropriate consent.  In order to issue a Health ID to an individual, one only needs basic demographic details like Name, Year of Birth, Gender. In addition, citizens should be able to update contact information easily.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AadharNumberRequestPayload;
import org.openapitools.client.model.AadharOtpGenerateRequestPayLoad;
import org.openapitools.client.model.CreateAccountJwtResponse;
import org.openapitools.client.model.CreateAccountWithAadhaarOtp;
import org.openapitools.client.model.CreateAccountWithPreVerifiedAadhaar;
import org.openapitools.client.model.GenerateMobileOTPForTxnRequest;
import org.openapitools.client.model.ResendOTPRequest;
import org.openapitools.client.model.TxnResponse;
import org.openapitools.client.model.VerifyAadhaarOtp;
import org.openapitools.client.model.VerifyAadhaarWithBio;
import org.openapitools.client.model.VerifyMobileRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RegistrationWithAadhaarApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RegistrationWithAadhaarApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RegistrationWithAadhaarApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createAadhaarAccountUsingPOST
     * @param accountRequest accountRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAadhaarAccountUsingPOSTCall(CreateAccountWithPreVerifiedAadhaar accountRequest, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountRequest;

        // create path and map variables
        String localVarPath = "/v1/registration/aadhaar/createHealthIdWithPreVerified";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization", "X-HIP-ID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAadhaarAccountUsingPOSTValidateBeforeCall(CreateAccountWithPreVerifiedAadhaar accountRequest, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountRequest' is set
        if (accountRequest == null) {
            throw new ApiException("Missing the required parameter 'accountRequest' when calling createAadhaarAccountUsingPOST(Async)");
        }

        return createAadhaarAccountUsingPOSTCall(accountRequest, acceptLanguage, _callback);

    }

    /**
     * Create Health ID using pre-verified Aadhaar &amp; Mobile.
     * Create Health ID using pre-verified Aadhaar &amp; Mobile.
     * @param accountRequest accountRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return CreateAccountJwtResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public CreateAccountJwtResponse createAadhaarAccountUsingPOST(CreateAccountWithPreVerifiedAadhaar accountRequest, String acceptLanguage) throws ApiException {
        ApiResponse<CreateAccountJwtResponse> localVarResp = createAadhaarAccountUsingPOSTWithHttpInfo(accountRequest, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Create Health ID using pre-verified Aadhaar &amp; Mobile.
     * Create Health ID using pre-verified Aadhaar &amp; Mobile.
     * @param accountRequest accountRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;CreateAccountJwtResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAccountJwtResponse> createAadhaarAccountUsingPOSTWithHttpInfo(CreateAccountWithPreVerifiedAadhaar accountRequest, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = createAadhaarAccountUsingPOSTValidateBeforeCall(accountRequest, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<CreateAccountJwtResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Health ID using pre-verified Aadhaar &amp; Mobile. (asynchronously)
     * Create Health ID using pre-verified Aadhaar &amp; Mobile.
     * @param accountRequest accountRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAadhaarAccountUsingPOSTAsync(CreateAccountWithPreVerifiedAadhaar accountRequest, String acceptLanguage, final ApiCallback<CreateAccountJwtResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAadhaarAccountUsingPOSTValidateBeforeCall(accountRequest, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<CreateAccountJwtResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for generateAadharOTPUsingPOST
     * @param generateOtpRequest generateOtpRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateAadharOTPUsingPOSTCall(AadharOtpGenerateRequestPayLoad generateOtpRequest, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = generateOtpRequest;

        // create path and map variables
        String localVarPath = "/v1/registration/aadhaar/generateOtp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization", "X-HIP-ID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateAadharOTPUsingPOSTValidateBeforeCall(AadharOtpGenerateRequestPayLoad generateOtpRequest, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'generateOtpRequest' is set
        if (generateOtpRequest == null) {
            throw new ApiException("Missing the required parameter 'generateOtpRequest' when calling generateAadharOTPUsingPOST(Async)");
        }

        return generateAadharOTPUsingPOSTCall(generateOtpRequest, acceptLanguage, _callback);

    }

    /**
     * Generate Aadhaar OTP on registrered mobile number
     * Generate Aadhaar OTP on registrered mobile number
     * @param generateOtpRequest generateOtpRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return TxnResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public TxnResponse generateAadharOTPUsingPOST(AadharOtpGenerateRequestPayLoad generateOtpRequest, String acceptLanguage) throws ApiException {
        ApiResponse<TxnResponse> localVarResp = generateAadharOTPUsingPOSTWithHttpInfo(generateOtpRequest, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Generate Aadhaar OTP on registrered mobile number
     * Generate Aadhaar OTP on registrered mobile number
     * @param generateOtpRequest generateOtpRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;TxnResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TxnResponse> generateAadharOTPUsingPOSTWithHttpInfo(AadharOtpGenerateRequestPayLoad generateOtpRequest, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = generateAadharOTPUsingPOSTValidateBeforeCall(generateOtpRequest, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<TxnResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate Aadhaar OTP on registrered mobile number (asynchronously)
     * Generate Aadhaar OTP on registrered mobile number
     * @param generateOtpRequest generateOtpRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateAadharOTPUsingPOSTAsync(AadharOtpGenerateRequestPayLoad generateOtpRequest, String acceptLanguage, final ApiCallback<TxnResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateAadharOTPUsingPOSTValidateBeforeCall(generateOtpRequest, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<TxnResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for generateMobileOTPForTxnUsingPOST
     * @param request request (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateMobileOTPForTxnUsingPOSTCall(GenerateMobileOTPForTxnRequest request, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/v1/registration/aadhaar/generateMobileOTP";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization", "X-HIP-ID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateMobileOTPForTxnUsingPOSTValidateBeforeCall(GenerateMobileOTPForTxnRequest request, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling generateMobileOTPForTxnUsingPOST(Async)");
        }

        return generateMobileOTPForTxnUsingPOSTCall(request, acceptLanguage, _callback);

    }

    /**
     * Generate Mobile OTP for verification.
     * Generate Mobile OTP to verify mobile number.
     * @param request request (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return TxnResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public TxnResponse generateMobileOTPForTxnUsingPOST(GenerateMobileOTPForTxnRequest request, String acceptLanguage) throws ApiException {
        ApiResponse<TxnResponse> localVarResp = generateMobileOTPForTxnUsingPOSTWithHttpInfo(request, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Generate Mobile OTP for verification.
     * Generate Mobile OTP to verify mobile number.
     * @param request request (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;TxnResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TxnResponse> generateMobileOTPForTxnUsingPOSTWithHttpInfo(GenerateMobileOTPForTxnRequest request, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = generateMobileOTPForTxnUsingPOSTValidateBeforeCall(request, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<TxnResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate Mobile OTP for verification. (asynchronously)
     * Generate Mobile OTP to verify mobile number.
     * @param request request (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateMobileOTPForTxnUsingPOSTAsync(GenerateMobileOTPForTxnRequest request, String acceptLanguage, final ApiCallback<TxnResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateMobileOTPForTxnUsingPOSTValidateBeforeCall(request, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<TxnResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getHealthIdNumbersByAadharUsingPOST
     * @param aadharNumberRequestPayload aadharNumberRequestPayload (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHealthIdNumbersByAadharUsingPOSTCall(AadharNumberRequestPayload aadharNumberRequestPayload, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = aadharNumberRequestPayload;

        // create path and map variables
        String localVarPath = "/v1/registration/aadhaar/search/aadhar";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization", "X-HIP-ID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHealthIdNumbersByAadharUsingPOSTValidateBeforeCall(AadharNumberRequestPayload aadharNumberRequestPayload, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'aadharNumberRequestPayload' is set
        if (aadharNumberRequestPayload == null) {
            throw new ApiException("Missing the required parameter 'aadharNumberRequestPayload' when calling getHealthIdNumbersByAadharUsingPOST(Async)");
        }

        return getHealthIdNumbersByAadharUsingPOSTCall(aadharNumberRequestPayload, acceptLanguage, _callback);

    }

    /**
     * Search health id number using aadhar.
     * Search health id number using aadhar.
     * @param aadharNumberRequestPayload aadharNumberRequestPayload (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getHealthIdNumbersByAadharUsingPOST(AadharNumberRequestPayload aadharNumberRequestPayload, String acceptLanguage) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getHealthIdNumbersByAadharUsingPOSTWithHttpInfo(aadharNumberRequestPayload, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Search health id number using aadhar.
     * Search health id number using aadhar.
     * @param aadharNumberRequestPayload aadharNumberRequestPayload (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getHealthIdNumbersByAadharUsingPOSTWithHttpInfo(AadharNumberRequestPayload aadharNumberRequestPayload, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = getHealthIdNumbersByAadharUsingPOSTValidateBeforeCall(aadharNumberRequestPayload, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search health id number using aadhar. (asynchronously)
     * Search health id number using aadhar.
     * @param aadharNumberRequestPayload aadharNumberRequestPayload (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHealthIdNumbersByAadharUsingPOSTAsync(AadharNumberRequestPayload aadharNumberRequestPayload, String acceptLanguage, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHealthIdNumbersByAadharUsingPOSTValidateBeforeCall(aadharNumberRequestPayload, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resendAadharOTPUsingPOST
     * @param request request (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resendAadharOTPUsingPOSTCall(ResendOTPRequest request, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/v1/registration/aadhaar/resendAadhaarOtp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization", "X-HIP-ID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resendAadharOTPUsingPOSTValidateBeforeCall(ResendOTPRequest request, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling resendAadharOTPUsingPOST(Async)");
        }

        return resendAadharOTPUsingPOSTCall(request, acceptLanguage, _callback);

    }

    /**
     * Resend Aadhaar OTP on registrered mobile number to create Health ID.
     * Resend Aadhar OTP on registrered mobile number
     * @param request request (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return CreateAccountJwtResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public CreateAccountJwtResponse resendAadharOTPUsingPOST(ResendOTPRequest request, String acceptLanguage) throws ApiException {
        ApiResponse<CreateAccountJwtResponse> localVarResp = resendAadharOTPUsingPOSTWithHttpInfo(request, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Resend Aadhaar OTP on registrered mobile number to create Health ID.
     * Resend Aadhar OTP on registrered mobile number
     * @param request request (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;CreateAccountJwtResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAccountJwtResponse> resendAadharOTPUsingPOSTWithHttpInfo(ResendOTPRequest request, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = resendAadharOTPUsingPOSTValidateBeforeCall(request, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<CreateAccountJwtResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Resend Aadhaar OTP on registrered mobile number to create Health ID. (asynchronously)
     * Resend Aadhar OTP on registrered mobile number
     * @param request request (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resendAadharOTPUsingPOSTAsync(ResendOTPRequest request, String acceptLanguage, final ApiCallback<CreateAccountJwtResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = resendAadharOTPUsingPOSTValidateBeforeCall(request, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<CreateAccountJwtResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifyAadharBioUsingPOST
     * @param verifyAadharOtpRequest verifyAadharOtpRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyAadharBioUsingPOSTCall(VerifyAadhaarWithBio verifyAadharOtpRequest, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = verifyAadharOtpRequest;

        // create path and map variables
        String localVarPath = "/v1/registration/aadhaar/verifyBio";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization", "X-HIP-ID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyAadharBioUsingPOSTValidateBeforeCall(VerifyAadhaarWithBio verifyAadharOtpRequest, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'verifyAadharOtpRequest' is set
        if (verifyAadharOtpRequest == null) {
            throw new ApiException("Missing the required parameter 'verifyAadharOtpRequest' when calling verifyAadharBioUsingPOST(Async)");
        }

        return verifyAadharBioUsingPOSTCall(verifyAadharOtpRequest, acceptLanguage, _callback);

    }

    /**
     * Verify Aadhaar using biometrics.
     * Verify Aadhaar using biometrics
     * @param verifyAadharOtpRequest verifyAadharOtpRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return TxnResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public TxnResponse verifyAadharBioUsingPOST(VerifyAadhaarWithBio verifyAadharOtpRequest, String acceptLanguage) throws ApiException {
        ApiResponse<TxnResponse> localVarResp = verifyAadharBioUsingPOSTWithHttpInfo(verifyAadharOtpRequest, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Verify Aadhaar using biometrics.
     * Verify Aadhaar using biometrics
     * @param verifyAadharOtpRequest verifyAadharOtpRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;TxnResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TxnResponse> verifyAadharBioUsingPOSTWithHttpInfo(VerifyAadhaarWithBio verifyAadharOtpRequest, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = verifyAadharBioUsingPOSTValidateBeforeCall(verifyAadharOtpRequest, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<TxnResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Verify Aadhaar using biometrics. (asynchronously)
     * Verify Aadhaar using biometrics
     * @param verifyAadharOtpRequest verifyAadharOtpRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyAadharBioUsingPOSTAsync(VerifyAadhaarWithBio verifyAadharOtpRequest, String acceptLanguage, final ApiCallback<TxnResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyAadharBioUsingPOSTValidateBeforeCall(verifyAadharOtpRequest, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<TxnResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifyAadharOTPOnlyUsingPOST
     * @param verifyAadhaarOtp verifyAadhaarOtp (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyAadharOTPOnlyUsingPOSTCall(VerifyAadhaarOtp verifyAadhaarOtp, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = verifyAadhaarOtp;

        // create path and map variables
        String localVarPath = "/v1/registration/aadhaar/verifyOTP";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization", "X-HIP-ID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyAadharOTPOnlyUsingPOSTValidateBeforeCall(VerifyAadhaarOtp verifyAadhaarOtp, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'verifyAadhaarOtp' is set
        if (verifyAadhaarOtp == null) {
            throw new ApiException("Missing the required parameter 'verifyAadhaarOtp' when calling verifyAadharOTPOnlyUsingPOST(Async)");
        }

        return verifyAadharOTPOnlyUsingPOSTCall(verifyAadhaarOtp, acceptLanguage, _callback);

    }

    /**
     * Verify Aadhaar OTP and continue for mobile verification.
     * Verify Aadhaar OTP received on registrered mobile number
     * @param verifyAadhaarOtp verifyAadhaarOtp (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return TxnResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public TxnResponse verifyAadharOTPOnlyUsingPOST(VerifyAadhaarOtp verifyAadhaarOtp, String acceptLanguage) throws ApiException {
        ApiResponse<TxnResponse> localVarResp = verifyAadharOTPOnlyUsingPOSTWithHttpInfo(verifyAadhaarOtp, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Verify Aadhaar OTP and continue for mobile verification.
     * Verify Aadhaar OTP received on registrered mobile number
     * @param verifyAadhaarOtp verifyAadhaarOtp (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;TxnResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TxnResponse> verifyAadharOTPOnlyUsingPOSTWithHttpInfo(VerifyAadhaarOtp verifyAadhaarOtp, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = verifyAadharOTPOnlyUsingPOSTValidateBeforeCall(verifyAadhaarOtp, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<TxnResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Verify Aadhaar OTP and continue for mobile verification. (asynchronously)
     * Verify Aadhaar OTP received on registrered mobile number
     * @param verifyAadhaarOtp verifyAadhaarOtp (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyAadharOTPOnlyUsingPOSTAsync(VerifyAadhaarOtp verifyAadhaarOtp, String acceptLanguage, final ApiCallback<TxnResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyAadharOTPOnlyUsingPOSTValidateBeforeCall(verifyAadhaarOtp, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<TxnResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifyAadharOTPUsingPOST
     * @param verifyAadharOtpRequest verifyAadharOtpRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyAadharOTPUsingPOSTCall(CreateAccountWithAadhaarOtp verifyAadharOtpRequest, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = verifyAadharOtpRequest;

        // create path and map variables
        String localVarPath = "/v1/registration/aadhaar/createHealthIdWithAadhaarOtp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization", "X-HIP-ID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyAadharOTPUsingPOSTValidateBeforeCall(CreateAccountWithAadhaarOtp verifyAadharOtpRequest, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'verifyAadharOtpRequest' is set
        if (verifyAadharOtpRequest == null) {
            throw new ApiException("Missing the required parameter 'verifyAadharOtpRequest' when calling verifyAadharOTPUsingPOST(Async)");
        }

        return verifyAadharOTPUsingPOSTCall(verifyAadharOtpRequest, acceptLanguage, _callback);

    }

    /**
     * Verify Aadhaar OTP on registrered mobile number to create Health ID.
     * Verify Aadhar OTP received on registrered mobile number
     * @param verifyAadharOtpRequest verifyAadharOtpRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return CreateAccountJwtResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public CreateAccountJwtResponse verifyAadharOTPUsingPOST(CreateAccountWithAadhaarOtp verifyAadharOtpRequest, String acceptLanguage) throws ApiException {
        ApiResponse<CreateAccountJwtResponse> localVarResp = verifyAadharOTPUsingPOSTWithHttpInfo(verifyAadharOtpRequest, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Verify Aadhaar OTP on registrered mobile number to create Health ID.
     * Verify Aadhar OTP received on registrered mobile number
     * @param verifyAadharOtpRequest verifyAadharOtpRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;CreateAccountJwtResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAccountJwtResponse> verifyAadharOTPUsingPOSTWithHttpInfo(CreateAccountWithAadhaarOtp verifyAadharOtpRequest, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = verifyAadharOTPUsingPOSTValidateBeforeCall(verifyAadharOtpRequest, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<CreateAccountJwtResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Verify Aadhaar OTP on registrered mobile number to create Health ID. (asynchronously)
     * Verify Aadhar OTP received on registrered mobile number
     * @param verifyAadharOtpRequest verifyAadharOtpRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyAadharOTPUsingPOSTAsync(CreateAccountWithAadhaarOtp verifyAadharOtpRequest, String acceptLanguage, final ApiCallback<CreateAccountJwtResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyAadharOTPUsingPOSTValidateBeforeCall(verifyAadharOtpRequest, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<CreateAccountJwtResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifyMobileOTPForTxnUsingPOST
     * @param request request (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyMobileOTPForTxnUsingPOSTCall(VerifyMobileRequest request, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/v1/registration/aadhaar/verifyMobileOTP";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization", "X-HIP-ID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyMobileOTPForTxnUsingPOSTValidateBeforeCall(VerifyMobileRequest request, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling verifyMobileOTPForTxnUsingPOST(Async)");
        }

        return verifyMobileOTPForTxnUsingPOSTCall(request, acceptLanguage, _callback);

    }

    /**
     * Verify Mobile OTP in an existing transaction.
     * Verify Mobile OTP in an existing transaction.
     * @param request request (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return TxnResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public TxnResponse verifyMobileOTPForTxnUsingPOST(VerifyMobileRequest request, String acceptLanguage) throws ApiException {
        ApiResponse<TxnResponse> localVarResp = verifyMobileOTPForTxnUsingPOSTWithHttpInfo(request, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Verify Mobile OTP in an existing transaction.
     * Verify Mobile OTP in an existing transaction.
     * @param request request (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;TxnResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TxnResponse> verifyMobileOTPForTxnUsingPOSTWithHttpInfo(VerifyMobileRequest request, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = verifyMobileOTPForTxnUsingPOSTValidateBeforeCall(request, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<TxnResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Verify Mobile OTP in an existing transaction. (asynchronously)
     * Verify Mobile OTP in an existing transaction.
     * @param request request (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyMobileOTPForTxnUsingPOSTAsync(VerifyMobileRequest request, String acceptLanguage, final ApiCallback<TxnResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyMobileOTPForTxnUsingPOSTValidateBeforeCall(request, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<TxnResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
