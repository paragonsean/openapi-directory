/*
 * Health ID Service
 * It is important to standardize the process of identification of an individual across healthcare providers, to ensure that the created medical records are issued to the right individual or accessed by a Health Information User through appropriate consent.  In order to issue a Health ID to an individual, one only needs basic demographic details like Name, Year of Birth, Gender. In addition, citizens should be able to update contact information easily.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AadharNumberRequestPayload;
import org.openapitools.client.model.AadharOtpGenerateRequestPayLoad;
import org.openapitools.client.model.CreateHIdDemoAuthRequest;
import org.openapitools.client.model.CreateHealthIdOptRequest;
import org.openapitools.client.model.CreateHidBiometricRequest;
import org.openapitools.client.model.CreateHidMobileRequest;
import org.openapitools.client.model.CreateHidNotifyBenefitRequest;
import org.openapitools.client.model.GenerateMobileOTPRequest;
import org.openapitools.client.model.HidBenefitDelinkRequestPayload;
import org.openapitools.client.model.HidBenefitLinkedRequestPayload;
import org.openapitools.client.model.HidBenefitLinkedResponsePayload;
import org.openapitools.client.model.HidBenefitNameSearchRequest;
import org.openapitools.client.model.HidBenefitRequestPayload;
import org.openapitools.client.model.HidBenefitSearchResponsePayload;
import org.openapitools.client.model.HidStatusRequestPayload;
import org.openapitools.client.model.HidUpdateAccountRequest;
import org.openapitools.client.model.HidUpdateMobiletRequest;
import org.openapitools.client.model.TxnResponse;
import org.openapitools.client.model.UserDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IntegratedProgramsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IntegratedProgramsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IntegratedProgramsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createHealthIdByDemoAuthUsingPOST
     * @param createHIdDemoAuthRequest createHIdDemoAuthRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createHealthIdByDemoAuthUsingPOSTCall(CreateHIdDemoAuthRequest createHIdDemoAuthRequest, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createHIdDemoAuthRequest;

        // create path and map variables
        String localVarPath = "/v1/hid/benefit/createHealthId/demo/auth";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization", "X-HIP-ID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createHealthIdByDemoAuthUsingPOSTValidateBeforeCall(CreateHIdDemoAuthRequest createHIdDemoAuthRequest, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createHIdDemoAuthRequest' is set
        if (createHIdDemoAuthRequest == null) {
            throw new ApiException("Missing the required parameter 'createHIdDemoAuthRequest' when calling createHealthIdByDemoAuthUsingPOST(Async)");
        }

        return createHealthIdByDemoAuthUsingPOSTCall(createHIdDemoAuthRequest, acceptLanguage, _callback);

    }

    /**
     * Create health id using Aadhaar Demo Auth.
     * Create health id using Aadhaar Demo Auth.
     * @param createHIdDemoAuthRequest createHIdDemoAuthRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return HidBenefitRequestPayload
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public HidBenefitRequestPayload createHealthIdByDemoAuthUsingPOST(CreateHIdDemoAuthRequest createHIdDemoAuthRequest, String acceptLanguage) throws ApiException {
        ApiResponse<HidBenefitRequestPayload> localVarResp = createHealthIdByDemoAuthUsingPOSTWithHttpInfo(createHIdDemoAuthRequest, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Create health id using Aadhaar Demo Auth.
     * Create health id using Aadhaar Demo Auth.
     * @param createHIdDemoAuthRequest createHIdDemoAuthRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;HidBenefitRequestPayload&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HidBenefitRequestPayload> createHealthIdByDemoAuthUsingPOSTWithHttpInfo(CreateHIdDemoAuthRequest createHIdDemoAuthRequest, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = createHealthIdByDemoAuthUsingPOSTValidateBeforeCall(createHIdDemoAuthRequest, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<HidBenefitRequestPayload>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create health id using Aadhaar Demo Auth. (asynchronously)
     * Create health id using Aadhaar Demo Auth.
     * @param createHIdDemoAuthRequest createHIdDemoAuthRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createHealthIdByDemoAuthUsingPOSTAsync(CreateHIdDemoAuthRequest createHIdDemoAuthRequest, String acceptLanguage, final ApiCallback<HidBenefitRequestPayload> _callback) throws ApiException {

        okhttp3.Call localVarCall = createHealthIdByDemoAuthUsingPOSTValidateBeforeCall(createHIdDemoAuthRequest, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<HidBenefitRequestPayload>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createHealthIdByMobileUsingPOST
     * @param createHidMobileRequest createHidMobileRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createHealthIdByMobileUsingPOSTCall(CreateHidMobileRequest createHidMobileRequest, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createHidMobileRequest;

        // create path and map variables
        String localVarPath = "/v1/hid/benefit/mobile/createHealthId";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization", "X-HIP-ID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createHealthIdByMobileUsingPOSTValidateBeforeCall(CreateHidMobileRequest createHidMobileRequest, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createHidMobileRequest' is set
        if (createHidMobileRequest == null) {
            throw new ApiException("Missing the required parameter 'createHidMobileRequest' when calling createHealthIdByMobileUsingPOST(Async)");
        }

        return createHealthIdByMobileUsingPOSTCall(createHidMobileRequest, acceptLanguage, _callback);

    }

    /**
     * Create health id using mobile Authentication.
     * Create health id using mobile Authentication.
     * @param createHidMobileRequest createHidMobileRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return TxnResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public TxnResponse createHealthIdByMobileUsingPOST(CreateHidMobileRequest createHidMobileRequest, String acceptLanguage) throws ApiException {
        ApiResponse<TxnResponse> localVarResp = createHealthIdByMobileUsingPOSTWithHttpInfo(createHidMobileRequest, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Create health id using mobile Authentication.
     * Create health id using mobile Authentication.
     * @param createHidMobileRequest createHidMobileRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;TxnResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TxnResponse> createHealthIdByMobileUsingPOSTWithHttpInfo(CreateHidMobileRequest createHidMobileRequest, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = createHealthIdByMobileUsingPOSTValidateBeforeCall(createHidMobileRequest, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<TxnResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create health id using mobile Authentication. (asynchronously)
     * Create health id using mobile Authentication.
     * @param createHidMobileRequest createHidMobileRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createHealthIdByMobileUsingPOSTAsync(CreateHidMobileRequest createHidMobileRequest, String acceptLanguage, final ApiCallback<TxnResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createHealthIdByMobileUsingPOSTValidateBeforeCall(createHidMobileRequest, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<TxnResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for delinkHidBenefitUsingPOST
     * @param hidBenefitLinkedRequestPayload hidBenefitLinkedRequestPayload (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call delinkHidBenefitUsingPOSTCall(HidBenefitDelinkRequestPayload hidBenefitLinkedRequestPayload, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = hidBenefitLinkedRequestPayload;

        // create path and map variables
        String localVarPath = "/v1/hid/benefit/delink";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization", "X-HIP-ID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call delinkHidBenefitUsingPOSTValidateBeforeCall(HidBenefitDelinkRequestPayload hidBenefitLinkedRequestPayload, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hidBenefitLinkedRequestPayload' is set
        if (hidBenefitLinkedRequestPayload == null) {
            throw new ApiException("Missing the required parameter 'hidBenefitLinkedRequestPayload' when calling delinkHidBenefitUsingPOST(Async)");
        }

        return delinkHidBenefitUsingPOSTCall(hidBenefitLinkedRequestPayload, acceptLanguage, _callback);

    }

    /**
     * De-Linked with hid.
     * De-Linked with hid.
     * @param hidBenefitLinkedRequestPayload hidBenefitLinkedRequestPayload (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return HidBenefitLinkedResponsePayload
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public HidBenefitLinkedResponsePayload delinkHidBenefitUsingPOST(HidBenefitDelinkRequestPayload hidBenefitLinkedRequestPayload, String acceptLanguage) throws ApiException {
        ApiResponse<HidBenefitLinkedResponsePayload> localVarResp = delinkHidBenefitUsingPOSTWithHttpInfo(hidBenefitLinkedRequestPayload, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * De-Linked with hid.
     * De-Linked with hid.
     * @param hidBenefitLinkedRequestPayload hidBenefitLinkedRequestPayload (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;HidBenefitLinkedResponsePayload&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HidBenefitLinkedResponsePayload> delinkHidBenefitUsingPOSTWithHttpInfo(HidBenefitDelinkRequestPayload hidBenefitLinkedRequestPayload, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = delinkHidBenefitUsingPOSTValidateBeforeCall(hidBenefitLinkedRequestPayload, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<HidBenefitLinkedResponsePayload>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * De-Linked with hid. (asynchronously)
     * De-Linked with hid.
     * @param hidBenefitLinkedRequestPayload hidBenefitLinkedRequestPayload (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call delinkHidBenefitUsingPOSTAsync(HidBenefitDelinkRequestPayload hidBenefitLinkedRequestPayload, String acceptLanguage, final ApiCallback<HidBenefitLinkedResponsePayload> _callback) throws ApiException {

        okhttp3.Call localVarCall = delinkHidBenefitUsingPOSTValidateBeforeCall(hidBenefitLinkedRequestPayload, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<HidBenefitLinkedResponsePayload>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findByAadharUsingPOST
     * @param aadharNumberRequestPayload aadharNumberRequestPayload (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findByAadharUsingPOSTCall(AadharNumberRequestPayload aadharNumberRequestPayload, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = aadharNumberRequestPayload;

        // create path and map variables
        String localVarPath = "/v1/hid/benefit/search/aadhaar";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization", "X-HIP-ID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findByAadharUsingPOSTValidateBeforeCall(AadharNumberRequestPayload aadharNumberRequestPayload, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'aadharNumberRequestPayload' is set
        if (aadharNumberRequestPayload == null) {
            throw new ApiException("Missing the required parameter 'aadharNumberRequestPayload' when calling findByAadharUsingPOST(Async)");
        }

        return findByAadharUsingPOSTCall(aadharNumberRequestPayload, acceptLanguage, _callback);

    }

    /**
     * Search health id number using aadhar or aadhar token.
     * Search health id number using aadhar or aadhar token.
     * @param aadharNumberRequestPayload aadharNumberRequestPayload (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> findByAadharUsingPOST(AadharNumberRequestPayload aadharNumberRequestPayload, String acceptLanguage) throws ApiException {
        ApiResponse<List<Object>> localVarResp = findByAadharUsingPOSTWithHttpInfo(aadharNumberRequestPayload, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Search health id number using aadhar or aadhar token.
     * Search health id number using aadhar or aadhar token.
     * @param aadharNumberRequestPayload aadharNumberRequestPayload (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> findByAadharUsingPOSTWithHttpInfo(AadharNumberRequestPayload aadharNumberRequestPayload, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = findByAadharUsingPOSTValidateBeforeCall(aadharNumberRequestPayload, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search health id number using aadhar or aadhar token. (asynchronously)
     * Search health id number using aadhar or aadhar token.
     * @param aadharNumberRequestPayload aadharNumberRequestPayload (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findByAadharUsingPOSTAsync(AadharNumberRequestPayload aadharNumberRequestPayload, String acceptLanguage, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = findByAadharUsingPOSTValidateBeforeCall(aadharNumberRequestPayload, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findByHealthIdUsingPOST
     * @param searchRequest searchRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findByHealthIdUsingPOSTCall(HidBenefitNameSearchRequest searchRequest, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = searchRequest;

        // create path and map variables
        String localVarPath = "/v1/hid/benefit/search/healthIdNumber";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization", "X-HIP-ID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findByHealthIdUsingPOSTValidateBeforeCall(HidBenefitNameSearchRequest searchRequest, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'searchRequest' is set
        if (searchRequest == null) {
            throw new ApiException("Missing the required parameter 'searchRequest' when calling findByHealthIdUsingPOST(Async)");
        }

        return findByHealthIdUsingPOSTCall(searchRequest, acceptLanguage, _callback);

    }

    /**
     * Search benefit using health id number.
     * Search benefit using health id number
     * @param searchRequest searchRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return List&lt;HidBenefitSearchResponsePayload&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<HidBenefitSearchResponsePayload> findByHealthIdUsingPOST(HidBenefitNameSearchRequest searchRequest, String acceptLanguage) throws ApiException {
        ApiResponse<List<HidBenefitSearchResponsePayload>> localVarResp = findByHealthIdUsingPOSTWithHttpInfo(searchRequest, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Search benefit using health id number.
     * Search benefit using health id number
     * @param searchRequest searchRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;List&lt;HidBenefitSearchResponsePayload&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<HidBenefitSearchResponsePayload>> findByHealthIdUsingPOSTWithHttpInfo(HidBenefitNameSearchRequest searchRequest, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = findByHealthIdUsingPOSTValidateBeforeCall(searchRequest, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<List<HidBenefitSearchResponsePayload>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search benefit using health id number. (asynchronously)
     * Search benefit using health id number
     * @param searchRequest searchRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findByHealthIdUsingPOSTAsync(HidBenefitNameSearchRequest searchRequest, String acceptLanguage, final ApiCallback<List<HidBenefitSearchResponsePayload>> _callback) throws ApiException {

        okhttp3.Call localVarCall = findByHealthIdUsingPOSTValidateBeforeCall(searchRequest, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<List<HidBenefitSearchResponsePayload>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for generateAadharOTPUsingPOST2
     * @param generateOtpRequest generateOtpRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateAadharOTPUsingPOST2Call(AadharOtpGenerateRequestPayLoad generateOtpRequest, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = generateOtpRequest;

        // create path and map variables
        String localVarPath = "/v1/hid/benefit/aadhaar/generateOtp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization", "X-HIP-ID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateAadharOTPUsingPOST2ValidateBeforeCall(AadharOtpGenerateRequestPayLoad generateOtpRequest, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'generateOtpRequest' is set
        if (generateOtpRequest == null) {
            throw new ApiException("Missing the required parameter 'generateOtpRequest' when calling generateAadharOTPUsingPOST2(Async)");
        }

        return generateAadharOTPUsingPOST2Call(generateOtpRequest, acceptLanguage, _callback);

    }

    /**
     * Generate Aadhaar OTP on registrered mobile number
     * Generate Aadhaar OTP on registrered mobile number
     * @param generateOtpRequest generateOtpRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return TxnResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public TxnResponse generateAadharOTPUsingPOST2(AadharOtpGenerateRequestPayLoad generateOtpRequest, String acceptLanguage) throws ApiException {
        ApiResponse<TxnResponse> localVarResp = generateAadharOTPUsingPOST2WithHttpInfo(generateOtpRequest, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Generate Aadhaar OTP on registrered mobile number
     * Generate Aadhaar OTP on registrered mobile number
     * @param generateOtpRequest generateOtpRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;TxnResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TxnResponse> generateAadharOTPUsingPOST2WithHttpInfo(AadharOtpGenerateRequestPayLoad generateOtpRequest, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = generateAadharOTPUsingPOST2ValidateBeforeCall(generateOtpRequest, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<TxnResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate Aadhaar OTP on registrered mobile number (asynchronously)
     * Generate Aadhaar OTP on registrered mobile number
     * @param generateOtpRequest generateOtpRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateAadharOTPUsingPOST2Async(AadharOtpGenerateRequestPayLoad generateOtpRequest, String acceptLanguage, final ApiCallback<TxnResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateAadharOTPUsingPOST2ValidateBeforeCall(generateOtpRequest, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<TxnResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for generateMobileOtpUsingPOST
     * @param generateOtpRequest generateOtpRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateMobileOtpUsingPOSTCall(GenerateMobileOTPRequest generateOtpRequest, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = generateOtpRequest;

        // create path and map variables
        String localVarPath = "/v1/hid/benefit/mobile/generateOtp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization", "X-HIP-ID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateMobileOtpUsingPOSTValidateBeforeCall(GenerateMobileOTPRequest generateOtpRequest, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'generateOtpRequest' is set
        if (generateOtpRequest == null) {
            throw new ApiException("Missing the required parameter 'generateOtpRequest' when calling generateMobileOtpUsingPOST(Async)");
        }

        return generateMobileOtpUsingPOSTCall(generateOtpRequest, acceptLanguage, _callback);

    }

    /**
     * Generate mobile OTP on registrered mobile number
     * Generate mobile OTP on registrered mobile number
     * @param generateOtpRequest generateOtpRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return TxnResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public TxnResponse generateMobileOtpUsingPOST(GenerateMobileOTPRequest generateOtpRequest, String acceptLanguage) throws ApiException {
        ApiResponse<TxnResponse> localVarResp = generateMobileOtpUsingPOSTWithHttpInfo(generateOtpRequest, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Generate mobile OTP on registrered mobile number
     * Generate mobile OTP on registrered mobile number
     * @param generateOtpRequest generateOtpRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;TxnResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TxnResponse> generateMobileOtpUsingPOSTWithHttpInfo(GenerateMobileOTPRequest generateOtpRequest, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = generateMobileOtpUsingPOSTValidateBeforeCall(generateOtpRequest, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<TxnResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate mobile OTP on registrered mobile number (asynchronously)
     * Generate mobile OTP on registrered mobile number
     * @param generateOtpRequest generateOtpRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateMobileOtpUsingPOSTAsync(GenerateMobileOTPRequest generateOtpRequest, String acceptLanguage, final ApiCallback<TxnResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateMobileOtpUsingPOSTValidateBeforeCall(generateOtpRequest, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<TxnResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for linkHidBenefitUsingPOST
     * @param hidBenefitLinkedRequestPayload hidBenefitLinkedRequestPayload (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call linkHidBenefitUsingPOSTCall(HidBenefitLinkedRequestPayload hidBenefitLinkedRequestPayload, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = hidBenefitLinkedRequestPayload;

        // create path and map variables
        String localVarPath = "/v1/hid/benefit/link";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization", "X-HIP-ID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call linkHidBenefitUsingPOSTValidateBeforeCall(HidBenefitLinkedRequestPayload hidBenefitLinkedRequestPayload, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hidBenefitLinkedRequestPayload' is set
        if (hidBenefitLinkedRequestPayload == null) {
            throw new ApiException("Missing the required parameter 'hidBenefitLinkedRequestPayload' when calling linkHidBenefitUsingPOST(Async)");
        }

        return linkHidBenefitUsingPOSTCall(hidBenefitLinkedRequestPayload, acceptLanguage, _callback);

    }

    /**
     * Linked with hid.
     * Linked with hid.
     * @param hidBenefitLinkedRequestPayload hidBenefitLinkedRequestPayload (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return HidBenefitLinkedResponsePayload
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public HidBenefitLinkedResponsePayload linkHidBenefitUsingPOST(HidBenefitLinkedRequestPayload hidBenefitLinkedRequestPayload, String acceptLanguage) throws ApiException {
        ApiResponse<HidBenefitLinkedResponsePayload> localVarResp = linkHidBenefitUsingPOSTWithHttpInfo(hidBenefitLinkedRequestPayload, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Linked with hid.
     * Linked with hid.
     * @param hidBenefitLinkedRequestPayload hidBenefitLinkedRequestPayload (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;HidBenefitLinkedResponsePayload&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HidBenefitLinkedResponsePayload> linkHidBenefitUsingPOSTWithHttpInfo(HidBenefitLinkedRequestPayload hidBenefitLinkedRequestPayload, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = linkHidBenefitUsingPOSTValidateBeforeCall(hidBenefitLinkedRequestPayload, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<HidBenefitLinkedResponsePayload>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Linked with hid. (asynchronously)
     * Linked with hid.
     * @param hidBenefitLinkedRequestPayload hidBenefitLinkedRequestPayload (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call linkHidBenefitUsingPOSTAsync(HidBenefitLinkedRequestPayload hidBenefitLinkedRequestPayload, String acceptLanguage, final ApiCallback<HidBenefitLinkedResponsePayload> _callback) throws ApiException {

        okhttp3.Call localVarCall = linkHidBenefitUsingPOSTValidateBeforeCall(hidBenefitLinkedRequestPayload, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<HidBenefitLinkedResponsePayload>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for notifyBenefitUsingPOST
     * @param createHidNotifyBenefitRequest createHidNotifyBenefitRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notifyBenefitUsingPOSTCall(CreateHidNotifyBenefitRequest createHidNotifyBenefitRequest, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createHidNotifyBenefitRequest;

        // create path and map variables
        String localVarPath = "/v1/hid/benefit/notify/benefit";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization", "X-HIP-ID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notifyBenefitUsingPOSTValidateBeforeCall(CreateHidNotifyBenefitRequest createHidNotifyBenefitRequest, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createHidNotifyBenefitRequest' is set
        if (createHidNotifyBenefitRequest == null) {
            throw new ApiException("Missing the required parameter 'createHidNotifyBenefitRequest' when calling notifyBenefitUsingPOST(Async)");
        }

        return notifyBenefitUsingPOSTCall(createHidNotifyBenefitRequest, acceptLanguage, _callback);

    }

    /**
     * Create health id using notify Benefit.
     * Create health id using notify Benefit.
     * @param createHidNotifyBenefitRequest createHidNotifyBenefitRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return HidBenefitRequestPayload
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public HidBenefitRequestPayload notifyBenefitUsingPOST(CreateHidNotifyBenefitRequest createHidNotifyBenefitRequest, String acceptLanguage) throws ApiException {
        ApiResponse<HidBenefitRequestPayload> localVarResp = notifyBenefitUsingPOSTWithHttpInfo(createHidNotifyBenefitRequest, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Create health id using notify Benefit.
     * Create health id using notify Benefit.
     * @param createHidNotifyBenefitRequest createHidNotifyBenefitRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;HidBenefitRequestPayload&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HidBenefitRequestPayload> notifyBenefitUsingPOSTWithHttpInfo(CreateHidNotifyBenefitRequest createHidNotifyBenefitRequest, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = notifyBenefitUsingPOSTValidateBeforeCall(createHidNotifyBenefitRequest, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<HidBenefitRequestPayload>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create health id using notify Benefit. (asynchronously)
     * Create health id using notify Benefit.
     * @param createHidNotifyBenefitRequest createHidNotifyBenefitRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notifyBenefitUsingPOSTAsync(CreateHidNotifyBenefitRequest createHidNotifyBenefitRequest, String acceptLanguage, final ApiCallback<HidBenefitRequestPayload> _callback) throws ApiException {

        okhttp3.Call localVarCall = notifyBenefitUsingPOSTValidateBeforeCall(createHidNotifyBenefitRequest, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<HidBenefitRequestPayload>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAccountInformationUsingPOST1
     * @param request request (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAccountInformationUsingPOST1Call(HidUpdateAccountRequest request, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/v1/hid/benefit/update/profile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization", "X-HIP-ID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAccountInformationUsingPOST1ValidateBeforeCall(HidUpdateAccountRequest request, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling updateAccountInformationUsingPOST1(Async)");
        }

        return updateAccountInformationUsingPOST1Call(request, acceptLanguage, _callback);

    }

    /**
     * Update account information
     * 
     * @param request request (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return UserDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public UserDTO updateAccountInformationUsingPOST1(HidUpdateAccountRequest request, String acceptLanguage) throws ApiException {
        ApiResponse<UserDTO> localVarResp = updateAccountInformationUsingPOST1WithHttpInfo(request, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Update account information
     * 
     * @param request request (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;UserDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserDTO> updateAccountInformationUsingPOST1WithHttpInfo(HidUpdateAccountRequest request, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = updateAccountInformationUsingPOST1ValidateBeforeCall(request, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<UserDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update account information (asynchronously)
     * 
     * @param request request (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAccountInformationUsingPOST1Async(HidUpdateAccountRequest request, String acceptLanguage, final ApiCallback<UserDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAccountInformationUsingPOST1ValidateBeforeCall(request, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<UserDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMobileInformationUsingPOST
     * @param request request (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMobileInformationUsingPOSTCall(HidUpdateMobiletRequest request, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/v1/hid/benefit/update/mobile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization", "X-HIP-ID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMobileInformationUsingPOSTValidateBeforeCall(HidUpdateMobiletRequest request, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling updateMobileInformationUsingPOST(Async)");
        }

        return updateMobileInformationUsingPOSTCall(request, acceptLanguage, _callback);

    }

    /**
     * Update mobile number for account.
     * 
     * @param request request (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return UserDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public UserDTO updateMobileInformationUsingPOST(HidUpdateMobiletRequest request, String acceptLanguage) throws ApiException {
        ApiResponse<UserDTO> localVarResp = updateMobileInformationUsingPOSTWithHttpInfo(request, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Update mobile number for account.
     * 
     * @param request request (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;UserDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserDTO> updateMobileInformationUsingPOSTWithHttpInfo(HidUpdateMobiletRequest request, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = updateMobileInformationUsingPOSTValidateBeforeCall(request, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<UserDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update mobile number for account. (asynchronously)
     * 
     * @param request request (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMobileInformationUsingPOSTAsync(HidUpdateMobiletRequest request, String acceptLanguage, final ApiCallback<UserDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMobileInformationUsingPOSTValidateBeforeCall(request, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<UserDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateStatusUsingPOST
     * @param generateOtpRequest generateOtpRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateStatusUsingPOSTCall(HidStatusRequestPayload generateOtpRequest, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = generateOtpRequest;

        // create path and map variables
        String localVarPath = "/v1/hid/benefit/update/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization", "X-HIP-ID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateStatusUsingPOSTValidateBeforeCall(HidStatusRequestPayload generateOtpRequest, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'generateOtpRequest' is set
        if (generateOtpRequest == null) {
            throw new ApiException("Missing the required parameter 'generateOtpRequest' when calling updateStatusUsingPOST(Async)");
        }

        return updateStatusUsingPOSTCall(generateOtpRequest, acceptLanguage, _callback);

    }

    /**
     * Update health id status .
     * Update health id status.
     * @param generateOtpRequest generateOtpRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return Boolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Boolean updateStatusUsingPOST(HidStatusRequestPayload generateOtpRequest, String acceptLanguage) throws ApiException {
        ApiResponse<Boolean> localVarResp = updateStatusUsingPOSTWithHttpInfo(generateOtpRequest, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Update health id status .
     * Update health id status.
     * @param generateOtpRequest generateOtpRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Boolean> updateStatusUsingPOSTWithHttpInfo(HidStatusRequestPayload generateOtpRequest, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = updateStatusUsingPOSTValidateBeforeCall(generateOtpRequest, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update health id status . (asynchronously)
     * Update health id status.
     * @param generateOtpRequest generateOtpRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateStatusUsingPOSTAsync(HidStatusRequestPayload generateOtpRequest, String acceptLanguage, final ApiCallback<Boolean> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateStatusUsingPOSTValidateBeforeCall(generateOtpRequest, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifyAadharOtpUsingPOST
     * @param createHealthIdOptRequest createHealthIdOptRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyAadharOtpUsingPOSTCall(CreateHealthIdOptRequest createHealthIdOptRequest, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createHealthIdOptRequest;

        // create path and map variables
        String localVarPath = "/v1/hid/benefit/aadhaar/verifyAadharOtp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization", "X-HIP-ID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyAadharOtpUsingPOSTValidateBeforeCall(CreateHealthIdOptRequest createHealthIdOptRequest, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createHealthIdOptRequest' is set
        if (createHealthIdOptRequest == null) {
            throw new ApiException("Missing the required parameter 'createHealthIdOptRequest' when calling verifyAadharOtpUsingPOST(Async)");
        }

        return verifyAadharOtpUsingPOSTCall(createHealthIdOptRequest, acceptLanguage, _callback);

    }

    /**
     * Create health id using Aadhaar Number Otp.
     * Create health id using Aadhaar number opt
     * @param createHealthIdOptRequest createHealthIdOptRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return HidBenefitRequestPayload
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public HidBenefitRequestPayload verifyAadharOtpUsingPOST(CreateHealthIdOptRequest createHealthIdOptRequest, String acceptLanguage) throws ApiException {
        ApiResponse<HidBenefitRequestPayload> localVarResp = verifyAadharOtpUsingPOSTWithHttpInfo(createHealthIdOptRequest, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Create health id using Aadhaar Number Otp.
     * Create health id using Aadhaar number opt
     * @param createHealthIdOptRequest createHealthIdOptRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;HidBenefitRequestPayload&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HidBenefitRequestPayload> verifyAadharOtpUsingPOSTWithHttpInfo(CreateHealthIdOptRequest createHealthIdOptRequest, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = verifyAadharOtpUsingPOSTValidateBeforeCall(createHealthIdOptRequest, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<HidBenefitRequestPayload>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create health id using Aadhaar Number Otp. (asynchronously)
     * Create health id using Aadhaar number opt
     * @param createHealthIdOptRequest createHealthIdOptRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyAadharOtpUsingPOSTAsync(CreateHealthIdOptRequest createHealthIdOptRequest, String acceptLanguage, final ApiCallback<HidBenefitRequestPayload> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyAadharOtpUsingPOSTValidateBeforeCall(createHealthIdOptRequest, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<HidBenefitRequestPayload>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifyBioUsingPOST
     * @param createHidBiometricRequest createHidBiometricRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyBioUsingPOSTCall(CreateHidBiometricRequest createHidBiometricRequest, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createHidBiometricRequest;

        // create path and map variables
        String localVarPath = "/v1/hid/benefit/aadhaar/verifyBio";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization", "X-HIP-ID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyBioUsingPOSTValidateBeforeCall(CreateHidBiometricRequest createHidBiometricRequest, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createHidBiometricRequest' is set
        if (createHidBiometricRequest == null) {
            throw new ApiException("Missing the required parameter 'createHidBiometricRequest' when calling verifyBioUsingPOST(Async)");
        }

        return verifyBioUsingPOSTCall(createHidBiometricRequest, acceptLanguage, _callback);

    }

    /**
     * Create health id using Biometric Authentication.
     * Create health id using Biometric Authentication.
     * @param createHidBiometricRequest createHidBiometricRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return HidBenefitRequestPayload
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public HidBenefitRequestPayload verifyBioUsingPOST(CreateHidBiometricRequest createHidBiometricRequest, String acceptLanguage) throws ApiException {
        ApiResponse<HidBenefitRequestPayload> localVarResp = verifyBioUsingPOSTWithHttpInfo(createHidBiometricRequest, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Create health id using Biometric Authentication.
     * Create health id using Biometric Authentication.
     * @param createHidBiometricRequest createHidBiometricRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;HidBenefitRequestPayload&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HidBenefitRequestPayload> verifyBioUsingPOSTWithHttpInfo(CreateHidBiometricRequest createHidBiometricRequest, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = verifyBioUsingPOSTValidateBeforeCall(createHidBiometricRequest, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<HidBenefitRequestPayload>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create health id using Biometric Authentication. (asynchronously)
     * Create health id using Biometric Authentication.
     * @param createHidBiometricRequest createHidBiometricRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyBioUsingPOSTAsync(CreateHidBiometricRequest createHidBiometricRequest, String acceptLanguage, final ApiCallback<HidBenefitRequestPayload> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyBioUsingPOSTValidateBeforeCall(createHidBiometricRequest, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<HidBenefitRequestPayload>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
