/*
 * Health ID Service
 * It is important to standardize the process of identification of an individual across healthcare providers, to ensure that the created medical records are issued to the right individual or accessed by a Health Information User through appropriate consent.  In order to issue a Health ID to an individual, one only needs basic demographic details like Name, Year of Birth, Gender. In addition, citizens should be able to update contact information easily.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AuthAccountAadhaarBioRequest;
import org.openapitools.client.model.AuthAccountAadhaarOTPRequest;
import org.openapitools.client.model.AuthAccountMobileOTPRequest;
import org.openapitools.client.model.AuthAccountWithDemographicsRequest;
import org.openapitools.client.model.AuthInitRequest;
import org.openapitools.client.model.AuthMobileOTPRequest;
import org.openapitools.client.model.AuthWithMobileTxnAndUserData;
import org.openapitools.client.model.AuthWithPasswordRequest;
import org.openapitools.client.model.JwtRequest;
import org.openapitools.client.model.JwtResponse;
import org.openapitools.client.model.ResendOTPRequest;
import org.openapitools.client.model.TxnResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuthenticationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuthenticationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuthenticationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for authAccountPasswordRequestUsingPOST
     * @param authenticationRequest authenticationRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authAccountPasswordRequestUsingPOSTCall(AuthWithPasswordRequest authenticationRequest, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authenticationRequest;

        // create path and map variables
        String localVarPath = "/v1/auth/confirmWithPassword";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization", "X-HIP-ID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authAccountPasswordRequestUsingPOSTValidateBeforeCall(AuthWithPasswordRequest authenticationRequest, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authenticationRequest' is set
        if (authenticationRequest == null) {
            throw new ApiException("Missing the required parameter 'authenticationRequest' when calling authAccountPasswordRequestUsingPOST(Async)");
        }

        return authAccountPasswordRequestUsingPOSTCall(authenticationRequest, acceptLanguage, _callback);

    }

    /**
     * Authentication with PASSWORD based auth transaction.
     * 
     * @param authenticationRequest authenticationRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return JwtResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public JwtResponse authAccountPasswordRequestUsingPOST(AuthWithPasswordRequest authenticationRequest, String acceptLanguage) throws ApiException {
        ApiResponse<JwtResponse> localVarResp = authAccountPasswordRequestUsingPOSTWithHttpInfo(authenticationRequest, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Authentication with PASSWORD based auth transaction.
     * 
     * @param authenticationRequest authenticationRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;JwtResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JwtResponse> authAccountPasswordRequestUsingPOSTWithHttpInfo(AuthWithPasswordRequest authenticationRequest, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = authAccountPasswordRequestUsingPOSTValidateBeforeCall(authenticationRequest, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<JwtResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Authentication with PASSWORD based auth transaction. (asynchronously)
     * 
     * @param authenticationRequest authenticationRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authAccountPasswordRequestUsingPOSTAsync(AuthWithPasswordRequest authenticationRequest, String acceptLanguage, final ApiCallback<JwtResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = authAccountPasswordRequestUsingPOSTValidateBeforeCall(authenticationRequest, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<JwtResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authWithMobileTokenUsingPOST
     * @param authRequest authRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authWithMobileTokenUsingPOSTCall(AuthWithMobileTxnAndUserData authRequest, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authRequest;

        // create path and map variables
        String localVarPath = "/v1/auth/authWithMobileToken";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization", "X-HIP-ID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authWithMobileTokenUsingPOSTValidateBeforeCall(AuthWithMobileTxnAndUserData authRequest, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authRequest' is set
        if (authRequest == null) {
            throw new ApiException("Missing the required parameter 'authRequest' when calling authWithMobileTokenUsingPOST(Async)");
        }

        return authWithMobileTokenUsingPOSTCall(authRequest, acceptLanguage, _callback);

    }

    /**
     * Authenticate using verified Mobile Number and user data
     * 
     * @param authRequest authRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return JwtResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public JwtResponse authWithMobileTokenUsingPOST(AuthWithMobileTxnAndUserData authRequest, String acceptLanguage) throws ApiException {
        ApiResponse<JwtResponse> localVarResp = authWithMobileTokenUsingPOSTWithHttpInfo(authRequest, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Authenticate using verified Mobile Number and user data
     * 
     * @param authRequest authRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;JwtResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JwtResponse> authWithMobileTokenUsingPOSTWithHttpInfo(AuthWithMobileTxnAndUserData authRequest, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = authWithMobileTokenUsingPOSTValidateBeforeCall(authRequest, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<JwtResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Authenticate using verified Mobile Number and user data (asynchronously)
     * 
     * @param authRequest authRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authWithMobileTokenUsingPOSTAsync(AuthWithMobileTxnAndUserData authRequest, String acceptLanguage, final ApiCallback<JwtResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = authWithMobileTokenUsingPOSTValidateBeforeCall(authRequest, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<JwtResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authenticateUserUsingPOST
     * @param authRequest authRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authenticateUserUsingPOSTCall(AuthMobileOTPRequest authRequest, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authRequest;

        // create path and map variables
        String localVarPath = "/v1/auth/authWithMobile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization", "X-HIP-ID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authenticateUserUsingPOSTValidateBeforeCall(AuthMobileOTPRequest authRequest, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authRequest' is set
        if (authRequest == null) {
            throw new ApiException("Missing the required parameter 'authRequest' when calling authenticateUserUsingPOST(Async)");
        }

        return authenticateUserUsingPOSTCall(authRequest, acceptLanguage, _callback);

    }

    /**
     * Authenticate request to generate Mobile OTP using Health ID number / Health ID
     * 
     * @param authRequest authRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return TxnResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public TxnResponse authenticateUserUsingPOST(AuthMobileOTPRequest authRequest, String acceptLanguage) throws ApiException {
        ApiResponse<TxnResponse> localVarResp = authenticateUserUsingPOSTWithHttpInfo(authRequest, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Authenticate request to generate Mobile OTP using Health ID number / Health ID
     * 
     * @param authRequest authRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;TxnResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TxnResponse> authenticateUserUsingPOSTWithHttpInfo(AuthMobileOTPRequest authRequest, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = authenticateUserUsingPOSTValidateBeforeCall(authRequest, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<TxnResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Authenticate request to generate Mobile OTP using Health ID number / Health ID (asynchronously)
     * 
     * @param authRequest authRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authenticateUserUsingPOSTAsync(AuthMobileOTPRequest authRequest, String acceptLanguage, final ApiCallback<TxnResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = authenticateUserUsingPOSTValidateBeforeCall(authRequest, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<TxnResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authenticateWithPasswordUsingPOST
     * @param authenticationRequest authenticationRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authenticateWithPasswordUsingPOSTCall(JwtRequest authenticationRequest, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authenticationRequest;

        // create path and map variables
        String localVarPath = "/v1/auth/authPassword";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization", "X-HIP-ID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authenticateWithPasswordUsingPOSTValidateBeforeCall(JwtRequest authenticationRequest, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authenticationRequest' is set
        if (authenticationRequest == null) {
            throw new ApiException("Missing the required parameter 'authenticationRequest' when calling authenticateWithPasswordUsingPOST(Async)");
        }

        return authenticateWithPasswordUsingPOSTCall(authenticationRequest, acceptLanguage, _callback);

    }

    /**
     * Authenticate using Health ID number / Health ID and password
     * 
     * @param authenticationRequest authenticationRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return JwtResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public JwtResponse authenticateWithPasswordUsingPOST(JwtRequest authenticationRequest, String acceptLanguage) throws ApiException {
        ApiResponse<JwtResponse> localVarResp = authenticateWithPasswordUsingPOSTWithHttpInfo(authenticationRequest, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Authenticate using Health ID number / Health ID and password
     * 
     * @param authenticationRequest authenticationRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;JwtResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JwtResponse> authenticateWithPasswordUsingPOSTWithHttpInfo(JwtRequest authenticationRequest, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = authenticateWithPasswordUsingPOSTValidateBeforeCall(authenticationRequest, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<JwtResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Authenticate using Health ID number / Health ID and password (asynchronously)
     * 
     * @param authenticationRequest authenticationRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authenticateWithPasswordUsingPOSTAsync(JwtRequest authenticationRequest, String acceptLanguage, final ApiCallback<JwtResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = authenticateWithPasswordUsingPOSTValidateBeforeCall(authenticationRequest, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<JwtResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for certUsingGET
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certUsingGETCall(String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/auth/cert";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization", "X-HIP-ID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certUsingGETValidateBeforeCall(String acceptLanguage, final ApiCallback _callback) throws ApiException {
        return certUsingGETCall(acceptLanguage, _callback);

    }

    /**
     * Auth token public key.
     * 
     * @param acceptLanguage  (optional, default to en-US)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public String certUsingGET(String acceptLanguage) throws ApiException {
        ApiResponse<String> localVarResp = certUsingGETWithHttpInfo(acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Auth token public key.
     * 
     * @param acceptLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> certUsingGETWithHttpInfo(String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = certUsingGETValidateBeforeCall(acceptLanguage, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Auth token public key. (asynchronously)
     * 
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certUsingGETAsync(String acceptLanguage, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = certUsingGETValidateBeforeCall(acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for confirmWithAadhaarBioUsingPOST
     * @param authenticationRequest authenticationRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call confirmWithAadhaarBioUsingPOSTCall(AuthAccountAadhaarBioRequest authenticationRequest, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authenticationRequest;

        // create path and map variables
        String localVarPath = "/v1/auth/confirmWithAadhaarBio";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization", "X-HIP-ID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call confirmWithAadhaarBioUsingPOSTValidateBeforeCall(AuthAccountAadhaarBioRequest authenticationRequest, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authenticationRequest' is set
        if (authenticationRequest == null) {
            throw new ApiException("Missing the required parameter 'authenticationRequest' when calling confirmWithAadhaarBioUsingPOST(Async)");
        }

        return confirmWithAadhaarBioUsingPOSTCall(authenticationRequest, acceptLanguage, _callback);

    }

    /**
     * Authentication with Aadhaar Biometric based auth transaction.
     * 
     * @param authenticationRequest authenticationRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return JwtResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public JwtResponse confirmWithAadhaarBioUsingPOST(AuthAccountAadhaarBioRequest authenticationRequest, String acceptLanguage) throws ApiException {
        ApiResponse<JwtResponse> localVarResp = confirmWithAadhaarBioUsingPOSTWithHttpInfo(authenticationRequest, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Authentication with Aadhaar Biometric based auth transaction.
     * 
     * @param authenticationRequest authenticationRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;JwtResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JwtResponse> confirmWithAadhaarBioUsingPOSTWithHttpInfo(AuthAccountAadhaarBioRequest authenticationRequest, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = confirmWithAadhaarBioUsingPOSTValidateBeforeCall(authenticationRequest, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<JwtResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Authentication with Aadhaar Biometric based auth transaction. (asynchronously)
     * 
     * @param authenticationRequest authenticationRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call confirmWithAadhaarBioUsingPOSTAsync(AuthAccountAadhaarBioRequest authenticationRequest, String acceptLanguage, final ApiCallback<JwtResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = confirmWithAadhaarBioUsingPOSTValidateBeforeCall(authenticationRequest, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<JwtResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for confirmWithAadhaarOtpUsingPOST
     * @param authenticationRequest authenticationRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call confirmWithAadhaarOtpUsingPOSTCall(AuthAccountAadhaarOTPRequest authenticationRequest, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authenticationRequest;

        // create path and map variables
        String localVarPath = "/v1/auth/confirmWithAadhaarOtp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization", "X-HIP-ID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call confirmWithAadhaarOtpUsingPOSTValidateBeforeCall(AuthAccountAadhaarOTPRequest authenticationRequest, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authenticationRequest' is set
        if (authenticationRequest == null) {
            throw new ApiException("Missing the required parameter 'authenticationRequest' when calling confirmWithAadhaarOtpUsingPOST(Async)");
        }

        return confirmWithAadhaarOtpUsingPOSTCall(authenticationRequest, acceptLanguage, _callback);

    }

    /**
     * Authentication with Aadhaar OTP based auth transaction.
     * 
     * @param authenticationRequest authenticationRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return JwtResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public JwtResponse confirmWithAadhaarOtpUsingPOST(AuthAccountAadhaarOTPRequest authenticationRequest, String acceptLanguage) throws ApiException {
        ApiResponse<JwtResponse> localVarResp = confirmWithAadhaarOtpUsingPOSTWithHttpInfo(authenticationRequest, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Authentication with Aadhaar OTP based auth transaction.
     * 
     * @param authenticationRequest authenticationRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;JwtResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JwtResponse> confirmWithAadhaarOtpUsingPOSTWithHttpInfo(AuthAccountAadhaarOTPRequest authenticationRequest, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = confirmWithAadhaarOtpUsingPOSTValidateBeforeCall(authenticationRequest, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<JwtResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Authentication with Aadhaar OTP based auth transaction. (asynchronously)
     * 
     * @param authenticationRequest authenticationRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call confirmWithAadhaarOtpUsingPOSTAsync(AuthAccountAadhaarOTPRequest authenticationRequest, String acceptLanguage, final ApiCallback<JwtResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = confirmWithAadhaarOtpUsingPOSTValidateBeforeCall(authenticationRequest, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<JwtResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for confirmWithDemographicsUsingPOST
     * @param authenticationRequest authenticationRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call confirmWithDemographicsUsingPOSTCall(AuthAccountWithDemographicsRequest authenticationRequest, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authenticationRequest;

        // create path and map variables
        String localVarPath = "/v1/auth/confirmWithDemographics";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization", "X-HIP-ID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call confirmWithDemographicsUsingPOSTValidateBeforeCall(AuthAccountWithDemographicsRequest authenticationRequest, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authenticationRequest' is set
        if (authenticationRequest == null) {
            throw new ApiException("Missing the required parameter 'authenticationRequest' when calling confirmWithDemographicsUsingPOST(Async)");
        }

        return confirmWithDemographicsUsingPOSTCall(authenticationRequest, acceptLanguage, _callback);

    }

    /**
     * Authenticate using demographic data of user.
     * 
     * @param authenticationRequest authenticationRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public String confirmWithDemographicsUsingPOST(AuthAccountWithDemographicsRequest authenticationRequest, String acceptLanguage) throws ApiException {
        ApiResponse<String> localVarResp = confirmWithDemographicsUsingPOSTWithHttpInfo(authenticationRequest, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Authenticate using demographic data of user.
     * 
     * @param authenticationRequest authenticationRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> confirmWithDemographicsUsingPOSTWithHttpInfo(AuthAccountWithDemographicsRequest authenticationRequest, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = confirmWithDemographicsUsingPOSTValidateBeforeCall(authenticationRequest, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Authenticate using demographic data of user. (asynchronously)
     * 
     * @param authenticationRequest authenticationRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call confirmWithDemographicsUsingPOSTAsync(AuthAccountWithDemographicsRequest authenticationRequest, String acceptLanguage, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = confirmWithDemographicsUsingPOSTValidateBeforeCall(authenticationRequest, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for confirmWithMobileUsingPOST
     * @param authenticationRequest authenticationRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call confirmWithMobileUsingPOSTCall(AuthAccountMobileOTPRequest authenticationRequest, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authenticationRequest;

        // create path and map variables
        String localVarPath = "/v1/auth/confirmWithMobileOTP";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization", "X-HIP-ID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call confirmWithMobileUsingPOSTValidateBeforeCall(AuthAccountMobileOTPRequest authenticationRequest, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authenticationRequest' is set
        if (authenticationRequest == null) {
            throw new ApiException("Missing the required parameter 'authenticationRequest' when calling confirmWithMobileUsingPOST(Async)");
        }

        return confirmWithMobileUsingPOSTCall(authenticationRequest, acceptLanguage, _callback);

    }

    /**
     * Authentication with Mobile OTP based auth transaction.
     * 
     * @param authenticationRequest authenticationRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return JwtResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public JwtResponse confirmWithMobileUsingPOST(AuthAccountMobileOTPRequest authenticationRequest, String acceptLanguage) throws ApiException {
        ApiResponse<JwtResponse> localVarResp = confirmWithMobileUsingPOSTWithHttpInfo(authenticationRequest, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Authentication with Mobile OTP based auth transaction.
     * 
     * @param authenticationRequest authenticationRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;JwtResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JwtResponse> confirmWithMobileUsingPOSTWithHttpInfo(AuthAccountMobileOTPRequest authenticationRequest, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = confirmWithMobileUsingPOSTValidateBeforeCall(authenticationRequest, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<JwtResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Authentication with Mobile OTP based auth transaction. (asynchronously)
     * 
     * @param authenticationRequest authenticationRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call confirmWithMobileUsingPOSTAsync(AuthAccountMobileOTPRequest authenticationRequest, String acceptLanguage, final ApiCallback<JwtResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = confirmWithMobileUsingPOSTValidateBeforeCall(authenticationRequest, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<JwtResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for initiateAuthUsingPOST
     * @param authRequest authRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call initiateAuthUsingPOSTCall(AuthInitRequest authRequest, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authRequest;

        // create path and map variables
        String localVarPath = "/v1/auth/init";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization", "X-HIP-ID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call initiateAuthUsingPOSTValidateBeforeCall(AuthInitRequest authRequest, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authRequest' is set
        if (authRequest == null) {
            throw new ApiException("Missing the required parameter 'authRequest' when calling initiateAuthUsingPOST(Async)");
        }

        return initiateAuthUsingPOSTCall(authRequest, acceptLanguage, _callback);

    }

    /**
     * Initiate authentication process for given Health ID
     * 
     * @param authRequest authRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return TxnResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public TxnResponse initiateAuthUsingPOST(AuthInitRequest authRequest, String acceptLanguage) throws ApiException {
        ApiResponse<TxnResponse> localVarResp = initiateAuthUsingPOSTWithHttpInfo(authRequest, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Initiate authentication process for given Health ID
     * 
     * @param authRequest authRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;TxnResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TxnResponse> initiateAuthUsingPOSTWithHttpInfo(AuthInitRequest authRequest, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = initiateAuthUsingPOSTValidateBeforeCall(authRequest, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<TxnResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Initiate authentication process for given Health ID (asynchronously)
     * 
     * @param authRequest authRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call initiateAuthUsingPOSTAsync(AuthInitRequest authRequest, String acceptLanguage, final ApiCallback<TxnResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = initiateAuthUsingPOSTValidateBeforeCall(authRequest, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<TxnResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resendAuthMobileOTPUsingPOST
     * @param resendOtpRequest resendOtpRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resendAuthMobileOTPUsingPOSTCall(ResendOTPRequest resendOtpRequest, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resendOtpRequest;

        // create path and map variables
        String localVarPath = "/v1/auth/resendAuthOTP";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization", "X-HIP-ID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resendAuthMobileOTPUsingPOSTValidateBeforeCall(ResendOTPRequest resendOtpRequest, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resendOtpRequest' is set
        if (resendOtpRequest == null) {
            throw new ApiException("Missing the required parameter 'resendOtpRequest' when calling resendAuthMobileOTPUsingPOST(Async)");
        }

        return resendAuthMobileOTPUsingPOSTCall(resendOtpRequest, acceptLanguage, _callback);

    }

    /**
     * Resend Aadhaar/Mobile OTP for Authentication Transaction.
     * 
     * @param resendOtpRequest resendOtpRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return Boolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Boolean resendAuthMobileOTPUsingPOST(ResendOTPRequest resendOtpRequest, String acceptLanguage) throws ApiException {
        ApiResponse<Boolean> localVarResp = resendAuthMobileOTPUsingPOSTWithHttpInfo(resendOtpRequest, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Resend Aadhaar/Mobile OTP for Authentication Transaction.
     * 
     * @param resendOtpRequest resendOtpRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Boolean> resendAuthMobileOTPUsingPOSTWithHttpInfo(ResendOTPRequest resendOtpRequest, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = resendAuthMobileOTPUsingPOSTValidateBeforeCall(resendOtpRequest, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Resend Aadhaar/Mobile OTP for Authentication Transaction. (asynchronously)
     * 
     * @param resendOtpRequest resendOtpRequest (required)
     * @param acceptLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resendAuthMobileOTPUsingPOSTAsync(ResendOTPRequest resendOtpRequest, String acceptLanguage, final ApiCallback<Boolean> _callback) throws ApiException {

        okhttp3.Call localVarCall = resendAuthMobileOTPUsingPOSTValidateBeforeCall(resendOtpRequest, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
