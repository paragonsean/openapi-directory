/*
 * Health ID Service
 * It is important to standardize the process of identification of an individual across healthcare providers, to ensure that the created medical records are issued to the right individual or accessed by a Health Information User through appropriate consent.  In order to issue a Health ID to an individual, one only needs basic demographic details like Name, Year of Birth, Gender. In addition, citizens should be able to update contact information easily.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * URI
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:34.465238-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class URI {
  public static final String SERIALIZED_NAME_ABSOLUTE = "absolute";
  @SerializedName(SERIALIZED_NAME_ABSOLUTE)
  private Boolean absolute;

  public static final String SERIALIZED_NAME_AUTHORITY = "authority";
  @SerializedName(SERIALIZED_NAME_AUTHORITY)
  private String authority;

  public static final String SERIALIZED_NAME_FRAGMENT = "fragment";
  @SerializedName(SERIALIZED_NAME_FRAGMENT)
  private String fragment;

  public static final String SERIALIZED_NAME_HOST = "host";
  @SerializedName(SERIALIZED_NAME_HOST)
  private String host;

  public static final String SERIALIZED_NAME_OPAQUE = "opaque";
  @SerializedName(SERIALIZED_NAME_OPAQUE)
  private Boolean opaque;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public static final String SERIALIZED_NAME_QUERY = "query";
  @SerializedName(SERIALIZED_NAME_QUERY)
  private String query;

  public static final String SERIALIZED_NAME_RAW_AUTHORITY = "rawAuthority";
  @SerializedName(SERIALIZED_NAME_RAW_AUTHORITY)
  private String rawAuthority;

  public static final String SERIALIZED_NAME_RAW_FRAGMENT = "rawFragment";
  @SerializedName(SERIALIZED_NAME_RAW_FRAGMENT)
  private String rawFragment;

  public static final String SERIALIZED_NAME_RAW_PATH = "rawPath";
  @SerializedName(SERIALIZED_NAME_RAW_PATH)
  private String rawPath;

  public static final String SERIALIZED_NAME_RAW_QUERY = "rawQuery";
  @SerializedName(SERIALIZED_NAME_RAW_QUERY)
  private String rawQuery;

  public static final String SERIALIZED_NAME_RAW_SCHEME_SPECIFIC_PART = "rawSchemeSpecificPart";
  @SerializedName(SERIALIZED_NAME_RAW_SCHEME_SPECIFIC_PART)
  private String rawSchemeSpecificPart;

  public static final String SERIALIZED_NAME_RAW_USER_INFO = "rawUserInfo";
  @SerializedName(SERIALIZED_NAME_RAW_USER_INFO)
  private String rawUserInfo;

  public static final String SERIALIZED_NAME_SCHEME = "scheme";
  @SerializedName(SERIALIZED_NAME_SCHEME)
  private String scheme;

  public static final String SERIALIZED_NAME_SCHEME_SPECIFIC_PART = "schemeSpecificPart";
  @SerializedName(SERIALIZED_NAME_SCHEME_SPECIFIC_PART)
  private String schemeSpecificPart;

  public static final String SERIALIZED_NAME_USER_INFO = "userInfo";
  @SerializedName(SERIALIZED_NAME_USER_INFO)
  private String userInfo;

  public URI() {
  }

  public URI absolute(Boolean absolute) {
    this.absolute = absolute;
    return this;
  }

  /**
   * Get absolute
   * @return absolute
   */
  @javax.annotation.Nullable
  public Boolean getAbsolute() {
    return absolute;
  }

  public void setAbsolute(Boolean absolute) {
    this.absolute = absolute;
  }


  public URI authority(String authority) {
    this.authority = authority;
    return this;
  }

  /**
   * Get authority
   * @return authority
   */
  @javax.annotation.Nullable
  public String getAuthority() {
    return authority;
  }

  public void setAuthority(String authority) {
    this.authority = authority;
  }


  public URI fragment(String fragment) {
    this.fragment = fragment;
    return this;
  }

  /**
   * Get fragment
   * @return fragment
   */
  @javax.annotation.Nullable
  public String getFragment() {
    return fragment;
  }

  public void setFragment(String fragment) {
    this.fragment = fragment;
  }


  public URI host(String host) {
    this.host = host;
    return this;
  }

  /**
   * Get host
   * @return host
   */
  @javax.annotation.Nullable
  public String getHost() {
    return host;
  }

  public void setHost(String host) {
    this.host = host;
  }


  public URI opaque(Boolean opaque) {
    this.opaque = opaque;
    return this;
  }

  /**
   * Get opaque
   * @return opaque
   */
  @javax.annotation.Nullable
  public Boolean getOpaque() {
    return opaque;
  }

  public void setOpaque(Boolean opaque) {
    this.opaque = opaque;
  }


  public URI path(String path) {
    this.path = path;
    return this;
  }

  /**
   * Get path
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public URI port(Integer port) {
    this.port = port;
    return this;
  }

  /**
   * Get port
   * @return port
   */
  @javax.annotation.Nullable
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }


  public URI query(String query) {
    this.query = query;
    return this;
  }

  /**
   * Get query
   * @return query
   */
  @javax.annotation.Nullable
  public String getQuery() {
    return query;
  }

  public void setQuery(String query) {
    this.query = query;
  }


  public URI rawAuthority(String rawAuthority) {
    this.rawAuthority = rawAuthority;
    return this;
  }

  /**
   * Get rawAuthority
   * @return rawAuthority
   */
  @javax.annotation.Nullable
  public String getRawAuthority() {
    return rawAuthority;
  }

  public void setRawAuthority(String rawAuthority) {
    this.rawAuthority = rawAuthority;
  }


  public URI rawFragment(String rawFragment) {
    this.rawFragment = rawFragment;
    return this;
  }

  /**
   * Get rawFragment
   * @return rawFragment
   */
  @javax.annotation.Nullable
  public String getRawFragment() {
    return rawFragment;
  }

  public void setRawFragment(String rawFragment) {
    this.rawFragment = rawFragment;
  }


  public URI rawPath(String rawPath) {
    this.rawPath = rawPath;
    return this;
  }

  /**
   * Get rawPath
   * @return rawPath
   */
  @javax.annotation.Nullable
  public String getRawPath() {
    return rawPath;
  }

  public void setRawPath(String rawPath) {
    this.rawPath = rawPath;
  }


  public URI rawQuery(String rawQuery) {
    this.rawQuery = rawQuery;
    return this;
  }

  /**
   * Get rawQuery
   * @return rawQuery
   */
  @javax.annotation.Nullable
  public String getRawQuery() {
    return rawQuery;
  }

  public void setRawQuery(String rawQuery) {
    this.rawQuery = rawQuery;
  }


  public URI rawSchemeSpecificPart(String rawSchemeSpecificPart) {
    this.rawSchemeSpecificPart = rawSchemeSpecificPart;
    return this;
  }

  /**
   * Get rawSchemeSpecificPart
   * @return rawSchemeSpecificPart
   */
  @javax.annotation.Nullable
  public String getRawSchemeSpecificPart() {
    return rawSchemeSpecificPart;
  }

  public void setRawSchemeSpecificPart(String rawSchemeSpecificPart) {
    this.rawSchemeSpecificPart = rawSchemeSpecificPart;
  }


  public URI rawUserInfo(String rawUserInfo) {
    this.rawUserInfo = rawUserInfo;
    return this;
  }

  /**
   * Get rawUserInfo
   * @return rawUserInfo
   */
  @javax.annotation.Nullable
  public String getRawUserInfo() {
    return rawUserInfo;
  }

  public void setRawUserInfo(String rawUserInfo) {
    this.rawUserInfo = rawUserInfo;
  }


  public URI scheme(String scheme) {
    this.scheme = scheme;
    return this;
  }

  /**
   * Get scheme
   * @return scheme
   */
  @javax.annotation.Nullable
  public String getScheme() {
    return scheme;
  }

  public void setScheme(String scheme) {
    this.scheme = scheme;
  }


  public URI schemeSpecificPart(String schemeSpecificPart) {
    this.schemeSpecificPart = schemeSpecificPart;
    return this;
  }

  /**
   * Get schemeSpecificPart
   * @return schemeSpecificPart
   */
  @javax.annotation.Nullable
  public String getSchemeSpecificPart() {
    return schemeSpecificPart;
  }

  public void setSchemeSpecificPart(String schemeSpecificPart) {
    this.schemeSpecificPart = schemeSpecificPart;
  }


  public URI userInfo(String userInfo) {
    this.userInfo = userInfo;
    return this;
  }

  /**
   * Get userInfo
   * @return userInfo
   */
  @javax.annotation.Nullable
  public String getUserInfo() {
    return userInfo;
  }

  public void setUserInfo(String userInfo) {
    this.userInfo = userInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    URI URI = (URI) o;
    return Objects.equals(this.absolute, URI.absolute) &&
        Objects.equals(this.authority, URI.authority) &&
        Objects.equals(this.fragment, URI.fragment) &&
        Objects.equals(this.host, URI.host) &&
        Objects.equals(this.opaque, URI.opaque) &&
        Objects.equals(this.path, URI.path) &&
        Objects.equals(this.port, URI.port) &&
        Objects.equals(this.query, URI.query) &&
        Objects.equals(this.rawAuthority, URI.rawAuthority) &&
        Objects.equals(this.rawFragment, URI.rawFragment) &&
        Objects.equals(this.rawPath, URI.rawPath) &&
        Objects.equals(this.rawQuery, URI.rawQuery) &&
        Objects.equals(this.rawSchemeSpecificPart, URI.rawSchemeSpecificPart) &&
        Objects.equals(this.rawUserInfo, URI.rawUserInfo) &&
        Objects.equals(this.scheme, URI.scheme) &&
        Objects.equals(this.schemeSpecificPart, URI.schemeSpecificPart) &&
        Objects.equals(this.userInfo, URI.userInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(absolute, authority, fragment, host, opaque, path, port, query, rawAuthority, rawFragment, rawPath, rawQuery, rawSchemeSpecificPart, rawUserInfo, scheme, schemeSpecificPart, userInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class URI {\n");
    sb.append("    absolute: ").append(toIndentedString(absolute)).append("\n");
    sb.append("    authority: ").append(toIndentedString(authority)).append("\n");
    sb.append("    fragment: ").append(toIndentedString(fragment)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    opaque: ").append(toIndentedString(opaque)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    rawAuthority: ").append(toIndentedString(rawAuthority)).append("\n");
    sb.append("    rawFragment: ").append(toIndentedString(rawFragment)).append("\n");
    sb.append("    rawPath: ").append(toIndentedString(rawPath)).append("\n");
    sb.append("    rawQuery: ").append(toIndentedString(rawQuery)).append("\n");
    sb.append("    rawSchemeSpecificPart: ").append(toIndentedString(rawSchemeSpecificPart)).append("\n");
    sb.append("    rawUserInfo: ").append(toIndentedString(rawUserInfo)).append("\n");
    sb.append("    scheme: ").append(toIndentedString(scheme)).append("\n");
    sb.append("    schemeSpecificPart: ").append(toIndentedString(schemeSpecificPart)).append("\n");
    sb.append("    userInfo: ").append(toIndentedString(userInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("absolute");
    openapiFields.add("authority");
    openapiFields.add("fragment");
    openapiFields.add("host");
    openapiFields.add("opaque");
    openapiFields.add("path");
    openapiFields.add("port");
    openapiFields.add("query");
    openapiFields.add("rawAuthority");
    openapiFields.add("rawFragment");
    openapiFields.add("rawPath");
    openapiFields.add("rawQuery");
    openapiFields.add("rawSchemeSpecificPart");
    openapiFields.add("rawUserInfo");
    openapiFields.add("scheme");
    openapiFields.add("schemeSpecificPart");
    openapiFields.add("userInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to URI
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!URI.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in URI is not found in the empty JSON string", URI.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!URI.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `URI` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("authority") != null && !jsonObj.get("authority").isJsonNull()) && !jsonObj.get("authority").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authority` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authority").toString()));
      }
      if ((jsonObj.get("fragment") != null && !jsonObj.get("fragment").isJsonNull()) && !jsonObj.get("fragment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fragment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fragment").toString()));
      }
      if ((jsonObj.get("host") != null && !jsonObj.get("host").isJsonNull()) && !jsonObj.get("host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host").toString()));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if ((jsonObj.get("query") != null && !jsonObj.get("query").isJsonNull()) && !jsonObj.get("query").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query").toString()));
      }
      if ((jsonObj.get("rawAuthority") != null && !jsonObj.get("rawAuthority").isJsonNull()) && !jsonObj.get("rawAuthority").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rawAuthority` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rawAuthority").toString()));
      }
      if ((jsonObj.get("rawFragment") != null && !jsonObj.get("rawFragment").isJsonNull()) && !jsonObj.get("rawFragment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rawFragment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rawFragment").toString()));
      }
      if ((jsonObj.get("rawPath") != null && !jsonObj.get("rawPath").isJsonNull()) && !jsonObj.get("rawPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rawPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rawPath").toString()));
      }
      if ((jsonObj.get("rawQuery") != null && !jsonObj.get("rawQuery").isJsonNull()) && !jsonObj.get("rawQuery").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rawQuery` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rawQuery").toString()));
      }
      if ((jsonObj.get("rawSchemeSpecificPart") != null && !jsonObj.get("rawSchemeSpecificPart").isJsonNull()) && !jsonObj.get("rawSchemeSpecificPart").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rawSchemeSpecificPart` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rawSchemeSpecificPart").toString()));
      }
      if ((jsonObj.get("rawUserInfo") != null && !jsonObj.get("rawUserInfo").isJsonNull()) && !jsonObj.get("rawUserInfo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rawUserInfo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rawUserInfo").toString()));
      }
      if ((jsonObj.get("scheme") != null && !jsonObj.get("scheme").isJsonNull()) && !jsonObj.get("scheme").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scheme` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scheme").toString()));
      }
      if ((jsonObj.get("schemeSpecificPart") != null && !jsonObj.get("schemeSpecificPart").isJsonNull()) && !jsonObj.get("schemeSpecificPart").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemeSpecificPart` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schemeSpecificPart").toString()));
      }
      if ((jsonObj.get("userInfo") != null && !jsonObj.get("userInfo").isJsonNull()) && !jsonObj.get("userInfo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userInfo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userInfo").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!URI.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'URI' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<URI> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(URI.class));

       return (TypeAdapter<T>) new TypeAdapter<URI>() {
           @Override
           public void write(JsonWriter out, URI value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public URI read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of URI given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of URI
   * @throws IOException if the JSON string is invalid with respect to URI
   */
  public static URI fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, URI.class);
  }

  /**
   * Convert an instance of URI to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

