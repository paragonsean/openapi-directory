/*
 * Health ID Service
 * It is important to standardize the process of identification of an individual across healthcare providers, to ensure that the created medical records are issued to the right individual or accessed by a Health Information User through appropriate consent.  In order to issue a Health ID to an individual, one only needs basic demographic details like Name, Year of Birth, Gender. In addition, citizens should be able to update contact information easily.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ModelFile
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:34.465238-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ModelFile {
  public static final String SERIALIZED_NAME_ABSOLUTE = "absolute";
  @SerializedName(SERIALIZED_NAME_ABSOLUTE)
  private Boolean absolute;

  public static final String SERIALIZED_NAME_ABSOLUTE_FILE = "absoluteFile";
  @SerializedName(SERIALIZED_NAME_ABSOLUTE_FILE)
  private ModelFile absoluteFile;

  public static final String SERIALIZED_NAME_ABSOLUTE_PATH = "absolutePath";
  @SerializedName(SERIALIZED_NAME_ABSOLUTE_PATH)
  private String absolutePath;

  public static final String SERIALIZED_NAME_CANONICAL_FILE = "canonicalFile";
  @SerializedName(SERIALIZED_NAME_CANONICAL_FILE)
  private ModelFile canonicalFile;

  public static final String SERIALIZED_NAME_CANONICAL_PATH = "canonicalPath";
  @SerializedName(SERIALIZED_NAME_CANONICAL_PATH)
  private String canonicalPath;

  public static final String SERIALIZED_NAME_DIRECTORY = "directory";
  @SerializedName(SERIALIZED_NAME_DIRECTORY)
  private Boolean directory;

  public static final String SERIALIZED_NAME_FILE = "file";
  @SerializedName(SERIALIZED_NAME_FILE)
  private Boolean _file;

  public static final String SERIALIZED_NAME_FREE_SPACE = "freeSpace";
  @SerializedName(SERIALIZED_NAME_FREE_SPACE)
  private Long freeSpace;

  public static final String SERIALIZED_NAME_HIDDEN = "hidden";
  @SerializedName(SERIALIZED_NAME_HIDDEN)
  private Boolean hidden;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARENT = "parent";
  @SerializedName(SERIALIZED_NAME_PARENT)
  private String parent;

  public static final String SERIALIZED_NAME_PARENT_FILE = "parentFile";
  @SerializedName(SERIALIZED_NAME_PARENT_FILE)
  private ModelFile parentFile;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_TOTAL_SPACE = "totalSpace";
  @SerializedName(SERIALIZED_NAME_TOTAL_SPACE)
  private Long totalSpace;

  public static final String SERIALIZED_NAME_USABLE_SPACE = "usableSpace";
  @SerializedName(SERIALIZED_NAME_USABLE_SPACE)
  private Long usableSpace;

  public ModelFile() {
  }

  public ModelFile absolute(Boolean absolute) {
    this.absolute = absolute;
    return this;
  }

  /**
   * Get absolute
   * @return absolute
   */
  @javax.annotation.Nullable
  public Boolean getAbsolute() {
    return absolute;
  }

  public void setAbsolute(Boolean absolute) {
    this.absolute = absolute;
  }


  public ModelFile absoluteFile(ModelFile absoluteFile) {
    this.absoluteFile = absoluteFile;
    return this;
  }

  /**
   * Get absoluteFile
   * @return absoluteFile
   */
  @javax.annotation.Nullable
  public ModelFile getAbsoluteFile() {
    return absoluteFile;
  }

  public void setAbsoluteFile(ModelFile absoluteFile) {
    this.absoluteFile = absoluteFile;
  }


  public ModelFile absolutePath(String absolutePath) {
    this.absolutePath = absolutePath;
    return this;
  }

  /**
   * Get absolutePath
   * @return absolutePath
   */
  @javax.annotation.Nullable
  public String getAbsolutePath() {
    return absolutePath;
  }

  public void setAbsolutePath(String absolutePath) {
    this.absolutePath = absolutePath;
  }


  public ModelFile canonicalFile(ModelFile canonicalFile) {
    this.canonicalFile = canonicalFile;
    return this;
  }

  /**
   * Get canonicalFile
   * @return canonicalFile
   */
  @javax.annotation.Nullable
  public ModelFile getCanonicalFile() {
    return canonicalFile;
  }

  public void setCanonicalFile(ModelFile canonicalFile) {
    this.canonicalFile = canonicalFile;
  }


  public ModelFile canonicalPath(String canonicalPath) {
    this.canonicalPath = canonicalPath;
    return this;
  }

  /**
   * Get canonicalPath
   * @return canonicalPath
   */
  @javax.annotation.Nullable
  public String getCanonicalPath() {
    return canonicalPath;
  }

  public void setCanonicalPath(String canonicalPath) {
    this.canonicalPath = canonicalPath;
  }


  public ModelFile directory(Boolean directory) {
    this.directory = directory;
    return this;
  }

  /**
   * Get directory
   * @return directory
   */
  @javax.annotation.Nullable
  public Boolean getDirectory() {
    return directory;
  }

  public void setDirectory(Boolean directory) {
    this.directory = directory;
  }


  public ModelFile _file(Boolean _file) {
    this._file = _file;
    return this;
  }

  /**
   * Get _file
   * @return _file
   */
  @javax.annotation.Nullable
  public Boolean getFile() {
    return _file;
  }

  public void setFile(Boolean _file) {
    this._file = _file;
  }


  public ModelFile freeSpace(Long freeSpace) {
    this.freeSpace = freeSpace;
    return this;
  }

  /**
   * Get freeSpace
   * @return freeSpace
   */
  @javax.annotation.Nullable
  public Long getFreeSpace() {
    return freeSpace;
  }

  public void setFreeSpace(Long freeSpace) {
    this.freeSpace = freeSpace;
  }


  public ModelFile hidden(Boolean hidden) {
    this.hidden = hidden;
    return this;
  }

  /**
   * Get hidden
   * @return hidden
   */
  @javax.annotation.Nullable
  public Boolean getHidden() {
    return hidden;
  }

  public void setHidden(Boolean hidden) {
    this.hidden = hidden;
  }


  public ModelFile name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ModelFile parent(String parent) {
    this.parent = parent;
    return this;
  }

  /**
   * Get parent
   * @return parent
   */
  @javax.annotation.Nullable
  public String getParent() {
    return parent;
  }

  public void setParent(String parent) {
    this.parent = parent;
  }


  public ModelFile parentFile(ModelFile parentFile) {
    this.parentFile = parentFile;
    return this;
  }

  /**
   * Get parentFile
   * @return parentFile
   */
  @javax.annotation.Nullable
  public ModelFile getParentFile() {
    return parentFile;
  }

  public void setParentFile(ModelFile parentFile) {
    this.parentFile = parentFile;
  }


  public ModelFile path(String path) {
    this.path = path;
    return this;
  }

  /**
   * Get path
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public ModelFile totalSpace(Long totalSpace) {
    this.totalSpace = totalSpace;
    return this;
  }

  /**
   * Get totalSpace
   * @return totalSpace
   */
  @javax.annotation.Nullable
  public Long getTotalSpace() {
    return totalSpace;
  }

  public void setTotalSpace(Long totalSpace) {
    this.totalSpace = totalSpace;
  }


  public ModelFile usableSpace(Long usableSpace) {
    this.usableSpace = usableSpace;
    return this;
  }

  /**
   * Get usableSpace
   * @return usableSpace
   */
  @javax.annotation.Nullable
  public Long getUsableSpace() {
    return usableSpace;
  }

  public void setUsableSpace(Long usableSpace) {
    this.usableSpace = usableSpace;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelFile _file = (ModelFile) o;
    return Objects.equals(this.absolute, _file.absolute) &&
        Objects.equals(this.absoluteFile, _file.absoluteFile) &&
        Objects.equals(this.absolutePath, _file.absolutePath) &&
        Objects.equals(this.canonicalFile, _file.canonicalFile) &&
        Objects.equals(this.canonicalPath, _file.canonicalPath) &&
        Objects.equals(this.directory, _file.directory) &&
        Objects.equals(this._file, _file._file) &&
        Objects.equals(this.freeSpace, _file.freeSpace) &&
        Objects.equals(this.hidden, _file.hidden) &&
        Objects.equals(this.name, _file.name) &&
        Objects.equals(this.parent, _file.parent) &&
        Objects.equals(this.parentFile, _file.parentFile) &&
        Objects.equals(this.path, _file.path) &&
        Objects.equals(this.totalSpace, _file.totalSpace) &&
        Objects.equals(this.usableSpace, _file.usableSpace);
  }

  @Override
  public int hashCode() {
    return Objects.hash(absolute, absoluteFile, absolutePath, canonicalFile, canonicalPath, directory, _file, freeSpace, hidden, name, parent, parentFile, path, totalSpace, usableSpace);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelFile {\n");
    sb.append("    absolute: ").append(toIndentedString(absolute)).append("\n");
    sb.append("    absoluteFile: ").append(toIndentedString(absoluteFile)).append("\n");
    sb.append("    absolutePath: ").append(toIndentedString(absolutePath)).append("\n");
    sb.append("    canonicalFile: ").append(toIndentedString(canonicalFile)).append("\n");
    sb.append("    canonicalPath: ").append(toIndentedString(canonicalPath)).append("\n");
    sb.append("    directory: ").append(toIndentedString(directory)).append("\n");
    sb.append("    _file: ").append(toIndentedString(_file)).append("\n");
    sb.append("    freeSpace: ").append(toIndentedString(freeSpace)).append("\n");
    sb.append("    hidden: ").append(toIndentedString(hidden)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("    parentFile: ").append(toIndentedString(parentFile)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    totalSpace: ").append(toIndentedString(totalSpace)).append("\n");
    sb.append("    usableSpace: ").append(toIndentedString(usableSpace)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("absolute");
    openapiFields.add("absoluteFile");
    openapiFields.add("absolutePath");
    openapiFields.add("canonicalFile");
    openapiFields.add("canonicalPath");
    openapiFields.add("directory");
    openapiFields.add("file");
    openapiFields.add("freeSpace");
    openapiFields.add("hidden");
    openapiFields.add("name");
    openapiFields.add("parent");
    openapiFields.add("parentFile");
    openapiFields.add("path");
    openapiFields.add("totalSpace");
    openapiFields.add("usableSpace");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ModelFile
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModelFile.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelFile is not found in the empty JSON string", ModelFile.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModelFile.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModelFile` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `absoluteFile`
      if (jsonObj.get("absoluteFile") != null && !jsonObj.get("absoluteFile").isJsonNull()) {
        ModelFile.validateJsonElement(jsonObj.get("absoluteFile"));
      }
      if ((jsonObj.get("absolutePath") != null && !jsonObj.get("absolutePath").isJsonNull()) && !jsonObj.get("absolutePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `absolutePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("absolutePath").toString()));
      }
      // validate the optional field `canonicalFile`
      if (jsonObj.get("canonicalFile") != null && !jsonObj.get("canonicalFile").isJsonNull()) {
        ModelFile.validateJsonElement(jsonObj.get("canonicalFile"));
      }
      if ((jsonObj.get("canonicalPath") != null && !jsonObj.get("canonicalPath").isJsonNull()) && !jsonObj.get("canonicalPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `canonicalPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("canonicalPath").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("parent") != null && !jsonObj.get("parent").isJsonNull()) && !jsonObj.get("parent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parent").toString()));
      }
      // validate the optional field `parentFile`
      if (jsonObj.get("parentFile") != null && !jsonObj.get("parentFile").isJsonNull()) {
        ModelFile.validateJsonElement(jsonObj.get("parentFile"));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelFile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelFile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelFile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelFile.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelFile>() {
           @Override
           public void write(JsonWriter out, ModelFile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelFile read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ModelFile given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ModelFile
   * @throws IOException if the JSON string is invalid with respect to ModelFile
   */
  public static ModelFile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelFile.class);
  }

  /**
   * Convert an instance of ModelFile to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

