/*
 * Health ID Service
 * It is important to standardize the process of identification of an individual across healthcare providers, to ensure that the created medical records are issued to the right individual or accessed by a Health Information User through appropriate consent.  In order to issue a Health ID to an individual, one only needs basic demographic details like Name, Year of Birth, Gender. In addition, citizens should be able to update contact information easily.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateHidNotifyBenefitRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:34.465238-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateHidNotifyBenefitRequest {
  public static final String SERIALIZED_NAME_AADHAR_NUMBER_OR_UID_TOKEN = "aadharNumberOrUidToken";
  @SerializedName(SERIALIZED_NAME_AADHAR_NUMBER_OR_UID_TOKEN)
  private String aadharNumberOrUidToken;

  public static final String SERIALIZED_NAME_AUTO_GENERATED_BENEFIT_ID = "autoGeneratedBenefitId";
  @SerializedName(SERIALIZED_NAME_AUTO_GENERATED_BENEFIT_ID)
  private Boolean autoGeneratedBenefitId;

  public static final String SERIALIZED_NAME_BENEFIT_ID = "benefitId";
  @SerializedName(SERIALIZED_NAME_BENEFIT_ID)
  private String benefitId;

  public static final String SERIALIZED_NAME_BENEFIT_NAME = "benefitName";
  @SerializedName(SERIALIZED_NAME_BENEFIT_NAME)
  private String benefitName;

  public static final String SERIALIZED_NAME_CONSENT_HEALTH_ID = "consentHealthId";
  @SerializedName(SERIALIZED_NAME_CONSENT_HEALTH_ID)
  private Boolean consentHealthId;

  public static final String SERIALIZED_NAME_DATE_OF_BIRTH = "dateOfBirth";
  @SerializedName(SERIALIZED_NAME_DATE_OF_BIRTH)
  private String dateOfBirth;

  public static final String SERIALIZED_NAME_GENDER = "gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  private String gender;

  public static final String SERIALIZED_NAME_MOBILE_NUMBER = "mobileNumber";
  @SerializedName(SERIALIZED_NAME_MOBILE_NUMBER)
  private String mobileNumber;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_STATE_CODE = "stateCode";
  @SerializedName(SERIALIZED_NAME_STATE_CODE)
  private String stateCode;

  public static final String SERIALIZED_NAME_VALIDITY = "validity";
  @SerializedName(SERIALIZED_NAME_VALIDITY)
  private String validity;

  public CreateHidNotifyBenefitRequest() {
  }

  public CreateHidNotifyBenefitRequest aadharNumberOrUidToken(String aadharNumberOrUidToken) {
    this.aadharNumberOrUidToken = aadharNumberOrUidToken;
    return this;
  }

  /**
   * Get aadharNumberOrUidToken
   * @return aadharNumberOrUidToken
   */
  @javax.annotation.Nullable
  public String getAadharNumberOrUidToken() {
    return aadharNumberOrUidToken;
  }

  public void setAadharNumberOrUidToken(String aadharNumberOrUidToken) {
    this.aadharNumberOrUidToken = aadharNumberOrUidToken;
  }


  public CreateHidNotifyBenefitRequest autoGeneratedBenefitId(Boolean autoGeneratedBenefitId) {
    this.autoGeneratedBenefitId = autoGeneratedBenefitId;
    return this;
  }

  /**
   * Get autoGeneratedBenefitId
   * @return autoGeneratedBenefitId
   */
  @javax.annotation.Nullable
  public Boolean getAutoGeneratedBenefitId() {
    return autoGeneratedBenefitId;
  }

  public void setAutoGeneratedBenefitId(Boolean autoGeneratedBenefitId) {
    this.autoGeneratedBenefitId = autoGeneratedBenefitId;
  }


  public CreateHidNotifyBenefitRequest benefitId(String benefitId) {
    this.benefitId = benefitId;
    return this;
  }

  /**
   * Get benefitId
   * @return benefitId
   */
  @javax.annotation.Nullable
  public String getBenefitId() {
    return benefitId;
  }

  public void setBenefitId(String benefitId) {
    this.benefitId = benefitId;
  }


  public CreateHidNotifyBenefitRequest benefitName(String benefitName) {
    this.benefitName = benefitName;
    return this;
  }

  /**
   * Get benefitName
   * @return benefitName
   */
  @javax.annotation.Nullable
  public String getBenefitName() {
    return benefitName;
  }

  public void setBenefitName(String benefitName) {
    this.benefitName = benefitName;
  }


  public CreateHidNotifyBenefitRequest consentHealthId(Boolean consentHealthId) {
    this.consentHealthId = consentHealthId;
    return this;
  }

  /**
   * Get consentHealthId
   * @return consentHealthId
   */
  @javax.annotation.Nullable
  public Boolean getConsentHealthId() {
    return consentHealthId;
  }

  public void setConsentHealthId(Boolean consentHealthId) {
    this.consentHealthId = consentHealthId;
  }


  public CreateHidNotifyBenefitRequest dateOfBirth(String dateOfBirth) {
    this.dateOfBirth = dateOfBirth;
    return this;
  }

  /**
   * Get dateOfBirth
   * @return dateOfBirth
   */
  @javax.annotation.Nullable
  public String getDateOfBirth() {
    return dateOfBirth;
  }

  public void setDateOfBirth(String dateOfBirth) {
    this.dateOfBirth = dateOfBirth;
  }


  public CreateHidNotifyBenefitRequest gender(String gender) {
    this.gender = gender;
    return this;
  }

  /**
   * Get gender
   * @return gender
   */
  @javax.annotation.Nullable
  public String getGender() {
    return gender;
  }

  public void setGender(String gender) {
    this.gender = gender;
  }


  public CreateHidNotifyBenefitRequest mobileNumber(String mobileNumber) {
    this.mobileNumber = mobileNumber;
    return this;
  }

  /**
   * Get mobileNumber
   * @return mobileNumber
   */
  @javax.annotation.Nullable
  public String getMobileNumber() {
    return mobileNumber;
  }

  public void setMobileNumber(String mobileNumber) {
    this.mobileNumber = mobileNumber;
  }


  public CreateHidNotifyBenefitRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateHidNotifyBenefitRequest stateCode(String stateCode) {
    this.stateCode = stateCode;
    return this;
  }

  /**
   * Get stateCode
   * @return stateCode
   */
  @javax.annotation.Nullable
  public String getStateCode() {
    return stateCode;
  }

  public void setStateCode(String stateCode) {
    this.stateCode = stateCode;
  }


  public CreateHidNotifyBenefitRequest validity(String validity) {
    this.validity = validity;
    return this;
  }

  /**
   * Get validity
   * @return validity
   */
  @javax.annotation.Nullable
  public String getValidity() {
    return validity;
  }

  public void setValidity(String validity) {
    this.validity = validity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateHidNotifyBenefitRequest createHidNotifyBenefitRequest = (CreateHidNotifyBenefitRequest) o;
    return Objects.equals(this.aadharNumberOrUidToken, createHidNotifyBenefitRequest.aadharNumberOrUidToken) &&
        Objects.equals(this.autoGeneratedBenefitId, createHidNotifyBenefitRequest.autoGeneratedBenefitId) &&
        Objects.equals(this.benefitId, createHidNotifyBenefitRequest.benefitId) &&
        Objects.equals(this.benefitName, createHidNotifyBenefitRequest.benefitName) &&
        Objects.equals(this.consentHealthId, createHidNotifyBenefitRequest.consentHealthId) &&
        Objects.equals(this.dateOfBirth, createHidNotifyBenefitRequest.dateOfBirth) &&
        Objects.equals(this.gender, createHidNotifyBenefitRequest.gender) &&
        Objects.equals(this.mobileNumber, createHidNotifyBenefitRequest.mobileNumber) &&
        Objects.equals(this.name, createHidNotifyBenefitRequest.name) &&
        Objects.equals(this.stateCode, createHidNotifyBenefitRequest.stateCode) &&
        Objects.equals(this.validity, createHidNotifyBenefitRequest.validity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aadharNumberOrUidToken, autoGeneratedBenefitId, benefitId, benefitName, consentHealthId, dateOfBirth, gender, mobileNumber, name, stateCode, validity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateHidNotifyBenefitRequest {\n");
    sb.append("    aadharNumberOrUidToken: ").append(toIndentedString(aadharNumberOrUidToken)).append("\n");
    sb.append("    autoGeneratedBenefitId: ").append(toIndentedString(autoGeneratedBenefitId)).append("\n");
    sb.append("    benefitId: ").append(toIndentedString(benefitId)).append("\n");
    sb.append("    benefitName: ").append(toIndentedString(benefitName)).append("\n");
    sb.append("    consentHealthId: ").append(toIndentedString(consentHealthId)).append("\n");
    sb.append("    dateOfBirth: ").append(toIndentedString(dateOfBirth)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    mobileNumber: ").append(toIndentedString(mobileNumber)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    stateCode: ").append(toIndentedString(stateCode)).append("\n");
    sb.append("    validity: ").append(toIndentedString(validity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aadharNumberOrUidToken");
    openapiFields.add("autoGeneratedBenefitId");
    openapiFields.add("benefitId");
    openapiFields.add("benefitName");
    openapiFields.add("consentHealthId");
    openapiFields.add("dateOfBirth");
    openapiFields.add("gender");
    openapiFields.add("mobileNumber");
    openapiFields.add("name");
    openapiFields.add("stateCode");
    openapiFields.add("validity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateHidNotifyBenefitRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateHidNotifyBenefitRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateHidNotifyBenefitRequest is not found in the empty JSON string", CreateHidNotifyBenefitRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateHidNotifyBenefitRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateHidNotifyBenefitRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("aadharNumberOrUidToken") != null && !jsonObj.get("aadharNumberOrUidToken").isJsonNull()) && !jsonObj.get("aadharNumberOrUidToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aadharNumberOrUidToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aadharNumberOrUidToken").toString()));
      }
      if ((jsonObj.get("benefitId") != null && !jsonObj.get("benefitId").isJsonNull()) && !jsonObj.get("benefitId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `benefitId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("benefitId").toString()));
      }
      if ((jsonObj.get("benefitName") != null && !jsonObj.get("benefitName").isJsonNull()) && !jsonObj.get("benefitName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `benefitName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("benefitName").toString()));
      }
      if ((jsonObj.get("dateOfBirth") != null && !jsonObj.get("dateOfBirth").isJsonNull()) && !jsonObj.get("dateOfBirth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateOfBirth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateOfBirth").toString()));
      }
      if ((jsonObj.get("gender") != null && !jsonObj.get("gender").isJsonNull()) && !jsonObj.get("gender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gender").toString()));
      }
      if ((jsonObj.get("mobileNumber") != null && !jsonObj.get("mobileNumber").isJsonNull()) && !jsonObj.get("mobileNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mobileNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mobileNumber").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("stateCode") != null && !jsonObj.get("stateCode").isJsonNull()) && !jsonObj.get("stateCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stateCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stateCode").toString()));
      }
      if ((jsonObj.get("validity") != null && !jsonObj.get("validity").isJsonNull()) && !jsonObj.get("validity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `validity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("validity").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateHidNotifyBenefitRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateHidNotifyBenefitRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateHidNotifyBenefitRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateHidNotifyBenefitRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateHidNotifyBenefitRequest>() {
           @Override
           public void write(JsonWriter out, CreateHidNotifyBenefitRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateHidNotifyBenefitRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateHidNotifyBenefitRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateHidNotifyBenefitRequest
   * @throws IOException if the JSON string is invalid with respect to CreateHidNotifyBenefitRequest
   */
  public static CreateHidNotifyBenefitRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateHidNotifyBenefitRequest.class);
  }

  /**
   * Convert an instance of CreateHidNotifyBenefitRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

