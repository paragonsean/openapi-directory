/*
 * Health ID Service
 * It is important to standardize the process of identification of an individual across healthcare providers, to ensure that the created medical records are issued to the right individual or accessed by a Health Information User through appropriate consent.  In order to issue a Health ID to an individual, one only needs basic demographic details like Name, Year of Birth, Gender. In addition, citizens should be able to update contact information easily.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateAccountByVerifiedMobileRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:34.465238-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateAccountByVerifiedMobileRequest {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_DAY_OF_BIRTH = "dayOfBirth";
  @SerializedName(SERIALIZED_NAME_DAY_OF_BIRTH)
  private String dayOfBirth;

  public static final String SERIALIZED_NAME_DISTRICT_CODE = "districtCode";
  @SerializedName(SERIALIZED_NAME_DISTRICT_CODE)
  private String districtCode;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_GENDER = "gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  private String gender;

  public static final String SERIALIZED_NAME_HEALTH_ID = "healthId";
  @SerializedName(SERIALIZED_NAME_HEALTH_ID)
  private String healthId;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_MIDDLE_NAME = "middleName";
  @SerializedName(SERIALIZED_NAME_MIDDLE_NAME)
  private String middleName;

  public static final String SERIALIZED_NAME_MONTH_OF_BIRTH = "monthOfBirth";
  @SerializedName(SERIALIZED_NAME_MONTH_OF_BIRTH)
  private String monthOfBirth;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_PINCODE = "pincode";
  @SerializedName(SERIALIZED_NAME_PINCODE)
  private Integer pincode;

  public static final String SERIALIZED_NAME_PROFILE_PHOTO = "profilePhoto";
  @SerializedName(SERIALIZED_NAME_PROFILE_PHOTO)
  private String profilePhoto;

  public static final String SERIALIZED_NAME_RESTRICTIONS = "restrictions";
  @SerializedName(SERIALIZED_NAME_RESTRICTIONS)
  private String restrictions;

  public static final String SERIALIZED_NAME_STATE_CODE = "stateCode";
  @SerializedName(SERIALIZED_NAME_STATE_CODE)
  private String stateCode;

  public static final String SERIALIZED_NAME_SUBDISTRICT_CODE = "subdistrictCode";
  @SerializedName(SERIALIZED_NAME_SUBDISTRICT_CODE)
  private String subdistrictCode;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  private String token;

  public static final String SERIALIZED_NAME_TOWN_CODE = "townCode";
  @SerializedName(SERIALIZED_NAME_TOWN_CODE)
  private String townCode;

  public static final String SERIALIZED_NAME_TXN_ID = "txnId";
  @SerializedName(SERIALIZED_NAME_TXN_ID)
  private String txnId;

  public static final String SERIALIZED_NAME_VILLAGE_CODE = "villageCode";
  @SerializedName(SERIALIZED_NAME_VILLAGE_CODE)
  private String villageCode;

  public static final String SERIALIZED_NAME_WARD_CODE = "wardCode";
  @SerializedName(SERIALIZED_NAME_WARD_CODE)
  private String wardCode;

  public static final String SERIALIZED_NAME_YEAR_OF_BIRTH = "yearOfBirth";
  @SerializedName(SERIALIZED_NAME_YEAR_OF_BIRTH)
  private String yearOfBirth;

  public CreateAccountByVerifiedMobileRequest() {
  }

  public CreateAccountByVerifiedMobileRequest address(String address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }


  public CreateAccountByVerifiedMobileRequest dayOfBirth(String dayOfBirth) {
    this.dayOfBirth = dayOfBirth;
    return this;
  }

  /**
   * Get dayOfBirth
   * @return dayOfBirth
   */
  @javax.annotation.Nullable
  public String getDayOfBirth() {
    return dayOfBirth;
  }

  public void setDayOfBirth(String dayOfBirth) {
    this.dayOfBirth = dayOfBirth;
  }


  public CreateAccountByVerifiedMobileRequest districtCode(String districtCode) {
    this.districtCode = districtCode;
    return this;
  }

  /**
   * Get districtCode
   * @return districtCode
   */
  @javax.annotation.Nullable
  public String getDistrictCode() {
    return districtCode;
  }

  public void setDistrictCode(String districtCode) {
    this.districtCode = districtCode;
  }


  public CreateAccountByVerifiedMobileRequest email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public CreateAccountByVerifiedMobileRequest firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * Get firstName
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public CreateAccountByVerifiedMobileRequest gender(String gender) {
    this.gender = gender;
    return this;
  }

  /**
   * Get gender
   * @return gender
   */
  @javax.annotation.Nullable
  public String getGender() {
    return gender;
  }

  public void setGender(String gender) {
    this.gender = gender;
  }


  public CreateAccountByVerifiedMobileRequest healthId(String healthId) {
    this.healthId = healthId;
    return this;
  }

  /**
   * Get healthId
   * @return healthId
   */
  @javax.annotation.Nullable
  public String getHealthId() {
    return healthId;
  }

  public void setHealthId(String healthId) {
    this.healthId = healthId;
  }


  public CreateAccountByVerifiedMobileRequest lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * Get lastName
   * @return lastName
   */
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public CreateAccountByVerifiedMobileRequest middleName(String middleName) {
    this.middleName = middleName;
    return this;
  }

  /**
   * Get middleName
   * @return middleName
   */
  @javax.annotation.Nullable
  public String getMiddleName() {
    return middleName;
  }

  public void setMiddleName(String middleName) {
    this.middleName = middleName;
  }


  public CreateAccountByVerifiedMobileRequest monthOfBirth(String monthOfBirth) {
    this.monthOfBirth = monthOfBirth;
    return this;
  }

  /**
   * Get monthOfBirth
   * @return monthOfBirth
   */
  @javax.annotation.Nullable
  public String getMonthOfBirth() {
    return monthOfBirth;
  }

  public void setMonthOfBirth(String monthOfBirth) {
    this.monthOfBirth = monthOfBirth;
  }


  public CreateAccountByVerifiedMobileRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateAccountByVerifiedMobileRequest password(String password) {
    this.password = password;
    return this;
  }

  /**
   * Get password
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public CreateAccountByVerifiedMobileRequest pincode(Integer pincode) {
    this.pincode = pincode;
    return this;
  }

  /**
   * Get pincode
   * @return pincode
   */
  @javax.annotation.Nullable
  public Integer getPincode() {
    return pincode;
  }

  public void setPincode(Integer pincode) {
    this.pincode = pincode;
  }


  public CreateAccountByVerifiedMobileRequest profilePhoto(String profilePhoto) {
    this.profilePhoto = profilePhoto;
    return this;
  }

  /**
   * Get profilePhoto
   * @return profilePhoto
   */
  @javax.annotation.Nullable
  public String getProfilePhoto() {
    return profilePhoto;
  }

  public void setProfilePhoto(String profilePhoto) {
    this.profilePhoto = profilePhoto;
  }


  public CreateAccountByVerifiedMobileRequest restrictions(String restrictions) {
    this.restrictions = restrictions;
    return this;
  }

  /**
   * Get restrictions
   * @return restrictions
   */
  @javax.annotation.Nullable
  public String getRestrictions() {
    return restrictions;
  }

  public void setRestrictions(String restrictions) {
    this.restrictions = restrictions;
  }


  public CreateAccountByVerifiedMobileRequest stateCode(String stateCode) {
    this.stateCode = stateCode;
    return this;
  }

  /**
   * Get stateCode
   * @return stateCode
   */
  @javax.annotation.Nullable
  public String getStateCode() {
    return stateCode;
  }

  public void setStateCode(String stateCode) {
    this.stateCode = stateCode;
  }


  public CreateAccountByVerifiedMobileRequest subdistrictCode(String subdistrictCode) {
    this.subdistrictCode = subdistrictCode;
    return this;
  }

  /**
   * Get subdistrictCode
   * @return subdistrictCode
   */
  @javax.annotation.Nullable
  public String getSubdistrictCode() {
    return subdistrictCode;
  }

  public void setSubdistrictCode(String subdistrictCode) {
    this.subdistrictCode = subdistrictCode;
  }


  public CreateAccountByVerifiedMobileRequest token(String token) {
    this.token = token;
    return this;
  }

  /**
   * Get token
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(String token) {
    this.token = token;
  }


  public CreateAccountByVerifiedMobileRequest townCode(String townCode) {
    this.townCode = townCode;
    return this;
  }

  /**
   * Get townCode
   * @return townCode
   */
  @javax.annotation.Nullable
  public String getTownCode() {
    return townCode;
  }

  public void setTownCode(String townCode) {
    this.townCode = townCode;
  }


  public CreateAccountByVerifiedMobileRequest txnId(String txnId) {
    this.txnId = txnId;
    return this;
  }

  /**
   * Get txnId
   * @return txnId
   */
  @javax.annotation.Nonnull
  public String getTxnId() {
    return txnId;
  }

  public void setTxnId(String txnId) {
    this.txnId = txnId;
  }


  public CreateAccountByVerifiedMobileRequest villageCode(String villageCode) {
    this.villageCode = villageCode;
    return this;
  }

  /**
   * Get villageCode
   * @return villageCode
   */
  @javax.annotation.Nullable
  public String getVillageCode() {
    return villageCode;
  }

  public void setVillageCode(String villageCode) {
    this.villageCode = villageCode;
  }


  public CreateAccountByVerifiedMobileRequest wardCode(String wardCode) {
    this.wardCode = wardCode;
    return this;
  }

  /**
   * Get wardCode
   * @return wardCode
   */
  @javax.annotation.Nullable
  public String getWardCode() {
    return wardCode;
  }

  public void setWardCode(String wardCode) {
    this.wardCode = wardCode;
  }


  public CreateAccountByVerifiedMobileRequest yearOfBirth(String yearOfBirth) {
    this.yearOfBirth = yearOfBirth;
    return this;
  }

  /**
   * Get yearOfBirth
   * @return yearOfBirth
   */
  @javax.annotation.Nullable
  public String getYearOfBirth() {
    return yearOfBirth;
  }

  public void setYearOfBirth(String yearOfBirth) {
    this.yearOfBirth = yearOfBirth;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateAccountByVerifiedMobileRequest createAccountByVerifiedMobileRequest = (CreateAccountByVerifiedMobileRequest) o;
    return Objects.equals(this.address, createAccountByVerifiedMobileRequest.address) &&
        Objects.equals(this.dayOfBirth, createAccountByVerifiedMobileRequest.dayOfBirth) &&
        Objects.equals(this.districtCode, createAccountByVerifiedMobileRequest.districtCode) &&
        Objects.equals(this.email, createAccountByVerifiedMobileRequest.email) &&
        Objects.equals(this.firstName, createAccountByVerifiedMobileRequest.firstName) &&
        Objects.equals(this.gender, createAccountByVerifiedMobileRequest.gender) &&
        Objects.equals(this.healthId, createAccountByVerifiedMobileRequest.healthId) &&
        Objects.equals(this.lastName, createAccountByVerifiedMobileRequest.lastName) &&
        Objects.equals(this.middleName, createAccountByVerifiedMobileRequest.middleName) &&
        Objects.equals(this.monthOfBirth, createAccountByVerifiedMobileRequest.monthOfBirth) &&
        Objects.equals(this.name, createAccountByVerifiedMobileRequest.name) &&
        Objects.equals(this.password, createAccountByVerifiedMobileRequest.password) &&
        Objects.equals(this.pincode, createAccountByVerifiedMobileRequest.pincode) &&
        Objects.equals(this.profilePhoto, createAccountByVerifiedMobileRequest.profilePhoto) &&
        Objects.equals(this.restrictions, createAccountByVerifiedMobileRequest.restrictions) &&
        Objects.equals(this.stateCode, createAccountByVerifiedMobileRequest.stateCode) &&
        Objects.equals(this.subdistrictCode, createAccountByVerifiedMobileRequest.subdistrictCode) &&
        Objects.equals(this.token, createAccountByVerifiedMobileRequest.token) &&
        Objects.equals(this.townCode, createAccountByVerifiedMobileRequest.townCode) &&
        Objects.equals(this.txnId, createAccountByVerifiedMobileRequest.txnId) &&
        Objects.equals(this.villageCode, createAccountByVerifiedMobileRequest.villageCode) &&
        Objects.equals(this.wardCode, createAccountByVerifiedMobileRequest.wardCode) &&
        Objects.equals(this.yearOfBirth, createAccountByVerifiedMobileRequest.yearOfBirth);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, dayOfBirth, districtCode, email, firstName, gender, healthId, lastName, middleName, monthOfBirth, name, password, pincode, profilePhoto, restrictions, stateCode, subdistrictCode, token, townCode, txnId, villageCode, wardCode, yearOfBirth);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateAccountByVerifiedMobileRequest {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    dayOfBirth: ").append(toIndentedString(dayOfBirth)).append("\n");
    sb.append("    districtCode: ").append(toIndentedString(districtCode)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    healthId: ").append(toIndentedString(healthId)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    middleName: ").append(toIndentedString(middleName)).append("\n");
    sb.append("    monthOfBirth: ").append(toIndentedString(monthOfBirth)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    pincode: ").append(toIndentedString(pincode)).append("\n");
    sb.append("    profilePhoto: ").append(toIndentedString(profilePhoto)).append("\n");
    sb.append("    restrictions: ").append(toIndentedString(restrictions)).append("\n");
    sb.append("    stateCode: ").append(toIndentedString(stateCode)).append("\n");
    sb.append("    subdistrictCode: ").append(toIndentedString(subdistrictCode)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    townCode: ").append(toIndentedString(townCode)).append("\n");
    sb.append("    txnId: ").append(toIndentedString(txnId)).append("\n");
    sb.append("    villageCode: ").append(toIndentedString(villageCode)).append("\n");
    sb.append("    wardCode: ").append(toIndentedString(wardCode)).append("\n");
    sb.append("    yearOfBirth: ").append(toIndentedString(yearOfBirth)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("dayOfBirth");
    openapiFields.add("districtCode");
    openapiFields.add("email");
    openapiFields.add("firstName");
    openapiFields.add("gender");
    openapiFields.add("healthId");
    openapiFields.add("lastName");
    openapiFields.add("middleName");
    openapiFields.add("monthOfBirth");
    openapiFields.add("name");
    openapiFields.add("password");
    openapiFields.add("pincode");
    openapiFields.add("profilePhoto");
    openapiFields.add("restrictions");
    openapiFields.add("stateCode");
    openapiFields.add("subdistrictCode");
    openapiFields.add("token");
    openapiFields.add("townCode");
    openapiFields.add("txnId");
    openapiFields.add("villageCode");
    openapiFields.add("wardCode");
    openapiFields.add("yearOfBirth");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("txnId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateAccountByVerifiedMobileRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateAccountByVerifiedMobileRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateAccountByVerifiedMobileRequest is not found in the empty JSON string", CreateAccountByVerifiedMobileRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateAccountByVerifiedMobileRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateAccountByVerifiedMobileRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateAccountByVerifiedMobileRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if ((jsonObj.get("dayOfBirth") != null && !jsonObj.get("dayOfBirth").isJsonNull()) && !jsonObj.get("dayOfBirth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dayOfBirth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dayOfBirth").toString()));
      }
      if ((jsonObj.get("districtCode") != null && !jsonObj.get("districtCode").isJsonNull()) && !jsonObj.get("districtCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `districtCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("districtCode").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonNull()) && !jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if ((jsonObj.get("gender") != null && !jsonObj.get("gender").isJsonNull()) && !jsonObj.get("gender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gender").toString()));
      }
      if ((jsonObj.get("healthId") != null && !jsonObj.get("healthId").isJsonNull()) && !jsonObj.get("healthId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `healthId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("healthId").toString()));
      }
      if ((jsonObj.get("lastName") != null && !jsonObj.get("lastName").isJsonNull()) && !jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if ((jsonObj.get("middleName") != null && !jsonObj.get("middleName").isJsonNull()) && !jsonObj.get("middleName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `middleName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("middleName").toString()));
      }
      if ((jsonObj.get("monthOfBirth") != null && !jsonObj.get("monthOfBirth").isJsonNull()) && !jsonObj.get("monthOfBirth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `monthOfBirth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("monthOfBirth").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if ((jsonObj.get("profilePhoto") != null && !jsonObj.get("profilePhoto").isJsonNull()) && !jsonObj.get("profilePhoto").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profilePhoto` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profilePhoto").toString()));
      }
      if ((jsonObj.get("restrictions") != null && !jsonObj.get("restrictions").isJsonNull()) && !jsonObj.get("restrictions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `restrictions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("restrictions").toString()));
      }
      if ((jsonObj.get("stateCode") != null && !jsonObj.get("stateCode").isJsonNull()) && !jsonObj.get("stateCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stateCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stateCode").toString()));
      }
      if ((jsonObj.get("subdistrictCode") != null && !jsonObj.get("subdistrictCode").isJsonNull()) && !jsonObj.get("subdistrictCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subdistrictCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subdistrictCode").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      if ((jsonObj.get("townCode") != null && !jsonObj.get("townCode").isJsonNull()) && !jsonObj.get("townCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `townCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("townCode").toString()));
      }
      if (!jsonObj.get("txnId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `txnId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("txnId").toString()));
      }
      if ((jsonObj.get("villageCode") != null && !jsonObj.get("villageCode").isJsonNull()) && !jsonObj.get("villageCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `villageCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("villageCode").toString()));
      }
      if ((jsonObj.get("wardCode") != null && !jsonObj.get("wardCode").isJsonNull()) && !jsonObj.get("wardCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wardCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wardCode").toString()));
      }
      if ((jsonObj.get("yearOfBirth") != null && !jsonObj.get("yearOfBirth").isJsonNull()) && !jsonObj.get("yearOfBirth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `yearOfBirth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("yearOfBirth").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateAccountByVerifiedMobileRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateAccountByVerifiedMobileRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateAccountByVerifiedMobileRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateAccountByVerifiedMobileRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateAccountByVerifiedMobileRequest>() {
           @Override
           public void write(JsonWriter out, CreateAccountByVerifiedMobileRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateAccountByVerifiedMobileRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateAccountByVerifiedMobileRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateAccountByVerifiedMobileRequest
   * @throws IOException if the JSON string is invalid with respect to CreateAccountByVerifiedMobileRequest
   */
  public static CreateAccountByVerifiedMobileRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateAccountByVerifiedMobileRequest.class);
  }

  /**
   * Convert an instance of CreateAccountByVerifiedMobileRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

