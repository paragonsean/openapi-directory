/*
 * Health ID Service
 * It is important to standardize the process of identification of an individual across healthcare providers, to ensure that the created medical records are issued to the right individual or accessed by a Health Information User through appropriate consent.  In order to issue a Health ID to an individual, one only needs basic demographic details like Name, Year of Birth, Gender. In addition, citizens should be able to update contact information easily.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AadharNumberRequestPayload;
import org.openapitools.client.model.AadharOtpGenerateRequestPayLoad;
import org.openapitools.client.model.CreateHIdDemoAuthRequest;
import org.openapitools.client.model.CreateHealthIdOptRequest;
import org.openapitools.client.model.CreateHidBiometricRequest;
import org.openapitools.client.model.CreateHidMobileRequest;
import org.openapitools.client.model.CreateHidNotifyBenefitRequest;
import org.openapitools.client.model.GenerateMobileOTPRequest;
import org.openapitools.client.model.HidBenefitDelinkRequestPayload;
import org.openapitools.client.model.HidBenefitLinkedRequestPayload;
import org.openapitools.client.model.HidBenefitLinkedResponsePayload;
import org.openapitools.client.model.HidBenefitNameSearchRequest;
import org.openapitools.client.model.HidBenefitRequestPayload;
import org.openapitools.client.model.HidBenefitSearchResponsePayload;
import org.openapitools.client.model.HidStatusRequestPayload;
import org.openapitools.client.model.HidUpdateAccountRequest;
import org.openapitools.client.model.HidUpdateMobiletRequest;
import org.openapitools.client.model.TxnResponse;
import org.openapitools.client.model.UserDTO;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for IntegratedProgramsApi
 */
@Disabled
public class IntegratedProgramsApiTest {

    private final IntegratedProgramsApi api = new IntegratedProgramsApi();

    /**
     * Create health id using Aadhaar Demo Auth.
     *
     * Create health id using Aadhaar Demo Auth.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createHealthIdByDemoAuthUsingPOSTTest() throws ApiException {
        CreateHIdDemoAuthRequest createHIdDemoAuthRequest = null;
        String acceptLanguage = null;
        HidBenefitRequestPayload response = api.createHealthIdByDemoAuthUsingPOST(createHIdDemoAuthRequest, acceptLanguage);
        // TODO: test validations
    }

    /**
     * Create health id using mobile Authentication.
     *
     * Create health id using mobile Authentication.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createHealthIdByMobileUsingPOSTTest() throws ApiException {
        CreateHidMobileRequest createHidMobileRequest = null;
        String acceptLanguage = null;
        TxnResponse response = api.createHealthIdByMobileUsingPOST(createHidMobileRequest, acceptLanguage);
        // TODO: test validations
    }

    /**
     * De-Linked with hid.
     *
     * De-Linked with hid.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void delinkHidBenefitUsingPOSTTest() throws ApiException {
        HidBenefitDelinkRequestPayload hidBenefitLinkedRequestPayload = null;
        String acceptLanguage = null;
        HidBenefitLinkedResponsePayload response = api.delinkHidBenefitUsingPOST(hidBenefitLinkedRequestPayload, acceptLanguage);
        // TODO: test validations
    }

    /**
     * Search health id number using aadhar or aadhar token.
     *
     * Search health id number using aadhar or aadhar token.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findByAadharUsingPOSTTest() throws ApiException {
        AadharNumberRequestPayload aadharNumberRequestPayload = null;
        String acceptLanguage = null;
        List<Object> response = api.findByAadharUsingPOST(aadharNumberRequestPayload, acceptLanguage);
        // TODO: test validations
    }

    /**
     * Search benefit using health id number.
     *
     * Search benefit using health id number
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findByHealthIdUsingPOSTTest() throws ApiException {
        HidBenefitNameSearchRequest searchRequest = null;
        String acceptLanguage = null;
        List<HidBenefitSearchResponsePayload> response = api.findByHealthIdUsingPOST(searchRequest, acceptLanguage);
        // TODO: test validations
    }

    /**
     * Generate Aadhaar OTP on registrered mobile number
     *
     * Generate Aadhaar OTP on registrered mobile number
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generateAadharOTPUsingPOST2Test() throws ApiException {
        AadharOtpGenerateRequestPayLoad generateOtpRequest = null;
        String acceptLanguage = null;
        TxnResponse response = api.generateAadharOTPUsingPOST2(generateOtpRequest, acceptLanguage);
        // TODO: test validations
    }

    /**
     * Generate mobile OTP on registrered mobile number
     *
     * Generate mobile OTP on registrered mobile number
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generateMobileOtpUsingPOSTTest() throws ApiException {
        GenerateMobileOTPRequest generateOtpRequest = null;
        String acceptLanguage = null;
        TxnResponse response = api.generateMobileOtpUsingPOST(generateOtpRequest, acceptLanguage);
        // TODO: test validations
    }

    /**
     * Linked with hid.
     *
     * Linked with hid.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void linkHidBenefitUsingPOSTTest() throws ApiException {
        HidBenefitLinkedRequestPayload hidBenefitLinkedRequestPayload = null;
        String acceptLanguage = null;
        HidBenefitLinkedResponsePayload response = api.linkHidBenefitUsingPOST(hidBenefitLinkedRequestPayload, acceptLanguage);
        // TODO: test validations
    }

    /**
     * Create health id using notify Benefit.
     *
     * Create health id using notify Benefit.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void notifyBenefitUsingPOSTTest() throws ApiException {
        CreateHidNotifyBenefitRequest createHidNotifyBenefitRequest = null;
        String acceptLanguage = null;
        HidBenefitRequestPayload response = api.notifyBenefitUsingPOST(createHidNotifyBenefitRequest, acceptLanguage);
        // TODO: test validations
    }

    /**
     * Update account information
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAccountInformationUsingPOST1Test() throws ApiException {
        HidUpdateAccountRequest request = null;
        String acceptLanguage = null;
        UserDTO response = api.updateAccountInformationUsingPOST1(request, acceptLanguage);
        // TODO: test validations
    }

    /**
     * Update mobile number for account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMobileInformationUsingPOSTTest() throws ApiException {
        HidUpdateMobiletRequest request = null;
        String acceptLanguage = null;
        UserDTO response = api.updateMobileInformationUsingPOST(request, acceptLanguage);
        // TODO: test validations
    }

    /**
     * Update health id status .
     *
     * Update health id status.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateStatusUsingPOSTTest() throws ApiException {
        HidStatusRequestPayload generateOtpRequest = null;
        String acceptLanguage = null;
        Boolean response = api.updateStatusUsingPOST(generateOtpRequest, acceptLanguage);
        // TODO: test validations
    }

    /**
     * Create health id using Aadhaar Number Otp.
     *
     * Create health id using Aadhaar number opt
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void verifyAadharOtpUsingPOSTTest() throws ApiException {
        CreateHealthIdOptRequest createHealthIdOptRequest = null;
        String acceptLanguage = null;
        HidBenefitRequestPayload response = api.verifyAadharOtpUsingPOST(createHealthIdOptRequest, acceptLanguage);
        // TODO: test validations
    }

    /**
     * Create health id using Biometric Authentication.
     *
     * Create health id using Biometric Authentication.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void verifyBioUsingPOSTTest() throws ApiException {
        CreateHidBiometricRequest createHidBiometricRequest = null;
        String acceptLanguage = null;
        HidBenefitRequestPayload response = api.verifyBioUsingPOST(createHidBiometricRequest, acceptLanguage);
        // TODO: test validations
    }

}
