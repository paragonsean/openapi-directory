/**
 * Health ID Service
 * It is important to standardize the process of identification of an individual across healthcare providers, to ensure that the created medical records are issued to the right individual or accessed by a Health Information User through appropriate consent.  In order to issue a Health ID to an individual, one only needs basic demographic details like Name, Year of Birth, Gender. In addition, citizens should be able to update contact information easily.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AadharOtpGenerateRequestPayLoad from '../model/AadharOtpGenerateRequestPayLoad';
import CreateAccountJwtResponse from '../model/CreateAccountJwtResponse';
import CreateAccountWithPreVerifiedAadhaar from '../model/CreateAccountWithPreVerifiedAadhaar';
import HealthFacilityAuthenticationRequest from '../model/HealthFacilityAuthenticationRequest';
import HealthFacilityChangedPasswordRequest from '../model/HealthFacilityChangedPasswordRequest';
import HealthFacilityPasswordRequest from '../model/HealthFacilityPasswordRequest';
import TxnResponse from '../model/TxnResponse';

/**
* HealthFacility service.
* @module api/HealthFacilityApi
* @version 1.0
*/
export default class HealthFacilityApi {

    /**
    * Constructs a new HealthFacilityApi. 
    * @alias module:api/HealthFacilityApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the authenticateHealthFacilityUsingPOST operation.
     * @callback module:api/HealthFacilityApi~authenticateHealthFacilityUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate token for heath facility id.
     * Generate token for heath facility id.
     * @param {module:model/HealthFacilityAuthenticationRequest} healthFacilityAuthenticationRequest healthFacilityAuthenticationRequest
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage = 'en-US')] 
     * @param {module:api/HealthFacilityApi~authenticateHealthFacilityUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    authenticateHealthFacilityUsingPOST(healthFacilityAuthenticationRequest, opts, callback) {
      opts = opts || {};
      let postBody = healthFacilityAuthenticationRequest;
      // verify the required parameter 'healthFacilityAuthenticationRequest' is set
      if (healthFacilityAuthenticationRequest === undefined || healthFacilityAuthenticationRequest === null) {
        throw new Error("Missing the required parameter 'healthFacilityAuthenticationRequest' when calling authenticateHealthFacilityUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['Authorization', 'X-HIP-ID'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/health/facility/authenticate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the changePasswordUsingPOST operation.
     * @callback module:api/HealthFacilityApi~changePasswordUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change password for heath facility id.
     * Change password for heath facility id.
     * @param {module:model/HealthFacilityChangedPasswordRequest} healthFacilityPasswordRequest healthFacilityPasswordRequest
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage = 'en-US')] 
     * @param {module:api/HealthFacilityApi~changePasswordUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    changePasswordUsingPOST(healthFacilityPasswordRequest, opts, callback) {
      opts = opts || {};
      let postBody = healthFacilityPasswordRequest;
      // verify the required parameter 'healthFacilityPasswordRequest' is set
      if (healthFacilityPasswordRequest === undefined || healthFacilityPasswordRequest === null) {
        throw new Error("Missing the required parameter 'healthFacilityPasswordRequest' when calling changePasswordUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['Authorization', 'X-HIP-ID'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/health/facility/change/password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAadhaarAccountUsingPOST1 operation.
     * @callback module:api/HealthFacilityApi~createAadhaarAccountUsingPOST1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAccountJwtResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate Health ID card SVG
     * @param {module:model/CreateAccountWithPreVerifiedAadhaar} accountRequest accountRequest
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage = 'en-US')] 
     * @param {module:api/HealthFacilityApi~createAadhaarAccountUsingPOST1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAccountJwtResponse}
     */
    createAadhaarAccountUsingPOST1(accountRequest, opts, callback) {
      opts = opts || {};
      let postBody = accountRequest;
      // verify the required parameter 'accountRequest' is set
      if (accountRequest === undefined || accountRequest === null) {
        throw new Error("Missing the required parameter 'accountRequest' when calling createAadhaarAccountUsingPOST1");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['Authorization', 'X-HIP-ID'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = CreateAccountJwtResponse;
      return this.apiClient.callApi(
        '/v1/health/facility/createHealthIdWithPreVerified', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the generateFacilityOTPUsingPOST operation.
     * @callback module:api/HealthFacilityApi~generateFacilityOTPUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TxnResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate health hacility OTP on registrered mobile number
     * Generate health facility OTP on registrered mobile number
     * @param {String} xToken Auth Token
     * @param {module:model/AadharOtpGenerateRequestPayLoad} generateOtpRequest generateOtpRequest
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage = 'en-US')] 
     * @param {module:api/HealthFacilityApi~generateFacilityOTPUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TxnResponse}
     */
    generateFacilityOTPUsingPOST(xToken, generateOtpRequest, opts, callback) {
      opts = opts || {};
      let postBody = generateOtpRequest;
      // verify the required parameter 'xToken' is set
      if (xToken === undefined || xToken === null) {
        throw new Error("Missing the required parameter 'xToken' when calling generateFacilityOTPUsingPOST");
      }
      // verify the required parameter 'generateOtpRequest' is set
      if (generateOtpRequest === undefined || generateOtpRequest === null) {
        throw new Error("Missing the required parameter 'generateOtpRequest' when calling generateFacilityOTPUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage'],
        'X-Token': xToken
      };
      let formParams = {
      };

      let authNames = ['Authorization', 'X-HIP-ID'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = TxnResponse;
      return this.apiClient.callApi(
        '/v1/health/facility/generateOtp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the generatePasswordUsingPOST operation.
     * @callback module:api/HealthFacilityApi~generatePasswordUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generates password for heath facility id.
     * Generates password for heath facility id.
     * @param {module:model/HealthFacilityPasswordRequest} healthFacilityPasswordRequest healthFacilityPasswordRequest
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage = 'en-US')] 
     * @param {module:api/HealthFacilityApi~generatePasswordUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    generatePasswordUsingPOST(healthFacilityPasswordRequest, opts, callback) {
      opts = opts || {};
      let postBody = healthFacilityPasswordRequest;
      // verify the required parameter 'healthFacilityPasswordRequest' is set
      if (healthFacilityPasswordRequest === undefined || healthFacilityPasswordRequest === null) {
        throw new Error("Missing the required parameter 'healthFacilityPasswordRequest' when calling generatePasswordUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['Authorization', 'X-HIP-ID'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/health/facility/generate/password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the generateSvgCardUsingGET1 operation.
     * @callback module:api/HealthFacilityApi~generateSvgCardUsingGET1Callback
     * @param {String} error Error message, if any.
     * @param {Blob} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * generateSvgCard
     * @param {String} healthID Your health id
     * @param {String} xToken Auth Token
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage = 'en-US')] 
     * @param {module:api/HealthFacilityApi~generateSvgCardUsingGET1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Blob}
     */
    generateSvgCardUsingGET1(healthID, xToken, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'healthID' is set
      if (healthID === undefined || healthID === null) {
        throw new Error("Missing the required parameter 'healthID' when calling generateSvgCardUsingGET1");
      }
      // verify the required parameter 'xToken' is set
      if (xToken === undefined || xToken === null) {
        throw new Error("Missing the required parameter 'xToken' when calling generateSvgCardUsingGET1");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage'],
        'Health-ID': healthID,
        'X-Token': xToken
      };
      let formParams = {
      };

      let authNames = ['Authorization', 'X-HIP-ID'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = 'Blob';
      return this.apiClient.callApi(
        '/v1/health/facility/getSvgCard', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resetPasswordUsingPOST operation.
     * @callback module:api/HealthFacilityApi~resetPasswordUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset password for heath facility id.
     * Reset password for heath facility id.
     * @param {module:model/HealthFacilityPasswordRequest} healthFacilityPasswordRequest healthFacilityPasswordRequest
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage = 'en-US')] 
     * @param {module:api/HealthFacilityApi~resetPasswordUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    resetPasswordUsingPOST(healthFacilityPasswordRequest, opts, callback) {
      opts = opts || {};
      let postBody = healthFacilityPasswordRequest;
      // verify the required parameter 'healthFacilityPasswordRequest' is set
      if (healthFacilityPasswordRequest === undefined || healthFacilityPasswordRequest === null) {
        throw new Error("Missing the required parameter 'healthFacilityPasswordRequest' when calling resetPasswordUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['Authorization', 'X-HIP-ID'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/health/facility/reset/password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
