/**
 * Health ID Service
 * It is important to standardize the process of identification of an individual across healthcare providers, to ensure that the created medical records are issued to the right individual or accessed by a Health Information User through appropriate consent.  In order to issue a Health ID to an individual, one only needs basic demographic details like Name, Year of Birth, Gender. In addition, citizens should be able to update contact information easily.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AuthAccountAadhaarBioRequest from '../model/AuthAccountAadhaarBioRequest';
import AuthAccountAadhaarOTPRequest from '../model/AuthAccountAadhaarOTPRequest';
import AuthAccountMobileOTPRequest from '../model/AuthAccountMobileOTPRequest';
import AuthAccountWithDemographicsRequest from '../model/AuthAccountWithDemographicsRequest';
import AuthInitRequest from '../model/AuthInitRequest';
import AuthMobileOTPRequest from '../model/AuthMobileOTPRequest';
import AuthWithMobileTxnAndUserData from '../model/AuthWithMobileTxnAndUserData';
import AuthWithPasswordRequest from '../model/AuthWithPasswordRequest';
import JwtRequest from '../model/JwtRequest';
import JwtResponse from '../model/JwtResponse';
import ResendOTPRequest from '../model/ResendOTPRequest';
import TxnResponse from '../model/TxnResponse';

/**
* Authentication service.
* @module api/AuthenticationApi
* @version 1.0
*/
export default class AuthenticationApi {

    /**
    * Constructs a new AuthenticationApi. 
    * @alias module:api/AuthenticationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the authAccountPasswordRequestUsingPOST operation.
     * @callback module:api/AuthenticationApi~authAccountPasswordRequestUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JwtResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Authentication with PASSWORD based auth transaction.
     * @param {module:model/AuthWithPasswordRequest} authenticationRequest authenticationRequest
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage = 'en-US')] 
     * @param {module:api/AuthenticationApi~authAccountPasswordRequestUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JwtResponse}
     */
    authAccountPasswordRequestUsingPOST(authenticationRequest, opts, callback) {
      opts = opts || {};
      let postBody = authenticationRequest;
      // verify the required parameter 'authenticationRequest' is set
      if (authenticationRequest === undefined || authenticationRequest === null) {
        throw new Error("Missing the required parameter 'authenticationRequest' when calling authAccountPasswordRequestUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['Authorization', 'X-HIP-ID'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = JwtResponse;
      return this.apiClient.callApi(
        '/v1/auth/confirmWithPassword', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authWithMobileTokenUsingPOST operation.
     * @callback module:api/AuthenticationApi~authWithMobileTokenUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JwtResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Authenticate using verified Mobile Number and user data
     * @param {module:model/AuthWithMobileTxnAndUserData} authRequest authRequest
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage = 'en-US')] 
     * @param {module:api/AuthenticationApi~authWithMobileTokenUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JwtResponse}
     */
    authWithMobileTokenUsingPOST(authRequest, opts, callback) {
      opts = opts || {};
      let postBody = authRequest;
      // verify the required parameter 'authRequest' is set
      if (authRequest === undefined || authRequest === null) {
        throw new Error("Missing the required parameter 'authRequest' when calling authWithMobileTokenUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['Authorization', 'X-HIP-ID'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = JwtResponse;
      return this.apiClient.callApi(
        '/v1/auth/authWithMobileToken', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authenticateUserUsingPOST operation.
     * @callback module:api/AuthenticationApi~authenticateUserUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TxnResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Authenticate request to generate Mobile OTP using Health ID number / Health ID
     * @param {module:model/AuthMobileOTPRequest} authRequest authRequest
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage = 'en-US')] 
     * @param {module:api/AuthenticationApi~authenticateUserUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TxnResponse}
     */
    authenticateUserUsingPOST(authRequest, opts, callback) {
      opts = opts || {};
      let postBody = authRequest;
      // verify the required parameter 'authRequest' is set
      if (authRequest === undefined || authRequest === null) {
        throw new Error("Missing the required parameter 'authRequest' when calling authenticateUserUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['Authorization', 'X-HIP-ID'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = TxnResponse;
      return this.apiClient.callApi(
        '/v1/auth/authWithMobile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authenticateWithPasswordUsingPOST operation.
     * @callback module:api/AuthenticationApi~authenticateWithPasswordUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JwtResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Authenticate using Health ID number / Health ID and password
     * @param {module:model/JwtRequest} authenticationRequest authenticationRequest
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage = 'en-US')] 
     * @param {module:api/AuthenticationApi~authenticateWithPasswordUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JwtResponse}
     */
    authenticateWithPasswordUsingPOST(authenticationRequest, opts, callback) {
      opts = opts || {};
      let postBody = authenticationRequest;
      // verify the required parameter 'authenticationRequest' is set
      if (authenticationRequest === undefined || authenticationRequest === null) {
        throw new Error("Missing the required parameter 'authenticationRequest' when calling authenticateWithPasswordUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['Authorization', 'X-HIP-ID'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = JwtResponse;
      return this.apiClient.callApi(
        '/v1/auth/authPassword', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the certUsingGET operation.
     * @callback module:api/AuthenticationApi~certUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Auth token public key.
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage = 'en-US')] 
     * @param {module:api/AuthenticationApi~certUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    certUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['Authorization', 'X-HIP-ID'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/auth/cert', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the confirmWithAadhaarBioUsingPOST operation.
     * @callback module:api/AuthenticationApi~confirmWithAadhaarBioUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JwtResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Authentication with Aadhaar Biometric based auth transaction.
     * @param {module:model/AuthAccountAadhaarBioRequest} authenticationRequest authenticationRequest
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage = 'en-US')] 
     * @param {module:api/AuthenticationApi~confirmWithAadhaarBioUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JwtResponse}
     */
    confirmWithAadhaarBioUsingPOST(authenticationRequest, opts, callback) {
      opts = opts || {};
      let postBody = authenticationRequest;
      // verify the required parameter 'authenticationRequest' is set
      if (authenticationRequest === undefined || authenticationRequest === null) {
        throw new Error("Missing the required parameter 'authenticationRequest' when calling confirmWithAadhaarBioUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['Authorization', 'X-HIP-ID'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = JwtResponse;
      return this.apiClient.callApi(
        '/v1/auth/confirmWithAadhaarBio', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the confirmWithAadhaarOtpUsingPOST operation.
     * @callback module:api/AuthenticationApi~confirmWithAadhaarOtpUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JwtResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Authentication with Aadhaar OTP based auth transaction.
     * @param {module:model/AuthAccountAadhaarOTPRequest} authenticationRequest authenticationRequest
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage = 'en-US')] 
     * @param {module:api/AuthenticationApi~confirmWithAadhaarOtpUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JwtResponse}
     */
    confirmWithAadhaarOtpUsingPOST(authenticationRequest, opts, callback) {
      opts = opts || {};
      let postBody = authenticationRequest;
      // verify the required parameter 'authenticationRequest' is set
      if (authenticationRequest === undefined || authenticationRequest === null) {
        throw new Error("Missing the required parameter 'authenticationRequest' when calling confirmWithAadhaarOtpUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['Authorization', 'X-HIP-ID'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = JwtResponse;
      return this.apiClient.callApi(
        '/v1/auth/confirmWithAadhaarOtp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the confirmWithDemographicsUsingPOST operation.
     * @callback module:api/AuthenticationApi~confirmWithDemographicsUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Authenticate using demographic data of user.
     * @param {module:model/AuthAccountWithDemographicsRequest} authenticationRequest authenticationRequest
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage = 'en-US')] 
     * @param {module:api/AuthenticationApi~confirmWithDemographicsUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    confirmWithDemographicsUsingPOST(authenticationRequest, opts, callback) {
      opts = opts || {};
      let postBody = authenticationRequest;
      // verify the required parameter 'authenticationRequest' is set
      if (authenticationRequest === undefined || authenticationRequest === null) {
        throw new Error("Missing the required parameter 'authenticationRequest' when calling confirmWithDemographicsUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['Authorization', 'X-HIP-ID'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/auth/confirmWithDemographics', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the confirmWithMobileUsingPOST operation.
     * @callback module:api/AuthenticationApi~confirmWithMobileUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JwtResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Authentication with Mobile OTP based auth transaction.
     * @param {module:model/AuthAccountMobileOTPRequest} authenticationRequest authenticationRequest
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage = 'en-US')] 
     * @param {module:api/AuthenticationApi~confirmWithMobileUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JwtResponse}
     */
    confirmWithMobileUsingPOST(authenticationRequest, opts, callback) {
      opts = opts || {};
      let postBody = authenticationRequest;
      // verify the required parameter 'authenticationRequest' is set
      if (authenticationRequest === undefined || authenticationRequest === null) {
        throw new Error("Missing the required parameter 'authenticationRequest' when calling confirmWithMobileUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['Authorization', 'X-HIP-ID'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = JwtResponse;
      return this.apiClient.callApi(
        '/v1/auth/confirmWithMobileOTP', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the initiateAuthUsingPOST operation.
     * @callback module:api/AuthenticationApi~initiateAuthUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TxnResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiate authentication process for given Health ID
     * @param {module:model/AuthInitRequest} authRequest authRequest
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage = 'en-US')] 
     * @param {module:api/AuthenticationApi~initiateAuthUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TxnResponse}
     */
    initiateAuthUsingPOST(authRequest, opts, callback) {
      opts = opts || {};
      let postBody = authRequest;
      // verify the required parameter 'authRequest' is set
      if (authRequest === undefined || authRequest === null) {
        throw new Error("Missing the required parameter 'authRequest' when calling initiateAuthUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['Authorization', 'X-HIP-ID'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = TxnResponse;
      return this.apiClient.callApi(
        '/v1/auth/init', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resendAuthMobileOTPUsingPOST operation.
     * @callback module:api/AuthenticationApi~resendAuthMobileOTPUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {Boolean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resend Aadhaar/Mobile OTP for Authentication Transaction.
     * @param {module:model/ResendOTPRequest} resendOtpRequest resendOtpRequest
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage = 'en-US')] 
     * @param {module:api/AuthenticationApi~resendAuthMobileOTPUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Boolean}
     */
    resendAuthMobileOTPUsingPOST(resendOtpRequest, opts, callback) {
      opts = opts || {};
      let postBody = resendOtpRequest;
      // verify the required parameter 'resendOtpRequest' is set
      if (resendOtpRequest === undefined || resendOtpRequest === null) {
        throw new Error("Missing the required parameter 'resendOtpRequest' when calling resendAuthMobileOTPUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['Authorization', 'X-HIP-ID'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/v1/auth/resendAuthOTP', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
