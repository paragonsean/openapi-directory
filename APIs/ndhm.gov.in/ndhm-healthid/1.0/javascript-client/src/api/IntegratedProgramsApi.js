/**
 * Health ID Service
 * It is important to standardize the process of identification of an individual across healthcare providers, to ensure that the created medical records are issued to the right individual or accessed by a Health Information User through appropriate consent.  In order to issue a Health ID to an individual, one only needs basic demographic details like Name, Year of Birth, Gender. In addition, citizens should be able to update contact information easily.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AadharNumberRequestPayload from '../model/AadharNumberRequestPayload';
import AadharOtpGenerateRequestPayLoad from '../model/AadharOtpGenerateRequestPayLoad';
import CreateHIdDemoAuthRequest from '../model/CreateHIdDemoAuthRequest';
import CreateHealthIdOptRequest from '../model/CreateHealthIdOptRequest';
import CreateHidBiometricRequest from '../model/CreateHidBiometricRequest';
import CreateHidMobileRequest from '../model/CreateHidMobileRequest';
import CreateHidNotifyBenefitRequest from '../model/CreateHidNotifyBenefitRequest';
import GenerateMobileOTPRequest from '../model/GenerateMobileOTPRequest';
import HidBenefitDelinkRequestPayload from '../model/HidBenefitDelinkRequestPayload';
import HidBenefitLinkedRequestPayload from '../model/HidBenefitLinkedRequestPayload';
import HidBenefitLinkedResponsePayload from '../model/HidBenefitLinkedResponsePayload';
import HidBenefitNameSearchRequest from '../model/HidBenefitNameSearchRequest';
import HidBenefitRequestPayload from '../model/HidBenefitRequestPayload';
import HidBenefitSearchResponsePayload from '../model/HidBenefitSearchResponsePayload';
import HidStatusRequestPayload from '../model/HidStatusRequestPayload';
import HidUpdateAccountRequest from '../model/HidUpdateAccountRequest';
import HidUpdateMobiletRequest from '../model/HidUpdateMobiletRequest';
import TxnResponse from '../model/TxnResponse';
import UserDTO from '../model/UserDTO';

/**
* IntegratedPrograms service.
* @module api/IntegratedProgramsApi
* @version 1.0
*/
export default class IntegratedProgramsApi {

    /**
    * Constructs a new IntegratedProgramsApi. 
    * @alias module:api/IntegratedProgramsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createHealthIdByDemoAuthUsingPOST operation.
     * @callback module:api/IntegratedProgramsApi~createHealthIdByDemoAuthUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HidBenefitRequestPayload} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create health id using Aadhaar Demo Auth.
     * Create health id using Aadhaar Demo Auth.
     * @param {module:model/CreateHIdDemoAuthRequest} createHIdDemoAuthRequest createHIdDemoAuthRequest
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage = 'en-US')] 
     * @param {module:api/IntegratedProgramsApi~createHealthIdByDemoAuthUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HidBenefitRequestPayload}
     */
    createHealthIdByDemoAuthUsingPOST(createHIdDemoAuthRequest, opts, callback) {
      opts = opts || {};
      let postBody = createHIdDemoAuthRequest;
      // verify the required parameter 'createHIdDemoAuthRequest' is set
      if (createHIdDemoAuthRequest === undefined || createHIdDemoAuthRequest === null) {
        throw new Error("Missing the required parameter 'createHIdDemoAuthRequest' when calling createHealthIdByDemoAuthUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['Authorization', 'X-HIP-ID'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = HidBenefitRequestPayload;
      return this.apiClient.callApi(
        '/v1/hid/benefit/createHealthId/demo/auth', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createHealthIdByMobileUsingPOST operation.
     * @callback module:api/IntegratedProgramsApi~createHealthIdByMobileUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TxnResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create health id using mobile Authentication.
     * Create health id using mobile Authentication.
     * @param {module:model/CreateHidMobileRequest} createHidMobileRequest createHidMobileRequest
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage = 'en-US')] 
     * @param {module:api/IntegratedProgramsApi~createHealthIdByMobileUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TxnResponse}
     */
    createHealthIdByMobileUsingPOST(createHidMobileRequest, opts, callback) {
      opts = opts || {};
      let postBody = createHidMobileRequest;
      // verify the required parameter 'createHidMobileRequest' is set
      if (createHidMobileRequest === undefined || createHidMobileRequest === null) {
        throw new Error("Missing the required parameter 'createHidMobileRequest' when calling createHealthIdByMobileUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['Authorization', 'X-HIP-ID'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = TxnResponse;
      return this.apiClient.callApi(
        '/v1/hid/benefit/mobile/createHealthId', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the delinkHidBenefitUsingPOST operation.
     * @callback module:api/IntegratedProgramsApi~delinkHidBenefitUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HidBenefitLinkedResponsePayload} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * De-Linked with hid.
     * De-Linked with hid.
     * @param {module:model/HidBenefitDelinkRequestPayload} hidBenefitLinkedRequestPayload hidBenefitLinkedRequestPayload
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage = 'en-US')] 
     * @param {module:api/IntegratedProgramsApi~delinkHidBenefitUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HidBenefitLinkedResponsePayload}
     */
    delinkHidBenefitUsingPOST(hidBenefitLinkedRequestPayload, opts, callback) {
      opts = opts || {};
      let postBody = hidBenefitLinkedRequestPayload;
      // verify the required parameter 'hidBenefitLinkedRequestPayload' is set
      if (hidBenefitLinkedRequestPayload === undefined || hidBenefitLinkedRequestPayload === null) {
        throw new Error("Missing the required parameter 'hidBenefitLinkedRequestPayload' when calling delinkHidBenefitUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['Authorization', 'X-HIP-ID'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = HidBenefitLinkedResponsePayload;
      return this.apiClient.callApi(
        '/v1/hid/benefit/delink', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findByAadharUsingPOST operation.
     * @callback module:api/IntegratedProgramsApi~findByAadharUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search health id number using aadhar or aadhar token.
     * Search health id number using aadhar or aadhar token.
     * @param {module:model/AadharNumberRequestPayload} aadharNumberRequestPayload aadharNumberRequestPayload
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage = 'en-US')] 
     * @param {module:api/IntegratedProgramsApi~findByAadharUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    findByAadharUsingPOST(aadharNumberRequestPayload, opts, callback) {
      opts = opts || {};
      let postBody = aadharNumberRequestPayload;
      // verify the required parameter 'aadharNumberRequestPayload' is set
      if (aadharNumberRequestPayload === undefined || aadharNumberRequestPayload === null) {
        throw new Error("Missing the required parameter 'aadharNumberRequestPayload' when calling findByAadharUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['Authorization', 'X-HIP-ID'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/v1/hid/benefit/search/aadhaar', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findByHealthIdUsingPOST operation.
     * @callback module:api/IntegratedProgramsApi~findByHealthIdUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/HidBenefitSearchResponsePayload>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search benefit using health id number.
     * Search benefit using health id number
     * @param {module:model/HidBenefitNameSearchRequest} searchRequest searchRequest
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage = 'en-US')] 
     * @param {module:api/IntegratedProgramsApi~findByHealthIdUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/HidBenefitSearchResponsePayload>}
     */
    findByHealthIdUsingPOST(searchRequest, opts, callback) {
      opts = opts || {};
      let postBody = searchRequest;
      // verify the required parameter 'searchRequest' is set
      if (searchRequest === undefined || searchRequest === null) {
        throw new Error("Missing the required parameter 'searchRequest' when calling findByHealthIdUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['Authorization', 'X-HIP-ID'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = [HidBenefitSearchResponsePayload];
      return this.apiClient.callApi(
        '/v1/hid/benefit/search/healthIdNumber', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the generateAadharOTPUsingPOST2 operation.
     * @callback module:api/IntegratedProgramsApi~generateAadharOTPUsingPOST2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/TxnResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate Aadhaar OTP on registrered mobile number
     * Generate Aadhaar OTP on registrered mobile number
     * @param {module:model/AadharOtpGenerateRequestPayLoad} generateOtpRequest generateOtpRequest
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage = 'en-US')] 
     * @param {module:api/IntegratedProgramsApi~generateAadharOTPUsingPOST2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TxnResponse}
     */
    generateAadharOTPUsingPOST2(generateOtpRequest, opts, callback) {
      opts = opts || {};
      let postBody = generateOtpRequest;
      // verify the required parameter 'generateOtpRequest' is set
      if (generateOtpRequest === undefined || generateOtpRequest === null) {
        throw new Error("Missing the required parameter 'generateOtpRequest' when calling generateAadharOTPUsingPOST2");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['Authorization', 'X-HIP-ID'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = TxnResponse;
      return this.apiClient.callApi(
        '/v1/hid/benefit/aadhaar/generateOtp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the generateMobileOtpUsingPOST operation.
     * @callback module:api/IntegratedProgramsApi~generateMobileOtpUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TxnResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate mobile OTP on registrered mobile number
     * Generate mobile OTP on registrered mobile number
     * @param {module:model/GenerateMobileOTPRequest} generateOtpRequest generateOtpRequest
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage = 'en-US')] 
     * @param {module:api/IntegratedProgramsApi~generateMobileOtpUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TxnResponse}
     */
    generateMobileOtpUsingPOST(generateOtpRequest, opts, callback) {
      opts = opts || {};
      let postBody = generateOtpRequest;
      // verify the required parameter 'generateOtpRequest' is set
      if (generateOtpRequest === undefined || generateOtpRequest === null) {
        throw new Error("Missing the required parameter 'generateOtpRequest' when calling generateMobileOtpUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['Authorization', 'X-HIP-ID'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = TxnResponse;
      return this.apiClient.callApi(
        '/v1/hid/benefit/mobile/generateOtp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the linkHidBenefitUsingPOST operation.
     * @callback module:api/IntegratedProgramsApi~linkHidBenefitUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HidBenefitLinkedResponsePayload} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Linked with hid.
     * Linked with hid.
     * @param {module:model/HidBenefitLinkedRequestPayload} hidBenefitLinkedRequestPayload hidBenefitLinkedRequestPayload
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage = 'en-US')] 
     * @param {module:api/IntegratedProgramsApi~linkHidBenefitUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HidBenefitLinkedResponsePayload}
     */
    linkHidBenefitUsingPOST(hidBenefitLinkedRequestPayload, opts, callback) {
      opts = opts || {};
      let postBody = hidBenefitLinkedRequestPayload;
      // verify the required parameter 'hidBenefitLinkedRequestPayload' is set
      if (hidBenefitLinkedRequestPayload === undefined || hidBenefitLinkedRequestPayload === null) {
        throw new Error("Missing the required parameter 'hidBenefitLinkedRequestPayload' when calling linkHidBenefitUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['Authorization', 'X-HIP-ID'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = HidBenefitLinkedResponsePayload;
      return this.apiClient.callApi(
        '/v1/hid/benefit/link', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notifyBenefitUsingPOST operation.
     * @callback module:api/IntegratedProgramsApi~notifyBenefitUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HidBenefitRequestPayload} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create health id using notify Benefit.
     * Create health id using notify Benefit.
     * @param {module:model/CreateHidNotifyBenefitRequest} createHidNotifyBenefitRequest createHidNotifyBenefitRequest
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage = 'en-US')] 
     * @param {module:api/IntegratedProgramsApi~notifyBenefitUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HidBenefitRequestPayload}
     */
    notifyBenefitUsingPOST(createHidNotifyBenefitRequest, opts, callback) {
      opts = opts || {};
      let postBody = createHidNotifyBenefitRequest;
      // verify the required parameter 'createHidNotifyBenefitRequest' is set
      if (createHidNotifyBenefitRequest === undefined || createHidNotifyBenefitRequest === null) {
        throw new Error("Missing the required parameter 'createHidNotifyBenefitRequest' when calling notifyBenefitUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['Authorization', 'X-HIP-ID'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = HidBenefitRequestPayload;
      return this.apiClient.callApi(
        '/v1/hid/benefit/notify/benefit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAccountInformationUsingPOST1 operation.
     * @callback module:api/IntegratedProgramsApi~updateAccountInformationUsingPOST1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/UserDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update account information
     * @param {module:model/HidUpdateAccountRequest} request request
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage = 'en-US')] 
     * @param {module:api/IntegratedProgramsApi~updateAccountInformationUsingPOST1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserDTO}
     */
    updateAccountInformationUsingPOST1(request, opts, callback) {
      opts = opts || {};
      let postBody = request;
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling updateAccountInformationUsingPOST1");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['Authorization', 'X-HIP-ID'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = UserDTO;
      return this.apiClient.callApi(
        '/v1/hid/benefit/update/profile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMobileInformationUsingPOST operation.
     * @callback module:api/IntegratedProgramsApi~updateMobileInformationUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update mobile number for account.
     * @param {module:model/HidUpdateMobiletRequest} request request
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage = 'en-US')] 
     * @param {module:api/IntegratedProgramsApi~updateMobileInformationUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserDTO}
     */
    updateMobileInformationUsingPOST(request, opts, callback) {
      opts = opts || {};
      let postBody = request;
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling updateMobileInformationUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['Authorization', 'X-HIP-ID'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = UserDTO;
      return this.apiClient.callApi(
        '/v1/hid/benefit/update/mobile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateStatusUsingPOST operation.
     * @callback module:api/IntegratedProgramsApi~updateStatusUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {Boolean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update health id status .
     * Update health id status.
     * @param {module:model/HidStatusRequestPayload} generateOtpRequest generateOtpRequest
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage = 'en-US')] 
     * @param {module:api/IntegratedProgramsApi~updateStatusUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Boolean}
     */
    updateStatusUsingPOST(generateOtpRequest, opts, callback) {
      opts = opts || {};
      let postBody = generateOtpRequest;
      // verify the required parameter 'generateOtpRequest' is set
      if (generateOtpRequest === undefined || generateOtpRequest === null) {
        throw new Error("Missing the required parameter 'generateOtpRequest' when calling updateStatusUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['Authorization', 'X-HIP-ID'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/v1/hid/benefit/update/status', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the verifyAadharOtpUsingPOST operation.
     * @callback module:api/IntegratedProgramsApi~verifyAadharOtpUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HidBenefitRequestPayload} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create health id using Aadhaar Number Otp.
     * Create health id using Aadhaar number opt
     * @param {module:model/CreateHealthIdOptRequest} createHealthIdOptRequest createHealthIdOptRequest
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage = 'en-US')] 
     * @param {module:api/IntegratedProgramsApi~verifyAadharOtpUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HidBenefitRequestPayload}
     */
    verifyAadharOtpUsingPOST(createHealthIdOptRequest, opts, callback) {
      opts = opts || {};
      let postBody = createHealthIdOptRequest;
      // verify the required parameter 'createHealthIdOptRequest' is set
      if (createHealthIdOptRequest === undefined || createHealthIdOptRequest === null) {
        throw new Error("Missing the required parameter 'createHealthIdOptRequest' when calling verifyAadharOtpUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['Authorization', 'X-HIP-ID'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = HidBenefitRequestPayload;
      return this.apiClient.callApi(
        '/v1/hid/benefit/aadhaar/verifyAadharOtp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the verifyBioUsingPOST operation.
     * @callback module:api/IntegratedProgramsApi~verifyBioUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HidBenefitRequestPayload} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create health id using Biometric Authentication.
     * Create health id using Biometric Authentication.
     * @param {module:model/CreateHidBiometricRequest} createHidBiometricRequest createHidBiometricRequest
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage = 'en-US')] 
     * @param {module:api/IntegratedProgramsApi~verifyBioUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HidBenefitRequestPayload}
     */
    verifyBioUsingPOST(createHidBiometricRequest, opts, callback) {
      opts = opts || {};
      let postBody = createHidBiometricRequest;
      // verify the required parameter 'createHidBiometricRequest' is set
      if (createHidBiometricRequest === undefined || createHidBiometricRequest === null) {
        throw new Error("Missing the required parameter 'createHidBiometricRequest' when calling verifyBioUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['Authorization', 'X-HIP-ID'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = HidBenefitRequestPayload;
      return this.apiClient.callApi(
        '/v1/hid/benefit/aadhaar/verifyBio', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
