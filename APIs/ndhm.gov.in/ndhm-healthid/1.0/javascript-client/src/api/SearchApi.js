/**
 * Health ID Service
 * It is important to standardize the process of identification of an individual across healthcare providers, to ensure that the created medical records are issued to the right individual or accessed by a Health Information User through appropriate consent.  In order to issue a Health ID to an individual, one only needs basic demographic details like Name, Year of Birth, Gender. In addition, citizens should be able to update contact information easily.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import SearchByHealthIdRequest from '../model/SearchByHealthIdRequest';
import SearchByMobileRequest from '../model/SearchByMobileRequest';
import SearchResponseSingle from '../model/SearchResponseSingle';

/**
* Search service.
* @module api/SearchApi
* @version 1.0
*/
export default class SearchApi {

    /**
    * Constructs a new SearchApi. 
    * @alias module:api/SearchApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the searchUserByAccountUsingPOST operation.
     * @callback module:api/SearchApi~searchUserByAccountUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchResponseSingle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search a user by Health ID Number.
     * @param {module:model/SearchByHealthIdRequest} searchRequest searchRequest
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage = 'en-US')] 
     * @param {module:api/SearchApi~searchUserByAccountUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchResponseSingle}
     */
    searchUserByAccountUsingPOST(searchRequest, opts, callback) {
      opts = opts || {};
      let postBody = searchRequest;
      // verify the required parameter 'searchRequest' is set
      if (searchRequest === undefined || searchRequest === null) {
        throw new Error("Missing the required parameter 'searchRequest' when calling searchUserByAccountUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['Authorization', 'X-HIP-ID'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = SearchResponseSingle;
      return this.apiClient.callApi(
        '/v1/search/searchByHealthId', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchUserByMobileUsingPOST operation.
     * @callback module:api/SearchApi~searchUserByMobileUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchResponseSingle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search users with a mobile number.
     * @param {module:model/SearchByMobileRequest} searchRequest searchRequest
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage = 'en-US')] 
     * @param {module:api/SearchApi~searchUserByMobileUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchResponseSingle}
     */
    searchUserByMobileUsingPOST(searchRequest, opts, callback) {
      opts = opts || {};
      let postBody = searchRequest;
      // verify the required parameter 'searchRequest' is set
      if (searchRequest === undefined || searchRequest === null) {
        throw new Error("Missing the required parameter 'searchRequest' when calling searchUserByMobileUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['Authorization', 'X-HIP-ID'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = SearchResponseSingle;
      return this.apiClient.callApi(
        '/v1/search/searchByMobile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchUserByUseridUsingPOST operation.
     * @callback module:api/SearchApi~searchUserByUseridUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search a user by Health IDs.
     * @param {module:model/SearchByHealthIdRequest} searchDTO searchDTO
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage = 'en-US')] 
     * @param {module:api/SearchApi~searchUserByUseridUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    searchUserByUseridUsingPOST(searchDTO, opts, callback) {
      opts = opts || {};
      let postBody = searchDTO;
      // verify the required parameter 'searchDTO' is set
      if (searchDTO === undefined || searchDTO === null) {
        throw new Error("Missing the required parameter 'searchDTO' when calling searchUserByUseridUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['Authorization', 'X-HIP-ID'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/search/existsByHealthId', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
