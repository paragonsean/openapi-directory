/**
 * Health ID Service
 * It is important to standardize the process of identification of an individual across healthcare providers, to ensure that the created medical records are issued to the right individual or accessed by a Health Information User through appropriate consent.  In order to issue a Health ID to an individual, one only needs basic demographic details like Name, Year of Birth, Gender. In addition, citizens should be able to update contact information easily.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HidChangePasswordRequestPayload from '../model/HidChangePasswordRequestPayload';
import HidOtpRequestPaylaod from '../model/HidOtpRequestPaylaod';
import TxnResponse from '../model/TxnResponse';
import UpdateAccountRequest from '../model/UpdateAccountRequest';
import UserDTO from '../model/UserDTO';
import ValidateTokenRequest from '../model/ValidateTokenRequest';
import VerifyAadhaarOtp from '../model/VerifyAadhaarOtp';

/**
* Profile service.
* @module api/ProfileApi
* @version 1.0
*/
export default class ProfileApi {

    /**
    * Constructs a new ProfileApi. 
    * @alias module:api/ProfileApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the changePasswordViaAadharUsingPOST operation.
     * @callback module:api/ProfileApi~changePasswordViaAadharUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change password via Aadhar for heath id.
     * Change password via Aadhar for heath id.
     * @param {String} xToken Auth Token
     * @param {module:model/HidOtpRequestPaylaod} hidOtpRequestPaylaod hidOtpRequestPaylaod
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage = 'en-US')] 
     * @param {module:api/ProfileApi~changePasswordViaAadharUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    changePasswordViaAadharUsingPOST(xToken, hidOtpRequestPaylaod, opts, callback) {
      opts = opts || {};
      let postBody = hidOtpRequestPaylaod;
      // verify the required parameter 'xToken' is set
      if (xToken === undefined || xToken === null) {
        throw new Error("Missing the required parameter 'xToken' when calling changePasswordViaAadharUsingPOST");
      }
      // verify the required parameter 'hidOtpRequestPaylaod' is set
      if (hidOtpRequestPaylaod === undefined || hidOtpRequestPaylaod === null) {
        throw new Error("Missing the required parameter 'hidOtpRequestPaylaod' when calling changePasswordViaAadharUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage'],
        'X-Token': xToken
      };
      let formParams = {
      };

      let authNames = ['Authorization', 'X-HIP-ID'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/account/change/passwd/byAadhaar', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the changePasswordViaMobileUsingPOST operation.
     * @callback module:api/ProfileApi~changePasswordViaMobileUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change password via mobile for heath id.
     * Change password via mobile for heath id.
     * @param {String} xToken Auth Token
     * @param {module:model/HidOtpRequestPaylaod} hidOtpRequestPaylaod hidOtpRequestPaylaod
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage = 'en-US')] 
     * @param {module:api/ProfileApi~changePasswordViaMobileUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    changePasswordViaMobileUsingPOST(xToken, hidOtpRequestPaylaod, opts, callback) {
      opts = opts || {};
      let postBody = hidOtpRequestPaylaod;
      // verify the required parameter 'xToken' is set
      if (xToken === undefined || xToken === null) {
        throw new Error("Missing the required parameter 'xToken' when calling changePasswordViaMobileUsingPOST");
      }
      // verify the required parameter 'hidOtpRequestPaylaod' is set
      if (hidOtpRequestPaylaod === undefined || hidOtpRequestPaylaod === null) {
        throw new Error("Missing the required parameter 'hidOtpRequestPaylaod' when calling changePasswordViaMobileUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage'],
        'X-Token': xToken
      };
      let formParams = {
      };

      let authNames = ['Authorization', 'X-HIP-ID'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/account/change/passwd/byMobile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the changePasswordViaUsingPOST operation.
     * @callback module:api/ProfileApi~changePasswordViaUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change password via password for heath id.
     * Change password via password for heath id.
     * @param {String} xToken Auth Token
     * @param {module:model/HidChangePasswordRequestPayload} healthFacilityPasswordRequest healthFacilityPasswordRequest
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage = 'en-US')] 
     * @param {module:api/ProfileApi~changePasswordViaUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    changePasswordViaUsingPOST(xToken, healthFacilityPasswordRequest, opts, callback) {
      opts = opts || {};
      let postBody = healthFacilityPasswordRequest;
      // verify the required parameter 'xToken' is set
      if (xToken === undefined || xToken === null) {
        throw new Error("Missing the required parameter 'xToken' when calling changePasswordViaUsingPOST");
      }
      // verify the required parameter 'healthFacilityPasswordRequest' is set
      if (healthFacilityPasswordRequest === undefined || healthFacilityPasswordRequest === null) {
        throw new Error("Missing the required parameter 'healthFacilityPasswordRequest' when calling changePasswordViaUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage'],
        'X-Token': xToken
      };
      let formParams = {
      };

      let authNames = ['Authorization', 'X-HIP-ID'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/account/change/password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAccountUsingDELETE operation.
     * @callback module:api/ProfileApi~deleteAccountUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param {Boolean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete account
     * @param {String} xToken Auth Token
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage = 'en-US')] 
     * @param {module:api/ProfileApi~deleteAccountUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Boolean}
     */
    deleteAccountUsingDELETE(xToken, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xToken' is set
      if (xToken === undefined || xToken === null) {
        throw new Error("Missing the required parameter 'xToken' when calling deleteAccountUsingDELETE");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage'],
        'X-Token': xToken
      };
      let formParams = {
      };

      let authNames = ['Authorization', 'X-HIP-ID'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/v1/account/profile', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the generateAadharOTPUsingGET operation.
     * @callback module:api/ProfileApi~generateAadharOTPUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate Aadhaar OTP on registrered mobile number.
     * Generate Aadhaar OTP on registrered mobile number.
     * @param {String} xToken Auth Token
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage = 'en-US')] 
     * @param {module:api/ProfileApi~generateAadharOTPUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    generateAadharOTPUsingGET(xToken, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xToken' is set
      if (xToken === undefined || xToken === null) {
        throw new Error("Missing the required parameter 'xToken' when calling generateAadharOTPUsingGET");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage'],
        'X-Token': xToken
      };
      let formParams = {
      };

      let authNames = ['Authorization', 'X-HIP-ID'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/account/change/passwd/generateAadhaarOTP', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the generateCardUsingGET operation.
     * @callback module:api/ProfileApi~generateCardUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate Health ID card in PDF format
     * @param {String} xToken Auth Token
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage = 'en-US')] 
     * @param {module:api/ProfileApi~generateCardUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserDTO}
     */
    generateCardUsingGET(xToken, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xToken' is set
      if (xToken === undefined || xToken === null) {
        throw new Error("Missing the required parameter 'xToken' when calling generateCardUsingGET");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage'],
        'X-Token': xToken
      };
      let formParams = {
      };

      let authNames = ['Authorization', 'X-HIP-ID'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = UserDTO;
      return this.apiClient.callApi(
        '/v1/account/getCard', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the generateMobileOTPUsingGET operation.
     * @callback module:api/ProfileApi~generateMobileOTPUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate Mobile OTP to start registration.
     * Generate Mobile OTP to start registration.
     * @param {String} xToken Auth Token
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage = 'en-US')] 
     * @param {module:api/ProfileApi~generateMobileOTPUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    generateMobileOTPUsingGET(xToken, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xToken' is set
      if (xToken === undefined || xToken === null) {
        throw new Error("Missing the required parameter 'xToken' when calling generateMobileOTPUsingGET");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage'],
        'X-Token': xToken
      };
      let formParams = {
      };

      let authNames = ['Authorization', 'X-HIP-ID'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/account/change/passwd/generateMobileOTP', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the generatePngCardUsingGET operation.
     * @callback module:api/ProfileApi~generatePngCardUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate Health ID card PNG
     * @param {String} xToken Auth Token
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage = 'en-US')] 
     * @param {module:api/ProfileApi~generatePngCardUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserDTO}
     */
    generatePngCardUsingGET(xToken, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xToken' is set
      if (xToken === undefined || xToken === null) {
        throw new Error("Missing the required parameter 'xToken' when calling generatePngCardUsingGET");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage'],
        'X-Token': xToken
      };
      let formParams = {
      };

      let authNames = ['Authorization', 'X-HIP-ID'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = UserDTO;
      return this.apiClient.callApi(
        '/v1/account/getPngCard', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the generateSvgCardUsingGET operation.
     * @callback module:api/ProfileApi~generateSvgCardUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate Health ID card SVG
     * @param {String} xToken Auth Token
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage = 'en-US')] 
     * @param {module:api/ProfileApi~generateSvgCardUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserDTO}
     */
    generateSvgCardUsingGET(xToken, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xToken' is set
      if (xToken === undefined || xToken === null) {
        throw new Error("Missing the required parameter 'xToken' when calling generateSvgCardUsingGET");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage'],
        'X-Token': xToken
      };
      let formParams = {
      };

      let authNames = ['Authorization', 'X-HIP-ID'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = UserDTO;
      return this.apiClient.callApi(
        '/v1/account/getSvgCard', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the generatereKycAadharOTPUsingPOST operation.
     * @callback module:api/ProfileApi~generatereKycAadharOTPUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TxnResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate Aadhaar OTP on registrered for link account with aadhar number
     * Generate Aadhaar OTP on registrered for link account with aadhar number
     * @param {String} xToken Auth Token
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage = 'en-US')] 
     * @param {module:api/ProfileApi~generatereKycAadharOTPUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TxnResponse}
     */
    generatereKycAadharOTPUsingPOST(xToken, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xToken' is set
      if (xToken === undefined || xToken === null) {
        throw new Error("Missing the required parameter 'xToken' when calling generatereKycAadharOTPUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage'],
        'X-Token': xToken
      };
      let formParams = {
      };

      let authNames = ['Authorization', 'X-HIP-ID'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TxnResponse;
      return this.apiClient.callApi(
        '/v1/account/aadhaar/generateOTP', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountInformationUsingGET operation.
     * @callback module:api/ProfileApi~getAccountInformationUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get account information.
     * @param {String} xToken Auth Token
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage = 'en-US')] 
     * @param {module:api/ProfileApi~getAccountInformationUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserDTO}
     */
    getAccountInformationUsingGET(xToken, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xToken' is set
      if (xToken === undefined || xToken === null) {
        throw new Error("Missing the required parameter 'xToken' when calling getAccountInformationUsingGET");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage'],
        'X-Token': xToken
      };
      let formParams = {
      };

      let authNames = ['Authorization', 'X-HIP-ID'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = UserDTO;
      return this.apiClient.callApi(
        '/v1/account/profile', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBenefitsUsingGET operation.
     * @callback module:api/ProfileApi~getBenefitsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get List of Benefits associated with HealthID.
     * @param {String} xToken Auth Token
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage = 'en-US')] 
     * @param {module:api/ProfileApi~getBenefitsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserDTO}
     */
    getBenefitsUsingGET(xToken, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xToken' is set
      if (xToken === undefined || xToken === null) {
        throw new Error("Missing the required parameter 'xToken' when calling getBenefitsUsingGET");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage'],
        'X-Token': xToken
      };
      let formParams = {
      };

      let authNames = ['Authorization', 'X-HIP-ID'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = UserDTO;
      return this.apiClient.callApi(
        '/v1/account/benefits', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getQrCodeUsingGET operation.
     * @callback module:api/ProfileApi~getQrCodeUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Blob} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Quick Response code in PNG format for this account.
     * @param {String} xToken Auth Token
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage = 'en-US')] 
     * @param {module:api/ProfileApi~getQrCodeUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Blob}
     */
    getQrCodeUsingGET(xToken, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xToken' is set
      if (xToken === undefined || xToken === null) {
        throw new Error("Missing the required parameter 'xToken' when calling getQrCodeUsingGET");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage'],
        'X-Token': xToken
      };
      let formParams = {
      };

      let authNames = ['Authorization', 'X-HIP-ID'];
      let contentTypes = [];
      let accepts = ['*/*', 'image/png'];
      let returnType = 'Blob';
      return this.apiClient.callApi(
        '/v1/account/qrCode', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAccountInformationUsingPOST operation.
     * @callback module:api/ProfileApi~updateAccountInformationUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update account information
     * @param {String} xToken Auth Token
     * @param {module:model/UpdateAccountRequest} request request
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage = 'en-US')] 
     * @param {module:api/ProfileApi~updateAccountInformationUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserDTO}
     */
    updateAccountInformationUsingPOST(xToken, request, opts, callback) {
      opts = opts || {};
      let postBody = request;
      // verify the required parameter 'xToken' is set
      if (xToken === undefined || xToken === null) {
        throw new Error("Missing the required parameter 'xToken' when calling updateAccountInformationUsingPOST");
      }
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling updateAccountInformationUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage'],
        'X-Token': xToken
      };
      let formParams = {
      };

      let authNames = ['Authorization', 'X-HIP-ID'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = UserDTO;
      return this.apiClient.callApi(
        '/v1/account/profile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the validateTokenUsingPOST operation.
     * @callback module:api/ProfileApi~validateTokenUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {Boolean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validate auth token
     * @param {module:model/ValidateTokenRequest} request request
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage = 'en-US')] 
     * @param {module:api/ProfileApi~validateTokenUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Boolean}
     */
    validateTokenUsingPOST(request, opts, callback) {
      opts = opts || {};
      let postBody = request;
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling validateTokenUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['Authorization', 'X-HIP-ID'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/v1/account/token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the verifyAadharOTPOnlyUsingPOST1 operation.
     * @callback module:api/ProfileApi~verifyAadharOTPOnlyUsingPOST1Callback
     * @param {String} error Error message, if any.
     * @param {Boolean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify Aadhaar OTP to complete KYC/re-KYC verification.
     * Verify Aadhaar OTP to complete KYC/re-KYC verification
     * @param {String} xToken Auth Token
     * @param {module:model/VerifyAadhaarOtp} verifyAadhaarOtp verifyAadhaarOtp
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage = 'en-US')] 
     * @param {module:api/ProfileApi~verifyAadharOTPOnlyUsingPOST1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Boolean}
     */
    verifyAadharOTPOnlyUsingPOST1(xToken, verifyAadhaarOtp, opts, callback) {
      opts = opts || {};
      let postBody = verifyAadhaarOtp;
      // verify the required parameter 'xToken' is set
      if (xToken === undefined || xToken === null) {
        throw new Error("Missing the required parameter 'xToken' when calling verifyAadharOTPOnlyUsingPOST1");
      }
      // verify the required parameter 'verifyAadhaarOtp' is set
      if (verifyAadhaarOtp === undefined || verifyAadhaarOtp === null) {
        throw new Error("Missing the required parameter 'verifyAadhaarOtp' when calling verifyAadharOTPOnlyUsingPOST1");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage'],
        'X-Token': xToken
      };
      let formParams = {
      };

      let authNames = ['Authorization', 'X-HIP-ID'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/v1/account/aadhaar/verifyOTP', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
