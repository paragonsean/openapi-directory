/**
 * Health ID Service
 * It is important to standardize the process of identification of an individual across healthcare providers, to ensure that the created medical records are issued to the right individual or accessed by a Health Information User through appropriate consent.  In order to issue a Health ID to an individual, one only needs basic demographic details like Name, Year of Birth, Gender. In addition, citizens should be able to update contact information easily.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DistrictDTO from '../model/DistrictDTO';
import StatesDTO from '../model/StatesDTO';

/**
* Utility service.
* @module api/UtilityApi
* @version 1.0
*/
export default class UtilityApi {

    /**
    * Constructs a new UtilityApi. 
    * @alias module:api/UtilityApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getDistrictsInStateUsingGET operation.
     * @callback module:api/UtilityApi~getDistrictsInStateUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DistrictDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of districts in a given  State as per LGD.
     * @param {String} stateCode stateCode
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage = 'en-US')] 
     * @param {module:api/UtilityApi~getDistrictsInStateUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DistrictDTO>}
     */
    getDistrictsInStateUsingGET(stateCode, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'stateCode' is set
      if (stateCode === undefined || stateCode === null) {
        throw new Error("Missing the required parameter 'stateCode' when calling getDistrictsInStateUsingGET");
      }

      let pathParams = {
      };
      let queryParams = {
        'stateCode': stateCode
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['Authorization', 'X-HIP-ID'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [DistrictDTO];
      return this.apiClient.callApi(
        '/v1/ha/lgd/districts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStatesUsingGET operation.
     * @callback module:api/UtilityApi~getStatesUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/StatesDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of states as per LGD.
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage = 'en-US')] 
     * @param {module:api/UtilityApi~getStatesUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/StatesDTO>}
     */
    getStatesUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['Authorization', 'X-HIP-ID'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [StatesDTO];
      return this.apiClient.callApi(
        '/v1/ha/lgd/states', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
