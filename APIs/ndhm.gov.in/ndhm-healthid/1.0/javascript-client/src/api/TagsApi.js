/**
 * Health ID Service
 * It is important to standardize the process of identification of an individual across healthcare providers, to ensure that the created medical records are issued to the right individual or accessed by a Health Information User through appropriate consent.  In order to issue a Health ID to an individual, one only needs basic demographic details like Name, Year of Birth, Gender. In addition, citizens should be able to update contact information easily.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import TagRequest from '../model/TagRequest';

/**
* Tags service.
* @module api/TagsApi
* @version 1.0
*/
export default class TagsApi {

    /**
    * Constructs a new TagsApi. 
    * @alias module:api/TagsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addTagUsingPOST operation.
     * @callback module:api/TagsApi~addTagUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TagRequest>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add tag against HealthId.
     * @param {module:model/TagRequest} tagRequest tagRequest
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage = 'en-US')] 
     * @param {module:api/TagsApi~addTagUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TagRequest>}
     */
    addTagUsingPOST(tagRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagRequest;
      // verify the required parameter 'tagRequest' is set
      if (tagRequest === undefined || tagRequest === null) {
        throw new Error("Missing the required parameter 'tagRequest' when calling addTagUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['Authorization', 'X-HIP-ID'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = [TagRequest];
      return this.apiClient.callApi(
        '/v1/ha/tags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTagUsingDELETE operation.
     * @callback module:api/TagsApi~deleteTagUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TagRequest>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete tag against HealthId.
     * @param {module:model/TagRequest} tagRequest tagRequest
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage = 'en-US')] 
     * @param {module:api/TagsApi~deleteTagUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TagRequest>}
     */
    deleteTagUsingDELETE(tagRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagRequest;
      // verify the required parameter 'tagRequest' is set
      if (tagRequest === undefined || tagRequest === null) {
        throw new Error("Missing the required parameter 'tagRequest' when calling deleteTagUsingDELETE");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['Authorization', 'X-HIP-ID'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [TagRequest];
      return this.apiClient.callApi(
        '/v1/ha/tags', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTagsUsingGET operation.
     * @callback module:api/TagsApi~getTagsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of Tags against HealthID.
     * @param {String} xToken Auth Token
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage = 'en-US')] 
     * @param {module:api/TagsApi~getTagsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getTagsUsingGET(xToken, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xToken' is set
      if (xToken === undefined || xToken === null) {
        throw new Error("Missing the required parameter 'xToken' when calling getTagsUsingGET");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage'],
        'X-Token': xToken
      };
      let formParams = {
      };

      let authNames = ['Authorization', 'X-HIP-ID'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/ha/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
