/**
 * Health ID Service
 * It is important to standardize the process of identification of an individual across healthcare providers, to ensure that the created medical records are issued to the right individual or accessed by a Health Information User through appropriate consent.  In order to issue a Health ID to an individual, one only needs basic demographic details like Name, Year of Birth, Gender. In addition, citizens should be able to update contact information easily.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SearchResponseSingle model module.
 * @module model/SearchResponseSingle
 * @version 1.0
 */
class SearchResponseSingle {
    /**
     * Constructs a new <code>SearchResponseSingle</code>.
     * @alias module:model/SearchResponseSingle
     */
    constructor() { 
        
        SearchResponseSingle.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SearchResponseSingle</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SearchResponseSingle} obj Optional instance to populate.
     * @return {module:model/SearchResponseSingle} The populated <code>SearchResponseSingle</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SearchResponseSingle();

            if (data.hasOwnProperty('authMethods')) {
                obj['authMethods'] = ApiClient.convertToType(data['authMethods'], ['String']);
            }
            if (data.hasOwnProperty('healthId')) {
                obj['healthId'] = ApiClient.convertToType(data['healthId'], 'String');
            }
            if (data.hasOwnProperty('healthIdNumber')) {
                obj['healthIdNumber'] = ApiClient.convertToType(data['healthIdNumber'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SearchResponseSingle</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SearchResponseSingle</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['authMethods'])) {
            throw new Error("Expected the field `authMethods` to be an array in the JSON data but got " + data['authMethods']);
        }
        // ensure the json data is a string
        if (data['healthId'] && !(typeof data['healthId'] === 'string' || data['healthId'] instanceof String)) {
            throw new Error("Expected the field `healthId` to be a primitive type in the JSON string but got " + data['healthId']);
        }
        // ensure the json data is a string
        if (data['healthIdNumber'] && !(typeof data['healthIdNumber'] === 'string' || data['healthIdNumber'] instanceof String)) {
            throw new Error("Expected the field `healthIdNumber` to be a primitive type in the JSON string but got " + data['healthIdNumber']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/SearchResponseSingle.AuthMethodsEnum>} authMethods
 */
SearchResponseSingle.prototype['authMethods'] = undefined;

/**
 * @member {String} healthId
 */
SearchResponseSingle.prototype['healthId'] = undefined;

/**
 * @member {String} healthIdNumber
 */
SearchResponseSingle.prototype['healthIdNumber'] = undefined;

/**
 * @member {String} name
 */
SearchResponseSingle.prototype['name'] = undefined;

/**
 * @member {Object.<String, String>} tags
 */
SearchResponseSingle.prototype['tags'] = undefined;





/**
 * Allowed values for the <code>authMethods</code> property.
 * @enum {String}
 * @readonly
 */
SearchResponseSingle['AuthMethodsEnum'] = {

    /**
     * value: "AADHAAR_OTP"
     * @const
     */
    "AADHAAR_OTP": "AADHAAR_OTP",

    /**
     * value: "MOBILE_OTP"
     * @const
     */
    "MOBILE_OTP": "MOBILE_OTP",

    /**
     * value: "PASSWORD"
     * @const
     */
    "PASSWORD": "PASSWORD",

    /**
     * value: "DEMOGRAPHICS"
     * @const
     */
    "DEMOGRAPHICS": "DEMOGRAPHICS",

    /**
     * value: "AADHAAR_BIO"
     * @const
     */
    "AADHAAR_BIO": "AADHAAR_BIO"
};



export default SearchResponseSingle;

