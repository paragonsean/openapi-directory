/**
 * Health ID Service
 * It is important to standardize the process of identification of an individual across healthcare providers, to ensure that the created medical records are issued to the right individual or accessed by a Health Information User through appropriate consent.  In order to issue a Health ID to an individual, one only needs basic demographic details like Name, Year of Birth, Gender. In addition, citizens should be able to update contact information easily.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BenefitDTO model module.
 * @module model/BenefitDTO
 * @version 1.0
 */
class BenefitDTO {
    /**
     * Constructs a new <code>BenefitDTO</code>.
     * @alias module:model/BenefitDTO
     */
    constructor() { 
        
        BenefitDTO.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BenefitDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BenefitDTO} obj Optional instance to populate.
     * @return {module:model/BenefitDTO} The populated <code>BenefitDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BenefitDTO();

            if (data.hasOwnProperty('benefitId')) {
                obj['benefitId'] = ApiClient.convertToType(data['benefitId'], 'String');
            }
            if (data.hasOwnProperty('benefitName')) {
                obj['benefitName'] = ApiClient.convertToType(data['benefitName'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('linkageDate')) {
                obj['linkageDate'] = ApiClient.convertToType(data['linkageDate'], 'Date');
            }
            if (data.hasOwnProperty('programName')) {
                obj['programName'] = ApiClient.convertToType(data['programName'], 'String');
            }
            if (data.hasOwnProperty('validity')) {
                obj['validity'] = ApiClient.convertToType(data['validity'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BenefitDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BenefitDTO</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['benefitId'] && !(typeof data['benefitId'] === 'string' || data['benefitId'] instanceof String)) {
            throw new Error("Expected the field `benefitId` to be a primitive type in the JSON string but got " + data['benefitId']);
        }
        // ensure the json data is a string
        if (data['benefitName'] && !(typeof data['benefitName'] === 'string' || data['benefitName'] instanceof String)) {
            throw new Error("Expected the field `benefitName` to be a primitive type in the JSON string but got " + data['benefitName']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['programName'] && !(typeof data['programName'] === 'string' || data['programName'] instanceof String)) {
            throw new Error("Expected the field `programName` to be a primitive type in the JSON string but got " + data['programName']);
        }

        return true;
    }


}



/**
 * @member {String} benefitId
 */
BenefitDTO.prototype['benefitId'] = undefined;

/**
 * @member {String} benefitName
 */
BenefitDTO.prototype['benefitName'] = undefined;

/**
 * @member {String} description
 */
BenefitDTO.prototype['description'] = undefined;

/**
 * @member {Date} linkageDate
 */
BenefitDTO.prototype['linkageDate'] = undefined;

/**
 * @member {String} programName
 */
BenefitDTO.prototype['programName'] = undefined;

/**
 * @member {Date} validity
 */
BenefitDTO.prototype['validity'] = undefined;






export default BenefitDTO;

