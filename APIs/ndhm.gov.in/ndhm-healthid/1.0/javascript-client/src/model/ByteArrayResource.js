/**
 * Health ID Service
 * It is important to standardize the process of identification of an individual across healthcare providers, to ensure that the created medical records are issued to the right individual or accessed by a Health Information User through appropriate consent.  In order to issue a Health ID to an individual, one only needs basic demographic details like Name, Year of Birth, Gender. In addition, citizens should be able to update contact information easily.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import URL from './URL';

/**
 * The ByteArrayResource model module.
 * @module model/ByteArrayResource
 * @version 1.0
 */
class ByteArrayResource {
    /**
     * Constructs a new <code>ByteArrayResource</code>.
     * @alias module:model/ByteArrayResource
     */
    constructor() { 
        
        ByteArrayResource.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ByteArrayResource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ByteArrayResource} obj Optional instance to populate.
     * @return {module:model/ByteArrayResource} The populated <code>ByteArrayResource</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ByteArrayResource();

            if (data.hasOwnProperty('byteArray')) {
                obj['byteArray'] = ApiClient.convertToType(data['byteArray'], 'Blob');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('file')) {
                obj['file'] = File.constructFromObject(data['file']);
            }
            if (data.hasOwnProperty('filename')) {
                obj['filename'] = ApiClient.convertToType(data['filename'], 'String');
            }
            if (data.hasOwnProperty('inputStream')) {
                obj['inputStream'] = ApiClient.convertToType(data['inputStream'], Object);
            }
            if (data.hasOwnProperty('open')) {
                obj['open'] = ApiClient.convertToType(data['open'], 'Boolean');
            }
            if (data.hasOwnProperty('readable')) {
                obj['readable'] = ApiClient.convertToType(data['readable'], 'Boolean');
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = 'String'.constructFromObject(data['uri']);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = URL.constructFromObject(data['url']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ByteArrayResource</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ByteArrayResource</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `file`
        if (data['file']) { // data not null
          File.validateJSON(data['file']);
        }
        // ensure the json data is a string
        if (data['filename'] && !(typeof data['filename'] === 'string' || data['filename'] instanceof String)) {
            throw new Error("Expected the field `filename` to be a primitive type in the JSON string but got " + data['filename']);
        }
        // validate the optional field `uri`
        if (data['uri']) { // data not null
          String.validateJSON(data['uri']);
        }
        // validate the optional field `url`
        if (data['url']) { // data not null
          URL.validateJSON(data['url']);
        }

        return true;
    }


}



/**
 * @member {Blob} byteArray
 */
ByteArrayResource.prototype['byteArray'] = undefined;

/**
 * @member {String} description
 */
ByteArrayResource.prototype['description'] = undefined;

/**
 * @member {File} file
 */
ByteArrayResource.prototype['file'] = undefined;

/**
 * @member {String} filename
 */
ByteArrayResource.prototype['filename'] = undefined;

/**
 * @member {Object} inputStream
 */
ByteArrayResource.prototype['inputStream'] = undefined;

/**
 * @member {Boolean} open
 */
ByteArrayResource.prototype['open'] = undefined;

/**
 * @member {Boolean} readable
 */
ByteArrayResource.prototype['readable'] = undefined;

/**
 * @member {String} uri
 */
ByteArrayResource.prototype['uri'] = undefined;

/**
 * @member {module:model/URL} url
 */
ByteArrayResource.prototype['url'] = undefined;






export default ByteArrayResource;

