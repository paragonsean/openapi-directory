/**
 * Health ID Service
 * It is important to standardize the process of identification of an individual across healthcare providers, to ensure that the created medical records are issued to the right individual or accessed by a Health Information User through appropriate consent.  In order to issue a Health ID to an individual, one only needs basic demographic details like Name, Year of Birth, Gender. In addition, citizens should be able to update contact information easily.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateAccountJwtResponse model module.
 * @module model/CreateAccountJwtResponse
 * @version 1.0
 */
class CreateAccountJwtResponse {
    /**
     * Constructs a new <code>CreateAccountJwtResponse</code>.
     * @alias module:model/CreateAccountJwtResponse
     */
    constructor() { 
        
        CreateAccountJwtResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CreateAccountJwtResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateAccountJwtResponse} obj Optional instance to populate.
     * @return {module:model/CreateAccountJwtResponse} The populated <code>CreateAccountJwtResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateAccountJwtResponse();

            if (data.hasOwnProperty('authMethods')) {
                obj['authMethods'] = ApiClient.convertToType(data['authMethods'], ['String']);
            }
            if (data.hasOwnProperty('dayOfBirth')) {
                obj['dayOfBirth'] = ApiClient.convertToType(data['dayOfBirth'], 'String');
            }
            if (data.hasOwnProperty('districtCode')) {
                obj['districtCode'] = ApiClient.convertToType(data['districtCode'], 'String');
            }
            if (data.hasOwnProperty('districtName')) {
                obj['districtName'] = ApiClient.convertToType(data['districtName'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('firstName')) {
                obj['firstName'] = ApiClient.convertToType(data['firstName'], 'String');
            }
            if (data.hasOwnProperty('gender')) {
                obj['gender'] = ApiClient.convertToType(data['gender'], 'String');
            }
            if (data.hasOwnProperty('healthId')) {
                obj['healthId'] = ApiClient.convertToType(data['healthId'], 'String');
            }
            if (data.hasOwnProperty('healthIdNumber')) {
                obj['healthIdNumber'] = ApiClient.convertToType(data['healthIdNumber'], 'String');
            }
            if (data.hasOwnProperty('kycPhoto')) {
                obj['kycPhoto'] = ApiClient.convertToType(data['kycPhoto'], 'String');
            }
            if (data.hasOwnProperty('lastName')) {
                obj['lastName'] = ApiClient.convertToType(data['lastName'], 'String');
            }
            if (data.hasOwnProperty('middleName')) {
                obj['middleName'] = ApiClient.convertToType(data['middleName'], 'String');
            }
            if (data.hasOwnProperty('mobile')) {
                obj['mobile'] = ApiClient.convertToType(data['mobile'], 'String');
            }
            if (data.hasOwnProperty('monthOfBirth')) {
                obj['monthOfBirth'] = ApiClient.convertToType(data['monthOfBirth'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('new')) {
                obj['new'] = ApiClient.convertToType(data['new'], 'Boolean');
            }
            if (data.hasOwnProperty('stateCode')) {
                obj['stateCode'] = ApiClient.convertToType(data['stateCode'], 'String');
            }
            if (data.hasOwnProperty('stateName')) {
                obj['stateName'] = ApiClient.convertToType(data['stateName'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], {'String': 'String'});
            }
            if (data.hasOwnProperty('token')) {
                obj['token'] = ApiClient.convertToType(data['token'], 'String');
            }
            if (data.hasOwnProperty('yearOfBirth')) {
                obj['yearOfBirth'] = ApiClient.convertToType(data['yearOfBirth'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateAccountJwtResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateAccountJwtResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['authMethods'])) {
            throw new Error("Expected the field `authMethods` to be an array in the JSON data but got " + data['authMethods']);
        }
        // ensure the json data is a string
        if (data['dayOfBirth'] && !(typeof data['dayOfBirth'] === 'string' || data['dayOfBirth'] instanceof String)) {
            throw new Error("Expected the field `dayOfBirth` to be a primitive type in the JSON string but got " + data['dayOfBirth']);
        }
        // ensure the json data is a string
        if (data['districtCode'] && !(typeof data['districtCode'] === 'string' || data['districtCode'] instanceof String)) {
            throw new Error("Expected the field `districtCode` to be a primitive type in the JSON string but got " + data['districtCode']);
        }
        // ensure the json data is a string
        if (data['districtName'] && !(typeof data['districtName'] === 'string' || data['districtName'] instanceof String)) {
            throw new Error("Expected the field `districtName` to be a primitive type in the JSON string but got " + data['districtName']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['firstName'] && !(typeof data['firstName'] === 'string' || data['firstName'] instanceof String)) {
            throw new Error("Expected the field `firstName` to be a primitive type in the JSON string but got " + data['firstName']);
        }
        // ensure the json data is a string
        if (data['gender'] && !(typeof data['gender'] === 'string' || data['gender'] instanceof String)) {
            throw new Error("Expected the field `gender` to be a primitive type in the JSON string but got " + data['gender']);
        }
        // ensure the json data is a string
        if (data['healthId'] && !(typeof data['healthId'] === 'string' || data['healthId'] instanceof String)) {
            throw new Error("Expected the field `healthId` to be a primitive type in the JSON string but got " + data['healthId']);
        }
        // ensure the json data is a string
        if (data['healthIdNumber'] && !(typeof data['healthIdNumber'] === 'string' || data['healthIdNumber'] instanceof String)) {
            throw new Error("Expected the field `healthIdNumber` to be a primitive type in the JSON string but got " + data['healthIdNumber']);
        }
        // ensure the json data is a string
        if (data['kycPhoto'] && !(typeof data['kycPhoto'] === 'string' || data['kycPhoto'] instanceof String)) {
            throw new Error("Expected the field `kycPhoto` to be a primitive type in the JSON string but got " + data['kycPhoto']);
        }
        // ensure the json data is a string
        if (data['lastName'] && !(typeof data['lastName'] === 'string' || data['lastName'] instanceof String)) {
            throw new Error("Expected the field `lastName` to be a primitive type in the JSON string but got " + data['lastName']);
        }
        // ensure the json data is a string
        if (data['middleName'] && !(typeof data['middleName'] === 'string' || data['middleName'] instanceof String)) {
            throw new Error("Expected the field `middleName` to be a primitive type in the JSON string but got " + data['middleName']);
        }
        // ensure the json data is a string
        if (data['mobile'] && !(typeof data['mobile'] === 'string' || data['mobile'] instanceof String)) {
            throw new Error("Expected the field `mobile` to be a primitive type in the JSON string but got " + data['mobile']);
        }
        // ensure the json data is a string
        if (data['monthOfBirth'] && !(typeof data['monthOfBirth'] === 'string' || data['monthOfBirth'] instanceof String)) {
            throw new Error("Expected the field `monthOfBirth` to be a primitive type in the JSON string but got " + data['monthOfBirth']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['stateCode'] && !(typeof data['stateCode'] === 'string' || data['stateCode'] instanceof String)) {
            throw new Error("Expected the field `stateCode` to be a primitive type in the JSON string but got " + data['stateCode']);
        }
        // ensure the json data is a string
        if (data['stateName'] && !(typeof data['stateName'] === 'string' || data['stateName'] instanceof String)) {
            throw new Error("Expected the field `stateName` to be a primitive type in the JSON string but got " + data['stateName']);
        }
        // ensure the json data is a string
        if (data['token'] && !(typeof data['token'] === 'string' || data['token'] instanceof String)) {
            throw new Error("Expected the field `token` to be a primitive type in the JSON string but got " + data['token']);
        }
        // ensure the json data is a string
        if (data['yearOfBirth'] && !(typeof data['yearOfBirth'] === 'string' || data['yearOfBirth'] instanceof String)) {
            throw new Error("Expected the field `yearOfBirth` to be a primitive type in the JSON string but got " + data['yearOfBirth']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/CreateAccountJwtResponse.AuthMethodsEnum>} authMethods
 */
CreateAccountJwtResponse.prototype['authMethods'] = undefined;

/**
 * @member {String} dayOfBirth
 */
CreateAccountJwtResponse.prototype['dayOfBirth'] = undefined;

/**
 * @member {String} districtCode
 */
CreateAccountJwtResponse.prototype['districtCode'] = undefined;

/**
 * @member {String} districtName
 */
CreateAccountJwtResponse.prototype['districtName'] = undefined;

/**
 * @member {String} email
 */
CreateAccountJwtResponse.prototype['email'] = undefined;

/**
 * @member {String} firstName
 */
CreateAccountJwtResponse.prototype['firstName'] = undefined;

/**
 * @member {String} gender
 */
CreateAccountJwtResponse.prototype['gender'] = undefined;

/**
 * @member {String} healthId
 */
CreateAccountJwtResponse.prototype['healthId'] = undefined;

/**
 * @member {String} healthIdNumber
 */
CreateAccountJwtResponse.prototype['healthIdNumber'] = undefined;

/**
 * @member {String} kycPhoto
 */
CreateAccountJwtResponse.prototype['kycPhoto'] = undefined;

/**
 * @member {String} lastName
 */
CreateAccountJwtResponse.prototype['lastName'] = undefined;

/**
 * @member {String} middleName
 */
CreateAccountJwtResponse.prototype['middleName'] = undefined;

/**
 * @member {String} mobile
 */
CreateAccountJwtResponse.prototype['mobile'] = undefined;

/**
 * @member {String} monthOfBirth
 */
CreateAccountJwtResponse.prototype['monthOfBirth'] = undefined;

/**
 * @member {String} name
 */
CreateAccountJwtResponse.prototype['name'] = undefined;

/**
 * @member {Boolean} new
 */
CreateAccountJwtResponse.prototype['new'] = undefined;

/**
 * @member {String} stateCode
 */
CreateAccountJwtResponse.prototype['stateCode'] = undefined;

/**
 * @member {String} stateName
 */
CreateAccountJwtResponse.prototype['stateName'] = undefined;

/**
 * @member {Object.<String, String>} tags
 */
CreateAccountJwtResponse.prototype['tags'] = undefined;

/**
 * @member {String} token
 */
CreateAccountJwtResponse.prototype['token'] = undefined;

/**
 * @member {String} yearOfBirth
 */
CreateAccountJwtResponse.prototype['yearOfBirth'] = undefined;





/**
 * Allowed values for the <code>authMethods</code> property.
 * @enum {String}
 * @readonly
 */
CreateAccountJwtResponse['AuthMethodsEnum'] = {

    /**
     * value: "AADHAAR_OTP"
     * @const
     */
    "AADHAAR_OTP": "AADHAAR_OTP",

    /**
     * value: "MOBILE_OTP"
     * @const
     */
    "MOBILE_OTP": "MOBILE_OTP",

    /**
     * value: "PASSWORD"
     * @const
     */
    "PASSWORD": "PASSWORD",

    /**
     * value: "DEMOGRAPHICS"
     * @const
     */
    "DEMOGRAPHICS": "DEMOGRAPHICS",

    /**
     * value: "AADHAAR_BIO"
     * @const
     */
    "AADHAAR_BIO": "AADHAAR_BIO"
};



export default CreateAccountJwtResponse;

