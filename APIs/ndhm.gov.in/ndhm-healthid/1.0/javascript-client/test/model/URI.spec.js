/**
 * Health ID Service
 * It is important to standardize the process of identification of an individual across healthcare providers, to ensure that the created medical records are issued to the right individual or accessed by a Health Information User through appropriate consent.  In order to issue a Health ID to an individual, one only needs basic demographic details like Name, Year of Birth, Gender. In addition, citizens should be able to update contact information easily.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HealthIdService);
  }
}(this, function(expect, HealthIdService) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new HealthIdService.URI();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('URI', function() {
    it('should create an instance of URI', function() {
      // uncomment below and update the code to test URI
      //var instance = new HealthIdService.URI();
      //expect(instance).to.be.a(HealthIdService.URI);
    });

    it('should have the property absolute (base name: "absolute")', function() {
      // uncomment below and update the code to test the property absolute
      //var instance = new HealthIdService.URI();
      //expect(instance).to.be();
    });

    it('should have the property authority (base name: "authority")', function() {
      // uncomment below and update the code to test the property authority
      //var instance = new HealthIdService.URI();
      //expect(instance).to.be();
    });

    it('should have the property fragment (base name: "fragment")', function() {
      // uncomment below and update the code to test the property fragment
      //var instance = new HealthIdService.URI();
      //expect(instance).to.be();
    });

    it('should have the property host (base name: "host")', function() {
      // uncomment below and update the code to test the property host
      //var instance = new HealthIdService.URI();
      //expect(instance).to.be();
    });

    it('should have the property opaque (base name: "opaque")', function() {
      // uncomment below and update the code to test the property opaque
      //var instance = new HealthIdService.URI();
      //expect(instance).to.be();
    });

    it('should have the property path (base name: "path")', function() {
      // uncomment below and update the code to test the property path
      //var instance = new HealthIdService.URI();
      //expect(instance).to.be();
    });

    it('should have the property port (base name: "port")', function() {
      // uncomment below and update the code to test the property port
      //var instance = new HealthIdService.URI();
      //expect(instance).to.be();
    });

    it('should have the property query (base name: "query")', function() {
      // uncomment below and update the code to test the property query
      //var instance = new HealthIdService.URI();
      //expect(instance).to.be();
    });

    it('should have the property rawAuthority (base name: "rawAuthority")', function() {
      // uncomment below and update the code to test the property rawAuthority
      //var instance = new HealthIdService.URI();
      //expect(instance).to.be();
    });

    it('should have the property rawFragment (base name: "rawFragment")', function() {
      // uncomment below and update the code to test the property rawFragment
      //var instance = new HealthIdService.URI();
      //expect(instance).to.be();
    });

    it('should have the property rawPath (base name: "rawPath")', function() {
      // uncomment below and update the code to test the property rawPath
      //var instance = new HealthIdService.URI();
      //expect(instance).to.be();
    });

    it('should have the property rawQuery (base name: "rawQuery")', function() {
      // uncomment below and update the code to test the property rawQuery
      //var instance = new HealthIdService.URI();
      //expect(instance).to.be();
    });

    it('should have the property rawSchemeSpecificPart (base name: "rawSchemeSpecificPart")', function() {
      // uncomment below and update the code to test the property rawSchemeSpecificPart
      //var instance = new HealthIdService.URI();
      //expect(instance).to.be();
    });

    it('should have the property rawUserInfo (base name: "rawUserInfo")', function() {
      // uncomment below and update the code to test the property rawUserInfo
      //var instance = new HealthIdService.URI();
      //expect(instance).to.be();
    });

    it('should have the property scheme (base name: "scheme")', function() {
      // uncomment below and update the code to test the property scheme
      //var instance = new HealthIdService.URI();
      //expect(instance).to.be();
    });

    it('should have the property schemeSpecificPart (base name: "schemeSpecificPart")', function() {
      // uncomment below and update the code to test the property schemeSpecificPart
      //var instance = new HealthIdService.URI();
      //expect(instance).to.be();
    });

    it('should have the property userInfo (base name: "userInfo")', function() {
      // uncomment below and update the code to test the property userInfo
      //var instance = new HealthIdService.URI();
      //expect(instance).to.be();
    });

  });

}));
