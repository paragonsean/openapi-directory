/**
 * Health ID Service
 * It is important to standardize the process of identification of an individual across healthcare providers, to ensure that the created medical records are issued to the right individual or accessed by a Health Information User through appropriate consent.  In order to issue a Health ID to an individual, one only needs basic demographic details like Name, Year of Birth, Gender. In addition, citizens should be able to update contact information easily.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIntegratedProgramsApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIIntegratedProgramsApi::OAIIntegratedProgramsApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIIntegratedProgramsApi::~OAIIntegratedProgramsApi() {
}

void OAIIntegratedProgramsApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://healthidsbx.ndhm.gov.in/api"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("createHealthIdByDemoAuthUsingPOST", defaultConf);
    _serverIndices.insert("createHealthIdByDemoAuthUsingPOST", 0);
    _serverConfigs.insert("createHealthIdByMobileUsingPOST", defaultConf);
    _serverIndices.insert("createHealthIdByMobileUsingPOST", 0);
    _serverConfigs.insert("delinkHidBenefitUsingPOST", defaultConf);
    _serverIndices.insert("delinkHidBenefitUsingPOST", 0);
    _serverConfigs.insert("findByAadharUsingPOST", defaultConf);
    _serverIndices.insert("findByAadharUsingPOST", 0);
    _serverConfigs.insert("findByHealthIdUsingPOST", defaultConf);
    _serverIndices.insert("findByHealthIdUsingPOST", 0);
    _serverConfigs.insert("generateAadharOTPUsingPOST2", defaultConf);
    _serverIndices.insert("generateAadharOTPUsingPOST2", 0);
    _serverConfigs.insert("generateMobileOtpUsingPOST", defaultConf);
    _serverIndices.insert("generateMobileOtpUsingPOST", 0);
    _serverConfigs.insert("linkHidBenefitUsingPOST", defaultConf);
    _serverIndices.insert("linkHidBenefitUsingPOST", 0);
    _serverConfigs.insert("notifyBenefitUsingPOST", defaultConf);
    _serverIndices.insert("notifyBenefitUsingPOST", 0);
    _serverConfigs.insert("updateAccountInformationUsingPOST1", defaultConf);
    _serverIndices.insert("updateAccountInformationUsingPOST1", 0);
    _serverConfigs.insert("updateMobileInformationUsingPOST", defaultConf);
    _serverIndices.insert("updateMobileInformationUsingPOST", 0);
    _serverConfigs.insert("updateStatusUsingPOST", defaultConf);
    _serverIndices.insert("updateStatusUsingPOST", 0);
    _serverConfigs.insert("verifyAadharOtpUsingPOST", defaultConf);
    _serverIndices.insert("verifyAadharOtpUsingPOST", 0);
    _serverConfigs.insert("verifyBioUsingPOST", defaultConf);
    _serverIndices.insert("verifyBioUsingPOST", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIIntegratedProgramsApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIIntegratedProgramsApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIIntegratedProgramsApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIIntegratedProgramsApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIIntegratedProgramsApi::setUsername(const QString &username) {
    _username = username;
}

void OAIIntegratedProgramsApi::setPassword(const QString &password) {
    _password = password;
}


void OAIIntegratedProgramsApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIIntegratedProgramsApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIIntegratedProgramsApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIIntegratedProgramsApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIIntegratedProgramsApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIIntegratedProgramsApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIIntegratedProgramsApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIIntegratedProgramsApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIIntegratedProgramsApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIIntegratedProgramsApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIIntegratedProgramsApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIIntegratedProgramsApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIIntegratedProgramsApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIIntegratedProgramsApi::createHealthIdByDemoAuthUsingPOST(const OAICreateHIdDemoAuthRequest &create_hid_demo_auth_request, const ::OpenAPI::OptionalParam<QString> &accept_language) {
    QString fullPath = QString(_serverConfigs["createHealthIdByDemoAuthUsingPOST"][_serverIndices.value("createHealthIdByDemoAuthUsingPOST")].URL()+"/v1/hid/benefit/createHealthId/demo/auth");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    if (_apiKeys.contains("X-HIP-ID")) {
        addHeaders("X-HIP-ID",_apiKeys.find("X-HIP-ID").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = create_hid_demo_auth_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept_language.value()).isEmpty()) {
            input.headers.insert("Accept-Language", ::OpenAPI::toStringValue(accept_language.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIIntegratedProgramsApi::createHealthIdByDemoAuthUsingPOSTCallback);
    connect(this, &OAIIntegratedProgramsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIIntegratedProgramsApi::createHealthIdByDemoAuthUsingPOSTCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIHidBenefitRequestPayload output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createHealthIdByDemoAuthUsingPOSTSignal(output);
        Q_EMIT createHealthIdByDemoAuthUsingPOSTSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createHealthIdByDemoAuthUsingPOSTSignalE(output, error_type, error_str);
        Q_EMIT createHealthIdByDemoAuthUsingPOSTSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createHealthIdByDemoAuthUsingPOSTSignalError(output, error_type, error_str);
        Q_EMIT createHealthIdByDemoAuthUsingPOSTSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIIntegratedProgramsApi::createHealthIdByMobileUsingPOST(const OAICreateHidMobileRequest &create_hid_mobile_request, const ::OpenAPI::OptionalParam<QString> &accept_language) {
    QString fullPath = QString(_serverConfigs["createHealthIdByMobileUsingPOST"][_serverIndices.value("createHealthIdByMobileUsingPOST")].URL()+"/v1/hid/benefit/mobile/createHealthId");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    if (_apiKeys.contains("X-HIP-ID")) {
        addHeaders("X-HIP-ID",_apiKeys.find("X-HIP-ID").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = create_hid_mobile_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept_language.value()).isEmpty()) {
            input.headers.insert("Accept-Language", ::OpenAPI::toStringValue(accept_language.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIIntegratedProgramsApi::createHealthIdByMobileUsingPOSTCallback);
    connect(this, &OAIIntegratedProgramsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIIntegratedProgramsApi::createHealthIdByMobileUsingPOSTCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITxnResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createHealthIdByMobileUsingPOSTSignal(output);
        Q_EMIT createHealthIdByMobileUsingPOSTSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createHealthIdByMobileUsingPOSTSignalE(output, error_type, error_str);
        Q_EMIT createHealthIdByMobileUsingPOSTSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createHealthIdByMobileUsingPOSTSignalError(output, error_type, error_str);
        Q_EMIT createHealthIdByMobileUsingPOSTSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIIntegratedProgramsApi::delinkHidBenefitUsingPOST(const OAIHidBenefitDelinkRequestPayload &hid_benefit_linked_request_payload, const ::OpenAPI::OptionalParam<QString> &accept_language) {
    QString fullPath = QString(_serverConfigs["delinkHidBenefitUsingPOST"][_serverIndices.value("delinkHidBenefitUsingPOST")].URL()+"/v1/hid/benefit/delink");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    if (_apiKeys.contains("X-HIP-ID")) {
        addHeaders("X-HIP-ID",_apiKeys.find("X-HIP-ID").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = hid_benefit_linked_request_payload.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept_language.value()).isEmpty()) {
            input.headers.insert("Accept-Language", ::OpenAPI::toStringValue(accept_language.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIIntegratedProgramsApi::delinkHidBenefitUsingPOSTCallback);
    connect(this, &OAIIntegratedProgramsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIIntegratedProgramsApi::delinkHidBenefitUsingPOSTCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIHidBenefitLinkedResponsePayload output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT delinkHidBenefitUsingPOSTSignal(output);
        Q_EMIT delinkHidBenefitUsingPOSTSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT delinkHidBenefitUsingPOSTSignalE(output, error_type, error_str);
        Q_EMIT delinkHidBenefitUsingPOSTSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT delinkHidBenefitUsingPOSTSignalError(output, error_type, error_str);
        Q_EMIT delinkHidBenefitUsingPOSTSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIIntegratedProgramsApi::findByAadharUsingPOST(const OAIAadharNumberRequestPayload &aadhar_number_request_payload, const ::OpenAPI::OptionalParam<QString> &accept_language) {
    QString fullPath = QString(_serverConfigs["findByAadharUsingPOST"][_serverIndices.value("findByAadharUsingPOST")].URL()+"/v1/hid/benefit/search/aadhaar");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    if (_apiKeys.contains("X-HIP-ID")) {
        addHeaders("X-HIP-ID",_apiKeys.find("X-HIP-ID").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = aadhar_number_request_payload.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept_language.value()).isEmpty()) {
            input.headers.insert("Accept-Language", ::OpenAPI::toStringValue(accept_language.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIIntegratedProgramsApi::findByAadharUsingPOSTCallback);
    connect(this, &OAIIntegratedProgramsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIIntegratedProgramsApi::findByAadharUsingPOSTCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIObject> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIObject val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT findByAadharUsingPOSTSignal(output);
        Q_EMIT findByAadharUsingPOSTSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT findByAadharUsingPOSTSignalE(output, error_type, error_str);
        Q_EMIT findByAadharUsingPOSTSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT findByAadharUsingPOSTSignalError(output, error_type, error_str);
        Q_EMIT findByAadharUsingPOSTSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIIntegratedProgramsApi::findByHealthIdUsingPOST(const OAIHidBenefitNameSearchRequest &search_request, const ::OpenAPI::OptionalParam<QString> &accept_language) {
    QString fullPath = QString(_serverConfigs["findByHealthIdUsingPOST"][_serverIndices.value("findByHealthIdUsingPOST")].URL()+"/v1/hid/benefit/search/healthIdNumber");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    if (_apiKeys.contains("X-HIP-ID")) {
        addHeaders("X-HIP-ID",_apiKeys.find("X-HIP-ID").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = search_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept_language.value()).isEmpty()) {
            input.headers.insert("Accept-Language", ::OpenAPI::toStringValue(accept_language.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIIntegratedProgramsApi::findByHealthIdUsingPOSTCallback);
    connect(this, &OAIIntegratedProgramsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIIntegratedProgramsApi::findByHealthIdUsingPOSTCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIHidBenefitSearchResponsePayload> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIHidBenefitSearchResponsePayload val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT findByHealthIdUsingPOSTSignal(output);
        Q_EMIT findByHealthIdUsingPOSTSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT findByHealthIdUsingPOSTSignalE(output, error_type, error_str);
        Q_EMIT findByHealthIdUsingPOSTSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT findByHealthIdUsingPOSTSignalError(output, error_type, error_str);
        Q_EMIT findByHealthIdUsingPOSTSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIIntegratedProgramsApi::generateAadharOTPUsingPOST2(const OAIAadharOtpGenerateRequestPayLoad &generate_otp_request, const ::OpenAPI::OptionalParam<QString> &accept_language) {
    QString fullPath = QString(_serverConfigs["generateAadharOTPUsingPOST2"][_serverIndices.value("generateAadharOTPUsingPOST2")].URL()+"/v1/hid/benefit/aadhaar/generateOtp");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    if (_apiKeys.contains("X-HIP-ID")) {
        addHeaders("X-HIP-ID",_apiKeys.find("X-HIP-ID").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = generate_otp_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept_language.value()).isEmpty()) {
            input.headers.insert("Accept-Language", ::OpenAPI::toStringValue(accept_language.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIIntegratedProgramsApi::generateAadharOTPUsingPOST2Callback);
    connect(this, &OAIIntegratedProgramsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIIntegratedProgramsApi::generateAadharOTPUsingPOST2Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITxnResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT generateAadharOTPUsingPOST2Signal(output);
        Q_EMIT generateAadharOTPUsingPOST2SignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT generateAadharOTPUsingPOST2SignalE(output, error_type, error_str);
        Q_EMIT generateAadharOTPUsingPOST2SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT generateAadharOTPUsingPOST2SignalError(output, error_type, error_str);
        Q_EMIT generateAadharOTPUsingPOST2SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIIntegratedProgramsApi::generateMobileOtpUsingPOST(const OAIGenerateMobileOTPRequest &generate_otp_request, const ::OpenAPI::OptionalParam<QString> &accept_language) {
    QString fullPath = QString(_serverConfigs["generateMobileOtpUsingPOST"][_serverIndices.value("generateMobileOtpUsingPOST")].URL()+"/v1/hid/benefit/mobile/generateOtp");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    if (_apiKeys.contains("X-HIP-ID")) {
        addHeaders("X-HIP-ID",_apiKeys.find("X-HIP-ID").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = generate_otp_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept_language.value()).isEmpty()) {
            input.headers.insert("Accept-Language", ::OpenAPI::toStringValue(accept_language.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIIntegratedProgramsApi::generateMobileOtpUsingPOSTCallback);
    connect(this, &OAIIntegratedProgramsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIIntegratedProgramsApi::generateMobileOtpUsingPOSTCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITxnResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT generateMobileOtpUsingPOSTSignal(output);
        Q_EMIT generateMobileOtpUsingPOSTSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT generateMobileOtpUsingPOSTSignalE(output, error_type, error_str);
        Q_EMIT generateMobileOtpUsingPOSTSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT generateMobileOtpUsingPOSTSignalError(output, error_type, error_str);
        Q_EMIT generateMobileOtpUsingPOSTSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIIntegratedProgramsApi::linkHidBenefitUsingPOST(const OAIHidBenefitLinkedRequestPayload &hid_benefit_linked_request_payload, const ::OpenAPI::OptionalParam<QString> &accept_language) {
    QString fullPath = QString(_serverConfigs["linkHidBenefitUsingPOST"][_serverIndices.value("linkHidBenefitUsingPOST")].URL()+"/v1/hid/benefit/link");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    if (_apiKeys.contains("X-HIP-ID")) {
        addHeaders("X-HIP-ID",_apiKeys.find("X-HIP-ID").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = hid_benefit_linked_request_payload.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept_language.value()).isEmpty()) {
            input.headers.insert("Accept-Language", ::OpenAPI::toStringValue(accept_language.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIIntegratedProgramsApi::linkHidBenefitUsingPOSTCallback);
    connect(this, &OAIIntegratedProgramsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIIntegratedProgramsApi::linkHidBenefitUsingPOSTCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIHidBenefitLinkedResponsePayload output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT linkHidBenefitUsingPOSTSignal(output);
        Q_EMIT linkHidBenefitUsingPOSTSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT linkHidBenefitUsingPOSTSignalE(output, error_type, error_str);
        Q_EMIT linkHidBenefitUsingPOSTSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT linkHidBenefitUsingPOSTSignalError(output, error_type, error_str);
        Q_EMIT linkHidBenefitUsingPOSTSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIIntegratedProgramsApi::notifyBenefitUsingPOST(const OAICreateHidNotifyBenefitRequest &create_hid_notify_benefit_request, const ::OpenAPI::OptionalParam<QString> &accept_language) {
    QString fullPath = QString(_serverConfigs["notifyBenefitUsingPOST"][_serverIndices.value("notifyBenefitUsingPOST")].URL()+"/v1/hid/benefit/notify/benefit");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    if (_apiKeys.contains("X-HIP-ID")) {
        addHeaders("X-HIP-ID",_apiKeys.find("X-HIP-ID").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = create_hid_notify_benefit_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept_language.value()).isEmpty()) {
            input.headers.insert("Accept-Language", ::OpenAPI::toStringValue(accept_language.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIIntegratedProgramsApi::notifyBenefitUsingPOSTCallback);
    connect(this, &OAIIntegratedProgramsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIIntegratedProgramsApi::notifyBenefitUsingPOSTCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIHidBenefitRequestPayload output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT notifyBenefitUsingPOSTSignal(output);
        Q_EMIT notifyBenefitUsingPOSTSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT notifyBenefitUsingPOSTSignalE(output, error_type, error_str);
        Q_EMIT notifyBenefitUsingPOSTSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT notifyBenefitUsingPOSTSignalError(output, error_type, error_str);
        Q_EMIT notifyBenefitUsingPOSTSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIIntegratedProgramsApi::updateAccountInformationUsingPOST1(const OAIHidUpdateAccountRequest &request, const ::OpenAPI::OptionalParam<QString> &accept_language) {
    QString fullPath = QString(_serverConfigs["updateAccountInformationUsingPOST1"][_serverIndices.value("updateAccountInformationUsingPOST1")].URL()+"/v1/hid/benefit/update/profile");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    if (_apiKeys.contains("X-HIP-ID")) {
        addHeaders("X-HIP-ID",_apiKeys.find("X-HIP-ID").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = request.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept_language.value()).isEmpty()) {
            input.headers.insert("Accept-Language", ::OpenAPI::toStringValue(accept_language.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIIntegratedProgramsApi::updateAccountInformationUsingPOST1Callback);
    connect(this, &OAIIntegratedProgramsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIIntegratedProgramsApi::updateAccountInformationUsingPOST1Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIUserDTO output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateAccountInformationUsingPOST1Signal(output);
        Q_EMIT updateAccountInformationUsingPOST1SignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateAccountInformationUsingPOST1SignalE(output, error_type, error_str);
        Q_EMIT updateAccountInformationUsingPOST1SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateAccountInformationUsingPOST1SignalError(output, error_type, error_str);
        Q_EMIT updateAccountInformationUsingPOST1SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIIntegratedProgramsApi::updateMobileInformationUsingPOST(const OAIHidUpdateMobiletRequest &request, const ::OpenAPI::OptionalParam<QString> &accept_language) {
    QString fullPath = QString(_serverConfigs["updateMobileInformationUsingPOST"][_serverIndices.value("updateMobileInformationUsingPOST")].URL()+"/v1/hid/benefit/update/mobile");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    if (_apiKeys.contains("X-HIP-ID")) {
        addHeaders("X-HIP-ID",_apiKeys.find("X-HIP-ID").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = request.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept_language.value()).isEmpty()) {
            input.headers.insert("Accept-Language", ::OpenAPI::toStringValue(accept_language.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIIntegratedProgramsApi::updateMobileInformationUsingPOSTCallback);
    connect(this, &OAIIntegratedProgramsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIIntegratedProgramsApi::updateMobileInformationUsingPOSTCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIUserDTO output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateMobileInformationUsingPOSTSignal(output);
        Q_EMIT updateMobileInformationUsingPOSTSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateMobileInformationUsingPOSTSignalE(output, error_type, error_str);
        Q_EMIT updateMobileInformationUsingPOSTSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateMobileInformationUsingPOSTSignalError(output, error_type, error_str);
        Q_EMIT updateMobileInformationUsingPOSTSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIIntegratedProgramsApi::updateStatusUsingPOST(const OAIHidStatusRequestPayload &generate_otp_request, const ::OpenAPI::OptionalParam<QString> &accept_language) {
    QString fullPath = QString(_serverConfigs["updateStatusUsingPOST"][_serverIndices.value("updateStatusUsingPOST")].URL()+"/v1/hid/benefit/update/status");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    if (_apiKeys.contains("X-HIP-ID")) {
        addHeaders("X-HIP-ID",_apiKeys.find("X-HIP-ID").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = generate_otp_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept_language.value()).isEmpty()) {
            input.headers.insert("Accept-Language", ::OpenAPI::toStringValue(accept_language.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIIntegratedProgramsApi::updateStatusUsingPOSTCallback);
    connect(this, &OAIIntegratedProgramsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIIntegratedProgramsApi::updateStatusUsingPOSTCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    bool output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateStatusUsingPOSTSignal(output);
        Q_EMIT updateStatusUsingPOSTSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateStatusUsingPOSTSignalE(output, error_type, error_str);
        Q_EMIT updateStatusUsingPOSTSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateStatusUsingPOSTSignalError(output, error_type, error_str);
        Q_EMIT updateStatusUsingPOSTSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIIntegratedProgramsApi::verifyAadharOtpUsingPOST(const OAICreateHealthIdOptRequest &create_health_id_opt_request, const ::OpenAPI::OptionalParam<QString> &accept_language) {
    QString fullPath = QString(_serverConfigs["verifyAadharOtpUsingPOST"][_serverIndices.value("verifyAadharOtpUsingPOST")].URL()+"/v1/hid/benefit/aadhaar/verifyAadharOtp");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    if (_apiKeys.contains("X-HIP-ID")) {
        addHeaders("X-HIP-ID",_apiKeys.find("X-HIP-ID").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = create_health_id_opt_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept_language.value()).isEmpty()) {
            input.headers.insert("Accept-Language", ::OpenAPI::toStringValue(accept_language.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIIntegratedProgramsApi::verifyAadharOtpUsingPOSTCallback);
    connect(this, &OAIIntegratedProgramsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIIntegratedProgramsApi::verifyAadharOtpUsingPOSTCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIHidBenefitRequestPayload output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT verifyAadharOtpUsingPOSTSignal(output);
        Q_EMIT verifyAadharOtpUsingPOSTSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT verifyAadharOtpUsingPOSTSignalE(output, error_type, error_str);
        Q_EMIT verifyAadharOtpUsingPOSTSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT verifyAadharOtpUsingPOSTSignalError(output, error_type, error_str);
        Q_EMIT verifyAadharOtpUsingPOSTSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIIntegratedProgramsApi::verifyBioUsingPOST(const OAICreateHidBiometricRequest &create_hid_biometric_request, const ::OpenAPI::OptionalParam<QString> &accept_language) {
    QString fullPath = QString(_serverConfigs["verifyBioUsingPOST"][_serverIndices.value("verifyBioUsingPOST")].URL()+"/v1/hid/benefit/aadhaar/verifyBio");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    if (_apiKeys.contains("X-HIP-ID")) {
        addHeaders("X-HIP-ID",_apiKeys.find("X-HIP-ID").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = create_hid_biometric_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept_language.value()).isEmpty()) {
            input.headers.insert("Accept-Language", ::OpenAPI::toStringValue(accept_language.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIIntegratedProgramsApi::verifyBioUsingPOSTCallback);
    connect(this, &OAIIntegratedProgramsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIIntegratedProgramsApi::verifyBioUsingPOSTCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIHidBenefitRequestPayload output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT verifyBioUsingPOSTSignal(output);
        Q_EMIT verifyBioUsingPOSTSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT verifyBioUsingPOSTSignalE(output, error_type, error_str);
        Q_EMIT verifyBioUsingPOSTSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT verifyBioUsingPOSTSignalError(output, error_type, error_str);
        Q_EMIT verifyBioUsingPOSTSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIIntegratedProgramsApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
