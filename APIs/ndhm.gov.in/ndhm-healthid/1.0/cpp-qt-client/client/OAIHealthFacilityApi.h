/**
 * Health ID Service
 * It is important to standardize the process of identification of an individual across healthcare providers, to ensure that the created medical records are issued to the right individual or accessed by a Health Information User through appropriate consent.  In order to issue a Health ID to an individual, one only needs basic demographic details like Name, Year of Birth, Gender. In addition, citizens should be able to update contact information easily.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIHealthFacilityApi_H
#define OAI_OAIHealthFacilityApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAadharOtpGenerateRequestPayLoad.h"
#include "OAICreateAccountJwtResponse.h"
#include "OAICreateAccountWithPreVerifiedAadhaar.h"
#include "OAIHealthFacilityAuthenticationRequest.h"
#include "OAIHealthFacilityChangedPasswordRequest.h"
#include "OAIHealthFacilityPasswordRequest.h"
#include "OAITxnResponse.h"
#include <QByteArray>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIHealthFacilityApi : public QObject {
    Q_OBJECT

public:
    OAIHealthFacilityApi(const int timeOut = 0);
    ~OAIHealthFacilityApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  health_facility_authentication_request OAIHealthFacilityAuthenticationRequest [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void authenticateHealthFacilityUsingPOST(const OAIHealthFacilityAuthenticationRequest &health_facility_authentication_request, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  health_facility_password_request OAIHealthFacilityChangedPasswordRequest [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void changePasswordUsingPOST(const OAIHealthFacilityChangedPasswordRequest &health_facility_password_request, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_request OAICreateAccountWithPreVerifiedAadhaar [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void createAadhaarAccountUsingPOST1(const OAICreateAccountWithPreVerifiedAadhaar &account_request, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_token QString [required]
    * @param[in]  generate_otp_request OAIAadharOtpGenerateRequestPayLoad [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void generateFacilityOTPUsingPOST(const QString &x_token, const OAIAadharOtpGenerateRequestPayLoad &generate_otp_request, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  health_facility_password_request OAIHealthFacilityPasswordRequest [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void generatePasswordUsingPOST(const OAIHealthFacilityPasswordRequest &health_facility_password_request, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  health_id QString [required]
    * @param[in]  x_token QString [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void generateSvgCardUsingGET1(const QString &health_id, const QString &x_token, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  health_facility_password_request OAIHealthFacilityPasswordRequest [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void resetPasswordUsingPOST(const OAIHealthFacilityPasswordRequest &health_facility_password_request, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void authenticateHealthFacilityUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void changePasswordUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void createAadhaarAccountUsingPOST1Callback(OAIHttpRequestWorker *worker);
    void generateFacilityOTPUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void generatePasswordUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void generateSvgCardUsingGET1Callback(OAIHttpRequestWorker *worker);
    void resetPasswordUsingPOSTCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void authenticateHealthFacilityUsingPOSTSignal(QString summary);
    void changePasswordUsingPOSTSignal(QString summary);
    void createAadhaarAccountUsingPOST1Signal(OAICreateAccountJwtResponse summary);
    void generateFacilityOTPUsingPOSTSignal(OAITxnResponse summary);
    void generatePasswordUsingPOSTSignal(QString summary);
    void generateSvgCardUsingGET1Signal(QByteArray summary);
    void resetPasswordUsingPOSTSignal(QString summary);


    void authenticateHealthFacilityUsingPOSTSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void changePasswordUsingPOSTSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void createAadhaarAccountUsingPOST1SignalFull(OAIHttpRequestWorker *worker, OAICreateAccountJwtResponse summary);
    void generateFacilityOTPUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAITxnResponse summary);
    void generatePasswordUsingPOSTSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void generateSvgCardUsingGET1SignalFull(OAIHttpRequestWorker *worker, QByteArray summary);
    void resetPasswordUsingPOSTSignalFull(OAIHttpRequestWorker *worker, QString summary);

    Q_DECL_DEPRECATED_X("Use authenticateHealthFacilityUsingPOSTSignalError() instead")
    void authenticateHealthFacilityUsingPOSTSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authenticateHealthFacilityUsingPOSTSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changePasswordUsingPOSTSignalError() instead")
    void changePasswordUsingPOSTSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void changePasswordUsingPOSTSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAadhaarAccountUsingPOST1SignalError() instead")
    void createAadhaarAccountUsingPOST1SignalE(OAICreateAccountJwtResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAadhaarAccountUsingPOST1SignalError(OAICreateAccountJwtResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateFacilityOTPUsingPOSTSignalError() instead")
    void generateFacilityOTPUsingPOSTSignalE(OAITxnResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateFacilityOTPUsingPOSTSignalError(OAITxnResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generatePasswordUsingPOSTSignalError() instead")
    void generatePasswordUsingPOSTSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generatePasswordUsingPOSTSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateSvgCardUsingGET1SignalError() instead")
    void generateSvgCardUsingGET1SignalE(QByteArray summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateSvgCardUsingGET1SignalError(QByteArray summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetPasswordUsingPOSTSignalError() instead")
    void resetPasswordUsingPOSTSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resetPasswordUsingPOSTSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use authenticateHealthFacilityUsingPOSTSignalErrorFull() instead")
    void authenticateHealthFacilityUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authenticateHealthFacilityUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changePasswordUsingPOSTSignalErrorFull() instead")
    void changePasswordUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void changePasswordUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAadhaarAccountUsingPOST1SignalErrorFull() instead")
    void createAadhaarAccountUsingPOST1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAadhaarAccountUsingPOST1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateFacilityOTPUsingPOSTSignalErrorFull() instead")
    void generateFacilityOTPUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateFacilityOTPUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generatePasswordUsingPOSTSignalErrorFull() instead")
    void generatePasswordUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generatePasswordUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateSvgCardUsingGET1SignalErrorFull() instead")
    void generateSvgCardUsingGET1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateSvgCardUsingGET1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetPasswordUsingPOSTSignalErrorFull() instead")
    void resetPasswordUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resetPasswordUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
