/**
 * Health ID Service
 * It is important to standardize the process of identification of an individual across healthcare providers, to ensure that the created medical records are issued to the right individual or accessed by a Health Information User through appropriate consent.  In order to issue a Health ID to an individual, one only needs basic demographic details like Name, Year of Birth, Gender. In addition, citizens should be able to update contact information easily.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIByteArrayResource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIByteArrayResource::OAIByteArrayResource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIByteArrayResource::OAIByteArrayResource() {
    this->initializeModel();
}

OAIByteArrayResource::~OAIByteArrayResource() {}

void OAIByteArrayResource::initializeModel() {

    m_byte_array_isSet = false;
    m_byte_array_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_file_isSet = false;
    m_file_isValid = false;

    m_filename_isSet = false;
    m_filename_isValid = false;

    m_input_stream_isSet = false;
    m_input_stream_isValid = false;

    m_open_isSet = false;
    m_open_isValid = false;

    m_readable_isSet = false;
    m_readable_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIByteArrayResource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIByteArrayResource::fromJsonObject(QJsonObject json) {

    m_byte_array_isValid = ::OpenAPI::fromJsonValue(m_byte_array, json[QString("byteArray")]);
    m_byte_array_isSet = !json[QString("byteArray")].isNull() && m_byte_array_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_file_isValid = ::OpenAPI::fromJsonValue(m_file, json[QString("file")]);
    m_file_isSet = !json[QString("file")].isNull() && m_file_isValid;

    m_filename_isValid = ::OpenAPI::fromJsonValue(m_filename, json[QString("filename")]);
    m_filename_isSet = !json[QString("filename")].isNull() && m_filename_isValid;

    m_input_stream_isValid = ::OpenAPI::fromJsonValue(m_input_stream, json[QString("inputStream")]);
    m_input_stream_isSet = !json[QString("inputStream")].isNull() && m_input_stream_isValid;

    m_open_isValid = ::OpenAPI::fromJsonValue(m_open, json[QString("open")]);
    m_open_isSet = !json[QString("open")].isNull() && m_open_isValid;

    m_readable_isValid = ::OpenAPI::fromJsonValue(m_readable, json[QString("readable")]);
    m_readable_isSet = !json[QString("readable")].isNull() && m_readable_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIByteArrayResource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIByteArrayResource::asJsonObject() const {
    QJsonObject obj;
    if (m_byte_array_isSet) {
        obj.insert(QString("byteArray"), ::OpenAPI::toJsonValue(m_byte_array));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_file.isSet()) {
        obj.insert(QString("file"), ::OpenAPI::toJsonValue(m_file));
    }
    if (m_filename_isSet) {
        obj.insert(QString("filename"), ::OpenAPI::toJsonValue(m_filename));
    }
    if (m_input_stream_isSet) {
        obj.insert(QString("inputStream"), ::OpenAPI::toJsonValue(m_input_stream));
    }
    if (m_open_isSet) {
        obj.insert(QString("open"), ::OpenAPI::toJsonValue(m_open));
    }
    if (m_readable_isSet) {
        obj.insert(QString("readable"), ::OpenAPI::toJsonValue(m_readable));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    if (m_url.isSet()) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QByteArray OAIByteArrayResource::getByteArray() const {
    return m_byte_array;
}
void OAIByteArrayResource::setByteArray(const QByteArray &byte_array) {
    m_byte_array = byte_array;
    m_byte_array_isSet = true;
}

bool OAIByteArrayResource::is_byte_array_Set() const{
    return m_byte_array_isSet;
}

bool OAIByteArrayResource::is_byte_array_Valid() const{
    return m_byte_array_isValid;
}

QString OAIByteArrayResource::getDescription() const {
    return m_description;
}
void OAIByteArrayResource::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIByteArrayResource::is_description_Set() const{
    return m_description_isSet;
}

bool OAIByteArrayResource::is_description_Valid() const{
    return m_description_isValid;
}

OAIFile OAIByteArrayResource::getFile() const {
    return m_file;
}
void OAIByteArrayResource::setFile(const OAIFile &file) {
    m_file = file;
    m_file_isSet = true;
}

bool OAIByteArrayResource::is_file_Set() const{
    return m_file_isSet;
}

bool OAIByteArrayResource::is_file_Valid() const{
    return m_file_isValid;
}

QString OAIByteArrayResource::getFilename() const {
    return m_filename;
}
void OAIByteArrayResource::setFilename(const QString &filename) {
    m_filename = filename;
    m_filename_isSet = true;
}

bool OAIByteArrayResource::is_filename_Set() const{
    return m_filename_isSet;
}

bool OAIByteArrayResource::is_filename_Valid() const{
    return m_filename_isValid;
}

OAIObject OAIByteArrayResource::getInputStream() const {
    return m_input_stream;
}
void OAIByteArrayResource::setInputStream(const OAIObject &input_stream) {
    m_input_stream = input_stream;
    m_input_stream_isSet = true;
}

bool OAIByteArrayResource::is_input_stream_Set() const{
    return m_input_stream_isSet;
}

bool OAIByteArrayResource::is_input_stream_Valid() const{
    return m_input_stream_isValid;
}

bool OAIByteArrayResource::isOpen() const {
    return m_open;
}
void OAIByteArrayResource::setOpen(const bool &open) {
    m_open = open;
    m_open_isSet = true;
}

bool OAIByteArrayResource::is_open_Set() const{
    return m_open_isSet;
}

bool OAIByteArrayResource::is_open_Valid() const{
    return m_open_isValid;
}

bool OAIByteArrayResource::isReadable() const {
    return m_readable;
}
void OAIByteArrayResource::setReadable(const bool &readable) {
    m_readable = readable;
    m_readable_isSet = true;
}

bool OAIByteArrayResource::is_readable_Set() const{
    return m_readable_isSet;
}

bool OAIByteArrayResource::is_readable_Valid() const{
    return m_readable_isValid;
}

QString OAIByteArrayResource::getUri() const {
    return m_uri;
}
void OAIByteArrayResource::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIByteArrayResource::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIByteArrayResource::is_uri_Valid() const{
    return m_uri_isValid;
}

OAIURL OAIByteArrayResource::getUrl() const {
    return m_url;
}
void OAIByteArrayResource::setUrl(const OAIURL &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIByteArrayResource::is_url_Set() const{
    return m_url_isSet;
}

bool OAIByteArrayResource::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIByteArrayResource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_byte_array_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filename_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_stream_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_readable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIByteArrayResource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
