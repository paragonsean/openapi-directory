/**
 * Health ID Service
 * It is important to standardize the process of identification of an individual across healthcare providers, to ensure that the created medical records are issued to the right individual or accessed by a Health Information User through appropriate consent.  In order to issue a Health ID to an individual, one only needs basic demographic details like Name, Year of Birth, Gender. In addition, citizens should be able to update contact information easily.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIForgotHealthIdNumberApi_H
#define OAI_OAIForgotHealthIdNumberApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAadharOtpGenerateRequestPayLoad.h"
#include "OAIAuthAccountAadhaarOTPRequest.h"
#include "OAIGenerateMobileOTPRequest.h"
#include "OAIRetrieveHealthIdPayloadResponse.h"
#include "OAIRetriveHealthIdMobilePayLoad.h"
#include "OAITxnResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIForgotHealthIdNumberApi : public QObject {
    Q_OBJECT

public:
    OAIForgotHealthIdNumberApi(const int timeOut = 0);
    ~OAIForgotHealthIdNumberApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  generate_otp_request OAIAadharOtpGenerateRequestPayLoad [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void generateAadharOTPUsingPOST1(const OAIAadharOtpGenerateRequestPayLoad &generate_otp_request, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  generate_otp_request OAIGenerateMobileOTPRequest [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void generateMobileOTPUsingPOST(const OAIGenerateMobileOTPRequest &generate_otp_request, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  auth_account_aadhaar_otp_request OAIAuthAccountAadhaarOTPRequest [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void retrievalHealthIdByAadharUsingPOST(const OAIAuthAccountAadhaarOTPRequest &auth_account_aadhaar_otp_request, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  retrive_health_id_mobile_pay_load OAIRetriveHealthIdMobilePayLoad [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void retrievalHealthIdByMobileUsingPOST(const OAIRetriveHealthIdMobilePayLoad &retrive_health_id_mobile_pay_load, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void generateAadharOTPUsingPOST1Callback(OAIHttpRequestWorker *worker);
    void generateMobileOTPUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void retrievalHealthIdByAadharUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void retrievalHealthIdByMobileUsingPOSTCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void generateAadharOTPUsingPOST1Signal(OAITxnResponse summary);
    void generateMobileOTPUsingPOSTSignal(OAITxnResponse summary);
    void retrievalHealthIdByAadharUsingPOSTSignal(OAIRetrieveHealthIdPayloadResponse summary);
    void retrievalHealthIdByMobileUsingPOSTSignal(OAIRetrieveHealthIdPayloadResponse summary);


    void generateAadharOTPUsingPOST1SignalFull(OAIHttpRequestWorker *worker, OAITxnResponse summary);
    void generateMobileOTPUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAITxnResponse summary);
    void retrievalHealthIdByAadharUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIRetrieveHealthIdPayloadResponse summary);
    void retrievalHealthIdByMobileUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIRetrieveHealthIdPayloadResponse summary);

    Q_DECL_DEPRECATED_X("Use generateAadharOTPUsingPOST1SignalError() instead")
    void generateAadharOTPUsingPOST1SignalE(OAITxnResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateAadharOTPUsingPOST1SignalError(OAITxnResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateMobileOTPUsingPOSTSignalError() instead")
    void generateMobileOTPUsingPOSTSignalE(OAITxnResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateMobileOTPUsingPOSTSignalError(OAITxnResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrievalHealthIdByAadharUsingPOSTSignalError() instead")
    void retrievalHealthIdByAadharUsingPOSTSignalE(OAIRetrieveHealthIdPayloadResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrievalHealthIdByAadharUsingPOSTSignalError(OAIRetrieveHealthIdPayloadResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrievalHealthIdByMobileUsingPOSTSignalError() instead")
    void retrievalHealthIdByMobileUsingPOSTSignalE(OAIRetrieveHealthIdPayloadResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrievalHealthIdByMobileUsingPOSTSignalError(OAIRetrieveHealthIdPayloadResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use generateAadharOTPUsingPOST1SignalErrorFull() instead")
    void generateAadharOTPUsingPOST1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateAadharOTPUsingPOST1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateMobileOTPUsingPOSTSignalErrorFull() instead")
    void generateMobileOTPUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateMobileOTPUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrievalHealthIdByAadharUsingPOSTSignalErrorFull() instead")
    void retrievalHealthIdByAadharUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrievalHealthIdByAadharUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrievalHealthIdByMobileUsingPOSTSignalErrorFull() instead")
    void retrievalHealthIdByMobileUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrievalHealthIdByMobileUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
