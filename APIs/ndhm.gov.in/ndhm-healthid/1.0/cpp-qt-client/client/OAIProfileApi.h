/**
 * Health ID Service
 * It is important to standardize the process of identification of an individual across healthcare providers, to ensure that the created medical records are issued to the right individual or accessed by a Health Information User through appropriate consent.  In order to issue a Health ID to an individual, one only needs basic demographic details like Name, Year of Birth, Gender. In addition, citizens should be able to update contact information easily.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProfileApi_H
#define OAI_OAIProfileApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIHidChangePasswordRequestPayload.h"
#include "OAIHidOtpRequestPaylaod.h"
#include "OAITxnResponse.h"
#include "OAIUpdateAccountRequest.h"
#include "OAIUserDTO.h"
#include "OAIValidateTokenRequest.h"
#include "OAIVerifyAadhaarOtp.h"
#include <QByteArray>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProfileApi : public QObject {
    Q_OBJECT

public:
    OAIProfileApi(const int timeOut = 0);
    ~OAIProfileApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_token QString [required]
    * @param[in]  hid_otp_request_paylaod OAIHidOtpRequestPaylaod [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void changePasswordViaAadharUsingPOST(const QString &x_token, const OAIHidOtpRequestPaylaod &hid_otp_request_paylaod, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_token QString [required]
    * @param[in]  hid_otp_request_paylaod OAIHidOtpRequestPaylaod [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void changePasswordViaMobileUsingPOST(const QString &x_token, const OAIHidOtpRequestPaylaod &hid_otp_request_paylaod, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_token QString [required]
    * @param[in]  health_facility_password_request OAIHidChangePasswordRequestPayload [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void changePasswordViaUsingPOST(const QString &x_token, const OAIHidChangePasswordRequestPayload &health_facility_password_request, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_token QString [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void deleteAccountUsingDELETE(const QString &x_token, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_token QString [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void generateAadharOTPUsingGET(const QString &x_token, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_token QString [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void generateCardUsingGET(const QString &x_token, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_token QString [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void generateMobileOTPUsingGET(const QString &x_token, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_token QString [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void generatePngCardUsingGET(const QString &x_token, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_token QString [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void generateSvgCardUsingGET(const QString &x_token, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_token QString [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void generatereKycAadharOTPUsingPOST(const QString &x_token, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_token QString [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void getAccountInformationUsingGET(const QString &x_token, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_token QString [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void getBenefitsUsingGET(const QString &x_token, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_token QString [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void getQrCodeUsingGET(const QString &x_token, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_token QString [required]
    * @param[in]  request OAIUpdateAccountRequest [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void updateAccountInformationUsingPOST(const QString &x_token, const OAIUpdateAccountRequest &request, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  request OAIValidateTokenRequest [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void validateTokenUsingPOST(const OAIValidateTokenRequest &request, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_token QString [required]
    * @param[in]  verify_aadhaar_otp OAIVerifyAadhaarOtp [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void verifyAadharOTPOnlyUsingPOST1(const QString &x_token, const OAIVerifyAadhaarOtp &verify_aadhaar_otp, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void changePasswordViaAadharUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void changePasswordViaMobileUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void changePasswordViaUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void deleteAccountUsingDELETECallback(OAIHttpRequestWorker *worker);
    void generateAadharOTPUsingGETCallback(OAIHttpRequestWorker *worker);
    void generateCardUsingGETCallback(OAIHttpRequestWorker *worker);
    void generateMobileOTPUsingGETCallback(OAIHttpRequestWorker *worker);
    void generatePngCardUsingGETCallback(OAIHttpRequestWorker *worker);
    void generateSvgCardUsingGETCallback(OAIHttpRequestWorker *worker);
    void generatereKycAadharOTPUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void getAccountInformationUsingGETCallback(OAIHttpRequestWorker *worker);
    void getBenefitsUsingGETCallback(OAIHttpRequestWorker *worker);
    void getQrCodeUsingGETCallback(OAIHttpRequestWorker *worker);
    void updateAccountInformationUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void validateTokenUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void verifyAadharOTPOnlyUsingPOST1Callback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void changePasswordViaAadharUsingPOSTSignal(QString summary);
    void changePasswordViaMobileUsingPOSTSignal(QString summary);
    void changePasswordViaUsingPOSTSignal(QString summary);
    void deleteAccountUsingDELETESignal(bool summary);
    void generateAadharOTPUsingGETSignal(QString summary);
    void generateCardUsingGETSignal(OAIUserDTO summary);
    void generateMobileOTPUsingGETSignal(QString summary);
    void generatePngCardUsingGETSignal(OAIUserDTO summary);
    void generateSvgCardUsingGETSignal(OAIUserDTO summary);
    void generatereKycAadharOTPUsingPOSTSignal(OAITxnResponse summary);
    void getAccountInformationUsingGETSignal(OAIUserDTO summary);
    void getBenefitsUsingGETSignal(OAIUserDTO summary);
    void getQrCodeUsingGETSignal(QByteArray summary);
    void updateAccountInformationUsingPOSTSignal(OAIUserDTO summary);
    void validateTokenUsingPOSTSignal(bool summary);
    void verifyAadharOTPOnlyUsingPOST1Signal(bool summary);


    void changePasswordViaAadharUsingPOSTSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void changePasswordViaMobileUsingPOSTSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void changePasswordViaUsingPOSTSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void deleteAccountUsingDELETESignalFull(OAIHttpRequestWorker *worker, bool summary);
    void generateAadharOTPUsingGETSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void generateCardUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIUserDTO summary);
    void generateMobileOTPUsingGETSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void generatePngCardUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIUserDTO summary);
    void generateSvgCardUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIUserDTO summary);
    void generatereKycAadharOTPUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAITxnResponse summary);
    void getAccountInformationUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIUserDTO summary);
    void getBenefitsUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIUserDTO summary);
    void getQrCodeUsingGETSignalFull(OAIHttpRequestWorker *worker, QByteArray summary);
    void updateAccountInformationUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIUserDTO summary);
    void validateTokenUsingPOSTSignalFull(OAIHttpRequestWorker *worker, bool summary);
    void verifyAadharOTPOnlyUsingPOST1SignalFull(OAIHttpRequestWorker *worker, bool summary);

    Q_DECL_DEPRECATED_X("Use changePasswordViaAadharUsingPOSTSignalError() instead")
    void changePasswordViaAadharUsingPOSTSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void changePasswordViaAadharUsingPOSTSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changePasswordViaMobileUsingPOSTSignalError() instead")
    void changePasswordViaMobileUsingPOSTSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void changePasswordViaMobileUsingPOSTSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changePasswordViaUsingPOSTSignalError() instead")
    void changePasswordViaUsingPOSTSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void changePasswordViaUsingPOSTSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAccountUsingDELETESignalError() instead")
    void deleteAccountUsingDELETESignalE(bool summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAccountUsingDELETESignalError(bool summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateAadharOTPUsingGETSignalError() instead")
    void generateAadharOTPUsingGETSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateAadharOTPUsingGETSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateCardUsingGETSignalError() instead")
    void generateCardUsingGETSignalE(OAIUserDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateCardUsingGETSignalError(OAIUserDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateMobileOTPUsingGETSignalError() instead")
    void generateMobileOTPUsingGETSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateMobileOTPUsingGETSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generatePngCardUsingGETSignalError() instead")
    void generatePngCardUsingGETSignalE(OAIUserDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generatePngCardUsingGETSignalError(OAIUserDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateSvgCardUsingGETSignalError() instead")
    void generateSvgCardUsingGETSignalE(OAIUserDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateSvgCardUsingGETSignalError(OAIUserDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generatereKycAadharOTPUsingPOSTSignalError() instead")
    void generatereKycAadharOTPUsingPOSTSignalE(OAITxnResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generatereKycAadharOTPUsingPOSTSignalError(OAITxnResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccountInformationUsingGETSignalError() instead")
    void getAccountInformationUsingGETSignalE(OAIUserDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccountInformationUsingGETSignalError(OAIUserDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBenefitsUsingGETSignalError() instead")
    void getBenefitsUsingGETSignalE(OAIUserDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBenefitsUsingGETSignalError(OAIUserDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getQrCodeUsingGETSignalError() instead")
    void getQrCodeUsingGETSignalE(QByteArray summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getQrCodeUsingGETSignalError(QByteArray summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAccountInformationUsingPOSTSignalError() instead")
    void updateAccountInformationUsingPOSTSignalE(OAIUserDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAccountInformationUsingPOSTSignalError(OAIUserDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use validateTokenUsingPOSTSignalError() instead")
    void validateTokenUsingPOSTSignalE(bool summary, QNetworkReply::NetworkError error_type, QString error_str);
    void validateTokenUsingPOSTSignalError(bool summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use verifyAadharOTPOnlyUsingPOST1SignalError() instead")
    void verifyAadharOTPOnlyUsingPOST1SignalE(bool summary, QNetworkReply::NetworkError error_type, QString error_str);
    void verifyAadharOTPOnlyUsingPOST1SignalError(bool summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use changePasswordViaAadharUsingPOSTSignalErrorFull() instead")
    void changePasswordViaAadharUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void changePasswordViaAadharUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changePasswordViaMobileUsingPOSTSignalErrorFull() instead")
    void changePasswordViaMobileUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void changePasswordViaMobileUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changePasswordViaUsingPOSTSignalErrorFull() instead")
    void changePasswordViaUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void changePasswordViaUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAccountUsingDELETESignalErrorFull() instead")
    void deleteAccountUsingDELETESignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAccountUsingDELETESignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateAadharOTPUsingGETSignalErrorFull() instead")
    void generateAadharOTPUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateAadharOTPUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateCardUsingGETSignalErrorFull() instead")
    void generateCardUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateCardUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateMobileOTPUsingGETSignalErrorFull() instead")
    void generateMobileOTPUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateMobileOTPUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generatePngCardUsingGETSignalErrorFull() instead")
    void generatePngCardUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generatePngCardUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateSvgCardUsingGETSignalErrorFull() instead")
    void generateSvgCardUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateSvgCardUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generatereKycAadharOTPUsingPOSTSignalErrorFull() instead")
    void generatereKycAadharOTPUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generatereKycAadharOTPUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccountInformationUsingGETSignalErrorFull() instead")
    void getAccountInformationUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccountInformationUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBenefitsUsingGETSignalErrorFull() instead")
    void getBenefitsUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBenefitsUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getQrCodeUsingGETSignalErrorFull() instead")
    void getQrCodeUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getQrCodeUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAccountInformationUsingPOSTSignalErrorFull() instead")
    void updateAccountInformationUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAccountInformationUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use validateTokenUsingPOSTSignalErrorFull() instead")
    void validateTokenUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void validateTokenUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use verifyAadharOTPOnlyUsingPOST1SignalErrorFull() instead")
    void verifyAadharOTPOnlyUsingPOST1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void verifyAadharOTPOnlyUsingPOST1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
