/**
 * Health ID Service
 * It is important to standardize the process of identification of an individual across healthcare providers, to ensure that the created medical records are issued to the right individual or accessed by a Health Information User through appropriate consent.  In order to issue a Health ID to an individual, one only needs basic demographic details like Name, Year of Birth, Gender. In addition, citizens should be able to update contact information easily.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProfileApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIProfileApi::OAIProfileApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIProfileApi::~OAIProfileApi() {
}

void OAIProfileApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://healthidsbx.ndhm.gov.in/api"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("changePasswordViaAadharUsingPOST", defaultConf);
    _serverIndices.insert("changePasswordViaAadharUsingPOST", 0);
    _serverConfigs.insert("changePasswordViaMobileUsingPOST", defaultConf);
    _serverIndices.insert("changePasswordViaMobileUsingPOST", 0);
    _serverConfigs.insert("changePasswordViaUsingPOST", defaultConf);
    _serverIndices.insert("changePasswordViaUsingPOST", 0);
    _serverConfigs.insert("deleteAccountUsingDELETE", defaultConf);
    _serverIndices.insert("deleteAccountUsingDELETE", 0);
    _serverConfigs.insert("generateAadharOTPUsingGET", defaultConf);
    _serverIndices.insert("generateAadharOTPUsingGET", 0);
    _serverConfigs.insert("generateCardUsingGET", defaultConf);
    _serverIndices.insert("generateCardUsingGET", 0);
    _serverConfigs.insert("generateMobileOTPUsingGET", defaultConf);
    _serverIndices.insert("generateMobileOTPUsingGET", 0);
    _serverConfigs.insert("generatePngCardUsingGET", defaultConf);
    _serverIndices.insert("generatePngCardUsingGET", 0);
    _serverConfigs.insert("generateSvgCardUsingGET", defaultConf);
    _serverIndices.insert("generateSvgCardUsingGET", 0);
    _serverConfigs.insert("generatereKycAadharOTPUsingPOST", defaultConf);
    _serverIndices.insert("generatereKycAadharOTPUsingPOST", 0);
    _serverConfigs.insert("getAccountInformationUsingGET", defaultConf);
    _serverIndices.insert("getAccountInformationUsingGET", 0);
    _serverConfigs.insert("getBenefitsUsingGET", defaultConf);
    _serverIndices.insert("getBenefitsUsingGET", 0);
    _serverConfigs.insert("getQrCodeUsingGET", defaultConf);
    _serverIndices.insert("getQrCodeUsingGET", 0);
    _serverConfigs.insert("updateAccountInformationUsingPOST", defaultConf);
    _serverIndices.insert("updateAccountInformationUsingPOST", 0);
    _serverConfigs.insert("validateTokenUsingPOST", defaultConf);
    _serverIndices.insert("validateTokenUsingPOST", 0);
    _serverConfigs.insert("verifyAadharOTPOnlyUsingPOST1", defaultConf);
    _serverIndices.insert("verifyAadharOTPOnlyUsingPOST1", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIProfileApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIProfileApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIProfileApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIProfileApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIProfileApi::setUsername(const QString &username) {
    _username = username;
}

void OAIProfileApi::setPassword(const QString &password) {
    _password = password;
}


void OAIProfileApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIProfileApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIProfileApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIProfileApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIProfileApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIProfileApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIProfileApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIProfileApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIProfileApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIProfileApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIProfileApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIProfileApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIProfileApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIProfileApi::changePasswordViaAadharUsingPOST(const QString &x_token, const OAIHidOtpRequestPaylaod &hid_otp_request_paylaod, const ::OpenAPI::OptionalParam<QString> &accept_language) {
    QString fullPath = QString(_serverConfigs["changePasswordViaAadharUsingPOST"][_serverIndices.value("changePasswordViaAadharUsingPOST")].URL()+"/v1/account/change/passwd/byAadhaar");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    if (_apiKeys.contains("X-HIP-ID")) {
        addHeaders("X-HIP-ID",_apiKeys.find("X-HIP-ID").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = hid_otp_request_paylaod.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept_language.value()).isEmpty()) {
            input.headers.insert("Accept-Language", ::OpenAPI::toStringValue(accept_language.value()));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_token).isEmpty()) {
            input.headers.insert("X-Token", ::OpenAPI::toStringValue(x_token));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProfileApi::changePasswordViaAadharUsingPOSTCallback);
    connect(this, &OAIProfileApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProfileApi::changePasswordViaAadharUsingPOSTCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QString output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT changePasswordViaAadharUsingPOSTSignal(output);
        Q_EMIT changePasswordViaAadharUsingPOSTSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT changePasswordViaAadharUsingPOSTSignalE(output, error_type, error_str);
        Q_EMIT changePasswordViaAadharUsingPOSTSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT changePasswordViaAadharUsingPOSTSignalError(output, error_type, error_str);
        Q_EMIT changePasswordViaAadharUsingPOSTSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProfileApi::changePasswordViaMobileUsingPOST(const QString &x_token, const OAIHidOtpRequestPaylaod &hid_otp_request_paylaod, const ::OpenAPI::OptionalParam<QString> &accept_language) {
    QString fullPath = QString(_serverConfigs["changePasswordViaMobileUsingPOST"][_serverIndices.value("changePasswordViaMobileUsingPOST")].URL()+"/v1/account/change/passwd/byMobile");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    if (_apiKeys.contains("X-HIP-ID")) {
        addHeaders("X-HIP-ID",_apiKeys.find("X-HIP-ID").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = hid_otp_request_paylaod.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept_language.value()).isEmpty()) {
            input.headers.insert("Accept-Language", ::OpenAPI::toStringValue(accept_language.value()));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_token).isEmpty()) {
            input.headers.insert("X-Token", ::OpenAPI::toStringValue(x_token));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProfileApi::changePasswordViaMobileUsingPOSTCallback);
    connect(this, &OAIProfileApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProfileApi::changePasswordViaMobileUsingPOSTCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QString output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT changePasswordViaMobileUsingPOSTSignal(output);
        Q_EMIT changePasswordViaMobileUsingPOSTSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT changePasswordViaMobileUsingPOSTSignalE(output, error_type, error_str);
        Q_EMIT changePasswordViaMobileUsingPOSTSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT changePasswordViaMobileUsingPOSTSignalError(output, error_type, error_str);
        Q_EMIT changePasswordViaMobileUsingPOSTSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProfileApi::changePasswordViaUsingPOST(const QString &x_token, const OAIHidChangePasswordRequestPayload &health_facility_password_request, const ::OpenAPI::OptionalParam<QString> &accept_language) {
    QString fullPath = QString(_serverConfigs["changePasswordViaUsingPOST"][_serverIndices.value("changePasswordViaUsingPOST")].URL()+"/v1/account/change/password");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    if (_apiKeys.contains("X-HIP-ID")) {
        addHeaders("X-HIP-ID",_apiKeys.find("X-HIP-ID").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = health_facility_password_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept_language.value()).isEmpty()) {
            input.headers.insert("Accept-Language", ::OpenAPI::toStringValue(accept_language.value()));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_token).isEmpty()) {
            input.headers.insert("X-Token", ::OpenAPI::toStringValue(x_token));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProfileApi::changePasswordViaUsingPOSTCallback);
    connect(this, &OAIProfileApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProfileApi::changePasswordViaUsingPOSTCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QString output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT changePasswordViaUsingPOSTSignal(output);
        Q_EMIT changePasswordViaUsingPOSTSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT changePasswordViaUsingPOSTSignalE(output, error_type, error_str);
        Q_EMIT changePasswordViaUsingPOSTSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT changePasswordViaUsingPOSTSignalError(output, error_type, error_str);
        Q_EMIT changePasswordViaUsingPOSTSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProfileApi::deleteAccountUsingDELETE(const QString &x_token, const ::OpenAPI::OptionalParam<QString> &accept_language) {
    QString fullPath = QString(_serverConfigs["deleteAccountUsingDELETE"][_serverIndices.value("deleteAccountUsingDELETE")].URL()+"/v1/account/profile");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    if (_apiKeys.contains("X-HIP-ID")) {
        addHeaders("X-HIP-ID",_apiKeys.find("X-HIP-ID").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept_language.value()).isEmpty()) {
            input.headers.insert("Accept-Language", ::OpenAPI::toStringValue(accept_language.value()));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_token).isEmpty()) {
            input.headers.insert("X-Token", ::OpenAPI::toStringValue(x_token));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProfileApi::deleteAccountUsingDELETECallback);
    connect(this, &OAIProfileApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProfileApi::deleteAccountUsingDELETECallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    bool output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteAccountUsingDELETESignal(output);
        Q_EMIT deleteAccountUsingDELETESignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteAccountUsingDELETESignalE(output, error_type, error_str);
        Q_EMIT deleteAccountUsingDELETESignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteAccountUsingDELETESignalError(output, error_type, error_str);
        Q_EMIT deleteAccountUsingDELETESignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProfileApi::generateAadharOTPUsingGET(const QString &x_token, const ::OpenAPI::OptionalParam<QString> &accept_language) {
    QString fullPath = QString(_serverConfigs["generateAadharOTPUsingGET"][_serverIndices.value("generateAadharOTPUsingGET")].URL()+"/v1/account/change/passwd/generateAadhaarOTP");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    if (_apiKeys.contains("X-HIP-ID")) {
        addHeaders("X-HIP-ID",_apiKeys.find("X-HIP-ID").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept_language.value()).isEmpty()) {
            input.headers.insert("Accept-Language", ::OpenAPI::toStringValue(accept_language.value()));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_token).isEmpty()) {
            input.headers.insert("X-Token", ::OpenAPI::toStringValue(x_token));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProfileApi::generateAadharOTPUsingGETCallback);
    connect(this, &OAIProfileApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProfileApi::generateAadharOTPUsingGETCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QString output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT generateAadharOTPUsingGETSignal(output);
        Q_EMIT generateAadharOTPUsingGETSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT generateAadharOTPUsingGETSignalE(output, error_type, error_str);
        Q_EMIT generateAadharOTPUsingGETSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT generateAadharOTPUsingGETSignalError(output, error_type, error_str);
        Q_EMIT generateAadharOTPUsingGETSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProfileApi::generateCardUsingGET(const QString &x_token, const ::OpenAPI::OptionalParam<QString> &accept_language) {
    QString fullPath = QString(_serverConfigs["generateCardUsingGET"][_serverIndices.value("generateCardUsingGET")].URL()+"/v1/account/getCard");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    if (_apiKeys.contains("X-HIP-ID")) {
        addHeaders("X-HIP-ID",_apiKeys.find("X-HIP-ID").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept_language.value()).isEmpty()) {
            input.headers.insert("Accept-Language", ::OpenAPI::toStringValue(accept_language.value()));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_token).isEmpty()) {
            input.headers.insert("X-Token", ::OpenAPI::toStringValue(x_token));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProfileApi::generateCardUsingGETCallback);
    connect(this, &OAIProfileApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProfileApi::generateCardUsingGETCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIUserDTO output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT generateCardUsingGETSignal(output);
        Q_EMIT generateCardUsingGETSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT generateCardUsingGETSignalE(output, error_type, error_str);
        Q_EMIT generateCardUsingGETSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT generateCardUsingGETSignalError(output, error_type, error_str);
        Q_EMIT generateCardUsingGETSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProfileApi::generateMobileOTPUsingGET(const QString &x_token, const ::OpenAPI::OptionalParam<QString> &accept_language) {
    QString fullPath = QString(_serverConfigs["generateMobileOTPUsingGET"][_serverIndices.value("generateMobileOTPUsingGET")].URL()+"/v1/account/change/passwd/generateMobileOTP");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    if (_apiKeys.contains("X-HIP-ID")) {
        addHeaders("X-HIP-ID",_apiKeys.find("X-HIP-ID").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept_language.value()).isEmpty()) {
            input.headers.insert("Accept-Language", ::OpenAPI::toStringValue(accept_language.value()));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_token).isEmpty()) {
            input.headers.insert("X-Token", ::OpenAPI::toStringValue(x_token));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProfileApi::generateMobileOTPUsingGETCallback);
    connect(this, &OAIProfileApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProfileApi::generateMobileOTPUsingGETCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QString output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT generateMobileOTPUsingGETSignal(output);
        Q_EMIT generateMobileOTPUsingGETSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT generateMobileOTPUsingGETSignalE(output, error_type, error_str);
        Q_EMIT generateMobileOTPUsingGETSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT generateMobileOTPUsingGETSignalError(output, error_type, error_str);
        Q_EMIT generateMobileOTPUsingGETSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProfileApi::generatePngCardUsingGET(const QString &x_token, const ::OpenAPI::OptionalParam<QString> &accept_language) {
    QString fullPath = QString(_serverConfigs["generatePngCardUsingGET"][_serverIndices.value("generatePngCardUsingGET")].URL()+"/v1/account/getPngCard");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    if (_apiKeys.contains("X-HIP-ID")) {
        addHeaders("X-HIP-ID",_apiKeys.find("X-HIP-ID").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept_language.value()).isEmpty()) {
            input.headers.insert("Accept-Language", ::OpenAPI::toStringValue(accept_language.value()));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_token).isEmpty()) {
            input.headers.insert("X-Token", ::OpenAPI::toStringValue(x_token));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProfileApi::generatePngCardUsingGETCallback);
    connect(this, &OAIProfileApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProfileApi::generatePngCardUsingGETCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIUserDTO output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT generatePngCardUsingGETSignal(output);
        Q_EMIT generatePngCardUsingGETSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT generatePngCardUsingGETSignalE(output, error_type, error_str);
        Q_EMIT generatePngCardUsingGETSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT generatePngCardUsingGETSignalError(output, error_type, error_str);
        Q_EMIT generatePngCardUsingGETSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProfileApi::generateSvgCardUsingGET(const QString &x_token, const ::OpenAPI::OptionalParam<QString> &accept_language) {
    QString fullPath = QString(_serverConfigs["generateSvgCardUsingGET"][_serverIndices.value("generateSvgCardUsingGET")].URL()+"/v1/account/getSvgCard");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    if (_apiKeys.contains("X-HIP-ID")) {
        addHeaders("X-HIP-ID",_apiKeys.find("X-HIP-ID").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept_language.value()).isEmpty()) {
            input.headers.insert("Accept-Language", ::OpenAPI::toStringValue(accept_language.value()));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_token).isEmpty()) {
            input.headers.insert("X-Token", ::OpenAPI::toStringValue(x_token));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProfileApi::generateSvgCardUsingGETCallback);
    connect(this, &OAIProfileApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProfileApi::generateSvgCardUsingGETCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIUserDTO output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT generateSvgCardUsingGETSignal(output);
        Q_EMIT generateSvgCardUsingGETSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT generateSvgCardUsingGETSignalE(output, error_type, error_str);
        Q_EMIT generateSvgCardUsingGETSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT generateSvgCardUsingGETSignalError(output, error_type, error_str);
        Q_EMIT generateSvgCardUsingGETSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProfileApi::generatereKycAadharOTPUsingPOST(const QString &x_token, const ::OpenAPI::OptionalParam<QString> &accept_language) {
    QString fullPath = QString(_serverConfigs["generatereKycAadharOTPUsingPOST"][_serverIndices.value("generatereKycAadharOTPUsingPOST")].URL()+"/v1/account/aadhaar/generateOTP");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    if (_apiKeys.contains("X-HIP-ID")) {
        addHeaders("X-HIP-ID",_apiKeys.find("X-HIP-ID").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept_language.value()).isEmpty()) {
            input.headers.insert("Accept-Language", ::OpenAPI::toStringValue(accept_language.value()));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_token).isEmpty()) {
            input.headers.insert("X-Token", ::OpenAPI::toStringValue(x_token));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProfileApi::generatereKycAadharOTPUsingPOSTCallback);
    connect(this, &OAIProfileApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProfileApi::generatereKycAadharOTPUsingPOSTCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITxnResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT generatereKycAadharOTPUsingPOSTSignal(output);
        Q_EMIT generatereKycAadharOTPUsingPOSTSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT generatereKycAadharOTPUsingPOSTSignalE(output, error_type, error_str);
        Q_EMIT generatereKycAadharOTPUsingPOSTSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT generatereKycAadharOTPUsingPOSTSignalError(output, error_type, error_str);
        Q_EMIT generatereKycAadharOTPUsingPOSTSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProfileApi::getAccountInformationUsingGET(const QString &x_token, const ::OpenAPI::OptionalParam<QString> &accept_language) {
    QString fullPath = QString(_serverConfigs["getAccountInformationUsingGET"][_serverIndices.value("getAccountInformationUsingGET")].URL()+"/v1/account/profile");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    if (_apiKeys.contains("X-HIP-ID")) {
        addHeaders("X-HIP-ID",_apiKeys.find("X-HIP-ID").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept_language.value()).isEmpty()) {
            input.headers.insert("Accept-Language", ::OpenAPI::toStringValue(accept_language.value()));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_token).isEmpty()) {
            input.headers.insert("X-Token", ::OpenAPI::toStringValue(x_token));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProfileApi::getAccountInformationUsingGETCallback);
    connect(this, &OAIProfileApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProfileApi::getAccountInformationUsingGETCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIUserDTO output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getAccountInformationUsingGETSignal(output);
        Q_EMIT getAccountInformationUsingGETSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getAccountInformationUsingGETSignalE(output, error_type, error_str);
        Q_EMIT getAccountInformationUsingGETSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getAccountInformationUsingGETSignalError(output, error_type, error_str);
        Q_EMIT getAccountInformationUsingGETSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProfileApi::getBenefitsUsingGET(const QString &x_token, const ::OpenAPI::OptionalParam<QString> &accept_language) {
    QString fullPath = QString(_serverConfigs["getBenefitsUsingGET"][_serverIndices.value("getBenefitsUsingGET")].URL()+"/v1/account/benefits");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    if (_apiKeys.contains("X-HIP-ID")) {
        addHeaders("X-HIP-ID",_apiKeys.find("X-HIP-ID").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept_language.value()).isEmpty()) {
            input.headers.insert("Accept-Language", ::OpenAPI::toStringValue(accept_language.value()));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_token).isEmpty()) {
            input.headers.insert("X-Token", ::OpenAPI::toStringValue(x_token));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProfileApi::getBenefitsUsingGETCallback);
    connect(this, &OAIProfileApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProfileApi::getBenefitsUsingGETCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIUserDTO output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getBenefitsUsingGETSignal(output);
        Q_EMIT getBenefitsUsingGETSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getBenefitsUsingGETSignalE(output, error_type, error_str);
        Q_EMIT getBenefitsUsingGETSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getBenefitsUsingGETSignalError(output, error_type, error_str);
        Q_EMIT getBenefitsUsingGETSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProfileApi::getQrCodeUsingGET(const QString &x_token, const ::OpenAPI::OptionalParam<QString> &accept_language) {
    QString fullPath = QString(_serverConfigs["getQrCodeUsingGET"][_serverIndices.value("getQrCodeUsingGET")].URL()+"/v1/account/qrCode");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    if (_apiKeys.contains("X-HIP-ID")) {
        addHeaders("X-HIP-ID",_apiKeys.find("X-HIP-ID").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept_language.value()).isEmpty()) {
            input.headers.insert("Accept-Language", ::OpenAPI::toStringValue(accept_language.value()));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_token).isEmpty()) {
            input.headers.insert("X-Token", ::OpenAPI::toStringValue(x_token));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProfileApi::getQrCodeUsingGETCallback);
    connect(this, &OAIProfileApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProfileApi::getQrCodeUsingGETCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QByteArray output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getQrCodeUsingGETSignal(output);
        Q_EMIT getQrCodeUsingGETSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getQrCodeUsingGETSignalE(output, error_type, error_str);
        Q_EMIT getQrCodeUsingGETSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getQrCodeUsingGETSignalError(output, error_type, error_str);
        Q_EMIT getQrCodeUsingGETSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProfileApi::updateAccountInformationUsingPOST(const QString &x_token, const OAIUpdateAccountRequest &request, const ::OpenAPI::OptionalParam<QString> &accept_language) {
    QString fullPath = QString(_serverConfigs["updateAccountInformationUsingPOST"][_serverIndices.value("updateAccountInformationUsingPOST")].URL()+"/v1/account/profile");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    if (_apiKeys.contains("X-HIP-ID")) {
        addHeaders("X-HIP-ID",_apiKeys.find("X-HIP-ID").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = request.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept_language.value()).isEmpty()) {
            input.headers.insert("Accept-Language", ::OpenAPI::toStringValue(accept_language.value()));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_token).isEmpty()) {
            input.headers.insert("X-Token", ::OpenAPI::toStringValue(x_token));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProfileApi::updateAccountInformationUsingPOSTCallback);
    connect(this, &OAIProfileApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProfileApi::updateAccountInformationUsingPOSTCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIUserDTO output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateAccountInformationUsingPOSTSignal(output);
        Q_EMIT updateAccountInformationUsingPOSTSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateAccountInformationUsingPOSTSignalE(output, error_type, error_str);
        Q_EMIT updateAccountInformationUsingPOSTSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateAccountInformationUsingPOSTSignalError(output, error_type, error_str);
        Q_EMIT updateAccountInformationUsingPOSTSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProfileApi::validateTokenUsingPOST(const OAIValidateTokenRequest &request, const ::OpenAPI::OptionalParam<QString> &accept_language) {
    QString fullPath = QString(_serverConfigs["validateTokenUsingPOST"][_serverIndices.value("validateTokenUsingPOST")].URL()+"/v1/account/token");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    if (_apiKeys.contains("X-HIP-ID")) {
        addHeaders("X-HIP-ID",_apiKeys.find("X-HIP-ID").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = request.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept_language.value()).isEmpty()) {
            input.headers.insert("Accept-Language", ::OpenAPI::toStringValue(accept_language.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProfileApi::validateTokenUsingPOSTCallback);
    connect(this, &OAIProfileApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProfileApi::validateTokenUsingPOSTCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    bool output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT validateTokenUsingPOSTSignal(output);
        Q_EMIT validateTokenUsingPOSTSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT validateTokenUsingPOSTSignalE(output, error_type, error_str);
        Q_EMIT validateTokenUsingPOSTSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT validateTokenUsingPOSTSignalError(output, error_type, error_str);
        Q_EMIT validateTokenUsingPOSTSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProfileApi::verifyAadharOTPOnlyUsingPOST1(const QString &x_token, const OAIVerifyAadhaarOtp &verify_aadhaar_otp, const ::OpenAPI::OptionalParam<QString> &accept_language) {
    QString fullPath = QString(_serverConfigs["verifyAadharOTPOnlyUsingPOST1"][_serverIndices.value("verifyAadharOTPOnlyUsingPOST1")].URL()+"/v1/account/aadhaar/verifyOTP");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    if (_apiKeys.contains("X-HIP-ID")) {
        addHeaders("X-HIP-ID",_apiKeys.find("X-HIP-ID").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = verify_aadhaar_otp.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept_language.value()).isEmpty()) {
            input.headers.insert("Accept-Language", ::OpenAPI::toStringValue(accept_language.value()));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_token).isEmpty()) {
            input.headers.insert("X-Token", ::OpenAPI::toStringValue(x_token));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProfileApi::verifyAadharOTPOnlyUsingPOST1Callback);
    connect(this, &OAIProfileApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProfileApi::verifyAadharOTPOnlyUsingPOST1Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    bool output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT verifyAadharOTPOnlyUsingPOST1Signal(output);
        Q_EMIT verifyAadharOTPOnlyUsingPOST1SignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT verifyAadharOTPOnlyUsingPOST1SignalE(output, error_type, error_str);
        Q_EMIT verifyAadharOTPOnlyUsingPOST1SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT verifyAadharOTPOnlyUsingPOST1SignalError(output, error_type, error_str);
        Q_EMIT verifyAadharOTPOnlyUsingPOST1SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProfileApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
