/**
 * Health ID Service
 * It is important to standardize the process of identification of an individual across healthcare providers, to ensure that the created medical records are issued to the right individual or accessed by a Health Information User through appropriate consent.  In order to issue a Health ID to an individual, one only needs basic demographic details like Name, Year of Birth, Gender. In addition, citizens should be able to update contact information easily.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIIntegratedProgramsApi_H
#define OAI_OAIIntegratedProgramsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAadharNumberRequestPayload.h"
#include "OAIAadharOtpGenerateRequestPayLoad.h"
#include "OAICreateHIdDemoAuthRequest.h"
#include "OAICreateHealthIdOptRequest.h"
#include "OAICreateHidBiometricRequest.h"
#include "OAICreateHidMobileRequest.h"
#include "OAICreateHidNotifyBenefitRequest.h"
#include "OAIGenerateMobileOTPRequest.h"
#include "OAIHidBenefitDelinkRequestPayload.h"
#include "OAIHidBenefitLinkedRequestPayload.h"
#include "OAIHidBenefitLinkedResponsePayload.h"
#include "OAIHidBenefitNameSearchRequest.h"
#include "OAIHidBenefitRequestPayload.h"
#include "OAIHidBenefitSearchResponsePayload.h"
#include "OAIHidStatusRequestPayload.h"
#include "OAIHidUpdateAccountRequest.h"
#include "OAIHidUpdateMobiletRequest.h"
#include "OAIObject.h"
#include "OAITxnResponse.h"
#include "OAIUserDTO.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIIntegratedProgramsApi : public QObject {
    Q_OBJECT

public:
    OAIIntegratedProgramsApi(const int timeOut = 0);
    ~OAIIntegratedProgramsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  create_hid_demo_auth_request OAICreateHIdDemoAuthRequest [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void createHealthIdByDemoAuthUsingPOST(const OAICreateHIdDemoAuthRequest &create_hid_demo_auth_request, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  create_hid_mobile_request OAICreateHidMobileRequest [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void createHealthIdByMobileUsingPOST(const OAICreateHidMobileRequest &create_hid_mobile_request, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  hid_benefit_linked_request_payload OAIHidBenefitDelinkRequestPayload [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void delinkHidBenefitUsingPOST(const OAIHidBenefitDelinkRequestPayload &hid_benefit_linked_request_payload, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aadhar_number_request_payload OAIAadharNumberRequestPayload [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void findByAadharUsingPOST(const OAIAadharNumberRequestPayload &aadhar_number_request_payload, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  search_request OAIHidBenefitNameSearchRequest [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void findByHealthIdUsingPOST(const OAIHidBenefitNameSearchRequest &search_request, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  generate_otp_request OAIAadharOtpGenerateRequestPayLoad [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void generateAadharOTPUsingPOST2(const OAIAadharOtpGenerateRequestPayLoad &generate_otp_request, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  generate_otp_request OAIGenerateMobileOTPRequest [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void generateMobileOtpUsingPOST(const OAIGenerateMobileOTPRequest &generate_otp_request, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  hid_benefit_linked_request_payload OAIHidBenefitLinkedRequestPayload [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void linkHidBenefitUsingPOST(const OAIHidBenefitLinkedRequestPayload &hid_benefit_linked_request_payload, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  create_hid_notify_benefit_request OAICreateHidNotifyBenefitRequest [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void notifyBenefitUsingPOST(const OAICreateHidNotifyBenefitRequest &create_hid_notify_benefit_request, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  request OAIHidUpdateAccountRequest [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void updateAccountInformationUsingPOST1(const OAIHidUpdateAccountRequest &request, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  request OAIHidUpdateMobiletRequest [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void updateMobileInformationUsingPOST(const OAIHidUpdateMobiletRequest &request, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  generate_otp_request OAIHidStatusRequestPayload [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void updateStatusUsingPOST(const OAIHidStatusRequestPayload &generate_otp_request, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  create_health_id_opt_request OAICreateHealthIdOptRequest [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void verifyAadharOtpUsingPOST(const OAICreateHealthIdOptRequest &create_health_id_opt_request, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  create_hid_biometric_request OAICreateHidBiometricRequest [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void verifyBioUsingPOST(const OAICreateHidBiometricRequest &create_hid_biometric_request, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createHealthIdByDemoAuthUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void createHealthIdByMobileUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void delinkHidBenefitUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void findByAadharUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void findByHealthIdUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void generateAadharOTPUsingPOST2Callback(OAIHttpRequestWorker *worker);
    void generateMobileOtpUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void linkHidBenefitUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void notifyBenefitUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void updateAccountInformationUsingPOST1Callback(OAIHttpRequestWorker *worker);
    void updateMobileInformationUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void updateStatusUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void verifyAadharOtpUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void verifyBioUsingPOSTCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createHealthIdByDemoAuthUsingPOSTSignal(OAIHidBenefitRequestPayload summary);
    void createHealthIdByMobileUsingPOSTSignal(OAITxnResponse summary);
    void delinkHidBenefitUsingPOSTSignal(OAIHidBenefitLinkedResponsePayload summary);
    void findByAadharUsingPOSTSignal(QList<OAIObject> summary);
    void findByHealthIdUsingPOSTSignal(QList<OAIHidBenefitSearchResponsePayload> summary);
    void generateAadharOTPUsingPOST2Signal(OAITxnResponse summary);
    void generateMobileOtpUsingPOSTSignal(OAITxnResponse summary);
    void linkHidBenefitUsingPOSTSignal(OAIHidBenefitLinkedResponsePayload summary);
    void notifyBenefitUsingPOSTSignal(OAIHidBenefitRequestPayload summary);
    void updateAccountInformationUsingPOST1Signal(OAIUserDTO summary);
    void updateMobileInformationUsingPOSTSignal(OAIUserDTO summary);
    void updateStatusUsingPOSTSignal(bool summary);
    void verifyAadharOtpUsingPOSTSignal(OAIHidBenefitRequestPayload summary);
    void verifyBioUsingPOSTSignal(OAIHidBenefitRequestPayload summary);


    void createHealthIdByDemoAuthUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIHidBenefitRequestPayload summary);
    void createHealthIdByMobileUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAITxnResponse summary);
    void delinkHidBenefitUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIHidBenefitLinkedResponsePayload summary);
    void findByAadharUsingPOSTSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void findByHealthIdUsingPOSTSignalFull(OAIHttpRequestWorker *worker, QList<OAIHidBenefitSearchResponsePayload> summary);
    void generateAadharOTPUsingPOST2SignalFull(OAIHttpRequestWorker *worker, OAITxnResponse summary);
    void generateMobileOtpUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAITxnResponse summary);
    void linkHidBenefitUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIHidBenefitLinkedResponsePayload summary);
    void notifyBenefitUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIHidBenefitRequestPayload summary);
    void updateAccountInformationUsingPOST1SignalFull(OAIHttpRequestWorker *worker, OAIUserDTO summary);
    void updateMobileInformationUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIUserDTO summary);
    void updateStatusUsingPOSTSignalFull(OAIHttpRequestWorker *worker, bool summary);
    void verifyAadharOtpUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIHidBenefitRequestPayload summary);
    void verifyBioUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIHidBenefitRequestPayload summary);

    Q_DECL_DEPRECATED_X("Use createHealthIdByDemoAuthUsingPOSTSignalError() instead")
    void createHealthIdByDemoAuthUsingPOSTSignalE(OAIHidBenefitRequestPayload summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createHealthIdByDemoAuthUsingPOSTSignalError(OAIHidBenefitRequestPayload summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createHealthIdByMobileUsingPOSTSignalError() instead")
    void createHealthIdByMobileUsingPOSTSignalE(OAITxnResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createHealthIdByMobileUsingPOSTSignalError(OAITxnResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use delinkHidBenefitUsingPOSTSignalError() instead")
    void delinkHidBenefitUsingPOSTSignalE(OAIHidBenefitLinkedResponsePayload summary, QNetworkReply::NetworkError error_type, QString error_str);
    void delinkHidBenefitUsingPOSTSignalError(OAIHidBenefitLinkedResponsePayload summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findByAadharUsingPOSTSignalError() instead")
    void findByAadharUsingPOSTSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findByAadharUsingPOSTSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findByHealthIdUsingPOSTSignalError() instead")
    void findByHealthIdUsingPOSTSignalE(QList<OAIHidBenefitSearchResponsePayload> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findByHealthIdUsingPOSTSignalError(QList<OAIHidBenefitSearchResponsePayload> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateAadharOTPUsingPOST2SignalError() instead")
    void generateAadharOTPUsingPOST2SignalE(OAITxnResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateAadharOTPUsingPOST2SignalError(OAITxnResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateMobileOtpUsingPOSTSignalError() instead")
    void generateMobileOtpUsingPOSTSignalE(OAITxnResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateMobileOtpUsingPOSTSignalError(OAITxnResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use linkHidBenefitUsingPOSTSignalError() instead")
    void linkHidBenefitUsingPOSTSignalE(OAIHidBenefitLinkedResponsePayload summary, QNetworkReply::NetworkError error_type, QString error_str);
    void linkHidBenefitUsingPOSTSignalError(OAIHidBenefitLinkedResponsePayload summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notifyBenefitUsingPOSTSignalError() instead")
    void notifyBenefitUsingPOSTSignalE(OAIHidBenefitRequestPayload summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notifyBenefitUsingPOSTSignalError(OAIHidBenefitRequestPayload summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAccountInformationUsingPOST1SignalError() instead")
    void updateAccountInformationUsingPOST1SignalE(OAIUserDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAccountInformationUsingPOST1SignalError(OAIUserDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateMobileInformationUsingPOSTSignalError() instead")
    void updateMobileInformationUsingPOSTSignalE(OAIUserDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateMobileInformationUsingPOSTSignalError(OAIUserDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateStatusUsingPOSTSignalError() instead")
    void updateStatusUsingPOSTSignalE(bool summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateStatusUsingPOSTSignalError(bool summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use verifyAadharOtpUsingPOSTSignalError() instead")
    void verifyAadharOtpUsingPOSTSignalE(OAIHidBenefitRequestPayload summary, QNetworkReply::NetworkError error_type, QString error_str);
    void verifyAadharOtpUsingPOSTSignalError(OAIHidBenefitRequestPayload summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use verifyBioUsingPOSTSignalError() instead")
    void verifyBioUsingPOSTSignalE(OAIHidBenefitRequestPayload summary, QNetworkReply::NetworkError error_type, QString error_str);
    void verifyBioUsingPOSTSignalError(OAIHidBenefitRequestPayload summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createHealthIdByDemoAuthUsingPOSTSignalErrorFull() instead")
    void createHealthIdByDemoAuthUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createHealthIdByDemoAuthUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createHealthIdByMobileUsingPOSTSignalErrorFull() instead")
    void createHealthIdByMobileUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createHealthIdByMobileUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use delinkHidBenefitUsingPOSTSignalErrorFull() instead")
    void delinkHidBenefitUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void delinkHidBenefitUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findByAadharUsingPOSTSignalErrorFull() instead")
    void findByAadharUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findByAadharUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findByHealthIdUsingPOSTSignalErrorFull() instead")
    void findByHealthIdUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findByHealthIdUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateAadharOTPUsingPOST2SignalErrorFull() instead")
    void generateAadharOTPUsingPOST2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateAadharOTPUsingPOST2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateMobileOtpUsingPOSTSignalErrorFull() instead")
    void generateMobileOtpUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateMobileOtpUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use linkHidBenefitUsingPOSTSignalErrorFull() instead")
    void linkHidBenefitUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void linkHidBenefitUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notifyBenefitUsingPOSTSignalErrorFull() instead")
    void notifyBenefitUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notifyBenefitUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAccountInformationUsingPOST1SignalErrorFull() instead")
    void updateAccountInformationUsingPOST1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAccountInformationUsingPOST1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateMobileInformationUsingPOSTSignalErrorFull() instead")
    void updateMobileInformationUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateMobileInformationUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateStatusUsingPOSTSignalErrorFull() instead")
    void updateStatusUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateStatusUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use verifyAadharOtpUsingPOSTSignalErrorFull() instead")
    void verifyAadharOtpUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void verifyAadharOtpUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use verifyBioUsingPOSTSignalErrorFull() instead")
    void verifyBioUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void verifyBioUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
