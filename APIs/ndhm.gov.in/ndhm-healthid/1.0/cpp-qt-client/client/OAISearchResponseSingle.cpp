/**
 * Health ID Service
 * It is important to standardize the process of identification of an individual across healthcare providers, to ensure that the created medical records are issued to the right individual or accessed by a Health Information User through appropriate consent.  In order to issue a Health ID to an individual, one only needs basic demographic details like Name, Year of Birth, Gender. In addition, citizens should be able to update contact information easily.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchResponseSingle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchResponseSingle::OAISearchResponseSingle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchResponseSingle::OAISearchResponseSingle() {
    this->initializeModel();
}

OAISearchResponseSingle::~OAISearchResponseSingle() {}

void OAISearchResponseSingle::initializeModel() {

    m_auth_methods_isSet = false;
    m_auth_methods_isValid = false;

    m_health_id_isSet = false;
    m_health_id_isValid = false;

    m_health_id_number_isSet = false;
    m_health_id_number_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAISearchResponseSingle::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchResponseSingle::fromJsonObject(QJsonObject json) {

    m_auth_methods_isValid = ::OpenAPI::fromJsonValue(m_auth_methods, json[QString("authMethods")]);
    m_auth_methods_isSet = !json[QString("authMethods")].isNull() && m_auth_methods_isValid;

    m_health_id_isValid = ::OpenAPI::fromJsonValue(m_health_id, json[QString("healthId")]);
    m_health_id_isSet = !json[QString("healthId")].isNull() && m_health_id_isValid;

    m_health_id_number_isValid = ::OpenAPI::fromJsonValue(m_health_id_number, json[QString("healthIdNumber")]);
    m_health_id_number_isSet = !json[QString("healthIdNumber")].isNull() && m_health_id_number_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAISearchResponseSingle::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchResponseSingle::asJsonObject() const {
    QJsonObject obj;
    if (m_auth_methods.size() > 0) {
        obj.insert(QString("authMethods"), ::OpenAPI::toJsonValue(m_auth_methods));
    }
    if (m_health_id_isSet) {
        obj.insert(QString("healthId"), ::OpenAPI::toJsonValue(m_health_id));
    }
    if (m_health_id_number_isSet) {
        obj.insert(QString("healthIdNumber"), ::OpenAPI::toJsonValue(m_health_id_number));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QList<QString> OAISearchResponseSingle::getAuthMethods() const {
    return m_auth_methods;
}
void OAISearchResponseSingle::setAuthMethods(const QList<QString> &auth_methods) {
    m_auth_methods = auth_methods;
    m_auth_methods_isSet = true;
}

bool OAISearchResponseSingle::is_auth_methods_Set() const{
    return m_auth_methods_isSet;
}

bool OAISearchResponseSingle::is_auth_methods_Valid() const{
    return m_auth_methods_isValid;
}

QString OAISearchResponseSingle::getHealthId() const {
    return m_health_id;
}
void OAISearchResponseSingle::setHealthId(const QString &health_id) {
    m_health_id = health_id;
    m_health_id_isSet = true;
}

bool OAISearchResponseSingle::is_health_id_Set() const{
    return m_health_id_isSet;
}

bool OAISearchResponseSingle::is_health_id_Valid() const{
    return m_health_id_isValid;
}

QString OAISearchResponseSingle::getHealthIdNumber() const {
    return m_health_id_number;
}
void OAISearchResponseSingle::setHealthIdNumber(const QString &health_id_number) {
    m_health_id_number = health_id_number;
    m_health_id_number_isSet = true;
}

bool OAISearchResponseSingle::is_health_id_number_Set() const{
    return m_health_id_number_isSet;
}

bool OAISearchResponseSingle::is_health_id_number_Valid() const{
    return m_health_id_number_isValid;
}

QString OAISearchResponseSingle::getName() const {
    return m_name;
}
void OAISearchResponseSingle::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISearchResponseSingle::is_name_Set() const{
    return m_name_isSet;
}

bool OAISearchResponseSingle::is_name_Valid() const{
    return m_name_isValid;
}

QMap<QString, QString> OAISearchResponseSingle::getTags() const {
    return m_tags;
}
void OAISearchResponseSingle::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAISearchResponseSingle::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAISearchResponseSingle::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAISearchResponseSingle::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auth_methods.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_id_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchResponseSingle::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
