/**
 * Health ID Service
 * It is important to standardize the process of identification of an individual across healthcare providers, to ensure that the created medical records are issued to the right individual or accessed by a Health Information User through appropriate consent.  In order to issue a Health ID to an individual, one only needs basic demographic details like Name, Year of Birth, Gender. In addition, citizens should be able to update contact information easily.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * URI.h
 *
 * 
 */

#ifndef URI_H
#define URI_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class URI : public OAIObject {
public:
    URI();
    URI(QString json);
    ~URI() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAbsolute() const;
    void setAbsolute(const bool &absolute);
    bool is_absolute_Set() const;
    bool is_absolute_Valid() const;

    QString getAuthority() const;
    void setAuthority(const QString &authority);
    bool is_authority_Set() const;
    bool is_authority_Valid() const;

    QString getFragment() const;
    void setFragment(const QString &fragment);
    bool is_fragment_Set() const;
    bool is_fragment_Valid() const;

    QString getHost() const;
    void setHost(const QString &host);
    bool is_host_Set() const;
    bool is_host_Valid() const;

    bool isOpaque() const;
    void setOpaque(const bool &opaque);
    bool is_opaque_Set() const;
    bool is_opaque_Valid() const;

    QString getPath() const;
    void setPath(const QString &path);
    bool is_path_Set() const;
    bool is_path_Valid() const;

    qint32 getPort() const;
    void setPort(const qint32 &port);
    bool is_port_Set() const;
    bool is_port_Valid() const;

    QString getQuery() const;
    void setQuery(const QString &query);
    bool is_query_Set() const;
    bool is_query_Valid() const;

    QString getRawAuthority() const;
    void setRawAuthority(const QString &raw_authority);
    bool is_raw_authority_Set() const;
    bool is_raw_authority_Valid() const;

    QString getRawFragment() const;
    void setRawFragment(const QString &raw_fragment);
    bool is_raw_fragment_Set() const;
    bool is_raw_fragment_Valid() const;

    QString getRawPath() const;
    void setRawPath(const QString &raw_path);
    bool is_raw_path_Set() const;
    bool is_raw_path_Valid() const;

    QString getRawQuery() const;
    void setRawQuery(const QString &raw_query);
    bool is_raw_query_Set() const;
    bool is_raw_query_Valid() const;

    QString getRawSchemeSpecificPart() const;
    void setRawSchemeSpecificPart(const QString &raw_scheme_specific_part);
    bool is_raw_scheme_specific_part_Set() const;
    bool is_raw_scheme_specific_part_Valid() const;

    QString getRawUserInfo() const;
    void setRawUserInfo(const QString &raw_user_info);
    bool is_raw_user_info_Set() const;
    bool is_raw_user_info_Valid() const;

    QString getScheme() const;
    void setScheme(const QString &scheme);
    bool is_scheme_Set() const;
    bool is_scheme_Valid() const;

    QString getSchemeSpecificPart() const;
    void setSchemeSpecificPart(const QString &scheme_specific_part);
    bool is_scheme_specific_part_Set() const;
    bool is_scheme_specific_part_Valid() const;

    QString getUserInfo() const;
    void setUserInfo(const QString &user_info);
    bool is_user_info_Set() const;
    bool is_user_info_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_absolute;
    bool m_absolute_isSet;
    bool m_absolute_isValid;

    QString m_authority;
    bool m_authority_isSet;
    bool m_authority_isValid;

    QString m_fragment;
    bool m_fragment_isSet;
    bool m_fragment_isValid;

    QString m_host;
    bool m_host_isSet;
    bool m_host_isValid;

    bool m_opaque;
    bool m_opaque_isSet;
    bool m_opaque_isValid;

    QString m_path;
    bool m_path_isSet;
    bool m_path_isValid;

    qint32 m_port;
    bool m_port_isSet;
    bool m_port_isValid;

    QString m_query;
    bool m_query_isSet;
    bool m_query_isValid;

    QString m_raw_authority;
    bool m_raw_authority_isSet;
    bool m_raw_authority_isValid;

    QString m_raw_fragment;
    bool m_raw_fragment_isSet;
    bool m_raw_fragment_isValid;

    QString m_raw_path;
    bool m_raw_path_isSet;
    bool m_raw_path_isValid;

    QString m_raw_query;
    bool m_raw_query_isSet;
    bool m_raw_query_isValid;

    QString m_raw_scheme_specific_part;
    bool m_raw_scheme_specific_part_isSet;
    bool m_raw_scheme_specific_part_isValid;

    QString m_raw_user_info;
    bool m_raw_user_info_isSet;
    bool m_raw_user_info_isValid;

    QString m_scheme;
    bool m_scheme_isSet;
    bool m_scheme_isValid;

    QString m_scheme_specific_part;
    bool m_scheme_specific_part_isSet;
    bool m_scheme_specific_part_isValid;

    QString m_user_info;
    bool m_user_info_isSet;
    bool m_user_info_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::URI)

#endif // URI_H
