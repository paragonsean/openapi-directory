/**
 * Health ID Service
 * It is important to standardize the process of identification of an individual across healthcare providers, to ensure that the created medical records are issued to the right individual or accessed by a Health Information User through appropriate consent.  In order to issue a Health ID to an individual, one only needs basic demographic details like Name, Year of Birth, Gender. In addition, citizens should be able to update contact information easily.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBenefitDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBenefitDTO::OAIBenefitDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBenefitDTO::OAIBenefitDTO() {
    this->initializeModel();
}

OAIBenefitDTO::~OAIBenefitDTO() {}

void OAIBenefitDTO::initializeModel() {

    m_benefit_id_isSet = false;
    m_benefit_id_isValid = false;

    m_benefit_name_isSet = false;
    m_benefit_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_linkage_date_isSet = false;
    m_linkage_date_isValid = false;

    m_program_name_isSet = false;
    m_program_name_isValid = false;

    m_validity_isSet = false;
    m_validity_isValid = false;
}

void OAIBenefitDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBenefitDTO::fromJsonObject(QJsonObject json) {

    m_benefit_id_isValid = ::OpenAPI::fromJsonValue(m_benefit_id, json[QString("benefitId")]);
    m_benefit_id_isSet = !json[QString("benefitId")].isNull() && m_benefit_id_isValid;

    m_benefit_name_isValid = ::OpenAPI::fromJsonValue(m_benefit_name, json[QString("benefitName")]);
    m_benefit_name_isSet = !json[QString("benefitName")].isNull() && m_benefit_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_linkage_date_isValid = ::OpenAPI::fromJsonValue(m_linkage_date, json[QString("linkageDate")]);
    m_linkage_date_isSet = !json[QString("linkageDate")].isNull() && m_linkage_date_isValid;

    m_program_name_isValid = ::OpenAPI::fromJsonValue(m_program_name, json[QString("programName")]);
    m_program_name_isSet = !json[QString("programName")].isNull() && m_program_name_isValid;

    m_validity_isValid = ::OpenAPI::fromJsonValue(m_validity, json[QString("validity")]);
    m_validity_isSet = !json[QString("validity")].isNull() && m_validity_isValid;
}

QString OAIBenefitDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBenefitDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_benefit_id_isSet) {
        obj.insert(QString("benefitId"), ::OpenAPI::toJsonValue(m_benefit_id));
    }
    if (m_benefit_name_isSet) {
        obj.insert(QString("benefitName"), ::OpenAPI::toJsonValue(m_benefit_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_linkage_date_isSet) {
        obj.insert(QString("linkageDate"), ::OpenAPI::toJsonValue(m_linkage_date));
    }
    if (m_program_name_isSet) {
        obj.insert(QString("programName"), ::OpenAPI::toJsonValue(m_program_name));
    }
    if (m_validity_isSet) {
        obj.insert(QString("validity"), ::OpenAPI::toJsonValue(m_validity));
    }
    return obj;
}

QString OAIBenefitDTO::getBenefitId() const {
    return m_benefit_id;
}
void OAIBenefitDTO::setBenefitId(const QString &benefit_id) {
    m_benefit_id = benefit_id;
    m_benefit_id_isSet = true;
}

bool OAIBenefitDTO::is_benefit_id_Set() const{
    return m_benefit_id_isSet;
}

bool OAIBenefitDTO::is_benefit_id_Valid() const{
    return m_benefit_id_isValid;
}

QString OAIBenefitDTO::getBenefitName() const {
    return m_benefit_name;
}
void OAIBenefitDTO::setBenefitName(const QString &benefit_name) {
    m_benefit_name = benefit_name;
    m_benefit_name_isSet = true;
}

bool OAIBenefitDTO::is_benefit_name_Set() const{
    return m_benefit_name_isSet;
}

bool OAIBenefitDTO::is_benefit_name_Valid() const{
    return m_benefit_name_isValid;
}

QString OAIBenefitDTO::getDescription() const {
    return m_description;
}
void OAIBenefitDTO::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIBenefitDTO::is_description_Set() const{
    return m_description_isSet;
}

bool OAIBenefitDTO::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAIBenefitDTO::getLinkageDate() const {
    return m_linkage_date;
}
void OAIBenefitDTO::setLinkageDate(const QDateTime &linkage_date) {
    m_linkage_date = linkage_date;
    m_linkage_date_isSet = true;
}

bool OAIBenefitDTO::is_linkage_date_Set() const{
    return m_linkage_date_isSet;
}

bool OAIBenefitDTO::is_linkage_date_Valid() const{
    return m_linkage_date_isValid;
}

QString OAIBenefitDTO::getProgramName() const {
    return m_program_name;
}
void OAIBenefitDTO::setProgramName(const QString &program_name) {
    m_program_name = program_name;
    m_program_name_isSet = true;
}

bool OAIBenefitDTO::is_program_name_Set() const{
    return m_program_name_isSet;
}

bool OAIBenefitDTO::is_program_name_Valid() const{
    return m_program_name_isValid;
}

QDate OAIBenefitDTO::getValidity() const {
    return m_validity;
}
void OAIBenefitDTO::setValidity(const QDate &validity) {
    m_validity = validity;
    m_validity_isSet = true;
}

bool OAIBenefitDTO::is_validity_Set() const{
    return m_validity_isSet;
}

bool OAIBenefitDTO::is_validity_Valid() const{
    return m_validity_isValid;
}

bool OAIBenefitDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_benefit_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_benefit_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_linkage_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_program_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBenefitDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
