/**
 * Health ID Service
 * It is important to standardize the process of identification of an individual across healthcare providers, to ensure that the created medical records are issued to the right individual or accessed by a Health Information User through appropriate consent.  In order to issue a Health ID to an individual, one only needs basic demographic details like Name, Year of Birth, Gender. In addition, citizens should be able to update contact information easily.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIURL.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIURL::OAIURL(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIURL::OAIURL() {
    this->initializeModel();
}

OAIURL::~OAIURL() {}

void OAIURL::initializeModel() {

    m_authority_isSet = false;
    m_authority_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_default_port_isSet = false;
    m_default_port_isValid = false;

    m_file_isSet = false;
    m_file_isValid = false;

    m_host_isSet = false;
    m_host_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;

    m_ref_isSet = false;
    m_ref_isValid = false;

    m_user_info_isSet = false;
    m_user_info_isValid = false;
}

void OAIURL::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIURL::fromJsonObject(QJsonObject json) {

    m_authority_isValid = ::OpenAPI::fromJsonValue(m_authority, json[QString("authority")]);
    m_authority_isSet = !json[QString("authority")].isNull() && m_authority_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_default_port_isValid = ::OpenAPI::fromJsonValue(m_default_port, json[QString("defaultPort")]);
    m_default_port_isSet = !json[QString("defaultPort")].isNull() && m_default_port_isValid;

    m_file_isValid = ::OpenAPI::fromJsonValue(m_file, json[QString("file")]);
    m_file_isSet = !json[QString("file")].isNull() && m_file_isValid;

    m_host_isValid = ::OpenAPI::fromJsonValue(m_host, json[QString("host")]);
    m_host_isSet = !json[QString("host")].isNull() && m_host_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_ref_isValid = ::OpenAPI::fromJsonValue(m_ref, json[QString("ref")]);
    m_ref_isSet = !json[QString("ref")].isNull() && m_ref_isValid;

    m_user_info_isValid = ::OpenAPI::fromJsonValue(m_user_info, json[QString("userInfo")]);
    m_user_info_isSet = !json[QString("userInfo")].isNull() && m_user_info_isValid;
}

QString OAIURL::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIURL::asJsonObject() const {
    QJsonObject obj;
    if (m_authority_isSet) {
        obj.insert(QString("authority"), ::OpenAPI::toJsonValue(m_authority));
    }
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_default_port_isSet) {
        obj.insert(QString("defaultPort"), ::OpenAPI::toJsonValue(m_default_port));
    }
    if (m_file_isSet) {
        obj.insert(QString("file"), ::OpenAPI::toJsonValue(m_file));
    }
    if (m_host_isSet) {
        obj.insert(QString("host"), ::OpenAPI::toJsonValue(m_host));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_protocol_isSet) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_query_isSet) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_ref_isSet) {
        obj.insert(QString("ref"), ::OpenAPI::toJsonValue(m_ref));
    }
    if (m_user_info_isSet) {
        obj.insert(QString("userInfo"), ::OpenAPI::toJsonValue(m_user_info));
    }
    return obj;
}

QString OAIURL::getAuthority() const {
    return m_authority;
}
void OAIURL::setAuthority(const QString &authority) {
    m_authority = authority;
    m_authority_isSet = true;
}

bool OAIURL::is_authority_Set() const{
    return m_authority_isSet;
}

bool OAIURL::is_authority_Valid() const{
    return m_authority_isValid;
}

OAIObject OAIURL::getContent() const {
    return m_content;
}
void OAIURL::setContent(const OAIObject &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIURL::is_content_Set() const{
    return m_content_isSet;
}

bool OAIURL::is_content_Valid() const{
    return m_content_isValid;
}

qint32 OAIURL::getDefaultPort() const {
    return m_default_port;
}
void OAIURL::setDefaultPort(const qint32 &default_port) {
    m_default_port = default_port;
    m_default_port_isSet = true;
}

bool OAIURL::is_default_port_Set() const{
    return m_default_port_isSet;
}

bool OAIURL::is_default_port_Valid() const{
    return m_default_port_isValid;
}

QString OAIURL::getFile() const {
    return m_file;
}
void OAIURL::setFile(const QString &file) {
    m_file = file;
    m_file_isSet = true;
}

bool OAIURL::is_file_Set() const{
    return m_file_isSet;
}

bool OAIURL::is_file_Valid() const{
    return m_file_isValid;
}

QString OAIURL::getHost() const {
    return m_host;
}
void OAIURL::setHost(const QString &host) {
    m_host = host;
    m_host_isSet = true;
}

bool OAIURL::is_host_Set() const{
    return m_host_isSet;
}

bool OAIURL::is_host_Valid() const{
    return m_host_isValid;
}

QString OAIURL::getPath() const {
    return m_path;
}
void OAIURL::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIURL::is_path_Set() const{
    return m_path_isSet;
}

bool OAIURL::is_path_Valid() const{
    return m_path_isValid;
}

qint32 OAIURL::getPort() const {
    return m_port;
}
void OAIURL::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIURL::is_port_Set() const{
    return m_port_isSet;
}

bool OAIURL::is_port_Valid() const{
    return m_port_isValid;
}

QString OAIURL::getProtocol() const {
    return m_protocol;
}
void OAIURL::setProtocol(const QString &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAIURL::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAIURL::is_protocol_Valid() const{
    return m_protocol_isValid;
}

QString OAIURL::getQuery() const {
    return m_query;
}
void OAIURL::setQuery(const QString &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAIURL::is_query_Set() const{
    return m_query_isSet;
}

bool OAIURL::is_query_Valid() const{
    return m_query_isValid;
}

QString OAIURL::getRef() const {
    return m_ref;
}
void OAIURL::setRef(const QString &ref) {
    m_ref = ref;
    m_ref_isSet = true;
}

bool OAIURL::is_ref_Set() const{
    return m_ref_isSet;
}

bool OAIURL::is_ref_Valid() const{
    return m_ref_isValid;
}

QString OAIURL::getUserInfo() const {
    return m_user_info;
}
void OAIURL::setUserInfo(const QString &user_info) {
    m_user_info = user_info;
    m_user_info_isSet = true;
}

bool OAIURL::is_user_info_Set() const{
    return m_user_info_isSet;
}

bool OAIURL::is_user_info_Valid() const{
    return m_user_info_isValid;
}

bool OAIURL::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_info_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIURL::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
