/**
 * Health ID Service
 * It is important to standardize the process of identification of an individual across healthcare providers, to ensure that the created medical records are issued to the right individual or accessed by a Health Information User through appropriate consent.  In order to issue a Health ID to an individual, one only needs basic demographic details like Name, Year of Birth, Gender. In addition, citizens should be able to update contact information easily.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateHidBiometricRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateHidBiometricRequest::OAICreateHidBiometricRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateHidBiometricRequest::OAICreateHidBiometricRequest() {
    this->initializeModel();
}

OAICreateHidBiometricRequest::~OAICreateHidBiometricRequest() {}

void OAICreateHidBiometricRequest::initializeModel() {

    m_aadhaar_isSet = false;
    m_aadhaar_isValid = false;

    m_auto_generated_benefit_id_isSet = false;
    m_auto_generated_benefit_id_isValid = false;

    m_benefit_id_isSet = false;
    m_benefit_id_isValid = false;

    m_benefit_name_isSet = false;
    m_benefit_name_isValid = false;

    m_bio_type_isSet = false;
    m_bio_type_isValid = false;

    m_consent_health_id_isSet = false;
    m_consent_health_id_isValid = false;

    m_mobile_number_isSet = false;
    m_mobile_number_isValid = false;

    m_pid_isSet = false;
    m_pid_isValid = false;

    m_validity_isSet = false;
    m_validity_isValid = false;
}

void OAICreateHidBiometricRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateHidBiometricRequest::fromJsonObject(QJsonObject json) {

    m_aadhaar_isValid = ::OpenAPI::fromJsonValue(m_aadhaar, json[QString("aadhaar")]);
    m_aadhaar_isSet = !json[QString("aadhaar")].isNull() && m_aadhaar_isValid;

    m_auto_generated_benefit_id_isValid = ::OpenAPI::fromJsonValue(m_auto_generated_benefit_id, json[QString("autoGeneratedBenefitId")]);
    m_auto_generated_benefit_id_isSet = !json[QString("autoGeneratedBenefitId")].isNull() && m_auto_generated_benefit_id_isValid;

    m_benefit_id_isValid = ::OpenAPI::fromJsonValue(m_benefit_id, json[QString("benefitId")]);
    m_benefit_id_isSet = !json[QString("benefitId")].isNull() && m_benefit_id_isValid;

    m_benefit_name_isValid = ::OpenAPI::fromJsonValue(m_benefit_name, json[QString("benefitName")]);
    m_benefit_name_isSet = !json[QString("benefitName")].isNull() && m_benefit_name_isValid;

    m_bio_type_isValid = ::OpenAPI::fromJsonValue(m_bio_type, json[QString("bioType")]);
    m_bio_type_isSet = !json[QString("bioType")].isNull() && m_bio_type_isValid;

    m_consent_health_id_isValid = ::OpenAPI::fromJsonValue(m_consent_health_id, json[QString("consentHealthId")]);
    m_consent_health_id_isSet = !json[QString("consentHealthId")].isNull() && m_consent_health_id_isValid;

    m_mobile_number_isValid = ::OpenAPI::fromJsonValue(m_mobile_number, json[QString("mobileNumber")]);
    m_mobile_number_isSet = !json[QString("mobileNumber")].isNull() && m_mobile_number_isValid;

    m_pid_isValid = ::OpenAPI::fromJsonValue(m_pid, json[QString("pid")]);
    m_pid_isSet = !json[QString("pid")].isNull() && m_pid_isValid;

    m_validity_isValid = ::OpenAPI::fromJsonValue(m_validity, json[QString("validity")]);
    m_validity_isSet = !json[QString("validity")].isNull() && m_validity_isValid;
}

QString OAICreateHidBiometricRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateHidBiometricRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_aadhaar_isSet) {
        obj.insert(QString("aadhaar"), ::OpenAPI::toJsonValue(m_aadhaar));
    }
    if (m_auto_generated_benefit_id_isSet) {
        obj.insert(QString("autoGeneratedBenefitId"), ::OpenAPI::toJsonValue(m_auto_generated_benefit_id));
    }
    if (m_benefit_id_isSet) {
        obj.insert(QString("benefitId"), ::OpenAPI::toJsonValue(m_benefit_id));
    }
    if (m_benefit_name_isSet) {
        obj.insert(QString("benefitName"), ::OpenAPI::toJsonValue(m_benefit_name));
    }
    if (m_bio_type_isSet) {
        obj.insert(QString("bioType"), ::OpenAPI::toJsonValue(m_bio_type));
    }
    if (m_consent_health_id_isSet) {
        obj.insert(QString("consentHealthId"), ::OpenAPI::toJsonValue(m_consent_health_id));
    }
    if (m_mobile_number_isSet) {
        obj.insert(QString("mobileNumber"), ::OpenAPI::toJsonValue(m_mobile_number));
    }
    if (m_pid_isSet) {
        obj.insert(QString("pid"), ::OpenAPI::toJsonValue(m_pid));
    }
    if (m_validity_isSet) {
        obj.insert(QString("validity"), ::OpenAPI::toJsonValue(m_validity));
    }
    return obj;
}

QString OAICreateHidBiometricRequest::getAadhaar() const {
    return m_aadhaar;
}
void OAICreateHidBiometricRequest::setAadhaar(const QString &aadhaar) {
    m_aadhaar = aadhaar;
    m_aadhaar_isSet = true;
}

bool OAICreateHidBiometricRequest::is_aadhaar_Set() const{
    return m_aadhaar_isSet;
}

bool OAICreateHidBiometricRequest::is_aadhaar_Valid() const{
    return m_aadhaar_isValid;
}

bool OAICreateHidBiometricRequest::isAutoGeneratedBenefitId() const {
    return m_auto_generated_benefit_id;
}
void OAICreateHidBiometricRequest::setAutoGeneratedBenefitId(const bool &auto_generated_benefit_id) {
    m_auto_generated_benefit_id = auto_generated_benefit_id;
    m_auto_generated_benefit_id_isSet = true;
}

bool OAICreateHidBiometricRequest::is_auto_generated_benefit_id_Set() const{
    return m_auto_generated_benefit_id_isSet;
}

bool OAICreateHidBiometricRequest::is_auto_generated_benefit_id_Valid() const{
    return m_auto_generated_benefit_id_isValid;
}

QString OAICreateHidBiometricRequest::getBenefitId() const {
    return m_benefit_id;
}
void OAICreateHidBiometricRequest::setBenefitId(const QString &benefit_id) {
    m_benefit_id = benefit_id;
    m_benefit_id_isSet = true;
}

bool OAICreateHidBiometricRequest::is_benefit_id_Set() const{
    return m_benefit_id_isSet;
}

bool OAICreateHidBiometricRequest::is_benefit_id_Valid() const{
    return m_benefit_id_isValid;
}

QString OAICreateHidBiometricRequest::getBenefitName() const {
    return m_benefit_name;
}
void OAICreateHidBiometricRequest::setBenefitName(const QString &benefit_name) {
    m_benefit_name = benefit_name;
    m_benefit_name_isSet = true;
}

bool OAICreateHidBiometricRequest::is_benefit_name_Set() const{
    return m_benefit_name_isSet;
}

bool OAICreateHidBiometricRequest::is_benefit_name_Valid() const{
    return m_benefit_name_isValid;
}

QString OAICreateHidBiometricRequest::getBioType() const {
    return m_bio_type;
}
void OAICreateHidBiometricRequest::setBioType(const QString &bio_type) {
    m_bio_type = bio_type;
    m_bio_type_isSet = true;
}

bool OAICreateHidBiometricRequest::is_bio_type_Set() const{
    return m_bio_type_isSet;
}

bool OAICreateHidBiometricRequest::is_bio_type_Valid() const{
    return m_bio_type_isValid;
}

bool OAICreateHidBiometricRequest::isConsentHealthId() const {
    return m_consent_health_id;
}
void OAICreateHidBiometricRequest::setConsentHealthId(const bool &consent_health_id) {
    m_consent_health_id = consent_health_id;
    m_consent_health_id_isSet = true;
}

bool OAICreateHidBiometricRequest::is_consent_health_id_Set() const{
    return m_consent_health_id_isSet;
}

bool OAICreateHidBiometricRequest::is_consent_health_id_Valid() const{
    return m_consent_health_id_isValid;
}

QString OAICreateHidBiometricRequest::getMobileNumber() const {
    return m_mobile_number;
}
void OAICreateHidBiometricRequest::setMobileNumber(const QString &mobile_number) {
    m_mobile_number = mobile_number;
    m_mobile_number_isSet = true;
}

bool OAICreateHidBiometricRequest::is_mobile_number_Set() const{
    return m_mobile_number_isSet;
}

bool OAICreateHidBiometricRequest::is_mobile_number_Valid() const{
    return m_mobile_number_isValid;
}

QString OAICreateHidBiometricRequest::getPid() const {
    return m_pid;
}
void OAICreateHidBiometricRequest::setPid(const QString &pid) {
    m_pid = pid;
    m_pid_isSet = true;
}

bool OAICreateHidBiometricRequest::is_pid_Set() const{
    return m_pid_isSet;
}

bool OAICreateHidBiometricRequest::is_pid_Valid() const{
    return m_pid_isValid;
}

QString OAICreateHidBiometricRequest::getValidity() const {
    return m_validity;
}
void OAICreateHidBiometricRequest::setValidity(const QString &validity) {
    m_validity = validity;
    m_validity_isSet = true;
}

bool OAICreateHidBiometricRequest::is_validity_Set() const{
    return m_validity_isSet;
}

bool OAICreateHidBiometricRequest::is_validity_Valid() const{
    return m_validity_isValid;
}

bool OAICreateHidBiometricRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aadhaar_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_generated_benefit_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_benefit_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_benefit_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consent_health_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobile_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateHidBiometricRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
