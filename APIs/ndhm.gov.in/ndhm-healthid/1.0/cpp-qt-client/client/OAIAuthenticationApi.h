/**
 * Health ID Service
 * It is important to standardize the process of identification of an individual across healthcare providers, to ensure that the created medical records are issued to the right individual or accessed by a Health Information User through appropriate consent.  In order to issue a Health ID to an individual, one only needs basic demographic details like Name, Year of Birth, Gender. In addition, citizens should be able to update contact information easily.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAuthenticationApi_H
#define OAI_OAIAuthenticationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAuthAccountAadhaarBioRequest.h"
#include "OAIAuthAccountAadhaarOTPRequest.h"
#include "OAIAuthAccountMobileOTPRequest.h"
#include "OAIAuthAccountWithDemographicsRequest.h"
#include "OAIAuthInitRequest.h"
#include "OAIAuthMobileOTPRequest.h"
#include "OAIAuthWithMobileTxnAndUserData.h"
#include "OAIAuthWithPasswordRequest.h"
#include "OAIJwtRequest.h"
#include "OAIJwtResponse.h"
#include "OAIResendOTPRequest.h"
#include "OAITxnResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAuthenticationApi : public QObject {
    Q_OBJECT

public:
    OAIAuthenticationApi(const int timeOut = 0);
    ~OAIAuthenticationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  authentication_request OAIAuthWithPasswordRequest [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void authAccountPasswordRequestUsingPOST(const OAIAuthWithPasswordRequest &authentication_request, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  auth_request OAIAuthWithMobileTxnAndUserData [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void authWithMobileTokenUsingPOST(const OAIAuthWithMobileTxnAndUserData &auth_request, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  auth_request OAIAuthMobileOTPRequest [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void authenticateUserUsingPOST(const OAIAuthMobileOTPRequest &auth_request, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authentication_request OAIJwtRequest [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void authenticateWithPasswordUsingPOST(const OAIJwtRequest &authentication_request, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  accept_language QString [optional]
    */
    virtual void certUsingGET(const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authentication_request OAIAuthAccountAadhaarBioRequest [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void confirmWithAadhaarBioUsingPOST(const OAIAuthAccountAadhaarBioRequest &authentication_request, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authentication_request OAIAuthAccountAadhaarOTPRequest [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void confirmWithAadhaarOtpUsingPOST(const OAIAuthAccountAadhaarOTPRequest &authentication_request, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authentication_request OAIAuthAccountWithDemographicsRequest [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void confirmWithDemographicsUsingPOST(const OAIAuthAccountWithDemographicsRequest &authentication_request, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authentication_request OAIAuthAccountMobileOTPRequest [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void confirmWithMobileUsingPOST(const OAIAuthAccountMobileOTPRequest &authentication_request, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  auth_request OAIAuthInitRequest [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void initiateAuthUsingPOST(const OAIAuthInitRequest &auth_request, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resend_otp_request OAIResendOTPRequest [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void resendAuthMobileOTPUsingPOST(const OAIResendOTPRequest &resend_otp_request, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void authAccountPasswordRequestUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void authWithMobileTokenUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void authenticateUserUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void authenticateWithPasswordUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void certUsingGETCallback(OAIHttpRequestWorker *worker);
    void confirmWithAadhaarBioUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void confirmWithAadhaarOtpUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void confirmWithDemographicsUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void confirmWithMobileUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void initiateAuthUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void resendAuthMobileOTPUsingPOSTCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void authAccountPasswordRequestUsingPOSTSignal(OAIJwtResponse summary);
    void authWithMobileTokenUsingPOSTSignal(OAIJwtResponse summary);
    void authenticateUserUsingPOSTSignal(OAITxnResponse summary);
    void authenticateWithPasswordUsingPOSTSignal(OAIJwtResponse summary);
    void certUsingGETSignal(QString summary);
    void confirmWithAadhaarBioUsingPOSTSignal(OAIJwtResponse summary);
    void confirmWithAadhaarOtpUsingPOSTSignal(OAIJwtResponse summary);
    void confirmWithDemographicsUsingPOSTSignal(QString summary);
    void confirmWithMobileUsingPOSTSignal(OAIJwtResponse summary);
    void initiateAuthUsingPOSTSignal(OAITxnResponse summary);
    void resendAuthMobileOTPUsingPOSTSignal(bool summary);


    void authAccountPasswordRequestUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIJwtResponse summary);
    void authWithMobileTokenUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIJwtResponse summary);
    void authenticateUserUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAITxnResponse summary);
    void authenticateWithPasswordUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIJwtResponse summary);
    void certUsingGETSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void confirmWithAadhaarBioUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIJwtResponse summary);
    void confirmWithAadhaarOtpUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIJwtResponse summary);
    void confirmWithDemographicsUsingPOSTSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void confirmWithMobileUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIJwtResponse summary);
    void initiateAuthUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAITxnResponse summary);
    void resendAuthMobileOTPUsingPOSTSignalFull(OAIHttpRequestWorker *worker, bool summary);

    Q_DECL_DEPRECATED_X("Use authAccountPasswordRequestUsingPOSTSignalError() instead")
    void authAccountPasswordRequestUsingPOSTSignalE(OAIJwtResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authAccountPasswordRequestUsingPOSTSignalError(OAIJwtResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authWithMobileTokenUsingPOSTSignalError() instead")
    void authWithMobileTokenUsingPOSTSignalE(OAIJwtResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authWithMobileTokenUsingPOSTSignalError(OAIJwtResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authenticateUserUsingPOSTSignalError() instead")
    void authenticateUserUsingPOSTSignalE(OAITxnResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authenticateUserUsingPOSTSignalError(OAITxnResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authenticateWithPasswordUsingPOSTSignalError() instead")
    void authenticateWithPasswordUsingPOSTSignalE(OAIJwtResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authenticateWithPasswordUsingPOSTSignalError(OAIJwtResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certUsingGETSignalError() instead")
    void certUsingGETSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void certUsingGETSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use confirmWithAadhaarBioUsingPOSTSignalError() instead")
    void confirmWithAadhaarBioUsingPOSTSignalE(OAIJwtResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void confirmWithAadhaarBioUsingPOSTSignalError(OAIJwtResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use confirmWithAadhaarOtpUsingPOSTSignalError() instead")
    void confirmWithAadhaarOtpUsingPOSTSignalE(OAIJwtResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void confirmWithAadhaarOtpUsingPOSTSignalError(OAIJwtResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use confirmWithDemographicsUsingPOSTSignalError() instead")
    void confirmWithDemographicsUsingPOSTSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void confirmWithDemographicsUsingPOSTSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use confirmWithMobileUsingPOSTSignalError() instead")
    void confirmWithMobileUsingPOSTSignalE(OAIJwtResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void confirmWithMobileUsingPOSTSignalError(OAIJwtResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use initiateAuthUsingPOSTSignalError() instead")
    void initiateAuthUsingPOSTSignalE(OAITxnResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void initiateAuthUsingPOSTSignalError(OAITxnResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resendAuthMobileOTPUsingPOSTSignalError() instead")
    void resendAuthMobileOTPUsingPOSTSignalE(bool summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resendAuthMobileOTPUsingPOSTSignalError(bool summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use authAccountPasswordRequestUsingPOSTSignalErrorFull() instead")
    void authAccountPasswordRequestUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authAccountPasswordRequestUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authWithMobileTokenUsingPOSTSignalErrorFull() instead")
    void authWithMobileTokenUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authWithMobileTokenUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authenticateUserUsingPOSTSignalErrorFull() instead")
    void authenticateUserUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authenticateUserUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authenticateWithPasswordUsingPOSTSignalErrorFull() instead")
    void authenticateWithPasswordUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authenticateWithPasswordUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certUsingGETSignalErrorFull() instead")
    void certUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void certUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use confirmWithAadhaarBioUsingPOSTSignalErrorFull() instead")
    void confirmWithAadhaarBioUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void confirmWithAadhaarBioUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use confirmWithAadhaarOtpUsingPOSTSignalErrorFull() instead")
    void confirmWithAadhaarOtpUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void confirmWithAadhaarOtpUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use confirmWithDemographicsUsingPOSTSignalErrorFull() instead")
    void confirmWithDemographicsUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void confirmWithDemographicsUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use confirmWithMobileUsingPOSTSignalErrorFull() instead")
    void confirmWithMobileUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void confirmWithMobileUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use initiateAuthUsingPOSTSignalErrorFull() instead")
    void initiateAuthUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void initiateAuthUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resendAuthMobileOTPUsingPOSTSignalErrorFull() instead")
    void resendAuthMobileOTPUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resendAuthMobileOTPUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
