/**
 * Health ID Service
 * It is important to standardize the process of identification of an individual across healthcare providers, to ensure that the created medical records are issued to the right individual or accessed by a Health Information User through appropriate consent.  In order to issue a Health ID to an individual, one only needs basic demographic details like Name, Year of Birth, Gender. In addition, citizens should be able to update contact information easily.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "URI.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

URI::URI(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

URI::URI() {
    this->initializeModel();
}

URI::~URI() {}

void URI::initializeModel() {

    m_absolute_isSet = false;
    m_absolute_isValid = false;

    m_authority_isSet = false;
    m_authority_isValid = false;

    m_fragment_isSet = false;
    m_fragment_isValid = false;

    m_host_isSet = false;
    m_host_isValid = false;

    m_opaque_isSet = false;
    m_opaque_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;

    m_raw_authority_isSet = false;
    m_raw_authority_isValid = false;

    m_raw_fragment_isSet = false;
    m_raw_fragment_isValid = false;

    m_raw_path_isSet = false;
    m_raw_path_isValid = false;

    m_raw_query_isSet = false;
    m_raw_query_isValid = false;

    m_raw_scheme_specific_part_isSet = false;
    m_raw_scheme_specific_part_isValid = false;

    m_raw_user_info_isSet = false;
    m_raw_user_info_isValid = false;

    m_scheme_isSet = false;
    m_scheme_isValid = false;

    m_scheme_specific_part_isSet = false;
    m_scheme_specific_part_isValid = false;

    m_user_info_isSet = false;
    m_user_info_isValid = false;
}

void URI::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void URI::fromJsonObject(QJsonObject json) {

    m_absolute_isValid = ::OpenAPI::fromJsonValue(m_absolute, json[QString("absolute")]);
    m_absolute_isSet = !json[QString("absolute")].isNull() && m_absolute_isValid;

    m_authority_isValid = ::OpenAPI::fromJsonValue(m_authority, json[QString("authority")]);
    m_authority_isSet = !json[QString("authority")].isNull() && m_authority_isValid;

    m_fragment_isValid = ::OpenAPI::fromJsonValue(m_fragment, json[QString("fragment")]);
    m_fragment_isSet = !json[QString("fragment")].isNull() && m_fragment_isValid;

    m_host_isValid = ::OpenAPI::fromJsonValue(m_host, json[QString("host")]);
    m_host_isSet = !json[QString("host")].isNull() && m_host_isValid;

    m_opaque_isValid = ::OpenAPI::fromJsonValue(m_opaque, json[QString("opaque")]);
    m_opaque_isSet = !json[QString("opaque")].isNull() && m_opaque_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_raw_authority_isValid = ::OpenAPI::fromJsonValue(m_raw_authority, json[QString("rawAuthority")]);
    m_raw_authority_isSet = !json[QString("rawAuthority")].isNull() && m_raw_authority_isValid;

    m_raw_fragment_isValid = ::OpenAPI::fromJsonValue(m_raw_fragment, json[QString("rawFragment")]);
    m_raw_fragment_isSet = !json[QString("rawFragment")].isNull() && m_raw_fragment_isValid;

    m_raw_path_isValid = ::OpenAPI::fromJsonValue(m_raw_path, json[QString("rawPath")]);
    m_raw_path_isSet = !json[QString("rawPath")].isNull() && m_raw_path_isValid;

    m_raw_query_isValid = ::OpenAPI::fromJsonValue(m_raw_query, json[QString("rawQuery")]);
    m_raw_query_isSet = !json[QString("rawQuery")].isNull() && m_raw_query_isValid;

    m_raw_scheme_specific_part_isValid = ::OpenAPI::fromJsonValue(m_raw_scheme_specific_part, json[QString("rawSchemeSpecificPart")]);
    m_raw_scheme_specific_part_isSet = !json[QString("rawSchemeSpecificPart")].isNull() && m_raw_scheme_specific_part_isValid;

    m_raw_user_info_isValid = ::OpenAPI::fromJsonValue(m_raw_user_info, json[QString("rawUserInfo")]);
    m_raw_user_info_isSet = !json[QString("rawUserInfo")].isNull() && m_raw_user_info_isValid;

    m_scheme_isValid = ::OpenAPI::fromJsonValue(m_scheme, json[QString("scheme")]);
    m_scheme_isSet = !json[QString("scheme")].isNull() && m_scheme_isValid;

    m_scheme_specific_part_isValid = ::OpenAPI::fromJsonValue(m_scheme_specific_part, json[QString("schemeSpecificPart")]);
    m_scheme_specific_part_isSet = !json[QString("schemeSpecificPart")].isNull() && m_scheme_specific_part_isValid;

    m_user_info_isValid = ::OpenAPI::fromJsonValue(m_user_info, json[QString("userInfo")]);
    m_user_info_isSet = !json[QString("userInfo")].isNull() && m_user_info_isValid;
}

QString URI::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject URI::asJsonObject() const {
    QJsonObject obj;
    if (m_absolute_isSet) {
        obj.insert(QString("absolute"), ::OpenAPI::toJsonValue(m_absolute));
    }
    if (m_authority_isSet) {
        obj.insert(QString("authority"), ::OpenAPI::toJsonValue(m_authority));
    }
    if (m_fragment_isSet) {
        obj.insert(QString("fragment"), ::OpenAPI::toJsonValue(m_fragment));
    }
    if (m_host_isSet) {
        obj.insert(QString("host"), ::OpenAPI::toJsonValue(m_host));
    }
    if (m_opaque_isSet) {
        obj.insert(QString("opaque"), ::OpenAPI::toJsonValue(m_opaque));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_query_isSet) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_raw_authority_isSet) {
        obj.insert(QString("rawAuthority"), ::OpenAPI::toJsonValue(m_raw_authority));
    }
    if (m_raw_fragment_isSet) {
        obj.insert(QString("rawFragment"), ::OpenAPI::toJsonValue(m_raw_fragment));
    }
    if (m_raw_path_isSet) {
        obj.insert(QString("rawPath"), ::OpenAPI::toJsonValue(m_raw_path));
    }
    if (m_raw_query_isSet) {
        obj.insert(QString("rawQuery"), ::OpenAPI::toJsonValue(m_raw_query));
    }
    if (m_raw_scheme_specific_part_isSet) {
        obj.insert(QString("rawSchemeSpecificPart"), ::OpenAPI::toJsonValue(m_raw_scheme_specific_part));
    }
    if (m_raw_user_info_isSet) {
        obj.insert(QString("rawUserInfo"), ::OpenAPI::toJsonValue(m_raw_user_info));
    }
    if (m_scheme_isSet) {
        obj.insert(QString("scheme"), ::OpenAPI::toJsonValue(m_scheme));
    }
    if (m_scheme_specific_part_isSet) {
        obj.insert(QString("schemeSpecificPart"), ::OpenAPI::toJsonValue(m_scheme_specific_part));
    }
    if (m_user_info_isSet) {
        obj.insert(QString("userInfo"), ::OpenAPI::toJsonValue(m_user_info));
    }
    return obj;
}

bool URI::isAbsolute() const {
    return m_absolute;
}
void URI::setAbsolute(const bool &absolute) {
    m_absolute = absolute;
    m_absolute_isSet = true;
}

bool URI::is_absolute_Set() const{
    return m_absolute_isSet;
}

bool URI::is_absolute_Valid() const{
    return m_absolute_isValid;
}

QString URI::getAuthority() const {
    return m_authority;
}
void URI::setAuthority(const QString &authority) {
    m_authority = authority;
    m_authority_isSet = true;
}

bool URI::is_authority_Set() const{
    return m_authority_isSet;
}

bool URI::is_authority_Valid() const{
    return m_authority_isValid;
}

QString URI::getFragment() const {
    return m_fragment;
}
void URI::setFragment(const QString &fragment) {
    m_fragment = fragment;
    m_fragment_isSet = true;
}

bool URI::is_fragment_Set() const{
    return m_fragment_isSet;
}

bool URI::is_fragment_Valid() const{
    return m_fragment_isValid;
}

QString URI::getHost() const {
    return m_host;
}
void URI::setHost(const QString &host) {
    m_host = host;
    m_host_isSet = true;
}

bool URI::is_host_Set() const{
    return m_host_isSet;
}

bool URI::is_host_Valid() const{
    return m_host_isValid;
}

bool URI::isOpaque() const {
    return m_opaque;
}
void URI::setOpaque(const bool &opaque) {
    m_opaque = opaque;
    m_opaque_isSet = true;
}

bool URI::is_opaque_Set() const{
    return m_opaque_isSet;
}

bool URI::is_opaque_Valid() const{
    return m_opaque_isValid;
}

QString URI::getPath() const {
    return m_path;
}
void URI::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool URI::is_path_Set() const{
    return m_path_isSet;
}

bool URI::is_path_Valid() const{
    return m_path_isValid;
}

qint32 URI::getPort() const {
    return m_port;
}
void URI::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool URI::is_port_Set() const{
    return m_port_isSet;
}

bool URI::is_port_Valid() const{
    return m_port_isValid;
}

QString URI::getQuery() const {
    return m_query;
}
void URI::setQuery(const QString &query) {
    m_query = query;
    m_query_isSet = true;
}

bool URI::is_query_Set() const{
    return m_query_isSet;
}

bool URI::is_query_Valid() const{
    return m_query_isValid;
}

QString URI::getRawAuthority() const {
    return m_raw_authority;
}
void URI::setRawAuthority(const QString &raw_authority) {
    m_raw_authority = raw_authority;
    m_raw_authority_isSet = true;
}

bool URI::is_raw_authority_Set() const{
    return m_raw_authority_isSet;
}

bool URI::is_raw_authority_Valid() const{
    return m_raw_authority_isValid;
}

QString URI::getRawFragment() const {
    return m_raw_fragment;
}
void URI::setRawFragment(const QString &raw_fragment) {
    m_raw_fragment = raw_fragment;
    m_raw_fragment_isSet = true;
}

bool URI::is_raw_fragment_Set() const{
    return m_raw_fragment_isSet;
}

bool URI::is_raw_fragment_Valid() const{
    return m_raw_fragment_isValid;
}

QString URI::getRawPath() const {
    return m_raw_path;
}
void URI::setRawPath(const QString &raw_path) {
    m_raw_path = raw_path;
    m_raw_path_isSet = true;
}

bool URI::is_raw_path_Set() const{
    return m_raw_path_isSet;
}

bool URI::is_raw_path_Valid() const{
    return m_raw_path_isValid;
}

QString URI::getRawQuery() const {
    return m_raw_query;
}
void URI::setRawQuery(const QString &raw_query) {
    m_raw_query = raw_query;
    m_raw_query_isSet = true;
}

bool URI::is_raw_query_Set() const{
    return m_raw_query_isSet;
}

bool URI::is_raw_query_Valid() const{
    return m_raw_query_isValid;
}

QString URI::getRawSchemeSpecificPart() const {
    return m_raw_scheme_specific_part;
}
void URI::setRawSchemeSpecificPart(const QString &raw_scheme_specific_part) {
    m_raw_scheme_specific_part = raw_scheme_specific_part;
    m_raw_scheme_specific_part_isSet = true;
}

bool URI::is_raw_scheme_specific_part_Set() const{
    return m_raw_scheme_specific_part_isSet;
}

bool URI::is_raw_scheme_specific_part_Valid() const{
    return m_raw_scheme_specific_part_isValid;
}

QString URI::getRawUserInfo() const {
    return m_raw_user_info;
}
void URI::setRawUserInfo(const QString &raw_user_info) {
    m_raw_user_info = raw_user_info;
    m_raw_user_info_isSet = true;
}

bool URI::is_raw_user_info_Set() const{
    return m_raw_user_info_isSet;
}

bool URI::is_raw_user_info_Valid() const{
    return m_raw_user_info_isValid;
}

QString URI::getScheme() const {
    return m_scheme;
}
void URI::setScheme(const QString &scheme) {
    m_scheme = scheme;
    m_scheme_isSet = true;
}

bool URI::is_scheme_Set() const{
    return m_scheme_isSet;
}

bool URI::is_scheme_Valid() const{
    return m_scheme_isValid;
}

QString URI::getSchemeSpecificPart() const {
    return m_scheme_specific_part;
}
void URI::setSchemeSpecificPart(const QString &scheme_specific_part) {
    m_scheme_specific_part = scheme_specific_part;
    m_scheme_specific_part_isSet = true;
}

bool URI::is_scheme_specific_part_Set() const{
    return m_scheme_specific_part_isSet;
}

bool URI::is_scheme_specific_part_Valid() const{
    return m_scheme_specific_part_isValid;
}

QString URI::getUserInfo() const {
    return m_user_info;
}
void URI::setUserInfo(const QString &user_info) {
    m_user_info = user_info;
    m_user_info_isSet = true;
}

bool URI::is_user_info_Set() const{
    return m_user_info_isSet;
}

bool URI::is_user_info_Valid() const{
    return m_user_info_isValid;
}

bool URI::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_absolute_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fragment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opaque_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_raw_authority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_raw_fragment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_raw_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_raw_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_raw_scheme_specific_part_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_raw_user_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheme_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheme_specific_part_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_info_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool URI::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
