/**
 * Health ID Service
 * It is important to standardize the process of identification of an individual across healthcare providers, to ensure that the created medical records are issued to the right individual or accessed by a Health Information User through appropriate consent.  In order to issue a Health ID to an individual, one only needs basic demographic details like Name, Year of Birth, Gender. In addition, citizens should be able to update contact information easily.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuthWithMobileTxnAndUserData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuthWithMobileTxnAndUserData::OAIAuthWithMobileTxnAndUserData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuthWithMobileTxnAndUserData::OAIAuthWithMobileTxnAndUserData() {
    this->initializeModel();
}

OAIAuthWithMobileTxnAndUserData::~OAIAuthWithMobileTxnAndUserData() {}

void OAIAuthWithMobileTxnAndUserData::initializeModel() {

    m_gender_isSet = false;
    m_gender_isValid = false;

    m_health_id_isSet = false;
    m_health_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;

    m_txn_id_isSet = false;
    m_txn_id_isValid = false;

    m_year_of_birth_isSet = false;
    m_year_of_birth_isValid = false;
}

void OAIAuthWithMobileTxnAndUserData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuthWithMobileTxnAndUserData::fromJsonObject(QJsonObject json) {

    m_gender_isValid = ::OpenAPI::fromJsonValue(m_gender, json[QString("gender")]);
    m_gender_isSet = !json[QString("gender")].isNull() && m_gender_isValid;

    m_health_id_isValid = ::OpenAPI::fromJsonValue(m_health_id, json[QString("healthId")]);
    m_health_id_isSet = !json[QString("healthId")].isNull() && m_health_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;

    m_txn_id_isValid = ::OpenAPI::fromJsonValue(m_txn_id, json[QString("txnId")]);
    m_txn_id_isSet = !json[QString("txnId")].isNull() && m_txn_id_isValid;

    m_year_of_birth_isValid = ::OpenAPI::fromJsonValue(m_year_of_birth, json[QString("yearOfBirth")]);
    m_year_of_birth_isSet = !json[QString("yearOfBirth")].isNull() && m_year_of_birth_isValid;
}

QString OAIAuthWithMobileTxnAndUserData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuthWithMobileTxnAndUserData::asJsonObject() const {
    QJsonObject obj;
    if (m_gender_isSet) {
        obj.insert(QString("gender"), ::OpenAPI::toJsonValue(m_gender));
    }
    if (m_health_id_isSet) {
        obj.insert(QString("healthId"), ::OpenAPI::toJsonValue(m_health_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_token_isSet) {
        obj.insert(QString("token"), ::OpenAPI::toJsonValue(m_token));
    }
    if (m_txn_id_isSet) {
        obj.insert(QString("txnId"), ::OpenAPI::toJsonValue(m_txn_id));
    }
    if (m_year_of_birth_isSet) {
        obj.insert(QString("yearOfBirth"), ::OpenAPI::toJsonValue(m_year_of_birth));
    }
    return obj;
}

QString OAIAuthWithMobileTxnAndUserData::getGender() const {
    return m_gender;
}
void OAIAuthWithMobileTxnAndUserData::setGender(const QString &gender) {
    m_gender = gender;
    m_gender_isSet = true;
}

bool OAIAuthWithMobileTxnAndUserData::is_gender_Set() const{
    return m_gender_isSet;
}

bool OAIAuthWithMobileTxnAndUserData::is_gender_Valid() const{
    return m_gender_isValid;
}

QString OAIAuthWithMobileTxnAndUserData::getHealthId() const {
    return m_health_id;
}
void OAIAuthWithMobileTxnAndUserData::setHealthId(const QString &health_id) {
    m_health_id = health_id;
    m_health_id_isSet = true;
}

bool OAIAuthWithMobileTxnAndUserData::is_health_id_Set() const{
    return m_health_id_isSet;
}

bool OAIAuthWithMobileTxnAndUserData::is_health_id_Valid() const{
    return m_health_id_isValid;
}

QString OAIAuthWithMobileTxnAndUserData::getName() const {
    return m_name;
}
void OAIAuthWithMobileTxnAndUserData::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAuthWithMobileTxnAndUserData::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAuthWithMobileTxnAndUserData::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAuthWithMobileTxnAndUserData::getToken() const {
    return m_token;
}
void OAIAuthWithMobileTxnAndUserData::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAIAuthWithMobileTxnAndUserData::is_token_Set() const{
    return m_token_isSet;
}

bool OAIAuthWithMobileTxnAndUserData::is_token_Valid() const{
    return m_token_isValid;
}

QString OAIAuthWithMobileTxnAndUserData::getTxnId() const {
    return m_txn_id;
}
void OAIAuthWithMobileTxnAndUserData::setTxnId(const QString &txn_id) {
    m_txn_id = txn_id;
    m_txn_id_isSet = true;
}

bool OAIAuthWithMobileTxnAndUserData::is_txn_id_Set() const{
    return m_txn_id_isSet;
}

bool OAIAuthWithMobileTxnAndUserData::is_txn_id_Valid() const{
    return m_txn_id_isValid;
}

QString OAIAuthWithMobileTxnAndUserData::getYearOfBirth() const {
    return m_year_of_birth;
}
void OAIAuthWithMobileTxnAndUserData::setYearOfBirth(const QString &year_of_birth) {
    m_year_of_birth = year_of_birth;
    m_year_of_birth_isSet = true;
}

bool OAIAuthWithMobileTxnAndUserData::is_year_of_birth_Set() const{
    return m_year_of_birth_isSet;
}

bool OAIAuthWithMobileTxnAndUserData::is_year_of_birth_Valid() const{
    return m_year_of_birth_isValid;
}

bool OAIAuthWithMobileTxnAndUserData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gender_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_txn_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_of_birth_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuthWithMobileTxnAndUserData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_txn_id_isValid && true;
}

} // namespace OpenAPI
