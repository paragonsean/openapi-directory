/**
 * Health ID Service
 * It is important to standardize the process of identification of an individual across healthcare providers, to ensure that the created medical records are issued to the right individual or accessed by a Health Information User through appropriate consent.  In order to issue a Health ID to an individual, one only needs basic demographic details like Name, Year of Birth, Gender. In addition, citizens should be able to update contact information easily.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRegistrationWithAadhaarApi_H
#define OAI_OAIRegistrationWithAadhaarApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAadharNumberRequestPayload.h"
#include "OAIAadharOtpGenerateRequestPayLoad.h"
#include "OAICreateAccountJwtResponse.h"
#include "OAICreateAccountWithAadhaarOtp.h"
#include "OAICreateAccountWithPreVerifiedAadhaar.h"
#include "OAIGenerateMobileOTPForTxnRequest.h"
#include "OAIObject.h"
#include "OAIResendOTPRequest.h"
#include "OAITxnResponse.h"
#include "OAIVerifyAadhaarOtp.h"
#include "OAIVerifyAadhaarWithBio.h"
#include "OAIVerifyMobileRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRegistrationWithAadhaarApi : public QObject {
    Q_OBJECT

public:
    OAIRegistrationWithAadhaarApi(const int timeOut = 0);
    ~OAIRegistrationWithAadhaarApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  account_request OAICreateAccountWithPreVerifiedAadhaar [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void createAadhaarAccountUsingPOST(const OAICreateAccountWithPreVerifiedAadhaar &account_request, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  generate_otp_request OAIAadharOtpGenerateRequestPayLoad [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void generateAadharOTPUsingPOST(const OAIAadharOtpGenerateRequestPayLoad &generate_otp_request, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  request OAIGenerateMobileOTPForTxnRequest [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void generateMobileOTPForTxnUsingPOST(const OAIGenerateMobileOTPForTxnRequest &request, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aadhar_number_request_payload OAIAadharNumberRequestPayload [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void getHealthIdNumbersByAadharUsingPOST(const OAIAadharNumberRequestPayload &aadhar_number_request_payload, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  request OAIResendOTPRequest [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void resendAadharOTPUsingPOST(const OAIResendOTPRequest &request, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  verify_aadhar_otp_request OAIVerifyAadhaarWithBio [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void verifyAadharBioUsingPOST(const OAIVerifyAadhaarWithBio &verify_aadhar_otp_request, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  verify_aadhaar_otp OAIVerifyAadhaarOtp [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void verifyAadharOTPOnlyUsingPOST(const OAIVerifyAadhaarOtp &verify_aadhaar_otp, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  verify_aadhar_otp_request OAICreateAccountWithAadhaarOtp [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void verifyAadharOTPUsingPOST(const OAICreateAccountWithAadhaarOtp &verify_aadhar_otp_request, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  request OAIVerifyMobileRequest [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void verifyMobileOTPForTxnUsingPOST(const OAIVerifyMobileRequest &request, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createAadhaarAccountUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void generateAadharOTPUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void generateMobileOTPForTxnUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void getHealthIdNumbersByAadharUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void resendAadharOTPUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void verifyAadharBioUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void verifyAadharOTPOnlyUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void verifyAadharOTPUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void verifyMobileOTPForTxnUsingPOSTCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createAadhaarAccountUsingPOSTSignal(OAICreateAccountJwtResponse summary);
    void generateAadharOTPUsingPOSTSignal(OAITxnResponse summary);
    void generateMobileOTPForTxnUsingPOSTSignal(OAITxnResponse summary);
    void getHealthIdNumbersByAadharUsingPOSTSignal(QList<OAIObject> summary);
    void resendAadharOTPUsingPOSTSignal(OAICreateAccountJwtResponse summary);
    void verifyAadharBioUsingPOSTSignal(OAITxnResponse summary);
    void verifyAadharOTPOnlyUsingPOSTSignal(OAITxnResponse summary);
    void verifyAadharOTPUsingPOSTSignal(OAICreateAccountJwtResponse summary);
    void verifyMobileOTPForTxnUsingPOSTSignal(OAITxnResponse summary);


    void createAadhaarAccountUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAICreateAccountJwtResponse summary);
    void generateAadharOTPUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAITxnResponse summary);
    void generateMobileOTPForTxnUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAITxnResponse summary);
    void getHealthIdNumbersByAadharUsingPOSTSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void resendAadharOTPUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAICreateAccountJwtResponse summary);
    void verifyAadharBioUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAITxnResponse summary);
    void verifyAadharOTPOnlyUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAITxnResponse summary);
    void verifyAadharOTPUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAICreateAccountJwtResponse summary);
    void verifyMobileOTPForTxnUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAITxnResponse summary);

    Q_DECL_DEPRECATED_X("Use createAadhaarAccountUsingPOSTSignalError() instead")
    void createAadhaarAccountUsingPOSTSignalE(OAICreateAccountJwtResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAadhaarAccountUsingPOSTSignalError(OAICreateAccountJwtResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateAadharOTPUsingPOSTSignalError() instead")
    void generateAadharOTPUsingPOSTSignalE(OAITxnResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateAadharOTPUsingPOSTSignalError(OAITxnResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateMobileOTPForTxnUsingPOSTSignalError() instead")
    void generateMobileOTPForTxnUsingPOSTSignalE(OAITxnResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateMobileOTPForTxnUsingPOSTSignalError(OAITxnResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHealthIdNumbersByAadharUsingPOSTSignalError() instead")
    void getHealthIdNumbersByAadharUsingPOSTSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getHealthIdNumbersByAadharUsingPOSTSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resendAadharOTPUsingPOSTSignalError() instead")
    void resendAadharOTPUsingPOSTSignalE(OAICreateAccountJwtResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resendAadharOTPUsingPOSTSignalError(OAICreateAccountJwtResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use verifyAadharBioUsingPOSTSignalError() instead")
    void verifyAadharBioUsingPOSTSignalE(OAITxnResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void verifyAadharBioUsingPOSTSignalError(OAITxnResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use verifyAadharOTPOnlyUsingPOSTSignalError() instead")
    void verifyAadharOTPOnlyUsingPOSTSignalE(OAITxnResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void verifyAadharOTPOnlyUsingPOSTSignalError(OAITxnResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use verifyAadharOTPUsingPOSTSignalError() instead")
    void verifyAadharOTPUsingPOSTSignalE(OAICreateAccountJwtResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void verifyAadharOTPUsingPOSTSignalError(OAICreateAccountJwtResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use verifyMobileOTPForTxnUsingPOSTSignalError() instead")
    void verifyMobileOTPForTxnUsingPOSTSignalE(OAITxnResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void verifyMobileOTPForTxnUsingPOSTSignalError(OAITxnResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createAadhaarAccountUsingPOSTSignalErrorFull() instead")
    void createAadhaarAccountUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAadhaarAccountUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateAadharOTPUsingPOSTSignalErrorFull() instead")
    void generateAadharOTPUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateAadharOTPUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateMobileOTPForTxnUsingPOSTSignalErrorFull() instead")
    void generateMobileOTPForTxnUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateMobileOTPForTxnUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHealthIdNumbersByAadharUsingPOSTSignalErrorFull() instead")
    void getHealthIdNumbersByAadharUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getHealthIdNumbersByAadharUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resendAadharOTPUsingPOSTSignalErrorFull() instead")
    void resendAadharOTPUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resendAadharOTPUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use verifyAadharBioUsingPOSTSignalErrorFull() instead")
    void verifyAadharBioUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void verifyAadharBioUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use verifyAadharOTPOnlyUsingPOSTSignalErrorFull() instead")
    void verifyAadharOTPOnlyUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void verifyAadharOTPOnlyUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use verifyAadharOTPUsingPOSTSignalErrorFull() instead")
    void verifyAadharOTPUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void verifyAadharOTPUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use verifyMobileOTPForTxnUsingPOSTSignalErrorFull() instead")
    void verifyMobileOTPForTxnUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void verifyMobileOTPForTxnUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
