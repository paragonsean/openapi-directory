/**
 * Health ID Service
 * It is important to standardize the process of identification of an individual across healthcare providers, to ensure that the created medical records are issued to the right individual or accessed by a Health Information User through appropriate consent.  In order to issue a Health ID to an individual, one only needs basic demographic details like Name, Year of Birth, Gender. In addition, citizens should be able to update contact information easily.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuthenticationApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIAuthenticationApi::OAIAuthenticationApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIAuthenticationApi::~OAIAuthenticationApi() {
}

void OAIAuthenticationApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://healthidsbx.ndhm.gov.in/api"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("authAccountPasswordRequestUsingPOST", defaultConf);
    _serverIndices.insert("authAccountPasswordRequestUsingPOST", 0);
    _serverConfigs.insert("authWithMobileTokenUsingPOST", defaultConf);
    _serverIndices.insert("authWithMobileTokenUsingPOST", 0);
    _serverConfigs.insert("authenticateUserUsingPOST", defaultConf);
    _serverIndices.insert("authenticateUserUsingPOST", 0);
    _serverConfigs.insert("authenticateWithPasswordUsingPOST", defaultConf);
    _serverIndices.insert("authenticateWithPasswordUsingPOST", 0);
    _serverConfigs.insert("certUsingGET", defaultConf);
    _serverIndices.insert("certUsingGET", 0);
    _serverConfigs.insert("confirmWithAadhaarBioUsingPOST", defaultConf);
    _serverIndices.insert("confirmWithAadhaarBioUsingPOST", 0);
    _serverConfigs.insert("confirmWithAadhaarOtpUsingPOST", defaultConf);
    _serverIndices.insert("confirmWithAadhaarOtpUsingPOST", 0);
    _serverConfigs.insert("confirmWithDemographicsUsingPOST", defaultConf);
    _serverIndices.insert("confirmWithDemographicsUsingPOST", 0);
    _serverConfigs.insert("confirmWithMobileUsingPOST", defaultConf);
    _serverIndices.insert("confirmWithMobileUsingPOST", 0);
    _serverConfigs.insert("initiateAuthUsingPOST", defaultConf);
    _serverIndices.insert("initiateAuthUsingPOST", 0);
    _serverConfigs.insert("resendAuthMobileOTPUsingPOST", defaultConf);
    _serverIndices.insert("resendAuthMobileOTPUsingPOST", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIAuthenticationApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIAuthenticationApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIAuthenticationApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIAuthenticationApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIAuthenticationApi::setUsername(const QString &username) {
    _username = username;
}

void OAIAuthenticationApi::setPassword(const QString &password) {
    _password = password;
}


void OAIAuthenticationApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIAuthenticationApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIAuthenticationApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIAuthenticationApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIAuthenticationApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIAuthenticationApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIAuthenticationApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIAuthenticationApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIAuthenticationApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIAuthenticationApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIAuthenticationApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIAuthenticationApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIAuthenticationApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIAuthenticationApi::authAccountPasswordRequestUsingPOST(const OAIAuthWithPasswordRequest &authentication_request, const ::OpenAPI::OptionalParam<QString> &accept_language) {
    QString fullPath = QString(_serverConfigs["authAccountPasswordRequestUsingPOST"][_serverIndices.value("authAccountPasswordRequestUsingPOST")].URL()+"/v1/auth/confirmWithPassword");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    if (_apiKeys.contains("X-HIP-ID")) {
        addHeaders("X-HIP-ID",_apiKeys.find("X-HIP-ID").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = authentication_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept_language.value()).isEmpty()) {
            input.headers.insert("Accept-Language", ::OpenAPI::toStringValue(accept_language.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAuthenticationApi::authAccountPasswordRequestUsingPOSTCallback);
    connect(this, &OAIAuthenticationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAuthenticationApi::authAccountPasswordRequestUsingPOSTCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIJwtResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT authAccountPasswordRequestUsingPOSTSignal(output);
        Q_EMIT authAccountPasswordRequestUsingPOSTSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT authAccountPasswordRequestUsingPOSTSignalE(output, error_type, error_str);
        Q_EMIT authAccountPasswordRequestUsingPOSTSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT authAccountPasswordRequestUsingPOSTSignalError(output, error_type, error_str);
        Q_EMIT authAccountPasswordRequestUsingPOSTSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAuthenticationApi::authWithMobileTokenUsingPOST(const OAIAuthWithMobileTxnAndUserData &auth_request, const ::OpenAPI::OptionalParam<QString> &accept_language) {
    QString fullPath = QString(_serverConfigs["authWithMobileTokenUsingPOST"][_serverIndices.value("authWithMobileTokenUsingPOST")].URL()+"/v1/auth/authWithMobileToken");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    if (_apiKeys.contains("X-HIP-ID")) {
        addHeaders("X-HIP-ID",_apiKeys.find("X-HIP-ID").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = auth_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept_language.value()).isEmpty()) {
            input.headers.insert("Accept-Language", ::OpenAPI::toStringValue(accept_language.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAuthenticationApi::authWithMobileTokenUsingPOSTCallback);
    connect(this, &OAIAuthenticationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAuthenticationApi::authWithMobileTokenUsingPOSTCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIJwtResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT authWithMobileTokenUsingPOSTSignal(output);
        Q_EMIT authWithMobileTokenUsingPOSTSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT authWithMobileTokenUsingPOSTSignalE(output, error_type, error_str);
        Q_EMIT authWithMobileTokenUsingPOSTSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT authWithMobileTokenUsingPOSTSignalError(output, error_type, error_str);
        Q_EMIT authWithMobileTokenUsingPOSTSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAuthenticationApi::authenticateUserUsingPOST(const OAIAuthMobileOTPRequest &auth_request, const ::OpenAPI::OptionalParam<QString> &accept_language) {
    QString fullPath = QString(_serverConfigs["authenticateUserUsingPOST"][_serverIndices.value("authenticateUserUsingPOST")].URL()+"/v1/auth/authWithMobile");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    if (_apiKeys.contains("X-HIP-ID")) {
        addHeaders("X-HIP-ID",_apiKeys.find("X-HIP-ID").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = auth_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept_language.value()).isEmpty()) {
            input.headers.insert("Accept-Language", ::OpenAPI::toStringValue(accept_language.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAuthenticationApi::authenticateUserUsingPOSTCallback);
    connect(this, &OAIAuthenticationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAuthenticationApi::authenticateUserUsingPOSTCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITxnResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT authenticateUserUsingPOSTSignal(output);
        Q_EMIT authenticateUserUsingPOSTSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT authenticateUserUsingPOSTSignalE(output, error_type, error_str);
        Q_EMIT authenticateUserUsingPOSTSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT authenticateUserUsingPOSTSignalError(output, error_type, error_str);
        Q_EMIT authenticateUserUsingPOSTSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAuthenticationApi::authenticateWithPasswordUsingPOST(const OAIJwtRequest &authentication_request, const ::OpenAPI::OptionalParam<QString> &accept_language) {
    QString fullPath = QString(_serverConfigs["authenticateWithPasswordUsingPOST"][_serverIndices.value("authenticateWithPasswordUsingPOST")].URL()+"/v1/auth/authPassword");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    if (_apiKeys.contains("X-HIP-ID")) {
        addHeaders("X-HIP-ID",_apiKeys.find("X-HIP-ID").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = authentication_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept_language.value()).isEmpty()) {
            input.headers.insert("Accept-Language", ::OpenAPI::toStringValue(accept_language.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAuthenticationApi::authenticateWithPasswordUsingPOSTCallback);
    connect(this, &OAIAuthenticationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAuthenticationApi::authenticateWithPasswordUsingPOSTCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIJwtResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT authenticateWithPasswordUsingPOSTSignal(output);
        Q_EMIT authenticateWithPasswordUsingPOSTSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT authenticateWithPasswordUsingPOSTSignalE(output, error_type, error_str);
        Q_EMIT authenticateWithPasswordUsingPOSTSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT authenticateWithPasswordUsingPOSTSignalError(output, error_type, error_str);
        Q_EMIT authenticateWithPasswordUsingPOSTSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAuthenticationApi::certUsingGET(const ::OpenAPI::OptionalParam<QString> &accept_language) {
    QString fullPath = QString(_serverConfigs["certUsingGET"][_serverIndices.value("certUsingGET")].URL()+"/v1/auth/cert");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    if (_apiKeys.contains("X-HIP-ID")) {
        addHeaders("X-HIP-ID",_apiKeys.find("X-HIP-ID").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept_language.value()).isEmpty()) {
            input.headers.insert("Accept-Language", ::OpenAPI::toStringValue(accept_language.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAuthenticationApi::certUsingGETCallback);
    connect(this, &OAIAuthenticationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAuthenticationApi::certUsingGETCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QString output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT certUsingGETSignal(output);
        Q_EMIT certUsingGETSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT certUsingGETSignalE(output, error_type, error_str);
        Q_EMIT certUsingGETSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT certUsingGETSignalError(output, error_type, error_str);
        Q_EMIT certUsingGETSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAuthenticationApi::confirmWithAadhaarBioUsingPOST(const OAIAuthAccountAadhaarBioRequest &authentication_request, const ::OpenAPI::OptionalParam<QString> &accept_language) {
    QString fullPath = QString(_serverConfigs["confirmWithAadhaarBioUsingPOST"][_serverIndices.value("confirmWithAadhaarBioUsingPOST")].URL()+"/v1/auth/confirmWithAadhaarBio");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    if (_apiKeys.contains("X-HIP-ID")) {
        addHeaders("X-HIP-ID",_apiKeys.find("X-HIP-ID").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = authentication_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept_language.value()).isEmpty()) {
            input.headers.insert("Accept-Language", ::OpenAPI::toStringValue(accept_language.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAuthenticationApi::confirmWithAadhaarBioUsingPOSTCallback);
    connect(this, &OAIAuthenticationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAuthenticationApi::confirmWithAadhaarBioUsingPOSTCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIJwtResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT confirmWithAadhaarBioUsingPOSTSignal(output);
        Q_EMIT confirmWithAadhaarBioUsingPOSTSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT confirmWithAadhaarBioUsingPOSTSignalE(output, error_type, error_str);
        Q_EMIT confirmWithAadhaarBioUsingPOSTSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT confirmWithAadhaarBioUsingPOSTSignalError(output, error_type, error_str);
        Q_EMIT confirmWithAadhaarBioUsingPOSTSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAuthenticationApi::confirmWithAadhaarOtpUsingPOST(const OAIAuthAccountAadhaarOTPRequest &authentication_request, const ::OpenAPI::OptionalParam<QString> &accept_language) {
    QString fullPath = QString(_serverConfigs["confirmWithAadhaarOtpUsingPOST"][_serverIndices.value("confirmWithAadhaarOtpUsingPOST")].URL()+"/v1/auth/confirmWithAadhaarOtp");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    if (_apiKeys.contains("X-HIP-ID")) {
        addHeaders("X-HIP-ID",_apiKeys.find("X-HIP-ID").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = authentication_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept_language.value()).isEmpty()) {
            input.headers.insert("Accept-Language", ::OpenAPI::toStringValue(accept_language.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAuthenticationApi::confirmWithAadhaarOtpUsingPOSTCallback);
    connect(this, &OAIAuthenticationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAuthenticationApi::confirmWithAadhaarOtpUsingPOSTCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIJwtResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT confirmWithAadhaarOtpUsingPOSTSignal(output);
        Q_EMIT confirmWithAadhaarOtpUsingPOSTSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT confirmWithAadhaarOtpUsingPOSTSignalE(output, error_type, error_str);
        Q_EMIT confirmWithAadhaarOtpUsingPOSTSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT confirmWithAadhaarOtpUsingPOSTSignalError(output, error_type, error_str);
        Q_EMIT confirmWithAadhaarOtpUsingPOSTSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAuthenticationApi::confirmWithDemographicsUsingPOST(const OAIAuthAccountWithDemographicsRequest &authentication_request, const ::OpenAPI::OptionalParam<QString> &accept_language) {
    QString fullPath = QString(_serverConfigs["confirmWithDemographicsUsingPOST"][_serverIndices.value("confirmWithDemographicsUsingPOST")].URL()+"/v1/auth/confirmWithDemographics");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    if (_apiKeys.contains("X-HIP-ID")) {
        addHeaders("X-HIP-ID",_apiKeys.find("X-HIP-ID").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = authentication_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept_language.value()).isEmpty()) {
            input.headers.insert("Accept-Language", ::OpenAPI::toStringValue(accept_language.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAuthenticationApi::confirmWithDemographicsUsingPOSTCallback);
    connect(this, &OAIAuthenticationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAuthenticationApi::confirmWithDemographicsUsingPOSTCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QString output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT confirmWithDemographicsUsingPOSTSignal(output);
        Q_EMIT confirmWithDemographicsUsingPOSTSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT confirmWithDemographicsUsingPOSTSignalE(output, error_type, error_str);
        Q_EMIT confirmWithDemographicsUsingPOSTSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT confirmWithDemographicsUsingPOSTSignalError(output, error_type, error_str);
        Q_EMIT confirmWithDemographicsUsingPOSTSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAuthenticationApi::confirmWithMobileUsingPOST(const OAIAuthAccountMobileOTPRequest &authentication_request, const ::OpenAPI::OptionalParam<QString> &accept_language) {
    QString fullPath = QString(_serverConfigs["confirmWithMobileUsingPOST"][_serverIndices.value("confirmWithMobileUsingPOST")].URL()+"/v1/auth/confirmWithMobileOTP");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    if (_apiKeys.contains("X-HIP-ID")) {
        addHeaders("X-HIP-ID",_apiKeys.find("X-HIP-ID").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = authentication_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept_language.value()).isEmpty()) {
            input.headers.insert("Accept-Language", ::OpenAPI::toStringValue(accept_language.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAuthenticationApi::confirmWithMobileUsingPOSTCallback);
    connect(this, &OAIAuthenticationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAuthenticationApi::confirmWithMobileUsingPOSTCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIJwtResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT confirmWithMobileUsingPOSTSignal(output);
        Q_EMIT confirmWithMobileUsingPOSTSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT confirmWithMobileUsingPOSTSignalE(output, error_type, error_str);
        Q_EMIT confirmWithMobileUsingPOSTSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT confirmWithMobileUsingPOSTSignalError(output, error_type, error_str);
        Q_EMIT confirmWithMobileUsingPOSTSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAuthenticationApi::initiateAuthUsingPOST(const OAIAuthInitRequest &auth_request, const ::OpenAPI::OptionalParam<QString> &accept_language) {
    QString fullPath = QString(_serverConfigs["initiateAuthUsingPOST"][_serverIndices.value("initiateAuthUsingPOST")].URL()+"/v1/auth/init");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    if (_apiKeys.contains("X-HIP-ID")) {
        addHeaders("X-HIP-ID",_apiKeys.find("X-HIP-ID").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = auth_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept_language.value()).isEmpty()) {
            input.headers.insert("Accept-Language", ::OpenAPI::toStringValue(accept_language.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAuthenticationApi::initiateAuthUsingPOSTCallback);
    connect(this, &OAIAuthenticationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAuthenticationApi::initiateAuthUsingPOSTCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITxnResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT initiateAuthUsingPOSTSignal(output);
        Q_EMIT initiateAuthUsingPOSTSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT initiateAuthUsingPOSTSignalE(output, error_type, error_str);
        Q_EMIT initiateAuthUsingPOSTSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT initiateAuthUsingPOSTSignalError(output, error_type, error_str);
        Q_EMIT initiateAuthUsingPOSTSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAuthenticationApi::resendAuthMobileOTPUsingPOST(const OAIResendOTPRequest &resend_otp_request, const ::OpenAPI::OptionalParam<QString> &accept_language) {
    QString fullPath = QString(_serverConfigs["resendAuthMobileOTPUsingPOST"][_serverIndices.value("resendAuthMobileOTPUsingPOST")].URL()+"/v1/auth/resendAuthOTP");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    if (_apiKeys.contains("X-HIP-ID")) {
        addHeaders("X-HIP-ID",_apiKeys.find("X-HIP-ID").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = resend_otp_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept_language.value()).isEmpty()) {
            input.headers.insert("Accept-Language", ::OpenAPI::toStringValue(accept_language.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAuthenticationApi::resendAuthMobileOTPUsingPOSTCallback);
    connect(this, &OAIAuthenticationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAuthenticationApi::resendAuthMobileOTPUsingPOSTCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    bool output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT resendAuthMobileOTPUsingPOSTSignal(output);
        Q_EMIT resendAuthMobileOTPUsingPOSTSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT resendAuthMobileOTPUsingPOSTSignalE(output, error_type, error_str);
        Q_EMIT resendAuthMobileOTPUsingPOSTSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT resendAuthMobileOTPUsingPOSTSignalError(output, error_type, error_str);
        Q_EMIT resendAuthMobileOTPUsingPOSTSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAuthenticationApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
