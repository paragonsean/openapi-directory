# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TagRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, health_id: str=None, tags: Dict[str, str]=None):
        """TagRequest - a model defined in OpenAPI

        :param health_id: The health_id of this TagRequest.
        :param tags: The tags of this TagRequest.
        """
        self.openapi_types = {
            'health_id': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'health_id': 'healthId',
            'tags': 'tags'
        }

        self._health_id = health_id
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TagRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TagRequest of this TagRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def health_id(self):
        """Gets the health_id of this TagRequest.


        :return: The health_id of this TagRequest.
        :rtype: str
        """
        return self._health_id

    @health_id.setter
    def health_id(self, health_id):
        """Sets the health_id of this TagRequest.


        :param health_id: The health_id of this TagRequest.
        :type health_id: str
        """

        self._health_id = health_id

    @property
    def tags(self):
        """Gets the tags of this TagRequest.


        :return: The tags of this TagRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this TagRequest.


        :param tags: The tags of this TagRequest.
        :type tags: Dict[str, str]
        """

        self._tags = tags
