# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HidBenefitSearchResponsePayload(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, benefit_id: str=None, benefit_name: str=None, health_id_number: str=None, state_code: str=None):
        """HidBenefitSearchResponsePayload - a model defined in OpenAPI

        :param benefit_id: The benefit_id of this HidBenefitSearchResponsePayload.
        :param benefit_name: The benefit_name of this HidBenefitSearchResponsePayload.
        :param health_id_number: The health_id_number of this HidBenefitSearchResponsePayload.
        :param state_code: The state_code of this HidBenefitSearchResponsePayload.
        """
        self.openapi_types = {
            'benefit_id': str,
            'benefit_name': str,
            'health_id_number': str,
            'state_code': str
        }

        self.attribute_map = {
            'benefit_id': 'benefitId',
            'benefit_name': 'benefitName',
            'health_id_number': 'healthIdNumber',
            'state_code': 'stateCode'
        }

        self._benefit_id = benefit_id
        self._benefit_name = benefit_name
        self._health_id_number = health_id_number
        self._state_code = state_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HidBenefitSearchResponsePayload':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HidBenefitSearchResponsePayload of this HidBenefitSearchResponsePayload.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def benefit_id(self):
        """Gets the benefit_id of this HidBenefitSearchResponsePayload.


        :return: The benefit_id of this HidBenefitSearchResponsePayload.
        :rtype: str
        """
        return self._benefit_id

    @benefit_id.setter
    def benefit_id(self, benefit_id):
        """Sets the benefit_id of this HidBenefitSearchResponsePayload.


        :param benefit_id: The benefit_id of this HidBenefitSearchResponsePayload.
        :type benefit_id: str
        """

        self._benefit_id = benefit_id

    @property
    def benefit_name(self):
        """Gets the benefit_name of this HidBenefitSearchResponsePayload.


        :return: The benefit_name of this HidBenefitSearchResponsePayload.
        :rtype: str
        """
        return self._benefit_name

    @benefit_name.setter
    def benefit_name(self, benefit_name):
        """Sets the benefit_name of this HidBenefitSearchResponsePayload.


        :param benefit_name: The benefit_name of this HidBenefitSearchResponsePayload.
        :type benefit_name: str
        """

        self._benefit_name = benefit_name

    @property
    def health_id_number(self):
        """Gets the health_id_number of this HidBenefitSearchResponsePayload.


        :return: The health_id_number of this HidBenefitSearchResponsePayload.
        :rtype: str
        """
        return self._health_id_number

    @health_id_number.setter
    def health_id_number(self, health_id_number):
        """Sets the health_id_number of this HidBenefitSearchResponsePayload.


        :param health_id_number: The health_id_number of this HidBenefitSearchResponsePayload.
        :type health_id_number: str
        """

        self._health_id_number = health_id_number

    @property
    def state_code(self):
        """Gets the state_code of this HidBenefitSearchResponsePayload.


        :return: The state_code of this HidBenefitSearchResponsePayload.
        :rtype: str
        """
        return self._state_code

    @state_code.setter
    def state_code(self, state_code):
        """Sets the state_code of this HidBenefitSearchResponsePayload.


        :param state_code: The state_code of this HidBenefitSearchResponsePayload.
        :type state_code: str
        """

        self._state_code = state_code
