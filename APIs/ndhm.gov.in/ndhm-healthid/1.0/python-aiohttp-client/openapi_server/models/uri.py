# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class URI(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, absolute: bool=None, authority: str=None, fragment: str=None, host: str=None, opaque: bool=None, path: str=None, port: int=None, query: str=None, raw_authority: str=None, raw_fragment: str=None, raw_path: str=None, raw_query: str=None, raw_scheme_specific_part: str=None, raw_user_info: str=None, scheme: str=None, scheme_specific_part: str=None, user_info: str=None):
        """URI - a model defined in OpenAPI

        :param absolute: The absolute of this URI.
        :param authority: The authority of this URI.
        :param fragment: The fragment of this URI.
        :param host: The host of this URI.
        :param opaque: The opaque of this URI.
        :param path: The path of this URI.
        :param port: The port of this URI.
        :param query: The query of this URI.
        :param raw_authority: The raw_authority of this URI.
        :param raw_fragment: The raw_fragment of this URI.
        :param raw_path: The raw_path of this URI.
        :param raw_query: The raw_query of this URI.
        :param raw_scheme_specific_part: The raw_scheme_specific_part of this URI.
        :param raw_user_info: The raw_user_info of this URI.
        :param scheme: The scheme of this URI.
        :param scheme_specific_part: The scheme_specific_part of this URI.
        :param user_info: The user_info of this URI.
        """
        self.openapi_types = {
            'absolute': bool,
            'authority': str,
            'fragment': str,
            'host': str,
            'opaque': bool,
            'path': str,
            'port': int,
            'query': str,
            'raw_authority': str,
            'raw_fragment': str,
            'raw_path': str,
            'raw_query': str,
            'raw_scheme_specific_part': str,
            'raw_user_info': str,
            'scheme': str,
            'scheme_specific_part': str,
            'user_info': str
        }

        self.attribute_map = {
            'absolute': 'absolute',
            'authority': 'authority',
            'fragment': 'fragment',
            'host': 'host',
            'opaque': 'opaque',
            'path': 'path',
            'port': 'port',
            'query': 'query',
            'raw_authority': 'rawAuthority',
            'raw_fragment': 'rawFragment',
            'raw_path': 'rawPath',
            'raw_query': 'rawQuery',
            'raw_scheme_specific_part': 'rawSchemeSpecificPart',
            'raw_user_info': 'rawUserInfo',
            'scheme': 'scheme',
            'scheme_specific_part': 'schemeSpecificPart',
            'user_info': 'userInfo'
        }

        self._absolute = absolute
        self._authority = authority
        self._fragment = fragment
        self._host = host
        self._opaque = opaque
        self._path = path
        self._port = port
        self._query = query
        self._raw_authority = raw_authority
        self._raw_fragment = raw_fragment
        self._raw_path = raw_path
        self._raw_query = raw_query
        self._raw_scheme_specific_part = raw_scheme_specific_part
        self._raw_user_info = raw_user_info
        self._scheme = scheme
        self._scheme_specific_part = scheme_specific_part
        self._user_info = user_info

    @classmethod
    def from_dict(cls, dikt: dict) -> 'URI':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The URI of this URI.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def absolute(self):
        """Gets the absolute of this URI.


        :return: The absolute of this URI.
        :rtype: bool
        """
        return self._absolute

    @absolute.setter
    def absolute(self, absolute):
        """Sets the absolute of this URI.


        :param absolute: The absolute of this URI.
        :type absolute: bool
        """

        self._absolute = absolute

    @property
    def authority(self):
        """Gets the authority of this URI.


        :return: The authority of this URI.
        :rtype: str
        """
        return self._authority

    @authority.setter
    def authority(self, authority):
        """Sets the authority of this URI.


        :param authority: The authority of this URI.
        :type authority: str
        """

        self._authority = authority

    @property
    def fragment(self):
        """Gets the fragment of this URI.


        :return: The fragment of this URI.
        :rtype: str
        """
        return self._fragment

    @fragment.setter
    def fragment(self, fragment):
        """Sets the fragment of this URI.


        :param fragment: The fragment of this URI.
        :type fragment: str
        """

        self._fragment = fragment

    @property
    def host(self):
        """Gets the host of this URI.


        :return: The host of this URI.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this URI.


        :param host: The host of this URI.
        :type host: str
        """

        self._host = host

    @property
    def opaque(self):
        """Gets the opaque of this URI.


        :return: The opaque of this URI.
        :rtype: bool
        """
        return self._opaque

    @opaque.setter
    def opaque(self, opaque):
        """Sets the opaque of this URI.


        :param opaque: The opaque of this URI.
        :type opaque: bool
        """

        self._opaque = opaque

    @property
    def path(self):
        """Gets the path of this URI.


        :return: The path of this URI.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this URI.


        :param path: The path of this URI.
        :type path: str
        """

        self._path = path

    @property
    def port(self):
        """Gets the port of this URI.


        :return: The port of this URI.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this URI.


        :param port: The port of this URI.
        :type port: int
        """

        self._port = port

    @property
    def query(self):
        """Gets the query of this URI.


        :return: The query of this URI.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this URI.


        :param query: The query of this URI.
        :type query: str
        """

        self._query = query

    @property
    def raw_authority(self):
        """Gets the raw_authority of this URI.


        :return: The raw_authority of this URI.
        :rtype: str
        """
        return self._raw_authority

    @raw_authority.setter
    def raw_authority(self, raw_authority):
        """Sets the raw_authority of this URI.


        :param raw_authority: The raw_authority of this URI.
        :type raw_authority: str
        """

        self._raw_authority = raw_authority

    @property
    def raw_fragment(self):
        """Gets the raw_fragment of this URI.


        :return: The raw_fragment of this URI.
        :rtype: str
        """
        return self._raw_fragment

    @raw_fragment.setter
    def raw_fragment(self, raw_fragment):
        """Sets the raw_fragment of this URI.


        :param raw_fragment: The raw_fragment of this URI.
        :type raw_fragment: str
        """

        self._raw_fragment = raw_fragment

    @property
    def raw_path(self):
        """Gets the raw_path of this URI.


        :return: The raw_path of this URI.
        :rtype: str
        """
        return self._raw_path

    @raw_path.setter
    def raw_path(self, raw_path):
        """Sets the raw_path of this URI.


        :param raw_path: The raw_path of this URI.
        :type raw_path: str
        """

        self._raw_path = raw_path

    @property
    def raw_query(self):
        """Gets the raw_query of this URI.


        :return: The raw_query of this URI.
        :rtype: str
        """
        return self._raw_query

    @raw_query.setter
    def raw_query(self, raw_query):
        """Sets the raw_query of this URI.


        :param raw_query: The raw_query of this URI.
        :type raw_query: str
        """

        self._raw_query = raw_query

    @property
    def raw_scheme_specific_part(self):
        """Gets the raw_scheme_specific_part of this URI.


        :return: The raw_scheme_specific_part of this URI.
        :rtype: str
        """
        return self._raw_scheme_specific_part

    @raw_scheme_specific_part.setter
    def raw_scheme_specific_part(self, raw_scheme_specific_part):
        """Sets the raw_scheme_specific_part of this URI.


        :param raw_scheme_specific_part: The raw_scheme_specific_part of this URI.
        :type raw_scheme_specific_part: str
        """

        self._raw_scheme_specific_part = raw_scheme_specific_part

    @property
    def raw_user_info(self):
        """Gets the raw_user_info of this URI.


        :return: The raw_user_info of this URI.
        :rtype: str
        """
        return self._raw_user_info

    @raw_user_info.setter
    def raw_user_info(self, raw_user_info):
        """Sets the raw_user_info of this URI.


        :param raw_user_info: The raw_user_info of this URI.
        :type raw_user_info: str
        """

        self._raw_user_info = raw_user_info

    @property
    def scheme(self):
        """Gets the scheme of this URI.


        :return: The scheme of this URI.
        :rtype: str
        """
        return self._scheme

    @scheme.setter
    def scheme(self, scheme):
        """Sets the scheme of this URI.


        :param scheme: The scheme of this URI.
        :type scheme: str
        """

        self._scheme = scheme

    @property
    def scheme_specific_part(self):
        """Gets the scheme_specific_part of this URI.


        :return: The scheme_specific_part of this URI.
        :rtype: str
        """
        return self._scheme_specific_part

    @scheme_specific_part.setter
    def scheme_specific_part(self, scheme_specific_part):
        """Sets the scheme_specific_part of this URI.


        :param scheme_specific_part: The scheme_specific_part of this URI.
        :type scheme_specific_part: str
        """

        self._scheme_specific_part = scheme_specific_part

    @property
    def user_info(self):
        """Gets the user_info of this URI.


        :return: The user_info of this URI.
        :rtype: str
        """
        return self._user_info

    @user_info.setter
    def user_info(self, user_info):
        """Sets the user_info of this URI.


        :param user_info: The user_info of this URI.
        :type user_info: str
        """

        self._user_info = user_info
