# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AuthAccountAadhaarBioRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auth_type: str=None, bio_type: str=None, pid: str=None, txn_id: str=None):
        """AuthAccountAadhaarBioRequest - a model defined in OpenAPI

        :param auth_type: The auth_type of this AuthAccountAadhaarBioRequest.
        :param bio_type: The bio_type of this AuthAccountAadhaarBioRequest.
        :param pid: The pid of this AuthAccountAadhaarBioRequest.
        :param txn_id: The txn_id of this AuthAccountAadhaarBioRequest.
        """
        self.openapi_types = {
            'auth_type': str,
            'bio_type': str,
            'pid': str,
            'txn_id': str
        }

        self.attribute_map = {
            'auth_type': 'authType',
            'bio_type': 'bioType',
            'pid': 'pid',
            'txn_id': 'txnId'
        }

        self._auth_type = auth_type
        self._bio_type = bio_type
        self._pid = pid
        self._txn_id = txn_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthAccountAadhaarBioRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuthAccountAadhaarBioRequest of this AuthAccountAadhaarBioRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auth_type(self):
        """Gets the auth_type of this AuthAccountAadhaarBioRequest.


        :return: The auth_type of this AuthAccountAadhaarBioRequest.
        :rtype: str
        """
        return self._auth_type

    @auth_type.setter
    def auth_type(self, auth_type):
        """Sets the auth_type of this AuthAccountAadhaarBioRequest.


        :param auth_type: The auth_type of this AuthAccountAadhaarBioRequest.
        :type auth_type: str
        """
        allowed_values = ["FINGERSCAN", "IRIS", "OTP"]  # noqa: E501
        if auth_type not in allowed_values:
            raise ValueError(
                "Invalid value for `auth_type` ({0}), must be one of {1}"
                .format(auth_type, allowed_values)
            )

        self._auth_type = auth_type

    @property
    def bio_type(self):
        """Gets the bio_type of this AuthAccountAadhaarBioRequest.


        :return: The bio_type of this AuthAccountAadhaarBioRequest.
        :rtype: str
        """
        return self._bio_type

    @bio_type.setter
    def bio_type(self, bio_type):
        """Sets the bio_type of this AuthAccountAadhaarBioRequest.


        :param bio_type: The bio_type of this AuthAccountAadhaarBioRequest.
        :type bio_type: str
        """

        self._bio_type = bio_type

    @property
    def pid(self):
        """Gets the pid of this AuthAccountAadhaarBioRequest.


        :return: The pid of this AuthAccountAadhaarBioRequest.
        :rtype: str
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this AuthAccountAadhaarBioRequest.


        :param pid: The pid of this AuthAccountAadhaarBioRequest.
        :type pid: str
        """

        self._pid = pid

    @property
    def txn_id(self):
        """Gets the txn_id of this AuthAccountAadhaarBioRequest.


        :return: The txn_id of this AuthAccountAadhaarBioRequest.
        :rtype: str
        """
        return self._txn_id

    @txn_id.setter
    def txn_id(self, txn_id):
        """Sets the txn_id of this AuthAccountAadhaarBioRequest.


        :param txn_id: The txn_id of this AuthAccountAadhaarBioRequest.
        :type txn_id: str
        """

        self._txn_id = txn_id
