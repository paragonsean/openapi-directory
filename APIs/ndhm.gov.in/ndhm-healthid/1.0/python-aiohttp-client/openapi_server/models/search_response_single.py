# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SearchResponseSingle(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auth_methods: List[str]=None, health_id: str=None, health_id_number: str=None, name: str=None, tags: Dict[str, str]=None):
        """SearchResponseSingle - a model defined in OpenAPI

        :param auth_methods: The auth_methods of this SearchResponseSingle.
        :param health_id: The health_id of this SearchResponseSingle.
        :param health_id_number: The health_id_number of this SearchResponseSingle.
        :param name: The name of this SearchResponseSingle.
        :param tags: The tags of this SearchResponseSingle.
        """
        self.openapi_types = {
            'auth_methods': List[str],
            'health_id': str,
            'health_id_number': str,
            'name': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'auth_methods': 'authMethods',
            'health_id': 'healthId',
            'health_id_number': 'healthIdNumber',
            'name': 'name',
            'tags': 'tags'
        }

        self._auth_methods = auth_methods
        self._health_id = health_id
        self._health_id_number = health_id_number
        self._name = name
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchResponseSingle':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchResponseSingle of this SearchResponseSingle.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auth_methods(self):
        """Gets the auth_methods of this SearchResponseSingle.


        :return: The auth_methods of this SearchResponseSingle.
        :rtype: List[str]
        """
        return self._auth_methods

    @auth_methods.setter
    def auth_methods(self, auth_methods):
        """Sets the auth_methods of this SearchResponseSingle.


        :param auth_methods: The auth_methods of this SearchResponseSingle.
        :type auth_methods: List[str]
        """
        allowed_values = ["AADHAAR_OTP", "MOBILE_OTP", "PASSWORD", "DEMOGRAPHICS", "AADHAAR_BIO"]  # noqa: E501
        if not set(auth_methods).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `auth_methods` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(auth_methods) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._auth_methods = auth_methods

    @property
    def health_id(self):
        """Gets the health_id of this SearchResponseSingle.


        :return: The health_id of this SearchResponseSingle.
        :rtype: str
        """
        return self._health_id

    @health_id.setter
    def health_id(self, health_id):
        """Sets the health_id of this SearchResponseSingle.


        :param health_id: The health_id of this SearchResponseSingle.
        :type health_id: str
        """

        self._health_id = health_id

    @property
    def health_id_number(self):
        """Gets the health_id_number of this SearchResponseSingle.


        :return: The health_id_number of this SearchResponseSingle.
        :rtype: str
        """
        return self._health_id_number

    @health_id_number.setter
    def health_id_number(self, health_id_number):
        """Sets the health_id_number of this SearchResponseSingle.


        :param health_id_number: The health_id_number of this SearchResponseSingle.
        :type health_id_number: str
        """

        self._health_id_number = health_id_number

    @property
    def name(self):
        """Gets the name of this SearchResponseSingle.


        :return: The name of this SearchResponseSingle.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SearchResponseSingle.


        :param name: The name of this SearchResponseSingle.
        :type name: str
        """

        self._name = name

    @property
    def tags(self):
        """Gets the tags of this SearchResponseSingle.


        :return: The tags of this SearchResponseSingle.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this SearchResponseSingle.


        :param tags: The tags of this SearchResponseSingle.
        :type tags: Dict[str, str]
        """

        self._tags = tags
