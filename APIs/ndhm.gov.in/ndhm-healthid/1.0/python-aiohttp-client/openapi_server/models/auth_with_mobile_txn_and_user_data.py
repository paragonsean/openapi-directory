# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AuthWithMobileTxnAndUserData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gender: str=None, health_id: str=None, name: str=None, token: str=None, txn_id: str=None, year_of_birth: str=None):
        """AuthWithMobileTxnAndUserData - a model defined in OpenAPI

        :param gender: The gender of this AuthWithMobileTxnAndUserData.
        :param health_id: The health_id of this AuthWithMobileTxnAndUserData.
        :param name: The name of this AuthWithMobileTxnAndUserData.
        :param token: The token of this AuthWithMobileTxnAndUserData.
        :param txn_id: The txn_id of this AuthWithMobileTxnAndUserData.
        :param year_of_birth: The year_of_birth of this AuthWithMobileTxnAndUserData.
        """
        self.openapi_types = {
            'gender': str,
            'health_id': str,
            'name': str,
            'token': str,
            'txn_id': str,
            'year_of_birth': str
        }

        self.attribute_map = {
            'gender': 'gender',
            'health_id': 'healthId',
            'name': 'name',
            'token': 'token',
            'txn_id': 'txnId',
            'year_of_birth': 'yearOfBirth'
        }

        self._gender = gender
        self._health_id = health_id
        self._name = name
        self._token = token
        self._txn_id = txn_id
        self._year_of_birth = year_of_birth

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthWithMobileTxnAndUserData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuthWithMobileTxnAndUserData of this AuthWithMobileTxnAndUserData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gender(self):
        """Gets the gender of this AuthWithMobileTxnAndUserData.


        :return: The gender of this AuthWithMobileTxnAndUserData.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this AuthWithMobileTxnAndUserData.


        :param gender: The gender of this AuthWithMobileTxnAndUserData.
        :type gender: str
        """

        self._gender = gender

    @property
    def health_id(self):
        """Gets the health_id of this AuthWithMobileTxnAndUserData.


        :return: The health_id of this AuthWithMobileTxnAndUserData.
        :rtype: str
        """
        return self._health_id

    @health_id.setter
    def health_id(self, health_id):
        """Sets the health_id of this AuthWithMobileTxnAndUserData.


        :param health_id: The health_id of this AuthWithMobileTxnAndUserData.
        :type health_id: str
        """

        self._health_id = health_id

    @property
    def name(self):
        """Gets the name of this AuthWithMobileTxnAndUserData.


        :return: The name of this AuthWithMobileTxnAndUserData.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AuthWithMobileTxnAndUserData.


        :param name: The name of this AuthWithMobileTxnAndUserData.
        :type name: str
        """

        self._name = name

    @property
    def token(self):
        """Gets the token of this AuthWithMobileTxnAndUserData.


        :return: The token of this AuthWithMobileTxnAndUserData.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this AuthWithMobileTxnAndUserData.


        :param token: The token of this AuthWithMobileTxnAndUserData.
        :type token: str
        """

        self._token = token

    @property
    def txn_id(self):
        """Gets the txn_id of this AuthWithMobileTxnAndUserData.


        :return: The txn_id of this AuthWithMobileTxnAndUserData.
        :rtype: str
        """
        return self._txn_id

    @txn_id.setter
    def txn_id(self, txn_id):
        """Sets the txn_id of this AuthWithMobileTxnAndUserData.


        :param txn_id: The txn_id of this AuthWithMobileTxnAndUserData.
        :type txn_id: str
        """
        if txn_id is None:
            raise ValueError("Invalid value for `txn_id`, must not be `None`")

        self._txn_id = txn_id

    @property
    def year_of_birth(self):
        """Gets the year_of_birth of this AuthWithMobileTxnAndUserData.


        :return: The year_of_birth of this AuthWithMobileTxnAndUserData.
        :rtype: str
        """
        return self._year_of_birth

    @year_of_birth.setter
    def year_of_birth(self, year_of_birth):
        """Sets the year_of_birth of this AuthWithMobileTxnAndUserData.


        :param year_of_birth: The year_of_birth of this AuthWithMobileTxnAndUserData.
        :type year_of_birth: str
        """

        self._year_of_birth = year_of_birth
