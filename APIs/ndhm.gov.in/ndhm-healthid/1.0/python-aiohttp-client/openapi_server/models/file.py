# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class File(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, absolute: bool=None, absolute_file: File=None, absolute_path: str=None, canonical_file: File=None, canonical_path: str=None, directory: bool=None, file: bool=None, free_space: int=None, hidden: bool=None, name: str=None, parent: str=None, parent_file: File=None, path: str=None, total_space: int=None, usable_space: int=None):
        """File - a model defined in OpenAPI

        :param absolute: The absolute of this File.
        :param absolute_file: The absolute_file of this File.
        :param absolute_path: The absolute_path of this File.
        :param canonical_file: The canonical_file of this File.
        :param canonical_path: The canonical_path of this File.
        :param directory: The directory of this File.
        :param file: The file of this File.
        :param free_space: The free_space of this File.
        :param hidden: The hidden of this File.
        :param name: The name of this File.
        :param parent: The parent of this File.
        :param parent_file: The parent_file of this File.
        :param path: The path of this File.
        :param total_space: The total_space of this File.
        :param usable_space: The usable_space of this File.
        """
        self.openapi_types = {
            'absolute': bool,
            'absolute_file': File,
            'absolute_path': str,
            'canonical_file': File,
            'canonical_path': str,
            'directory': bool,
            'file': bool,
            'free_space': int,
            'hidden': bool,
            'name': str,
            'parent': str,
            'parent_file': File,
            'path': str,
            'total_space': int,
            'usable_space': int
        }

        self.attribute_map = {
            'absolute': 'absolute',
            'absolute_file': 'absoluteFile',
            'absolute_path': 'absolutePath',
            'canonical_file': 'canonicalFile',
            'canonical_path': 'canonicalPath',
            'directory': 'directory',
            'file': 'file',
            'free_space': 'freeSpace',
            'hidden': 'hidden',
            'name': 'name',
            'parent': 'parent',
            'parent_file': 'parentFile',
            'path': 'path',
            'total_space': 'totalSpace',
            'usable_space': 'usableSpace'
        }

        self._absolute = absolute
        self._absolute_file = absolute_file
        self._absolute_path = absolute_path
        self._canonical_file = canonical_file
        self._canonical_path = canonical_path
        self._directory = directory
        self._file = file
        self._free_space = free_space
        self._hidden = hidden
        self._name = name
        self._parent = parent
        self._parent_file = parent_file
        self._path = path
        self._total_space = total_space
        self._usable_space = usable_space

    @classmethod
    def from_dict(cls, dikt: dict) -> 'File':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The File of this File.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def absolute(self):
        """Gets the absolute of this File.


        :return: The absolute of this File.
        :rtype: bool
        """
        return self._absolute

    @absolute.setter
    def absolute(self, absolute):
        """Sets the absolute of this File.


        :param absolute: The absolute of this File.
        :type absolute: bool
        """

        self._absolute = absolute

    @property
    def absolute_file(self):
        """Gets the absolute_file of this File.


        :return: The absolute_file of this File.
        :rtype: File
        """
        return self._absolute_file

    @absolute_file.setter
    def absolute_file(self, absolute_file):
        """Sets the absolute_file of this File.


        :param absolute_file: The absolute_file of this File.
        :type absolute_file: File
        """

        self._absolute_file = absolute_file

    @property
    def absolute_path(self):
        """Gets the absolute_path of this File.


        :return: The absolute_path of this File.
        :rtype: str
        """
        return self._absolute_path

    @absolute_path.setter
    def absolute_path(self, absolute_path):
        """Sets the absolute_path of this File.


        :param absolute_path: The absolute_path of this File.
        :type absolute_path: str
        """

        self._absolute_path = absolute_path

    @property
    def canonical_file(self):
        """Gets the canonical_file of this File.


        :return: The canonical_file of this File.
        :rtype: File
        """
        return self._canonical_file

    @canonical_file.setter
    def canonical_file(self, canonical_file):
        """Sets the canonical_file of this File.


        :param canonical_file: The canonical_file of this File.
        :type canonical_file: File
        """

        self._canonical_file = canonical_file

    @property
    def canonical_path(self):
        """Gets the canonical_path of this File.


        :return: The canonical_path of this File.
        :rtype: str
        """
        return self._canonical_path

    @canonical_path.setter
    def canonical_path(self, canonical_path):
        """Sets the canonical_path of this File.


        :param canonical_path: The canonical_path of this File.
        :type canonical_path: str
        """

        self._canonical_path = canonical_path

    @property
    def directory(self):
        """Gets the directory of this File.


        :return: The directory of this File.
        :rtype: bool
        """
        return self._directory

    @directory.setter
    def directory(self, directory):
        """Sets the directory of this File.


        :param directory: The directory of this File.
        :type directory: bool
        """

        self._directory = directory

    @property
    def file(self):
        """Gets the file of this File.


        :return: The file of this File.
        :rtype: bool
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this File.


        :param file: The file of this File.
        :type file: bool
        """

        self._file = file

    @property
    def free_space(self):
        """Gets the free_space of this File.


        :return: The free_space of this File.
        :rtype: int
        """
        return self._free_space

    @free_space.setter
    def free_space(self, free_space):
        """Sets the free_space of this File.


        :param free_space: The free_space of this File.
        :type free_space: int
        """

        self._free_space = free_space

    @property
    def hidden(self):
        """Gets the hidden of this File.


        :return: The hidden of this File.
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this File.


        :param hidden: The hidden of this File.
        :type hidden: bool
        """

        self._hidden = hidden

    @property
    def name(self):
        """Gets the name of this File.


        :return: The name of this File.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this File.


        :param name: The name of this File.
        :type name: str
        """

        self._name = name

    @property
    def parent(self):
        """Gets the parent of this File.


        :return: The parent of this File.
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this File.


        :param parent: The parent of this File.
        :type parent: str
        """

        self._parent = parent

    @property
    def parent_file(self):
        """Gets the parent_file of this File.


        :return: The parent_file of this File.
        :rtype: File
        """
        return self._parent_file

    @parent_file.setter
    def parent_file(self, parent_file):
        """Sets the parent_file of this File.


        :param parent_file: The parent_file of this File.
        :type parent_file: File
        """

        self._parent_file = parent_file

    @property
    def path(self):
        """Gets the path of this File.


        :return: The path of this File.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this File.


        :param path: The path of this File.
        :type path: str
        """

        self._path = path

    @property
    def total_space(self):
        """Gets the total_space of this File.


        :return: The total_space of this File.
        :rtype: int
        """
        return self._total_space

    @total_space.setter
    def total_space(self, total_space):
        """Sets the total_space of this File.


        :param total_space: The total_space of this File.
        :type total_space: int
        """

        self._total_space = total_space

    @property
    def usable_space(self):
        """Gets the usable_space of this File.


        :return: The usable_space of this File.
        :rtype: int
        """
        return self._usable_space

    @usable_space.setter
    def usable_space(self, usable_space):
        """Sets the usable_space of this File.


        :param usable_space: The usable_space of this File.
        :type usable_space: int
        """

        self._usable_space = usable_space
