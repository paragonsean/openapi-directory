# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class VerifyAadhaarWithBio(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aadhaar: str=None, bio_type: str=None, pid: str=None, restrictions: str=None):
        """VerifyAadhaarWithBio - a model defined in OpenAPI

        :param aadhaar: The aadhaar of this VerifyAadhaarWithBio.
        :param bio_type: The bio_type of this VerifyAadhaarWithBio.
        :param pid: The pid of this VerifyAadhaarWithBio.
        :param restrictions: The restrictions of this VerifyAadhaarWithBio.
        """
        self.openapi_types = {
            'aadhaar': str,
            'bio_type': str,
            'pid': str,
            'restrictions': str
        }

        self.attribute_map = {
            'aadhaar': 'aadhaar',
            'bio_type': 'bioType',
            'pid': 'pid',
            'restrictions': 'restrictions'
        }

        self._aadhaar = aadhaar
        self._bio_type = bio_type
        self._pid = pid
        self._restrictions = restrictions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VerifyAadhaarWithBio':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VerifyAadhaarWithBio of this VerifyAadhaarWithBio.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aadhaar(self):
        """Gets the aadhaar of this VerifyAadhaarWithBio.


        :return: The aadhaar of this VerifyAadhaarWithBio.
        :rtype: str
        """
        return self._aadhaar

    @aadhaar.setter
    def aadhaar(self, aadhaar):
        """Sets the aadhaar of this VerifyAadhaarWithBio.


        :param aadhaar: The aadhaar of this VerifyAadhaarWithBio.
        :type aadhaar: str
        """
        if aadhaar is not None and not re.search(r'^(\d{12}|\d{16})*$', aadhaar):
            raise ValueError("Invalid value for `aadhaar`, must be a follow pattern or equal to `/^(\d{12}|\d{16})*$/`")

        self._aadhaar = aadhaar

    @property
    def bio_type(self):
        """Gets the bio_type of this VerifyAadhaarWithBio.


        :return: The bio_type of this VerifyAadhaarWithBio.
        :rtype: str
        """
        return self._bio_type

    @bio_type.setter
    def bio_type(self, bio_type):
        """Sets the bio_type of this VerifyAadhaarWithBio.


        :param bio_type: The bio_type of this VerifyAadhaarWithBio.
        :type bio_type: str
        """

        self._bio_type = bio_type

    @property
    def pid(self):
        """Gets the pid of this VerifyAadhaarWithBio.


        :return: The pid of this VerifyAadhaarWithBio.
        :rtype: str
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this VerifyAadhaarWithBio.


        :param pid: The pid of this VerifyAadhaarWithBio.
        :type pid: str
        """

        self._pid = pid

    @property
    def restrictions(self):
        """Gets the restrictions of this VerifyAadhaarWithBio.


        :return: The restrictions of this VerifyAadhaarWithBio.
        :rtype: str
        """
        return self._restrictions

    @restrictions.setter
    def restrictions(self, restrictions):
        """Sets the restrictions of this VerifyAadhaarWithBio.


        :param restrictions: The restrictions of this VerifyAadhaarWithBio.
        :type restrictions: str
        """

        self._restrictions = restrictions
