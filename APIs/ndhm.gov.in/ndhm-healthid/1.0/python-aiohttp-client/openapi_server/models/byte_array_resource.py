# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.file import File
from openapi_server.models.url import URL
import re
from openapi_server import util


class ByteArrayResource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, byte_array: str=None, description: str=None, file: File=None, filename: str=None, input_stream: object=None, open: bool=None, readable: bool=None, uri: str=None, url: URL=None):
        """ByteArrayResource - a model defined in OpenAPI

        :param byte_array: The byte_array of this ByteArrayResource.
        :param description: The description of this ByteArrayResource.
        :param file: The file of this ByteArrayResource.
        :param filename: The filename of this ByteArrayResource.
        :param input_stream: The input_stream of this ByteArrayResource.
        :param open: The open of this ByteArrayResource.
        :param readable: The readable of this ByteArrayResource.
        :param uri: The uri of this ByteArrayResource.
        :param url: The url of this ByteArrayResource.
        """
        self.openapi_types = {
            'byte_array': str,
            'description': str,
            'file': File,
            'filename': str,
            'input_stream': object,
            'open': bool,
            'readable': bool,
            'uri': str,
            'url': URL
        }

        self.attribute_map = {
            'byte_array': 'byteArray',
            'description': 'description',
            'file': 'file',
            'filename': 'filename',
            'input_stream': 'inputStream',
            'open': 'open',
            'readable': 'readable',
            'uri': 'uri',
            'url': 'url'
        }

        self._byte_array = byte_array
        self._description = description
        self._file = file
        self._filename = filename
        self._input_stream = input_stream
        self._open = open
        self._readable = readable
        self._uri = uri
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ByteArrayResource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ByteArrayResource of this ByteArrayResource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def byte_array(self):
        """Gets the byte_array of this ByteArrayResource.


        :return: The byte_array of this ByteArrayResource.
        :rtype: str
        """
        return self._byte_array

    @byte_array.setter
    def byte_array(self, byte_array):
        """Sets the byte_array of this ByteArrayResource.


        :param byte_array: The byte_array of this ByteArrayResource.
        :type byte_array: str
        """
        if byte_array is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', byte_array):
            raise ValueError("Invalid value for `byte_array`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")

        self._byte_array = byte_array

    @property
    def description(self):
        """Gets the description of this ByteArrayResource.


        :return: The description of this ByteArrayResource.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ByteArrayResource.


        :param description: The description of this ByteArrayResource.
        :type description: str
        """

        self._description = description

    @property
    def file(self):
        """Gets the file of this ByteArrayResource.


        :return: The file of this ByteArrayResource.
        :rtype: File
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this ByteArrayResource.


        :param file: The file of this ByteArrayResource.
        :type file: File
        """

        self._file = file

    @property
    def filename(self):
        """Gets the filename of this ByteArrayResource.


        :return: The filename of this ByteArrayResource.
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this ByteArrayResource.


        :param filename: The filename of this ByteArrayResource.
        :type filename: str
        """

        self._filename = filename

    @property
    def input_stream(self):
        """Gets the input_stream of this ByteArrayResource.


        :return: The input_stream of this ByteArrayResource.
        :rtype: object
        """
        return self._input_stream

    @input_stream.setter
    def input_stream(self, input_stream):
        """Sets the input_stream of this ByteArrayResource.


        :param input_stream: The input_stream of this ByteArrayResource.
        :type input_stream: object
        """

        self._input_stream = input_stream

    @property
    def open(self):
        """Gets the open of this ByteArrayResource.


        :return: The open of this ByteArrayResource.
        :rtype: bool
        """
        return self._open

    @open.setter
    def open(self, open):
        """Sets the open of this ByteArrayResource.


        :param open: The open of this ByteArrayResource.
        :type open: bool
        """

        self._open = open

    @property
    def readable(self):
        """Gets the readable of this ByteArrayResource.


        :return: The readable of this ByteArrayResource.
        :rtype: bool
        """
        return self._readable

    @readable.setter
    def readable(self, readable):
        """Sets the readable of this ByteArrayResource.


        :param readable: The readable of this ByteArrayResource.
        :type readable: bool
        """

        self._readable = readable

    @property
    def uri(self):
        """Gets the uri of this ByteArrayResource.


        :return: The uri of this ByteArrayResource.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this ByteArrayResource.


        :param uri: The uri of this ByteArrayResource.
        :type uri: str
        """

        self._uri = uri

    @property
    def url(self):
        """Gets the url of this ByteArrayResource.


        :return: The url of this ByteArrayResource.
        :rtype: URL
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ByteArrayResource.


        :param url: The url of this ByteArrayResource.
        :type url: URL
        """

        self._url = url
