# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class RetriveHealthIdMobilePayLoad(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, day_of_birth: str=None, first_name: str=None, gender: str=None, last_name: str=None, middle_name: str=None, month_of_birth: str=None, name: str=None, otp: str=None, txn_id: str=None, year_of_birth: str=None):
        """RetriveHealthIdMobilePayLoad - a model defined in OpenAPI

        :param day_of_birth: The day_of_birth of this RetriveHealthIdMobilePayLoad.
        :param first_name: The first_name of this RetriveHealthIdMobilePayLoad.
        :param gender: The gender of this RetriveHealthIdMobilePayLoad.
        :param last_name: The last_name of this RetriveHealthIdMobilePayLoad.
        :param middle_name: The middle_name of this RetriveHealthIdMobilePayLoad.
        :param month_of_birth: The month_of_birth of this RetriveHealthIdMobilePayLoad.
        :param name: The name of this RetriveHealthIdMobilePayLoad.
        :param otp: The otp of this RetriveHealthIdMobilePayLoad.
        :param txn_id: The txn_id of this RetriveHealthIdMobilePayLoad.
        :param year_of_birth: The year_of_birth of this RetriveHealthIdMobilePayLoad.
        """
        self.openapi_types = {
            'day_of_birth': str,
            'first_name': str,
            'gender': str,
            'last_name': str,
            'middle_name': str,
            'month_of_birth': str,
            'name': str,
            'otp': str,
            'txn_id': str,
            'year_of_birth': str
        }

        self.attribute_map = {
            'day_of_birth': 'dayOfBirth',
            'first_name': 'firstName',
            'gender': 'gender',
            'last_name': 'lastName',
            'middle_name': 'middleName',
            'month_of_birth': 'monthOfBirth',
            'name': 'name',
            'otp': 'otp',
            'txn_id': 'txnId',
            'year_of_birth': 'yearOfBirth'
        }

        self._day_of_birth = day_of_birth
        self._first_name = first_name
        self._gender = gender
        self._last_name = last_name
        self._middle_name = middle_name
        self._month_of_birth = month_of_birth
        self._name = name
        self._otp = otp
        self._txn_id = txn_id
        self._year_of_birth = year_of_birth

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RetriveHealthIdMobilePayLoad':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RetriveHealthIdMobilePayLoad of this RetriveHealthIdMobilePayLoad.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def day_of_birth(self):
        """Gets the day_of_birth of this RetriveHealthIdMobilePayLoad.


        :return: The day_of_birth of this RetriveHealthIdMobilePayLoad.
        :rtype: str
        """
        return self._day_of_birth

    @day_of_birth.setter
    def day_of_birth(self, day_of_birth):
        """Sets the day_of_birth of this RetriveHealthIdMobilePayLoad.


        :param day_of_birth: The day_of_birth of this RetriveHealthIdMobilePayLoad.
        :type day_of_birth: str
        """
        if day_of_birth is not None and not re.search(r'^(0?[1-9]|[12][0-9]|3[01])$', day_of_birth):
            raise ValueError("Invalid value for `day_of_birth`, must be a follow pattern or equal to `/^(0?[1-9]|[12][0-9]|3[01])$/`")

        self._day_of_birth = day_of_birth

    @property
    def first_name(self):
        """Gets the first_name of this RetriveHealthIdMobilePayLoad.


        :return: The first_name of this RetriveHealthIdMobilePayLoad.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this RetriveHealthIdMobilePayLoad.


        :param first_name: The first_name of this RetriveHealthIdMobilePayLoad.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def gender(self):
        """Gets the gender of this RetriveHealthIdMobilePayLoad.


        :return: The gender of this RetriveHealthIdMobilePayLoad.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this RetriveHealthIdMobilePayLoad.


        :param gender: The gender of this RetriveHealthIdMobilePayLoad.
        :type gender: str
        """
        if gender is not None and not re.search(r'^(M|F|O|U)$', gender):
            raise ValueError("Invalid value for `gender`, must be a follow pattern or equal to `/^(M|F|O|U)$/`")

        self._gender = gender

    @property
    def last_name(self):
        """Gets the last_name of this RetriveHealthIdMobilePayLoad.


        :return: The last_name of this RetriveHealthIdMobilePayLoad.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this RetriveHealthIdMobilePayLoad.


        :param last_name: The last_name of this RetriveHealthIdMobilePayLoad.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def middle_name(self):
        """Gets the middle_name of this RetriveHealthIdMobilePayLoad.


        :return: The middle_name of this RetriveHealthIdMobilePayLoad.
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this RetriveHealthIdMobilePayLoad.


        :param middle_name: The middle_name of this RetriveHealthIdMobilePayLoad.
        :type middle_name: str
        """

        self._middle_name = middle_name

    @property
    def month_of_birth(self):
        """Gets the month_of_birth of this RetriveHealthIdMobilePayLoad.


        :return: The month_of_birth of this RetriveHealthIdMobilePayLoad.
        :rtype: str
        """
        return self._month_of_birth

    @month_of_birth.setter
    def month_of_birth(self, month_of_birth):
        """Sets the month_of_birth of this RetriveHealthIdMobilePayLoad.


        :param month_of_birth: The month_of_birth of this RetriveHealthIdMobilePayLoad.
        :type month_of_birth: str
        """
        if month_of_birth is not None and not re.search(r'^(0?[1-9]|1[012])$', month_of_birth):
            raise ValueError("Invalid value for `month_of_birth`, must be a follow pattern or equal to `/^(0?[1-9]|1[012])$/`")

        self._month_of_birth = month_of_birth

    @property
    def name(self):
        """Gets the name of this RetriveHealthIdMobilePayLoad.


        :return: The name of this RetriveHealthIdMobilePayLoad.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RetriveHealthIdMobilePayLoad.


        :param name: The name of this RetriveHealthIdMobilePayLoad.
        :type name: str
        """

        self._name = name

    @property
    def otp(self):
        """Gets the otp of this RetriveHealthIdMobilePayLoad.


        :return: The otp of this RetriveHealthIdMobilePayLoad.
        :rtype: str
        """
        return self._otp

    @otp.setter
    def otp(self, otp):
        """Sets the otp of this RetriveHealthIdMobilePayLoad.


        :param otp: The otp of this RetriveHealthIdMobilePayLoad.
        :type otp: str
        """

        self._otp = otp

    @property
    def txn_id(self):
        """Gets the txn_id of this RetriveHealthIdMobilePayLoad.


        :return: The txn_id of this RetriveHealthIdMobilePayLoad.
        :rtype: str
        """
        return self._txn_id

    @txn_id.setter
    def txn_id(self, txn_id):
        """Sets the txn_id of this RetriveHealthIdMobilePayLoad.


        :param txn_id: The txn_id of this RetriveHealthIdMobilePayLoad.
        :type txn_id: str
        """
        if txn_id is None:
            raise ValueError("Invalid value for `txn_id`, must not be `None`")

        self._txn_id = txn_id

    @property
    def year_of_birth(self):
        """Gets the year_of_birth of this RetriveHealthIdMobilePayLoad.


        :return: The year_of_birth of this RetriveHealthIdMobilePayLoad.
        :rtype: str
        """
        return self._year_of_birth

    @year_of_birth.setter
    def year_of_birth(self, year_of_birth):
        """Sets the year_of_birth of this RetriveHealthIdMobilePayLoad.


        :param year_of_birth: The year_of_birth of this RetriveHealthIdMobilePayLoad.
        :type year_of_birth: str
        """
        if year_of_birth is not None and not re.search(r'^(\d{4})$', year_of_birth):
            raise ValueError("Invalid value for `year_of_birth`, must be a follow pattern or equal to `/^(\d{4})$/`")

        self._year_of_birth = year_of_birth
