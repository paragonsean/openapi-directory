# coding: utf-8

import pytest
import json
from aiohttp import web

from openapi_server.models.aadhar_number_request_payload import AadharNumberRequestPayload
from openapi_server.models.aadhar_otp_generate_request_pay_load import AadharOtpGenerateRequestPayLoad
from openapi_server.models.create_hid_demo_auth_request import CreateHIdDemoAuthRequest
from openapi_server.models.create_health_id_opt_request import CreateHealthIdOptRequest
from openapi_server.models.create_hid_biometric_request import CreateHidBiometricRequest
from openapi_server.models.create_hid_mobile_request import CreateHidMobileRequest
from openapi_server.models.create_hid_notify_benefit_request import CreateHidNotifyBenefitRequest
from openapi_server.models.generate_mobile_otp_request import GenerateMobileOTPRequest
from openapi_server.models.hid_benefit_delink_request_payload import HidBenefitDelinkRequestPayload
from openapi_server.models.hid_benefit_linked_request_payload import HidBenefitLinkedRequestPayload
from openapi_server.models.hid_benefit_linked_response_payload import HidBenefitLinkedResponsePayload
from openapi_server.models.hid_benefit_name_search_request import HidBenefitNameSearchRequest
from openapi_server.models.hid_benefit_request_payload import HidBenefitRequestPayload
from openapi_server.models.hid_benefit_search_response_payload import HidBenefitSearchResponsePayload
from openapi_server.models.hid_status_request_payload import HidStatusRequestPayload
from openapi_server.models.hid_update_account_request import HidUpdateAccountRequest
from openapi_server.models.hid_update_mobilet_request import HidUpdateMobiletRequest
from openapi_server.models.txn_response import TxnResponse
from openapi_server.models.user_dto import UserDTO


pytestmark = pytest.mark.asyncio

async def test_create_health_id_by_demo_auth_using_post(client):
    """Test case for create_health_id_by_demo_auth_using_post

    Create health id using Aadhaar Demo Auth.
    """
    create_hid_demo_auth_request = {"consentHealthId":True,"aadharNumber":"aadharNumber","gender":"gender","benefitName":"benefitName","mobileNumber":"mobileNumber","autoGeneratedBenefitId":True,"name":"name","dateOfBirth":"dateOfBirth","validity":"validity","benefitId":"benefitId"}
    headers = { 
        'Accept': '*/*',
        'Content-Type': 'application/json',
        'accept_language': 'en-US',
        'Authorization': 'special-key',
        'X-HIP-ID': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/api/v1/hid/benefit/createHealthId/demo/auth',
        headers=headers,
        json=create_hid_demo_auth_request,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_create_health_id_by_mobile_using_post(client):
    """Test case for create_health_id_by_mobile_using_post

    Create health id using mobile Authentication.
    """
    create_hid_mobile_request = {"gender":"gender","docNumber":"docNumber","benefitDocType":"VOTER_ID_CARD","dateOfBirth":"dateOfBirth","otp":"otp","benefitId":"benefitId","consentHealthId":True,"benefitName":"benefitName","autoGeneratedBenefitId":True,"name":"name","validity":"validity","fileType":"fileType","txnId":"txnId","uploadedDoc":"uploadedDoc"}
    headers = { 
        'Accept': '*/*',
        'Content-Type': 'application/json',
        'accept_language': 'en-US',
        'Authorization': 'special-key',
        'X-HIP-ID': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/api/v1/hid/benefit/mobile/createHealthId',
        headers=headers,
        json=create_hid_mobile_request,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_delink_hid_benefit_using_post(client):
    """Test case for delink_hid_benefit_using_post

    De-Linked with hid.
    """
    hid_benefit_linked_request_payload = {"benefitName":"benefitName","uidToken":"uidToken"}
    headers = { 
        'Accept': '*/*',
        'Content-Type': 'application/json',
        'accept_language': 'en-US',
        'Authorization': 'special-key',
        'X-HIP-ID': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/api/v1/hid/benefit/delink',
        headers=headers,
        json=hid_benefit_linked_request_payload,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_find_by_aadhar_using_post(client):
    """Test case for find_by_aadhar_using_post

    Search health id number using aadhar or aadhar token.
    """
    aadhar_number_request_payload = {"aadhaar":"aadhaar"}
    headers = { 
        'Accept': '*/*',
        'Content-Type': 'application/json',
        'accept_language': 'en-US',
        'Authorization': 'special-key',
        'X-HIP-ID': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/api/v1/hid/benefit/search/aadhaar',
        headers=headers,
        json=aadhar_number_request_payload,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_find_by_health_id_using_post(client):
    """Test case for find_by_health_id_using_post

    Search benefit using health id number.
    """
    search_request = {"healthId":"healthId","benefitId":"benefitId"}
    headers = { 
        'Accept': '*/*',
        'Content-Type': 'application/json',
        'accept_language': 'en-US',
        'Authorization': 'special-key',
        'X-HIP-ID': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/api/v1/hid/benefit/search/healthIdNumber',
        headers=headers,
        json=search_request,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_generate_aadhar_otp_using_post2(client):
    """Test case for generate_aadhar_otp_using_post2

    Generate Aadhaar OTP on registrered mobile number
    """
    generate_otp_request = {"aadhaar":"aadhaar"}
    headers = { 
        'Accept': '*/*',
        'Content-Type': 'application/json',
        'accept_language': 'en-US',
        'Authorization': 'special-key',
        'X-HIP-ID': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/api/v1/hid/benefit/aadhaar/generateOtp',
        headers=headers,
        json=generate_otp_request,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_generate_mobile_otp_using_post_0(client):
    """Test case for generate_mobile_otp_using_post_0

    Generate mobile OTP on registrered mobile number
    """
    generate_otp_request = {"mobile":"mobile"}
    headers = { 
        'Accept': '*/*',
        'Content-Type': 'application/json',
        'accept_language': 'en-US',
        'Authorization': 'special-key',
        'X-HIP-ID': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/api/v1/hid/benefit/mobile/generateOtp',
        headers=headers,
        json=generate_otp_request,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_link_hid_benefit_using_post(client):
    """Test case for link_hid_benefit_using_post

    Linked with hid.
    """
    hid_benefit_linked_request_payload = {"benefitName":"benefitName","uidToken":"uidToken","stateCode":"stateCode","validity":"validity","benefitId":"benefitId"}
    headers = { 
        'Accept': '*/*',
        'Content-Type': 'application/json',
        'accept_language': 'en-US',
        'Authorization': 'special-key',
        'X-HIP-ID': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/api/v1/hid/benefit/link',
        headers=headers,
        json=hid_benefit_linked_request_payload,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_notify_benefit_using_post(client):
    """Test case for notify_benefit_using_post

    Create health id using notify Benefit.
    """
    create_hid_notify_benefit_request = {"aadharNumberOrUidToken":"aadharNumberOrUidToken","consentHealthId":True,"gender":"gender","benefitName":"benefitName","mobileNumber":"mobileNumber","autoGeneratedBenefitId":True,"name":"name","dateOfBirth":"dateOfBirth","stateCode":"stateCode","validity":"validity","benefitId":"benefitId"}
    headers = { 
        'Accept': '*/*',
        'Content-Type': 'application/json',
        'accept_language': 'en-US',
        'Authorization': 'special-key',
        'X-HIP-ID': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/api/v1/hid/benefit/notify/benefit',
        headers=headers,
        json=create_hid_notify_benefit_request,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_update_account_information_using_post1(client):
    """Test case for update_account_information_using_post1

    Update account information
    """
    request = {"lastName":"lastName","pincode":0,"address":"address","districtCode":"districtCode","townCode":"townCode","healthId":"healthId","healthIdNumber":"healthIdNumber","monthOfBirth":"monthOfBirth","villageCode":"villageCode","firstName":"firstName","password":"password","profilePhoto":"profilePhoto","subdistrictCode":"subdistrictCode","dayOfBirth":"dayOfBirth","middleName":"middleName","stateCode":"stateCode","wardCode":"wardCode","email":"email","yearOfBirth":"yearOfBirth"}
    headers = { 
        'Accept': '*/*',
        'Content-Type': 'application/json',
        'accept_language': 'en-US',
        'Authorization': 'special-key',
        'X-HIP-ID': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/api/v1/hid/benefit/update/profile',
        headers=headers,
        json=request,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_update_mobile_information_using_post(client):
    """Test case for update_mobile_information_using_post

    Update mobile number for account.
    """
    request = {"mobile":"mobile","healthIdNumber":"healthIdNumber"}
    headers = { 
        'Accept': '*/*',
        'Content-Type': 'application/json',
        'accept_language': 'en-US',
        'Authorization': 'special-key',
        'X-HIP-ID': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/api/v1/hid/benefit/update/mobile',
        headers=headers,
        json=request,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_update_status_using_post(client):
    """Test case for update_status_using_post

    Update health id status .
    """
    generate_otp_request = {"healthIdNumber":"healthIdNumber"}
    headers = { 
        'Accept': '*/*',
        'Content-Type': 'application/json',
        'accept_language': 'en-US',
        'Authorization': 'special-key',
        'X-HIP-ID': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/api/v1/hid/benefit/update/status',
        headers=headers,
        json=generate_otp_request,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_verify_aadhar_otp_using_post(client):
    """Test case for verify_aadhar_otp_using_post

    Create health id using Aadhaar Number Otp.
    """
    create_health_id_opt_request = {"consentHealthId":True,"benefitName":"benefitName","mobileNumber":"mobileNumber","autoGeneratedBenefitId":True,"otp":"otp","validity":"validity","benefitId":"benefitId","txnId":"txnId"}
    headers = { 
        'Accept': '*/*',
        'Content-Type': 'application/json',
        'accept_language': 'en-US',
        'Authorization': 'special-key',
        'X-HIP-ID': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/api/v1/hid/benefit/aadhaar/verifyAadharOtp',
        headers=headers,
        json=create_health_id_opt_request,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_verify_bio_using_post(client):
    """Test case for verify_bio_using_post

    Create health id using Biometric Authentication.
    """
    create_hid_biometric_request = {"bioType":"bioType","consentHealthId":True,"benefitName":"benefitName","mobileNumber":"mobileNumber","autoGeneratedBenefitId":True,"aadhaar":"aadhaar","pid":"pid","validity":"validity","benefitId":"benefitId"}
    headers = { 
        'Accept': '*/*',
        'Content-Type': 'application/json',
        'accept_language': 'en-US',
        'Authorization': 'special-key',
        'X-HIP-ID': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/api/v1/hid/benefit/aadhaar/verifyBio',
        headers=headers,
        json=create_hid_biometric_request,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')

