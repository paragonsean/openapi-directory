# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.entry_content import EntryContent
from openapi_server.models.entry_link import EntryLink
from openapi_server import util


class DataNotificationEntriesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, care_context_reference: str=None, checksum: str=None, content: str=None, media: str=None, link: str=None):
        """DataNotificationEntriesInner - a model defined in OpenAPI

        :param care_context_reference: The care_context_reference of this DataNotificationEntriesInner.
        :param checksum: The checksum of this DataNotificationEntriesInner.
        :param content: The content of this DataNotificationEntriesInner.
        :param media: The media of this DataNotificationEntriesInner.
        :param link: The link of this DataNotificationEntriesInner.
        """
        self.openapi_types = {
            'care_context_reference': str,
            'checksum': str,
            'content': str,
            'media': str,
            'link': str
        }

        self.attribute_map = {
            'care_context_reference': 'careContextReference',
            'checksum': 'checksum',
            'content': 'content',
            'media': 'media',
            'link': 'link'
        }

        self._care_context_reference = care_context_reference
        self._checksum = checksum
        self._content = content
        self._media = media
        self._link = link

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataNotificationEntriesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataNotification_entries_inner of this DataNotificationEntriesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def care_context_reference(self):
        """Gets the care_context_reference of this DataNotificationEntriesInner.

        care context reference number.

        :return: The care_context_reference of this DataNotificationEntriesInner.
        :rtype: str
        """
        return self._care_context_reference

    @care_context_reference.setter
    def care_context_reference(self, care_context_reference):
        """Sets the care_context_reference of this DataNotificationEntriesInner.

        care context reference number.

        :param care_context_reference: The care_context_reference of this DataNotificationEntriesInner.
        :type care_context_reference: str
        """
        if care_context_reference is None:
            raise ValueError("Invalid value for `care_context_reference`, must not be `None`")

        self._care_context_reference = care_context_reference

    @property
    def checksum(self):
        """Gets the checksum of this DataNotificationEntriesInner.

        Md5 checksum of the content before encryption

        :return: The checksum of this DataNotificationEntriesInner.
        :rtype: str
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum):
        """Sets the checksum of this DataNotificationEntriesInner.

        Md5 checksum of the content before encryption

        :param checksum: The checksum of this DataNotificationEntriesInner.
        :type checksum: str
        """
        if checksum is None:
            raise ValueError("Invalid value for `checksum`, must not be `None`")

        self._checksum = checksum

    @property
    def content(self):
        """Gets the content of this DataNotificationEntriesInner.

        Encrypted content

        :return: The content of this DataNotificationEntriesInner.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this DataNotificationEntriesInner.

        Encrypted content

        :param content: The content of this DataNotificationEntriesInner.
        :type content: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")

        self._content = content

    @property
    def media(self):
        """Gets the media of this DataNotificationEntriesInner.

        mimetype of the content.

        :return: The media of this DataNotificationEntriesInner.
        :rtype: str
        """
        return self._media

    @media.setter
    def media(self, media):
        """Sets the media of this DataNotificationEntriesInner.

        mimetype of the content.

        :param media: The media of this DataNotificationEntriesInner.
        :type media: str
        """
        allowed_values = ["application/fhir+json"]  # noqa: E501
        if media not in allowed_values:
            raise ValueError(
                "Invalid value for `media` ({0}), must be one of {1}"
                .format(media, allowed_values)
            )

        self._media = media

    @property
    def link(self):
        """Gets the link of this DataNotificationEntriesInner.

        Encrypted content

        :return: The link of this DataNotificationEntriesInner.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this DataNotificationEntriesInner.

        Encrypted content

        :param link: The link of this DataNotificationEntriesInner.
        :type link: str
        """
        if link is None:
            raise ValueError("Invalid value for `link`, must not be `None`")

        self._link = link
