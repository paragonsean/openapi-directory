# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_notification_entries_inner import DataNotificationEntriesInner
from openapi_server.models.key_material import KeyMaterial
from openapi_server import util


class DataNotification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entries: List[DataNotificationEntriesInner]=None, key_material: KeyMaterial=None, page_count: int=None, page_number: int=None, transaction_id: str=None):
        """DataNotification - a model defined in OpenAPI

        :param entries: The entries of this DataNotification.
        :param key_material: The key_material of this DataNotification.
        :param page_count: The page_count of this DataNotification.
        :param page_number: The page_number of this DataNotification.
        :param transaction_id: The transaction_id of this DataNotification.
        """
        self.openapi_types = {
            'entries': List[DataNotificationEntriesInner],
            'key_material': KeyMaterial,
            'page_count': int,
            'page_number': int,
            'transaction_id': str
        }

        self.attribute_map = {
            'entries': 'entries',
            'key_material': 'keyMaterial',
            'page_count': 'pageCount',
            'page_number': 'pageNumber',
            'transaction_id': 'transactionId'
        }

        self._entries = entries
        self._key_material = key_material
        self._page_count = page_count
        self._page_number = page_number
        self._transaction_id = transaction_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataNotification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataNotification of this DataNotification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entries(self):
        """Gets the entries of this DataNotification.


        :return: The entries of this DataNotification.
        :rtype: List[DataNotificationEntriesInner]
        """
        return self._entries

    @entries.setter
    def entries(self, entries):
        """Sets the entries of this DataNotification.


        :param entries: The entries of this DataNotification.
        :type entries: List[DataNotificationEntriesInner]
        """
        if entries is None:
            raise ValueError("Invalid value for `entries`, must not be `None`")

        self._entries = entries

    @property
    def key_material(self):
        """Gets the key_material of this DataNotification.


        :return: The key_material of this DataNotification.
        :rtype: KeyMaterial
        """
        return self._key_material

    @key_material.setter
    def key_material(self, key_material):
        """Sets the key_material of this DataNotification.


        :param key_material: The key_material of this DataNotification.
        :type key_material: KeyMaterial
        """
        if key_material is None:
            raise ValueError("Invalid value for `key_material`, must not be `None`")

        self._key_material = key_material

    @property
    def page_count(self):
        """Gets the page_count of this DataNotification.

        Total number of pages.

        :return: The page_count of this DataNotification.
        :rtype: int
        """
        return self._page_count

    @page_count.setter
    def page_count(self, page_count):
        """Sets the page_count of this DataNotification.

        Total number of pages.

        :param page_count: The page_count of this DataNotification.
        :type page_count: int
        """
        if page_count is None:
            raise ValueError("Invalid value for `page_count`, must not be `None`")

        self._page_count = page_count

    @property
    def page_number(self):
        """Gets the page_number of this DataNotification.

        Current page number.

        :return: The page_number of this DataNotification.
        :rtype: int
        """
        return self._page_number

    @page_number.setter
    def page_number(self, page_number):
        """Sets the page_number of this DataNotification.

        Current page number.

        :param page_number: The page_number of this DataNotification.
        :type page_number: int
        """
        if page_number is None:
            raise ValueError("Invalid value for `page_number`, must not be `None`")

        self._page_number = page_number

    @property
    def transaction_id(self):
        """Gets the transaction_id of this DataNotification.

        Transaction Id issued when data requested.

        :return: The transaction_id of this DataNotification.
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this DataNotification.

        Transaction Id issued when data requested.

        :param transaction_id: The transaction_id of this DataNotification.
        :type transaction_id: str
        """
        if transaction_id is None:
            raise ValueError("Invalid value for `transaction_id`, must not be `None`")

        self._transaction_id = transaction_id
