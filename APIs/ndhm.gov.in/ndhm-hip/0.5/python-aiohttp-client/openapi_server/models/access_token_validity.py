# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.patient_auth_purpose import PatientAuthPurpose
from openapi_server.models.patient_auth_requester import PatientAuthRequester
from openapi_server import util


class AccessTokenValidity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expiry: datetime=None, limit: int=None, purpose: PatientAuthPurpose=None, requester: PatientAuthRequester=None):
        """AccessTokenValidity - a model defined in OpenAPI

        :param expiry: The expiry of this AccessTokenValidity.
        :param limit: The limit of this AccessTokenValidity.
        :param purpose: The purpose of this AccessTokenValidity.
        :param requester: The requester of this AccessTokenValidity.
        """
        self.openapi_types = {
            'expiry': datetime,
            'limit': int,
            'purpose': PatientAuthPurpose,
            'requester': PatientAuthRequester
        }

        self.attribute_map = {
            'expiry': 'expiry',
            'limit': 'limit',
            'purpose': 'purpose',
            'requester': 'requester'
        }

        self._expiry = expiry
        self._limit = limit
        self._purpose = purpose
        self._requester = requester

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccessTokenValidity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccessTokenValidity of this AccessTokenValidity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expiry(self):
        """Gets the expiry of this AccessTokenValidity.

        Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ

        :return: The expiry of this AccessTokenValidity.
        :rtype: datetime
        """
        return self._expiry

    @expiry.setter
    def expiry(self, expiry):
        """Sets the expiry of this AccessTokenValidity.

        Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ

        :param expiry: The expiry of this AccessTokenValidity.
        :type expiry: datetime
        """
        if expiry is None:
            raise ValueError("Invalid value for `expiry`, must not be `None`")

        self._expiry = expiry

    @property
    def limit(self):
        """Gets the limit of this AccessTokenValidity.

        number of times, the token can be used

        :return: The limit of this AccessTokenValidity.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this AccessTokenValidity.

        number of times, the token can be used

        :param limit: The limit of this AccessTokenValidity.
        :type limit: int
        """
        if limit is None:
            raise ValueError("Invalid value for `limit`, must not be `None`")

        self._limit = limit

    @property
    def purpose(self):
        """Gets the purpose of this AccessTokenValidity.


        :return: The purpose of this AccessTokenValidity.
        :rtype: PatientAuthPurpose
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """Sets the purpose of this AccessTokenValidity.


        :param purpose: The purpose of this AccessTokenValidity.
        :type purpose: PatientAuthPurpose
        """
        if purpose is None:
            raise ValueError("Invalid value for `purpose`, must not be `None`")

        self._purpose = purpose

    @property
    def requester(self):
        """Gets the requester of this AccessTokenValidity.


        :return: The requester of this AccessTokenValidity.
        :rtype: PatientAuthRequester
        """
        return self._requester

    @requester.setter
    def requester(self, requester):
        """Sets the requester of this AccessTokenValidity.


        :param requester: The requester of this AccessTokenValidity.
        :type requester: PatientAuthRequester
        """
        if requester is None:
            raise ValueError("Invalid value for `requester`, must not be `None`")

        self._requester = requester
