# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.patient_link_reference_request_patient import PatientLinkReferenceRequestPatient
from openapi_server import util


class PatientLinkReferenceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, patient: PatientLinkReferenceRequestPatient=None, request_id: str=None, timestamp: datetime=None, transaction_id: str=None):
        """PatientLinkReferenceRequest - a model defined in OpenAPI

        :param patient: The patient of this PatientLinkReferenceRequest.
        :param request_id: The request_id of this PatientLinkReferenceRequest.
        :param timestamp: The timestamp of this PatientLinkReferenceRequest.
        :param transaction_id: The transaction_id of this PatientLinkReferenceRequest.
        """
        self.openapi_types = {
            'patient': PatientLinkReferenceRequestPatient,
            'request_id': str,
            'timestamp': datetime,
            'transaction_id': str
        }

        self.attribute_map = {
            'patient': 'patient',
            'request_id': 'requestId',
            'timestamp': 'timestamp',
            'transaction_id': 'transactionId'
        }

        self._patient = patient
        self._request_id = request_id
        self._timestamp = timestamp
        self._transaction_id = transaction_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatientLinkReferenceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatientLinkReferenceRequest of this PatientLinkReferenceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def patient(self):
        """Gets the patient of this PatientLinkReferenceRequest.


        :return: The patient of this PatientLinkReferenceRequest.
        :rtype: PatientLinkReferenceRequestPatient
        """
        return self._patient

    @patient.setter
    def patient(self, patient):
        """Sets the patient of this PatientLinkReferenceRequest.


        :param patient: The patient of this PatientLinkReferenceRequest.
        :type patient: PatientLinkReferenceRequestPatient
        """
        if patient is None:
            raise ValueError("Invalid value for `patient`, must not be `None`")

        self._patient = patient

    @property
    def request_id(self):
        """Gets the request_id of this PatientLinkReferenceRequest.


        :return: The request_id of this PatientLinkReferenceRequest.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this PatientLinkReferenceRequest.


        :param request_id: The request_id of this PatientLinkReferenceRequest.
        :type request_id: str
        """
        if request_id is None:
            raise ValueError("Invalid value for `request_id`, must not be `None`")

        self._request_id = request_id

    @property
    def timestamp(self):
        """Gets the timestamp of this PatientLinkReferenceRequest.

        Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ

        :return: The timestamp of this PatientLinkReferenceRequest.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this PatientLinkReferenceRequest.

        Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ

        :param timestamp: The timestamp of this PatientLinkReferenceRequest.
        :type timestamp: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")

        self._timestamp = timestamp

    @property
    def transaction_id(self):
        """Gets the transaction_id of this PatientLinkReferenceRequest.


        :return: The transaction_id of this PatientLinkReferenceRequest.
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this PatientLinkReferenceRequest.


        :param transaction_id: The transaction_id of this PatientLinkReferenceRequest.
        :type transaction_id: str
        """
        if transaction_id is None:
            raise ValueError("Invalid value for `transaction_id`, must not be `None`")

        self._transaction_id = transaction_id
