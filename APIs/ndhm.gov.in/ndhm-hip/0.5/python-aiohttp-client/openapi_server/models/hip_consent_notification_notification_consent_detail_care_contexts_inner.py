# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HIPConsentNotificationNotificationConsentDetailCareContextsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, care_context_reference: str=None, patient_reference: str=None):
        """HIPConsentNotificationNotificationConsentDetailCareContextsInner - a model defined in OpenAPI

        :param care_context_reference: The care_context_reference of this HIPConsentNotificationNotificationConsentDetailCareContextsInner.
        :param patient_reference: The patient_reference of this HIPConsentNotificationNotificationConsentDetailCareContextsInner.
        """
        self.openapi_types = {
            'care_context_reference': str,
            'patient_reference': str
        }

        self.attribute_map = {
            'care_context_reference': 'careContextReference',
            'patient_reference': 'patientReference'
        }

        self._care_context_reference = care_context_reference
        self._patient_reference = patient_reference

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HIPConsentNotificationNotificationConsentDetailCareContextsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HIPConsentNotification_notification_consentDetail_careContexts_inner of this HIPConsentNotificationNotificationConsentDetailCareContextsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def care_context_reference(self):
        """Gets the care_context_reference of this HIPConsentNotificationNotificationConsentDetailCareContextsInner.


        :return: The care_context_reference of this HIPConsentNotificationNotificationConsentDetailCareContextsInner.
        :rtype: str
        """
        return self._care_context_reference

    @care_context_reference.setter
    def care_context_reference(self, care_context_reference):
        """Sets the care_context_reference of this HIPConsentNotificationNotificationConsentDetailCareContextsInner.


        :param care_context_reference: The care_context_reference of this HIPConsentNotificationNotificationConsentDetailCareContextsInner.
        :type care_context_reference: str
        """
        if care_context_reference is None:
            raise ValueError("Invalid value for `care_context_reference`, must not be `None`")

        self._care_context_reference = care_context_reference

    @property
    def patient_reference(self):
        """Gets the patient_reference of this HIPConsentNotificationNotificationConsentDetailCareContextsInner.


        :return: The patient_reference of this HIPConsentNotificationNotificationConsentDetailCareContextsInner.
        :rtype: str
        """
        return self._patient_reference

    @patient_reference.setter
    def patient_reference(self, patient_reference):
        """Sets the patient_reference of this HIPConsentNotificationNotificationConsentDetailCareContextsInner.


        :param patient_reference: The patient_reference of this HIPConsentNotificationNotificationConsentDetailCareContextsInner.
        :type patient_reference: str
        """
        if patient_reference is None:
            raise ValueError("Invalid value for `patient_reference`, must not be `None`")

        self._patient_reference = patient_reference
