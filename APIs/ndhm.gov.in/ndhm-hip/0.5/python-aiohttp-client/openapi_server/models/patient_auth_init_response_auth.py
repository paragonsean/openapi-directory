# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.auth_meta import AuthMeta
from openapi_server.models.authentication_mode import AuthenticationMode
from openapi_server import util


class PatientAuthInitResponseAuth(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, meta: AuthMeta=None, mode: AuthenticationMode=None, transaction_id: str=None):
        """PatientAuthInitResponseAuth - a model defined in OpenAPI

        :param meta: The meta of this PatientAuthInitResponseAuth.
        :param mode: The mode of this PatientAuthInitResponseAuth.
        :param transaction_id: The transaction_id of this PatientAuthInitResponseAuth.
        """
        self.openapi_types = {
            'meta': AuthMeta,
            'mode': AuthenticationMode,
            'transaction_id': str
        }

        self.attribute_map = {
            'meta': 'meta',
            'mode': 'mode',
            'transaction_id': 'transactionId'
        }

        self._meta = meta
        self._mode = mode
        self._transaction_id = transaction_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatientAuthInitResponseAuth':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatientAuthInitResponse_auth of this PatientAuthInitResponseAuth.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def meta(self):
        """Gets the meta of this PatientAuthInitResponseAuth.


        :return: The meta of this PatientAuthInitResponseAuth.
        :rtype: AuthMeta
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this PatientAuthInitResponseAuth.


        :param meta: The meta of this PatientAuthInitResponseAuth.
        :type meta: AuthMeta
        """

        self._meta = meta

    @property
    def mode(self):
        """Gets the mode of this PatientAuthInitResponseAuth.


        :return: The mode of this PatientAuthInitResponseAuth.
        :rtype: AuthenticationMode
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this PatientAuthInitResponseAuth.


        :param mode: The mode of this PatientAuthInitResponseAuth.
        :type mode: AuthenticationMode
        """
        if mode is None:
            raise ValueError("Invalid value for `mode`, must not be `None`")

        self._mode = mode

    @property
    def transaction_id(self):
        """Gets the transaction_id of this PatientAuthInitResponseAuth.


        :return: The transaction_id of this PatientAuthInitResponseAuth.
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this PatientAuthInitResponseAuth.


        :param transaction_id: The transaction_id of this PatientAuthInitResponseAuth.
        :type transaction_id: str
        """
        if transaction_id is None:
            raise ValueError("Invalid value for `transaction_id`, must not be `None`")

        self._transaction_id = transaction_id
