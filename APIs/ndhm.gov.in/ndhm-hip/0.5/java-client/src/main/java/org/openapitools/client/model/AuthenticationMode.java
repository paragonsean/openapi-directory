/*
 * Health Repository Provider Specifications for HIP
 * The following are the specifications for the APIs to be implemented at the Health Repository end if an entity is only serving the role of a HIP. The specs are essentially duplicates from the Gateway and Health Repository, but put together so as to make it clear to *HIPs* which set of APIs they should implement to participate in the network.  
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Subjected to CM specific capability  1. MOBILE_OTP - for SMS OTP  2. DIRECT - for authentication directly with the patient. e.g. Mobile App, SMS  3. AADHAAR_OTP - for auth using OTP sent to Aadhaar number  4. DEMOGRAPHICS - for auth using demographic verification. 
 */
@JsonAdapter(AuthenticationMode.Adapter.class)
public enum AuthenticationMode {
  
  MOBILE_OTP("MOBILE_OTP"),
  
  DIRECT("DIRECT"),
  
  DEMOGRAPHICS("DEMOGRAPHICS"),
  
  AADHAAR_OTP("AADHAAR_OTP");

  private String value;

  AuthenticationMode(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static AuthenticationMode fromValue(String value) {
    for (AuthenticationMode b : AuthenticationMode.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<AuthenticationMode> {
    @Override
    public void write(final JsonWriter jsonWriter, final AuthenticationMode enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public AuthenticationMode read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return AuthenticationMode.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    AuthenticationMode.fromValue(value);
  }
}

