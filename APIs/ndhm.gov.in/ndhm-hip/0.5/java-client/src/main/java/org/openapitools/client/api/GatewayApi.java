/*
 * Health Repository Provider Specifications for HIP
 * The following are the specifications for the APIs to be implemented at the Health Repository end if an entity is only serving the role of a HIP. The specs are essentially duplicates from the Gateway and Health Repository, but put together so as to make it clear to *HIPs* which set of APIs they should implement to participate in the network.  
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Certs;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.HIPConsentNotificationResponse;
import org.openapitools.client.model.HIPHealthInformationRequestAcknowledgement;
import org.openapitools.client.model.HealthInformationNotification;
import org.openapitools.client.model.OpenIdConfiguration;
import org.openapitools.client.model.PatientAuthConfirmRequest;
import org.openapitools.client.model.PatientAuthInitRequest;
import org.openapitools.client.model.PatientAuthModeQueryRequest;
import org.openapitools.client.model.PatientAuthNotificationAcknowledgement;
import org.openapitools.client.model.PatientCareContextLinkRequest;
import org.openapitools.client.model.PatientDiscoveryResult;
import org.openapitools.client.model.PatientLinkReferenceResult;
import org.openapitools.client.model.PatientLinkResult;
import org.openapitools.client.model.PatientSMSNotifcationRequest;
import org.openapitools.client.model.SessionRequest;
import org.openapitools.client.model.SessionResponse;
import org.openapitools.client.model.ShareProfileResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GatewayApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GatewayApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GatewayApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v05CareContextsOnDiscoverPost
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientDiscoveryResult  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Format mismatch of any of attributes.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05CareContextsOnDiscoverPostCall(String authorization, String X_CM_ID, PatientDiscoveryResult patientDiscoveryResult, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patientDiscoveryResult;

        // create path and map variables
        String localVarPath = "/v0.5/care-contexts/on-discover";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (X_CM_ID != null) {
            localVarHeaderParams.put("X-CM-ID", localVarApiClient.parameterToString(X_CM_ID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v05CareContextsOnDiscoverPostValidateBeforeCall(String authorization, String X_CM_ID, PatientDiscoveryResult patientDiscoveryResult, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v05CareContextsOnDiscoverPost(Async)");
        }

        // verify the required parameter 'X_CM_ID' is set
        if (X_CM_ID == null) {
            throw new ApiException("Missing the required parameter 'X_CM_ID' when calling v05CareContextsOnDiscoverPost(Async)");
        }

        // verify the required parameter 'patientDiscoveryResult' is set
        if (patientDiscoveryResult == null) {
            throw new ApiException("Missing the required parameter 'patientDiscoveryResult' when calling v05CareContextsOnDiscoverPost(Async)");
        }

        return v05CareContextsOnDiscoverPostCall(authorization, X_CM_ID, patientDiscoveryResult, _callback);

    }

    /**
     * Response to patient&#39;s account discovery request
     * Result of patient care-context discovery request at HIP end. If a matching patient found with zero or more care contexts associated, it is specified as result attribute. If the prior discovery request, resulted in errors then it is specified in the error attribute. Reasons of errors can be    1. **more than one definitive match for the given request**    2. **no verified identifer was specified** 
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientDiscoveryResult  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Format mismatch of any of attributes.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public void v05CareContextsOnDiscoverPost(String authorization, String X_CM_ID, PatientDiscoveryResult patientDiscoveryResult) throws ApiException {
        v05CareContextsOnDiscoverPostWithHttpInfo(authorization, X_CM_ID, patientDiscoveryResult);
    }

    /**
     * Response to patient&#39;s account discovery request
     * Result of patient care-context discovery request at HIP end. If a matching patient found with zero or more care contexts associated, it is specified as result attribute. If the prior discovery request, resulted in errors then it is specified in the error attribute. Reasons of errors can be    1. **more than one definitive match for the given request**    2. **no verified identifer was specified** 
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientDiscoveryResult  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Format mismatch of any of attributes.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v05CareContextsOnDiscoverPostWithHttpInfo(String authorization, String X_CM_ID, PatientDiscoveryResult patientDiscoveryResult) throws ApiException {
        okhttp3.Call localVarCall = v05CareContextsOnDiscoverPostValidateBeforeCall(authorization, X_CM_ID, patientDiscoveryResult, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Response to patient&#39;s account discovery request (asynchronously)
     * Result of patient care-context discovery request at HIP end. If a matching patient found with zero or more care contexts associated, it is specified as result attribute. If the prior discovery request, resulted in errors then it is specified in the error attribute. Reasons of errors can be    1. **more than one definitive match for the given request**    2. **no verified identifer was specified** 
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientDiscoveryResult  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Format mismatch of any of attributes.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05CareContextsOnDiscoverPostAsync(String authorization, String X_CM_ID, PatientDiscoveryResult patientDiscoveryResult, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v05CareContextsOnDiscoverPostValidateBeforeCall(authorization, X_CM_ID, patientDiscoveryResult, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v05CertsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **Causes:**   * Invalid consent request id  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05CertsGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.5/certs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v05CertsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return v05CertsGetCall(_callback);

    }

    /**
     * Get certs for JWT verification
     * 
     * @return Certs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **Causes:**   * Invalid consent request id  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public Certs v05CertsGet() throws ApiException {
        ApiResponse<Certs> localVarResp = v05CertsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get certs for JWT verification
     * 
     * @return ApiResponse&lt;Certs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **Causes:**   * Invalid consent request id  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Certs> v05CertsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = v05CertsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Certs>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get certs for JWT verification (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **Causes:**   * Invalid consent request id  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05CertsGetAsync(final ApiCallback<Certs> _callback) throws ApiException {

        okhttp3.Call localVarCall = v05CertsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Certs>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v05ConsentsHipOnNotifyPost
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param hiPConsentNotificationResponse  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Invalid/Expired/Empty token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream services are down  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05ConsentsHipOnNotifyPostCall(String authorization, String X_CM_ID, HIPConsentNotificationResponse hiPConsentNotificationResponse, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = hiPConsentNotificationResponse;

        // create path and map variables
        String localVarPath = "/v0.5/consents/hip/on-notify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (X_CM_ID != null) {
            localVarHeaderParams.put("X-CM-ID", localVarApiClient.parameterToString(X_CM_ID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v05ConsentsHipOnNotifyPostValidateBeforeCall(String authorization, String X_CM_ID, HIPConsentNotificationResponse hiPConsentNotificationResponse, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v05ConsentsHipOnNotifyPost(Async)");
        }

        // verify the required parameter 'X_CM_ID' is set
        if (X_CM_ID == null) {
            throw new ApiException("Missing the required parameter 'X_CM_ID' when calling v05ConsentsHipOnNotifyPost(Async)");
        }

        // verify the required parameter 'hiPConsentNotificationResponse' is set
        if (hiPConsentNotificationResponse == null) {
            throw new ApiException("Missing the required parameter 'hiPConsentNotificationResponse' when calling v05ConsentsHipOnNotifyPost(Async)");
        }

        return v05ConsentsHipOnNotifyPostCall(authorization, X_CM_ID, hiPConsentNotificationResponse, _callback);

    }

    /**
     * Consent notification
     * This API is called by HIP as acknowledgement to notification of consents, in cases of consent revocation and expiration.  
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param hiPConsentNotificationResponse  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Invalid/Expired/Empty token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream services are down  </td><td>  -  </td></tr>
     </table>
     */
    public void v05ConsentsHipOnNotifyPost(String authorization, String X_CM_ID, HIPConsentNotificationResponse hiPConsentNotificationResponse) throws ApiException {
        v05ConsentsHipOnNotifyPostWithHttpInfo(authorization, X_CM_ID, hiPConsentNotificationResponse);
    }

    /**
     * Consent notification
     * This API is called by HIP as acknowledgement to notification of consents, in cases of consent revocation and expiration.  
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param hiPConsentNotificationResponse  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Invalid/Expired/Empty token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream services are down  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v05ConsentsHipOnNotifyPostWithHttpInfo(String authorization, String X_CM_ID, HIPConsentNotificationResponse hiPConsentNotificationResponse) throws ApiException {
        okhttp3.Call localVarCall = v05ConsentsHipOnNotifyPostValidateBeforeCall(authorization, X_CM_ID, hiPConsentNotificationResponse, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Consent notification (asynchronously)
     * This API is called by HIP as acknowledgement to notification of consents, in cases of consent revocation and expiration.  
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param hiPConsentNotificationResponse  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Invalid/Expired/Empty token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream services are down  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05ConsentsHipOnNotifyPostAsync(String authorization, String X_CM_ID, HIPConsentNotificationResponse hiPConsentNotificationResponse, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v05ConsentsHipOnNotifyPostValidateBeforeCall(authorization, X_CM_ID, hiPConsentNotificationResponse, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v05HealthInformationHipOnRequestPost
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param hiPHealthInformationRequestAcknowledgement  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Bad request  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Token is invalid or Link has expired  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05HealthInformationHipOnRequestPostCall(String authorization, String X_CM_ID, HIPHealthInformationRequestAcknowledgement hiPHealthInformationRequestAcknowledgement, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = hiPHealthInformationRequestAcknowledgement;

        // create path and map variables
        String localVarPath = "/v0.5/health-information/hip/on-request";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (X_CM_ID != null) {
            localVarHeaderParams.put("X-CM-ID", localVarApiClient.parameterToString(X_CM_ID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v05HealthInformationHipOnRequestPostValidateBeforeCall(String authorization, String X_CM_ID, HIPHealthInformationRequestAcknowledgement hiPHealthInformationRequestAcknowledgement, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v05HealthInformationHipOnRequestPost(Async)");
        }

        // verify the required parameter 'X_CM_ID' is set
        if (X_CM_ID == null) {
            throw new ApiException("Missing the required parameter 'X_CM_ID' when calling v05HealthInformationHipOnRequestPost(Async)");
        }

        // verify the required parameter 'hiPHealthInformationRequestAcknowledgement' is set
        if (hiPHealthInformationRequestAcknowledgement == null) {
            throw new ApiException("Missing the required parameter 'hiPHealthInformationRequestAcknowledgement' when calling v05HealthInformationHipOnRequestPost(Async)");
        }

        return v05HealthInformationHipOnRequestPostCall(authorization, X_CM_ID, hiPHealthInformationRequestAcknowledgement, _callback);

    }

    /**
     * Health information data request
     * API called by HIP to acknowledge Health information request receipt. Either the **hiRequest** or **error** must be specified. **hiRequest** element returns the same transactionId as before with a status indicating that the request is acknowledged.   
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param hiPHealthInformationRequestAcknowledgement  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Bad request  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Token is invalid or Link has expired  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public void v05HealthInformationHipOnRequestPost(String authorization, String X_CM_ID, HIPHealthInformationRequestAcknowledgement hiPHealthInformationRequestAcknowledgement) throws ApiException {
        v05HealthInformationHipOnRequestPostWithHttpInfo(authorization, X_CM_ID, hiPHealthInformationRequestAcknowledgement);
    }

    /**
     * Health information data request
     * API called by HIP to acknowledge Health information request receipt. Either the **hiRequest** or **error** must be specified. **hiRequest** element returns the same transactionId as before with a status indicating that the request is acknowledged.   
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param hiPHealthInformationRequestAcknowledgement  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Bad request  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Token is invalid or Link has expired  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v05HealthInformationHipOnRequestPostWithHttpInfo(String authorization, String X_CM_ID, HIPHealthInformationRequestAcknowledgement hiPHealthInformationRequestAcknowledgement) throws ApiException {
        okhttp3.Call localVarCall = v05HealthInformationHipOnRequestPostValidateBeforeCall(authorization, X_CM_ID, hiPHealthInformationRequestAcknowledgement, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Health information data request (asynchronously)
     * API called by HIP to acknowledge Health information request receipt. Either the **hiRequest** or **error** must be specified. **hiRequest** element returns the same transactionId as before with a status indicating that the request is acknowledged.   
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param hiPHealthInformationRequestAcknowledgement  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Bad request  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Token is invalid or Link has expired  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05HealthInformationHipOnRequestPostAsync(String authorization, String X_CM_ID, HIPHealthInformationRequestAcknowledgement hiPHealthInformationRequestAcknowledgement, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v05HealthInformationHipOnRequestPostValidateBeforeCall(authorization, X_CM_ID, hiPHealthInformationRequestAcknowledgement, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v05HealthInformationNotifyPost
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param healthInformationNotification  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Notification is Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Invalid Request  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Expired/Invalid token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05HealthInformationNotifyPostCall(String authorization, String X_CM_ID, HealthInformationNotification healthInformationNotification, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = healthInformationNotification;

        // create path and map variables
        String localVarPath = "/v0.5/health-information/notify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (X_CM_ID != null) {
            localVarHeaderParams.put("X-CM-ID", localVarApiClient.parameterToString(X_CM_ID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v05HealthInformationNotifyPostValidateBeforeCall(String authorization, String X_CM_ID, HealthInformationNotification healthInformationNotification, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v05HealthInformationNotifyPost(Async)");
        }

        // verify the required parameter 'X_CM_ID' is set
        if (X_CM_ID == null) {
            throw new ApiException("Missing the required parameter 'X_CM_ID' when calling v05HealthInformationNotifyPost(Async)");
        }

        // verify the required parameter 'healthInformationNotification' is set
        if (healthInformationNotification == null) {
            throw new ApiException("Missing the required parameter 'healthInformationNotification' when calling v05HealthInformationNotifyPost(Async)");
        }

        return v05HealthInformationNotifyPostCall(authorization, X_CM_ID, healthInformationNotification, _callback);

    }

    /**
     * Notifications corresponding to events during data flow
     * API called by HIU and HIP during data-transfer.  1. HIP on transfer of data would send **sessionStatus** - one of [TRANSFERRED, FAILED] 2. HIP would also send **hiStatus** for each *careContextReference* - on of [DELIVERED, ERRORED] 3. HIU on receipt of data would send **sessionStatus** - one of [TRANSFERRED, FAILED]. For example, FAILED when if data was not sent or if invalid data was sent 4. HIU would also send **hiStatus** for each *careContextReference* - one of [OK, ERRORED]  
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param healthInformationNotification  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Notification is Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Invalid Request  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Expired/Invalid token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public void v05HealthInformationNotifyPost(String authorization, String X_CM_ID, HealthInformationNotification healthInformationNotification) throws ApiException {
        v05HealthInformationNotifyPostWithHttpInfo(authorization, X_CM_ID, healthInformationNotification);
    }

    /**
     * Notifications corresponding to events during data flow
     * API called by HIU and HIP during data-transfer.  1. HIP on transfer of data would send **sessionStatus** - one of [TRANSFERRED, FAILED] 2. HIP would also send **hiStatus** for each *careContextReference* - on of [DELIVERED, ERRORED] 3. HIU on receipt of data would send **sessionStatus** - one of [TRANSFERRED, FAILED]. For example, FAILED when if data was not sent or if invalid data was sent 4. HIU would also send **hiStatus** for each *careContextReference* - one of [OK, ERRORED]  
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param healthInformationNotification  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Notification is Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Invalid Request  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Expired/Invalid token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v05HealthInformationNotifyPostWithHttpInfo(String authorization, String X_CM_ID, HealthInformationNotification healthInformationNotification) throws ApiException {
        okhttp3.Call localVarCall = v05HealthInformationNotifyPostValidateBeforeCall(authorization, X_CM_ID, healthInformationNotification, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Notifications corresponding to events during data flow (asynchronously)
     * API called by HIU and HIP during data-transfer.  1. HIP on transfer of data would send **sessionStatus** - one of [TRANSFERRED, FAILED] 2. HIP would also send **hiStatus** for each *careContextReference* - on of [DELIVERED, ERRORED] 3. HIU on receipt of data would send **sessionStatus** - one of [TRANSFERRED, FAILED]. For example, FAILED when if data was not sent or if invalid data was sent 4. HIU would also send **hiStatus** for each *careContextReference* - one of [OK, ERRORED]  
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param healthInformationNotification  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Notification is Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Invalid Request  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Expired/Invalid token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05HealthInformationNotifyPostAsync(String authorization, String X_CM_ID, HealthInformationNotification healthInformationNotification, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v05HealthInformationNotifyPostValidateBeforeCall(authorization, X_CM_ID, healthInformationNotification, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v05LinksLinkAddContextsPost
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientCareContextLinkRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * required information not provided  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05LinksLinkAddContextsPostCall(String authorization, String X_CM_ID, PatientCareContextLinkRequest patientCareContextLinkRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patientCareContextLinkRequest;

        // create path and map variables
        String localVarPath = "/v0.5/links/link/add-contexts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (X_CM_ID != null) {
            localVarHeaderParams.put("X-CM-ID", localVarApiClient.parameterToString(X_CM_ID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v05LinksLinkAddContextsPostValidateBeforeCall(String authorization, String X_CM_ID, PatientCareContextLinkRequest patientCareContextLinkRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v05LinksLinkAddContextsPost(Async)");
        }

        // verify the required parameter 'X_CM_ID' is set
        if (X_CM_ID == null) {
            throw new ApiException("Missing the required parameter 'X_CM_ID' when calling v05LinksLinkAddContextsPost(Async)");
        }

        // verify the required parameter 'patientCareContextLinkRequest' is set
        if (patientCareContextLinkRequest == null) {
            throw new ApiException("Missing the required parameter 'patientCareContextLinkRequest' when calling v05LinksLinkAddContextsPost(Async)");
        }

        return v05LinksLinkAddContextsPostCall(authorization, X_CM_ID, patientCareContextLinkRequest, _callback);

    }

    /**
     * API for HIP initiated care-context linking for patient
     * API to submit care-context to CM for HIP initiated linking. The API must accompany the \&quot;accessToken\&quot; fetched in the users/auth process.     1. subsequent usage for accessToken may be invalid if it was meant for one-time usage or if it expired 
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientCareContextLinkRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * required information not provided  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public void v05LinksLinkAddContextsPost(String authorization, String X_CM_ID, PatientCareContextLinkRequest patientCareContextLinkRequest) throws ApiException {
        v05LinksLinkAddContextsPostWithHttpInfo(authorization, X_CM_ID, patientCareContextLinkRequest);
    }

    /**
     * API for HIP initiated care-context linking for patient
     * API to submit care-context to CM for HIP initiated linking. The API must accompany the \&quot;accessToken\&quot; fetched in the users/auth process.     1. subsequent usage for accessToken may be invalid if it was meant for one-time usage or if it expired 
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientCareContextLinkRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * required information not provided  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v05LinksLinkAddContextsPostWithHttpInfo(String authorization, String X_CM_ID, PatientCareContextLinkRequest patientCareContextLinkRequest) throws ApiException {
        okhttp3.Call localVarCall = v05LinksLinkAddContextsPostValidateBeforeCall(authorization, X_CM_ID, patientCareContextLinkRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * API for HIP initiated care-context linking for patient (asynchronously)
     * API to submit care-context to CM for HIP initiated linking. The API must accompany the \&quot;accessToken\&quot; fetched in the users/auth process.     1. subsequent usage for accessToken may be invalid if it was meant for one-time usage or if it expired 
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientCareContextLinkRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * required information not provided  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05LinksLinkAddContextsPostAsync(String authorization, String X_CM_ID, PatientCareContextLinkRequest patientCareContextLinkRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v05LinksLinkAddContextsPostValidateBeforeCall(authorization, X_CM_ID, patientCareContextLinkRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v05LinksLinkOnConfirmPost
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientLinkResult  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * resp not specified   * atleast patient or error should be specified  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05LinksLinkOnConfirmPostCall(String authorization, String X_CM_ID, PatientLinkResult patientLinkResult, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patientLinkResult;

        // create path and map variables
        String localVarPath = "/v0.5/links/link/on-confirm";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (X_CM_ID != null) {
            localVarHeaderParams.put("X-CM-ID", localVarApiClient.parameterToString(X_CM_ID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v05LinksLinkOnConfirmPostValidateBeforeCall(String authorization, String X_CM_ID, PatientLinkResult patientLinkResult, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v05LinksLinkOnConfirmPost(Async)");
        }

        // verify the required parameter 'X_CM_ID' is set
        if (X_CM_ID == null) {
            throw new ApiException("Missing the required parameter 'X_CM_ID' when calling v05LinksLinkOnConfirmPost(Async)");
        }

        // verify the required parameter 'patientLinkResult' is set
        if (patientLinkResult == null) {
            throw new ApiException("Missing the required parameter 'patientLinkResult' when calling v05LinksLinkOnConfirmPost(Async)");
        }

        return v05LinksLinkOnConfirmPostCall(authorization, X_CM_ID, patientLinkResult, _callback);

    }

    /**
     * Token authenticated by HIP, indicating completion of linkage of care-contexts
     * Returns a list of linked care contexts with patient reference number.   1. **Validated and linked account reference number**   2. **Validated that the token sent from Consent Manager is same as the one generated by HIP**   3. **Verified that same Consent Manager which made the link request is sending the token**   4. **Results of unmasked linked care contexts with patient reference number** 
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientLinkResult  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * resp not specified   * atleast patient or error should be specified  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public void v05LinksLinkOnConfirmPost(String authorization, String X_CM_ID, PatientLinkResult patientLinkResult) throws ApiException {
        v05LinksLinkOnConfirmPostWithHttpInfo(authorization, X_CM_ID, patientLinkResult);
    }

    /**
     * Token authenticated by HIP, indicating completion of linkage of care-contexts
     * Returns a list of linked care contexts with patient reference number.   1. **Validated and linked account reference number**   2. **Validated that the token sent from Consent Manager is same as the one generated by HIP**   3. **Verified that same Consent Manager which made the link request is sending the token**   4. **Results of unmasked linked care contexts with patient reference number** 
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientLinkResult  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * resp not specified   * atleast patient or error should be specified  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v05LinksLinkOnConfirmPostWithHttpInfo(String authorization, String X_CM_ID, PatientLinkResult patientLinkResult) throws ApiException {
        okhttp3.Call localVarCall = v05LinksLinkOnConfirmPostValidateBeforeCall(authorization, X_CM_ID, patientLinkResult, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Token authenticated by HIP, indicating completion of linkage of care-contexts (asynchronously)
     * Returns a list of linked care contexts with patient reference number.   1. **Validated and linked account reference number**   2. **Validated that the token sent from Consent Manager is same as the one generated by HIP**   3. **Verified that same Consent Manager which made the link request is sending the token**   4. **Results of unmasked linked care contexts with patient reference number** 
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientLinkResult  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * resp not specified   * atleast patient or error should be specified  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05LinksLinkOnConfirmPostAsync(String authorization, String X_CM_ID, PatientLinkResult patientLinkResult, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v05LinksLinkOnConfirmPostValidateBeforeCall(authorization, X_CM_ID, patientLinkResult, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v05LinksLinkOnInitPost
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientLinkReferenceResult  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Format mismatch of any of attributes.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05LinksLinkOnInitPostCall(String authorization, String X_CM_ID, PatientLinkReferenceResult patientLinkReferenceResult, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patientLinkReferenceResult;

        // create path and map variables
        String localVarPath = "/v0.5/links/link/on-init";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (X_CM_ID != null) {
            localVarHeaderParams.put("X-CM-ID", localVarApiClient.parameterToString(X_CM_ID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v05LinksLinkOnInitPostValidateBeforeCall(String authorization, String X_CM_ID, PatientLinkReferenceResult patientLinkReferenceResult, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v05LinksLinkOnInitPost(Async)");
        }

        // verify the required parameter 'X_CM_ID' is set
        if (X_CM_ID == null) {
            throw new ApiException("Missing the required parameter 'X_CM_ID' when calling v05LinksLinkOnInitPost(Async)");
        }

        // verify the required parameter 'patientLinkReferenceResult' is set
        if (patientLinkReferenceResult == null) {
            throw new ApiException("Missing the required parameter 'patientLinkReferenceResult' when calling v05LinksLinkOnInitPost(Async)");
        }

        return v05LinksLinkOnInitPostCall(authorization, X_CM_ID, patientLinkReferenceResult, _callback);

    }

    /**
     * Response to patient&#39;s care context link request
     * Result of patient care-context link request from HIP end. This happens in context of previous discovery of patient found at HIP end, therefore the link requests ought to be in reference to the patient reference and care-context references previously returned by the HIP. The correlation of discovery and link request is maintained through the transactionId. HIP should have   1. **Validated transactionId in the request to check whether there was a discovery done previously, and the link request corresponds to returned patient care care context references**   2. **Before returning the response, HIP should have sent an authentication request to the patient(eg: OTP verification)**   3. **HIP should communicate the mode of authentication of a successful request**   4. **HIP subsequently should expect the token passed via /link/confirm against the link.referenceNumber passed in this call**                        The error section in the body, represents the potential errors that may have occurred. Possible reasons:   1. **Patient reference number is invalid**   2. **Care context reference numbers are invalid** 
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientLinkReferenceResult  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Format mismatch of any of attributes.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public void v05LinksLinkOnInitPost(String authorization, String X_CM_ID, PatientLinkReferenceResult patientLinkReferenceResult) throws ApiException {
        v05LinksLinkOnInitPostWithHttpInfo(authorization, X_CM_ID, patientLinkReferenceResult);
    }

    /**
     * Response to patient&#39;s care context link request
     * Result of patient care-context link request from HIP end. This happens in context of previous discovery of patient found at HIP end, therefore the link requests ought to be in reference to the patient reference and care-context references previously returned by the HIP. The correlation of discovery and link request is maintained through the transactionId. HIP should have   1. **Validated transactionId in the request to check whether there was a discovery done previously, and the link request corresponds to returned patient care care context references**   2. **Before returning the response, HIP should have sent an authentication request to the patient(eg: OTP verification)**   3. **HIP should communicate the mode of authentication of a successful request**   4. **HIP subsequently should expect the token passed via /link/confirm against the link.referenceNumber passed in this call**                        The error section in the body, represents the potential errors that may have occurred. Possible reasons:   1. **Patient reference number is invalid**   2. **Care context reference numbers are invalid** 
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientLinkReferenceResult  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Format mismatch of any of attributes.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v05LinksLinkOnInitPostWithHttpInfo(String authorization, String X_CM_ID, PatientLinkReferenceResult patientLinkReferenceResult) throws ApiException {
        okhttp3.Call localVarCall = v05LinksLinkOnInitPostValidateBeforeCall(authorization, X_CM_ID, patientLinkReferenceResult, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Response to patient&#39;s care context link request (asynchronously)
     * Result of patient care-context link request from HIP end. This happens in context of previous discovery of patient found at HIP end, therefore the link requests ought to be in reference to the patient reference and care-context references previously returned by the HIP. The correlation of discovery and link request is maintained through the transactionId. HIP should have   1. **Validated transactionId in the request to check whether there was a discovery done previously, and the link request corresponds to returned patient care care context references**   2. **Before returning the response, HIP should have sent an authentication request to the patient(eg: OTP verification)**   3. **HIP should communicate the mode of authentication of a successful request**   4. **HIP subsequently should expect the token passed via /link/confirm against the link.referenceNumber passed in this call**                        The error section in the body, represents the potential errors that may have occurred. Possible reasons:   1. **Patient reference number is invalid**   2. **Care context reference numbers are invalid** 
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientLinkReferenceResult  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Format mismatch of any of attributes.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05LinksLinkOnInitPostAsync(String authorization, String X_CM_ID, PatientLinkReferenceResult patientLinkReferenceResult, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v05LinksLinkOnInitPostValidateBeforeCall(authorization, X_CM_ID, patientLinkReferenceResult, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v05PatientsProfileOnSharePost
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param shareProfileResult  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Format mismatch of any of attributes.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05PatientsProfileOnSharePostCall(String authorization, String X_CM_ID, ShareProfileResult shareProfileResult, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = shareProfileResult;

        // create path and map variables
        String localVarPath = "/v0.5/patients/profile/on-share";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (X_CM_ID != null) {
            localVarHeaderParams.put("X-CM-ID", localVarApiClient.parameterToString(X_CM_ID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v05PatientsProfileOnSharePostValidateBeforeCall(String authorization, String X_CM_ID, ShareProfileResult shareProfileResult, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v05PatientsProfileOnSharePost(Async)");
        }

        // verify the required parameter 'X_CM_ID' is set
        if (X_CM_ID == null) {
            throw new ApiException("Missing the required parameter 'X_CM_ID' when calling v05PatientsProfileOnSharePost(Async)");
        }

        // verify the required parameter 'shareProfileResult' is set
        if (shareProfileResult == null) {
            throw new ApiException("Missing the required parameter 'shareProfileResult' when calling v05PatientsProfileOnSharePost(Async)");
        }

        return v05PatientsProfileOnSharePostCall(authorization, X_CM_ID, shareProfileResult, _callback);

    }

    /**
     * Response to patient&#39;s share profile request
     * Result of patient share profile request at HIP end. 
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param shareProfileResult  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Format mismatch of any of attributes.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public void v05PatientsProfileOnSharePost(String authorization, String X_CM_ID, ShareProfileResult shareProfileResult) throws ApiException {
        v05PatientsProfileOnSharePostWithHttpInfo(authorization, X_CM_ID, shareProfileResult);
    }

    /**
     * Response to patient&#39;s share profile request
     * Result of patient share profile request at HIP end. 
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param shareProfileResult  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Format mismatch of any of attributes.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v05PatientsProfileOnSharePostWithHttpInfo(String authorization, String X_CM_ID, ShareProfileResult shareProfileResult) throws ApiException {
        okhttp3.Call localVarCall = v05PatientsProfileOnSharePostValidateBeforeCall(authorization, X_CM_ID, shareProfileResult, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Response to patient&#39;s share profile request (asynchronously)
     * Result of patient share profile request at HIP end. 
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param shareProfileResult  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Format mismatch of any of attributes.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05PatientsProfileOnSharePostAsync(String authorization, String X_CM_ID, ShareProfileResult shareProfileResult, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v05PatientsProfileOnSharePostValidateBeforeCall(authorization, X_CM_ID, shareProfileResult, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v05PatientsSmsNotifyPost
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientSMSNotifcationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * required information not provided  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05PatientsSmsNotifyPostCall(String authorization, String X_CM_ID, PatientSMSNotifcationRequest patientSMSNotifcationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patientSMSNotifcationRequest;

        // create path and map variables
        String localVarPath = "/v0.5/patients/sms/notify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (X_CM_ID != null) {
            localVarHeaderParams.put("X-CM-ID", localVarApiClient.parameterToString(X_CM_ID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v05PatientsSmsNotifyPostValidateBeforeCall(String authorization, String X_CM_ID, PatientSMSNotifcationRequest patientSMSNotifcationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v05PatientsSmsNotifyPost(Async)");
        }

        // verify the required parameter 'X_CM_ID' is set
        if (X_CM_ID == null) {
            throw new ApiException("Missing the required parameter 'X_CM_ID' when calling v05PatientsSmsNotifyPost(Async)");
        }

        // verify the required parameter 'patientSMSNotifcationRequest' is set
        if (patientSMSNotifcationRequest == null) {
            throw new ApiException("Missing the required parameter 'patientSMSNotifcationRequest' when calling v05PatientsSmsNotifyPost(Async)");
        }

        return v05PatientsSmsNotifyPostCall(authorization, X_CM_ID, patientSMSNotifcationRequest, _callback);

    }

    /**
     * API for HIP to send SMS notifications to patients
     * API to send SMS notifications to patient with custom deeplink. 
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientSMSNotifcationRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * required information not provided  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public void v05PatientsSmsNotifyPost(String authorization, String X_CM_ID, PatientSMSNotifcationRequest patientSMSNotifcationRequest) throws ApiException {
        v05PatientsSmsNotifyPostWithHttpInfo(authorization, X_CM_ID, patientSMSNotifcationRequest);
    }

    /**
     * API for HIP to send SMS notifications to patients
     * API to send SMS notifications to patient with custom deeplink. 
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientSMSNotifcationRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * required information not provided  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v05PatientsSmsNotifyPostWithHttpInfo(String authorization, String X_CM_ID, PatientSMSNotifcationRequest patientSMSNotifcationRequest) throws ApiException {
        okhttp3.Call localVarCall = v05PatientsSmsNotifyPostValidateBeforeCall(authorization, X_CM_ID, patientSMSNotifcationRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * API for HIP to send SMS notifications to patients (asynchronously)
     * API to send SMS notifications to patient with custom deeplink. 
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientSMSNotifcationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * required information not provided  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05PatientsSmsNotifyPostAsync(String authorization, String X_CM_ID, PatientSMSNotifcationRequest patientSMSNotifcationRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v05PatientsSmsNotifyPostValidateBeforeCall(authorization, X_CM_ID, patientSMSNotifcationRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v05SessionsPost
     * @param sessionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Invalid client Id or secret.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **Causes:**   * Invalid consent request id  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05SessionsPostCall(SessionRequest sessionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sessionRequest;

        // create path and map variables
        String localVarPath = "/v0.5/sessions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v05SessionsPostValidateBeforeCall(SessionRequest sessionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionRequest' is set
        if (sessionRequest == null) {
            throw new ApiException("Missing the required parameter 'sessionRequest' when calling v05SessionsPost(Async)");
        }

        return v05SessionsPostCall(sessionRequest, _callback);

    }

    /**
     * Get access token
     * 
     * @param sessionRequest  (required)
     * @return SessionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Invalid client Id or secret.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **Causes:**   * Invalid consent request id  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public SessionResponse v05SessionsPost(SessionRequest sessionRequest) throws ApiException {
        ApiResponse<SessionResponse> localVarResp = v05SessionsPostWithHttpInfo(sessionRequest);
        return localVarResp.getData();
    }

    /**
     * Get access token
     * 
     * @param sessionRequest  (required)
     * @return ApiResponse&lt;SessionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Invalid client Id or secret.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **Causes:**   * Invalid consent request id  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SessionResponse> v05SessionsPostWithHttpInfo(SessionRequest sessionRequest) throws ApiException {
        okhttp3.Call localVarCall = v05SessionsPostValidateBeforeCall(sessionRequest, null);
        Type localVarReturnType = new TypeToken<SessionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get access token (asynchronously)
     * 
     * @param sessionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Invalid client Id or secret.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **Causes:**   * Invalid consent request id  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05SessionsPostAsync(SessionRequest sessionRequest, final ApiCallback<SessionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v05SessionsPostValidateBeforeCall(sessionRequest, _callback);
        Type localVarReturnType = new TypeToken<SessionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v05UsersAuthConfirmPost
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientAuthConfirmRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * transaction id is not provided or invalid   * token or other auth confirmation details not provided or invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05UsersAuthConfirmPostCall(String authorization, String X_CM_ID, PatientAuthConfirmRequest patientAuthConfirmRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patientAuthConfirmRequest;

        // create path and map variables
        String localVarPath = "/v0.5/users/auth/confirm";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (X_CM_ID != null) {
            localVarHeaderParams.put("X-CM-ID", localVarApiClient.parameterToString(X_CM_ID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v05UsersAuthConfirmPostValidateBeforeCall(String authorization, String X_CM_ID, PatientAuthConfirmRequest patientAuthConfirmRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v05UsersAuthConfirmPost(Async)");
        }

        // verify the required parameter 'X_CM_ID' is set
        if (X_CM_ID == null) {
            throw new ApiException("Missing the required parameter 'X_CM_ID' when calling v05UsersAuthConfirmPost(Async)");
        }

        // verify the required parameter 'patientAuthConfirmRequest' is set
        if (patientAuthConfirmRequest == null) {
            throw new ApiException("Missing the required parameter 'patientAuthConfirmRequest' when calling v05UsersAuthConfirmPost(Async)");
        }

        return v05UsersAuthConfirmPostCall(authorization, X_CM_ID, patientAuthConfirmRequest, _callback);

    }

    /**
     * Confirmation request sending token, otp or other authentication details from HIP/HIU for confirmation
     * This API is called by HIP/HIUs to confirm authentication of users. The transactionId returned by the previous callback API /users/auth/on-init must be sent. If Authentication is successful the callback API will send an \&quot;access token\&quot; for subsequent purpose specific API calls. Note only **credential.authCode** or **credential.demographic** should be sent   1. demographic details are only required for  demographic auth as of now.    2. demographic details are required only in MEDIATED cases and if the **auth.mode** so demands. e.g. if **auth.mode** is DEMOGRAPHICS. Usually for demographic authentication, the name, gender and DOB must be exactly as specified in User Account.   3. demographic.identifier is optional, however maybe required if authentication so mandates.    4. credential.authCode is required for other MEDIATED authentication like MOBILE_OTP, AADHAAR_OTP.  
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientAuthConfirmRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * transaction id is not provided or invalid   * token or other auth confirmation details not provided or invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public void v05UsersAuthConfirmPost(String authorization, String X_CM_ID, PatientAuthConfirmRequest patientAuthConfirmRequest) throws ApiException {
        v05UsersAuthConfirmPostWithHttpInfo(authorization, X_CM_ID, patientAuthConfirmRequest);
    }

    /**
     * Confirmation request sending token, otp or other authentication details from HIP/HIU for confirmation
     * This API is called by HIP/HIUs to confirm authentication of users. The transactionId returned by the previous callback API /users/auth/on-init must be sent. If Authentication is successful the callback API will send an \&quot;access token\&quot; for subsequent purpose specific API calls. Note only **credential.authCode** or **credential.demographic** should be sent   1. demographic details are only required for  demographic auth as of now.    2. demographic details are required only in MEDIATED cases and if the **auth.mode** so demands. e.g. if **auth.mode** is DEMOGRAPHICS. Usually for demographic authentication, the name, gender and DOB must be exactly as specified in User Account.   3. demographic.identifier is optional, however maybe required if authentication so mandates.    4. credential.authCode is required for other MEDIATED authentication like MOBILE_OTP, AADHAAR_OTP.  
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientAuthConfirmRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * transaction id is not provided or invalid   * token or other auth confirmation details not provided or invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v05UsersAuthConfirmPostWithHttpInfo(String authorization, String X_CM_ID, PatientAuthConfirmRequest patientAuthConfirmRequest) throws ApiException {
        okhttp3.Call localVarCall = v05UsersAuthConfirmPostValidateBeforeCall(authorization, X_CM_ID, patientAuthConfirmRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Confirmation request sending token, otp or other authentication details from HIP/HIU for confirmation (asynchronously)
     * This API is called by HIP/HIUs to confirm authentication of users. The transactionId returned by the previous callback API /users/auth/on-init must be sent. If Authentication is successful the callback API will send an \&quot;access token\&quot; for subsequent purpose specific API calls. Note only **credential.authCode** or **credential.demographic** should be sent   1. demographic details are only required for  demographic auth as of now.    2. demographic details are required only in MEDIATED cases and if the **auth.mode** so demands. e.g. if **auth.mode** is DEMOGRAPHICS. Usually for demographic authentication, the name, gender and DOB must be exactly as specified in User Account.   3. demographic.identifier is optional, however maybe required if authentication so mandates.    4. credential.authCode is required for other MEDIATED authentication like MOBILE_OTP, AADHAAR_OTP.  
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientAuthConfirmRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * transaction id is not provided or invalid   * token or other auth confirmation details not provided or invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05UsersAuthConfirmPostAsync(String authorization, String X_CM_ID, PatientAuthConfirmRequest patientAuthConfirmRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v05UsersAuthConfirmPostValidateBeforeCall(authorization, X_CM_ID, patientAuthConfirmRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v05UsersAuthFetchModesPost
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientAuthModeQueryRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request, required attributes not provided  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05UsersAuthFetchModesPostCall(String authorization, String X_CM_ID, PatientAuthModeQueryRequest patientAuthModeQueryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patientAuthModeQueryRequest;

        // create path and map variables
        String localVarPath = "/v0.5/users/auth/fetch-modes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (X_CM_ID != null) {
            localVarHeaderParams.put("X-CM-ID", localVarApiClient.parameterToString(X_CM_ID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v05UsersAuthFetchModesPostValidateBeforeCall(String authorization, String X_CM_ID, PatientAuthModeQueryRequest patientAuthModeQueryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v05UsersAuthFetchModesPost(Async)");
        }

        // verify the required parameter 'X_CM_ID' is set
        if (X_CM_ID == null) {
            throw new ApiException("Missing the required parameter 'X_CM_ID' when calling v05UsersAuthFetchModesPost(Async)");
        }

        // verify the required parameter 'patientAuthModeQueryRequest' is set
        if (patientAuthModeQueryRequest == null) {
            throw new ApiException("Missing the required parameter 'patientAuthModeQueryRequest' when calling v05UsersAuthFetchModesPost(Async)");
        }

        return v05UsersAuthFetchModesPostCall(authorization, X_CM_ID, patientAuthModeQueryRequest, _callback);

    }

    /**
     * Get a patient&#39;s authentication modes relevant to specified purpose
     * This API is meant for identify supported authentication modes for a patient given a specific purpose 
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientAuthModeQueryRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request, required attributes not provided  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public void v05UsersAuthFetchModesPost(String authorization, String X_CM_ID, PatientAuthModeQueryRequest patientAuthModeQueryRequest) throws ApiException {
        v05UsersAuthFetchModesPostWithHttpInfo(authorization, X_CM_ID, patientAuthModeQueryRequest);
    }

    /**
     * Get a patient&#39;s authentication modes relevant to specified purpose
     * This API is meant for identify supported authentication modes for a patient given a specific purpose 
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientAuthModeQueryRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request, required attributes not provided  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v05UsersAuthFetchModesPostWithHttpInfo(String authorization, String X_CM_ID, PatientAuthModeQueryRequest patientAuthModeQueryRequest) throws ApiException {
        okhttp3.Call localVarCall = v05UsersAuthFetchModesPostValidateBeforeCall(authorization, X_CM_ID, patientAuthModeQueryRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get a patient&#39;s authentication modes relevant to specified purpose (asynchronously)
     * This API is meant for identify supported authentication modes for a patient given a specific purpose 
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientAuthModeQueryRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request, required attributes not provided  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05UsersAuthFetchModesPostAsync(String authorization, String X_CM_ID, PatientAuthModeQueryRequest patientAuthModeQueryRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v05UsersAuthFetchModesPostValidateBeforeCall(authorization, X_CM_ID, patientAuthModeQueryRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v05UsersAuthInitPost
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientAuthInitRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * patient id is not provided  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05UsersAuthInitPostCall(String authorization, String X_CM_ID, PatientAuthInitRequest patientAuthInitRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patientAuthInitRequest;

        // create path and map variables
        String localVarPath = "/v0.5/users/auth/init";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (X_CM_ID != null) {
            localVarHeaderParams.put("X-CM-ID", localVarApiClient.parameterToString(X_CM_ID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v05UsersAuthInitPostValidateBeforeCall(String authorization, String X_CM_ID, PatientAuthInitRequest patientAuthInitRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v05UsersAuthInitPost(Async)");
        }

        // verify the required parameter 'X_CM_ID' is set
        if (X_CM_ID == null) {
            throw new ApiException("Missing the required parameter 'X_CM_ID' when calling v05UsersAuthInitPost(Async)");
        }

        // verify the required parameter 'patientAuthInitRequest' is set
        if (patientAuthInitRequest == null) {
            throw new ApiException("Missing the required parameter 'patientAuthInitRequest' when calling v05UsersAuthInitPost(Async)");
        }

        return v05UsersAuthInitPostCall(authorization, X_CM_ID, patientAuthInitRequest, _callback);

    }

    /**
     * Initialize authentication from HIP
     * This API is called by HIPs to initiate authentication of users. A transactionId is retuned by the corresponding callback API for confirmation of user auth. 
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientAuthInitRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * patient id is not provided  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public void v05UsersAuthInitPost(String authorization, String X_CM_ID, PatientAuthInitRequest patientAuthInitRequest) throws ApiException {
        v05UsersAuthInitPostWithHttpInfo(authorization, X_CM_ID, patientAuthInitRequest);
    }

    /**
     * Initialize authentication from HIP
     * This API is called by HIPs to initiate authentication of users. A transactionId is retuned by the corresponding callback API for confirmation of user auth. 
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientAuthInitRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * patient id is not provided  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v05UsersAuthInitPostWithHttpInfo(String authorization, String X_CM_ID, PatientAuthInitRequest patientAuthInitRequest) throws ApiException {
        okhttp3.Call localVarCall = v05UsersAuthInitPostValidateBeforeCall(authorization, X_CM_ID, patientAuthInitRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Initialize authentication from HIP (asynchronously)
     * This API is called by HIPs to initiate authentication of users. A transactionId is retuned by the corresponding callback API for confirmation of user auth. 
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientAuthInitRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * patient id is not provided  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05UsersAuthInitPostAsync(String authorization, String X_CM_ID, PatientAuthInitRequest patientAuthInitRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v05UsersAuthInitPostValidateBeforeCall(authorization, X_CM_ID, patientAuthInitRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v05UsersAuthOnNotifyPost
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientAuthNotificationAcknowledgement  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * required details not provided   * neither auth nor error specified   </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05UsersAuthOnNotifyPostCall(String authorization, String X_CM_ID, PatientAuthNotificationAcknowledgement patientAuthNotificationAcknowledgement, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patientAuthNotificationAcknowledgement;

        // create path and map variables
        String localVarPath = "/v0.5/users/auth/on-notify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (X_CM_ID != null) {
            localVarHeaderParams.put("X-CM-ID", localVarApiClient.parameterToString(X_CM_ID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v05UsersAuthOnNotifyPostValidateBeforeCall(String authorization, String X_CM_ID, PatientAuthNotificationAcknowledgement patientAuthNotificationAcknowledgement, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v05UsersAuthOnNotifyPost(Async)");
        }

        // verify the required parameter 'X_CM_ID' is set
        if (X_CM_ID == null) {
            throw new ApiException("Missing the required parameter 'X_CM_ID' when calling v05UsersAuthOnNotifyPost(Async)");
        }

        // verify the required parameter 'patientAuthNotificationAcknowledgement' is set
        if (patientAuthNotificationAcknowledgement == null) {
            throw new ApiException("Missing the required parameter 'patientAuthNotificationAcknowledgement' when calling v05UsersAuthOnNotifyPost(Async)");
        }

        return v05UsersAuthOnNotifyPostCall(authorization, X_CM_ID, patientAuthNotificationAcknowledgement, _callback);

    }

    /**
     * callback API by HIU/HIPs as acknowledgement of auth notification
     * This API is called by HIU/HIPs to confirm acknowledgement for receipt of auth notification is case of DIRECT authentication.  
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientAuthNotificationAcknowledgement  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * required details not provided   * neither auth nor error specified   </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public void v05UsersAuthOnNotifyPost(String authorization, String X_CM_ID, PatientAuthNotificationAcknowledgement patientAuthNotificationAcknowledgement) throws ApiException {
        v05UsersAuthOnNotifyPostWithHttpInfo(authorization, X_CM_ID, patientAuthNotificationAcknowledgement);
    }

    /**
     * callback API by HIU/HIPs as acknowledgement of auth notification
     * This API is called by HIU/HIPs to confirm acknowledgement for receipt of auth notification is case of DIRECT authentication.  
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientAuthNotificationAcknowledgement  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * required details not provided   * neither auth nor error specified   </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v05UsersAuthOnNotifyPostWithHttpInfo(String authorization, String X_CM_ID, PatientAuthNotificationAcknowledgement patientAuthNotificationAcknowledgement) throws ApiException {
        okhttp3.Call localVarCall = v05UsersAuthOnNotifyPostValidateBeforeCall(authorization, X_CM_ID, patientAuthNotificationAcknowledgement, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * callback API by HIU/HIPs as acknowledgement of auth notification (asynchronously)
     * This API is called by HIU/HIPs to confirm acknowledgement for receipt of auth notification is case of DIRECT authentication.  
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientAuthNotificationAcknowledgement  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * required details not provided   * neither auth nor error specified   </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05UsersAuthOnNotifyPostAsync(String authorization, String X_CM_ID, PatientAuthNotificationAcknowledgement patientAuthNotificationAcknowledgement, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v05UsersAuthOnNotifyPostValidateBeforeCall(authorization, X_CM_ID, patientAuthNotificationAcknowledgement, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v05WellKnownOpenidConfigurationGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **Causes:**   * Invalid consent request id  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05WellKnownOpenidConfigurationGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.5/.well-known/openid-configuration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v05WellKnownOpenidConfigurationGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return v05WellKnownOpenidConfigurationGetCall(_callback);

    }

    /**
     * Get openid configuration
     * 
     * @return OpenIdConfiguration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **Causes:**   * Invalid consent request id  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public OpenIdConfiguration v05WellKnownOpenidConfigurationGet() throws ApiException {
        ApiResponse<OpenIdConfiguration> localVarResp = v05WellKnownOpenidConfigurationGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get openid configuration
     * 
     * @return ApiResponse&lt;OpenIdConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **Causes:**   * Invalid consent request id  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OpenIdConfiguration> v05WellKnownOpenidConfigurationGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = v05WellKnownOpenidConfigurationGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<OpenIdConfiguration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get openid configuration (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **Causes:**   * Invalid consent request id  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05WellKnownOpenidConfigurationGetAsync(final ApiCallback<OpenIdConfiguration> _callback) throws ApiException {

        okhttp3.Call localVarCall = v05WellKnownOpenidConfigurationGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<OpenIdConfiguration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
