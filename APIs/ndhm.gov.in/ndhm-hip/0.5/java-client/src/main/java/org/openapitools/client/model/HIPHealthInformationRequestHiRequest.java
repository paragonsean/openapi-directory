/*
 * Health Repository Provider Specifications for HIP
 * The following are the specifications for the APIs to be implemented at the Health Repository end if an entity is only serving the role of a HIP. The specs are essentially duplicates from the Gateway and Health Repository, but put together so as to make it clear to *HIPs* which set of APIs they should implement to participate in the network.  
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Consent;
import org.openapitools.client.model.DateRange;
import org.openapitools.client.model.KeyMaterial;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * HIPHealthInformationRequestHiRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:41.924748-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HIPHealthInformationRequestHiRequest {
  public static final String SERIALIZED_NAME_CONSENT = "consent";
  @SerializedName(SERIALIZED_NAME_CONSENT)
  private Consent consent;

  public static final String SERIALIZED_NAME_DATA_PUSH_URL = "dataPushUrl";
  @SerializedName(SERIALIZED_NAME_DATA_PUSH_URL)
  private String dataPushUrl;

  public static final String SERIALIZED_NAME_DATE_RANGE = "dateRange";
  @SerializedName(SERIALIZED_NAME_DATE_RANGE)
  private DateRange dateRange;

  public static final String SERIALIZED_NAME_KEY_MATERIAL = "keyMaterial";
  @SerializedName(SERIALIZED_NAME_KEY_MATERIAL)
  private KeyMaterial keyMaterial;

  public HIPHealthInformationRequestHiRequest() {
  }

  public HIPHealthInformationRequestHiRequest consent(Consent consent) {
    this.consent = consent;
    return this;
  }

  /**
   * Get consent
   * @return consent
   */
  @javax.annotation.Nonnull
  public Consent getConsent() {
    return consent;
  }

  public void setConsent(Consent consent) {
    this.consent = consent;
  }


  public HIPHealthInformationRequestHiRequest dataPushUrl(String dataPushUrl) {
    this.dataPushUrl = dataPushUrl;
    return this;
  }

  /**
   * Get dataPushUrl
   * @return dataPushUrl
   */
  @javax.annotation.Nonnull
  public String getDataPushUrl() {
    return dataPushUrl;
  }

  public void setDataPushUrl(String dataPushUrl) {
    this.dataPushUrl = dataPushUrl;
  }


  public HIPHealthInformationRequestHiRequest dateRange(DateRange dateRange) {
    this.dateRange = dateRange;
    return this;
  }

  /**
   * Get dateRange
   * @return dateRange
   */
  @javax.annotation.Nonnull
  public DateRange getDateRange() {
    return dateRange;
  }

  public void setDateRange(DateRange dateRange) {
    this.dateRange = dateRange;
  }


  public HIPHealthInformationRequestHiRequest keyMaterial(KeyMaterial keyMaterial) {
    this.keyMaterial = keyMaterial;
    return this;
  }

  /**
   * Get keyMaterial
   * @return keyMaterial
   */
  @javax.annotation.Nonnull
  public KeyMaterial getKeyMaterial() {
    return keyMaterial;
  }

  public void setKeyMaterial(KeyMaterial keyMaterial) {
    this.keyMaterial = keyMaterial;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HIPHealthInformationRequestHiRequest hiPHealthInformationRequestHiRequest = (HIPHealthInformationRequestHiRequest) o;
    return Objects.equals(this.consent, hiPHealthInformationRequestHiRequest.consent) &&
        Objects.equals(this.dataPushUrl, hiPHealthInformationRequestHiRequest.dataPushUrl) &&
        Objects.equals(this.dateRange, hiPHealthInformationRequestHiRequest.dateRange) &&
        Objects.equals(this.keyMaterial, hiPHealthInformationRequestHiRequest.keyMaterial);
  }

  @Override
  public int hashCode() {
    return Objects.hash(consent, dataPushUrl, dateRange, keyMaterial);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HIPHealthInformationRequestHiRequest {\n");
    sb.append("    consent: ").append(toIndentedString(consent)).append("\n");
    sb.append("    dataPushUrl: ").append(toIndentedString(dataPushUrl)).append("\n");
    sb.append("    dateRange: ").append(toIndentedString(dateRange)).append("\n");
    sb.append("    keyMaterial: ").append(toIndentedString(keyMaterial)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("consent");
    openapiFields.add("dataPushUrl");
    openapiFields.add("dateRange");
    openapiFields.add("keyMaterial");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("consent");
    openapiRequiredFields.add("dataPushUrl");
    openapiRequiredFields.add("dateRange");
    openapiRequiredFields.add("keyMaterial");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HIPHealthInformationRequestHiRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HIPHealthInformationRequestHiRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HIPHealthInformationRequestHiRequest is not found in the empty JSON string", HIPHealthInformationRequestHiRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HIPHealthInformationRequestHiRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HIPHealthInformationRequestHiRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : HIPHealthInformationRequestHiRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `consent`
      Consent.validateJsonElement(jsonObj.get("consent"));
      if (!jsonObj.get("dataPushUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataPushUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataPushUrl").toString()));
      }
      // validate the required field `dateRange`
      DateRange.validateJsonElement(jsonObj.get("dateRange"));
      // validate the required field `keyMaterial`
      KeyMaterial.validateJsonElement(jsonObj.get("keyMaterial"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HIPHealthInformationRequestHiRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HIPHealthInformationRequestHiRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HIPHealthInformationRequestHiRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HIPHealthInformationRequestHiRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<HIPHealthInformationRequestHiRequest>() {
           @Override
           public void write(JsonWriter out, HIPHealthInformationRequestHiRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HIPHealthInformationRequestHiRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HIPHealthInformationRequestHiRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HIPHealthInformationRequestHiRequest
   * @throws IOException if the JSON string is invalid with respect to HIPHealthInformationRequestHiRequest
   */
  public static HIPHealthInformationRequestHiRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HIPHealthInformationRequestHiRequest.class);
  }

  /**
   * Convert an instance of HIPHealthInformationRequestHiRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

