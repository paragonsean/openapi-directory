/*
 * Health Repository Provider Specifications for HIP
 * The following are the specifications for the APIs to be implemented at the Health Repository end if an entity is only serving the role of a HIP. The specs are essentially duplicates from the Gateway and Health Repository, but put together so as to make it clear to *HIPs* which set of APIs they should implement to participate in the network.  
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.LinkConfirmationRequest;
import org.openapitools.client.model.PatientCareContextLinkResponse;
import org.openapitools.client.model.PatientLinkReferenceRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LinkApi
 */
@Disabled
public class LinkApiTest {

    private final LinkApi api = new LinkApi();

    /**
     * Token submission by Consent Manager for link confirmation
     *
     * API to submit the token that was sent by HIP during the link request.  
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v05LinksLinkConfirmPostTest() throws ApiException {
        String authorization = null;
        String X_HIP_ID = null;
        LinkConfirmationRequest linkConfirmationRequest = null;
        api.v05LinksLinkConfirmPost(authorization, X_HIP_ID, linkConfirmationRequest);
        // TODO: test validations
    }

    /**
     * Link patient&#39;s care contexts
     *
     * Request from Gateway to links care contexts associated with only one patient   1. **Validate account reference number and care context reference number**   2. **Validate transactionId in the request with discovery request entry to check whether there was a discovery       and were these care contexts discovered or not for a given patient**   3. **Before eventual link confirmation, HIP needs to authenticate the request with the patient(eg: OTP verification)**   4. **HIP should communicate the mode of authentication of a successful request to Consent Manager** 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v05LinksLinkInitPostTest() throws ApiException {
        String authorization = null;
        String X_HIP_ID = null;
        PatientLinkReferenceRequest patientLinkReferenceRequest = null;
        api.v05LinksLinkInitPost(authorization, X_HIP_ID, patientLinkReferenceRequest);
        // TODO: test validations
    }

    /**
     * callback API for HIP initiated patient linking /link/add-context
     *
     * If the accessToken is valid for purpose of linking, and specified details provided, CM will send \&quot;acknoweldgement.status\&quot; as SUCCESS. If any error occcurred, for example invalid token, or other required patient or care-context information not provided, then \&quot;error\&quot; attribute conveys so.    1. **accessToken must be valid and must be for the purpose of linking** 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v05LinksLinkOnAddContextsPostTest() throws ApiException {
        String authorization = null;
        String X_HIP_ID = null;
        PatientCareContextLinkResponse patientCareContextLinkResponse = null;
        api.v05LinksLinkOnAddContextsPost(authorization, X_HIP_ID, patientCareContextLinkResponse);
        // TODO: test validations
    }

}
