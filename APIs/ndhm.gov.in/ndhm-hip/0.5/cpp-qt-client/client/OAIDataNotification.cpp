/**
 * Health Repository Provider Specifications for HIP
 * The following are the specifications for the APIs to be implemented at the Health Repository end if an entity is only serving the role of a HIP. The specs are essentially duplicates from the Gateway and Health Repository, but put together so as to make it clear to *HIPs* which set of APIs they should implement to participate in the network.  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataNotification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataNotification::OAIDataNotification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataNotification::OAIDataNotification() {
    this->initializeModel();
}

OAIDataNotification::~OAIDataNotification() {}

void OAIDataNotification::initializeModel() {

    m_entries_isSet = false;
    m_entries_isValid = false;

    m_key_material_isSet = false;
    m_key_material_isValid = false;

    m_page_count_isSet = false;
    m_page_count_isValid = false;

    m_page_number_isSet = false;
    m_page_number_isValid = false;

    m_transaction_id_isSet = false;
    m_transaction_id_isValid = false;
}

void OAIDataNotification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataNotification::fromJsonObject(QJsonObject json) {

    m_entries_isValid = ::OpenAPI::fromJsonValue(m_entries, json[QString("entries")]);
    m_entries_isSet = !json[QString("entries")].isNull() && m_entries_isValid;

    m_key_material_isValid = ::OpenAPI::fromJsonValue(m_key_material, json[QString("keyMaterial")]);
    m_key_material_isSet = !json[QString("keyMaterial")].isNull() && m_key_material_isValid;

    m_page_count_isValid = ::OpenAPI::fromJsonValue(m_page_count, json[QString("pageCount")]);
    m_page_count_isSet = !json[QString("pageCount")].isNull() && m_page_count_isValid;

    m_page_number_isValid = ::OpenAPI::fromJsonValue(m_page_number, json[QString("pageNumber")]);
    m_page_number_isSet = !json[QString("pageNumber")].isNull() && m_page_number_isValid;

    m_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_transaction_id, json[QString("transactionId")]);
    m_transaction_id_isSet = !json[QString("transactionId")].isNull() && m_transaction_id_isValid;
}

QString OAIDataNotification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataNotification::asJsonObject() const {
    QJsonObject obj;
    if (m_entries.size() > 0) {
        obj.insert(QString("entries"), ::OpenAPI::toJsonValue(m_entries));
    }
    if (m_key_material.isSet()) {
        obj.insert(QString("keyMaterial"), ::OpenAPI::toJsonValue(m_key_material));
    }
    if (m_page_count_isSet) {
        obj.insert(QString("pageCount"), ::OpenAPI::toJsonValue(m_page_count));
    }
    if (m_page_number_isSet) {
        obj.insert(QString("pageNumber"), ::OpenAPI::toJsonValue(m_page_number));
    }
    if (m_transaction_id_isSet) {
        obj.insert(QString("transactionId"), ::OpenAPI::toJsonValue(m_transaction_id));
    }
    return obj;
}

QList<OAIDataNotification_entries_inner> OAIDataNotification::getEntries() const {
    return m_entries;
}
void OAIDataNotification::setEntries(const QList<OAIDataNotification_entries_inner> &entries) {
    m_entries = entries;
    m_entries_isSet = true;
}

bool OAIDataNotification::is_entries_Set() const{
    return m_entries_isSet;
}

bool OAIDataNotification::is_entries_Valid() const{
    return m_entries_isValid;
}

OAIKeyMaterial OAIDataNotification::getKeyMaterial() const {
    return m_key_material;
}
void OAIDataNotification::setKeyMaterial(const OAIKeyMaterial &key_material) {
    m_key_material = key_material;
    m_key_material_isSet = true;
}

bool OAIDataNotification::is_key_material_Set() const{
    return m_key_material_isSet;
}

bool OAIDataNotification::is_key_material_Valid() const{
    return m_key_material_isValid;
}

qint32 OAIDataNotification::getPageCount() const {
    return m_page_count;
}
void OAIDataNotification::setPageCount(const qint32 &page_count) {
    m_page_count = page_count;
    m_page_count_isSet = true;
}

bool OAIDataNotification::is_page_count_Set() const{
    return m_page_count_isSet;
}

bool OAIDataNotification::is_page_count_Valid() const{
    return m_page_count_isValid;
}

qint32 OAIDataNotification::getPageNumber() const {
    return m_page_number;
}
void OAIDataNotification::setPageNumber(const qint32 &page_number) {
    m_page_number = page_number;
    m_page_number_isSet = true;
}

bool OAIDataNotification::is_page_number_Set() const{
    return m_page_number_isSet;
}

bool OAIDataNotification::is_page_number_Valid() const{
    return m_page_number_isValid;
}

QString OAIDataNotification::getTransactionId() const {
    return m_transaction_id;
}
void OAIDataNotification::setTransactionId(const QString &transaction_id) {
    m_transaction_id = transaction_id;
    m_transaction_id_isSet = true;
}

bool OAIDataNotification::is_transaction_id_Set() const{
    return m_transaction_id_isSet;
}

bool OAIDataNotification::is_transaction_id_Valid() const{
    return m_transaction_id_isValid;
}

bool OAIDataNotification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_entries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_material.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataNotification::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_entries_isValid && m_key_material_isValid && m_page_count_isValid && m_page_number_isValid && m_transaction_id_isValid && true;
}

} // namespace OpenAPI
