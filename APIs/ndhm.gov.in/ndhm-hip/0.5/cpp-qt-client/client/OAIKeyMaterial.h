/**
 * Health Repository Provider Specifications for HIP
 * The following are the specifications for the APIs to be implemented at the Health Repository end if an entity is only serving the role of a HIP. The specs are essentially duplicates from the Gateway and Health Repository, but put together so as to make it clear to *HIPs* which set of APIs they should implement to participate in the network.  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIKeyMaterial.h
 *
 * 
 */

#ifndef OAIKeyMaterial_H
#define OAIKeyMaterial_H

#include <QJsonObject>

#include "OAIKeyObject.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIKeyObject;

class OAIKeyMaterial : public OAIObject {
public:
    OAIKeyMaterial();
    OAIKeyMaterial(QString json);
    ~OAIKeyMaterial() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCryptoAlg() const;
    void setCryptoAlg(const QString &crypto_alg);
    bool is_crypto_alg_Set() const;
    bool is_crypto_alg_Valid() const;

    QString getCurve() const;
    void setCurve(const QString &curve);
    bool is_curve_Set() const;
    bool is_curve_Valid() const;

    OAIKeyObject getDhPublicKey() const;
    void setDhPublicKey(const OAIKeyObject &dh_public_key);
    bool is_dh_public_key_Set() const;
    bool is_dh_public_key_Valid() const;

    QString getNonce() const;
    void setNonce(const QString &nonce);
    bool is_nonce_Set() const;
    bool is_nonce_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_crypto_alg;
    bool m_crypto_alg_isSet;
    bool m_crypto_alg_isValid;

    QString m_curve;
    bool m_curve_isSet;
    bool m_curve_isValid;

    OAIKeyObject m_dh_public_key;
    bool m_dh_public_key_isSet;
    bool m_dh_public_key_isValid;

    QString m_nonce;
    bool m_nonce_isSet;
    bool m_nonce_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIKeyMaterial)

#endif // OAIKeyMaterial_H
