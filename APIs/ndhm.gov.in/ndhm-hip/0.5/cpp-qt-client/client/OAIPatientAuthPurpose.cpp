/**
 * Health Repository Provider Specifications for HIP
 * The following are the specifications for the APIs to be implemented at the Health Repository end if an entity is only serving the role of a HIP. The specs are essentially duplicates from the Gateway and Health Repository, but put together so as to make it clear to *HIPs* which set of APIs they should implement to participate in the network.  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPatientAuthPurpose.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPatientAuthPurpose::OAIPatientAuthPurpose(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPatientAuthPurpose::OAIPatientAuthPurpose() {
    this->initializeModel();
}

OAIPatientAuthPurpose::~OAIPatientAuthPurpose() {}

void OAIPatientAuthPurpose::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIPatientAuthPurpose::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIPatientAuthPurpose::fromJson(QString jsonString) {
    
    if ( jsonString.compare("LINK", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPatientAuthPurpose::LINK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("KYC", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPatientAuthPurpose::KYC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("KYC_AND_LINK", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPatientAuthPurpose::KYC_AND_LINK;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIPatientAuthPurpose::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIPatientAuthPurpose::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIPatientAuthPurpose::LINK:
            val = "LINK";
            break;
        case eOAIPatientAuthPurpose::KYC:
            val = "KYC";
            break;
        case eOAIPatientAuthPurpose::KYC_AND_LINK:
            val = "KYC_AND_LINK";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIPatientAuthPurpose::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIPatientAuthPurpose::eOAIPatientAuthPurpose OAIPatientAuthPurpose::getValue() const {
    return m_value;
}

void OAIPatientAuthPurpose::setValue(const OAIPatientAuthPurpose::eOAIPatientAuthPurpose& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIPatientAuthPurpose::isSet() const {
    
    return m_value_isSet;
}

bool OAIPatientAuthPurpose::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
