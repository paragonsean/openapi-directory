/**
 * Health Repository Provider Specifications for HIP
 * The following are the specifications for the APIs to be implemented at the Health Repository end if an entity is only serving the role of a HIP. The specs are essentially duplicates from the Gateway and Health Repository, but put together so as to make it clear to *HIPs* which set of APIs they should implement to participate in the network.  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPatientAddress.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPatientAddress::OAIPatientAddress(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPatientAddress::OAIPatientAddress() {
    this->initializeModel();
}

OAIPatientAddress::~OAIPatientAddress() {}

void OAIPatientAddress::initializeModel() {

    m_district_isSet = false;
    m_district_isValid = false;

    m_line_isSet = false;
    m_line_isValid = false;

    m_pincode_isSet = false;
    m_pincode_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIPatientAddress::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPatientAddress::fromJsonObject(QJsonObject json) {

    m_district_isValid = ::OpenAPI::fromJsonValue(m_district, json[QString("district")]);
    m_district_isSet = !json[QString("district")].isNull() && m_district_isValid;

    m_line_isValid = ::OpenAPI::fromJsonValue(m_line, json[QString("line")]);
    m_line_isSet = !json[QString("line")].isNull() && m_line_isValid;

    m_pincode_isValid = ::OpenAPI::fromJsonValue(m_pincode, json[QString("pincode")]);
    m_pincode_isSet = !json[QString("pincode")].isNull() && m_pincode_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIPatientAddress::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPatientAddress::asJsonObject() const {
    QJsonObject obj;
    if (m_district_isSet) {
        obj.insert(QString("district"), ::OpenAPI::toJsonValue(m_district));
    }
    if (m_line_isSet) {
        obj.insert(QString("line"), ::OpenAPI::toJsonValue(m_line));
    }
    if (m_pincode_isSet) {
        obj.insert(QString("pincode"), ::OpenAPI::toJsonValue(m_pincode));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIPatientAddress::getDistrict() const {
    return m_district;
}
void OAIPatientAddress::setDistrict(const QString &district) {
    m_district = district;
    m_district_isSet = true;
}

bool OAIPatientAddress::is_district_Set() const{
    return m_district_isSet;
}

bool OAIPatientAddress::is_district_Valid() const{
    return m_district_isValid;
}

QString OAIPatientAddress::getLine() const {
    return m_line;
}
void OAIPatientAddress::setLine(const QString &line) {
    m_line = line;
    m_line_isSet = true;
}

bool OAIPatientAddress::is_line_Set() const{
    return m_line_isSet;
}

bool OAIPatientAddress::is_line_Valid() const{
    return m_line_isValid;
}

QString OAIPatientAddress::getPincode() const {
    return m_pincode;
}
void OAIPatientAddress::setPincode(const QString &pincode) {
    m_pincode = pincode;
    m_pincode_isSet = true;
}

bool OAIPatientAddress::is_pincode_Set() const{
    return m_pincode_isSet;
}

bool OAIPatientAddress::is_pincode_Valid() const{
    return m_pincode_isValid;
}

QString OAIPatientAddress::getState() const {
    return m_state;
}
void OAIPatientAddress::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIPatientAddress::is_state_Set() const{
    return m_state_isSet;
}

bool OAIPatientAddress::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIPatientAddress::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_district_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pincode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPatientAddress::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
