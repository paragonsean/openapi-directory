/**
 * Health Repository Provider Specifications for HIP
 * The following are the specifications for the APIs to be implemented at the Health Repository end if an entity is only serving the role of a HIP. The specs are essentially duplicates from the Gateway and Health Repository, but put together so as to make it clear to *HIPs* which set of APIs they should implement to participate in the network.  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPatientRepresentation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPatientRepresentation::OAIPatientRepresentation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPatientRepresentation::OAIPatientRepresentation() {
    this->initializeModel();
}

OAIPatientRepresentation::~OAIPatientRepresentation() {}

void OAIPatientRepresentation::initializeModel() {

    m_care_contexts_isSet = false;
    m_care_contexts_isValid = false;

    m_display_isSet = false;
    m_display_isValid = false;

    m_matched_by_isSet = false;
    m_matched_by_isValid = false;

    m_reference_number_isSet = false;
    m_reference_number_isValid = false;
}

void OAIPatientRepresentation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPatientRepresentation::fromJsonObject(QJsonObject json) {

    m_care_contexts_isValid = ::OpenAPI::fromJsonValue(m_care_contexts, json[QString("careContexts")]);
    m_care_contexts_isSet = !json[QString("careContexts")].isNull() && m_care_contexts_isValid;

    m_display_isValid = ::OpenAPI::fromJsonValue(m_display, json[QString("display")]);
    m_display_isSet = !json[QString("display")].isNull() && m_display_isValid;

    m_matched_by_isValid = ::OpenAPI::fromJsonValue(m_matched_by, json[QString("matchedBy")]);
    m_matched_by_isSet = !json[QString("matchedBy")].isNull() && m_matched_by_isValid;

    m_reference_number_isValid = ::OpenAPI::fromJsonValue(m_reference_number, json[QString("referenceNumber")]);
    m_reference_number_isSet = !json[QString("referenceNumber")].isNull() && m_reference_number_isValid;
}

QString OAIPatientRepresentation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPatientRepresentation::asJsonObject() const {
    QJsonObject obj;
    if (m_care_contexts.size() > 0) {
        obj.insert(QString("careContexts"), ::OpenAPI::toJsonValue(m_care_contexts));
    }
    if (m_display_isSet) {
        obj.insert(QString("display"), ::OpenAPI::toJsonValue(m_display));
    }
    if (m_matched_by.size() > 0) {
        obj.insert(QString("matchedBy"), ::OpenAPI::toJsonValue(m_matched_by));
    }
    if (m_reference_number_isSet) {
        obj.insert(QString("referenceNumber"), ::OpenAPI::toJsonValue(m_reference_number));
    }
    return obj;
}

QList<OAICareContextRepresentation> OAIPatientRepresentation::getCareContexts() const {
    return m_care_contexts;
}
void OAIPatientRepresentation::setCareContexts(const QList<OAICareContextRepresentation> &care_contexts) {
    m_care_contexts = care_contexts;
    m_care_contexts_isSet = true;
}

bool OAIPatientRepresentation::is_care_contexts_Set() const{
    return m_care_contexts_isSet;
}

bool OAIPatientRepresentation::is_care_contexts_Valid() const{
    return m_care_contexts_isValid;
}

QString OAIPatientRepresentation::getDisplay() const {
    return m_display;
}
void OAIPatientRepresentation::setDisplay(const QString &display) {
    m_display = display;
    m_display_isSet = true;
}

bool OAIPatientRepresentation::is_display_Set() const{
    return m_display_isSet;
}

bool OAIPatientRepresentation::is_display_Valid() const{
    return m_display_isValid;
}

QList<OAIIdentifierType> OAIPatientRepresentation::getMatchedBy() const {
    return m_matched_by;
}
void OAIPatientRepresentation::setMatchedBy(const QList<OAIIdentifierType> &matched_by) {
    m_matched_by = matched_by;
    m_matched_by_isSet = true;
}

bool OAIPatientRepresentation::is_matched_by_Set() const{
    return m_matched_by_isSet;
}

bool OAIPatientRepresentation::is_matched_by_Valid() const{
    return m_matched_by_isValid;
}

QString OAIPatientRepresentation::getReferenceNumber() const {
    return m_reference_number;
}
void OAIPatientRepresentation::setReferenceNumber(const QString &reference_number) {
    m_reference_number = reference_number;
    m_reference_number_isSet = true;
}

bool OAIPatientRepresentation::is_reference_number_Set() const{
    return m_reference_number_isSet;
}

bool OAIPatientRepresentation::is_reference_number_Valid() const{
    return m_reference_number_isValid;
}

bool OAIPatientRepresentation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_care_contexts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_matched_by.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPatientRepresentation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_care_contexts_isValid && m_display_isValid && m_reference_number_isValid && true;
}

} // namespace OpenAPI
