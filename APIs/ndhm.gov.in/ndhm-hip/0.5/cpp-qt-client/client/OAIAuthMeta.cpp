/**
 * Health Repository Provider Specifications for HIP
 * The following are the specifications for the APIs to be implemented at the Health Repository end if an entity is only serving the role of a HIP. The specs are essentially duplicates from the Gateway and Health Repository, but put together so as to make it clear to *HIPs* which set of APIs they should implement to participate in the network.  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuthMeta.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuthMeta::OAIAuthMeta(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuthMeta::OAIAuthMeta() {
    this->initializeModel();
}

OAIAuthMeta::~OAIAuthMeta() {}

void OAIAuthMeta::initializeModel() {

    m_expiry_isSet = false;
    m_expiry_isValid = false;

    m_hint_isSet = false;
    m_hint_isValid = false;
}

void OAIAuthMeta::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuthMeta::fromJsonObject(QJsonObject json) {

    m_expiry_isValid = ::OpenAPI::fromJsonValue(m_expiry, json[QString("expiry")]);
    m_expiry_isSet = !json[QString("expiry")].isNull() && m_expiry_isValid;

    m_hint_isValid = ::OpenAPI::fromJsonValue(m_hint, json[QString("hint")]);
    m_hint_isSet = !json[QString("hint")].isNull() && m_hint_isValid;
}

QString OAIAuthMeta::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuthMeta::asJsonObject() const {
    QJsonObject obj;
    if (m_expiry_isSet) {
        obj.insert(QString("expiry"), ::OpenAPI::toJsonValue(m_expiry));
    }
    if (m_hint_isSet) {
        obj.insert(QString("hint"), ::OpenAPI::toJsonValue(m_hint));
    }
    return obj;
}

QString OAIAuthMeta::getExpiry() const {
    return m_expiry;
}
void OAIAuthMeta::setExpiry(const QString &expiry) {
    m_expiry = expiry;
    m_expiry_isSet = true;
}

bool OAIAuthMeta::is_expiry_Set() const{
    return m_expiry_isSet;
}

bool OAIAuthMeta::is_expiry_Valid() const{
    return m_expiry_isValid;
}

QString OAIAuthMeta::getHint() const {
    return m_hint;
}
void OAIAuthMeta::setHint(const QString &hint) {
    m_hint = hint;
    m_hint_isSet = true;
}

bool OAIAuthMeta::is_hint_Set() const{
    return m_hint_isSet;
}

bool OAIAuthMeta::is_hint_Valid() const{
    return m_hint_isValid;
}

bool OAIAuthMeta::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expiry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hint_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuthMeta::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
