/**
 * Health Repository Provider Specifications for HIP
 * The following are the specifications for the APIs to be implemented at the Health Repository end if an entity is only serving the role of a HIP. The specs are essentially duplicates from the Gateway and Health Repository, but put together so as to make it clear to *HIPs* which set of APIs they should implement to participate in the network.  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEntryContent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEntryContent::OAIEntryContent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEntryContent::OAIEntryContent() {
    this->initializeModel();
}

OAIEntryContent::~OAIEntryContent() {}

void OAIEntryContent::initializeModel() {

    m_care_context_reference_isSet = false;
    m_care_context_reference_isValid = false;

    m_checksum_isSet = false;
    m_checksum_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_media_isSet = false;
    m_media_isValid = false;
}

void OAIEntryContent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEntryContent::fromJsonObject(QJsonObject json) {

    m_care_context_reference_isValid = ::OpenAPI::fromJsonValue(m_care_context_reference, json[QString("careContextReference")]);
    m_care_context_reference_isSet = !json[QString("careContextReference")].isNull() && m_care_context_reference_isValid;

    m_checksum_isValid = ::OpenAPI::fromJsonValue(m_checksum, json[QString("checksum")]);
    m_checksum_isSet = !json[QString("checksum")].isNull() && m_checksum_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_media_isValid = ::OpenAPI::fromJsonValue(m_media, json[QString("media")]);
    m_media_isSet = !json[QString("media")].isNull() && m_media_isValid;
}

QString OAIEntryContent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEntryContent::asJsonObject() const {
    QJsonObject obj;
    if (m_care_context_reference_isSet) {
        obj.insert(QString("careContextReference"), ::OpenAPI::toJsonValue(m_care_context_reference));
    }
    if (m_checksum_isSet) {
        obj.insert(QString("checksum"), ::OpenAPI::toJsonValue(m_checksum));
    }
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_media_isSet) {
        obj.insert(QString("media"), ::OpenAPI::toJsonValue(m_media));
    }
    return obj;
}

QString OAIEntryContent::getCareContextReference() const {
    return m_care_context_reference;
}
void OAIEntryContent::setCareContextReference(const QString &care_context_reference) {
    m_care_context_reference = care_context_reference;
    m_care_context_reference_isSet = true;
}

bool OAIEntryContent::is_care_context_reference_Set() const{
    return m_care_context_reference_isSet;
}

bool OAIEntryContent::is_care_context_reference_Valid() const{
    return m_care_context_reference_isValid;
}

QString OAIEntryContent::getChecksum() const {
    return m_checksum;
}
void OAIEntryContent::setChecksum(const QString &checksum) {
    m_checksum = checksum;
    m_checksum_isSet = true;
}

bool OAIEntryContent::is_checksum_Set() const{
    return m_checksum_isSet;
}

bool OAIEntryContent::is_checksum_Valid() const{
    return m_checksum_isValid;
}

QString OAIEntryContent::getContent() const {
    return m_content;
}
void OAIEntryContent::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIEntryContent::is_content_Set() const{
    return m_content_isSet;
}

bool OAIEntryContent::is_content_Valid() const{
    return m_content_isValid;
}

QString OAIEntryContent::getMedia() const {
    return m_media;
}
void OAIEntryContent::setMedia(const QString &media) {
    m_media = media;
    m_media_isSet = true;
}

bool OAIEntryContent::is_media_Set() const{
    return m_media_isSet;
}

bool OAIEntryContent::is_media_Valid() const{
    return m_media_isValid;
}

bool OAIEntryContent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_care_context_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_checksum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEntryContent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_care_context_reference_isValid && m_checksum_isValid && m_content_isValid && m_media_isValid && true;
}

} // namespace OpenAPI
