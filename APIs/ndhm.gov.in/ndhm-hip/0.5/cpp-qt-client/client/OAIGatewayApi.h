/**
 * Health Repository Provider Specifications for HIP
 * The following are the specifications for the APIs to be implemented at the Health Repository end if an entity is only serving the role of a HIP. The specs are essentially duplicates from the Gateway and Health Repository, but put together so as to make it clear to *HIPs* which set of APIs they should implement to participate in the network.  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGatewayApi_H
#define OAI_OAIGatewayApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICerts.h"
#include "OAIErrorResponse.h"
#include "OAIHIPConsentNotificationResponse.h"
#include "OAIHIPHealthInformationRequestAcknowledgement.h"
#include "OAIHealthInformationNotification.h"
#include "OAIOpenIdConfiguration.h"
#include "OAIPatientAuthConfirmRequest.h"
#include "OAIPatientAuthInitRequest.h"
#include "OAIPatientAuthModeQueryRequest.h"
#include "OAIPatientAuthNotificationAcknowledgement.h"
#include "OAIPatientCareContextLinkRequest.h"
#include "OAIPatientDiscoveryResult.h"
#include "OAIPatientLinkReferenceResult.h"
#include "OAIPatientLinkResult.h"
#include "OAIPatientSMSNotifcationRequest.h"
#include "OAISessionRequest.h"
#include "OAISessionResponse.h"
#include "OAIShareProfileResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIGatewayApi : public QObject {
    Q_OBJECT

public:
    OAIGatewayApi(const int timeOut = 0);
    ~OAIGatewayApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_cm_id QString [required]
    * @param[in]  oai_patient_discovery_result OAIPatientDiscoveryResult [required]
    */
    virtual void v05CareContextsOnDiscoverPost(const QString &authorization, const QString &x_cm_id, const OAIPatientDiscoveryResult &oai_patient_discovery_result);


    virtual void v05CertsGet();

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_cm_id QString [required]
    * @param[in]  oaihip_consent_notification_response OAIHIPConsentNotificationResponse [required]
    */
    virtual void v05ConsentsHipOnNotifyPost(const QString &authorization, const QString &x_cm_id, const OAIHIPConsentNotificationResponse &oaihip_consent_notification_response);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_cm_id QString [required]
    * @param[in]  oaihip_health_information_request_acknowledgement OAIHIPHealthInformationRequestAcknowledgement [required]
    */
    virtual void v05HealthInformationHipOnRequestPost(const QString &authorization, const QString &x_cm_id, const OAIHIPHealthInformationRequestAcknowledgement &oaihip_health_information_request_acknowledgement);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_cm_id QString [required]
    * @param[in]  oai_health_information_notification OAIHealthInformationNotification [required]
    */
    virtual void v05HealthInformationNotifyPost(const QString &authorization, const QString &x_cm_id, const OAIHealthInformationNotification &oai_health_information_notification);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_cm_id QString [required]
    * @param[in]  oai_patient_care_context_link_request OAIPatientCareContextLinkRequest [required]
    */
    virtual void v05LinksLinkAddContextsPost(const QString &authorization, const QString &x_cm_id, const OAIPatientCareContextLinkRequest &oai_patient_care_context_link_request);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_cm_id QString [required]
    * @param[in]  oai_patient_link_result OAIPatientLinkResult [required]
    */
    virtual void v05LinksLinkOnConfirmPost(const QString &authorization, const QString &x_cm_id, const OAIPatientLinkResult &oai_patient_link_result);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_cm_id QString [required]
    * @param[in]  oai_patient_link_reference_result OAIPatientLinkReferenceResult [required]
    */
    virtual void v05LinksLinkOnInitPost(const QString &authorization, const QString &x_cm_id, const OAIPatientLinkReferenceResult &oai_patient_link_reference_result);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_cm_id QString [required]
    * @param[in]  oai_share_profile_result OAIShareProfileResult [required]
    */
    virtual void v05PatientsProfileOnSharePost(const QString &authorization, const QString &x_cm_id, const OAIShareProfileResult &oai_share_profile_result);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_cm_id QString [required]
    * @param[in]  oai_patient_sms_notifcation_request OAIPatientSMSNotifcationRequest [required]
    */
    virtual void v05PatientsSmsNotifyPost(const QString &authorization, const QString &x_cm_id, const OAIPatientSMSNotifcationRequest &oai_patient_sms_notifcation_request);

    /**
    * @param[in]  oai_session_request OAISessionRequest [required]
    */
    virtual void v05SessionsPost(const OAISessionRequest &oai_session_request);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_cm_id QString [required]
    * @param[in]  oai_patient_auth_confirm_request OAIPatientAuthConfirmRequest [required]
    */
    virtual void v05UsersAuthConfirmPost(const QString &authorization, const QString &x_cm_id, const OAIPatientAuthConfirmRequest &oai_patient_auth_confirm_request);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_cm_id QString [required]
    * @param[in]  oai_patient_auth_mode_query_request OAIPatientAuthModeQueryRequest [required]
    */
    virtual void v05UsersAuthFetchModesPost(const QString &authorization, const QString &x_cm_id, const OAIPatientAuthModeQueryRequest &oai_patient_auth_mode_query_request);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_cm_id QString [required]
    * @param[in]  oai_patient_auth_init_request OAIPatientAuthInitRequest [required]
    */
    virtual void v05UsersAuthInitPost(const QString &authorization, const QString &x_cm_id, const OAIPatientAuthInitRequest &oai_patient_auth_init_request);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_cm_id QString [required]
    * @param[in]  oai_patient_auth_notification_acknowledgement OAIPatientAuthNotificationAcknowledgement [required]
    */
    virtual void v05UsersAuthOnNotifyPost(const QString &authorization, const QString &x_cm_id, const OAIPatientAuthNotificationAcknowledgement &oai_patient_auth_notification_acknowledgement);


    virtual void v05WellKnownOpenidConfigurationGet();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void v05CareContextsOnDiscoverPostCallback(OAIHttpRequestWorker *worker);
    void v05CertsGetCallback(OAIHttpRequestWorker *worker);
    void v05ConsentsHipOnNotifyPostCallback(OAIHttpRequestWorker *worker);
    void v05HealthInformationHipOnRequestPostCallback(OAIHttpRequestWorker *worker);
    void v05HealthInformationNotifyPostCallback(OAIHttpRequestWorker *worker);
    void v05LinksLinkAddContextsPostCallback(OAIHttpRequestWorker *worker);
    void v05LinksLinkOnConfirmPostCallback(OAIHttpRequestWorker *worker);
    void v05LinksLinkOnInitPostCallback(OAIHttpRequestWorker *worker);
    void v05PatientsProfileOnSharePostCallback(OAIHttpRequestWorker *worker);
    void v05PatientsSmsNotifyPostCallback(OAIHttpRequestWorker *worker);
    void v05SessionsPostCallback(OAIHttpRequestWorker *worker);
    void v05UsersAuthConfirmPostCallback(OAIHttpRequestWorker *worker);
    void v05UsersAuthFetchModesPostCallback(OAIHttpRequestWorker *worker);
    void v05UsersAuthInitPostCallback(OAIHttpRequestWorker *worker);
    void v05UsersAuthOnNotifyPostCallback(OAIHttpRequestWorker *worker);
    void v05WellKnownOpenidConfigurationGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void v05CareContextsOnDiscoverPostSignal();
    void v05CertsGetSignal(OAICerts summary);
    void v05ConsentsHipOnNotifyPostSignal();
    void v05HealthInformationHipOnRequestPostSignal();
    void v05HealthInformationNotifyPostSignal();
    void v05LinksLinkAddContextsPostSignal();
    void v05LinksLinkOnConfirmPostSignal();
    void v05LinksLinkOnInitPostSignal();
    void v05PatientsProfileOnSharePostSignal();
    void v05PatientsSmsNotifyPostSignal();
    void v05SessionsPostSignal(OAISessionResponse summary);
    void v05UsersAuthConfirmPostSignal();
    void v05UsersAuthFetchModesPostSignal();
    void v05UsersAuthInitPostSignal();
    void v05UsersAuthOnNotifyPostSignal();
    void v05WellKnownOpenidConfigurationGetSignal(OAIOpenIdConfiguration summary);


    void v05CareContextsOnDiscoverPostSignalFull(OAIHttpRequestWorker *worker);
    void v05CertsGetSignalFull(OAIHttpRequestWorker *worker, OAICerts summary);
    void v05ConsentsHipOnNotifyPostSignalFull(OAIHttpRequestWorker *worker);
    void v05HealthInformationHipOnRequestPostSignalFull(OAIHttpRequestWorker *worker);
    void v05HealthInformationNotifyPostSignalFull(OAIHttpRequestWorker *worker);
    void v05LinksLinkAddContextsPostSignalFull(OAIHttpRequestWorker *worker);
    void v05LinksLinkOnConfirmPostSignalFull(OAIHttpRequestWorker *worker);
    void v05LinksLinkOnInitPostSignalFull(OAIHttpRequestWorker *worker);
    void v05PatientsProfileOnSharePostSignalFull(OAIHttpRequestWorker *worker);
    void v05PatientsSmsNotifyPostSignalFull(OAIHttpRequestWorker *worker);
    void v05SessionsPostSignalFull(OAIHttpRequestWorker *worker, OAISessionResponse summary);
    void v05UsersAuthConfirmPostSignalFull(OAIHttpRequestWorker *worker);
    void v05UsersAuthFetchModesPostSignalFull(OAIHttpRequestWorker *worker);
    void v05UsersAuthInitPostSignalFull(OAIHttpRequestWorker *worker);
    void v05UsersAuthOnNotifyPostSignalFull(OAIHttpRequestWorker *worker);
    void v05WellKnownOpenidConfigurationGetSignalFull(OAIHttpRequestWorker *worker, OAIOpenIdConfiguration summary);

    Q_DECL_DEPRECATED_X("Use v05CareContextsOnDiscoverPostSignalError() instead")
    void v05CareContextsOnDiscoverPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v05CareContextsOnDiscoverPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05CertsGetSignalError() instead")
    void v05CertsGetSignalE(OAICerts summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v05CertsGetSignalError(OAICerts summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05ConsentsHipOnNotifyPostSignalError() instead")
    void v05ConsentsHipOnNotifyPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v05ConsentsHipOnNotifyPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05HealthInformationHipOnRequestPostSignalError() instead")
    void v05HealthInformationHipOnRequestPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v05HealthInformationHipOnRequestPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05HealthInformationNotifyPostSignalError() instead")
    void v05HealthInformationNotifyPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v05HealthInformationNotifyPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05LinksLinkAddContextsPostSignalError() instead")
    void v05LinksLinkAddContextsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v05LinksLinkAddContextsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05LinksLinkOnConfirmPostSignalError() instead")
    void v05LinksLinkOnConfirmPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v05LinksLinkOnConfirmPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05LinksLinkOnInitPostSignalError() instead")
    void v05LinksLinkOnInitPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v05LinksLinkOnInitPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05PatientsProfileOnSharePostSignalError() instead")
    void v05PatientsProfileOnSharePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v05PatientsProfileOnSharePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05PatientsSmsNotifyPostSignalError() instead")
    void v05PatientsSmsNotifyPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v05PatientsSmsNotifyPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05SessionsPostSignalError() instead")
    void v05SessionsPostSignalE(OAISessionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v05SessionsPostSignalError(OAISessionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05UsersAuthConfirmPostSignalError() instead")
    void v05UsersAuthConfirmPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v05UsersAuthConfirmPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05UsersAuthFetchModesPostSignalError() instead")
    void v05UsersAuthFetchModesPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v05UsersAuthFetchModesPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05UsersAuthInitPostSignalError() instead")
    void v05UsersAuthInitPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v05UsersAuthInitPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05UsersAuthOnNotifyPostSignalError() instead")
    void v05UsersAuthOnNotifyPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v05UsersAuthOnNotifyPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05WellKnownOpenidConfigurationGetSignalError() instead")
    void v05WellKnownOpenidConfigurationGetSignalE(OAIOpenIdConfiguration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v05WellKnownOpenidConfigurationGetSignalError(OAIOpenIdConfiguration summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use v05CareContextsOnDiscoverPostSignalErrorFull() instead")
    void v05CareContextsOnDiscoverPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v05CareContextsOnDiscoverPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05CertsGetSignalErrorFull() instead")
    void v05CertsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v05CertsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05ConsentsHipOnNotifyPostSignalErrorFull() instead")
    void v05ConsentsHipOnNotifyPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v05ConsentsHipOnNotifyPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05HealthInformationHipOnRequestPostSignalErrorFull() instead")
    void v05HealthInformationHipOnRequestPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v05HealthInformationHipOnRequestPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05HealthInformationNotifyPostSignalErrorFull() instead")
    void v05HealthInformationNotifyPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v05HealthInformationNotifyPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05LinksLinkAddContextsPostSignalErrorFull() instead")
    void v05LinksLinkAddContextsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v05LinksLinkAddContextsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05LinksLinkOnConfirmPostSignalErrorFull() instead")
    void v05LinksLinkOnConfirmPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v05LinksLinkOnConfirmPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05LinksLinkOnInitPostSignalErrorFull() instead")
    void v05LinksLinkOnInitPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v05LinksLinkOnInitPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05PatientsProfileOnSharePostSignalErrorFull() instead")
    void v05PatientsProfileOnSharePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v05PatientsProfileOnSharePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05PatientsSmsNotifyPostSignalErrorFull() instead")
    void v05PatientsSmsNotifyPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v05PatientsSmsNotifyPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05SessionsPostSignalErrorFull() instead")
    void v05SessionsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v05SessionsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05UsersAuthConfirmPostSignalErrorFull() instead")
    void v05UsersAuthConfirmPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v05UsersAuthConfirmPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05UsersAuthFetchModesPostSignalErrorFull() instead")
    void v05UsersAuthFetchModesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v05UsersAuthFetchModesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05UsersAuthInitPostSignalErrorFull() instead")
    void v05UsersAuthInitPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v05UsersAuthInitPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05UsersAuthOnNotifyPostSignalErrorFull() instead")
    void v05UsersAuthOnNotifyPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v05UsersAuthOnNotifyPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05WellKnownOpenidConfigurationGetSignalErrorFull() instead")
    void v05WellKnownOpenidConfigurationGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v05WellKnownOpenidConfigurationGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
