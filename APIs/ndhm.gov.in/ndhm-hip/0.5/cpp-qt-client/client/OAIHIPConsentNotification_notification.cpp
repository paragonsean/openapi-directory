/**
 * Health Repository Provider Specifications for HIP
 * The following are the specifications for the APIs to be implemented at the Health Repository end if an entity is only serving the role of a HIP. The specs are essentially duplicates from the Gateway and Health Repository, but put together so as to make it clear to *HIPs* which set of APIs they should implement to participate in the network.  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHIPConsentNotification_notification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHIPConsentNotification_notification::OAIHIPConsentNotification_notification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHIPConsentNotification_notification::OAIHIPConsentNotification_notification() {
    this->initializeModel();
}

OAIHIPConsentNotification_notification::~OAIHIPConsentNotification_notification() {}

void OAIHIPConsentNotification_notification::initializeModel() {

    m_consent_detail_isSet = false;
    m_consent_detail_isValid = false;

    m_consent_id_isSet = false;
    m_consent_id_isValid = false;

    m_signature_isSet = false;
    m_signature_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIHIPConsentNotification_notification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHIPConsentNotification_notification::fromJsonObject(QJsonObject json) {

    m_consent_detail_isValid = ::OpenAPI::fromJsonValue(m_consent_detail, json[QString("consentDetail")]);
    m_consent_detail_isSet = !json[QString("consentDetail")].isNull() && m_consent_detail_isValid;

    m_consent_id_isValid = ::OpenAPI::fromJsonValue(m_consent_id, json[QString("consentId")]);
    m_consent_id_isSet = !json[QString("consentId")].isNull() && m_consent_id_isValid;

    m_signature_isValid = ::OpenAPI::fromJsonValue(m_signature, json[QString("signature")]);
    m_signature_isSet = !json[QString("signature")].isNull() && m_signature_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIHIPConsentNotification_notification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHIPConsentNotification_notification::asJsonObject() const {
    QJsonObject obj;
    if (m_consent_detail.isSet()) {
        obj.insert(QString("consentDetail"), ::OpenAPI::toJsonValue(m_consent_detail));
    }
    if (m_consent_id_isSet) {
        obj.insert(QString("consentId"), ::OpenAPI::toJsonValue(m_consent_id));
    }
    if (m_signature_isSet) {
        obj.insert(QString("signature"), ::OpenAPI::toJsonValue(m_signature));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAIHIPConsentNotification_notification_consentDetail OAIHIPConsentNotification_notification::getConsentDetail() const {
    return m_consent_detail;
}
void OAIHIPConsentNotification_notification::setConsentDetail(const OAIHIPConsentNotification_notification_consentDetail &consent_detail) {
    m_consent_detail = consent_detail;
    m_consent_detail_isSet = true;
}

bool OAIHIPConsentNotification_notification::is_consent_detail_Set() const{
    return m_consent_detail_isSet;
}

bool OAIHIPConsentNotification_notification::is_consent_detail_Valid() const{
    return m_consent_detail_isValid;
}

QString OAIHIPConsentNotification_notification::getConsentId() const {
    return m_consent_id;
}
void OAIHIPConsentNotification_notification::setConsentId(const QString &consent_id) {
    m_consent_id = consent_id;
    m_consent_id_isSet = true;
}

bool OAIHIPConsentNotification_notification::is_consent_id_Set() const{
    return m_consent_id_isSet;
}

bool OAIHIPConsentNotification_notification::is_consent_id_Valid() const{
    return m_consent_id_isValid;
}

QString OAIHIPConsentNotification_notification::getSignature() const {
    return m_signature;
}
void OAIHIPConsentNotification_notification::setSignature(const QString &signature) {
    m_signature = signature;
    m_signature_isSet = true;
}

bool OAIHIPConsentNotification_notification::is_signature_Set() const{
    return m_signature_isSet;
}

bool OAIHIPConsentNotification_notification::is_signature_Valid() const{
    return m_signature_isValid;
}

OAIConsentStatus OAIHIPConsentNotification_notification::getStatus() const {
    return m_status;
}
void OAIHIPConsentNotification_notification::setStatus(const OAIConsentStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIHIPConsentNotification_notification::is_status_Set() const{
    return m_status_isSet;
}

bool OAIHIPConsentNotification_notification::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIHIPConsentNotification_notification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_consent_detail.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_consent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHIPConsentNotification_notification::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_consent_detail_isValid && m_consent_id_isValid && m_signature_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
