/**
 * Health Repository Provider Specifications for HIP
 * The following are the specifications for the APIs to be implemented at the Health Repository end if an entity is only serving the role of a HIP. The specs are essentially duplicates from the Gateway and Health Repository, but put together so as to make it clear to *HIPs* which set of APIs they should implement to participate in the network.  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICertificateOrKeyGetSchema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICertificateOrKeyGetSchema::OAICertificateOrKeyGetSchema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICertificateOrKeyGetSchema::OAICertificateOrKeyGetSchema() {
    this->initializeModel();
}

OAICertificateOrKeyGetSchema::~OAICertificateOrKeyGetSchema() {}

void OAICertificateOrKeyGetSchema::initializeModel() {

    m_alg_isSet = false;
    m_alg_isValid = false;

    m_e_isSet = false;
    m_e_isValid = false;

    m_kid_isSet = false;
    m_kid_isValid = false;

    m_kty_isSet = false;
    m_kty_isValid = false;

    m_n_isSet = false;
    m_n_isValid = false;

    m_use_isSet = false;
    m_use_isValid = false;

    m_x5c_isSet = false;
    m_x5c_isValid = false;

    m_x5t_isSet = false;
    m_x5t_isValid = false;

    m_x5t_s256_isSet = false;
    m_x5t_s256_isValid = false;
}

void OAICertificateOrKeyGetSchema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICertificateOrKeyGetSchema::fromJsonObject(QJsonObject json) {

    m_alg_isValid = ::OpenAPI::fromJsonValue(m_alg, json[QString("alg")]);
    m_alg_isSet = !json[QString("alg")].isNull() && m_alg_isValid;

    m_e_isValid = ::OpenAPI::fromJsonValue(m_e, json[QString("e")]);
    m_e_isSet = !json[QString("e")].isNull() && m_e_isValid;

    m_kid_isValid = ::OpenAPI::fromJsonValue(m_kid, json[QString("kid")]);
    m_kid_isSet = !json[QString("kid")].isNull() && m_kid_isValid;

    m_kty_isValid = ::OpenAPI::fromJsonValue(m_kty, json[QString("kty")]);
    m_kty_isSet = !json[QString("kty")].isNull() && m_kty_isValid;

    m_n_isValid = ::OpenAPI::fromJsonValue(m_n, json[QString("n")]);
    m_n_isSet = !json[QString("n")].isNull() && m_n_isValid;

    m_use_isValid = ::OpenAPI::fromJsonValue(m_use, json[QString("use")]);
    m_use_isSet = !json[QString("use")].isNull() && m_use_isValid;

    m_x5c_isValid = ::OpenAPI::fromJsonValue(m_x5c, json[QString("x5c")]);
    m_x5c_isSet = !json[QString("x5c")].isNull() && m_x5c_isValid;

    m_x5t_isValid = ::OpenAPI::fromJsonValue(m_x5t, json[QString("x5t")]);
    m_x5t_isSet = !json[QString("x5t")].isNull() && m_x5t_isValid;

    m_x5t_s256_isValid = ::OpenAPI::fromJsonValue(m_x5t_s256, json[QString("x5t#S256")]);
    m_x5t_s256_isSet = !json[QString("x5t#S256")].isNull() && m_x5t_s256_isValid;
}

QString OAICertificateOrKeyGetSchema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICertificateOrKeyGetSchema::asJsonObject() const {
    QJsonObject obj;
    if (m_alg_isSet) {
        obj.insert(QString("alg"), ::OpenAPI::toJsonValue(m_alg));
    }
    if (m_e_isSet) {
        obj.insert(QString("e"), ::OpenAPI::toJsonValue(m_e));
    }
    if (m_kid_isSet) {
        obj.insert(QString("kid"), ::OpenAPI::toJsonValue(m_kid));
    }
    if (m_kty_isSet) {
        obj.insert(QString("kty"), ::OpenAPI::toJsonValue(m_kty));
    }
    if (m_n_isSet) {
        obj.insert(QString("n"), ::OpenAPI::toJsonValue(m_n));
    }
    if (m_use_isSet) {
        obj.insert(QString("use"), ::OpenAPI::toJsonValue(m_use));
    }
    if (m_x5c.size() > 0) {
        obj.insert(QString("x5c"), ::OpenAPI::toJsonValue(m_x5c));
    }
    if (m_x5t_isSet) {
        obj.insert(QString("x5t"), ::OpenAPI::toJsonValue(m_x5t));
    }
    if (m_x5t_s256_isSet) {
        obj.insert(QString("x5t#S256"), ::OpenAPI::toJsonValue(m_x5t_s256));
    }
    return obj;
}

QString OAICertificateOrKeyGetSchema::getAlg() const {
    return m_alg;
}
void OAICertificateOrKeyGetSchema::setAlg(const QString &alg) {
    m_alg = alg;
    m_alg_isSet = true;
}

bool OAICertificateOrKeyGetSchema::is_alg_Set() const{
    return m_alg_isSet;
}

bool OAICertificateOrKeyGetSchema::is_alg_Valid() const{
    return m_alg_isValid;
}

QString OAICertificateOrKeyGetSchema::getE() const {
    return m_e;
}
void OAICertificateOrKeyGetSchema::setE(const QString &e) {
    m_e = e;
    m_e_isSet = true;
}

bool OAICertificateOrKeyGetSchema::is_e_Set() const{
    return m_e_isSet;
}

bool OAICertificateOrKeyGetSchema::is_e_Valid() const{
    return m_e_isValid;
}

QString OAICertificateOrKeyGetSchema::getKid() const {
    return m_kid;
}
void OAICertificateOrKeyGetSchema::setKid(const QString &kid) {
    m_kid = kid;
    m_kid_isSet = true;
}

bool OAICertificateOrKeyGetSchema::is_kid_Set() const{
    return m_kid_isSet;
}

bool OAICertificateOrKeyGetSchema::is_kid_Valid() const{
    return m_kid_isValid;
}

QString OAICertificateOrKeyGetSchema::getKty() const {
    return m_kty;
}
void OAICertificateOrKeyGetSchema::setKty(const QString &kty) {
    m_kty = kty;
    m_kty_isSet = true;
}

bool OAICertificateOrKeyGetSchema::is_kty_Set() const{
    return m_kty_isSet;
}

bool OAICertificateOrKeyGetSchema::is_kty_Valid() const{
    return m_kty_isValid;
}

QString OAICertificateOrKeyGetSchema::getN() const {
    return m_n;
}
void OAICertificateOrKeyGetSchema::setN(const QString &n) {
    m_n = n;
    m_n_isSet = true;
}

bool OAICertificateOrKeyGetSchema::is_n_Set() const{
    return m_n_isSet;
}

bool OAICertificateOrKeyGetSchema::is_n_Valid() const{
    return m_n_isValid;
}

QString OAICertificateOrKeyGetSchema::getUse() const {
    return m_use;
}
void OAICertificateOrKeyGetSchema::setUse(const QString &use) {
    m_use = use;
    m_use_isSet = true;
}

bool OAICertificateOrKeyGetSchema::is_use_Set() const{
    return m_use_isSet;
}

bool OAICertificateOrKeyGetSchema::is_use_Valid() const{
    return m_use_isValid;
}

QList<QString> OAICertificateOrKeyGetSchema::getX5c() const {
    return m_x5c;
}
void OAICertificateOrKeyGetSchema::setX5c(const QList<QString> &x5c) {
    m_x5c = x5c;
    m_x5c_isSet = true;
}

bool OAICertificateOrKeyGetSchema::is_x5c_Set() const{
    return m_x5c_isSet;
}

bool OAICertificateOrKeyGetSchema::is_x5c_Valid() const{
    return m_x5c_isValid;
}

QString OAICertificateOrKeyGetSchema::getX5t() const {
    return m_x5t;
}
void OAICertificateOrKeyGetSchema::setX5t(const QString &x5t) {
    m_x5t = x5t;
    m_x5t_isSet = true;
}

bool OAICertificateOrKeyGetSchema::is_x5t_Set() const{
    return m_x5t_isSet;
}

bool OAICertificateOrKeyGetSchema::is_x5t_Valid() const{
    return m_x5t_isValid;
}

QString OAICertificateOrKeyGetSchema::getX5tS256() const {
    return m_x5t_s256;
}
void OAICertificateOrKeyGetSchema::setX5tS256(const QString &x5t_s256) {
    m_x5t_s256 = x5t_s256;
    m_x5t_s256_isSet = true;
}

bool OAICertificateOrKeyGetSchema::is_x5t_s256_Set() const{
    return m_x5t_s256_isSet;
}

bool OAICertificateOrKeyGetSchema::is_x5t_s256_Valid() const{
    return m_x5t_s256_isValid;
}

bool OAICertificateOrKeyGetSchema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_e_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_n_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x5c.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_x5t_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x5t_s256_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICertificateOrKeyGetSchema::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
