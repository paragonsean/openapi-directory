/**
 * Health Repository Provider Specifications for HIP
 * The following are the specifications for the APIs to be implemented at the Health Repository end if an entity is only serving the role of a HIP. The specs are essentially duplicates from the Gateway and Health Repository, but put together so as to make it clear to *HIPs* which set of APIs they should implement to participate in the network.  
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EntryContent model module.
 * @module model/EntryContent
 * @version 0.5
 */
class EntryContent {
    /**
     * Constructs a new <code>EntryContent</code>.
     * @alias module:model/EntryContent
     * @param careContextReference {String} care context reference number.
     * @param checksum {String} Md5 checksum of the content before encryption
     * @param content {String} Encrypted content
     * @param media {module:model/EntryContent.MediaEnum} mimetype of the content.
     */
    constructor(careContextReference, checksum, content, media) { 
        
        EntryContent.initialize(this, careContextReference, checksum, content, media);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, careContextReference, checksum, content, media) { 
        obj['careContextReference'] = careContextReference;
        obj['checksum'] = checksum;
        obj['content'] = content;
        obj['media'] = media;
    }

    /**
     * Constructs a <code>EntryContent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EntryContent} obj Optional instance to populate.
     * @return {module:model/EntryContent} The populated <code>EntryContent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EntryContent();

            if (data.hasOwnProperty('careContextReference')) {
                obj['careContextReference'] = ApiClient.convertToType(data['careContextReference'], 'String');
            }
            if (data.hasOwnProperty('checksum')) {
                obj['checksum'] = ApiClient.convertToType(data['checksum'], 'String');
            }
            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], 'String');
            }
            if (data.hasOwnProperty('media')) {
                obj['media'] = ApiClient.convertToType(data['media'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EntryContent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EntryContent</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EntryContent.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['careContextReference'] && !(typeof data['careContextReference'] === 'string' || data['careContextReference'] instanceof String)) {
            throw new Error("Expected the field `careContextReference` to be a primitive type in the JSON string but got " + data['careContextReference']);
        }
        // ensure the json data is a string
        if (data['checksum'] && !(typeof data['checksum'] === 'string' || data['checksum'] instanceof String)) {
            throw new Error("Expected the field `checksum` to be a primitive type in the JSON string but got " + data['checksum']);
        }
        // ensure the json data is a string
        if (data['content'] && !(typeof data['content'] === 'string' || data['content'] instanceof String)) {
            throw new Error("Expected the field `content` to be a primitive type in the JSON string but got " + data['content']);
        }
        // ensure the json data is a string
        if (data['media'] && !(typeof data['media'] === 'string' || data['media'] instanceof String)) {
            throw new Error("Expected the field `media` to be a primitive type in the JSON string but got " + data['media']);
        }

        return true;
    }


}

EntryContent.RequiredProperties = ["careContextReference", "checksum", "content", "media"];

/**
 * care context reference number.
 * @member {String} careContextReference
 */
EntryContent.prototype['careContextReference'] = undefined;

/**
 * Md5 checksum of the content before encryption
 * @member {String} checksum
 */
EntryContent.prototype['checksum'] = undefined;

/**
 * Encrypted content
 * @member {String} content
 */
EntryContent.prototype['content'] = undefined;

/**
 * mimetype of the content.
 * @member {module:model/EntryContent.MediaEnum} media
 */
EntryContent.prototype['media'] = undefined;





/**
 * Allowed values for the <code>media</code> property.
 * @enum {String}
 * @readonly
 */
EntryContent['MediaEnum'] = {

    /**
     * value: "application/fhir+json"
     * @const
     */
    "application/fhir+json": "application/fhir+json"
};



export default EntryContent;

