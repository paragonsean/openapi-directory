/**
 * Health Repository Provider Specifications for HIP
 * The following are the specifications for the APIs to be implemented at the Health Repository end if an entity is only serving the role of a HIP. The specs are essentially duplicates from the Gateway and Health Repository, but put together so as to make it clear to *HIPs* which set of APIs they should implement to participate in the network.  
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConsentStatus from './ConsentStatus';
import HIPConsentNotificationNotificationConsentDetail from './HIPConsentNotificationNotificationConsentDetail';

/**
 * The HIPConsentNotificationNotification model module.
 * @module model/HIPConsentNotificationNotification
 * @version 0.5
 */
class HIPConsentNotificationNotification {
    /**
     * Constructs a new <code>HIPConsentNotificationNotification</code>.
     * @alias module:model/HIPConsentNotificationNotification
     * @param consentDetail {module:model/HIPConsentNotificationNotificationConsentDetail} 
     * @param consentId {String} 
     * @param signature {String} 
     * @param status {module:model/ConsentStatus} 
     */
    constructor(consentDetail, consentId, signature, status) { 
        
        HIPConsentNotificationNotification.initialize(this, consentDetail, consentId, signature, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, consentDetail, consentId, signature, status) { 
        obj['consentDetail'] = consentDetail;
        obj['consentId'] = consentId;
        obj['signature'] = signature;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>HIPConsentNotificationNotification</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HIPConsentNotificationNotification} obj Optional instance to populate.
     * @return {module:model/HIPConsentNotificationNotification} The populated <code>HIPConsentNotificationNotification</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HIPConsentNotificationNotification();

            if (data.hasOwnProperty('consentDetail')) {
                obj['consentDetail'] = HIPConsentNotificationNotificationConsentDetail.constructFromObject(data['consentDetail']);
            }
            if (data.hasOwnProperty('consentId')) {
                obj['consentId'] = ApiClient.convertToType(data['consentId'], 'String');
            }
            if (data.hasOwnProperty('signature')) {
                obj['signature'] = ApiClient.convertToType(data['signature'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ConsentStatus.constructFromObject(data['status']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HIPConsentNotificationNotification</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HIPConsentNotificationNotification</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of HIPConsentNotificationNotification.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `consentDetail`
        if (data['consentDetail']) { // data not null
          HIPConsentNotificationNotificationConsentDetail.validateJSON(data['consentDetail']);
        }
        // ensure the json data is a string
        if (data['consentId'] && !(typeof data['consentId'] === 'string' || data['consentId'] instanceof String)) {
            throw new Error("Expected the field `consentId` to be a primitive type in the JSON string but got " + data['consentId']);
        }
        // ensure the json data is a string
        if (data['signature'] && !(typeof data['signature'] === 'string' || data['signature'] instanceof String)) {
            throw new Error("Expected the field `signature` to be a primitive type in the JSON string but got " + data['signature']);
        }

        return true;
    }


}

HIPConsentNotificationNotification.RequiredProperties = ["consentDetail", "consentId", "signature", "status"];

/**
 * @member {module:model/HIPConsentNotificationNotificationConsentDetail} consentDetail
 */
HIPConsentNotificationNotification.prototype['consentDetail'] = undefined;

/**
 * @member {String} consentId
 */
HIPConsentNotificationNotification.prototype['consentId'] = undefined;

/**
 * @member {String} signature
 */
HIPConsentNotificationNotification.prototype['signature'] = undefined;

/**
 * @member {module:model/ConsentStatus} status
 */
HIPConsentNotificationNotification.prototype['status'] = undefined;






export default HIPConsentNotificationNotification;

