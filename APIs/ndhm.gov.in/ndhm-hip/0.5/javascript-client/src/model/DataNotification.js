/**
 * Health Repository Provider Specifications for HIP
 * The following are the specifications for the APIs to be implemented at the Health Repository end if an entity is only serving the role of a HIP. The specs are essentially duplicates from the Gateway and Health Repository, but put together so as to make it clear to *HIPs* which set of APIs they should implement to participate in the network.  
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DataNotificationEntriesInner from './DataNotificationEntriesInner';
import KeyMaterial from './KeyMaterial';

/**
 * The DataNotification model module.
 * @module model/DataNotification
 * @version 0.5
 */
class DataNotification {
    /**
     * Constructs a new <code>DataNotification</code>.
     * @alias module:model/DataNotification
     * @param entries {Array.<module:model/DataNotificationEntriesInner>} 
     * @param keyMaterial {module:model/KeyMaterial} 
     * @param pageCount {Number} Total number of pages.
     * @param pageNumber {Number} Current page number.
     * @param transactionId {String} Transaction Id issued when data requested.
     */
    constructor(entries, keyMaterial, pageCount, pageNumber, transactionId) { 
        
        DataNotification.initialize(this, entries, keyMaterial, pageCount, pageNumber, transactionId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, entries, keyMaterial, pageCount, pageNumber, transactionId) { 
        obj['entries'] = entries;
        obj['keyMaterial'] = keyMaterial;
        obj['pageCount'] = pageCount;
        obj['pageNumber'] = pageNumber;
        obj['transactionId'] = transactionId;
    }

    /**
     * Constructs a <code>DataNotification</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataNotification} obj Optional instance to populate.
     * @return {module:model/DataNotification} The populated <code>DataNotification</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataNotification();

            if (data.hasOwnProperty('entries')) {
                obj['entries'] = ApiClient.convertToType(data['entries'], [DataNotificationEntriesInner]);
            }
            if (data.hasOwnProperty('keyMaterial')) {
                obj['keyMaterial'] = KeyMaterial.constructFromObject(data['keyMaterial']);
            }
            if (data.hasOwnProperty('pageCount')) {
                obj['pageCount'] = ApiClient.convertToType(data['pageCount'], 'Number');
            }
            if (data.hasOwnProperty('pageNumber')) {
                obj['pageNumber'] = ApiClient.convertToType(data['pageNumber'], 'Number');
            }
            if (data.hasOwnProperty('transactionId')) {
                obj['transactionId'] = ApiClient.convertToType(data['transactionId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataNotification</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataNotification</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DataNotification.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['entries']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['entries'])) {
                throw new Error("Expected the field `entries` to be an array in the JSON data but got " + data['entries']);
            }
            // validate the optional field `entries` (array)
            for (const item of data['entries']) {
                DataNotificationEntriesInner.validateJSON(item);
            };
        }
        // validate the optional field `keyMaterial`
        if (data['keyMaterial']) { // data not null
          KeyMaterial.validateJSON(data['keyMaterial']);
        }
        // ensure the json data is a string
        if (data['transactionId'] && !(typeof data['transactionId'] === 'string' || data['transactionId'] instanceof String)) {
            throw new Error("Expected the field `transactionId` to be a primitive type in the JSON string but got " + data['transactionId']);
        }

        return true;
    }


}

DataNotification.RequiredProperties = ["entries", "keyMaterial", "pageCount", "pageNumber", "transactionId"];

/**
 * @member {Array.<module:model/DataNotificationEntriesInner>} entries
 */
DataNotification.prototype['entries'] = undefined;

/**
 * @member {module:model/KeyMaterial} keyMaterial
 */
DataNotification.prototype['keyMaterial'] = undefined;

/**
 * Total number of pages.
 * @member {Number} pageCount
 */
DataNotification.prototype['pageCount'] = undefined;

/**
 * Current page number.
 * @member {Number} pageNumber
 */
DataNotification.prototype['pageNumber'] = undefined;

/**
 * Transaction Id issued when data requested.
 * @member {String} transactionId
 */
DataNotification.prototype['transactionId'] = undefined;






export default DataNotification;

