/**
 * Health Repository Provider Specifications for HIP
 * The following are the specifications for the APIs to be implemented at the Health Repository end if an entity is only serving the role of a HIP. The specs are essentially duplicates from the Gateway and Health Repository, but put together so as to make it clear to *HIPs* which set of APIs they should implement to participate in the network.  
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Identifier from './Identifier';
import PatientAddress from './PatientAddress';
import PatientGender from './PatientGender';

/**
 * The ShareProfileRequestPatientUserDemographics model module.
 * @module model/ShareProfileRequestPatientUserDemographics
 * @version 0.5
 */
class ShareProfileRequestPatientUserDemographics {
    /**
     * Constructs a new <code>ShareProfileRequestPatientUserDemographics</code>.
     * @alias module:model/ShareProfileRequestPatientUserDemographics
     * @param gender {module:model/PatientGender} 
     * @param healthId {String} 
     * @param healthIdNumber {String} 
     * @param name {String} 
     * @param yearOfBirth {Number} 
     */
    constructor(gender, healthId, healthIdNumber, name, yearOfBirth) { 
        
        ShareProfileRequestPatientUserDemographics.initialize(this, gender, healthId, healthIdNumber, name, yearOfBirth);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, gender, healthId, healthIdNumber, name, yearOfBirth) { 
        obj['gender'] = gender;
        obj['healthId'] = healthId;
        obj['healthIdNumber'] = healthIdNumber;
        obj['name'] = name;
        obj['yearOfBirth'] = yearOfBirth;
    }

    /**
     * Constructs a <code>ShareProfileRequestPatientUserDemographics</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ShareProfileRequestPatientUserDemographics} obj Optional instance to populate.
     * @return {module:model/ShareProfileRequestPatientUserDemographics} The populated <code>ShareProfileRequestPatientUserDemographics</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ShareProfileRequestPatientUserDemographics();

            if (data.hasOwnProperty('address')) {
                obj['address'] = PatientAddress.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('dayOfBirth')) {
                obj['dayOfBirth'] = ApiClient.convertToType(data['dayOfBirth'], 'Number');
            }
            if (data.hasOwnProperty('gender')) {
                obj['gender'] = PatientGender.constructFromObject(data['gender']);
            }
            if (data.hasOwnProperty('healthId')) {
                obj['healthId'] = ApiClient.convertToType(data['healthId'], 'String');
            }
            if (data.hasOwnProperty('healthIdNumber')) {
                obj['healthIdNumber'] = ApiClient.convertToType(data['healthIdNumber'], 'String');
            }
            if (data.hasOwnProperty('identifiers')) {
                obj['identifiers'] = ApiClient.convertToType(data['identifiers'], [Identifier]);
            }
            if (data.hasOwnProperty('monthOfBirth')) {
                obj['monthOfBirth'] = ApiClient.convertToType(data['monthOfBirth'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('yearOfBirth')) {
                obj['yearOfBirth'] = ApiClient.convertToType(data['yearOfBirth'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ShareProfileRequestPatientUserDemographics</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ShareProfileRequestPatientUserDemographics</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ShareProfileRequestPatientUserDemographics.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `address`
        if (data['address']) { // data not null
          PatientAddress.validateJSON(data['address']);
        }
        // ensure the json data is a string
        if (data['healthId'] && !(typeof data['healthId'] === 'string' || data['healthId'] instanceof String)) {
            throw new Error("Expected the field `healthId` to be a primitive type in the JSON string but got " + data['healthId']);
        }
        // ensure the json data is a string
        if (data['healthIdNumber'] && !(typeof data['healthIdNumber'] === 'string' || data['healthIdNumber'] instanceof String)) {
            throw new Error("Expected the field `healthIdNumber` to be a primitive type in the JSON string but got " + data['healthIdNumber']);
        }
        if (data['identifiers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['identifiers'])) {
                throw new Error("Expected the field `identifiers` to be an array in the JSON data but got " + data['identifiers']);
            }
            // validate the optional field `identifiers` (array)
            for (const item of data['identifiers']) {
                Identifier.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

ShareProfileRequestPatientUserDemographics.RequiredProperties = ["gender", "healthId", "healthIdNumber", "name", "yearOfBirth"];

/**
 * @member {module:model/PatientAddress} address
 */
ShareProfileRequestPatientUserDemographics.prototype['address'] = undefined;

/**
 * @member {Number} dayOfBirth
 */
ShareProfileRequestPatientUserDemographics.prototype['dayOfBirth'] = undefined;

/**
 * @member {module:model/PatientGender} gender
 */
ShareProfileRequestPatientUserDemographics.prototype['gender'] = undefined;

/**
 * @member {String} healthId
 */
ShareProfileRequestPatientUserDemographics.prototype['healthId'] = undefined;

/**
 * @member {String} healthIdNumber
 */
ShareProfileRequestPatientUserDemographics.prototype['healthIdNumber'] = undefined;

/**
 * @member {Array.<module:model/Identifier>} identifiers
 */
ShareProfileRequestPatientUserDemographics.prototype['identifiers'] = undefined;

/**
 * @member {Number} monthOfBirth
 */
ShareProfileRequestPatientUserDemographics.prototype['monthOfBirth'] = undefined;

/**
 * @member {String} name
 */
ShareProfileRequestPatientUserDemographics.prototype['name'] = undefined;

/**
 * @member {Number} yearOfBirth
 */
ShareProfileRequestPatientUserDemographics.prototype['yearOfBirth'] = undefined;






export default ShareProfileRequestPatientUserDemographics;

