/**
 * Health Repository Provider Specifications for HIP
 * The following are the specifications for the APIs to be implemented at the Health Repository end if an entity is only serving the role of a HIP. The specs are essentially duplicates from the Gateway and Health Repository, but put together so as to make it clear to *HIPs* which set of APIs they should implement to participate in the network.  
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CareContextRepresentation from './CareContextRepresentation';
import IdentifierType from './IdentifierType';

/**
 * The PatientRepresentation model module.
 * @module model/PatientRepresentation
 * @version 0.5
 */
class PatientRepresentation {
    /**
     * Constructs a new <code>PatientRepresentation</code>.
     * @alias module:model/PatientRepresentation
     * @param careContexts {Array.<module:model/CareContextRepresentation>} 
     * @param display {String} 
     * @param referenceNumber {String} 
     */
    constructor(careContexts, display, referenceNumber) { 
        
        PatientRepresentation.initialize(this, careContexts, display, referenceNumber);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, careContexts, display, referenceNumber) { 
        obj['careContexts'] = careContexts;
        obj['display'] = display;
        obj['referenceNumber'] = referenceNumber;
    }

    /**
     * Constructs a <code>PatientRepresentation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PatientRepresentation} obj Optional instance to populate.
     * @return {module:model/PatientRepresentation} The populated <code>PatientRepresentation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PatientRepresentation();

            if (data.hasOwnProperty('careContexts')) {
                obj['careContexts'] = ApiClient.convertToType(data['careContexts'], [CareContextRepresentation]);
            }
            if (data.hasOwnProperty('display')) {
                obj['display'] = ApiClient.convertToType(data['display'], 'String');
            }
            if (data.hasOwnProperty('matchedBy')) {
                obj['matchedBy'] = ApiClient.convertToType(data['matchedBy'], [IdentifierType]);
            }
            if (data.hasOwnProperty('referenceNumber')) {
                obj['referenceNumber'] = ApiClient.convertToType(data['referenceNumber'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PatientRepresentation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PatientRepresentation</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PatientRepresentation.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['careContexts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['careContexts'])) {
                throw new Error("Expected the field `careContexts` to be an array in the JSON data but got " + data['careContexts']);
            }
            // validate the optional field `careContexts` (array)
            for (const item of data['careContexts']) {
                CareContextRepresentation.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['display'] && !(typeof data['display'] === 'string' || data['display'] instanceof String)) {
            throw new Error("Expected the field `display` to be a primitive type in the JSON string but got " + data['display']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['matchedBy'])) {
            throw new Error("Expected the field `matchedBy` to be an array in the JSON data but got " + data['matchedBy']);
        }
        // ensure the json data is a string
        if (data['referenceNumber'] && !(typeof data['referenceNumber'] === 'string' || data['referenceNumber'] instanceof String)) {
            throw new Error("Expected the field `referenceNumber` to be a primitive type in the JSON string but got " + data['referenceNumber']);
        }

        return true;
    }


}

PatientRepresentation.RequiredProperties = ["careContexts", "display", "referenceNumber"];

/**
 * @member {Array.<module:model/CareContextRepresentation>} careContexts
 */
PatientRepresentation.prototype['careContexts'] = undefined;

/**
 * @member {String} display
 */
PatientRepresentation.prototype['display'] = undefined;

/**
 * @member {Array.<module:model/IdentifierType>} matchedBy
 */
PatientRepresentation.prototype['matchedBy'] = undefined;

/**
 * @member {String} referenceNumber
 */
PatientRepresentation.prototype['referenceNumber'] = undefined;






export default PatientRepresentation;

