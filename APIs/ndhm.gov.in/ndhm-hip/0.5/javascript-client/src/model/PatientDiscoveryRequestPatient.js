/**
 * Health Repository Provider Specifications for HIP
 * The following are the specifications for the APIs to be implemented at the Health Repository end if an entity is only serving the role of a HIP. The specs are essentially duplicates from the Gateway and Health Repository, but put together so as to make it clear to *HIPs* which set of APIs they should implement to participate in the network.  
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Identifier from './Identifier';

/**
 * The PatientDiscoveryRequestPatient model module.
 * @module model/PatientDiscoveryRequestPatient
 * @version 0.5
 */
class PatientDiscoveryRequestPatient {
    /**
     * Constructs a new <code>PatientDiscoveryRequestPatient</code>.
     * @alias module:model/PatientDiscoveryRequestPatient
     * @param gender {module:model/PatientDiscoveryRequestPatient.GenderEnum} 
     * @param id {String} Identifier of patient at consent manager
     * @param name {String} 
     * @param verifiedIdentifiers {Array.<module:model/Identifier>} 
     * @param yearOfBirth {Number} 
     */
    constructor(gender, id, name, verifiedIdentifiers, yearOfBirth) { 
        
        PatientDiscoveryRequestPatient.initialize(this, gender, id, name, verifiedIdentifiers, yearOfBirth);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, gender, id, name, verifiedIdentifiers, yearOfBirth) { 
        obj['gender'] = gender;
        obj['id'] = id;
        obj['name'] = name;
        obj['verifiedIdentifiers'] = verifiedIdentifiers;
        obj['yearOfBirth'] = yearOfBirth;
    }

    /**
     * Constructs a <code>PatientDiscoveryRequestPatient</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PatientDiscoveryRequestPatient} obj Optional instance to populate.
     * @return {module:model/PatientDiscoveryRequestPatient} The populated <code>PatientDiscoveryRequestPatient</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PatientDiscoveryRequestPatient();

            if (data.hasOwnProperty('gender')) {
                obj['gender'] = ApiClient.convertToType(data['gender'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('unverifiedIdentifiers')) {
                obj['unverifiedIdentifiers'] = ApiClient.convertToType(data['unverifiedIdentifiers'], [Identifier]);
            }
            if (data.hasOwnProperty('verifiedIdentifiers')) {
                obj['verifiedIdentifiers'] = ApiClient.convertToType(data['verifiedIdentifiers'], [Identifier]);
            }
            if (data.hasOwnProperty('yearOfBirth')) {
                obj['yearOfBirth'] = ApiClient.convertToType(data['yearOfBirth'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PatientDiscoveryRequestPatient</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PatientDiscoveryRequestPatient</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PatientDiscoveryRequestPatient.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['gender'] && !(typeof data['gender'] === 'string' || data['gender'] instanceof String)) {
            throw new Error("Expected the field `gender` to be a primitive type in the JSON string but got " + data['gender']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['unverifiedIdentifiers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['unverifiedIdentifiers'])) {
                throw new Error("Expected the field `unverifiedIdentifiers` to be an array in the JSON data but got " + data['unverifiedIdentifiers']);
            }
            // validate the optional field `unverifiedIdentifiers` (array)
            for (const item of data['unverifiedIdentifiers']) {
                Identifier.validateJSON(item);
            };
        }
        if (data['verifiedIdentifiers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['verifiedIdentifiers'])) {
                throw new Error("Expected the field `verifiedIdentifiers` to be an array in the JSON data but got " + data['verifiedIdentifiers']);
            }
            // validate the optional field `verifiedIdentifiers` (array)
            for (const item of data['verifiedIdentifiers']) {
                Identifier.validateJSON(item);
            };
        }

        return true;
    }


}

PatientDiscoveryRequestPatient.RequiredProperties = ["gender", "id", "name", "verifiedIdentifiers", "yearOfBirth"];

/**
 * @member {module:model/PatientDiscoveryRequestPatient.GenderEnum} gender
 */
PatientDiscoveryRequestPatient.prototype['gender'] = undefined;

/**
 * Identifier of patient at consent manager
 * @member {String} id
 */
PatientDiscoveryRequestPatient.prototype['id'] = undefined;

/**
 * @member {String} name
 */
PatientDiscoveryRequestPatient.prototype['name'] = undefined;

/**
 * @member {Array.<module:model/Identifier>} unverifiedIdentifiers
 */
PatientDiscoveryRequestPatient.prototype['unverifiedIdentifiers'] = undefined;

/**
 * @member {Array.<module:model/Identifier>} verifiedIdentifiers
 */
PatientDiscoveryRequestPatient.prototype['verifiedIdentifiers'] = undefined;

/**
 * @member {Number} yearOfBirth
 */
PatientDiscoveryRequestPatient.prototype['yearOfBirth'] = undefined;





/**
 * Allowed values for the <code>gender</code> property.
 * @enum {String}
 * @readonly
 */
PatientDiscoveryRequestPatient['GenderEnum'] = {

    /**
     * value: "M"
     * @const
     */
    "M": "M",

    /**
     * value: "F"
     * @const
     */
    "F": "F",

    /**
     * value: "O"
     * @const
     */
    "O": "O",

    /**
     * value: "U"
     * @const
     */
    "U": "U"
};



export default PatientDiscoveryRequestPatient;

