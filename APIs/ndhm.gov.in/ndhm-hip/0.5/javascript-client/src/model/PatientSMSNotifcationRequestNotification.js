/**
 * Health Repository Provider Specifications for HIP
 * The following are the specifications for the APIs to be implemented at the Health Repository end if an entity is only serving the role of a HIP. The specs are essentially duplicates from the Gateway and Health Repository, but put together so as to make it clear to *HIPs* which set of APIs they should implement to participate in the network.  
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PatientSMSNotifcationRequestNotificationHip from './PatientSMSNotifcationRequestNotificationHip';

/**
 * The PatientSMSNotifcationRequestNotification model module.
 * @module model/PatientSMSNotifcationRequestNotification
 * @version 0.5
 */
class PatientSMSNotifcationRequestNotification {
    /**
     * Constructs a new <code>PatientSMSNotifcationRequestNotification</code>.
     * @alias module:model/PatientSMSNotifcationRequestNotification
     * @param careContextInfo {String} Information about care context or visit for which the SMS is being sent.
     * @param hip {module:model/PatientSMSNotifcationRequestNotificationHip} 
     * @param phoneNo {String} Phone number of the receiver with country code
     */
    constructor(careContextInfo, hip, phoneNo) { 
        
        PatientSMSNotifcationRequestNotification.initialize(this, careContextInfo, hip, phoneNo);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, careContextInfo, hip, phoneNo) { 
        obj['careContextInfo'] = careContextInfo;
        obj['hip'] = hip;
        obj['phoneNo'] = phoneNo;
    }

    /**
     * Constructs a <code>PatientSMSNotifcationRequestNotification</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PatientSMSNotifcationRequestNotification} obj Optional instance to populate.
     * @return {module:model/PatientSMSNotifcationRequestNotification} The populated <code>PatientSMSNotifcationRequestNotification</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PatientSMSNotifcationRequestNotification();

            if (data.hasOwnProperty('careContextInfo')) {
                obj['careContextInfo'] = ApiClient.convertToType(data['careContextInfo'], 'String');
            }
            if (data.hasOwnProperty('deeplinkUrl')) {
                obj['deeplinkUrl'] = ApiClient.convertToType(data['deeplinkUrl'], 'String');
            }
            if (data.hasOwnProperty('hip')) {
                obj['hip'] = PatientSMSNotifcationRequestNotificationHip.constructFromObject(data['hip']);
            }
            if (data.hasOwnProperty('phoneNo')) {
                obj['phoneNo'] = ApiClient.convertToType(data['phoneNo'], 'String');
            }
            if (data.hasOwnProperty('receiverName')) {
                obj['receiverName'] = ApiClient.convertToType(data['receiverName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PatientSMSNotifcationRequestNotification</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PatientSMSNotifcationRequestNotification</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PatientSMSNotifcationRequestNotification.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['careContextInfo'] && !(typeof data['careContextInfo'] === 'string' || data['careContextInfo'] instanceof String)) {
            throw new Error("Expected the field `careContextInfo` to be a primitive type in the JSON string but got " + data['careContextInfo']);
        }
        // ensure the json data is a string
        if (data['deeplinkUrl'] && !(typeof data['deeplinkUrl'] === 'string' || data['deeplinkUrl'] instanceof String)) {
            throw new Error("Expected the field `deeplinkUrl` to be a primitive type in the JSON string but got " + data['deeplinkUrl']);
        }
        // validate the optional field `hip`
        if (data['hip']) { // data not null
          PatientSMSNotifcationRequestNotificationHip.validateJSON(data['hip']);
        }
        // ensure the json data is a string
        if (data['phoneNo'] && !(typeof data['phoneNo'] === 'string' || data['phoneNo'] instanceof String)) {
            throw new Error("Expected the field `phoneNo` to be a primitive type in the JSON string but got " + data['phoneNo']);
        }
        // ensure the json data is a string
        if (data['receiverName'] && !(typeof data['receiverName'] === 'string' || data['receiverName'] instanceof String)) {
            throw new Error("Expected the field `receiverName` to be a primitive type in the JSON string but got " + data['receiverName']);
        }

        return true;
    }


}

PatientSMSNotifcationRequestNotification.RequiredProperties = ["careContextInfo", "hip", "phoneNo"];

/**
 * Information about care context or visit for which the SMS is being sent.
 * @member {String} careContextInfo
 */
PatientSMSNotifcationRequestNotification.prototype['careContextInfo'] = undefined;

/**
 * A link pointing to digital health records of the patient. PHR App's deeplink will be sent in SMS if this field is not provided.
 * @member {String} deeplinkUrl
 */
PatientSMSNotifcationRequestNotification.prototype['deeplinkUrl'] = undefined;

/**
 * @member {module:model/PatientSMSNotifcationRequestNotificationHip} hip
 */
PatientSMSNotifcationRequestNotification.prototype['hip'] = undefined;

/**
 * Phone number of the receiver with country code
 * @member {String} phoneNo
 */
PatientSMSNotifcationRequestNotification.prototype['phoneNo'] = undefined;

/**
 * Name of the reciever/patient. Receiver's name will not be sent if not provided.
 * @member {String} receiverName
 */
PatientSMSNotifcationRequestNotification.prototype['receiverName'] = undefined;






export default PatientSMSNotifcationRequestNotification;

