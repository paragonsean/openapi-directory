/**
 * Health Repository Provider Specifications for HIP
 * The following are the specifications for the APIs to be implemented at the Health Repository end if an entity is only serving the role of a HIP. The specs are essentially duplicates from the Gateway and Health Repository, but put together so as to make it clear to *HIPs* which set of APIs they should implement to participate in the network.  
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AccessTokenValidity from './AccessTokenValidity';
import PatientDemographicResponse from './PatientDemographicResponse';

/**
 * The PatientAuthConfirmResponseAuth model module.
 * @module model/PatientAuthConfirmResponseAuth
 * @version 0.5
 */
class PatientAuthConfirmResponseAuth {
    /**
     * Constructs a new <code>PatientAuthConfirmResponseAuth</code>.
     * depending on the purpose of auth, as specified in /auth/init, the response may include the following    1. LINK - only returns **accessToken**   2. KYC - only returns **patient**   3. KYC_AND_LINK - returns both **accessToken** and **patient** 
     * @alias module:model/PatientAuthConfirmResponseAuth
     */
    constructor() { 
        
        PatientAuthConfirmResponseAuth.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PatientAuthConfirmResponseAuth</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PatientAuthConfirmResponseAuth} obj Optional instance to populate.
     * @return {module:model/PatientAuthConfirmResponseAuth} The populated <code>PatientAuthConfirmResponseAuth</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PatientAuthConfirmResponseAuth();

            if (data.hasOwnProperty('accessToken')) {
                obj['accessToken'] = ApiClient.convertToType(data['accessToken'], 'String');
            }
            if (data.hasOwnProperty('patient')) {
                obj['patient'] = PatientDemographicResponse.constructFromObject(data['patient']);
            }
            if (data.hasOwnProperty('validity')) {
                obj['validity'] = AccessTokenValidity.constructFromObject(data['validity']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PatientAuthConfirmResponseAuth</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PatientAuthConfirmResponseAuth</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accessToken'] && !(typeof data['accessToken'] === 'string' || data['accessToken'] instanceof String)) {
            throw new Error("Expected the field `accessToken` to be a primitive type in the JSON string but got " + data['accessToken']);
        }
        // validate the optional field `patient`
        if (data['patient']) { // data not null
          PatientDemographicResponse.validateJSON(data['patient']);
        }
        // validate the optional field `validity`
        if (data['validity']) { // data not null
          AccessTokenValidity.validateJSON(data['validity']);
        }

        return true;
    }


}



/**
 * access token for initialization of subsequent action.
 * @member {String} accessToken
 */
PatientAuthConfirmResponseAuth.prototype['accessToken'] = undefined;

/**
 * @member {module:model/PatientDemographicResponse} patient
 */
PatientAuthConfirmResponseAuth.prototype['patient'] = undefined;

/**
 * @member {module:model/AccessTokenValidity} validity
 */
PatientAuthConfirmResponseAuth.prototype['validity'] = undefined;






export default PatientAuthConfirmResponseAuth;

