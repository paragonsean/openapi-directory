/**
 * Health Repository Provider Specifications for HIP
 * The following are the specifications for the APIs to be implemented at the Health Repository end if an entity is only serving the role of a HIP. The specs are essentially duplicates from the Gateway and Health Repository, but put together so as to make it clear to *HIPs* which set of APIs they should implement to participate in the network.  
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConsentManagerPatientID from './ConsentManagerPatientID';
import HIPConsentNotificationNotificationConsentDetailCareContextsInner from './HIPConsentNotificationNotificationConsentDetailCareContextsInner';
import HIPConsentNotificationNotificationConsentDetailConsentManager from './HIPConsentNotificationNotificationConsentDetailConsentManager';
import HIPConsentNotificationNotificationConsentDetailHip from './HIPConsentNotificationNotificationConsentDetailHip';
import HITypeEnum from './HITypeEnum';
import Permission from './Permission';
import UsePurpose from './UsePurpose';

/**
 * The HIPConsentNotificationNotificationConsentDetail model module.
 * @module model/HIPConsentNotificationNotificationConsentDetail
 * @version 0.5
 */
class HIPConsentNotificationNotificationConsentDetail {
    /**
     * Constructs a new <code>HIPConsentNotificationNotificationConsentDetail</code>.
     * @alias module:model/HIPConsentNotificationNotificationConsentDetail
     * @param careContexts {Array.<module:model/HIPConsentNotificationNotificationConsentDetailCareContextsInner>} 
     * @param consentId {String} 
     * @param consentManager {module:model/HIPConsentNotificationNotificationConsentDetailConsentManager} 
     * @param createdAt {Date} 
     * @param hiTypes {Array.<module:model/HITypeEnum>} 
     * @param hip {module:model/HIPConsentNotificationNotificationConsentDetailHip} 
     * @param patient {module:model/ConsentManagerPatientID} 
     * @param permission {module:model/Permission} 
     * @param purpose {module:model/UsePurpose} 
     */
    constructor(careContexts, consentId, consentManager, createdAt, hiTypes, hip, patient, permission, purpose) { 
        
        HIPConsentNotificationNotificationConsentDetail.initialize(this, careContexts, consentId, consentManager, createdAt, hiTypes, hip, patient, permission, purpose);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, careContexts, consentId, consentManager, createdAt, hiTypes, hip, patient, permission, purpose) { 
        obj['careContexts'] = careContexts;
        obj['consentId'] = consentId;
        obj['consentManager'] = consentManager;
        obj['createdAt'] = createdAt;
        obj['hiTypes'] = hiTypes;
        obj['hip'] = hip;
        obj['patient'] = patient;
        obj['permission'] = permission;
        obj['purpose'] = purpose;
    }

    /**
     * Constructs a <code>HIPConsentNotificationNotificationConsentDetail</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HIPConsentNotificationNotificationConsentDetail} obj Optional instance to populate.
     * @return {module:model/HIPConsentNotificationNotificationConsentDetail} The populated <code>HIPConsentNotificationNotificationConsentDetail</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HIPConsentNotificationNotificationConsentDetail();

            if (data.hasOwnProperty('careContexts')) {
                obj['careContexts'] = ApiClient.convertToType(data['careContexts'], [HIPConsentNotificationNotificationConsentDetailCareContextsInner]);
            }
            if (data.hasOwnProperty('consentId')) {
                obj['consentId'] = ApiClient.convertToType(data['consentId'], 'String');
            }
            if (data.hasOwnProperty('consentManager')) {
                obj['consentManager'] = HIPConsentNotificationNotificationConsentDetailConsentManager.constructFromObject(data['consentManager']);
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('hiTypes')) {
                obj['hiTypes'] = ApiClient.convertToType(data['hiTypes'], [HITypeEnum]);
            }
            if (data.hasOwnProperty('hip')) {
                obj['hip'] = HIPConsentNotificationNotificationConsentDetailHip.constructFromObject(data['hip']);
            }
            if (data.hasOwnProperty('patient')) {
                obj['patient'] = ConsentManagerPatientID.constructFromObject(data['patient']);
            }
            if (data.hasOwnProperty('permission')) {
                obj['permission'] = Permission.constructFromObject(data['permission']);
            }
            if (data.hasOwnProperty('purpose')) {
                obj['purpose'] = UsePurpose.constructFromObject(data['purpose']);
            }
            if (data.hasOwnProperty('schemaVersion')) {
                obj['schemaVersion'] = ApiClient.convertToType(data['schemaVersion'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HIPConsentNotificationNotificationConsentDetail</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HIPConsentNotificationNotificationConsentDetail</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of HIPConsentNotificationNotificationConsentDetail.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['careContexts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['careContexts'])) {
                throw new Error("Expected the field `careContexts` to be an array in the JSON data but got " + data['careContexts']);
            }
            // validate the optional field `careContexts` (array)
            for (const item of data['careContexts']) {
                HIPConsentNotificationNotificationConsentDetailCareContextsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['consentId'] && !(typeof data['consentId'] === 'string' || data['consentId'] instanceof String)) {
            throw new Error("Expected the field `consentId` to be a primitive type in the JSON string but got " + data['consentId']);
        }
        // validate the optional field `consentManager`
        if (data['consentManager']) { // data not null
          HIPConsentNotificationNotificationConsentDetailConsentManager.validateJSON(data['consentManager']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['hiTypes'])) {
            throw new Error("Expected the field `hiTypes` to be an array in the JSON data but got " + data['hiTypes']);
        }
        // validate the optional field `hip`
        if (data['hip']) { // data not null
          HIPConsentNotificationNotificationConsentDetailHip.validateJSON(data['hip']);
        }
        // validate the optional field `patient`
        if (data['patient']) { // data not null
          ConsentManagerPatientID.validateJSON(data['patient']);
        }
        // validate the optional field `permission`
        if (data['permission']) { // data not null
          Permission.validateJSON(data['permission']);
        }
        // validate the optional field `purpose`
        if (data['purpose']) { // data not null
          UsePurpose.validateJSON(data['purpose']);
        }
        // ensure the json data is a string
        if (data['schemaVersion'] && !(typeof data['schemaVersion'] === 'string' || data['schemaVersion'] instanceof String)) {
            throw new Error("Expected the field `schemaVersion` to be a primitive type in the JSON string but got " + data['schemaVersion']);
        }

        return true;
    }


}

HIPConsentNotificationNotificationConsentDetail.RequiredProperties = ["careContexts", "consentId", "consentManager", "createdAt", "hiTypes", "hip", "patient", "permission", "purpose"];

/**
 * @member {Array.<module:model/HIPConsentNotificationNotificationConsentDetailCareContextsInner>} careContexts
 */
HIPConsentNotificationNotificationConsentDetail.prototype['careContexts'] = undefined;

/**
 * @member {String} consentId
 */
HIPConsentNotificationNotificationConsentDetail.prototype['consentId'] = undefined;

/**
 * @member {module:model/HIPConsentNotificationNotificationConsentDetailConsentManager} consentManager
 */
HIPConsentNotificationNotificationConsentDetail.prototype['consentManager'] = undefined;

/**
 * @member {Date} createdAt
 */
HIPConsentNotificationNotificationConsentDetail.prototype['createdAt'] = undefined;

/**
 * @member {Array.<module:model/HITypeEnum>} hiTypes
 */
HIPConsentNotificationNotificationConsentDetail.prototype['hiTypes'] = undefined;

/**
 * @member {module:model/HIPConsentNotificationNotificationConsentDetailHip} hip
 */
HIPConsentNotificationNotificationConsentDetail.prototype['hip'] = undefined;

/**
 * @member {module:model/ConsentManagerPatientID} patient
 */
HIPConsentNotificationNotificationConsentDetail.prototype['patient'] = undefined;

/**
 * @member {module:model/Permission} permission
 */
HIPConsentNotificationNotificationConsentDetail.prototype['permission'] = undefined;

/**
 * @member {module:model/UsePurpose} purpose
 */
HIPConsentNotificationNotificationConsentDetail.prototype['purpose'] = undefined;

/**
 * @member {String} schemaVersion
 */
HIPConsentNotificationNotificationConsentDetail.prototype['schemaVersion'] = undefined;






export default HIPConsentNotificationNotificationConsentDetail;

