/**
 * Health Repository Provider Specifications for HIP
 * The following are the specifications for the APIs to be implemented at the Health Repository end if an entity is only serving the role of a HIP. The specs are essentially duplicates from the Gateway and Health Repository, but put together so as to make it clear to *HIPs* which set of APIs they should implement to participate in the network.  
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import PatientSMSNotifcationResponse from '../model/PatientSMSNotifcationResponse';

/**
* PatientNotification service.
* @module api/PatientNotificationApi
* @version 0.5
*/
export default class PatientNotificationApi {

    /**
    * Constructs a new PatientNotificationApi. 
    * @alias module:api/PatientNotificationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v05PatientsSmsOnNotifyPost operation.
     * @callback module:api/PatientNotificationApi~v05PatientsSmsOnNotifyPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Acknowledgment response for SMS notification sent to patient by HIP
     * If the SMS notification is successfully sent to patient then \"status\" will be \"ACKNOWLEDGED\" with no error. If the SMS notification is failed then \"status\" will be \"ERRORED\" with error. 
     * @param {String} authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge.
     * @param {String} X_HIP_ID Identifier of the health information provider to which the request was intended.
     * @param {module:model/PatientSMSNotifcationResponse} patientSMSNotifcationResponse 
     * @param {module:api/PatientNotificationApi~v05PatientsSmsOnNotifyPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05PatientsSmsOnNotifyPost(authorization, X_HIP_ID, patientSMSNotifcationResponse, callback) {
      let postBody = patientSMSNotifcationResponse;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05PatientsSmsOnNotifyPost");
      }
      // verify the required parameter 'X_HIP_ID' is set
      if (X_HIP_ID === undefined || X_HIP_ID === null) {
        throw new Error("Missing the required parameter 'X_HIP_ID' when calling v05PatientsSmsOnNotifyPost");
      }
      // verify the required parameter 'patientSMSNotifcationResponse' is set
      if (patientSMSNotifcationResponse === undefined || patientSMSNotifcationResponse === null) {
        throw new Error("Missing the required parameter 'patientSMSNotifcationResponse' when calling v05PatientsSmsOnNotifyPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-HIP-ID': X_HIP_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/patients/sms/on-notify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
