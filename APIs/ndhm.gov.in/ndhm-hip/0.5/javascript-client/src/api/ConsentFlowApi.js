/**
 * Health Repository Provider Specifications for HIP
 * The following are the specifications for the APIs to be implemented at the Health Repository end if an entity is only serving the role of a HIP. The specs are essentially duplicates from the Gateway and Health Repository, but put together so as to make it clear to *HIPs* which set of APIs they should implement to participate in the network.  
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import HIPConsentNotification from '../model/HIPConsentNotification';

/**
* ConsentFlow service.
* @module api/ConsentFlowApi
* @version 0.5
*/
export default class ConsentFlowApi {

    /**
    * Constructs a new ConsentFlowApi. 
    * @alias module:api/ConsentFlowApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v05ConsentsHipNotifyPost operation.
     * @callback module:api/ConsentFlowApi~v05ConsentsHipNotifyPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Consent notification
     * Notification of consents to health information providers consent request granted, consent revoked, consent expired. Only the GRANTED and REVOKED status notifications will be sent to HIP.   1. If consent is granted, status=GRANTED, then consentDetail contains the consent artefact details and signature is available.    2. If consent is revoked, then status=REVOKED, and consentId specifes which consent artefact is revoked.  
     * @param {String} authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge.
     * @param {String} X_HIP_ID Identifier of the health information provider to which the request was intended.
     * @param {module:model/HIPConsentNotification} hIPConsentNotification 
     * @param {module:api/ConsentFlowApi~v05ConsentsHipNotifyPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05ConsentsHipNotifyPost(authorization, X_HIP_ID, hIPConsentNotification, opts, callback) {
      opts = opts || {};
      let postBody = hIPConsentNotification;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05ConsentsHipNotifyPost");
      }
      // verify the required parameter 'X_HIP_ID' is set
      if (X_HIP_ID === undefined || X_HIP_ID === null) {
        throw new Error("Missing the required parameter 'X_HIP_ID' when calling v05ConsentsHipNotifyPost");
      }
      // verify the required parameter 'hIPConsentNotification' is set
      if (hIPConsentNotification === undefined || hIPConsentNotification === null) {
        throw new Error("Missing the required parameter 'hIPConsentNotification' when calling v05ConsentsHipNotifyPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-HIP-ID': X_HIP_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      let basePaths = ['https://your-hrp-server.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v0.5/consents/hip/notify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
