/**
 * Health Repository Provider Specifications for HIP
 * The following are the specifications for the APIs to be implemented at the Health Repository end if an entity is only serving the role of a HIP. The specs are essentially duplicates from the Gateway and Health Repository, but put together so as to make it clear to *HIPs* which set of APIs they should implement to participate in the network.  
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Certs from '../model/Certs';
import ErrorResponse from '../model/ErrorResponse';
import HIPConsentNotificationResponse from '../model/HIPConsentNotificationResponse';
import HIPHealthInformationRequestAcknowledgement from '../model/HIPHealthInformationRequestAcknowledgement';
import HealthInformationNotification from '../model/HealthInformationNotification';
import OpenIdConfiguration from '../model/OpenIdConfiguration';
import PatientAuthConfirmRequest from '../model/PatientAuthConfirmRequest';
import PatientAuthInitRequest from '../model/PatientAuthInitRequest';
import PatientAuthModeQueryRequest from '../model/PatientAuthModeQueryRequest';
import PatientAuthNotificationAcknowledgement from '../model/PatientAuthNotificationAcknowledgement';
import PatientCareContextLinkRequest from '../model/PatientCareContextLinkRequest';
import PatientDiscoveryResult from '../model/PatientDiscoveryResult';
import PatientLinkReferenceResult from '../model/PatientLinkReferenceResult';
import PatientLinkResult from '../model/PatientLinkResult';
import PatientSMSNotifcationRequest from '../model/PatientSMSNotifcationRequest';
import SessionRequest from '../model/SessionRequest';
import SessionResponse from '../model/SessionResponse';
import ShareProfileResult from '../model/ShareProfileResult';

/**
* Gateway service.
* @module api/GatewayApi
* @version 0.5
*/
export default class GatewayApi {

    /**
    * Constructs a new GatewayApi. 
    * @alias module:api/GatewayApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v05CareContextsOnDiscoverPost operation.
     * @callback module:api/GatewayApi~v05CareContextsOnDiscoverPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Response to patient's account discovery request
     * Result of patient care-context discovery request at HIP end. If a matching patient found with zero or more care contexts associated, it is specified as result attribute. If the prior discovery request, resulted in errors then it is specified in the error attribute. Reasons of errors can be    1. **more than one definitive match for the given request**    2. **no verified identifer was specified** 
     * @param {String} authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge.
     * @param {String} X_CM_ID Suffix of the consent manager to which the request was intended.
     * @param {module:model/PatientDiscoveryResult} patientDiscoveryResult 
     * @param {module:api/GatewayApi~v05CareContextsOnDiscoverPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05CareContextsOnDiscoverPost(authorization, X_CM_ID, patientDiscoveryResult, callback) {
      let postBody = patientDiscoveryResult;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05CareContextsOnDiscoverPost");
      }
      // verify the required parameter 'X_CM_ID' is set
      if (X_CM_ID === undefined || X_CM_ID === null) {
        throw new Error("Missing the required parameter 'X_CM_ID' when calling v05CareContextsOnDiscoverPost");
      }
      // verify the required parameter 'patientDiscoveryResult' is set
      if (patientDiscoveryResult === undefined || patientDiscoveryResult === null) {
        throw new Error("Missing the required parameter 'patientDiscoveryResult' when calling v05CareContextsOnDiscoverPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-CM-ID': X_CM_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/care-contexts/on-discover', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05CertsGet operation.
     * @callback module:api/GatewayApi~v05CertsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Certs} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get certs for JWT verification
     * @param {module:api/GatewayApi~v05CertsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Certs}
     */
    v05CertsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Certs;
      return this.apiClient.callApi(
        '/v0.5/certs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05ConsentsHipOnNotifyPost operation.
     * @callback module:api/GatewayApi~v05ConsentsHipOnNotifyPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Consent notification
     * This API is called by HIP as acknowledgement to notification of consents, in cases of consent revocation and expiration.  
     * @param {String} authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge.
     * @param {String} X_CM_ID Suffix of the consent manager to which the request was intended.
     * @param {module:model/HIPConsentNotificationResponse} hIPConsentNotificationResponse 
     * @param {module:api/GatewayApi~v05ConsentsHipOnNotifyPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05ConsentsHipOnNotifyPost(authorization, X_CM_ID, hIPConsentNotificationResponse, callback) {
      let postBody = hIPConsentNotificationResponse;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05ConsentsHipOnNotifyPost");
      }
      // verify the required parameter 'X_CM_ID' is set
      if (X_CM_ID === undefined || X_CM_ID === null) {
        throw new Error("Missing the required parameter 'X_CM_ID' when calling v05ConsentsHipOnNotifyPost");
      }
      // verify the required parameter 'hIPConsentNotificationResponse' is set
      if (hIPConsentNotificationResponse === undefined || hIPConsentNotificationResponse === null) {
        throw new Error("Missing the required parameter 'hIPConsentNotificationResponse' when calling v05ConsentsHipOnNotifyPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-CM-ID': X_CM_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/consents/hip/on-notify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05HealthInformationHipOnRequestPost operation.
     * @callback module:api/GatewayApi~v05HealthInformationHipOnRequestPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Health information data request
     * API called by HIP to acknowledge Health information request receipt. Either the **hiRequest** or **error** must be specified. **hiRequest** element returns the same transactionId as before with a status indicating that the request is acknowledged.   
     * @param {String} authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge.
     * @param {String} X_CM_ID Suffix of the consent manager to which the request was intended.
     * @param {module:model/HIPHealthInformationRequestAcknowledgement} hIPHealthInformationRequestAcknowledgement 
     * @param {module:api/GatewayApi~v05HealthInformationHipOnRequestPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05HealthInformationHipOnRequestPost(authorization, X_CM_ID, hIPHealthInformationRequestAcknowledgement, callback) {
      let postBody = hIPHealthInformationRequestAcknowledgement;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05HealthInformationHipOnRequestPost");
      }
      // verify the required parameter 'X_CM_ID' is set
      if (X_CM_ID === undefined || X_CM_ID === null) {
        throw new Error("Missing the required parameter 'X_CM_ID' when calling v05HealthInformationHipOnRequestPost");
      }
      // verify the required parameter 'hIPHealthInformationRequestAcknowledgement' is set
      if (hIPHealthInformationRequestAcknowledgement === undefined || hIPHealthInformationRequestAcknowledgement === null) {
        throw new Error("Missing the required parameter 'hIPHealthInformationRequestAcknowledgement' when calling v05HealthInformationHipOnRequestPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-CM-ID': X_CM_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/health-information/hip/on-request', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05HealthInformationNotifyPost operation.
     * @callback module:api/GatewayApi~v05HealthInformationNotifyPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Notifications corresponding to events during data flow
     * API called by HIU and HIP during data-transfer.  1. HIP on transfer of data would send **sessionStatus** - one of [TRANSFERRED, FAILED] 2. HIP would also send **hiStatus** for each *careContextReference* - on of [DELIVERED, ERRORED] 3. HIU on receipt of data would send **sessionStatus** - one of [TRANSFERRED, FAILED]. For example, FAILED when if data was not sent or if invalid data was sent 4. HIU would also send **hiStatus** for each *careContextReference* - one of [OK, ERRORED]  
     * @param {String} authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge.
     * @param {String} X_CM_ID Suffix of the consent manager to which the request was intended.
     * @param {module:model/HealthInformationNotification} healthInformationNotification 
     * @param {module:api/GatewayApi~v05HealthInformationNotifyPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05HealthInformationNotifyPost(authorization, X_CM_ID, healthInformationNotification, callback) {
      let postBody = healthInformationNotification;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05HealthInformationNotifyPost");
      }
      // verify the required parameter 'X_CM_ID' is set
      if (X_CM_ID === undefined || X_CM_ID === null) {
        throw new Error("Missing the required parameter 'X_CM_ID' when calling v05HealthInformationNotifyPost");
      }
      // verify the required parameter 'healthInformationNotification' is set
      if (healthInformationNotification === undefined || healthInformationNotification === null) {
        throw new Error("Missing the required parameter 'healthInformationNotification' when calling v05HealthInformationNotifyPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-CM-ID': X_CM_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/health-information/notify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05LinksLinkAddContextsPost operation.
     * @callback module:api/GatewayApi~v05LinksLinkAddContextsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API for HIP initiated care-context linking for patient
     * API to submit care-context to CM for HIP initiated linking. The API must accompany the \"accessToken\" fetched in the users/auth process.     1. subsequent usage for accessToken may be invalid if it was meant for one-time usage or if it expired 
     * @param {String} authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge.
     * @param {String} X_CM_ID Suffix of the consent manager to which the request was intended.
     * @param {module:model/PatientCareContextLinkRequest} patientCareContextLinkRequest 
     * @param {module:api/GatewayApi~v05LinksLinkAddContextsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05LinksLinkAddContextsPost(authorization, X_CM_ID, patientCareContextLinkRequest, callback) {
      let postBody = patientCareContextLinkRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05LinksLinkAddContextsPost");
      }
      // verify the required parameter 'X_CM_ID' is set
      if (X_CM_ID === undefined || X_CM_ID === null) {
        throw new Error("Missing the required parameter 'X_CM_ID' when calling v05LinksLinkAddContextsPost");
      }
      // verify the required parameter 'patientCareContextLinkRequest' is set
      if (patientCareContextLinkRequest === undefined || patientCareContextLinkRequest === null) {
        throw new Error("Missing the required parameter 'patientCareContextLinkRequest' when calling v05LinksLinkAddContextsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-CM-ID': X_CM_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/links/link/add-contexts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05LinksLinkOnConfirmPost operation.
     * @callback module:api/GatewayApi~v05LinksLinkOnConfirmPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Token authenticated by HIP, indicating completion of linkage of care-contexts
     * Returns a list of linked care contexts with patient reference number.   1. **Validated and linked account reference number**   2. **Validated that the token sent from Consent Manager is same as the one generated by HIP**   3. **Verified that same Consent Manager which made the link request is sending the token**   4. **Results of unmasked linked care contexts with patient reference number** 
     * @param {String} authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge.
     * @param {String} X_CM_ID Suffix of the consent manager to which the request was intended.
     * @param {module:model/PatientLinkResult} patientLinkResult 
     * @param {module:api/GatewayApi~v05LinksLinkOnConfirmPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05LinksLinkOnConfirmPost(authorization, X_CM_ID, patientLinkResult, callback) {
      let postBody = patientLinkResult;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05LinksLinkOnConfirmPost");
      }
      // verify the required parameter 'X_CM_ID' is set
      if (X_CM_ID === undefined || X_CM_ID === null) {
        throw new Error("Missing the required parameter 'X_CM_ID' when calling v05LinksLinkOnConfirmPost");
      }
      // verify the required parameter 'patientLinkResult' is set
      if (patientLinkResult === undefined || patientLinkResult === null) {
        throw new Error("Missing the required parameter 'patientLinkResult' when calling v05LinksLinkOnConfirmPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-CM-ID': X_CM_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/links/link/on-confirm', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05LinksLinkOnInitPost operation.
     * @callback module:api/GatewayApi~v05LinksLinkOnInitPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Response to patient's care context link request
     * Result of patient care-context link request from HIP end. This happens in context of previous discovery of patient found at HIP end, therefore the link requests ought to be in reference to the patient reference and care-context references previously returned by the HIP. The correlation of discovery and link request is maintained through the transactionId. HIP should have   1. **Validated transactionId in the request to check whether there was a discovery done previously, and the link request corresponds to returned patient care care context references**   2. **Before returning the response, HIP should have sent an authentication request to the patient(eg: OTP verification)**   3. **HIP should communicate the mode of authentication of a successful request**   4. **HIP subsequently should expect the token passed via /link/confirm against the link.referenceNumber passed in this call**                        The error section in the body, represents the potential errors that may have occurred. Possible reasons:   1. **Patient reference number is invalid**   2. **Care context reference numbers are invalid** 
     * @param {String} authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge.
     * @param {String} X_CM_ID Suffix of the consent manager to which the request was intended.
     * @param {module:model/PatientLinkReferenceResult} patientLinkReferenceResult 
     * @param {module:api/GatewayApi~v05LinksLinkOnInitPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05LinksLinkOnInitPost(authorization, X_CM_ID, patientLinkReferenceResult, callback) {
      let postBody = patientLinkReferenceResult;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05LinksLinkOnInitPost");
      }
      // verify the required parameter 'X_CM_ID' is set
      if (X_CM_ID === undefined || X_CM_ID === null) {
        throw new Error("Missing the required parameter 'X_CM_ID' when calling v05LinksLinkOnInitPost");
      }
      // verify the required parameter 'patientLinkReferenceResult' is set
      if (patientLinkReferenceResult === undefined || patientLinkReferenceResult === null) {
        throw new Error("Missing the required parameter 'patientLinkReferenceResult' when calling v05LinksLinkOnInitPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-CM-ID': X_CM_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/links/link/on-init', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05PatientsProfileOnSharePost operation.
     * @callback module:api/GatewayApi~v05PatientsProfileOnSharePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Response to patient's share profile request
     * Result of patient share profile request at HIP end. 
     * @param {String} authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge.
     * @param {String} X_CM_ID Suffix of the consent manager to which the request was intended.
     * @param {module:model/ShareProfileResult} shareProfileResult 
     * @param {module:api/GatewayApi~v05PatientsProfileOnSharePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05PatientsProfileOnSharePost(authorization, X_CM_ID, shareProfileResult, callback) {
      let postBody = shareProfileResult;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05PatientsProfileOnSharePost");
      }
      // verify the required parameter 'X_CM_ID' is set
      if (X_CM_ID === undefined || X_CM_ID === null) {
        throw new Error("Missing the required parameter 'X_CM_ID' when calling v05PatientsProfileOnSharePost");
      }
      // verify the required parameter 'shareProfileResult' is set
      if (shareProfileResult === undefined || shareProfileResult === null) {
        throw new Error("Missing the required parameter 'shareProfileResult' when calling v05PatientsProfileOnSharePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-CM-ID': X_CM_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/patients/profile/on-share', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05PatientsSmsNotifyPost operation.
     * @callback module:api/GatewayApi~v05PatientsSmsNotifyPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API for HIP to send SMS notifications to patients
     * API to send SMS notifications to patient with custom deeplink. 
     * @param {String} authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge.
     * @param {String} X_CM_ID Suffix of the consent manager to which the request was intended.
     * @param {module:model/PatientSMSNotifcationRequest} patientSMSNotifcationRequest 
     * @param {module:api/GatewayApi~v05PatientsSmsNotifyPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05PatientsSmsNotifyPost(authorization, X_CM_ID, patientSMSNotifcationRequest, callback) {
      let postBody = patientSMSNotifcationRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05PatientsSmsNotifyPost");
      }
      // verify the required parameter 'X_CM_ID' is set
      if (X_CM_ID === undefined || X_CM_ID === null) {
        throw new Error("Missing the required parameter 'X_CM_ID' when calling v05PatientsSmsNotifyPost");
      }
      // verify the required parameter 'patientSMSNotifcationRequest' is set
      if (patientSMSNotifcationRequest === undefined || patientSMSNotifcationRequest === null) {
        throw new Error("Missing the required parameter 'patientSMSNotifcationRequest' when calling v05PatientsSmsNotifyPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-CM-ID': X_CM_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/patients/sms/notify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05SessionsPost operation.
     * @callback module:api/GatewayApi~v05SessionsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SessionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get access token
     * @param {module:model/SessionRequest} sessionRequest 
     * @param {module:api/GatewayApi~v05SessionsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SessionResponse}
     */
    v05SessionsPost(sessionRequest, callback) {
      let postBody = sessionRequest;
      // verify the required parameter 'sessionRequest' is set
      if (sessionRequest === undefined || sessionRequest === null) {
        throw new Error("Missing the required parameter 'sessionRequest' when calling v05SessionsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = SessionResponse;
      return this.apiClient.callApi(
        '/v0.5/sessions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05UsersAuthConfirmPost operation.
     * @callback module:api/GatewayApi~v05UsersAuthConfirmPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Confirmation request sending token, otp or other authentication details from HIP/HIU for confirmation
     * This API is called by HIP/HIUs to confirm authentication of users. The transactionId returned by the previous callback API /users/auth/on-init must be sent. If Authentication is successful the callback API will send an \"access token\" for subsequent purpose specific API calls. Note only **credential.authCode** or **credential.demographic** should be sent   1. demographic details are only required for  demographic auth as of now.    2. demographic details are required only in MEDIATED cases and if the **auth.mode** so demands. e.g. if **auth.mode** is DEMOGRAPHICS. Usually for demographic authentication, the name, gender and DOB must be exactly as specified in User Account.   3. demographic.identifier is optional, however maybe required if authentication so mandates.    4. credential.authCode is required for other MEDIATED authentication like MOBILE_OTP, AADHAAR_OTP.  
     * @param {String} authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge.
     * @param {String} X_CM_ID Suffix of the consent manager to which the request was intended.
     * @param {module:model/PatientAuthConfirmRequest} patientAuthConfirmRequest 
     * @param {module:api/GatewayApi~v05UsersAuthConfirmPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05UsersAuthConfirmPost(authorization, X_CM_ID, patientAuthConfirmRequest, callback) {
      let postBody = patientAuthConfirmRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05UsersAuthConfirmPost");
      }
      // verify the required parameter 'X_CM_ID' is set
      if (X_CM_ID === undefined || X_CM_ID === null) {
        throw new Error("Missing the required parameter 'X_CM_ID' when calling v05UsersAuthConfirmPost");
      }
      // verify the required parameter 'patientAuthConfirmRequest' is set
      if (patientAuthConfirmRequest === undefined || patientAuthConfirmRequest === null) {
        throw new Error("Missing the required parameter 'patientAuthConfirmRequest' when calling v05UsersAuthConfirmPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-CM-ID': X_CM_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/users/auth/confirm', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05UsersAuthFetchModesPost operation.
     * @callback module:api/GatewayApi~v05UsersAuthFetchModesPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a patient's authentication modes relevant to specified purpose
     * This API is meant for identify supported authentication modes for a patient given a specific purpose 
     * @param {String} authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge.
     * @param {String} X_CM_ID Suffix of the consent manager to which the request was intended.
     * @param {module:model/PatientAuthModeQueryRequest} patientAuthModeQueryRequest 
     * @param {module:api/GatewayApi~v05UsersAuthFetchModesPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05UsersAuthFetchModesPost(authorization, X_CM_ID, patientAuthModeQueryRequest, callback) {
      let postBody = patientAuthModeQueryRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05UsersAuthFetchModesPost");
      }
      // verify the required parameter 'X_CM_ID' is set
      if (X_CM_ID === undefined || X_CM_ID === null) {
        throw new Error("Missing the required parameter 'X_CM_ID' when calling v05UsersAuthFetchModesPost");
      }
      // verify the required parameter 'patientAuthModeQueryRequest' is set
      if (patientAuthModeQueryRequest === undefined || patientAuthModeQueryRequest === null) {
        throw new Error("Missing the required parameter 'patientAuthModeQueryRequest' when calling v05UsersAuthFetchModesPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-CM-ID': X_CM_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/users/auth/fetch-modes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05UsersAuthInitPost operation.
     * @callback module:api/GatewayApi~v05UsersAuthInitPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initialize authentication from HIP
     * This API is called by HIPs to initiate authentication of users. A transactionId is retuned by the corresponding callback API for confirmation of user auth. 
     * @param {String} authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge.
     * @param {String} X_CM_ID Suffix of the consent manager to which the request was intended.
     * @param {module:model/PatientAuthInitRequest} patientAuthInitRequest 
     * @param {module:api/GatewayApi~v05UsersAuthInitPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05UsersAuthInitPost(authorization, X_CM_ID, patientAuthInitRequest, callback) {
      let postBody = patientAuthInitRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05UsersAuthInitPost");
      }
      // verify the required parameter 'X_CM_ID' is set
      if (X_CM_ID === undefined || X_CM_ID === null) {
        throw new Error("Missing the required parameter 'X_CM_ID' when calling v05UsersAuthInitPost");
      }
      // verify the required parameter 'patientAuthInitRequest' is set
      if (patientAuthInitRequest === undefined || patientAuthInitRequest === null) {
        throw new Error("Missing the required parameter 'patientAuthInitRequest' when calling v05UsersAuthInitPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-CM-ID': X_CM_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/users/auth/init', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05UsersAuthOnNotifyPost operation.
     * @callback module:api/GatewayApi~v05UsersAuthOnNotifyPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * callback API by HIU/HIPs as acknowledgement of auth notification
     * This API is called by HIU/HIPs to confirm acknowledgement for receipt of auth notification is case of DIRECT authentication.  
     * @param {String} authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge.
     * @param {String} X_CM_ID Suffix of the consent manager to which the request was intended.
     * @param {module:model/PatientAuthNotificationAcknowledgement} patientAuthNotificationAcknowledgement 
     * @param {module:api/GatewayApi~v05UsersAuthOnNotifyPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05UsersAuthOnNotifyPost(authorization, X_CM_ID, patientAuthNotificationAcknowledgement, callback) {
      let postBody = patientAuthNotificationAcknowledgement;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05UsersAuthOnNotifyPost");
      }
      // verify the required parameter 'X_CM_ID' is set
      if (X_CM_ID === undefined || X_CM_ID === null) {
        throw new Error("Missing the required parameter 'X_CM_ID' when calling v05UsersAuthOnNotifyPost");
      }
      // verify the required parameter 'patientAuthNotificationAcknowledgement' is set
      if (patientAuthNotificationAcknowledgement === undefined || patientAuthNotificationAcknowledgement === null) {
        throw new Error("Missing the required parameter 'patientAuthNotificationAcknowledgement' when calling v05UsersAuthOnNotifyPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-CM-ID': X_CM_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/users/auth/on-notify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05WellKnownOpenidConfigurationGet operation.
     * @callback module:api/GatewayApi~v05WellKnownOpenidConfigurationGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OpenIdConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get openid configuration
     * @param {module:api/GatewayApi~v05WellKnownOpenidConfigurationGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OpenIdConfiguration}
     */
    v05WellKnownOpenidConfigurationGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = OpenIdConfiguration;
      return this.apiClient.callApi(
        '/v0.5/.well-known/openid-configuration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
