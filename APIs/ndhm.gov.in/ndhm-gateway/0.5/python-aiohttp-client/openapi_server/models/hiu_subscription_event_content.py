# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.consent_manager_patient_id import ConsentManagerPatientID
from openapi_server.models.event_category_detail import EventCategoryDetail
from openapi_server.models.organization_representation import OrganizationRepresentation
from openapi_server import util


class HIUSubscriptionEventContent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, context: List[EventCategoryDetail]=None, hip: OrganizationRepresentation=None, patient: ConsentManagerPatientID=None):
        """HIUSubscriptionEventContent - a model defined in OpenAPI

        :param context: The context of this HIUSubscriptionEventContent.
        :param hip: The hip of this HIUSubscriptionEventContent.
        :param patient: The patient of this HIUSubscriptionEventContent.
        """
        self.openapi_types = {
            'context': List[EventCategoryDetail],
            'hip': OrganizationRepresentation,
            'patient': ConsentManagerPatientID
        }

        self.attribute_map = {
            'context': 'context',
            'hip': 'hip',
            'patient': 'patient'
        }

        self._context = context
        self._hip = hip
        self._patient = patient

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HIUSubscriptionEventContent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HIUSubscriptionEventContent of this HIUSubscriptionEventContent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def context(self):
        """Gets the context of this HIUSubscriptionEventContent.


        :return: The context of this HIUSubscriptionEventContent.
        :rtype: List[EventCategoryDetail]
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this HIUSubscriptionEventContent.


        :param context: The context of this HIUSubscriptionEventContent.
        :type context: List[EventCategoryDetail]
        """
        if context is None:
            raise ValueError("Invalid value for `context`, must not be `None`")

        self._context = context

    @property
    def hip(self):
        """Gets the hip of this HIUSubscriptionEventContent.


        :return: The hip of this HIUSubscriptionEventContent.
        :rtype: OrganizationRepresentation
        """
        return self._hip

    @hip.setter
    def hip(self, hip):
        """Sets the hip of this HIUSubscriptionEventContent.


        :param hip: The hip of this HIUSubscriptionEventContent.
        :type hip: OrganizationRepresentation
        """
        if hip is None:
            raise ValueError("Invalid value for `hip`, must not be `None`")

        self._hip = hip

    @property
    def patient(self):
        """Gets the patient of this HIUSubscriptionEventContent.


        :return: The patient of this HIUSubscriptionEventContent.
        :rtype: ConsentManagerPatientID
        """
        return self._patient

    @patient.setter
    def patient(self, patient):
        """Sets the patient of this HIUSubscriptionEventContent.


        :param patient: The patient of this HIUSubscriptionEventContent.
        :type patient: ConsentManagerPatientID
        """
        if patient is None:
            raise ValueError("Invalid value for `patient`, must not be `None`")

        self._patient = patient
