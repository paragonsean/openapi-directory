# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.authentication_mode import AuthenticationMode
from openapi_server.models.patient_auth_purpose import PatientAuthPurpose
from openapi_server import util


class PatientAuthModeQueryResponseAuth(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, modes: List[AuthenticationMode]=None, purpose: PatientAuthPurpose=None):
        """PatientAuthModeQueryResponseAuth - a model defined in OpenAPI

        :param modes: The modes of this PatientAuthModeQueryResponseAuth.
        :param purpose: The purpose of this PatientAuthModeQueryResponseAuth.
        """
        self.openapi_types = {
            'modes': List[AuthenticationMode],
            'purpose': PatientAuthPurpose
        }

        self.attribute_map = {
            'modes': 'modes',
            'purpose': 'purpose'
        }

        self._modes = modes
        self._purpose = purpose

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatientAuthModeQueryResponseAuth':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatientAuthModeQueryResponse_auth of this PatientAuthModeQueryResponseAuth.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def modes(self):
        """Gets the modes of this PatientAuthModeQueryResponseAuth.


        :return: The modes of this PatientAuthModeQueryResponseAuth.
        :rtype: List[AuthenticationMode]
        """
        return self._modes

    @modes.setter
    def modes(self, modes):
        """Sets the modes of this PatientAuthModeQueryResponseAuth.


        :param modes: The modes of this PatientAuthModeQueryResponseAuth.
        :type modes: List[AuthenticationMode]
        """
        if modes is None:
            raise ValueError("Invalid value for `modes`, must not be `None`")

        self._modes = modes

    @property
    def purpose(self):
        """Gets the purpose of this PatientAuthModeQueryResponseAuth.


        :return: The purpose of this PatientAuthModeQueryResponseAuth.
        :rtype: PatientAuthPurpose
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """Sets the purpose of this PatientAuthModeQueryResponseAuth.


        :param purpose: The purpose of this PatientAuthModeQueryResponseAuth.
        :type purpose: PatientAuthPurpose
        """
        if purpose is None:
            raise ValueError("Invalid value for `purpose`, must not be `None`")

        self._purpose = purpose
