# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Endpoint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, connection_type: str=None, use: str=None):
        """Endpoint - a model defined in OpenAPI

        :param address: The address of this Endpoint.
        :param connection_type: The connection_type of this Endpoint.
        :param use: The use of this Endpoint.
        """
        self.openapi_types = {
            'address': str,
            'connection_type': str,
            'use': str
        }

        self.attribute_map = {
            'address': 'address',
            'connection_type': 'connectionType',
            'use': 'use'
        }

        self._address = address
        self._connection_type = connection_type
        self._use = use

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Endpoint':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Endpoint of this Endpoint.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this Endpoint.


        :return: The address of this Endpoint.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Endpoint.


        :param address: The address of this Endpoint.
        :type address: str
        """

        self._address = address

    @property
    def connection_type(self):
        """Gets the connection_type of this Endpoint.


        :return: The connection_type of this Endpoint.
        :rtype: str
        """
        return self._connection_type

    @connection_type.setter
    def connection_type(self, connection_type):
        """Sets the connection_type of this Endpoint.


        :param connection_type: The connection_type of this Endpoint.
        :type connection_type: str
        """

        self._connection_type = connection_type

    @property
    def use(self):
        """Gets the use of this Endpoint.


        :return: The use of this Endpoint.
        :rtype: str
        """
        return self._use

    @use.setter
    def use(self, use):
        """Sets the use of this Endpoint.


        :param use: The use of this Endpoint.
        :type use: str
        """

        self._use = use
