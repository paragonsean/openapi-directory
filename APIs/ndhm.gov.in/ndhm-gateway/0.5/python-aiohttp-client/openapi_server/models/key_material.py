# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.key_object import KeyObject
from openapi_server import util


class KeyMaterial(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, crypto_alg: str=None, curve: str=None, dh_public_key: KeyObject=None, nonce: str=None):
        """KeyMaterial - a model defined in OpenAPI

        :param crypto_alg: The crypto_alg of this KeyMaterial.
        :param curve: The curve of this KeyMaterial.
        :param dh_public_key: The dh_public_key of this KeyMaterial.
        :param nonce: The nonce of this KeyMaterial.
        """
        self.openapi_types = {
            'crypto_alg': str,
            'curve': str,
            'dh_public_key': KeyObject,
            'nonce': str
        }

        self.attribute_map = {
            'crypto_alg': 'cryptoAlg',
            'curve': 'curve',
            'dh_public_key': 'dhPublicKey',
            'nonce': 'nonce'
        }

        self._crypto_alg = crypto_alg
        self._curve = curve
        self._dh_public_key = dh_public_key
        self._nonce = nonce

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KeyMaterial':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The keyMaterial of this KeyMaterial.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def crypto_alg(self):
        """Gets the crypto_alg of this KeyMaterial.


        :return: The crypto_alg of this KeyMaterial.
        :rtype: str
        """
        return self._crypto_alg

    @crypto_alg.setter
    def crypto_alg(self, crypto_alg):
        """Sets the crypto_alg of this KeyMaterial.


        :param crypto_alg: The crypto_alg of this KeyMaterial.
        :type crypto_alg: str
        """
        if crypto_alg is None:
            raise ValueError("Invalid value for `crypto_alg`, must not be `None`")

        self._crypto_alg = crypto_alg

    @property
    def curve(self):
        """Gets the curve of this KeyMaterial.


        :return: The curve of this KeyMaterial.
        :rtype: str
        """
        return self._curve

    @curve.setter
    def curve(self, curve):
        """Sets the curve of this KeyMaterial.


        :param curve: The curve of this KeyMaterial.
        :type curve: str
        """
        if curve is None:
            raise ValueError("Invalid value for `curve`, must not be `None`")

        self._curve = curve

    @property
    def dh_public_key(self):
        """Gets the dh_public_key of this KeyMaterial.


        :return: The dh_public_key of this KeyMaterial.
        :rtype: KeyObject
        """
        return self._dh_public_key

    @dh_public_key.setter
    def dh_public_key(self, dh_public_key):
        """Sets the dh_public_key of this KeyMaterial.


        :param dh_public_key: The dh_public_key of this KeyMaterial.
        :type dh_public_key: KeyObject
        """
        if dh_public_key is None:
            raise ValueError("Invalid value for `dh_public_key`, must not be `None`")

        self._dh_public_key = dh_public_key

    @property
    def nonce(self):
        """Gets the nonce of this KeyMaterial.


        :return: The nonce of this KeyMaterial.
        :rtype: str
        """
        return self._nonce

    @nonce.setter
    def nonce(self, nonce):
        """Sets the nonce of this KeyMaterial.


        :param nonce: The nonce of this KeyMaterial.
        :type nonce: str
        """
        if nonce is None:
            raise ValueError("Invalid value for `nonce`, must not be `None`")

        self._nonce = nonce
