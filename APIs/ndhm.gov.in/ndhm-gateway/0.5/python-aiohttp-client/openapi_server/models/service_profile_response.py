# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.endpoint import Endpoint
from openapi_server.models.service_role import ServiceRole
from openapi_server import util


class ServiceProfileResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, endpoints: List[Endpoint]=None, id: str=None, name: str=None, type: ServiceRole=None):
        """ServiceProfileResponse - a model defined in OpenAPI

        :param active: The active of this ServiceProfileResponse.
        :param endpoints: The endpoints of this ServiceProfileResponse.
        :param id: The id of this ServiceProfileResponse.
        :param name: The name of this ServiceProfileResponse.
        :param type: The type of this ServiceProfileResponse.
        """
        self.openapi_types = {
            'active': bool,
            'endpoints': List[Endpoint],
            'id': str,
            'name': str,
            'type': ServiceRole
        }

        self.attribute_map = {
            'active': 'active',
            'endpoints': 'endpoints',
            'id': 'id',
            'name': 'name',
            'type': 'type'
        }

        self._active = active
        self._endpoints = endpoints
        self._id = id
        self._name = name
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceProfileResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceProfileResponse of this ServiceProfileResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this ServiceProfileResponse.


        :return: The active of this ServiceProfileResponse.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this ServiceProfileResponse.


        :param active: The active of this ServiceProfileResponse.
        :type active: bool
        """

        self._active = active

    @property
    def endpoints(self):
        """Gets the endpoints of this ServiceProfileResponse.


        :return: The endpoints of this ServiceProfileResponse.
        :rtype: List[Endpoint]
        """
        return self._endpoints

    @endpoints.setter
    def endpoints(self, endpoints):
        """Sets the endpoints of this ServiceProfileResponse.


        :param endpoints: The endpoints of this ServiceProfileResponse.
        :type endpoints: List[Endpoint]
        """

        self._endpoints = endpoints

    @property
    def id(self):
        """Gets the id of this ServiceProfileResponse.


        :return: The id of this ServiceProfileResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ServiceProfileResponse.


        :param id: The id of this ServiceProfileResponse.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ServiceProfileResponse.


        :return: The name of this ServiceProfileResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ServiceProfileResponse.


        :param name: The name of this ServiceProfileResponse.
        :type name: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this ServiceProfileResponse.


        :return: The type of this ServiceProfileResponse.
        :rtype: ServiceRole
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ServiceProfileResponse.


        :param type: The type of this ServiceProfileResponse.
        :type type: ServiceRole
        """

        self._type = type
