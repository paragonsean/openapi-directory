# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.identifier import Identifier
from openapi_server.models.patient_gender import PatientGender
from openapi_server import util


class PatientDiscoveryRequestPatient(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gender: PatientGender=None, id: str=None, name: str=None, unverified_identifiers: List[Identifier]=None, verified_identifiers: List[Identifier]=None, year_of_birth: int=None):
        """PatientDiscoveryRequestPatient - a model defined in OpenAPI

        :param gender: The gender of this PatientDiscoveryRequestPatient.
        :param id: The id of this PatientDiscoveryRequestPatient.
        :param name: The name of this PatientDiscoveryRequestPatient.
        :param unverified_identifiers: The unverified_identifiers of this PatientDiscoveryRequestPatient.
        :param verified_identifiers: The verified_identifiers of this PatientDiscoveryRequestPatient.
        :param year_of_birth: The year_of_birth of this PatientDiscoveryRequestPatient.
        """
        self.openapi_types = {
            'gender': PatientGender,
            'id': str,
            'name': str,
            'unverified_identifiers': List[Identifier],
            'verified_identifiers': List[Identifier],
            'year_of_birth': int
        }

        self.attribute_map = {
            'gender': 'gender',
            'id': 'id',
            'name': 'name',
            'unverified_identifiers': 'unverifiedIdentifiers',
            'verified_identifiers': 'verifiedIdentifiers',
            'year_of_birth': 'yearOfBirth'
        }

        self._gender = gender
        self._id = id
        self._name = name
        self._unverified_identifiers = unverified_identifiers
        self._verified_identifiers = verified_identifiers
        self._year_of_birth = year_of_birth

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatientDiscoveryRequestPatient':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatientDiscoveryRequest_patient of this PatientDiscoveryRequestPatient.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gender(self):
        """Gets the gender of this PatientDiscoveryRequestPatient.


        :return: The gender of this PatientDiscoveryRequestPatient.
        :rtype: PatientGender
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this PatientDiscoveryRequestPatient.


        :param gender: The gender of this PatientDiscoveryRequestPatient.
        :type gender: PatientGender
        """
        if gender is None:
            raise ValueError("Invalid value for `gender`, must not be `None`")

        self._gender = gender

    @property
    def id(self):
        """Gets the id of this PatientDiscoveryRequestPatient.

        Identifier of patient at consent manager

        :return: The id of this PatientDiscoveryRequestPatient.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PatientDiscoveryRequestPatient.

        Identifier of patient at consent manager

        :param id: The id of this PatientDiscoveryRequestPatient.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this PatientDiscoveryRequestPatient.


        :return: The name of this PatientDiscoveryRequestPatient.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PatientDiscoveryRequestPatient.


        :param name: The name of this PatientDiscoveryRequestPatient.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def unverified_identifiers(self):
        """Gets the unverified_identifiers of this PatientDiscoveryRequestPatient.


        :return: The unverified_identifiers of this PatientDiscoveryRequestPatient.
        :rtype: List[Identifier]
        """
        return self._unverified_identifiers

    @unverified_identifiers.setter
    def unverified_identifiers(self, unverified_identifiers):
        """Sets the unverified_identifiers of this PatientDiscoveryRequestPatient.


        :param unverified_identifiers: The unverified_identifiers of this PatientDiscoveryRequestPatient.
        :type unverified_identifiers: List[Identifier]
        """

        self._unverified_identifiers = unverified_identifiers

    @property
    def verified_identifiers(self):
        """Gets the verified_identifiers of this PatientDiscoveryRequestPatient.


        :return: The verified_identifiers of this PatientDiscoveryRequestPatient.
        :rtype: List[Identifier]
        """
        return self._verified_identifiers

    @verified_identifiers.setter
    def verified_identifiers(self, verified_identifiers):
        """Sets the verified_identifiers of this PatientDiscoveryRequestPatient.


        :param verified_identifiers: The verified_identifiers of this PatientDiscoveryRequestPatient.
        :type verified_identifiers: List[Identifier]
        """
        if verified_identifiers is None:
            raise ValueError("Invalid value for `verified_identifiers`, must not be `None`")

        self._verified_identifiers = verified_identifiers

    @property
    def year_of_birth(self):
        """Gets the year_of_birth of this PatientDiscoveryRequestPatient.


        :return: The year_of_birth of this PatientDiscoveryRequestPatient.
        :rtype: int
        """
        return self._year_of_birth

    @year_of_birth.setter
    def year_of_birth(self, year_of_birth):
        """Sets the year_of_birth of this PatientDiscoveryRequestPatient.


        :param year_of_birth: The year_of_birth of this PatientDiscoveryRequestPatient.
        :type year_of_birth: int
        """
        if year_of_birth is None:
            raise ValueError("Invalid value for `year_of_birth`, must not be `None`")

        self._year_of_birth = year_of_birth
