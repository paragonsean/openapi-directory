# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.care_context_definition import CareContextDefinition
from openapi_server.models.hi_type_enum import HITypeEnum
from openapi_server import util


class EventCategoryDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, care_context: CareContextDefinition=None, hi_types: List[HITypeEnum]=None):
        """EventCategoryDetail - a model defined in OpenAPI

        :param care_context: The care_context of this EventCategoryDetail.
        :param hi_types: The hi_types of this EventCategoryDetail.
        """
        self.openapi_types = {
            'care_context': CareContextDefinition,
            'hi_types': List[HITypeEnum]
        }

        self.attribute_map = {
            'care_context': 'careContext',
            'hi_types': 'hiTypes'
        }

        self._care_context = care_context
        self._hi_types = hi_types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventCategoryDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventCategoryDetail of this EventCategoryDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def care_context(self):
        """Gets the care_context of this EventCategoryDetail.


        :return: The care_context of this EventCategoryDetail.
        :rtype: CareContextDefinition
        """
        return self._care_context

    @care_context.setter
    def care_context(self, care_context):
        """Sets the care_context of this EventCategoryDetail.


        :param care_context: The care_context of this EventCategoryDetail.
        :type care_context: CareContextDefinition
        """
        if care_context is None:
            raise ValueError("Invalid value for `care_context`, must not be `None`")

        self._care_context = care_context

    @property
    def hi_types(self):
        """Gets the hi_types of this EventCategoryDetail.


        :return: The hi_types of this EventCategoryDetail.
        :rtype: List[HITypeEnum]
        """
        return self._hi_types

    @hi_types.setter
    def hi_types(self, hi_types):
        """Sets the hi_types of this EventCategoryDetail.


        :param hi_types: The hi_types of this EventCategoryDetail.
        :type hi_types: List[HITypeEnum]
        """
        if hi_types is None:
            raise ValueError("Invalid value for `hi_types`, must not be `None`")

        self._hi_types = hi_types
