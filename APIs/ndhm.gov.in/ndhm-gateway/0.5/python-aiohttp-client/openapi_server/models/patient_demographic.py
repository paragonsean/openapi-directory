# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.auth_confirm_identifier import AuthConfirmIdentifier
from openapi_server.models.patient_gender import PatientGender
from openapi_server import util


class PatientDemographic(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, date_of_birth: str=None, gender: PatientGender=None, identifier: AuthConfirmIdentifier=None, name: str=None):
        """PatientDemographic - a model defined in OpenAPI

        :param date_of_birth: The date_of_birth of this PatientDemographic.
        :param gender: The gender of this PatientDemographic.
        :param identifier: The identifier of this PatientDemographic.
        :param name: The name of this PatientDemographic.
        """
        self.openapi_types = {
            'date_of_birth': str,
            'gender': PatientGender,
            'identifier': AuthConfirmIdentifier,
            'name': str
        }

        self.attribute_map = {
            'date_of_birth': 'dateOfBirth',
            'gender': 'gender',
            'identifier': 'identifier',
            'name': 'name'
        }

        self._date_of_birth = date_of_birth
        self._gender = gender
        self._identifier = identifier
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatientDemographic':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatientDemographic of this PatientDemographic.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this PatientDemographic.

        date of birth in YYYY-MM-DD format.

        :return: The date_of_birth of this PatientDemographic.
        :rtype: str
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this PatientDemographic.

        date of birth in YYYY-MM-DD format.

        :param date_of_birth: The date_of_birth of this PatientDemographic.
        :type date_of_birth: str
        """
        if date_of_birth is None:
            raise ValueError("Invalid value for `date_of_birth`, must not be `None`")

        self._date_of_birth = date_of_birth

    @property
    def gender(self):
        """Gets the gender of this PatientDemographic.


        :return: The gender of this PatientDemographic.
        :rtype: PatientGender
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this PatientDemographic.


        :param gender: The gender of this PatientDemographic.
        :type gender: PatientGender
        """
        if gender is None:
            raise ValueError("Invalid value for `gender`, must not be `None`")

        self._gender = gender

    @property
    def identifier(self):
        """Gets the identifier of this PatientDemographic.


        :return: The identifier of this PatientDemographic.
        :rtype: AuthConfirmIdentifier
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this PatientDemographic.


        :param identifier: The identifier of this PatientDemographic.
        :type identifier: AuthConfirmIdentifier
        """

        self._identifier = identifier

    @property
    def name(self):
        """Gets the name of this PatientDemographic.


        :return: The name of this PatientDemographic.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PatientDemographic.


        :param name: The name of this PatientDemographic.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
