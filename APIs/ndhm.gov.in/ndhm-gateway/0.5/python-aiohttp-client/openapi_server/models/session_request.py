# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SessionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_id: str=None, client_secret: str=None, grant_type: str=None, refresh_token: str=None):
        """SessionRequest - a model defined in OpenAPI

        :param client_id: The client_id of this SessionRequest.
        :param client_secret: The client_secret of this SessionRequest.
        :param grant_type: The grant_type of this SessionRequest.
        :param refresh_token: The refresh_token of this SessionRequest.
        """
        self.openapi_types = {
            'client_id': str,
            'client_secret': str,
            'grant_type': str,
            'refresh_token': str
        }

        self.attribute_map = {
            'client_id': 'clientId',
            'client_secret': 'clientSecret',
            'grant_type': 'grantType',
            'refresh_token': 'refreshToken'
        }

        self._client_id = client_id
        self._client_secret = client_secret
        self._grant_type = grant_type
        self._refresh_token = refresh_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SessionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SessionRequest of this SessionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_id(self):
        """Gets the client_id of this SessionRequest.


        :return: The client_id of this SessionRequest.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this SessionRequest.


        :param client_id: The client_id of this SessionRequest.
        :type client_id: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")

        self._client_id = client_id

    @property
    def client_secret(self):
        """Gets the client_secret of this SessionRequest.


        :return: The client_secret of this SessionRequest.
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this SessionRequest.


        :param client_secret: The client_secret of this SessionRequest.
        :type client_secret: str
        """
        if client_secret is None:
            raise ValueError("Invalid value for `client_secret`, must not be `None`")

        self._client_secret = client_secret

    @property
    def grant_type(self):
        """Gets the grant_type of this SessionRequest.


        :return: The grant_type of this SessionRequest.
        :rtype: str
        """
        return self._grant_type

    @grant_type.setter
    def grant_type(self, grant_type):
        """Sets the grant_type of this SessionRequest.


        :param grant_type: The grant_type of this SessionRequest.
        :type grant_type: str
        """
        allowed_values = ["client_credentials", "refresh_token"]  # noqa: E501
        if grant_type not in allowed_values:
            raise ValueError(
                "Invalid value for `grant_type` ({0}), must be one of {1}"
                .format(grant_type, allowed_values)
            )

        self._grant_type = grant_type

    @property
    def refresh_token(self):
        """Gets the refresh_token of this SessionRequest.


        :return: The refresh_token of this SessionRequest.
        :rtype: str
        """
        return self._refresh_token

    @refresh_token.setter
    def refresh_token(self, refresh_token):
        """Sets the refresh_token of this SessionRequest.


        :param refresh_token: The refresh_token of this SessionRequest.
        :type refresh_token: str
        """

        self._refresh_token = refresh_token
