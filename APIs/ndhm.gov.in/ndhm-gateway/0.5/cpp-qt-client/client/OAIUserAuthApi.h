/**
 * Gateway
 * Gateway is the hub that routes/orchestrates the interaction between consent managers and API bridges. There are 5 categories of APIs; discovery, link, consent flow, data flow and  monitoring. To reflect the consumers of APIs, the above apis are also categorized under cm facing, hiu facing and hip facing  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUserAuthApi_H
#define OAI_OAIUserAuthApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAIPatientAuthConfirmRequest.h"
#include "OAIPatientAuthConfirmResponse.h"
#include "OAIPatientAuthInitRequest.h"
#include "OAIPatientAuthInitResponse.h"
#include "OAIPatientAuthModeQueryRequest.h"
#include "OAIPatientAuthModeQueryResponse.h"
#include "OAIPatientAuthNotification.h"
#include "OAIPatientAuthNotificationAcknowledgement.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUserAuthApi : public QObject {
    Q_OBJECT

public:
    OAIUserAuthApi(const int timeOut = 0);
    ~OAIUserAuthApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_cm_id QString [required]
    * @param[in]  oai_patient_auth_confirm_request OAIPatientAuthConfirmRequest [required]
    */
    virtual void v05UsersAuthConfirmPost(const QString &authorization, const QString &x_cm_id, const OAIPatientAuthConfirmRequest &oai_patient_auth_confirm_request);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_cm_id QString [required]
    * @param[in]  oai_patient_auth_mode_query_request OAIPatientAuthModeQueryRequest [required]
    */
    virtual void v05UsersAuthFetchModesPost(const QString &authorization, const QString &x_cm_id, const OAIPatientAuthModeQueryRequest &oai_patient_auth_mode_query_request);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_cm_id QString [required]
    * @param[in]  oai_patient_auth_init_request OAIPatientAuthInitRequest [required]
    */
    virtual void v05UsersAuthInitPost(const QString &authorization, const QString &x_cm_id, const OAIPatientAuthInitRequest &oai_patient_auth_init_request);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_hip_id QString [required]
    * @param[in]  x_hiu_id QString [required]
    * @param[in]  oai_patient_auth_notification OAIPatientAuthNotification [required]
    */
    virtual void v05UsersAuthNotifyPost(const QString &authorization, const QString &x_hip_id, const QString &x_hiu_id, const OAIPatientAuthNotification &oai_patient_auth_notification);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_hip_id QString [required]
    * @param[in]  x_hiu_id QString [required]
    * @param[in]  oai_patient_auth_confirm_response OAIPatientAuthConfirmResponse [required]
    */
    virtual void v05UsersAuthOnConfirmPost(const QString &authorization, const QString &x_hip_id, const QString &x_hiu_id, const OAIPatientAuthConfirmResponse &oai_patient_auth_confirm_response);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_hip_id QString [required]
    * @param[in]  x_hiu_id QString [required]
    * @param[in]  oai_patient_auth_mode_query_response OAIPatientAuthModeQueryResponse [required]
    */
    virtual void v05UsersAuthOnFetchModesPost(const QString &authorization, const QString &x_hip_id, const QString &x_hiu_id, const OAIPatientAuthModeQueryResponse &oai_patient_auth_mode_query_response);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_hip_id QString [required]
    * @param[in]  x_hiu_id QString [required]
    * @param[in]  oai_patient_auth_init_response OAIPatientAuthInitResponse [required]
    */
    virtual void v05UsersAuthOnInitPost(const QString &authorization, const QString &x_hip_id, const QString &x_hiu_id, const OAIPatientAuthInitResponse &oai_patient_auth_init_response);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_cm_id QString [required]
    * @param[in]  oai_patient_auth_notification_acknowledgement OAIPatientAuthNotificationAcknowledgement [required]
    */
    virtual void v05UsersAuthOnNotifyPost(const QString &authorization, const QString &x_cm_id, const OAIPatientAuthNotificationAcknowledgement &oai_patient_auth_notification_acknowledgement);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void v05UsersAuthConfirmPostCallback(OAIHttpRequestWorker *worker);
    void v05UsersAuthFetchModesPostCallback(OAIHttpRequestWorker *worker);
    void v05UsersAuthInitPostCallback(OAIHttpRequestWorker *worker);
    void v05UsersAuthNotifyPostCallback(OAIHttpRequestWorker *worker);
    void v05UsersAuthOnConfirmPostCallback(OAIHttpRequestWorker *worker);
    void v05UsersAuthOnFetchModesPostCallback(OAIHttpRequestWorker *worker);
    void v05UsersAuthOnInitPostCallback(OAIHttpRequestWorker *worker);
    void v05UsersAuthOnNotifyPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void v05UsersAuthConfirmPostSignal();
    void v05UsersAuthFetchModesPostSignal();
    void v05UsersAuthInitPostSignal();
    void v05UsersAuthNotifyPostSignal();
    void v05UsersAuthOnConfirmPostSignal();
    void v05UsersAuthOnFetchModesPostSignal();
    void v05UsersAuthOnInitPostSignal();
    void v05UsersAuthOnNotifyPostSignal();


    void v05UsersAuthConfirmPostSignalFull(OAIHttpRequestWorker *worker);
    void v05UsersAuthFetchModesPostSignalFull(OAIHttpRequestWorker *worker);
    void v05UsersAuthInitPostSignalFull(OAIHttpRequestWorker *worker);
    void v05UsersAuthNotifyPostSignalFull(OAIHttpRequestWorker *worker);
    void v05UsersAuthOnConfirmPostSignalFull(OAIHttpRequestWorker *worker);
    void v05UsersAuthOnFetchModesPostSignalFull(OAIHttpRequestWorker *worker);
    void v05UsersAuthOnInitPostSignalFull(OAIHttpRequestWorker *worker);
    void v05UsersAuthOnNotifyPostSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use v05UsersAuthConfirmPostSignalError() instead")
    void v05UsersAuthConfirmPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v05UsersAuthConfirmPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05UsersAuthFetchModesPostSignalError() instead")
    void v05UsersAuthFetchModesPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v05UsersAuthFetchModesPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05UsersAuthInitPostSignalError() instead")
    void v05UsersAuthInitPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v05UsersAuthInitPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05UsersAuthNotifyPostSignalError() instead")
    void v05UsersAuthNotifyPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v05UsersAuthNotifyPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05UsersAuthOnConfirmPostSignalError() instead")
    void v05UsersAuthOnConfirmPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v05UsersAuthOnConfirmPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05UsersAuthOnFetchModesPostSignalError() instead")
    void v05UsersAuthOnFetchModesPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v05UsersAuthOnFetchModesPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05UsersAuthOnInitPostSignalError() instead")
    void v05UsersAuthOnInitPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v05UsersAuthOnInitPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05UsersAuthOnNotifyPostSignalError() instead")
    void v05UsersAuthOnNotifyPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v05UsersAuthOnNotifyPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use v05UsersAuthConfirmPostSignalErrorFull() instead")
    void v05UsersAuthConfirmPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v05UsersAuthConfirmPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05UsersAuthFetchModesPostSignalErrorFull() instead")
    void v05UsersAuthFetchModesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v05UsersAuthFetchModesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05UsersAuthInitPostSignalErrorFull() instead")
    void v05UsersAuthInitPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v05UsersAuthInitPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05UsersAuthNotifyPostSignalErrorFull() instead")
    void v05UsersAuthNotifyPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v05UsersAuthNotifyPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05UsersAuthOnConfirmPostSignalErrorFull() instead")
    void v05UsersAuthOnConfirmPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v05UsersAuthOnConfirmPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05UsersAuthOnFetchModesPostSignalErrorFull() instead")
    void v05UsersAuthOnFetchModesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v05UsersAuthOnFetchModesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05UsersAuthOnInitPostSignalErrorFull() instead")
    void v05UsersAuthOnInitPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v05UsersAuthOnInitPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05UsersAuthOnNotifyPostSignalErrorFull() instead")
    void v05UsersAuthOnNotifyPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v05UsersAuthOnNotifyPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
