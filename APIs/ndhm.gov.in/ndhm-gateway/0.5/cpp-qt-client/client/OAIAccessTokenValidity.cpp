/**
 * Gateway
 * Gateway is the hub that routes/orchestrates the interaction between consent managers and API bridges. There are 5 categories of APIs; discovery, link, consent flow, data flow and  monitoring. To reflect the consumers of APIs, the above apis are also categorized under cm facing, hiu facing and hip facing  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccessTokenValidity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccessTokenValidity::OAIAccessTokenValidity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccessTokenValidity::OAIAccessTokenValidity() {
    this->initializeModel();
}

OAIAccessTokenValidity::~OAIAccessTokenValidity() {}

void OAIAccessTokenValidity::initializeModel() {

    m_expiry_isSet = false;
    m_expiry_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_purpose_isSet = false;
    m_purpose_isValid = false;

    m_requester_isSet = false;
    m_requester_isValid = false;
}

void OAIAccessTokenValidity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccessTokenValidity::fromJsonObject(QJsonObject json) {

    m_expiry_isValid = ::OpenAPI::fromJsonValue(m_expiry, json[QString("expiry")]);
    m_expiry_isSet = !json[QString("expiry")].isNull() && m_expiry_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_purpose_isValid = ::OpenAPI::fromJsonValue(m_purpose, json[QString("purpose")]);
    m_purpose_isSet = !json[QString("purpose")].isNull() && m_purpose_isValid;

    m_requester_isValid = ::OpenAPI::fromJsonValue(m_requester, json[QString("requester")]);
    m_requester_isSet = !json[QString("requester")].isNull() && m_requester_isValid;
}

QString OAIAccessTokenValidity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccessTokenValidity::asJsonObject() const {
    QJsonObject obj;
    if (m_expiry_isSet) {
        obj.insert(QString("expiry"), ::OpenAPI::toJsonValue(m_expiry));
    }
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_purpose.isSet()) {
        obj.insert(QString("purpose"), ::OpenAPI::toJsonValue(m_purpose));
    }
    if (m_requester.isSet()) {
        obj.insert(QString("requester"), ::OpenAPI::toJsonValue(m_requester));
    }
    return obj;
}

QDateTime OAIAccessTokenValidity::getExpiry() const {
    return m_expiry;
}
void OAIAccessTokenValidity::setExpiry(const QDateTime &expiry) {
    m_expiry = expiry;
    m_expiry_isSet = true;
}

bool OAIAccessTokenValidity::is_expiry_Set() const{
    return m_expiry_isSet;
}

bool OAIAccessTokenValidity::is_expiry_Valid() const{
    return m_expiry_isValid;
}

qint32 OAIAccessTokenValidity::getLimit() const {
    return m_limit;
}
void OAIAccessTokenValidity::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIAccessTokenValidity::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIAccessTokenValidity::is_limit_Valid() const{
    return m_limit_isValid;
}

OAIPatientAuthPurpose OAIAccessTokenValidity::getPurpose() const {
    return m_purpose;
}
void OAIAccessTokenValidity::setPurpose(const OAIPatientAuthPurpose &purpose) {
    m_purpose = purpose;
    m_purpose_isSet = true;
}

bool OAIAccessTokenValidity::is_purpose_Set() const{
    return m_purpose_isSet;
}

bool OAIAccessTokenValidity::is_purpose_Valid() const{
    return m_purpose_isValid;
}

OAIPatientAuthRequester OAIAccessTokenValidity::getRequester() const {
    return m_requester;
}
void OAIAccessTokenValidity::setRequester(const OAIPatientAuthRequester &requester) {
    m_requester = requester;
    m_requester_isSet = true;
}

bool OAIAccessTokenValidity::is_requester_Set() const{
    return m_requester_isSet;
}

bool OAIAccessTokenValidity::is_requester_Valid() const{
    return m_requester_isValid;
}

bool OAIAccessTokenValidity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expiry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purpose.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_requester.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccessTokenValidity::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_expiry_isValid && m_limit_isValid && m_purpose_isValid && m_requester_isValid && true;
}

} // namespace OpenAPI
