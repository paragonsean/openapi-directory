/**
 * Gateway
 * Gateway is the hub that routes/orchestrates the interaction between consent managers and API bridges. There are 5 categories of APIs; discovery, link, consent flow, data flow and  monitoring. To reflect the consumers of APIs, the above apis are also categorized under cm facing, hiu facing and hip facing  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHealthInformationNotification_notification_statusNotification_statusResponses_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHealthInformationNotification_notification_statusNotification_statusResponses_inner::OAIHealthInformationNotification_notification_statusNotification_statusResponses_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHealthInformationNotification_notification_statusNotification_statusResponses_inner::OAIHealthInformationNotification_notification_statusNotification_statusResponses_inner() {
    this->initializeModel();
}

OAIHealthInformationNotification_notification_statusNotification_statusResponses_inner::~OAIHealthInformationNotification_notification_statusNotification_statusResponses_inner() {}

void OAIHealthInformationNotification_notification_statusNotification_statusResponses_inner::initializeModel() {

    m_care_context_reference_isSet = false;
    m_care_context_reference_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_hi_status_isSet = false;
    m_hi_status_isValid = false;
}

void OAIHealthInformationNotification_notification_statusNotification_statusResponses_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHealthInformationNotification_notification_statusNotification_statusResponses_inner::fromJsonObject(QJsonObject json) {

    m_care_context_reference_isValid = ::OpenAPI::fromJsonValue(m_care_context_reference, json[QString("careContextReference")]);
    m_care_context_reference_isSet = !json[QString("careContextReference")].isNull() && m_care_context_reference_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_hi_status_isValid = ::OpenAPI::fromJsonValue(m_hi_status, json[QString("hiStatus")]);
    m_hi_status_isSet = !json[QString("hiStatus")].isNull() && m_hi_status_isValid;
}

QString OAIHealthInformationNotification_notification_statusNotification_statusResponses_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHealthInformationNotification_notification_statusNotification_statusResponses_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_care_context_reference_isSet) {
        obj.insert(QString("careContextReference"), ::OpenAPI::toJsonValue(m_care_context_reference));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_hi_status_isSet) {
        obj.insert(QString("hiStatus"), ::OpenAPI::toJsonValue(m_hi_status));
    }
    return obj;
}

QString OAIHealthInformationNotification_notification_statusNotification_statusResponses_inner::getCareContextReference() const {
    return m_care_context_reference;
}
void OAIHealthInformationNotification_notification_statusNotification_statusResponses_inner::setCareContextReference(const QString &care_context_reference) {
    m_care_context_reference = care_context_reference;
    m_care_context_reference_isSet = true;
}

bool OAIHealthInformationNotification_notification_statusNotification_statusResponses_inner::is_care_context_reference_Set() const{
    return m_care_context_reference_isSet;
}

bool OAIHealthInformationNotification_notification_statusNotification_statusResponses_inner::is_care_context_reference_Valid() const{
    return m_care_context_reference_isValid;
}

QString OAIHealthInformationNotification_notification_statusNotification_statusResponses_inner::getDescription() const {
    return m_description;
}
void OAIHealthInformationNotification_notification_statusNotification_statusResponses_inner::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIHealthInformationNotification_notification_statusNotification_statusResponses_inner::is_description_Set() const{
    return m_description_isSet;
}

bool OAIHealthInformationNotification_notification_statusNotification_statusResponses_inner::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIHealthInformationNotification_notification_statusNotification_statusResponses_inner::getHiStatus() const {
    return m_hi_status;
}
void OAIHealthInformationNotification_notification_statusNotification_statusResponses_inner::setHiStatus(const QString &hi_status) {
    m_hi_status = hi_status;
    m_hi_status_isSet = true;
}

bool OAIHealthInformationNotification_notification_statusNotification_statusResponses_inner::is_hi_status_Set() const{
    return m_hi_status_isSet;
}

bool OAIHealthInformationNotification_notification_statusNotification_statusResponses_inner::is_hi_status_Valid() const{
    return m_hi_status_isValid;
}

bool OAIHealthInformationNotification_notification_statusNotification_statusResponses_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_care_context_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hi_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHealthInformationNotification_notification_statusNotification_statusResponses_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_care_context_reference_isValid && m_hi_status_isValid && true;
}

} // namespace OpenAPI
