/**
 * Gateway
 * Gateway is the hub that routes/orchestrates the interaction between consent managers and API bridges. There are 5 categories of APIs; discovery, link, consent flow, data flow and  monitoring. To reflect the consumers of APIs, the above apis are also categorized under cm facing, hiu facing and hip facing  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIConsentArtefactResponse_consent_consentDetail.h
 *
 * 
 */

#ifndef OAIConsentArtefactResponse_consent_consentDetail_H
#define OAIConsentArtefactResponse_consent_consentDetail_H

#include <QJsonObject>

#include "OAIConsentArtefactResponse_consent_consentDetail_careContexts_inner.h"
#include "OAIConsentArtefactResponse_consent_consentDetail_consentManager.h"
#include "OAIConsentArtefactResponse_consent_consentDetail_hip.h"
#include "OAIConsentArtefactResponse_consent_consentDetail_hiu.h"
#include "OAIConsentManagerPatientID.h"
#include "OAIHITypeEnum.h"
#include "OAIPermission.h"
#include "OAIRequester.h"
#include "OAIUsePurpose.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIConsentArtefactResponse_consent_consentDetail_careContexts_inner;
class OAIConsentArtefactResponse_consent_consentDetail_consentManager;
class OAIConsentArtefactResponse_consent_consentDetail_hip;
class OAIConsentArtefactResponse_consent_consentDetail_hiu;
class OAIConsentManagerPatientID;
class OAIPermission;
class OAIUsePurpose;
class OAIRequester;

class OAIConsentArtefactResponse_consent_consentDetail : public OAIObject {
public:
    OAIConsentArtefactResponse_consent_consentDetail();
    OAIConsentArtefactResponse_consent_consentDetail(QString json);
    ~OAIConsentArtefactResponse_consent_consentDetail() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIConsentArtefactResponse_consent_consentDetail_careContexts_inner> getCareContexts() const;
    void setCareContexts(const QList<OAIConsentArtefactResponse_consent_consentDetail_careContexts_inner> &care_contexts);
    bool is_care_contexts_Set() const;
    bool is_care_contexts_Valid() const;

    QString getConsentId() const;
    void setConsentId(const QString &consent_id);
    bool is_consent_id_Set() const;
    bool is_consent_id_Valid() const;

    OAIConsentArtefactResponse_consent_consentDetail_consentManager getConsentManager() const;
    void setConsentManager(const OAIConsentArtefactResponse_consent_consentDetail_consentManager &consent_manager);
    bool is_consent_manager_Set() const;
    bool is_consent_manager_Valid() const;

    QDateTime getCreatedAt() const;
    void setCreatedAt(const QDateTime &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QList<OAIHITypeEnum> getHiTypes() const;
    void setHiTypes(const QList<OAIHITypeEnum> &hi_types);
    bool is_hi_types_Set() const;
    bool is_hi_types_Valid() const;

    OAIConsentArtefactResponse_consent_consentDetail_hip getHip() const;
    void setHip(const OAIConsentArtefactResponse_consent_consentDetail_hip &hip);
    bool is_hip_Set() const;
    bool is_hip_Valid() const;

    OAIConsentArtefactResponse_consent_consentDetail_hiu getHiu() const;
    void setHiu(const OAIConsentArtefactResponse_consent_consentDetail_hiu &hiu);
    bool is_hiu_Set() const;
    bool is_hiu_Valid() const;

    OAIConsentManagerPatientID getPatient() const;
    void setPatient(const OAIConsentManagerPatientID &patient);
    bool is_patient_Set() const;
    bool is_patient_Valid() const;

    OAIPermission getPermission() const;
    void setPermission(const OAIPermission &permission);
    bool is_permission_Set() const;
    bool is_permission_Valid() const;

    OAIUsePurpose getPurpose() const;
    void setPurpose(const OAIUsePurpose &purpose);
    bool is_purpose_Set() const;
    bool is_purpose_Valid() const;

    OAIRequester getRequester() const;
    void setRequester(const OAIRequester &requester);
    bool is_requester_Set() const;
    bool is_requester_Valid() const;

    QString getSchemaVersion() const;
    void setSchemaVersion(const QString &schema_version);
    bool is_schema_version_Set() const;
    bool is_schema_version_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIConsentArtefactResponse_consent_consentDetail_careContexts_inner> m_care_contexts;
    bool m_care_contexts_isSet;
    bool m_care_contexts_isValid;

    QString m_consent_id;
    bool m_consent_id_isSet;
    bool m_consent_id_isValid;

    OAIConsentArtefactResponse_consent_consentDetail_consentManager m_consent_manager;
    bool m_consent_manager_isSet;
    bool m_consent_manager_isValid;

    QDateTime m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QList<OAIHITypeEnum> m_hi_types;
    bool m_hi_types_isSet;
    bool m_hi_types_isValid;

    OAIConsentArtefactResponse_consent_consentDetail_hip m_hip;
    bool m_hip_isSet;
    bool m_hip_isValid;

    OAIConsentArtefactResponse_consent_consentDetail_hiu m_hiu;
    bool m_hiu_isSet;
    bool m_hiu_isValid;

    OAIConsentManagerPatientID m_patient;
    bool m_patient_isSet;
    bool m_patient_isValid;

    OAIPermission m_permission;
    bool m_permission_isSet;
    bool m_permission_isValid;

    OAIUsePurpose m_purpose;
    bool m_purpose_isSet;
    bool m_purpose_isValid;

    OAIRequester m_requester;
    bool m_requester_isSet;
    bool m_requester_isValid;

    QString m_schema_version;
    bool m_schema_version_isSet;
    bool m_schema_version_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIConsentArtefactResponse_consent_consentDetail)

#endif // OAIConsentArtefactResponse_consent_consentDetail_H
