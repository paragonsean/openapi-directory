/**
 * Gateway
 * Gateway is the hub that routes/orchestrates the interaction between consent managers and API bridges. There are 5 categories of APIs; discovery, link, consent flow, data flow and  monitoring. To reflect the consumers of APIs, the above apis are also categorized under cm facing, hiu facing and hip facing  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHiuFacingApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIHiuFacingApi::OAIHiuFacingApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIHiuFacingApi::~OAIHiuFacingApi() {
}

void OAIHiuFacingApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://dev.ndhm.gov.in/gateway"),
    "Sandbox",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("v05ConsentRequestsInitPost", defaultConf);
    _serverIndices.insert("v05ConsentRequestsInitPost", 0);
    _serverConfigs.insert("v05ConsentRequestsStatusPost", defaultConf);
    _serverIndices.insert("v05ConsentRequestsStatusPost", 0);
    _serverConfigs.insert("v05ConsentsFetchPost", defaultConf);
    _serverIndices.insert("v05ConsentsFetchPost", 0);
    _serverConfigs.insert("v05ConsentsHiuOnNotifyPost", defaultConf);
    _serverIndices.insert("v05ConsentsHiuOnNotifyPost", 0);
    _serverConfigs.insert("v05HealthInformationCmRequestPost", defaultConf);
    _serverIndices.insert("v05HealthInformationCmRequestPost", 0);
    _serverConfigs.insert("v05HealthInformationNotifyPost", defaultConf);
    _serverIndices.insert("v05HealthInformationNotifyPost", 0);
    _serverConfigs.insert("v05PatientsFindPost", defaultConf);
    _serverIndices.insert("v05PatientsFindPost", 0);
    _serverConfigs.insert("v05SubscriptionRequestsCmInitPost", defaultConf);
    _serverIndices.insert("v05SubscriptionRequestsCmInitPost", 0);
    _serverConfigs.insert("v05SubscriptionRequestsHiuOnNotifyPost", defaultConf);
    _serverIndices.insert("v05SubscriptionRequestsHiuOnNotifyPost", 0);
    _serverConfigs.insert("v05SubscriptionsHiuOnNotifyPost", defaultConf);
    _serverIndices.insert("v05SubscriptionsHiuOnNotifyPost", 0);
    _serverConfigs.insert("v05UsersAuthConfirmPost", defaultConf);
    _serverIndices.insert("v05UsersAuthConfirmPost", 0);
    _serverConfigs.insert("v05UsersAuthFetchModesPost", defaultConf);
    _serverIndices.insert("v05UsersAuthFetchModesPost", 0);
    _serverConfigs.insert("v05UsersAuthInitPost", defaultConf);
    _serverIndices.insert("v05UsersAuthInitPost", 0);
    _serverConfigs.insert("v05UsersAuthOnNotifyPost", defaultConf);
    _serverIndices.insert("v05UsersAuthOnNotifyPost", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIHiuFacingApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIHiuFacingApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIHiuFacingApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIHiuFacingApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIHiuFacingApi::setUsername(const QString &username) {
    _username = username;
}

void OAIHiuFacingApi::setPassword(const QString &password) {
    _password = password;
}


void OAIHiuFacingApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIHiuFacingApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIHiuFacingApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIHiuFacingApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIHiuFacingApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIHiuFacingApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIHiuFacingApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIHiuFacingApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIHiuFacingApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIHiuFacingApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIHiuFacingApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIHiuFacingApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIHiuFacingApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIHiuFacingApi::v05ConsentRequestsInitPost(const QString &authorization, const QString &x_cm_id, const OAIConsentRequest &oai_consent_request) {
    QString fullPath = QString(_serverConfigs["v05ConsentRequestsInitPost"][_serverIndices.value("v05ConsentRequestsInitPost")].URL()+"/v0.5/consent-requests/init");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_consent_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_cm_id).isEmpty()) {
            input.headers.insert("X-CM-ID", ::OpenAPI::toStringValue(x_cm_id));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIHiuFacingApi::v05ConsentRequestsInitPostCallback);
    connect(this, &OAIHiuFacingApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIHiuFacingApi::v05ConsentRequestsInitPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT v05ConsentRequestsInitPostSignal();
        Q_EMIT v05ConsentRequestsInitPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT v05ConsentRequestsInitPostSignalE(error_type, error_str);
        Q_EMIT v05ConsentRequestsInitPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT v05ConsentRequestsInitPostSignalError(error_type, error_str);
        Q_EMIT v05ConsentRequestsInitPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIHiuFacingApi::v05ConsentRequestsStatusPost(const QString &authorization, const QString &x_cm_id, const OAIConsentRequestStatusRequest &oai_consent_request_status_request) {
    QString fullPath = QString(_serverConfigs["v05ConsentRequestsStatusPost"][_serverIndices.value("v05ConsentRequestsStatusPost")].URL()+"/v0.5/consent-requests/status");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_consent_request_status_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_cm_id).isEmpty()) {
            input.headers.insert("X-CM-ID", ::OpenAPI::toStringValue(x_cm_id));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIHiuFacingApi::v05ConsentRequestsStatusPostCallback);
    connect(this, &OAIHiuFacingApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIHiuFacingApi::v05ConsentRequestsStatusPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT v05ConsentRequestsStatusPostSignal();
        Q_EMIT v05ConsentRequestsStatusPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT v05ConsentRequestsStatusPostSignalE(error_type, error_str);
        Q_EMIT v05ConsentRequestsStatusPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT v05ConsentRequestsStatusPostSignalError(error_type, error_str);
        Q_EMIT v05ConsentRequestsStatusPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIHiuFacingApi::v05ConsentsFetchPost(const QString &authorization, const QString &x_cm_id, const OAIConsentFetchRequest &oai_consent_fetch_request) {
    QString fullPath = QString(_serverConfigs["v05ConsentsFetchPost"][_serverIndices.value("v05ConsentsFetchPost")].URL()+"/v0.5/consents/fetch");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_consent_fetch_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_cm_id).isEmpty()) {
            input.headers.insert("X-CM-ID", ::OpenAPI::toStringValue(x_cm_id));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIHiuFacingApi::v05ConsentsFetchPostCallback);
    connect(this, &OAIHiuFacingApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIHiuFacingApi::v05ConsentsFetchPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT v05ConsentsFetchPostSignal();
        Q_EMIT v05ConsentsFetchPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT v05ConsentsFetchPostSignalE(error_type, error_str);
        Q_EMIT v05ConsentsFetchPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT v05ConsentsFetchPostSignalError(error_type, error_str);
        Q_EMIT v05ConsentsFetchPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIHiuFacingApi::v05ConsentsHiuOnNotifyPost(const QString &authorization, const QString &x_cm_id, const OAIHIUConsentNotificationResponse &oaihiu_consent_notification_response) {
    QString fullPath = QString(_serverConfigs["v05ConsentsHiuOnNotifyPost"][_serverIndices.value("v05ConsentsHiuOnNotifyPost")].URL()+"/v0.5/consents/hiu/on-notify");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oaihiu_consent_notification_response.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_cm_id).isEmpty()) {
            input.headers.insert("X-CM-ID", ::OpenAPI::toStringValue(x_cm_id));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIHiuFacingApi::v05ConsentsHiuOnNotifyPostCallback);
    connect(this, &OAIHiuFacingApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIHiuFacingApi::v05ConsentsHiuOnNotifyPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT v05ConsentsHiuOnNotifyPostSignal();
        Q_EMIT v05ConsentsHiuOnNotifyPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT v05ConsentsHiuOnNotifyPostSignalE(error_type, error_str);
        Q_EMIT v05ConsentsHiuOnNotifyPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT v05ConsentsHiuOnNotifyPostSignalError(error_type, error_str);
        Q_EMIT v05ConsentsHiuOnNotifyPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIHiuFacingApi::v05HealthInformationCmRequestPost(const QString &authorization, const QString &x_cm_id, const OAIHIRequest &oaihi_request) {
    QString fullPath = QString(_serverConfigs["v05HealthInformationCmRequestPost"][_serverIndices.value("v05HealthInformationCmRequestPost")].URL()+"/v0.5/health-information/cm/request");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oaihi_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_cm_id).isEmpty()) {
            input.headers.insert("X-CM-ID", ::OpenAPI::toStringValue(x_cm_id));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIHiuFacingApi::v05HealthInformationCmRequestPostCallback);
    connect(this, &OAIHiuFacingApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIHiuFacingApi::v05HealthInformationCmRequestPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT v05HealthInformationCmRequestPostSignal();
        Q_EMIT v05HealthInformationCmRequestPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT v05HealthInformationCmRequestPostSignalE(error_type, error_str);
        Q_EMIT v05HealthInformationCmRequestPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT v05HealthInformationCmRequestPostSignalError(error_type, error_str);
        Q_EMIT v05HealthInformationCmRequestPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIHiuFacingApi::v05HealthInformationNotifyPost(const QString &authorization, const QString &x_cm_id, const OAIHealthInformationNotification &oai_health_information_notification) {
    QString fullPath = QString(_serverConfigs["v05HealthInformationNotifyPost"][_serverIndices.value("v05HealthInformationNotifyPost")].URL()+"/v0.5/health-information/notify");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_health_information_notification.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_cm_id).isEmpty()) {
            input.headers.insert("X-CM-ID", ::OpenAPI::toStringValue(x_cm_id));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIHiuFacingApi::v05HealthInformationNotifyPostCallback);
    connect(this, &OAIHiuFacingApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIHiuFacingApi::v05HealthInformationNotifyPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT v05HealthInformationNotifyPostSignal();
        Q_EMIT v05HealthInformationNotifyPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT v05HealthInformationNotifyPostSignalE(error_type, error_str);
        Q_EMIT v05HealthInformationNotifyPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT v05HealthInformationNotifyPostSignalError(error_type, error_str);
        Q_EMIT v05HealthInformationNotifyPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIHiuFacingApi::v05PatientsFindPost(const QString &authorization, const QString &x_cm_id, const OAIPatientIdentificationRequest &oai_patient_identification_request) {
    QString fullPath = QString(_serverConfigs["v05PatientsFindPost"][_serverIndices.value("v05PatientsFindPost")].URL()+"/v0.5/patients/find");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_patient_identification_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_cm_id).isEmpty()) {
            input.headers.insert("X-CM-ID", ::OpenAPI::toStringValue(x_cm_id));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIHiuFacingApi::v05PatientsFindPostCallback);
    connect(this, &OAIHiuFacingApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIHiuFacingApi::v05PatientsFindPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT v05PatientsFindPostSignal();
        Q_EMIT v05PatientsFindPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT v05PatientsFindPostSignalE(error_type, error_str);
        Q_EMIT v05PatientsFindPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT v05PatientsFindPostSignalError(error_type, error_str);
        Q_EMIT v05PatientsFindPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIHiuFacingApi::v05SubscriptionRequestsCmInitPost(const QString &authorization, const QString &x_cm_id, const OAISubscriptionRequest &oai_subscription_request) {
    QString fullPath = QString(_serverConfigs["v05SubscriptionRequestsCmInitPost"][_serverIndices.value("v05SubscriptionRequestsCmInitPost")].URL()+"/v0.5/subscription-requests/cm/init");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_subscription_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_cm_id).isEmpty()) {
            input.headers.insert("X-CM-ID", ::OpenAPI::toStringValue(x_cm_id));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIHiuFacingApi::v05SubscriptionRequestsCmInitPostCallback);
    connect(this, &OAIHiuFacingApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIHiuFacingApi::v05SubscriptionRequestsCmInitPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT v05SubscriptionRequestsCmInitPostSignal();
        Q_EMIT v05SubscriptionRequestsCmInitPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT v05SubscriptionRequestsCmInitPostSignalE(error_type, error_str);
        Q_EMIT v05SubscriptionRequestsCmInitPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT v05SubscriptionRequestsCmInitPostSignalError(error_type, error_str);
        Q_EMIT v05SubscriptionRequestsCmInitPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIHiuFacingApi::v05SubscriptionRequestsHiuOnNotifyPost(const QString &authorization, const QString &x_cm_id, const OAIHIUSubscriptionRequestNotificationAcknowledgement &oaihiu_subscription_request_notification_acknowledgement) {
    QString fullPath = QString(_serverConfigs["v05SubscriptionRequestsHiuOnNotifyPost"][_serverIndices.value("v05SubscriptionRequestsHiuOnNotifyPost")].URL()+"/v0.5/subscription-requests/hiu/on-notify");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oaihiu_subscription_request_notification_acknowledgement.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_cm_id).isEmpty()) {
            input.headers.insert("X-CM-ID", ::OpenAPI::toStringValue(x_cm_id));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIHiuFacingApi::v05SubscriptionRequestsHiuOnNotifyPostCallback);
    connect(this, &OAIHiuFacingApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIHiuFacingApi::v05SubscriptionRequestsHiuOnNotifyPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT v05SubscriptionRequestsHiuOnNotifyPostSignal();
        Q_EMIT v05SubscriptionRequestsHiuOnNotifyPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT v05SubscriptionRequestsHiuOnNotifyPostSignalE(error_type, error_str);
        Q_EMIT v05SubscriptionRequestsHiuOnNotifyPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT v05SubscriptionRequestsHiuOnNotifyPostSignalError(error_type, error_str);
        Q_EMIT v05SubscriptionRequestsHiuOnNotifyPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIHiuFacingApi::v05SubscriptionsHiuOnNotifyPost(const QString &authorization, const QString &x_cm_id, const OAIHIUSubscriptionNotificationAcknowledgment &oaihiu_subscription_notification_acknowledgment) {
    QString fullPath = QString(_serverConfigs["v05SubscriptionsHiuOnNotifyPost"][_serverIndices.value("v05SubscriptionsHiuOnNotifyPost")].URL()+"/v0.5/subscriptions/hiu/on-notify");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oaihiu_subscription_notification_acknowledgment.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_cm_id).isEmpty()) {
            input.headers.insert("X-CM-ID", ::OpenAPI::toStringValue(x_cm_id));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIHiuFacingApi::v05SubscriptionsHiuOnNotifyPostCallback);
    connect(this, &OAIHiuFacingApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIHiuFacingApi::v05SubscriptionsHiuOnNotifyPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT v05SubscriptionsHiuOnNotifyPostSignal();
        Q_EMIT v05SubscriptionsHiuOnNotifyPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT v05SubscriptionsHiuOnNotifyPostSignalE(error_type, error_str);
        Q_EMIT v05SubscriptionsHiuOnNotifyPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT v05SubscriptionsHiuOnNotifyPostSignalError(error_type, error_str);
        Q_EMIT v05SubscriptionsHiuOnNotifyPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIHiuFacingApi::v05UsersAuthConfirmPost(const QString &authorization, const QString &x_cm_id, const OAIPatientAuthConfirmRequest &oai_patient_auth_confirm_request) {
    QString fullPath = QString(_serverConfigs["v05UsersAuthConfirmPost"][_serverIndices.value("v05UsersAuthConfirmPost")].URL()+"/v0.5/users/auth/confirm");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_patient_auth_confirm_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_cm_id).isEmpty()) {
            input.headers.insert("X-CM-ID", ::OpenAPI::toStringValue(x_cm_id));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIHiuFacingApi::v05UsersAuthConfirmPostCallback);
    connect(this, &OAIHiuFacingApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIHiuFacingApi::v05UsersAuthConfirmPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT v05UsersAuthConfirmPostSignal();
        Q_EMIT v05UsersAuthConfirmPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT v05UsersAuthConfirmPostSignalE(error_type, error_str);
        Q_EMIT v05UsersAuthConfirmPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT v05UsersAuthConfirmPostSignalError(error_type, error_str);
        Q_EMIT v05UsersAuthConfirmPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIHiuFacingApi::v05UsersAuthFetchModesPost(const QString &authorization, const QString &x_cm_id, const OAIPatientAuthModeQueryRequest &oai_patient_auth_mode_query_request) {
    QString fullPath = QString(_serverConfigs["v05UsersAuthFetchModesPost"][_serverIndices.value("v05UsersAuthFetchModesPost")].URL()+"/v0.5/users/auth/fetch-modes");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_patient_auth_mode_query_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_cm_id).isEmpty()) {
            input.headers.insert("X-CM-ID", ::OpenAPI::toStringValue(x_cm_id));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIHiuFacingApi::v05UsersAuthFetchModesPostCallback);
    connect(this, &OAIHiuFacingApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIHiuFacingApi::v05UsersAuthFetchModesPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT v05UsersAuthFetchModesPostSignal();
        Q_EMIT v05UsersAuthFetchModesPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT v05UsersAuthFetchModesPostSignalE(error_type, error_str);
        Q_EMIT v05UsersAuthFetchModesPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT v05UsersAuthFetchModesPostSignalError(error_type, error_str);
        Q_EMIT v05UsersAuthFetchModesPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIHiuFacingApi::v05UsersAuthInitPost(const QString &authorization, const QString &x_cm_id, const OAIPatientAuthInitRequest &oai_patient_auth_init_request) {
    QString fullPath = QString(_serverConfigs["v05UsersAuthInitPost"][_serverIndices.value("v05UsersAuthInitPost")].URL()+"/v0.5/users/auth/init");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_patient_auth_init_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_cm_id).isEmpty()) {
            input.headers.insert("X-CM-ID", ::OpenAPI::toStringValue(x_cm_id));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIHiuFacingApi::v05UsersAuthInitPostCallback);
    connect(this, &OAIHiuFacingApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIHiuFacingApi::v05UsersAuthInitPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT v05UsersAuthInitPostSignal();
        Q_EMIT v05UsersAuthInitPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT v05UsersAuthInitPostSignalE(error_type, error_str);
        Q_EMIT v05UsersAuthInitPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT v05UsersAuthInitPostSignalError(error_type, error_str);
        Q_EMIT v05UsersAuthInitPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIHiuFacingApi::v05UsersAuthOnNotifyPost(const QString &authorization, const QString &x_cm_id, const OAIPatientAuthNotificationAcknowledgement &oai_patient_auth_notification_acknowledgement) {
    QString fullPath = QString(_serverConfigs["v05UsersAuthOnNotifyPost"][_serverIndices.value("v05UsersAuthOnNotifyPost")].URL()+"/v0.5/users/auth/on-notify");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_patient_auth_notification_acknowledgement.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_cm_id).isEmpty()) {
            input.headers.insert("X-CM-ID", ::OpenAPI::toStringValue(x_cm_id));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIHiuFacingApi::v05UsersAuthOnNotifyPostCallback);
    connect(this, &OAIHiuFacingApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIHiuFacingApi::v05UsersAuthOnNotifyPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT v05UsersAuthOnNotifyPostSignal();
        Q_EMIT v05UsersAuthOnNotifyPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT v05UsersAuthOnNotifyPostSignalE(error_type, error_str);
        Q_EMIT v05UsersAuthOnNotifyPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT v05UsersAuthOnNotifyPostSignalError(error_type, error_str);
        Q_EMIT v05UsersAuthOnNotifyPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIHiuFacingApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
