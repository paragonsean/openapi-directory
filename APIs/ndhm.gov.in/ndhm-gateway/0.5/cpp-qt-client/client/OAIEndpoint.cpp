/**
 * Gateway
 * Gateway is the hub that routes/orchestrates the interaction between consent managers and API bridges. There are 5 categories of APIs; discovery, link, consent flow, data flow and  monitoring. To reflect the consumers of APIs, the above apis are also categorized under cm facing, hiu facing and hip facing  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEndpoint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEndpoint::OAIEndpoint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEndpoint::OAIEndpoint() {
    this->initializeModel();
}

OAIEndpoint::~OAIEndpoint() {}

void OAIEndpoint::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_connection_type_isSet = false;
    m_connection_type_isValid = false;

    m_use_isSet = false;
    m_use_isValid = false;
}

void OAIEndpoint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEndpoint::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_connection_type_isValid = ::OpenAPI::fromJsonValue(m_connection_type, json[QString("connectionType")]);
    m_connection_type_isSet = !json[QString("connectionType")].isNull() && m_connection_type_isValid;

    m_use_isValid = ::OpenAPI::fromJsonValue(m_use, json[QString("use")]);
    m_use_isSet = !json[QString("use")].isNull() && m_use_isValid;
}

QString OAIEndpoint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEndpoint::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_connection_type_isSet) {
        obj.insert(QString("connectionType"), ::OpenAPI::toJsonValue(m_connection_type));
    }
    if (m_use_isSet) {
        obj.insert(QString("use"), ::OpenAPI::toJsonValue(m_use));
    }
    return obj;
}

QString OAIEndpoint::getAddress() const {
    return m_address;
}
void OAIEndpoint::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIEndpoint::is_address_Set() const{
    return m_address_isSet;
}

bool OAIEndpoint::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIEndpoint::getConnectionType() const {
    return m_connection_type;
}
void OAIEndpoint::setConnectionType(const QString &connection_type) {
    m_connection_type = connection_type;
    m_connection_type_isSet = true;
}

bool OAIEndpoint::is_connection_type_Set() const{
    return m_connection_type_isSet;
}

bool OAIEndpoint::is_connection_type_Valid() const{
    return m_connection_type_isValid;
}

QString OAIEndpoint::getUse() const {
    return m_use;
}
void OAIEndpoint::setUse(const QString &use) {
    m_use = use;
    m_use_isSet = true;
}

bool OAIEndpoint::is_use_Set() const{
    return m_use_isSet;
}

bool OAIEndpoint::is_use_Valid() const{
    return m_use_isValid;
}

bool OAIEndpoint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEndpoint::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
