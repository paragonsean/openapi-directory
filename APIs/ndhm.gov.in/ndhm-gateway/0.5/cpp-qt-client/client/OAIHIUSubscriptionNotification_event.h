/**
 * Gateway
 * Gateway is the hub that routes/orchestrates the interaction between consent managers and API bridges. There are 5 categories of APIs; discovery, link, consent flow, data flow and  monitoring. To reflect the consumers of APIs, the above apis are also categorized under cm facing, hiu facing and hip facing  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIHIUSubscriptionNotification_event.h
 *
 * 
 */

#ifndef OAIHIUSubscriptionNotification_event_H
#define OAIHIUSubscriptionNotification_event_H

#include <QJsonObject>

#include "OAIHIUSubscriptionEventContent.h"
#include "OAISubscriptionCategory.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIHIUSubscriptionEventContent;

class OAIHIUSubscriptionNotification_event : public OAIObject {
public:
    OAIHIUSubscriptionNotification_event();
    OAIHIUSubscriptionNotification_event(QString json);
    ~OAIHIUSubscriptionNotification_event() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAISubscriptionCategory getCategory() const;
    void setCategory(const OAISubscriptionCategory &category);
    bool is_category_Set() const;
    bool is_category_Valid() const;

    OAIHIUSubscriptionEventContent getContent() const;
    void setContent(const OAIHIUSubscriptionEventContent &content);
    bool is_content_Set() const;
    bool is_content_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QDateTime getPublished() const;
    void setPublished(const QDateTime &published);
    bool is_published_Set() const;
    bool is_published_Valid() const;

    QString getSubscriptionId() const;
    void setSubscriptionId(const QString &subscription_id);
    bool is_subscription_id_Set() const;
    bool is_subscription_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAISubscriptionCategory m_category;
    bool m_category_isSet;
    bool m_category_isValid;

    OAIHIUSubscriptionEventContent m_content;
    bool m_content_isSet;
    bool m_content_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QDateTime m_published;
    bool m_published_isSet;
    bool m_published_isValid;

    QString m_subscription_id;
    bool m_subscription_id_isSet;
    bool m_subscription_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIHIUSubscriptionNotification_event)

#endif // OAIHIUSubscriptionNotification_event_H
