/**
 * Gateway
 * Gateway is the hub that routes/orchestrates the interaction between consent managers and API bridges. There are 5 categories of APIs; discovery, link, consent flow, data flow and  monitoring. To reflect the consumers of APIs, the above apis are also categorized under cm facing, hiu facing and hip facing  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHIUSubscriptionContext.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHIUSubscriptionContext::OAIHIUSubscriptionContext(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHIUSubscriptionContext::OAIHIUSubscriptionContext() {
    this->initializeModel();
}

OAIHIUSubscriptionContext::~OAIHIUSubscriptionContext() {}

void OAIHIUSubscriptionContext::initializeModel() {

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_hip_isSet = false;
    m_hip_isValid = false;

    m_period_isSet = false;
    m_period_isValid = false;
}

void OAIHIUSubscriptionContext::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHIUSubscriptionContext::fromJsonObject(QJsonObject json) {

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("categories")]);
    m_categories_isSet = !json[QString("categories")].isNull() && m_categories_isValid;

    m_hip_isValid = ::OpenAPI::fromJsonValue(m_hip, json[QString("hip")]);
    m_hip_isSet = !json[QString("hip")].isNull() && m_hip_isValid;

    m_period_isValid = ::OpenAPI::fromJsonValue(m_period, json[QString("period")]);
    m_period_isSet = !json[QString("period")].isNull() && m_period_isValid;
}

QString OAIHIUSubscriptionContext::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHIUSubscriptionContext::asJsonObject() const {
    QJsonObject obj;
    if (m_categories.size() > 0) {
        obj.insert(QString("categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_hip.isSet()) {
        obj.insert(QString("hip"), ::OpenAPI::toJsonValue(m_hip));
    }
    if (m_period.isSet()) {
        obj.insert(QString("period"), ::OpenAPI::toJsonValue(m_period));
    }
    return obj;
}

QList<OAISubscriptionCategory> OAIHIUSubscriptionContext::getCategories() const {
    return m_categories;
}
void OAIHIUSubscriptionContext::setCategories(const QList<OAISubscriptionCategory> &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAIHIUSubscriptionContext::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAIHIUSubscriptionContext::is_categories_Valid() const{
    return m_categories_isValid;
}

OAIOrganizationRepresentation OAIHIUSubscriptionContext::getHip() const {
    return m_hip;
}
void OAIHIUSubscriptionContext::setHip(const OAIOrganizationRepresentation &hip) {
    m_hip = hip;
    m_hip_isSet = true;
}

bool OAIHIUSubscriptionContext::is_hip_Set() const{
    return m_hip_isSet;
}

bool OAIHIUSubscriptionContext::is_hip_Valid() const{
    return m_hip_isValid;
}

OAISubscriptionPeriod OAIHIUSubscriptionContext::getPeriod() const {
    return m_period;
}
void OAIHIUSubscriptionContext::setPeriod(const OAISubscriptionPeriod &period) {
    m_period = period;
    m_period_isSet = true;
}

bool OAIHIUSubscriptionContext::is_period_Set() const{
    return m_period_isSet;
}

bool OAIHIUSubscriptionContext::is_period_Valid() const{
    return m_period_isValid;
}

bool OAIHIUSubscriptionContext::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_hip.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_period.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHIUSubscriptionContext::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_categories_isValid && m_period_isValid && true;
}

} // namespace OpenAPI
