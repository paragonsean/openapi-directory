/**
 * Gateway
 * Gateway is the hub that routes/orchestrates the interaction between consent managers and API bridges. There are 5 categories of APIs; discovery, link, consent flow, data flow and  monitoring. To reflect the consumers of APIs, the above apis are also categorized under cm facing, hiu facing and hip facing  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIHIPConsentNotification_notification.h
 *
 * 
 */

#ifndef OAIHIPConsentNotification_notification_H
#define OAIHIPConsentNotification_notification_H

#include <QJsonObject>

#include "OAIConsentStatus.h"
#include "OAIHIPConsentNotification_notification_consentDetail.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIHIPConsentNotification_notification_consentDetail;

class OAIHIPConsentNotification_notification : public OAIObject {
public:
    OAIHIPConsentNotification_notification();
    OAIHIPConsentNotification_notification(QString json);
    ~OAIHIPConsentNotification_notification() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIHIPConsentNotification_notification_consentDetail getConsentDetail() const;
    void setConsentDetail(const OAIHIPConsentNotification_notification_consentDetail &consent_detail);
    bool is_consent_detail_Set() const;
    bool is_consent_detail_Valid() const;

    QString getConsentId() const;
    void setConsentId(const QString &consent_id);
    bool is_consent_id_Set() const;
    bool is_consent_id_Valid() const;

    QString getSignature() const;
    void setSignature(const QString &signature);
    bool is_signature_Set() const;
    bool is_signature_Valid() const;

    OAIConsentStatus getStatus() const;
    void setStatus(const OAIConsentStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIHIPConsentNotification_notification_consentDetail m_consent_detail;
    bool m_consent_detail_isSet;
    bool m_consent_detail_isValid;

    QString m_consent_id;
    bool m_consent_id_isSet;
    bool m_consent_id_isValid;

    QString m_signature;
    bool m_signature_isSet;
    bool m_signature_isValid;

    OAIConsentStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIHIPConsentNotification_notification)

#endif // OAIHIPConsentNotification_notification_H
