/**
 * Gateway
 * Gateway is the hub that routes/orchestrates the interaction between consent managers and API bridges. There are 5 categories of APIs; discovery, link, consent flow, data flow and  monitoring. To reflect the consumers of APIs, the above apis are also categorized under cm facing, hiu facing and hip facing  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventCategoryDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventCategoryDetail::OAIEventCategoryDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventCategoryDetail::OAIEventCategoryDetail() {
    this->initializeModel();
}

OAIEventCategoryDetail::~OAIEventCategoryDetail() {}

void OAIEventCategoryDetail::initializeModel() {

    m_care_context_isSet = false;
    m_care_context_isValid = false;

    m_hi_types_isSet = false;
    m_hi_types_isValid = false;
}

void OAIEventCategoryDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventCategoryDetail::fromJsonObject(QJsonObject json) {

    m_care_context_isValid = ::OpenAPI::fromJsonValue(m_care_context, json[QString("careContext")]);
    m_care_context_isSet = !json[QString("careContext")].isNull() && m_care_context_isValid;

    m_hi_types_isValid = ::OpenAPI::fromJsonValue(m_hi_types, json[QString("hiTypes")]);
    m_hi_types_isSet = !json[QString("hiTypes")].isNull() && m_hi_types_isValid;
}

QString OAIEventCategoryDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventCategoryDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_care_context.isSet()) {
        obj.insert(QString("careContext"), ::OpenAPI::toJsonValue(m_care_context));
    }
    if (m_hi_types.size() > 0) {
        obj.insert(QString("hiTypes"), ::OpenAPI::toJsonValue(m_hi_types));
    }
    return obj;
}

OAICareContextDefinition OAIEventCategoryDetail::getCareContext() const {
    return m_care_context;
}
void OAIEventCategoryDetail::setCareContext(const OAICareContextDefinition &care_context) {
    m_care_context = care_context;
    m_care_context_isSet = true;
}

bool OAIEventCategoryDetail::is_care_context_Set() const{
    return m_care_context_isSet;
}

bool OAIEventCategoryDetail::is_care_context_Valid() const{
    return m_care_context_isValid;
}

QList<OAIHITypeEnum> OAIEventCategoryDetail::getHiTypes() const {
    return m_hi_types;
}
void OAIEventCategoryDetail::setHiTypes(const QList<OAIHITypeEnum> &hi_types) {
    m_hi_types = hi_types;
    m_hi_types_isSet = true;
}

bool OAIEventCategoryDetail::is_hi_types_Set() const{
    return m_hi_types_isSet;
}

bool OAIEventCategoryDetail::is_hi_types_Valid() const{
    return m_hi_types_isValid;
}

bool OAIEventCategoryDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_care_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hi_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventCategoryDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_care_context_isValid && m_hi_types_isValid && true;
}

} // namespace OpenAPI
