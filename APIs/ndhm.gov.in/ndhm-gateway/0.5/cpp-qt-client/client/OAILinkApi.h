/**
 * Gateway
 * Gateway is the hub that routes/orchestrates the interaction between consent managers and API bridges. There are 5 categories of APIs; discovery, link, consent flow, data flow and  monitoring. To reflect the consumers of APIs, the above apis are also categorized under cm facing, hiu facing and hip facing  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILinkApi_H
#define OAI_OAILinkApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAILinkConfirmationRequest.h"
#include "OAIPatientCareContextLinkRequest.h"
#include "OAIPatientCareContextLinkResponse.h"
#include "OAIPatientLinkReferenceRequest.h"
#include "OAIPatientLinkReferenceResult.h"
#include "OAIPatientLinkResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAILinkApi : public QObject {
    Q_OBJECT

public:
    OAILinkApi(const int timeOut = 0);
    ~OAILinkApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_cm_id QString [required]
    * @param[in]  oai_patient_care_context_link_request OAIPatientCareContextLinkRequest [required]
    */
    virtual void v05LinksLinkAddContextsPost(const QString &authorization, const QString &x_cm_id, const OAIPatientCareContextLinkRequest &oai_patient_care_context_link_request);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_hip_id QString [required]
    * @param[in]  oai_link_confirmation_request OAILinkConfirmationRequest [required]
    */
    virtual void v05LinksLinkConfirmPost(const QString &authorization, const QString &x_hip_id, const OAILinkConfirmationRequest &oai_link_confirmation_request);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_hip_id QString [required]
    * @param[in]  oai_patient_link_reference_request OAIPatientLinkReferenceRequest [required]
    */
    virtual void v05LinksLinkInitPost(const QString &authorization, const QString &x_hip_id, const OAIPatientLinkReferenceRequest &oai_patient_link_reference_request);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_hip_id QString [required]
    * @param[in]  oai_patient_care_context_link_response OAIPatientCareContextLinkResponse [required]
    */
    virtual void v05LinksLinkOnAddContextsPost(const QString &authorization, const QString &x_hip_id, const OAIPatientCareContextLinkResponse &oai_patient_care_context_link_response);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_cm_id QString [required]
    * @param[in]  oai_patient_link_result OAIPatientLinkResult [required]
    */
    virtual void v05LinksLinkOnConfirmPost(const QString &authorization, const QString &x_cm_id, const OAIPatientLinkResult &oai_patient_link_result);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_cm_id QString [required]
    * @param[in]  oai_patient_link_reference_result OAIPatientLinkReferenceResult [required]
    */
    virtual void v05LinksLinkOnInitPost(const QString &authorization, const QString &x_cm_id, const OAIPatientLinkReferenceResult &oai_patient_link_reference_result);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void v05LinksLinkAddContextsPostCallback(OAIHttpRequestWorker *worker);
    void v05LinksLinkConfirmPostCallback(OAIHttpRequestWorker *worker);
    void v05LinksLinkInitPostCallback(OAIHttpRequestWorker *worker);
    void v05LinksLinkOnAddContextsPostCallback(OAIHttpRequestWorker *worker);
    void v05LinksLinkOnConfirmPostCallback(OAIHttpRequestWorker *worker);
    void v05LinksLinkOnInitPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void v05LinksLinkAddContextsPostSignal();
    void v05LinksLinkConfirmPostSignal();
    void v05LinksLinkInitPostSignal();
    void v05LinksLinkOnAddContextsPostSignal();
    void v05LinksLinkOnConfirmPostSignal();
    void v05LinksLinkOnInitPostSignal();


    void v05LinksLinkAddContextsPostSignalFull(OAIHttpRequestWorker *worker);
    void v05LinksLinkConfirmPostSignalFull(OAIHttpRequestWorker *worker);
    void v05LinksLinkInitPostSignalFull(OAIHttpRequestWorker *worker);
    void v05LinksLinkOnAddContextsPostSignalFull(OAIHttpRequestWorker *worker);
    void v05LinksLinkOnConfirmPostSignalFull(OAIHttpRequestWorker *worker);
    void v05LinksLinkOnInitPostSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use v05LinksLinkAddContextsPostSignalError() instead")
    void v05LinksLinkAddContextsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v05LinksLinkAddContextsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05LinksLinkConfirmPostSignalError() instead")
    void v05LinksLinkConfirmPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v05LinksLinkConfirmPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05LinksLinkInitPostSignalError() instead")
    void v05LinksLinkInitPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v05LinksLinkInitPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05LinksLinkOnAddContextsPostSignalError() instead")
    void v05LinksLinkOnAddContextsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v05LinksLinkOnAddContextsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05LinksLinkOnConfirmPostSignalError() instead")
    void v05LinksLinkOnConfirmPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v05LinksLinkOnConfirmPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05LinksLinkOnInitPostSignalError() instead")
    void v05LinksLinkOnInitPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v05LinksLinkOnInitPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use v05LinksLinkAddContextsPostSignalErrorFull() instead")
    void v05LinksLinkAddContextsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v05LinksLinkAddContextsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05LinksLinkConfirmPostSignalErrorFull() instead")
    void v05LinksLinkConfirmPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v05LinksLinkConfirmPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05LinksLinkInitPostSignalErrorFull() instead")
    void v05LinksLinkInitPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v05LinksLinkInitPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05LinksLinkOnAddContextsPostSignalErrorFull() instead")
    void v05LinksLinkOnAddContextsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v05LinksLinkOnAddContextsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05LinksLinkOnConfirmPostSignalErrorFull() instead")
    void v05LinksLinkOnConfirmPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v05LinksLinkOnConfirmPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05LinksLinkOnInitPostSignalErrorFull() instead")
    void v05LinksLinkOnInitPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v05LinksLinkOnInitPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
