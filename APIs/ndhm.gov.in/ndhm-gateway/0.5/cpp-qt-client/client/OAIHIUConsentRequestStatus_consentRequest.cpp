/**
 * Gateway
 * Gateway is the hub that routes/orchestrates the interaction between consent managers and API bridges. There are 5 categories of APIs; discovery, link, consent flow, data flow and  monitoring. To reflect the consumers of APIs, the above apis are also categorized under cm facing, hiu facing and hip facing  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHIUConsentRequestStatus_consentRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHIUConsentRequestStatus_consentRequest::OAIHIUConsentRequestStatus_consentRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHIUConsentRequestStatus_consentRequest::OAIHIUConsentRequestStatus_consentRequest() {
    this->initializeModel();
}

OAIHIUConsentRequestStatus_consentRequest::~OAIHIUConsentRequestStatus_consentRequest() {}

void OAIHIUConsentRequestStatus_consentRequest::initializeModel() {

    m_consent_artefacts_isSet = false;
    m_consent_artefacts_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIHIUConsentRequestStatus_consentRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHIUConsentRequestStatus_consentRequest::fromJsonObject(QJsonObject json) {

    m_consent_artefacts_isValid = ::OpenAPI::fromJsonValue(m_consent_artefacts, json[QString("consentArtefacts")]);
    m_consent_artefacts_isSet = !json[QString("consentArtefacts")].isNull() && m_consent_artefacts_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIHIUConsentRequestStatus_consentRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHIUConsentRequestStatus_consentRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_consent_artefacts.size() > 0) {
        obj.insert(QString("consentArtefacts"), ::OpenAPI::toJsonValue(m_consent_artefacts));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QList<OAIConsentArtefactReference> OAIHIUConsentRequestStatus_consentRequest::getConsentArtefacts() const {
    return m_consent_artefacts;
}
void OAIHIUConsentRequestStatus_consentRequest::setConsentArtefacts(const QList<OAIConsentArtefactReference> &consent_artefacts) {
    m_consent_artefacts = consent_artefacts;
    m_consent_artefacts_isSet = true;
}

bool OAIHIUConsentRequestStatus_consentRequest::is_consent_artefacts_Set() const{
    return m_consent_artefacts_isSet;
}

bool OAIHIUConsentRequestStatus_consentRequest::is_consent_artefacts_Valid() const{
    return m_consent_artefacts_isValid;
}

QString OAIHIUConsentRequestStatus_consentRequest::getId() const {
    return m_id;
}
void OAIHIUConsentRequestStatus_consentRequest::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIHIUConsentRequestStatus_consentRequest::is_id_Set() const{
    return m_id_isSet;
}

bool OAIHIUConsentRequestStatus_consentRequest::is_id_Valid() const{
    return m_id_isValid;
}

OAIConsentStatus OAIHIUConsentRequestStatus_consentRequest::getStatus() const {
    return m_status;
}
void OAIHIUConsentRequestStatus_consentRequest::setStatus(const OAIConsentStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIHIUConsentRequestStatus_consentRequest::is_status_Set() const{
    return m_status_isSet;
}

bool OAIHIUConsentRequestStatus_consentRequest::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIHIUConsentRequestStatus_consentRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_consent_artefacts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHIUConsentRequestStatus_consentRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
