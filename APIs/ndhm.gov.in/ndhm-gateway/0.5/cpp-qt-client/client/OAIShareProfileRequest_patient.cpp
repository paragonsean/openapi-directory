/**
 * Gateway
 * Gateway is the hub that routes/orchestrates the interaction between consent managers and API bridges. There are 5 categories of APIs; discovery, link, consent flow, data flow and  monitoring. To reflect the consumers of APIs, the above apis are also categorized under cm facing, hiu facing and hip facing  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShareProfileRequest_patient.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShareProfileRequest_patient::OAIShareProfileRequest_patient(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShareProfileRequest_patient::OAIShareProfileRequest_patient() {
    this->initializeModel();
}

OAIShareProfileRequest_patient::~OAIShareProfileRequest_patient() {}

void OAIShareProfileRequest_patient::initializeModel() {

    m_hip_code_isSet = false;
    m_hip_code_isValid = false;

    m_user_demographics_isSet = false;
    m_user_demographics_isValid = false;
}

void OAIShareProfileRequest_patient::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShareProfileRequest_patient::fromJsonObject(QJsonObject json) {

    m_hip_code_isValid = ::OpenAPI::fromJsonValue(m_hip_code, json[QString("hipCode")]);
    m_hip_code_isSet = !json[QString("hipCode")].isNull() && m_hip_code_isValid;

    m_user_demographics_isValid = ::OpenAPI::fromJsonValue(m_user_demographics, json[QString("userDemographics")]);
    m_user_demographics_isSet = !json[QString("userDemographics")].isNull() && m_user_demographics_isValid;
}

QString OAIShareProfileRequest_patient::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShareProfileRequest_patient::asJsonObject() const {
    QJsonObject obj;
    if (m_hip_code_isSet) {
        obj.insert(QString("hipCode"), ::OpenAPI::toJsonValue(m_hip_code));
    }
    if (m_user_demographics.isSet()) {
        obj.insert(QString("userDemographics"), ::OpenAPI::toJsonValue(m_user_demographics));
    }
    return obj;
}

QString OAIShareProfileRequest_patient::getHipCode() const {
    return m_hip_code;
}
void OAIShareProfileRequest_patient::setHipCode(const QString &hip_code) {
    m_hip_code = hip_code;
    m_hip_code_isSet = true;
}

bool OAIShareProfileRequest_patient::is_hip_code_Set() const{
    return m_hip_code_isSet;
}

bool OAIShareProfileRequest_patient::is_hip_code_Valid() const{
    return m_hip_code_isValid;
}

OAIShareProfileRequest_patient_userDemographics OAIShareProfileRequest_patient::getUserDemographics() const {
    return m_user_demographics;
}
void OAIShareProfileRequest_patient::setUserDemographics(const OAIShareProfileRequest_patient_userDemographics &user_demographics) {
    m_user_demographics = user_demographics;
    m_user_demographics_isSet = true;
}

bool OAIShareProfileRequest_patient::is_user_demographics_Set() const{
    return m_user_demographics_isSet;
}

bool OAIShareProfileRequest_patient::is_user_demographics_Valid() const{
    return m_user_demographics_isValid;
}

bool OAIShareProfileRequest_patient::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hip_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_demographics.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShareProfileRequest_patient::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_user_demographics_isValid && true;
}

} // namespace OpenAPI
