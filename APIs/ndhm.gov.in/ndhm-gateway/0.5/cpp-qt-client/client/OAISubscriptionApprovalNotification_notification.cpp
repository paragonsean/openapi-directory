/**
 * Gateway
 * Gateway is the hub that routes/orchestrates the interaction between consent managers and API bridges. There are 5 categories of APIs; discovery, link, consent flow, data flow and  monitoring. To reflect the consumers of APIs, the above apis are also categorized under cm facing, hiu facing and hip facing  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscriptionApprovalNotification_notification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscriptionApprovalNotification_notification::OAISubscriptionApprovalNotification_notification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscriptionApprovalNotification_notification::OAISubscriptionApprovalNotification_notification() {
    this->initializeModel();
}

OAISubscriptionApprovalNotification_notification::~OAISubscriptionApprovalNotification_notification() {}

void OAISubscriptionApprovalNotification_notification::initializeModel() {

    m_status_isSet = false;
    m_status_isValid = false;

    m_subscription_isSet = false;
    m_subscription_isValid = false;

    m_subscription_request_id_isSet = false;
    m_subscription_request_id_isValid = false;
}

void OAISubscriptionApprovalNotification_notification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscriptionApprovalNotification_notification::fromJsonObject(QJsonObject json) {

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_subscription_isValid = ::OpenAPI::fromJsonValue(m_subscription, json[QString("subscription")]);
    m_subscription_isSet = !json[QString("subscription")].isNull() && m_subscription_isValid;

    m_subscription_request_id_isValid = ::OpenAPI::fromJsonValue(m_subscription_request_id, json[QString("subscriptionRequestId")]);
    m_subscription_request_id_isSet = !json[QString("subscriptionRequestId")].isNull() && m_subscription_request_id_isValid;
}

QString OAISubscriptionApprovalNotification_notification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscriptionApprovalNotification_notification::asJsonObject() const {
    QJsonObject obj;
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_subscription.isSet()) {
        obj.insert(QString("subscription"), ::OpenAPI::toJsonValue(m_subscription));
    }
    if (m_subscription_request_id_isSet) {
        obj.insert(QString("subscriptionRequestId"), ::OpenAPI::toJsonValue(m_subscription_request_id));
    }
    return obj;
}

OAISubscriptionStatus OAISubscriptionApprovalNotification_notification::getStatus() const {
    return m_status;
}
void OAISubscriptionApprovalNotification_notification::setStatus(const OAISubscriptionStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISubscriptionApprovalNotification_notification::is_status_Set() const{
    return m_status_isSet;
}

bool OAISubscriptionApprovalNotification_notification::is_status_Valid() const{
    return m_status_isValid;
}

OAIHIUSubscription OAISubscriptionApprovalNotification_notification::getSubscription() const {
    return m_subscription;
}
void OAISubscriptionApprovalNotification_notification::setSubscription(const OAIHIUSubscription &subscription) {
    m_subscription = subscription;
    m_subscription_isSet = true;
}

bool OAISubscriptionApprovalNotification_notification::is_subscription_Set() const{
    return m_subscription_isSet;
}

bool OAISubscriptionApprovalNotification_notification::is_subscription_Valid() const{
    return m_subscription_isValid;
}

QString OAISubscriptionApprovalNotification_notification::getSubscriptionRequestId() const {
    return m_subscription_request_id;
}
void OAISubscriptionApprovalNotification_notification::setSubscriptionRequestId(const QString &subscription_request_id) {
    m_subscription_request_id = subscription_request_id;
    m_subscription_request_id_isSet = true;
}

bool OAISubscriptionApprovalNotification_notification::is_subscription_request_id_Set() const{
    return m_subscription_request_id_isSet;
}

bool OAISubscriptionApprovalNotification_notification::is_subscription_request_id_Valid() const{
    return m_subscription_request_id_isValid;
}

bool OAISubscriptionApprovalNotification_notification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscriptionApprovalNotification_notification::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_status_isValid && true;
}

} // namespace OpenAPI
