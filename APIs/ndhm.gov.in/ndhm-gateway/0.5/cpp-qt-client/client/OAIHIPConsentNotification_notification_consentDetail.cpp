/**
 * Gateway
 * Gateway is the hub that routes/orchestrates the interaction between consent managers and API bridges. There are 5 categories of APIs; discovery, link, consent flow, data flow and  monitoring. To reflect the consumers of APIs, the above apis are also categorized under cm facing, hiu facing and hip facing  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHIPConsentNotification_notification_consentDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHIPConsentNotification_notification_consentDetail::OAIHIPConsentNotification_notification_consentDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHIPConsentNotification_notification_consentDetail::OAIHIPConsentNotification_notification_consentDetail() {
    this->initializeModel();
}

OAIHIPConsentNotification_notification_consentDetail::~OAIHIPConsentNotification_notification_consentDetail() {}

void OAIHIPConsentNotification_notification_consentDetail::initializeModel() {

    m_care_contexts_isSet = false;
    m_care_contexts_isValid = false;

    m_consent_id_isSet = false;
    m_consent_id_isValid = false;

    m_consent_manager_isSet = false;
    m_consent_manager_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_hi_types_isSet = false;
    m_hi_types_isValid = false;

    m_hip_isSet = false;
    m_hip_isValid = false;

    m_patient_isSet = false;
    m_patient_isValid = false;

    m_permission_isSet = false;
    m_permission_isValid = false;

    m_purpose_isSet = false;
    m_purpose_isValid = false;

    m_schema_version_isSet = false;
    m_schema_version_isValid = false;
}

void OAIHIPConsentNotification_notification_consentDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHIPConsentNotification_notification_consentDetail::fromJsonObject(QJsonObject json) {

    m_care_contexts_isValid = ::OpenAPI::fromJsonValue(m_care_contexts, json[QString("careContexts")]);
    m_care_contexts_isSet = !json[QString("careContexts")].isNull() && m_care_contexts_isValid;

    m_consent_id_isValid = ::OpenAPI::fromJsonValue(m_consent_id, json[QString("consentId")]);
    m_consent_id_isSet = !json[QString("consentId")].isNull() && m_consent_id_isValid;

    m_consent_manager_isValid = ::OpenAPI::fromJsonValue(m_consent_manager, json[QString("consentManager")]);
    m_consent_manager_isSet = !json[QString("consentManager")].isNull() && m_consent_manager_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_hi_types_isValid = ::OpenAPI::fromJsonValue(m_hi_types, json[QString("hiTypes")]);
    m_hi_types_isSet = !json[QString("hiTypes")].isNull() && m_hi_types_isValid;

    m_hip_isValid = ::OpenAPI::fromJsonValue(m_hip, json[QString("hip")]);
    m_hip_isSet = !json[QString("hip")].isNull() && m_hip_isValid;

    m_patient_isValid = ::OpenAPI::fromJsonValue(m_patient, json[QString("patient")]);
    m_patient_isSet = !json[QString("patient")].isNull() && m_patient_isValid;

    m_permission_isValid = ::OpenAPI::fromJsonValue(m_permission, json[QString("permission")]);
    m_permission_isSet = !json[QString("permission")].isNull() && m_permission_isValid;

    m_purpose_isValid = ::OpenAPI::fromJsonValue(m_purpose, json[QString("purpose")]);
    m_purpose_isSet = !json[QString("purpose")].isNull() && m_purpose_isValid;

    m_schema_version_isValid = ::OpenAPI::fromJsonValue(m_schema_version, json[QString("schemaVersion")]);
    m_schema_version_isSet = !json[QString("schemaVersion")].isNull() && m_schema_version_isValid;
}

QString OAIHIPConsentNotification_notification_consentDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHIPConsentNotification_notification_consentDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_care_contexts.size() > 0) {
        obj.insert(QString("careContexts"), ::OpenAPI::toJsonValue(m_care_contexts));
    }
    if (m_consent_id_isSet) {
        obj.insert(QString("consentId"), ::OpenAPI::toJsonValue(m_consent_id));
    }
    if (m_consent_manager.isSet()) {
        obj.insert(QString("consentManager"), ::OpenAPI::toJsonValue(m_consent_manager));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_hi_types.size() > 0) {
        obj.insert(QString("hiTypes"), ::OpenAPI::toJsonValue(m_hi_types));
    }
    if (m_hip.isSet()) {
        obj.insert(QString("hip"), ::OpenAPI::toJsonValue(m_hip));
    }
    if (m_patient.isSet()) {
        obj.insert(QString("patient"), ::OpenAPI::toJsonValue(m_patient));
    }
    if (m_permission.isSet()) {
        obj.insert(QString("permission"), ::OpenAPI::toJsonValue(m_permission));
    }
    if (m_purpose.isSet()) {
        obj.insert(QString("purpose"), ::OpenAPI::toJsonValue(m_purpose));
    }
    if (m_schema_version_isSet) {
        obj.insert(QString("schemaVersion"), ::OpenAPI::toJsonValue(m_schema_version));
    }
    return obj;
}

QList<OAIConsentArtefactResponse_consent_consentDetail_careContexts_inner> OAIHIPConsentNotification_notification_consentDetail::getCareContexts() const {
    return m_care_contexts;
}
void OAIHIPConsentNotification_notification_consentDetail::setCareContexts(const QList<OAIConsentArtefactResponse_consent_consentDetail_careContexts_inner> &care_contexts) {
    m_care_contexts = care_contexts;
    m_care_contexts_isSet = true;
}

bool OAIHIPConsentNotification_notification_consentDetail::is_care_contexts_Set() const{
    return m_care_contexts_isSet;
}

bool OAIHIPConsentNotification_notification_consentDetail::is_care_contexts_Valid() const{
    return m_care_contexts_isValid;
}

QString OAIHIPConsentNotification_notification_consentDetail::getConsentId() const {
    return m_consent_id;
}
void OAIHIPConsentNotification_notification_consentDetail::setConsentId(const QString &consent_id) {
    m_consent_id = consent_id;
    m_consent_id_isSet = true;
}

bool OAIHIPConsentNotification_notification_consentDetail::is_consent_id_Set() const{
    return m_consent_id_isSet;
}

bool OAIHIPConsentNotification_notification_consentDetail::is_consent_id_Valid() const{
    return m_consent_id_isValid;
}

OAIHIPConsentNotification_notification_consentDetail_consentManager OAIHIPConsentNotification_notification_consentDetail::getConsentManager() const {
    return m_consent_manager;
}
void OAIHIPConsentNotification_notification_consentDetail::setConsentManager(const OAIHIPConsentNotification_notification_consentDetail_consentManager &consent_manager) {
    m_consent_manager = consent_manager;
    m_consent_manager_isSet = true;
}

bool OAIHIPConsentNotification_notification_consentDetail::is_consent_manager_Set() const{
    return m_consent_manager_isSet;
}

bool OAIHIPConsentNotification_notification_consentDetail::is_consent_manager_Valid() const{
    return m_consent_manager_isValid;
}

QDateTime OAIHIPConsentNotification_notification_consentDetail::getCreatedAt() const {
    return m_created_at;
}
void OAIHIPConsentNotification_notification_consentDetail::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIHIPConsentNotification_notification_consentDetail::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIHIPConsentNotification_notification_consentDetail::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QList<OAIHITypeEnum> OAIHIPConsentNotification_notification_consentDetail::getHiTypes() const {
    return m_hi_types;
}
void OAIHIPConsentNotification_notification_consentDetail::setHiTypes(const QList<OAIHITypeEnum> &hi_types) {
    m_hi_types = hi_types;
    m_hi_types_isSet = true;
}

bool OAIHIPConsentNotification_notification_consentDetail::is_hi_types_Set() const{
    return m_hi_types_isSet;
}

bool OAIHIPConsentNotification_notification_consentDetail::is_hi_types_Valid() const{
    return m_hi_types_isValid;
}

OAIConsentArtefactResponse_consent_consentDetail_hip OAIHIPConsentNotification_notification_consentDetail::getHip() const {
    return m_hip;
}
void OAIHIPConsentNotification_notification_consentDetail::setHip(const OAIConsentArtefactResponse_consent_consentDetail_hip &hip) {
    m_hip = hip;
    m_hip_isSet = true;
}

bool OAIHIPConsentNotification_notification_consentDetail::is_hip_Set() const{
    return m_hip_isSet;
}

bool OAIHIPConsentNotification_notification_consentDetail::is_hip_Valid() const{
    return m_hip_isValid;
}

OAIConsentManagerPatientID OAIHIPConsentNotification_notification_consentDetail::getPatient() const {
    return m_patient;
}
void OAIHIPConsentNotification_notification_consentDetail::setPatient(const OAIConsentManagerPatientID &patient) {
    m_patient = patient;
    m_patient_isSet = true;
}

bool OAIHIPConsentNotification_notification_consentDetail::is_patient_Set() const{
    return m_patient_isSet;
}

bool OAIHIPConsentNotification_notification_consentDetail::is_patient_Valid() const{
    return m_patient_isValid;
}

OAIPermission OAIHIPConsentNotification_notification_consentDetail::getPermission() const {
    return m_permission;
}
void OAIHIPConsentNotification_notification_consentDetail::setPermission(const OAIPermission &permission) {
    m_permission = permission;
    m_permission_isSet = true;
}

bool OAIHIPConsentNotification_notification_consentDetail::is_permission_Set() const{
    return m_permission_isSet;
}

bool OAIHIPConsentNotification_notification_consentDetail::is_permission_Valid() const{
    return m_permission_isValid;
}

OAIUsePurpose OAIHIPConsentNotification_notification_consentDetail::getPurpose() const {
    return m_purpose;
}
void OAIHIPConsentNotification_notification_consentDetail::setPurpose(const OAIUsePurpose &purpose) {
    m_purpose = purpose;
    m_purpose_isSet = true;
}

bool OAIHIPConsentNotification_notification_consentDetail::is_purpose_Set() const{
    return m_purpose_isSet;
}

bool OAIHIPConsentNotification_notification_consentDetail::is_purpose_Valid() const{
    return m_purpose_isValid;
}

QString OAIHIPConsentNotification_notification_consentDetail::getSchemaVersion() const {
    return m_schema_version;
}
void OAIHIPConsentNotification_notification_consentDetail::setSchemaVersion(const QString &schema_version) {
    m_schema_version = schema_version;
    m_schema_version_isSet = true;
}

bool OAIHIPConsentNotification_notification_consentDetail::is_schema_version_Set() const{
    return m_schema_version_isSet;
}

bool OAIHIPConsentNotification_notification_consentDetail::is_schema_version_Valid() const{
    return m_schema_version_isValid;
}

bool OAIHIPConsentNotification_notification_consentDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_care_contexts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_consent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consent_manager.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hi_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_hip.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_patient.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_permission.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_purpose.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHIPConsentNotification_notification_consentDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_care_contexts_isValid && m_consent_id_isValid && m_consent_manager_isValid && m_created_at_isValid && m_hi_types_isValid && m_hip_isValid && m_patient_isValid && m_permission_isValid && m_purpose_isValid && true;
}

} // namespace OpenAPI
