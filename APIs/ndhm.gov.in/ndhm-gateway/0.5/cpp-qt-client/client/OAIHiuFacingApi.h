/**
 * Gateway
 * Gateway is the hub that routes/orchestrates the interaction between consent managers and API bridges. There are 5 categories of APIs; discovery, link, consent flow, data flow and  monitoring. To reflect the consumers of APIs, the above apis are also categorized under cm facing, hiu facing and hip facing  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIHiuFacingApi_H
#define OAI_OAIHiuFacingApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIConsentFetchRequest.h"
#include "OAIConsentRequest.h"
#include "OAIConsentRequestStatusRequest.h"
#include "OAIErrorResponse.h"
#include "OAIHIRequest.h"
#include "OAIHIUConsentNotificationResponse.h"
#include "OAIHIUSubscriptionNotificationAcknowledgment.h"
#include "OAIHIUSubscriptionRequestNotificationAcknowledgement.h"
#include "OAIHealthInformationNotification.h"
#include "OAIPatientAuthConfirmRequest.h"
#include "OAIPatientAuthInitRequest.h"
#include "OAIPatientAuthModeQueryRequest.h"
#include "OAIPatientAuthNotificationAcknowledgement.h"
#include "OAIPatientIdentificationRequest.h"
#include "OAISubscriptionRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIHiuFacingApi : public QObject {
    Q_OBJECT

public:
    OAIHiuFacingApi(const int timeOut = 0);
    ~OAIHiuFacingApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_cm_id QString [required]
    * @param[in]  oai_consent_request OAIConsentRequest [required]
    */
    virtual void v05ConsentRequestsInitPost(const QString &authorization, const QString &x_cm_id, const OAIConsentRequest &oai_consent_request);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_cm_id QString [required]
    * @param[in]  oai_consent_request_status_request OAIConsentRequestStatusRequest [required]
    */
    virtual void v05ConsentRequestsStatusPost(const QString &authorization, const QString &x_cm_id, const OAIConsentRequestStatusRequest &oai_consent_request_status_request);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_cm_id QString [required]
    * @param[in]  oai_consent_fetch_request OAIConsentFetchRequest [required]
    */
    virtual void v05ConsentsFetchPost(const QString &authorization, const QString &x_cm_id, const OAIConsentFetchRequest &oai_consent_fetch_request);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_cm_id QString [required]
    * @param[in]  oaihiu_consent_notification_response OAIHIUConsentNotificationResponse [required]
    */
    virtual void v05ConsentsHiuOnNotifyPost(const QString &authorization, const QString &x_cm_id, const OAIHIUConsentNotificationResponse &oaihiu_consent_notification_response);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_cm_id QString [required]
    * @param[in]  oaihi_request OAIHIRequest [required]
    */
    virtual void v05HealthInformationCmRequestPost(const QString &authorization, const QString &x_cm_id, const OAIHIRequest &oaihi_request);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_cm_id QString [required]
    * @param[in]  oai_health_information_notification OAIHealthInformationNotification [required]
    */
    virtual void v05HealthInformationNotifyPost(const QString &authorization, const QString &x_cm_id, const OAIHealthInformationNotification &oai_health_information_notification);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_cm_id QString [required]
    * @param[in]  oai_patient_identification_request OAIPatientIdentificationRequest [required]
    */
    virtual void v05PatientsFindPost(const QString &authorization, const QString &x_cm_id, const OAIPatientIdentificationRequest &oai_patient_identification_request);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_cm_id QString [required]
    * @param[in]  oai_subscription_request OAISubscriptionRequest [required]
    */
    virtual void v05SubscriptionRequestsCmInitPost(const QString &authorization, const QString &x_cm_id, const OAISubscriptionRequest &oai_subscription_request);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_cm_id QString [required]
    * @param[in]  oaihiu_subscription_request_notification_acknowledgement OAIHIUSubscriptionRequestNotificationAcknowledgement [required]
    */
    virtual void v05SubscriptionRequestsHiuOnNotifyPost(const QString &authorization, const QString &x_cm_id, const OAIHIUSubscriptionRequestNotificationAcknowledgement &oaihiu_subscription_request_notification_acknowledgement);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_cm_id QString [required]
    * @param[in]  oaihiu_subscription_notification_acknowledgment OAIHIUSubscriptionNotificationAcknowledgment [required]
    */
    virtual void v05SubscriptionsHiuOnNotifyPost(const QString &authorization, const QString &x_cm_id, const OAIHIUSubscriptionNotificationAcknowledgment &oaihiu_subscription_notification_acknowledgment);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_cm_id QString [required]
    * @param[in]  oai_patient_auth_confirm_request OAIPatientAuthConfirmRequest [required]
    */
    virtual void v05UsersAuthConfirmPost(const QString &authorization, const QString &x_cm_id, const OAIPatientAuthConfirmRequest &oai_patient_auth_confirm_request);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_cm_id QString [required]
    * @param[in]  oai_patient_auth_mode_query_request OAIPatientAuthModeQueryRequest [required]
    */
    virtual void v05UsersAuthFetchModesPost(const QString &authorization, const QString &x_cm_id, const OAIPatientAuthModeQueryRequest &oai_patient_auth_mode_query_request);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_cm_id QString [required]
    * @param[in]  oai_patient_auth_init_request OAIPatientAuthInitRequest [required]
    */
    virtual void v05UsersAuthInitPost(const QString &authorization, const QString &x_cm_id, const OAIPatientAuthInitRequest &oai_patient_auth_init_request);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_cm_id QString [required]
    * @param[in]  oai_patient_auth_notification_acknowledgement OAIPatientAuthNotificationAcknowledgement [required]
    */
    virtual void v05UsersAuthOnNotifyPost(const QString &authorization, const QString &x_cm_id, const OAIPatientAuthNotificationAcknowledgement &oai_patient_auth_notification_acknowledgement);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void v05ConsentRequestsInitPostCallback(OAIHttpRequestWorker *worker);
    void v05ConsentRequestsStatusPostCallback(OAIHttpRequestWorker *worker);
    void v05ConsentsFetchPostCallback(OAIHttpRequestWorker *worker);
    void v05ConsentsHiuOnNotifyPostCallback(OAIHttpRequestWorker *worker);
    void v05HealthInformationCmRequestPostCallback(OAIHttpRequestWorker *worker);
    void v05HealthInformationNotifyPostCallback(OAIHttpRequestWorker *worker);
    void v05PatientsFindPostCallback(OAIHttpRequestWorker *worker);
    void v05SubscriptionRequestsCmInitPostCallback(OAIHttpRequestWorker *worker);
    void v05SubscriptionRequestsHiuOnNotifyPostCallback(OAIHttpRequestWorker *worker);
    void v05SubscriptionsHiuOnNotifyPostCallback(OAIHttpRequestWorker *worker);
    void v05UsersAuthConfirmPostCallback(OAIHttpRequestWorker *worker);
    void v05UsersAuthFetchModesPostCallback(OAIHttpRequestWorker *worker);
    void v05UsersAuthInitPostCallback(OAIHttpRequestWorker *worker);
    void v05UsersAuthOnNotifyPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void v05ConsentRequestsInitPostSignal();
    void v05ConsentRequestsStatusPostSignal();
    void v05ConsentsFetchPostSignal();
    void v05ConsentsHiuOnNotifyPostSignal();
    void v05HealthInformationCmRequestPostSignal();
    void v05HealthInformationNotifyPostSignal();
    void v05PatientsFindPostSignal();
    void v05SubscriptionRequestsCmInitPostSignal();
    void v05SubscriptionRequestsHiuOnNotifyPostSignal();
    void v05SubscriptionsHiuOnNotifyPostSignal();
    void v05UsersAuthConfirmPostSignal();
    void v05UsersAuthFetchModesPostSignal();
    void v05UsersAuthInitPostSignal();
    void v05UsersAuthOnNotifyPostSignal();


    void v05ConsentRequestsInitPostSignalFull(OAIHttpRequestWorker *worker);
    void v05ConsentRequestsStatusPostSignalFull(OAIHttpRequestWorker *worker);
    void v05ConsentsFetchPostSignalFull(OAIHttpRequestWorker *worker);
    void v05ConsentsHiuOnNotifyPostSignalFull(OAIHttpRequestWorker *worker);
    void v05HealthInformationCmRequestPostSignalFull(OAIHttpRequestWorker *worker);
    void v05HealthInformationNotifyPostSignalFull(OAIHttpRequestWorker *worker);
    void v05PatientsFindPostSignalFull(OAIHttpRequestWorker *worker);
    void v05SubscriptionRequestsCmInitPostSignalFull(OAIHttpRequestWorker *worker);
    void v05SubscriptionRequestsHiuOnNotifyPostSignalFull(OAIHttpRequestWorker *worker);
    void v05SubscriptionsHiuOnNotifyPostSignalFull(OAIHttpRequestWorker *worker);
    void v05UsersAuthConfirmPostSignalFull(OAIHttpRequestWorker *worker);
    void v05UsersAuthFetchModesPostSignalFull(OAIHttpRequestWorker *worker);
    void v05UsersAuthInitPostSignalFull(OAIHttpRequestWorker *worker);
    void v05UsersAuthOnNotifyPostSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use v05ConsentRequestsInitPostSignalError() instead")
    void v05ConsentRequestsInitPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v05ConsentRequestsInitPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05ConsentRequestsStatusPostSignalError() instead")
    void v05ConsentRequestsStatusPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v05ConsentRequestsStatusPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05ConsentsFetchPostSignalError() instead")
    void v05ConsentsFetchPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v05ConsentsFetchPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05ConsentsHiuOnNotifyPostSignalError() instead")
    void v05ConsentsHiuOnNotifyPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v05ConsentsHiuOnNotifyPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05HealthInformationCmRequestPostSignalError() instead")
    void v05HealthInformationCmRequestPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v05HealthInformationCmRequestPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05HealthInformationNotifyPostSignalError() instead")
    void v05HealthInformationNotifyPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v05HealthInformationNotifyPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05PatientsFindPostSignalError() instead")
    void v05PatientsFindPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v05PatientsFindPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05SubscriptionRequestsCmInitPostSignalError() instead")
    void v05SubscriptionRequestsCmInitPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v05SubscriptionRequestsCmInitPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05SubscriptionRequestsHiuOnNotifyPostSignalError() instead")
    void v05SubscriptionRequestsHiuOnNotifyPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v05SubscriptionRequestsHiuOnNotifyPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05SubscriptionsHiuOnNotifyPostSignalError() instead")
    void v05SubscriptionsHiuOnNotifyPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v05SubscriptionsHiuOnNotifyPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05UsersAuthConfirmPostSignalError() instead")
    void v05UsersAuthConfirmPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v05UsersAuthConfirmPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05UsersAuthFetchModesPostSignalError() instead")
    void v05UsersAuthFetchModesPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v05UsersAuthFetchModesPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05UsersAuthInitPostSignalError() instead")
    void v05UsersAuthInitPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v05UsersAuthInitPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05UsersAuthOnNotifyPostSignalError() instead")
    void v05UsersAuthOnNotifyPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v05UsersAuthOnNotifyPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use v05ConsentRequestsInitPostSignalErrorFull() instead")
    void v05ConsentRequestsInitPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v05ConsentRequestsInitPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05ConsentRequestsStatusPostSignalErrorFull() instead")
    void v05ConsentRequestsStatusPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v05ConsentRequestsStatusPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05ConsentsFetchPostSignalErrorFull() instead")
    void v05ConsentsFetchPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v05ConsentsFetchPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05ConsentsHiuOnNotifyPostSignalErrorFull() instead")
    void v05ConsentsHiuOnNotifyPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v05ConsentsHiuOnNotifyPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05HealthInformationCmRequestPostSignalErrorFull() instead")
    void v05HealthInformationCmRequestPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v05HealthInformationCmRequestPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05HealthInformationNotifyPostSignalErrorFull() instead")
    void v05HealthInformationNotifyPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v05HealthInformationNotifyPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05PatientsFindPostSignalErrorFull() instead")
    void v05PatientsFindPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v05PatientsFindPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05SubscriptionRequestsCmInitPostSignalErrorFull() instead")
    void v05SubscriptionRequestsCmInitPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v05SubscriptionRequestsCmInitPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05SubscriptionRequestsHiuOnNotifyPostSignalErrorFull() instead")
    void v05SubscriptionRequestsHiuOnNotifyPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v05SubscriptionRequestsHiuOnNotifyPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05SubscriptionsHiuOnNotifyPostSignalErrorFull() instead")
    void v05SubscriptionsHiuOnNotifyPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v05SubscriptionsHiuOnNotifyPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05UsersAuthConfirmPostSignalErrorFull() instead")
    void v05UsersAuthConfirmPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v05UsersAuthConfirmPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05UsersAuthFetchModesPostSignalErrorFull() instead")
    void v05UsersAuthFetchModesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v05UsersAuthFetchModesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05UsersAuthInitPostSignalErrorFull() instead")
    void v05UsersAuthInitPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v05UsersAuthInitPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05UsersAuthOnNotifyPostSignalErrorFull() instead")
    void v05UsersAuthOnNotifyPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v05UsersAuthOnNotifyPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
