/**
 * Gateway
 * Gateway is the hub that routes/orchestrates the interaction between consent managers and API bridges. There are 5 categories of APIs; discovery, link, consent flow, data flow and  monitoring. To reflect the consumers of APIs, the above apis are also categorized under cm facing, hiu facing and hip facing  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHIUSubscriptionNotification_event.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHIUSubscriptionNotification_event::OAIHIUSubscriptionNotification_event(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHIUSubscriptionNotification_event::OAIHIUSubscriptionNotification_event() {
    this->initializeModel();
}

OAIHIUSubscriptionNotification_event::~OAIHIUSubscriptionNotification_event() {}

void OAIHIUSubscriptionNotification_event::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_published_isSet = false;
    m_published_isValid = false;

    m_subscription_id_isSet = false;
    m_subscription_id_isValid = false;
}

void OAIHIUSubscriptionNotification_event::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHIUSubscriptionNotification_event::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_published_isValid = ::OpenAPI::fromJsonValue(m_published, json[QString("published")]);
    m_published_isSet = !json[QString("published")].isNull() && m_published_isValid;

    m_subscription_id_isValid = ::OpenAPI::fromJsonValue(m_subscription_id, json[QString("subscriptionId")]);
    m_subscription_id_isSet = !json[QString("subscriptionId")].isNull() && m_subscription_id_isValid;
}

QString OAIHIUSubscriptionNotification_event::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHIUSubscriptionNotification_event::asJsonObject() const {
    QJsonObject obj;
    if (m_category.isSet()) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_content.isSet()) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_published_isSet) {
        obj.insert(QString("published"), ::OpenAPI::toJsonValue(m_published));
    }
    if (m_subscription_id_isSet) {
        obj.insert(QString("subscriptionId"), ::OpenAPI::toJsonValue(m_subscription_id));
    }
    return obj;
}

OAISubscriptionCategory OAIHIUSubscriptionNotification_event::getCategory() const {
    return m_category;
}
void OAIHIUSubscriptionNotification_event::setCategory(const OAISubscriptionCategory &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIHIUSubscriptionNotification_event::is_category_Set() const{
    return m_category_isSet;
}

bool OAIHIUSubscriptionNotification_event::is_category_Valid() const{
    return m_category_isValid;
}

OAIHIUSubscriptionEventContent OAIHIUSubscriptionNotification_event::getContent() const {
    return m_content;
}
void OAIHIUSubscriptionNotification_event::setContent(const OAIHIUSubscriptionEventContent &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIHIUSubscriptionNotification_event::is_content_Set() const{
    return m_content_isSet;
}

bool OAIHIUSubscriptionNotification_event::is_content_Valid() const{
    return m_content_isValid;
}

QString OAIHIUSubscriptionNotification_event::getId() const {
    return m_id;
}
void OAIHIUSubscriptionNotification_event::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIHIUSubscriptionNotification_event::is_id_Set() const{
    return m_id_isSet;
}

bool OAIHIUSubscriptionNotification_event::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIHIUSubscriptionNotification_event::getPublished() const {
    return m_published;
}
void OAIHIUSubscriptionNotification_event::setPublished(const QDateTime &published) {
    m_published = published;
    m_published_isSet = true;
}

bool OAIHIUSubscriptionNotification_event::is_published_Set() const{
    return m_published_isSet;
}

bool OAIHIUSubscriptionNotification_event::is_published_Valid() const{
    return m_published_isValid;
}

QString OAIHIUSubscriptionNotification_event::getSubscriptionId() const {
    return m_subscription_id;
}
void OAIHIUSubscriptionNotification_event::setSubscriptionId(const QString &subscription_id) {
    m_subscription_id = subscription_id;
    m_subscription_id_isSet = true;
}

bool OAIHIUSubscriptionNotification_event::is_subscription_id_Set() const{
    return m_subscription_id_isSet;
}

bool OAIHIUSubscriptionNotification_event::is_subscription_id_Valid() const{
    return m_subscription_id_isValid;
}

bool OAIHIUSubscriptionNotification_event::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_content.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_published_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHIUSubscriptionNotification_event::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_category_isValid && m_content_isValid && m_id_isValid && m_published_isValid && m_subscription_id_isValid && true;
}

} // namespace OpenAPI
