/**
 * Gateway
 * Gateway is the hub that routes/orchestrates the interaction between consent managers and API bridges. There are 5 categories of APIs; discovery, link, consent flow, data flow and  monitoring. To reflect the consumers of APIs, the above apis are also categorized under cm facing, hiu facing and hip facing  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHIUSubscriptionEventContent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHIUSubscriptionEventContent::OAIHIUSubscriptionEventContent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHIUSubscriptionEventContent::OAIHIUSubscriptionEventContent() {
    this->initializeModel();
}

OAIHIUSubscriptionEventContent::~OAIHIUSubscriptionEventContent() {}

void OAIHIUSubscriptionEventContent::initializeModel() {

    m_context_isSet = false;
    m_context_isValid = false;

    m_hip_isSet = false;
    m_hip_isValid = false;

    m_patient_isSet = false;
    m_patient_isValid = false;
}

void OAIHIUSubscriptionEventContent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHIUSubscriptionEventContent::fromJsonObject(QJsonObject json) {

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("context")]);
    m_context_isSet = !json[QString("context")].isNull() && m_context_isValid;

    m_hip_isValid = ::OpenAPI::fromJsonValue(m_hip, json[QString("hip")]);
    m_hip_isSet = !json[QString("hip")].isNull() && m_hip_isValid;

    m_patient_isValid = ::OpenAPI::fromJsonValue(m_patient, json[QString("patient")]);
    m_patient_isSet = !json[QString("patient")].isNull() && m_patient_isValid;
}

QString OAIHIUSubscriptionEventContent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHIUSubscriptionEventContent::asJsonObject() const {
    QJsonObject obj;
    if (m_context.size() > 0) {
        obj.insert(QString("context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_hip.isSet()) {
        obj.insert(QString("hip"), ::OpenAPI::toJsonValue(m_hip));
    }
    if (m_patient.isSet()) {
        obj.insert(QString("patient"), ::OpenAPI::toJsonValue(m_patient));
    }
    return obj;
}

QList<OAIEventCategoryDetail> OAIHIUSubscriptionEventContent::getContext() const {
    return m_context;
}
void OAIHIUSubscriptionEventContent::setContext(const QList<OAIEventCategoryDetail> &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAIHIUSubscriptionEventContent::is_context_Set() const{
    return m_context_isSet;
}

bool OAIHIUSubscriptionEventContent::is_context_Valid() const{
    return m_context_isValid;
}

OAIOrganizationRepresentation OAIHIUSubscriptionEventContent::getHip() const {
    return m_hip;
}
void OAIHIUSubscriptionEventContent::setHip(const OAIOrganizationRepresentation &hip) {
    m_hip = hip;
    m_hip_isSet = true;
}

bool OAIHIUSubscriptionEventContent::is_hip_Set() const{
    return m_hip_isSet;
}

bool OAIHIUSubscriptionEventContent::is_hip_Valid() const{
    return m_hip_isValid;
}

OAIConsentManagerPatientID OAIHIUSubscriptionEventContent::getPatient() const {
    return m_patient;
}
void OAIHIUSubscriptionEventContent::setPatient(const OAIConsentManagerPatientID &patient) {
    m_patient = patient;
    m_patient_isSet = true;
}

bool OAIHIUSubscriptionEventContent::is_patient_Set() const{
    return m_patient_isSet;
}

bool OAIHIUSubscriptionEventContent::is_patient_Valid() const{
    return m_patient_isValid;
}

bool OAIHIUSubscriptionEventContent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_context.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_hip.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_patient.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHIUSubscriptionEventContent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_context_isValid && m_hip_isValid && m_patient_isValid && true;
}

} // namespace OpenAPI
