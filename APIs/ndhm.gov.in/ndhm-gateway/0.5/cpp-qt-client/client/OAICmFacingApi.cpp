/**
 * Gateway
 * Gateway is the hub that routes/orchestrates the interaction between consent managers and API bridges. There are 5 categories of APIs; discovery, link, consent flow, data flow and  monitoring. To reflect the consumers of APIs, the above apis are also categorized under cm facing, hiu facing and hip facing  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICmFacingApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAICmFacingApi::OAICmFacingApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAICmFacingApi::~OAICmFacingApi() {
}

void OAICmFacingApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://dev.ndhm.gov.in/gateway"),
    "Sandbox",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("v05CareContextsDiscoverPost", defaultConf);
    _serverIndices.insert("v05CareContextsDiscoverPost", 0);
    _serverConfigs.insert("v05CareContextsOnDiscoverPost", defaultConf);
    _serverIndices.insert("v05CareContextsOnDiscoverPost", 0);
    _serverConfigs.insert("v05ConsentRequestsOnInitPost", defaultConf);
    _serverIndices.insert("v05ConsentRequestsOnInitPost", 0);
    _serverConfigs.insert("v05ConsentRequestsOnStatusPost", defaultConf);
    _serverIndices.insert("v05ConsentRequestsOnStatusPost", 0);
    _serverConfigs.insert("v05ConsentsHipNotifyPost", defaultConf);
    _serverIndices.insert("v05ConsentsHipNotifyPost", 0);
    _serverConfigs.insert("v05ConsentsHiuNotifyPost", defaultConf);
    _serverIndices.insert("v05ConsentsHiuNotifyPost", 0);
    _serverConfigs.insert("v05ConsentsOnFetchPost", defaultConf);
    _serverIndices.insert("v05ConsentsOnFetchPost", 0);
    _serverConfigs.insert("v05HealthInformationCmOnRequestPost", defaultConf);
    _serverIndices.insert("v05HealthInformationCmOnRequestPost", 0);
    _serverConfigs.insert("v05HealthInformationHipRequestPost", defaultConf);
    _serverIndices.insert("v05HealthInformationHipRequestPost", 0);
    _serverConfigs.insert("v05LinksLinkConfirmPost", defaultConf);
    _serverIndices.insert("v05LinksLinkConfirmPost", 0);
    _serverConfigs.insert("v05LinksLinkInitPost", defaultConf);
    _serverIndices.insert("v05LinksLinkInitPost", 0);
    _serverConfigs.insert("v05LinksLinkOnAddContextsPost", defaultConf);
    _serverIndices.insert("v05LinksLinkOnAddContextsPost", 0);
    _serverConfigs.insert("v05PatientsOnFindPost", defaultConf);
    _serverIndices.insert("v05PatientsOnFindPost", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://your-hrp-server.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("v05PatientsProfileSharePost", serverConf);
    _serverIndices.insert("v05PatientsProfileSharePost", 0);
    _serverConfigs.insert("v05PatientsSmsOnNotifyPost", defaultConf);
    _serverIndices.insert("v05PatientsSmsOnNotifyPost", 0);
    _serverConfigs.insert("v05SubscriptionRequestsCmOnInitPost", defaultConf);
    _serverIndices.insert("v05SubscriptionRequestsCmOnInitPost", 0);
    _serverConfigs.insert("v05SubscriptionRequestsHiuNotifyPost", defaultConf);
    _serverIndices.insert("v05SubscriptionRequestsHiuNotifyPost", 0);
    _serverConfigs.insert("v05SubscriptionsHiuNotifyPost", defaultConf);
    _serverIndices.insert("v05SubscriptionsHiuNotifyPost", 0);
    _serverConfigs.insert("v05UsersAuthNotifyPost", defaultConf);
    _serverIndices.insert("v05UsersAuthNotifyPost", 0);
    _serverConfigs.insert("v05UsersAuthOnConfirmPost", defaultConf);
    _serverIndices.insert("v05UsersAuthOnConfirmPost", 0);
    _serverConfigs.insert("v05UsersAuthOnFetchModesPost", defaultConf);
    _serverIndices.insert("v05UsersAuthOnFetchModesPost", 0);
    _serverConfigs.insert("v05UsersAuthOnInitPost", defaultConf);
    _serverIndices.insert("v05UsersAuthOnInitPost", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAICmFacingApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAICmFacingApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAICmFacingApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAICmFacingApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAICmFacingApi::setUsername(const QString &username) {
    _username = username;
}

void OAICmFacingApi::setPassword(const QString &password) {
    _password = password;
}


void OAICmFacingApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAICmFacingApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAICmFacingApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAICmFacingApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAICmFacingApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAICmFacingApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAICmFacingApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAICmFacingApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAICmFacingApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAICmFacingApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAICmFacingApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAICmFacingApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAICmFacingApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAICmFacingApi::v05CareContextsDiscoverPost(const QString &authorization, const QString &x_hip_id, const OAIPatientDiscoveryRequest &oai_patient_discovery_request) {
    QString fullPath = QString(_serverConfigs["v05CareContextsDiscoverPost"][_serverIndices.value("v05CareContextsDiscoverPost")].URL()+"/v0.5/care-contexts/discover");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_patient_discovery_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_hip_id).isEmpty()) {
            input.headers.insert("X-HIP-ID", ::OpenAPI::toStringValue(x_hip_id));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICmFacingApi::v05CareContextsDiscoverPostCallback);
    connect(this, &OAICmFacingApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICmFacingApi::v05CareContextsDiscoverPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT v05CareContextsDiscoverPostSignal();
        Q_EMIT v05CareContextsDiscoverPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT v05CareContextsDiscoverPostSignalE(error_type, error_str);
        Q_EMIT v05CareContextsDiscoverPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT v05CareContextsDiscoverPostSignalError(error_type, error_str);
        Q_EMIT v05CareContextsDiscoverPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICmFacingApi::v05CareContextsOnDiscoverPost(const QString &authorization, const QString &x_cm_id, const OAIPatientDiscoveryResult &oai_patient_discovery_result) {
    QString fullPath = QString(_serverConfigs["v05CareContextsOnDiscoverPost"][_serverIndices.value("v05CareContextsOnDiscoverPost")].URL()+"/v0.5/care-contexts/on-discover");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_patient_discovery_result.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_cm_id).isEmpty()) {
            input.headers.insert("X-CM-ID", ::OpenAPI::toStringValue(x_cm_id));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICmFacingApi::v05CareContextsOnDiscoverPostCallback);
    connect(this, &OAICmFacingApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICmFacingApi::v05CareContextsOnDiscoverPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT v05CareContextsOnDiscoverPostSignal();
        Q_EMIT v05CareContextsOnDiscoverPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT v05CareContextsOnDiscoverPostSignalE(error_type, error_str);
        Q_EMIT v05CareContextsOnDiscoverPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT v05CareContextsOnDiscoverPostSignalError(error_type, error_str);
        Q_EMIT v05CareContextsOnDiscoverPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICmFacingApi::v05ConsentRequestsOnInitPost(const QString &authorization, const QString &x_hiu_id, const OAIConsentRequestInitResponse &oai_consent_request_init_response) {
    QString fullPath = QString(_serverConfigs["v05ConsentRequestsOnInitPost"][_serverIndices.value("v05ConsentRequestsOnInitPost")].URL()+"/v0.5/consent-requests/on-init");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_consent_request_init_response.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_hiu_id).isEmpty()) {
            input.headers.insert("X-HIU-ID", ::OpenAPI::toStringValue(x_hiu_id));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICmFacingApi::v05ConsentRequestsOnInitPostCallback);
    connect(this, &OAICmFacingApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICmFacingApi::v05ConsentRequestsOnInitPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT v05ConsentRequestsOnInitPostSignal();
        Q_EMIT v05ConsentRequestsOnInitPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT v05ConsentRequestsOnInitPostSignalE(error_type, error_str);
        Q_EMIT v05ConsentRequestsOnInitPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT v05ConsentRequestsOnInitPostSignalError(error_type, error_str);
        Q_EMIT v05ConsentRequestsOnInitPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICmFacingApi::v05ConsentRequestsOnStatusPost(const QString &authorization, const QString &x_hiu_id, const OAIHIUConsentRequestStatus &oaihiu_consent_request_status) {
    QString fullPath = QString(_serverConfigs["v05ConsentRequestsOnStatusPost"][_serverIndices.value("v05ConsentRequestsOnStatusPost")].URL()+"/v0.5/consent-requests/on-status");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oaihiu_consent_request_status.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_hiu_id).isEmpty()) {
            input.headers.insert("X-HIU-ID", ::OpenAPI::toStringValue(x_hiu_id));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICmFacingApi::v05ConsentRequestsOnStatusPostCallback);
    connect(this, &OAICmFacingApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICmFacingApi::v05ConsentRequestsOnStatusPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT v05ConsentRequestsOnStatusPostSignal();
        Q_EMIT v05ConsentRequestsOnStatusPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT v05ConsentRequestsOnStatusPostSignalE(error_type, error_str);
        Q_EMIT v05ConsentRequestsOnStatusPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT v05ConsentRequestsOnStatusPostSignalError(error_type, error_str);
        Q_EMIT v05ConsentRequestsOnStatusPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICmFacingApi::v05ConsentsHipNotifyPost(const QString &authorization, const QString &x_hip_id, const OAIHIPConsentNotification &oaihip_consent_notification) {
    QString fullPath = QString(_serverConfigs["v05ConsentsHipNotifyPost"][_serverIndices.value("v05ConsentsHipNotifyPost")].URL()+"/v0.5/consents/hip/notify");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oaihip_consent_notification.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_hip_id).isEmpty()) {
            input.headers.insert("X-HIP-ID", ::OpenAPI::toStringValue(x_hip_id));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICmFacingApi::v05ConsentsHipNotifyPostCallback);
    connect(this, &OAICmFacingApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICmFacingApi::v05ConsentsHipNotifyPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT v05ConsentsHipNotifyPostSignal();
        Q_EMIT v05ConsentsHipNotifyPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT v05ConsentsHipNotifyPostSignalE(error_type, error_str);
        Q_EMIT v05ConsentsHipNotifyPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT v05ConsentsHipNotifyPostSignalError(error_type, error_str);
        Q_EMIT v05ConsentsHipNotifyPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICmFacingApi::v05ConsentsHiuNotifyPost(const QString &authorization, const QString &x_hiu_id, const OAIHIUConsentNotificationEvent &oaihiu_consent_notification_event) {
    QString fullPath = QString(_serverConfigs["v05ConsentsHiuNotifyPost"][_serverIndices.value("v05ConsentsHiuNotifyPost")].URL()+"/v0.5/consents/hiu/notify");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oaihiu_consent_notification_event.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_hiu_id).isEmpty()) {
            input.headers.insert("X-HIU-ID", ::OpenAPI::toStringValue(x_hiu_id));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICmFacingApi::v05ConsentsHiuNotifyPostCallback);
    connect(this, &OAICmFacingApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICmFacingApi::v05ConsentsHiuNotifyPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT v05ConsentsHiuNotifyPostSignal();
        Q_EMIT v05ConsentsHiuNotifyPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT v05ConsentsHiuNotifyPostSignalE(error_type, error_str);
        Q_EMIT v05ConsentsHiuNotifyPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT v05ConsentsHiuNotifyPostSignalError(error_type, error_str);
        Q_EMIT v05ConsentsHiuNotifyPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICmFacingApi::v05ConsentsOnFetchPost(const QString &authorization, const QString &x_hiu_id, const OAIConsentArtefactResponse &oai_consent_artefact_response) {
    QString fullPath = QString(_serverConfigs["v05ConsentsOnFetchPost"][_serverIndices.value("v05ConsentsOnFetchPost")].URL()+"/v0.5/consents/on-fetch");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_consent_artefact_response.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_hiu_id).isEmpty()) {
            input.headers.insert("X-HIU-ID", ::OpenAPI::toStringValue(x_hiu_id));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICmFacingApi::v05ConsentsOnFetchPostCallback);
    connect(this, &OAICmFacingApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICmFacingApi::v05ConsentsOnFetchPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT v05ConsentsOnFetchPostSignal();
        Q_EMIT v05ConsentsOnFetchPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT v05ConsentsOnFetchPostSignalE(error_type, error_str);
        Q_EMIT v05ConsentsOnFetchPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT v05ConsentsOnFetchPostSignalError(error_type, error_str);
        Q_EMIT v05ConsentsOnFetchPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICmFacingApi::v05HealthInformationCmOnRequestPost(const QString &authorization, const QString &x_hiu_id, const OAIHIUHealthInformationRequestResponse &oaihiu_health_information_request_response) {
    QString fullPath = QString(_serverConfigs["v05HealthInformationCmOnRequestPost"][_serverIndices.value("v05HealthInformationCmOnRequestPost")].URL()+"/v0.5/health-information/cm/on-request");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oaihiu_health_information_request_response.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_hiu_id).isEmpty()) {
            input.headers.insert("X-HIU-ID", ::OpenAPI::toStringValue(x_hiu_id));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICmFacingApi::v05HealthInformationCmOnRequestPostCallback);
    connect(this, &OAICmFacingApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICmFacingApi::v05HealthInformationCmOnRequestPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT v05HealthInformationCmOnRequestPostSignal();
        Q_EMIT v05HealthInformationCmOnRequestPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT v05HealthInformationCmOnRequestPostSignalE(error_type, error_str);
        Q_EMIT v05HealthInformationCmOnRequestPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT v05HealthInformationCmOnRequestPostSignalError(error_type, error_str);
        Q_EMIT v05HealthInformationCmOnRequestPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICmFacingApi::v05HealthInformationHipRequestPost(const QString &authorization, const QString &x_hip_id, const OAIHIPHIRequest &oaihiphi_request) {
    QString fullPath = QString(_serverConfigs["v05HealthInformationHipRequestPost"][_serverIndices.value("v05HealthInformationHipRequestPost")].URL()+"/v0.5/health-information/hip/request");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oaihiphi_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_hip_id).isEmpty()) {
            input.headers.insert("X-HIP-ID", ::OpenAPI::toStringValue(x_hip_id));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICmFacingApi::v05HealthInformationHipRequestPostCallback);
    connect(this, &OAICmFacingApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICmFacingApi::v05HealthInformationHipRequestPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT v05HealthInformationHipRequestPostSignal();
        Q_EMIT v05HealthInformationHipRequestPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT v05HealthInformationHipRequestPostSignalE(error_type, error_str);
        Q_EMIT v05HealthInformationHipRequestPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT v05HealthInformationHipRequestPostSignalError(error_type, error_str);
        Q_EMIT v05HealthInformationHipRequestPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICmFacingApi::v05LinksLinkConfirmPost(const QString &authorization, const QString &x_hip_id, const OAILinkConfirmationRequest &oai_link_confirmation_request) {
    QString fullPath = QString(_serverConfigs["v05LinksLinkConfirmPost"][_serverIndices.value("v05LinksLinkConfirmPost")].URL()+"/v0.5/links/link/confirm");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_link_confirmation_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_hip_id).isEmpty()) {
            input.headers.insert("X-HIP-ID", ::OpenAPI::toStringValue(x_hip_id));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICmFacingApi::v05LinksLinkConfirmPostCallback);
    connect(this, &OAICmFacingApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICmFacingApi::v05LinksLinkConfirmPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT v05LinksLinkConfirmPostSignal();
        Q_EMIT v05LinksLinkConfirmPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT v05LinksLinkConfirmPostSignalE(error_type, error_str);
        Q_EMIT v05LinksLinkConfirmPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT v05LinksLinkConfirmPostSignalError(error_type, error_str);
        Q_EMIT v05LinksLinkConfirmPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICmFacingApi::v05LinksLinkInitPost(const QString &authorization, const QString &x_hip_id, const OAIPatientLinkReferenceRequest &oai_patient_link_reference_request) {
    QString fullPath = QString(_serverConfigs["v05LinksLinkInitPost"][_serverIndices.value("v05LinksLinkInitPost")].URL()+"/v0.5/links/link/init");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_patient_link_reference_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_hip_id).isEmpty()) {
            input.headers.insert("X-HIP-ID", ::OpenAPI::toStringValue(x_hip_id));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICmFacingApi::v05LinksLinkInitPostCallback);
    connect(this, &OAICmFacingApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICmFacingApi::v05LinksLinkInitPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT v05LinksLinkInitPostSignal();
        Q_EMIT v05LinksLinkInitPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT v05LinksLinkInitPostSignalE(error_type, error_str);
        Q_EMIT v05LinksLinkInitPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT v05LinksLinkInitPostSignalError(error_type, error_str);
        Q_EMIT v05LinksLinkInitPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICmFacingApi::v05LinksLinkOnAddContextsPost(const QString &authorization, const QString &x_hip_id, const OAIPatientCareContextLinkResponse &oai_patient_care_context_link_response) {
    QString fullPath = QString(_serverConfigs["v05LinksLinkOnAddContextsPost"][_serverIndices.value("v05LinksLinkOnAddContextsPost")].URL()+"/v0.5/links/link/on-add-contexts");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_patient_care_context_link_response.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_hip_id).isEmpty()) {
            input.headers.insert("X-HIP-ID", ::OpenAPI::toStringValue(x_hip_id));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICmFacingApi::v05LinksLinkOnAddContextsPostCallback);
    connect(this, &OAICmFacingApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICmFacingApi::v05LinksLinkOnAddContextsPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT v05LinksLinkOnAddContextsPostSignal();
        Q_EMIT v05LinksLinkOnAddContextsPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT v05LinksLinkOnAddContextsPostSignalE(error_type, error_str);
        Q_EMIT v05LinksLinkOnAddContextsPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT v05LinksLinkOnAddContextsPostSignalError(error_type, error_str);
        Q_EMIT v05LinksLinkOnAddContextsPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICmFacingApi::v05PatientsOnFindPost(const QString &authorization, const OAIPatientIdentificationResponse &oai_patient_identification_response) {
    QString fullPath = QString(_serverConfigs["v05PatientsOnFindPost"][_serverIndices.value("v05PatientsOnFindPost")].URL()+"/v0.5/patients/on-find");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_patient_identification_response.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICmFacingApi::v05PatientsOnFindPostCallback);
    connect(this, &OAICmFacingApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICmFacingApi::v05PatientsOnFindPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT v05PatientsOnFindPostSignal();
        Q_EMIT v05PatientsOnFindPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT v05PatientsOnFindPostSignalE(error_type, error_str);
        Q_EMIT v05PatientsOnFindPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT v05PatientsOnFindPostSignalError(error_type, error_str);
        Q_EMIT v05PatientsOnFindPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICmFacingApi::v05PatientsProfileSharePost(const QString &authorization, const QString &x_hip_id, const OAIShareProfileRequest &oai_share_profile_request) {
    QString fullPath = QString(_serverConfigs["v05PatientsProfileSharePost"][_serverIndices.value("v05PatientsProfileSharePost")].URL()+"/v0.5/patients/profile/share");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_share_profile_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_hip_id).isEmpty()) {
            input.headers.insert("X-HIP-ID", ::OpenAPI::toStringValue(x_hip_id));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICmFacingApi::v05PatientsProfileSharePostCallback);
    connect(this, &OAICmFacingApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICmFacingApi::v05PatientsProfileSharePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT v05PatientsProfileSharePostSignal();
        Q_EMIT v05PatientsProfileSharePostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT v05PatientsProfileSharePostSignalE(error_type, error_str);
        Q_EMIT v05PatientsProfileSharePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT v05PatientsProfileSharePostSignalError(error_type, error_str);
        Q_EMIT v05PatientsProfileSharePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICmFacingApi::v05PatientsSmsOnNotifyPost(const QString &authorization, const QString &x_hip_id, const OAIPatientSMSNotifcationResponse &oai_patient_sms_notifcation_response) {
    QString fullPath = QString(_serverConfigs["v05PatientsSmsOnNotifyPost"][_serverIndices.value("v05PatientsSmsOnNotifyPost")].URL()+"/v0.5/patients/sms/on-notify");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_patient_sms_notifcation_response.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_hip_id).isEmpty()) {
            input.headers.insert("X-HIP-ID", ::OpenAPI::toStringValue(x_hip_id));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICmFacingApi::v05PatientsSmsOnNotifyPostCallback);
    connect(this, &OAICmFacingApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICmFacingApi::v05PatientsSmsOnNotifyPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT v05PatientsSmsOnNotifyPostSignal();
        Q_EMIT v05PatientsSmsOnNotifyPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT v05PatientsSmsOnNotifyPostSignalE(error_type, error_str);
        Q_EMIT v05PatientsSmsOnNotifyPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT v05PatientsSmsOnNotifyPostSignalError(error_type, error_str);
        Q_EMIT v05PatientsSmsOnNotifyPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICmFacingApi::v05SubscriptionRequestsCmOnInitPost(const QString &authorization, const QString &x_hiu_id, const OAIHIUSubscriptionRequestReceipt &oaihiu_subscription_request_receipt) {
    QString fullPath = QString(_serverConfigs["v05SubscriptionRequestsCmOnInitPost"][_serverIndices.value("v05SubscriptionRequestsCmOnInitPost")].URL()+"/v0.5/subscription-requests/cm/on-init");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oaihiu_subscription_request_receipt.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_hiu_id).isEmpty()) {
            input.headers.insert("X-HIU-ID", ::OpenAPI::toStringValue(x_hiu_id));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICmFacingApi::v05SubscriptionRequestsCmOnInitPostCallback);
    connect(this, &OAICmFacingApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICmFacingApi::v05SubscriptionRequestsCmOnInitPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT v05SubscriptionRequestsCmOnInitPostSignal();
        Q_EMIT v05SubscriptionRequestsCmOnInitPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT v05SubscriptionRequestsCmOnInitPostSignalE(error_type, error_str);
        Q_EMIT v05SubscriptionRequestsCmOnInitPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT v05SubscriptionRequestsCmOnInitPostSignalError(error_type, error_str);
        Q_EMIT v05SubscriptionRequestsCmOnInitPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICmFacingApi::v05SubscriptionRequestsHiuNotifyPost(const QString &authorization, const QString &x_hiu_id, const OAISubscriptionApprovalNotification &oai_subscription_approval_notification) {
    QString fullPath = QString(_serverConfigs["v05SubscriptionRequestsHiuNotifyPost"][_serverIndices.value("v05SubscriptionRequestsHiuNotifyPost")].URL()+"/v0.5/subscription-requests/hiu/notify");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_subscription_approval_notification.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_hiu_id).isEmpty()) {
            input.headers.insert("X-HIU-ID", ::OpenAPI::toStringValue(x_hiu_id));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICmFacingApi::v05SubscriptionRequestsHiuNotifyPostCallback);
    connect(this, &OAICmFacingApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICmFacingApi::v05SubscriptionRequestsHiuNotifyPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT v05SubscriptionRequestsHiuNotifyPostSignal();
        Q_EMIT v05SubscriptionRequestsHiuNotifyPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT v05SubscriptionRequestsHiuNotifyPostSignalE(error_type, error_str);
        Q_EMIT v05SubscriptionRequestsHiuNotifyPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT v05SubscriptionRequestsHiuNotifyPostSignalError(error_type, error_str);
        Q_EMIT v05SubscriptionRequestsHiuNotifyPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICmFacingApi::v05SubscriptionsHiuNotifyPost(const QString &authorization, const QString &x_hiu_id, const OAIHIUSubscriptionNotification &oaihiu_subscription_notification) {
    QString fullPath = QString(_serverConfigs["v05SubscriptionsHiuNotifyPost"][_serverIndices.value("v05SubscriptionsHiuNotifyPost")].URL()+"/v0.5/subscriptions/hiu/notify");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oaihiu_subscription_notification.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_hiu_id).isEmpty()) {
            input.headers.insert("X-HIU-ID", ::OpenAPI::toStringValue(x_hiu_id));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICmFacingApi::v05SubscriptionsHiuNotifyPostCallback);
    connect(this, &OAICmFacingApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICmFacingApi::v05SubscriptionsHiuNotifyPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT v05SubscriptionsHiuNotifyPostSignal();
        Q_EMIT v05SubscriptionsHiuNotifyPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT v05SubscriptionsHiuNotifyPostSignalE(error_type, error_str);
        Q_EMIT v05SubscriptionsHiuNotifyPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT v05SubscriptionsHiuNotifyPostSignalError(error_type, error_str);
        Q_EMIT v05SubscriptionsHiuNotifyPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICmFacingApi::v05UsersAuthNotifyPost(const QString &authorization, const QString &x_hip_id, const QString &x_hiu_id, const OAIPatientAuthNotification &oai_patient_auth_notification) {
    QString fullPath = QString(_serverConfigs["v05UsersAuthNotifyPost"][_serverIndices.value("v05UsersAuthNotifyPost")].URL()+"/v0.5/users/auth/notify");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_patient_auth_notification.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_hip_id).isEmpty()) {
            input.headers.insert("X-HIP-ID", ::OpenAPI::toStringValue(x_hip_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_hiu_id).isEmpty()) {
            input.headers.insert("X-HIU-ID", ::OpenAPI::toStringValue(x_hiu_id));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICmFacingApi::v05UsersAuthNotifyPostCallback);
    connect(this, &OAICmFacingApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICmFacingApi::v05UsersAuthNotifyPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT v05UsersAuthNotifyPostSignal();
        Q_EMIT v05UsersAuthNotifyPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT v05UsersAuthNotifyPostSignalE(error_type, error_str);
        Q_EMIT v05UsersAuthNotifyPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT v05UsersAuthNotifyPostSignalError(error_type, error_str);
        Q_EMIT v05UsersAuthNotifyPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICmFacingApi::v05UsersAuthOnConfirmPost(const QString &authorization, const QString &x_hip_id, const QString &x_hiu_id, const OAIPatientAuthConfirmResponse &oai_patient_auth_confirm_response) {
    QString fullPath = QString(_serverConfigs["v05UsersAuthOnConfirmPost"][_serverIndices.value("v05UsersAuthOnConfirmPost")].URL()+"/v0.5/users/auth/on-confirm");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_patient_auth_confirm_response.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_hip_id).isEmpty()) {
            input.headers.insert("X-HIP-ID", ::OpenAPI::toStringValue(x_hip_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_hiu_id).isEmpty()) {
            input.headers.insert("X-HIU-ID", ::OpenAPI::toStringValue(x_hiu_id));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICmFacingApi::v05UsersAuthOnConfirmPostCallback);
    connect(this, &OAICmFacingApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICmFacingApi::v05UsersAuthOnConfirmPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT v05UsersAuthOnConfirmPostSignal();
        Q_EMIT v05UsersAuthOnConfirmPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT v05UsersAuthOnConfirmPostSignalE(error_type, error_str);
        Q_EMIT v05UsersAuthOnConfirmPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT v05UsersAuthOnConfirmPostSignalError(error_type, error_str);
        Q_EMIT v05UsersAuthOnConfirmPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICmFacingApi::v05UsersAuthOnFetchModesPost(const QString &authorization, const QString &x_hip_id, const QString &x_hiu_id, const OAIPatientAuthModeQueryResponse &oai_patient_auth_mode_query_response) {
    QString fullPath = QString(_serverConfigs["v05UsersAuthOnFetchModesPost"][_serverIndices.value("v05UsersAuthOnFetchModesPost")].URL()+"/v0.5/users/auth/on-fetch-modes");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_patient_auth_mode_query_response.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_hip_id).isEmpty()) {
            input.headers.insert("X-HIP-ID", ::OpenAPI::toStringValue(x_hip_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_hiu_id).isEmpty()) {
            input.headers.insert("X-HIU-ID", ::OpenAPI::toStringValue(x_hiu_id));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICmFacingApi::v05UsersAuthOnFetchModesPostCallback);
    connect(this, &OAICmFacingApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICmFacingApi::v05UsersAuthOnFetchModesPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT v05UsersAuthOnFetchModesPostSignal();
        Q_EMIT v05UsersAuthOnFetchModesPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT v05UsersAuthOnFetchModesPostSignalE(error_type, error_str);
        Q_EMIT v05UsersAuthOnFetchModesPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT v05UsersAuthOnFetchModesPostSignalError(error_type, error_str);
        Q_EMIT v05UsersAuthOnFetchModesPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICmFacingApi::v05UsersAuthOnInitPost(const QString &authorization, const QString &x_hip_id, const QString &x_hiu_id, const OAIPatientAuthInitResponse &oai_patient_auth_init_response) {
    QString fullPath = QString(_serverConfigs["v05UsersAuthOnInitPost"][_serverIndices.value("v05UsersAuthOnInitPost")].URL()+"/v0.5/users/auth/on-init");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_patient_auth_init_response.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_hip_id).isEmpty()) {
            input.headers.insert("X-HIP-ID", ::OpenAPI::toStringValue(x_hip_id));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_hiu_id).isEmpty()) {
            input.headers.insert("X-HIU-ID", ::OpenAPI::toStringValue(x_hiu_id));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICmFacingApi::v05UsersAuthOnInitPostCallback);
    connect(this, &OAICmFacingApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICmFacingApi::v05UsersAuthOnInitPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT v05UsersAuthOnInitPostSignal();
        Q_EMIT v05UsersAuthOnInitPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT v05UsersAuthOnInitPostSignalE(error_type, error_str);
        Q_EMIT v05UsersAuthOnInitPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT v05UsersAuthOnInitPostSignalError(error_type, error_str);
        Q_EMIT v05UsersAuthOnInitPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICmFacingApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
