/**
 * Gateway
 * Gateway is the hub that routes/orchestrates the interaction between consent managers and API bridges. There are 5 categories of APIs; discovery, link, consent flow, data flow and  monitoring. To reflect the consumers of APIs, the above apis are also categorized under cm facing, hiu facing and hip facing  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHealthInformationNotification_notification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHealthInformationNotification_notification::OAIHealthInformationNotification_notification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHealthInformationNotification_notification::OAIHealthInformationNotification_notification() {
    this->initializeModel();
}

OAIHealthInformationNotification_notification::~OAIHealthInformationNotification_notification() {}

void OAIHealthInformationNotification_notification::initializeModel() {

    m_consent_id_isSet = false;
    m_consent_id_isValid = false;

    m_done_at_isSet = false;
    m_done_at_isValid = false;

    m_notifier_isSet = false;
    m_notifier_isValid = false;

    m_status_notification_isSet = false;
    m_status_notification_isValid = false;

    m_transaction_id_isSet = false;
    m_transaction_id_isValid = false;
}

void OAIHealthInformationNotification_notification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHealthInformationNotification_notification::fromJsonObject(QJsonObject json) {

    m_consent_id_isValid = ::OpenAPI::fromJsonValue(m_consent_id, json[QString("consentId")]);
    m_consent_id_isSet = !json[QString("consentId")].isNull() && m_consent_id_isValid;

    m_done_at_isValid = ::OpenAPI::fromJsonValue(m_done_at, json[QString("doneAt")]);
    m_done_at_isSet = !json[QString("doneAt")].isNull() && m_done_at_isValid;

    m_notifier_isValid = ::OpenAPI::fromJsonValue(m_notifier, json[QString("notifier")]);
    m_notifier_isSet = !json[QString("notifier")].isNull() && m_notifier_isValid;

    m_status_notification_isValid = ::OpenAPI::fromJsonValue(m_status_notification, json[QString("statusNotification")]);
    m_status_notification_isSet = !json[QString("statusNotification")].isNull() && m_status_notification_isValid;

    m_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_transaction_id, json[QString("transactionId")]);
    m_transaction_id_isSet = !json[QString("transactionId")].isNull() && m_transaction_id_isValid;
}

QString OAIHealthInformationNotification_notification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHealthInformationNotification_notification::asJsonObject() const {
    QJsonObject obj;
    if (m_consent_id_isSet) {
        obj.insert(QString("consentId"), ::OpenAPI::toJsonValue(m_consent_id));
    }
    if (m_done_at_isSet) {
        obj.insert(QString("doneAt"), ::OpenAPI::toJsonValue(m_done_at));
    }
    if (m_notifier.isSet()) {
        obj.insert(QString("notifier"), ::OpenAPI::toJsonValue(m_notifier));
    }
    if (m_status_notification.isSet()) {
        obj.insert(QString("statusNotification"), ::OpenAPI::toJsonValue(m_status_notification));
    }
    if (m_transaction_id_isSet) {
        obj.insert(QString("transactionId"), ::OpenAPI::toJsonValue(m_transaction_id));
    }
    return obj;
}

QString OAIHealthInformationNotification_notification::getConsentId() const {
    return m_consent_id;
}
void OAIHealthInformationNotification_notification::setConsentId(const QString &consent_id) {
    m_consent_id = consent_id;
    m_consent_id_isSet = true;
}

bool OAIHealthInformationNotification_notification::is_consent_id_Set() const{
    return m_consent_id_isSet;
}

bool OAIHealthInformationNotification_notification::is_consent_id_Valid() const{
    return m_consent_id_isValid;
}

QDateTime OAIHealthInformationNotification_notification::getDoneAt() const {
    return m_done_at;
}
void OAIHealthInformationNotification_notification::setDoneAt(const QDateTime &done_at) {
    m_done_at = done_at;
    m_done_at_isSet = true;
}

bool OAIHealthInformationNotification_notification::is_done_at_Set() const{
    return m_done_at_isSet;
}

bool OAIHealthInformationNotification_notification::is_done_at_Valid() const{
    return m_done_at_isValid;
}

OAIHealthInformationNotification_notification_notifier OAIHealthInformationNotification_notification::getNotifier() const {
    return m_notifier;
}
void OAIHealthInformationNotification_notification::setNotifier(const OAIHealthInformationNotification_notification_notifier &notifier) {
    m_notifier = notifier;
    m_notifier_isSet = true;
}

bool OAIHealthInformationNotification_notification::is_notifier_Set() const{
    return m_notifier_isSet;
}

bool OAIHealthInformationNotification_notification::is_notifier_Valid() const{
    return m_notifier_isValid;
}

OAIHealthInformationNotification_notification_statusNotification OAIHealthInformationNotification_notification::getStatusNotification() const {
    return m_status_notification;
}
void OAIHealthInformationNotification_notification::setStatusNotification(const OAIHealthInformationNotification_notification_statusNotification &status_notification) {
    m_status_notification = status_notification;
    m_status_notification_isSet = true;
}

bool OAIHealthInformationNotification_notification::is_status_notification_Set() const{
    return m_status_notification_isSet;
}

bool OAIHealthInformationNotification_notification::is_status_notification_Valid() const{
    return m_status_notification_isValid;
}

QString OAIHealthInformationNotification_notification::getTransactionId() const {
    return m_transaction_id;
}
void OAIHealthInformationNotification_notification::setTransactionId(const QString &transaction_id) {
    m_transaction_id = transaction_id;
    m_transaction_id_isSet = true;
}

bool OAIHealthInformationNotification_notification::is_transaction_id_Set() const{
    return m_transaction_id_isSet;
}

bool OAIHealthInformationNotification_notification::is_transaction_id_Valid() const{
    return m_transaction_id_isValid;
}

bool OAIHealthInformationNotification_notification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_consent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_done_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notifier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_notification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHealthInformationNotification_notification::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_consent_id_isValid && m_done_at_isValid && m_notifier_isValid && m_status_notification_isValid && m_transaction_id_isValid && true;
}

} // namespace OpenAPI
