/**
 * Gateway
 * Gateway is the hub that routes/orchestrates the interaction between consent managers and API bridges. There are 5 categories of APIs; discovery, link, consent flow, data flow and  monitoring. To reflect the consumers of APIs, the above apis are also categorized under cm facing, hiu facing and hip facing  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAccessTokenValidity.h
 *
 * 
 */

#ifndef OAIAccessTokenValidity_H
#define OAIAccessTokenValidity_H

#include <QJsonObject>

#include "OAIPatientAuthPurpose.h"
#include "OAIPatientAuthRequester.h"
#include <QDateTime>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPatientAuthRequester;

class OAIAccessTokenValidity : public OAIObject {
public:
    OAIAccessTokenValidity();
    OAIAccessTokenValidity(QString json);
    ~OAIAccessTokenValidity() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getExpiry() const;
    void setExpiry(const QDateTime &expiry);
    bool is_expiry_Set() const;
    bool is_expiry_Valid() const;

    qint32 getLimit() const;
    void setLimit(const qint32 &limit);
    bool is_limit_Set() const;
    bool is_limit_Valid() const;

    OAIPatientAuthPurpose getPurpose() const;
    void setPurpose(const OAIPatientAuthPurpose &purpose);
    bool is_purpose_Set() const;
    bool is_purpose_Valid() const;

    OAIPatientAuthRequester getRequester() const;
    void setRequester(const OAIPatientAuthRequester &requester);
    bool is_requester_Set() const;
    bool is_requester_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_expiry;
    bool m_expiry_isSet;
    bool m_expiry_isValid;

    qint32 m_limit;
    bool m_limit_isSet;
    bool m_limit_isValid;

    OAIPatientAuthPurpose m_purpose;
    bool m_purpose_isSet;
    bool m_purpose_isValid;

    OAIPatientAuthRequester m_requester;
    bool m_requester_isSet;
    bool m_requester_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAccessTokenValidity)

#endif // OAIAccessTokenValidity_H
