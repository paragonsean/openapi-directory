/**
 * Gateway
 * Gateway is the hub that routes/orchestrates the interaction between consent managers and API bridges. There are 5 categories of APIs; discovery, link, consent flow, data flow and  monitoring. To reflect the consumers of APIs, the above apis are also categorized under cm facing, hiu facing and hip facing  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHIPHIRequest_hiRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHIPHIRequest_hiRequest::OAIHIPHIRequest_hiRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHIPHIRequest_hiRequest::OAIHIPHIRequest_hiRequest() {
    this->initializeModel();
}

OAIHIPHIRequest_hiRequest::~OAIHIPHIRequest_hiRequest() {}

void OAIHIPHIRequest_hiRequest::initializeModel() {

    m_consent_isSet = false;
    m_consent_isValid = false;

    m_data_push_url_isSet = false;
    m_data_push_url_isValid = false;

    m_date_range_isSet = false;
    m_date_range_isValid = false;

    m_key_material_isSet = false;
    m_key_material_isValid = false;
}

void OAIHIPHIRequest_hiRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHIPHIRequest_hiRequest::fromJsonObject(QJsonObject json) {

    m_consent_isValid = ::OpenAPI::fromJsonValue(m_consent, json[QString("consent")]);
    m_consent_isSet = !json[QString("consent")].isNull() && m_consent_isValid;

    m_data_push_url_isValid = ::OpenAPI::fromJsonValue(m_data_push_url, json[QString("dataPushUrl")]);
    m_data_push_url_isSet = !json[QString("dataPushUrl")].isNull() && m_data_push_url_isValid;

    m_date_range_isValid = ::OpenAPI::fromJsonValue(m_date_range, json[QString("dateRange")]);
    m_date_range_isSet = !json[QString("dateRange")].isNull() && m_date_range_isValid;

    m_key_material_isValid = ::OpenAPI::fromJsonValue(m_key_material, json[QString("keyMaterial")]);
    m_key_material_isSet = !json[QString("keyMaterial")].isNull() && m_key_material_isValid;
}

QString OAIHIPHIRequest_hiRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHIPHIRequest_hiRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_consent.isSet()) {
        obj.insert(QString("consent"), ::OpenAPI::toJsonValue(m_consent));
    }
    if (m_data_push_url_isSet) {
        obj.insert(QString("dataPushUrl"), ::OpenAPI::toJsonValue(m_data_push_url));
    }
    if (m_date_range.isSet()) {
        obj.insert(QString("dateRange"), ::OpenAPI::toJsonValue(m_date_range));
    }
    if (m_key_material.isSet()) {
        obj.insert(QString("keyMaterial"), ::OpenAPI::toJsonValue(m_key_material));
    }
    return obj;
}

OAIConsent OAIHIPHIRequest_hiRequest::getConsent() const {
    return m_consent;
}
void OAIHIPHIRequest_hiRequest::setConsent(const OAIConsent &consent) {
    m_consent = consent;
    m_consent_isSet = true;
}

bool OAIHIPHIRequest_hiRequest::is_consent_Set() const{
    return m_consent_isSet;
}

bool OAIHIPHIRequest_hiRequest::is_consent_Valid() const{
    return m_consent_isValid;
}

QString OAIHIPHIRequest_hiRequest::getDataPushUrl() const {
    return m_data_push_url;
}
void OAIHIPHIRequest_hiRequest::setDataPushUrl(const QString &data_push_url) {
    m_data_push_url = data_push_url;
    m_data_push_url_isSet = true;
}

bool OAIHIPHIRequest_hiRequest::is_data_push_url_Set() const{
    return m_data_push_url_isSet;
}

bool OAIHIPHIRequest_hiRequest::is_data_push_url_Valid() const{
    return m_data_push_url_isValid;
}

OAIDateRange OAIHIPHIRequest_hiRequest::getDateRange() const {
    return m_date_range;
}
void OAIHIPHIRequest_hiRequest::setDateRange(const OAIDateRange &date_range) {
    m_date_range = date_range;
    m_date_range_isSet = true;
}

bool OAIHIPHIRequest_hiRequest::is_date_range_Set() const{
    return m_date_range_isSet;
}

bool OAIHIPHIRequest_hiRequest::is_date_range_Valid() const{
    return m_date_range_isValid;
}

OAIKeyMaterial OAIHIPHIRequest_hiRequest::getKeyMaterial() const {
    return m_key_material;
}
void OAIHIPHIRequest_hiRequest::setKeyMaterial(const OAIKeyMaterial &key_material) {
    m_key_material = key_material;
    m_key_material_isSet = true;
}

bool OAIHIPHIRequest_hiRequest::is_key_material_Set() const{
    return m_key_material_isSet;
}

bool OAIHIPHIRequest_hiRequest::is_key_material_Valid() const{
    return m_key_material_isValid;
}

bool OAIHIPHIRequest_hiRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_consent.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_push_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_material.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHIPHIRequest_hiRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_consent_isValid && m_data_push_url_isValid && m_date_range_isValid && m_key_material_isValid && true;
}

} // namespace OpenAPI
