/**
 * Gateway
 * Gateway is the hub that routes/orchestrates the interaction between consent managers and API bridges. There are 5 categories of APIs; discovery, link, consent flow, data flow and  monitoring. To reflect the consumers of APIs, the above apis are also categorized under cm facing, hiu facing and hip facing  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDataFlowApi_H
#define OAI_OAIDataFlowApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAIHIPHIRequest.h"
#include "OAIHIPHealthInformationRequestAcknowledgement.h"
#include "OAIHIRequest.h"
#include "OAIHIUHealthInformationRequestResponse.h"
#include "OAIHealthInformationNotification.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDataFlowApi : public QObject {
    Q_OBJECT

public:
    OAIDataFlowApi(const int timeOut = 0);
    ~OAIDataFlowApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_hiu_id QString [required]
    * @param[in]  oaihiu_health_information_request_response OAIHIUHealthInformationRequestResponse [required]
    */
    virtual void v05HealthInformationCmOnRequestPost(const QString &authorization, const QString &x_hiu_id, const OAIHIUHealthInformationRequestResponse &oaihiu_health_information_request_response);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_cm_id QString [required]
    * @param[in]  oaihi_request OAIHIRequest [required]
    */
    virtual void v05HealthInformationCmRequestPost(const QString &authorization, const QString &x_cm_id, const OAIHIRequest &oaihi_request);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_cm_id QString [required]
    * @param[in]  oaihip_health_information_request_acknowledgement OAIHIPHealthInformationRequestAcknowledgement [required]
    */
    virtual void v05HealthInformationHipOnRequestPost(const QString &authorization, const QString &x_cm_id, const OAIHIPHealthInformationRequestAcknowledgement &oaihip_health_information_request_acknowledgement);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_hip_id QString [required]
    * @param[in]  oaihiphi_request OAIHIPHIRequest [required]
    */
    virtual void v05HealthInformationHipRequestPost(const QString &authorization, const QString &x_hip_id, const OAIHIPHIRequest &oaihiphi_request);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_cm_id QString [required]
    * @param[in]  oai_health_information_notification OAIHealthInformationNotification [required]
    */
    virtual void v05HealthInformationNotifyPost(const QString &authorization, const QString &x_cm_id, const OAIHealthInformationNotification &oai_health_information_notification);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void v05HealthInformationCmOnRequestPostCallback(OAIHttpRequestWorker *worker);
    void v05HealthInformationCmRequestPostCallback(OAIHttpRequestWorker *worker);
    void v05HealthInformationHipOnRequestPostCallback(OAIHttpRequestWorker *worker);
    void v05HealthInformationHipRequestPostCallback(OAIHttpRequestWorker *worker);
    void v05HealthInformationNotifyPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void v05HealthInformationCmOnRequestPostSignal();
    void v05HealthInformationCmRequestPostSignal();
    void v05HealthInformationHipOnRequestPostSignal();
    void v05HealthInformationHipRequestPostSignal();
    void v05HealthInformationNotifyPostSignal();


    void v05HealthInformationCmOnRequestPostSignalFull(OAIHttpRequestWorker *worker);
    void v05HealthInformationCmRequestPostSignalFull(OAIHttpRequestWorker *worker);
    void v05HealthInformationHipOnRequestPostSignalFull(OAIHttpRequestWorker *worker);
    void v05HealthInformationHipRequestPostSignalFull(OAIHttpRequestWorker *worker);
    void v05HealthInformationNotifyPostSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use v05HealthInformationCmOnRequestPostSignalError() instead")
    void v05HealthInformationCmOnRequestPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v05HealthInformationCmOnRequestPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05HealthInformationCmRequestPostSignalError() instead")
    void v05HealthInformationCmRequestPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v05HealthInformationCmRequestPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05HealthInformationHipOnRequestPostSignalError() instead")
    void v05HealthInformationHipOnRequestPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v05HealthInformationHipOnRequestPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05HealthInformationHipRequestPostSignalError() instead")
    void v05HealthInformationHipRequestPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v05HealthInformationHipRequestPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05HealthInformationNotifyPostSignalError() instead")
    void v05HealthInformationNotifyPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v05HealthInformationNotifyPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use v05HealthInformationCmOnRequestPostSignalErrorFull() instead")
    void v05HealthInformationCmOnRequestPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v05HealthInformationCmOnRequestPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05HealthInformationCmRequestPostSignalErrorFull() instead")
    void v05HealthInformationCmRequestPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v05HealthInformationCmRequestPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05HealthInformationHipOnRequestPostSignalErrorFull() instead")
    void v05HealthInformationHipOnRequestPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v05HealthInformationHipOnRequestPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05HealthInformationHipRequestPostSignalErrorFull() instead")
    void v05HealthInformationHipRequestPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v05HealthInformationHipRequestPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05HealthInformationNotifyPostSignalErrorFull() instead")
    void v05HealthInformationNotifyPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v05HealthInformationNotifyPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
