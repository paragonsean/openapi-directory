/**
 * Gateway
 * Gateway is the hub that routes/orchestrates the interaction between consent managers and API bridges. There are 5 categories of APIs; discovery, link, consent flow, data flow and  monitoring. To reflect the consumers of APIs, the above apis are also categorized under cm facing, hiu facing and hip facing  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHIUSubscription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHIUSubscription::OAIHIUSubscription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHIUSubscription::OAIHIUSubscription() {
    this->initializeModel();
}

OAIHIUSubscription::~OAIHIUSubscription() {}

void OAIHIUSubscription::initializeModel() {

    m_hiu_isSet = false;
    m_hiu_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_patient_isSet = false;
    m_patient_isValid = false;

    m_sources_isSet = false;
    m_sources_isValid = false;
}

void OAIHIUSubscription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHIUSubscription::fromJsonObject(QJsonObject json) {

    m_hiu_isValid = ::OpenAPI::fromJsonValue(m_hiu, json[QString("hiu")]);
    m_hiu_isSet = !json[QString("hiu")].isNull() && m_hiu_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_patient_isValid = ::OpenAPI::fromJsonValue(m_patient, json[QString("patient")]);
    m_patient_isSet = !json[QString("patient")].isNull() && m_patient_isValid;

    m_sources_isValid = ::OpenAPI::fromJsonValue(m_sources, json[QString("sources")]);
    m_sources_isSet = !json[QString("sources")].isNull() && m_sources_isValid;
}

QString OAIHIUSubscription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHIUSubscription::asJsonObject() const {
    QJsonObject obj;
    if (m_hiu.isSet()) {
        obj.insert(QString("hiu"), ::OpenAPI::toJsonValue(m_hiu));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_patient.isSet()) {
        obj.insert(QString("patient"), ::OpenAPI::toJsonValue(m_patient));
    }
    if (m_sources.size() > 0) {
        obj.insert(QString("sources"), ::OpenAPI::toJsonValue(m_sources));
    }
    return obj;
}

OAIOrganizationRepresentation OAIHIUSubscription::getHiu() const {
    return m_hiu;
}
void OAIHIUSubscription::setHiu(const OAIOrganizationRepresentation &hiu) {
    m_hiu = hiu;
    m_hiu_isSet = true;
}

bool OAIHIUSubscription::is_hiu_Set() const{
    return m_hiu_isSet;
}

bool OAIHIUSubscription::is_hiu_Valid() const{
    return m_hiu_isValid;
}

QString OAIHIUSubscription::getId() const {
    return m_id;
}
void OAIHIUSubscription::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIHIUSubscription::is_id_Set() const{
    return m_id_isSet;
}

bool OAIHIUSubscription::is_id_Valid() const{
    return m_id_isValid;
}

OAIConsentManagerPatientID OAIHIUSubscription::getPatient() const {
    return m_patient;
}
void OAIHIUSubscription::setPatient(const OAIConsentManagerPatientID &patient) {
    m_patient = patient;
    m_patient_isSet = true;
}

bool OAIHIUSubscription::is_patient_Set() const{
    return m_patient_isSet;
}

bool OAIHIUSubscription::is_patient_Valid() const{
    return m_patient_isValid;
}

QList<OAIHIUSubscriptionContext> OAIHIUSubscription::getSources() const {
    return m_sources;
}
void OAIHIUSubscription::setSources(const QList<OAIHIUSubscriptionContext> &sources) {
    m_sources = sources;
    m_sources_isSet = true;
}

bool OAIHIUSubscription::is_sources_Set() const{
    return m_sources_isSet;
}

bool OAIHIUSubscription::is_sources_Valid() const{
    return m_sources_isValid;
}

bool OAIHIUSubscription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hiu.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_patient.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sources.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHIUSubscription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_hiu_isValid && m_id_isValid && m_patient_isValid && m_sources_isValid && true;
}

} // namespace OpenAPI
