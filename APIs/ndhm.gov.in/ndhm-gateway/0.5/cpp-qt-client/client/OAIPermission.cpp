/**
 * Gateway
 * Gateway is the hub that routes/orchestrates the interaction between consent managers and API bridges. There are 5 categories of APIs; discovery, link, consent flow, data flow and  monitoring. To reflect the consumers of APIs, the above apis are also categorized under cm facing, hiu facing and hip facing  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPermission.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPermission::OAIPermission(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPermission::OAIPermission() {
    this->initializeModel();
}

OAIPermission::~OAIPermission() {}

void OAIPermission::initializeModel() {

    m_access_mode_isSet = false;
    m_access_mode_isValid = false;

    m_data_erase_at_isSet = false;
    m_data_erase_at_isValid = false;

    m_date_range_isSet = false;
    m_date_range_isValid = false;

    m_frequency_isSet = false;
    m_frequency_isValid = false;
}

void OAIPermission::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPermission::fromJsonObject(QJsonObject json) {

    m_access_mode_isValid = ::OpenAPI::fromJsonValue(m_access_mode, json[QString("accessMode")]);
    m_access_mode_isSet = !json[QString("accessMode")].isNull() && m_access_mode_isValid;

    m_data_erase_at_isValid = ::OpenAPI::fromJsonValue(m_data_erase_at, json[QString("dataEraseAt")]);
    m_data_erase_at_isSet = !json[QString("dataEraseAt")].isNull() && m_data_erase_at_isValid;

    m_date_range_isValid = ::OpenAPI::fromJsonValue(m_date_range, json[QString("dateRange")]);
    m_date_range_isSet = !json[QString("dateRange")].isNull() && m_date_range_isValid;

    m_frequency_isValid = ::OpenAPI::fromJsonValue(m_frequency, json[QString("frequency")]);
    m_frequency_isSet = !json[QString("frequency")].isNull() && m_frequency_isValid;
}

QString OAIPermission::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPermission::asJsonObject() const {
    QJsonObject obj;
    if (m_access_mode_isSet) {
        obj.insert(QString("accessMode"), ::OpenAPI::toJsonValue(m_access_mode));
    }
    if (m_data_erase_at_isSet) {
        obj.insert(QString("dataEraseAt"), ::OpenAPI::toJsonValue(m_data_erase_at));
    }
    if (m_date_range.isSet()) {
        obj.insert(QString("dateRange"), ::OpenAPI::toJsonValue(m_date_range));
    }
    if (m_frequency.isSet()) {
        obj.insert(QString("frequency"), ::OpenAPI::toJsonValue(m_frequency));
    }
    return obj;
}

QString OAIPermission::getAccessMode() const {
    return m_access_mode;
}
void OAIPermission::setAccessMode(const QString &access_mode) {
    m_access_mode = access_mode;
    m_access_mode_isSet = true;
}

bool OAIPermission::is_access_mode_Set() const{
    return m_access_mode_isSet;
}

bool OAIPermission::is_access_mode_Valid() const{
    return m_access_mode_isValid;
}

QDateTime OAIPermission::getDataEraseAt() const {
    return m_data_erase_at;
}
void OAIPermission::setDataEraseAt(const QDateTime &data_erase_at) {
    m_data_erase_at = data_erase_at;
    m_data_erase_at_isSet = true;
}

bool OAIPermission::is_data_erase_at_Set() const{
    return m_data_erase_at_isSet;
}

bool OAIPermission::is_data_erase_at_Valid() const{
    return m_data_erase_at_isValid;
}

OAIPermission_dateRange OAIPermission::getDateRange() const {
    return m_date_range;
}
void OAIPermission::setDateRange(const OAIPermission_dateRange &date_range) {
    m_date_range = date_range;
    m_date_range_isSet = true;
}

bool OAIPermission::is_date_range_Set() const{
    return m_date_range_isSet;
}

bool OAIPermission::is_date_range_Valid() const{
    return m_date_range_isValid;
}

OAIPermission_frequency OAIPermission::getFrequency() const {
    return m_frequency;
}
void OAIPermission::setFrequency(const OAIPermission_frequency &frequency) {
    m_frequency = frequency;
    m_frequency_isSet = true;
}

bool OAIPermission::is_frequency_Set() const{
    return m_frequency_isSet;
}

bool OAIPermission::is_frequency_Valid() const{
    return m_frequency_isValid;
}

bool OAIPermission::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_erase_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequency.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPermission::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_access_mode_isValid && m_data_erase_at_isValid && m_date_range_isValid && m_frequency_isValid && true;
}

} // namespace OpenAPI
