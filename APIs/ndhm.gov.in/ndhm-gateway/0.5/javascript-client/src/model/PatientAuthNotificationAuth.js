/**
 * Gateway
 * Gateway is the hub that routes/orchestrates the interaction between consent managers and API bridges. There are 5 categories of APIs; discovery, link, consent flow, data flow and  monitoring. To reflect the consumers of APIs, the above apis are also categorized under cm facing, hiu facing and hip facing  
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AccessTokenValidity from './AccessTokenValidity';
import PatientDemographicResponse from './PatientDemographicResponse';

/**
 * The PatientAuthNotificationAuth model module.
 * @module model/PatientAuthNotificationAuth
 * @version 0.5
 */
class PatientAuthNotificationAuth {
    /**
     * Constructs a new <code>PatientAuthNotificationAuth</code>.
     * depending on the purpose of auth, as specified in /auth/init, the response may include the following    1. LINK - only returns **accessToken**   2. KYC - only returns **patient**   3. KYC_AND_LINK - returns both **accessToken** and **patient** 
     * @alias module:model/PatientAuthNotificationAuth
     * @param status {module:model/PatientAuthNotificationAuth.StatusEnum} 
     * @param transactionId {String} transaction id for auth session
     */
    constructor(status, transactionId) { 
        
        PatientAuthNotificationAuth.initialize(this, status, transactionId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, status, transactionId) { 
        obj['status'] = status;
        obj['transactionId'] = transactionId;
    }

    /**
     * Constructs a <code>PatientAuthNotificationAuth</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PatientAuthNotificationAuth} obj Optional instance to populate.
     * @return {module:model/PatientAuthNotificationAuth} The populated <code>PatientAuthNotificationAuth</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PatientAuthNotificationAuth();

            if (data.hasOwnProperty('accessToken')) {
                obj['accessToken'] = ApiClient.convertToType(data['accessToken'], 'String');
            }
            if (data.hasOwnProperty('patient')) {
                obj['patient'] = PatientDemographicResponse.constructFromObject(data['patient']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('transactionId')) {
                obj['transactionId'] = ApiClient.convertToType(data['transactionId'], 'String');
            }
            if (data.hasOwnProperty('validity')) {
                obj['validity'] = AccessTokenValidity.constructFromObject(data['validity']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PatientAuthNotificationAuth</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PatientAuthNotificationAuth</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PatientAuthNotificationAuth.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['accessToken'] && !(typeof data['accessToken'] === 'string' || data['accessToken'] instanceof String)) {
            throw new Error("Expected the field `accessToken` to be a primitive type in the JSON string but got " + data['accessToken']);
        }
        // validate the optional field `patient`
        if (data['patient']) { // data not null
          PatientDemographicResponse.validateJSON(data['patient']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['transactionId'] && !(typeof data['transactionId'] === 'string' || data['transactionId'] instanceof String)) {
            throw new Error("Expected the field `transactionId` to be a primitive type in the JSON string but got " + data['transactionId']);
        }
        // validate the optional field `validity`
        if (data['validity']) { // data not null
          AccessTokenValidity.validateJSON(data['validity']);
        }

        return true;
    }


}

PatientAuthNotificationAuth.RequiredProperties = ["status", "transactionId"];

/**
 * access token for initialization of subsequent action.
 * @member {String} accessToken
 */
PatientAuthNotificationAuth.prototype['accessToken'] = undefined;

/**
 * @member {module:model/PatientDemographicResponse} patient
 */
PatientAuthNotificationAuth.prototype['patient'] = undefined;

/**
 * @member {module:model/PatientAuthNotificationAuth.StatusEnum} status
 */
PatientAuthNotificationAuth.prototype['status'] = undefined;

/**
 * transaction id for auth session
 * @member {String} transactionId
 */
PatientAuthNotificationAuth.prototype['transactionId'] = undefined;

/**
 * @member {module:model/AccessTokenValidity} validity
 */
PatientAuthNotificationAuth.prototype['validity'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
PatientAuthNotificationAuth['StatusEnum'] = {

    /**
     * value: "GRANTED"
     * @const
     */
    "GRANTED": "GRANTED",

    /**
     * value: "DENIED"
     * @const
     */
    "DENIED": "DENIED"
};



export default PatientAuthNotificationAuth;

