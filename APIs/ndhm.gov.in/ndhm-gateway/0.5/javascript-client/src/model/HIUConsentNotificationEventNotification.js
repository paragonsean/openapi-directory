/**
 * Gateway
 * Gateway is the hub that routes/orchestrates the interaction between consent managers and API bridges. There are 5 categories of APIs; discovery, link, consent flow, data flow and  monitoring. To reflect the consumers of APIs, the above apis are also categorized under cm facing, hiu facing and hip facing  
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConsentArtefactReference from './ConsentArtefactReference';
import ConsentStatus from './ConsentStatus';

/**
 * The HIUConsentNotificationEventNotification model module.
 * @module model/HIUConsentNotificationEventNotification
 * @version 0.5
 */
class HIUConsentNotificationEventNotification {
    /**
     * Constructs a new <code>HIUConsentNotificationEventNotification</code>.
     * @alias module:model/HIUConsentNotificationEventNotification
     * @param consentRequestId {String} 
     * @param status {module:model/ConsentStatus} 
     */
    constructor(consentRequestId, status) { 
        
        HIUConsentNotificationEventNotification.initialize(this, consentRequestId, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, consentRequestId, status) { 
        obj['consentRequestId'] = consentRequestId;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>HIUConsentNotificationEventNotification</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HIUConsentNotificationEventNotification} obj Optional instance to populate.
     * @return {module:model/HIUConsentNotificationEventNotification} The populated <code>HIUConsentNotificationEventNotification</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HIUConsentNotificationEventNotification();

            if (data.hasOwnProperty('consentArtefacts')) {
                obj['consentArtefacts'] = ApiClient.convertToType(data['consentArtefacts'], [ConsentArtefactReference]);
            }
            if (data.hasOwnProperty('consentRequestId')) {
                obj['consentRequestId'] = ApiClient.convertToType(data['consentRequestId'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ConsentStatus.constructFromObject(data['status']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HIUConsentNotificationEventNotification</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HIUConsentNotificationEventNotification</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of HIUConsentNotificationEventNotification.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['consentArtefacts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['consentArtefacts'])) {
                throw new Error("Expected the field `consentArtefacts` to be an array in the JSON data but got " + data['consentArtefacts']);
            }
            // validate the optional field `consentArtefacts` (array)
            for (const item of data['consentArtefacts']) {
                ConsentArtefactReference.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['consentRequestId'] && !(typeof data['consentRequestId'] === 'string' || data['consentRequestId'] instanceof String)) {
            throw new Error("Expected the field `consentRequestId` to be a primitive type in the JSON string but got " + data['consentRequestId']);
        }

        return true;
    }


}

HIUConsentNotificationEventNotification.RequiredProperties = ["consentRequestId", "status"];

/**
 * if the status is GRANTED or REVOKED, then the consentArtefact references (Ids) must be specified.
 * @member {Array.<module:model/ConsentArtefactReference>} consentArtefacts
 */
HIUConsentNotificationEventNotification.prototype['consentArtefacts'] = undefined;

/**
 * @member {String} consentRequestId
 */
HIUConsentNotificationEventNotification.prototype['consentRequestId'] = undefined;

/**
 * @member {module:model/ConsentStatus} status
 */
HIUConsentNotificationEventNotification.prototype['status'] = undefined;






export default HIUConsentNotificationEventNotification;

