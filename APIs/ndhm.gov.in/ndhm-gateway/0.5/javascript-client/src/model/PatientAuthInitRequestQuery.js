/**
 * Gateway
 * Gateway is the hub that routes/orchestrates the interaction between consent managers and API bridges. There are 5 categories of APIs; discovery, link, consent flow, data flow and  monitoring. To reflect the consumers of APIs, the above apis are also categorized under cm facing, hiu facing and hip facing  
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AuthenticationMode from './AuthenticationMode';
import PatientAuthPurpose from './PatientAuthPurpose';
import PatientAuthRequester from './PatientAuthRequester';

/**
 * The PatientAuthInitRequestQuery model module.
 * @module model/PatientAuthInitRequestQuery
 * @version 0.5
 */
class PatientAuthInitRequestQuery {
    /**
     * Constructs a new <code>PatientAuthInitRequestQuery</code>.
     * @alias module:model/PatientAuthInitRequestQuery
     * @param id {String} id  of the patient understood by the CM
     * @param purpose {module:model/PatientAuthPurpose} 
     * @param requester {module:model/PatientAuthRequester} 
     */
    constructor(id, purpose, requester) { 
        
        PatientAuthInitRequestQuery.initialize(this, id, purpose, requester);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, purpose, requester) { 
        obj['id'] = id;
        obj['purpose'] = purpose;
        obj['requester'] = requester;
    }

    /**
     * Constructs a <code>PatientAuthInitRequestQuery</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PatientAuthInitRequestQuery} obj Optional instance to populate.
     * @return {module:model/PatientAuthInitRequestQuery} The populated <code>PatientAuthInitRequestQuery</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PatientAuthInitRequestQuery();

            if (data.hasOwnProperty('authMode')) {
                obj['authMode'] = AuthenticationMode.constructFromObject(data['authMode']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('purpose')) {
                obj['purpose'] = PatientAuthPurpose.constructFromObject(data['purpose']);
            }
            if (data.hasOwnProperty('requester')) {
                obj['requester'] = PatientAuthRequester.constructFromObject(data['requester']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PatientAuthInitRequestQuery</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PatientAuthInitRequestQuery</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PatientAuthInitRequestQuery.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `requester`
        if (data['requester']) { // data not null
          PatientAuthRequester.validateJSON(data['requester']);
        }

        return true;
    }


}

PatientAuthInitRequestQuery.RequiredProperties = ["id", "purpose", "requester"];

/**
 * @member {module:model/AuthenticationMode} authMode
 */
PatientAuthInitRequestQuery.prototype['authMode'] = undefined;

/**
 * id  of the patient understood by the CM
 * @member {String} id
 */
PatientAuthInitRequestQuery.prototype['id'] = undefined;

/**
 * @member {module:model/PatientAuthPurpose} purpose
 */
PatientAuthInitRequestQuery.prototype['purpose'] = undefined;

/**
 * @member {module:model/PatientAuthRequester} requester
 */
PatientAuthInitRequestQuery.prototype['requester'] = undefined;






export default PatientAuthInitRequestQuery;

