/**
 * Gateway
 * Gateway is the hub that routes/orchestrates the interaction between consent managers and API bridges. There are 5 categories of APIs; discovery, link, consent flow, data flow and  monitoring. To reflect the consumers of APIs, the above apis are also categorized under cm facing, hiu facing and hip facing  
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UsePurpose model module.
 * @module model/UsePurpose
 * @version 0.5
 */
class UsePurpose {
    /**
     * Constructs a new <code>UsePurpose</code>.
     * @alias module:model/UsePurpose
     * @param code {String} From the fixed set, documented at refUri
     * @param text {String} 
     */
    constructor(code, text) { 
        
        UsePurpose.initialize(this, code, text);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, code, text) { 
        obj['code'] = code;
        obj['text'] = text;
    }

    /**
     * Constructs a <code>UsePurpose</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UsePurpose} obj Optional instance to populate.
     * @return {module:model/UsePurpose} The populated <code>UsePurpose</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UsePurpose();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('refUri')) {
                obj['refUri'] = ApiClient.convertToType(data['refUri'], 'String');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UsePurpose</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UsePurpose</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UsePurpose.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['refUri'] && !(typeof data['refUri'] === 'string' || data['refUri'] instanceof String)) {
            throw new Error("Expected the field `refUri` to be a primitive type in the JSON string but got " + data['refUri']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }

        return true;
    }


}

UsePurpose.RequiredProperties = ["code", "text"];

/**
 * From the fixed set, documented at refUri
 * @member {String} code
 */
UsePurpose.prototype['code'] = undefined;

/**
 * @member {String} refUri
 */
UsePurpose.prototype['refUri'] = undefined;

/**
 * @member {String} text
 */
UsePurpose.prototype['text'] = undefined;






export default UsePurpose;

