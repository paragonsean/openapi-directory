/**
 * Gateway
 * Gateway is the hub that routes/orchestrates the interaction between consent managers and API bridges. There are 5 categories of APIs; discovery, link, consent flow, data flow and  monitoring. To reflect the consumers of APIs, the above apis are also categorized under cm facing, hiu facing and hip facing  
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The KeyObject model module.
 * @module model/KeyObject
 * @version 0.5
 */
class KeyObject {
    /**
     * Constructs a new <code>KeyObject</code>.
     * @alias module:model/KeyObject
     * @param expiry {Date} 
     * @param keyValue {String} 
     * @param parameters {String} 
     */
    constructor(expiry, keyValue, parameters) { 
        
        KeyObject.initialize(this, expiry, keyValue, parameters);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, expiry, keyValue, parameters) { 
        obj['expiry'] = expiry;
        obj['keyValue'] = keyValue;
        obj['parameters'] = parameters;
    }

    /**
     * Constructs a <code>KeyObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/KeyObject} obj Optional instance to populate.
     * @return {module:model/KeyObject} The populated <code>KeyObject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new KeyObject();

            if (data.hasOwnProperty('expiry')) {
                obj['expiry'] = ApiClient.convertToType(data['expiry'], 'Date');
            }
            if (data.hasOwnProperty('keyValue')) {
                obj['keyValue'] = ApiClient.convertToType(data['keyValue'], 'String');
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ApiClient.convertToType(data['parameters'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>KeyObject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>KeyObject</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of KeyObject.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['keyValue'] && !(typeof data['keyValue'] === 'string' || data['keyValue'] instanceof String)) {
            throw new Error("Expected the field `keyValue` to be a primitive type in the JSON string but got " + data['keyValue']);
        }
        // ensure the json data is a string
        if (data['parameters'] && !(typeof data['parameters'] === 'string' || data['parameters'] instanceof String)) {
            throw new Error("Expected the field `parameters` to be a primitive type in the JSON string but got " + data['parameters']);
        }

        return true;
    }


}

KeyObject.RequiredProperties = ["expiry", "keyValue", "parameters"];

/**
 * @member {Date} expiry
 */
KeyObject.prototype['expiry'] = undefined;

/**
 * @member {String} keyValue
 */
KeyObject.prototype['keyValue'] = undefined;

/**
 * @member {String} parameters
 */
KeyObject.prototype['parameters'] = undefined;






export default KeyObject;

