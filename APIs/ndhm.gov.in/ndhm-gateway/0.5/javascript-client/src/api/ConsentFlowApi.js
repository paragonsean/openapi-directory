/**
 * Gateway
 * Gateway is the hub that routes/orchestrates the interaction between consent managers and API bridges. There are 5 categories of APIs; discovery, link, consent flow, data flow and  monitoring. To reflect the consumers of APIs, the above apis are also categorized under cm facing, hiu facing and hip facing  
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConsentArtefactResponse from '../model/ConsentArtefactResponse';
import ConsentFetchRequest from '../model/ConsentFetchRequest';
import ConsentRequest from '../model/ConsentRequest';
import ConsentRequestInitResponse from '../model/ConsentRequestInitResponse';
import ConsentRequestStatusRequest from '../model/ConsentRequestStatusRequest';
import ErrorResponse from '../model/ErrorResponse';
import HIPConsentNotification from '../model/HIPConsentNotification';
import HIPConsentNotificationResponse from '../model/HIPConsentNotificationResponse';
import HIUConsentNotificationEvent from '../model/HIUConsentNotificationEvent';
import HIUConsentNotificationResponse from '../model/HIUConsentNotificationResponse';
import HIUConsentRequestStatus from '../model/HIUConsentRequestStatus';

/**
* ConsentFlow service.
* @module api/ConsentFlowApi
* @version 0.5
*/
export default class ConsentFlowApi {

    /**
    * Constructs a new ConsentFlowApi. 
    * @alias module:api/ConsentFlowApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v05ConsentRequestsInitPost operation.
     * @callback module:api/ConsentFlowApi~v05ConsentRequestsInitPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create consent request
     * Creates a consent request to get data about a patient by HIU user.
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {String} X_CM_ID Suffix of the consent manager to which the request was intended.
     * @param {module:model/ConsentRequest} consentRequest 
     * @param {module:api/ConsentFlowApi~v05ConsentRequestsInitPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05ConsentRequestsInitPost(authorization, X_CM_ID, consentRequest, callback) {
      let postBody = consentRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05ConsentRequestsInitPost");
      }
      // verify the required parameter 'X_CM_ID' is set
      if (X_CM_ID === undefined || X_CM_ID === null) {
        throw new Error("Missing the required parameter 'X_CM_ID' when calling v05ConsentRequestsInitPost");
      }
      // verify the required parameter 'consentRequest' is set
      if (consentRequest === undefined || consentRequest === null) {
        throw new Error("Missing the required parameter 'consentRequest' when calling v05ConsentRequestsInitPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-CM-ID': X_CM_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/consent-requests/init', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05ConsentRequestsOnInitPost operation.
     * @callback module:api/ConsentFlowApi~v05ConsentRequestsOnInitPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Response to consent request
     * Result of consent request creation for a patient. **consentRequest.id** represents the consentrequest id created by CM. The result must contain either **consentRequest** or the **error** caused. <br/>   Reasons for error may be   * Invalid references (e.g patient id, hiu id), purpose, hiTypes, ranges, persmission 
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {String} X_HIU_ID Identifier of the health information user to which the request was intended.
     * @param {module:model/ConsentRequestInitResponse} consentRequestInitResponse 
     * @param {module:api/ConsentFlowApi~v05ConsentRequestsOnInitPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05ConsentRequestsOnInitPost(authorization, X_HIU_ID, consentRequestInitResponse, callback) {
      let postBody = consentRequestInitResponse;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05ConsentRequestsOnInitPost");
      }
      // verify the required parameter 'X_HIU_ID' is set
      if (X_HIU_ID === undefined || X_HIU_ID === null) {
        throw new Error("Missing the required parameter 'X_HIU_ID' when calling v05ConsentRequestsOnInitPost");
      }
      // verify the required parameter 'consentRequestInitResponse' is set
      if (consentRequestInitResponse === undefined || consentRequestInitResponse === null) {
        throw new Error("Missing the required parameter 'consentRequestInitResponse' when calling v05ConsentRequestsOnInitPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-HIU-ID': X_HIU_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/consent-requests/on-init', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05ConsentRequestsOnStatusPost operation.
     * @callback module:api/ConsentFlowApi~v05ConsentRequestsOnStatusPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Result of consent request status
     * Result of consent request done previously. Status of request can be GRANTED,  DENIED, EXPIRED. If the request was GRANTED, then  
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {String} X_HIU_ID Identifier of the health information user to which the request was intended.
     * @param {module:model/HIUConsentRequestStatus} hIUConsentRequestStatus 
     * @param {module:api/ConsentFlowApi~v05ConsentRequestsOnStatusPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05ConsentRequestsOnStatusPost(authorization, X_HIU_ID, hIUConsentRequestStatus, callback) {
      let postBody = hIUConsentRequestStatus;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05ConsentRequestsOnStatusPost");
      }
      // verify the required parameter 'X_HIU_ID' is set
      if (X_HIU_ID === undefined || X_HIU_ID === null) {
        throw new Error("Missing the required parameter 'X_HIU_ID' when calling v05ConsentRequestsOnStatusPost");
      }
      // verify the required parameter 'hIUConsentRequestStatus' is set
      if (hIUConsentRequestStatus === undefined || hIUConsentRequestStatus === null) {
        throw new Error("Missing the required parameter 'hIUConsentRequestStatus' when calling v05ConsentRequestsOnStatusPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-HIU-ID': X_HIU_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/consent-requests/on-status', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05ConsentRequestsStatusPost operation.
     * @callback module:api/ConsentFlowApi~v05ConsentRequestsStatusPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get consent request status
     * Get status of consent request done previously
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {String} X_CM_ID Suffix of the consent manager to which the request was intended.
     * @param {module:model/ConsentRequestStatusRequest} consentRequestStatusRequest 
     * @param {module:api/ConsentFlowApi~v05ConsentRequestsStatusPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05ConsentRequestsStatusPost(authorization, X_CM_ID, consentRequestStatusRequest, callback) {
      let postBody = consentRequestStatusRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05ConsentRequestsStatusPost");
      }
      // verify the required parameter 'X_CM_ID' is set
      if (X_CM_ID === undefined || X_CM_ID === null) {
        throw new Error("Missing the required parameter 'X_CM_ID' when calling v05ConsentRequestsStatusPost");
      }
      // verify the required parameter 'consentRequestStatusRequest' is set
      if (consentRequestStatusRequest === undefined || consentRequestStatusRequest === null) {
        throw new Error("Missing the required parameter 'consentRequestStatusRequest' when calling v05ConsentRequestsStatusPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-CM-ID': X_CM_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/consent-requests/status', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05ConsentsFetchPost operation.
     * @callback module:api/ConsentFlowApi~v05ConsentsFetchPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get consent artefact
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {String} X_CM_ID Suffix of the consent manager to which the request was intended.
     * @param {module:model/ConsentFetchRequest} consentFetchRequest 
     * @param {module:api/ConsentFlowApi~v05ConsentsFetchPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05ConsentsFetchPost(authorization, X_CM_ID, consentFetchRequest, callback) {
      let postBody = consentFetchRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05ConsentsFetchPost");
      }
      // verify the required parameter 'X_CM_ID' is set
      if (X_CM_ID === undefined || X_CM_ID === null) {
        throw new Error("Missing the required parameter 'X_CM_ID' when calling v05ConsentsFetchPost");
      }
      // verify the required parameter 'consentFetchRequest' is set
      if (consentFetchRequest === undefined || consentFetchRequest === null) {
        throw new Error("Missing the required parameter 'consentFetchRequest' when calling v05ConsentsFetchPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-CM-ID': X_CM_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/consents/fetch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05ConsentsHipNotifyPost operation.
     * @callback module:api/ConsentFlowApi~v05ConsentsHipNotifyPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Consent notification
     * Notification of consents to health information providers consent request granted, consent revoked, consent expired. Only the GRANTED, REVOKED and EXPIRED status notifications will be sent to HIP.   1. If consent is granted, status=GRANTED, then consentDetail contains the consent artefact details and signature is available.    2. If consent is revoked, then status=REVOKED, and consentId specifes which consent artefact is revoked.    3. If the consent has expired, then status=EXPIRED, and consentId specifies which consent artefact has expired. Note, this is also responsibility of the HIP to keep track of consent expiry. Any data request on expired consent artefact must not be done.  
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {String} X_HIP_ID Identifier of the health information provider to which the request was intended.
     * @param {module:model/HIPConsentNotification} hIPConsentNotification 
     * @param {module:api/ConsentFlowApi~v05ConsentsHipNotifyPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05ConsentsHipNotifyPost(authorization, X_HIP_ID, hIPConsentNotification, callback) {
      let postBody = hIPConsentNotification;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05ConsentsHipNotifyPost");
      }
      // verify the required parameter 'X_HIP_ID' is set
      if (X_HIP_ID === undefined || X_HIP_ID === null) {
        throw new Error("Missing the required parameter 'X_HIP_ID' when calling v05ConsentsHipNotifyPost");
      }
      // verify the required parameter 'hIPConsentNotification' is set
      if (hIPConsentNotification === undefined || hIPConsentNotification === null) {
        throw new Error("Missing the required parameter 'hIPConsentNotification' when calling v05ConsentsHipNotifyPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-HIP-ID': X_HIP_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/consents/hip/notify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05ConsentsHipOnNotifyPost operation.
     * @callback module:api/ConsentFlowApi~v05ConsentsHipOnNotifyPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Consent notification
     * This API is called by HIP as acknowledgement to notification of consents, in cases of consent revocation and expiration.  
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {String} X_CM_ID Suffix of the consent manager to which the request was intended.
     * @param {module:model/HIPConsentNotificationResponse} hIPConsentNotificationResponse 
     * @param {module:api/ConsentFlowApi~v05ConsentsHipOnNotifyPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05ConsentsHipOnNotifyPost(authorization, X_CM_ID, hIPConsentNotificationResponse, callback) {
      let postBody = hIPConsentNotificationResponse;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05ConsentsHipOnNotifyPost");
      }
      // verify the required parameter 'X_CM_ID' is set
      if (X_CM_ID === undefined || X_CM_ID === null) {
        throw new Error("Missing the required parameter 'X_CM_ID' when calling v05ConsentsHipOnNotifyPost");
      }
      // verify the required parameter 'hIPConsentNotificationResponse' is set
      if (hIPConsentNotificationResponse === undefined || hIPConsentNotificationResponse === null) {
        throw new Error("Missing the required parameter 'hIPConsentNotificationResponse' when calling v05ConsentsHipOnNotifyPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-CM-ID': X_CM_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/consents/hip/on-notify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05ConsentsHiuNotifyPost operation.
     * @callback module:api/ConsentFlowApi~v05ConsentsHiuNotifyPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Consent notification
     * Health information user will get notified about the consent request granted or denied, consent revoked, consent expired.  1. For consent request grant, status=GRANTED, consentRequestId=<consent-request-id>, and consentArtefacts is an array of generated consent artefact Ids. 2. For consent request expiry, status=EXPIRED, consentRequestId=<consent-request-id> 3. For consent request denied, status=DENIED, consentRequestId=<consent-request-id> 4. For consent revocation, status=REVOKED, consentArtefacts is an array of revoked consent artefact ids 
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {String} X_HIU_ID Identifier of the health information user to which the request was intended.
     * @param {module:model/HIUConsentNotificationEvent} hIUConsentNotificationEvent 
     * @param {module:api/ConsentFlowApi~v05ConsentsHiuNotifyPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05ConsentsHiuNotifyPost(authorization, X_HIU_ID, hIUConsentNotificationEvent, callback) {
      let postBody = hIUConsentNotificationEvent;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05ConsentsHiuNotifyPost");
      }
      // verify the required parameter 'X_HIU_ID' is set
      if (X_HIU_ID === undefined || X_HIU_ID === null) {
        throw new Error("Missing the required parameter 'X_HIU_ID' when calling v05ConsentsHiuNotifyPost");
      }
      // verify the required parameter 'hIUConsentNotificationEvent' is set
      if (hIUConsentNotificationEvent === undefined || hIUConsentNotificationEvent === null) {
        throw new Error("Missing the required parameter 'hIUConsentNotificationEvent' when calling v05ConsentsHiuNotifyPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-HIU-ID': X_HIU_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/consents/hiu/notify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05ConsentsHiuOnNotifyPost operation.
     * @callback module:api/ConsentFlowApi~v05ConsentsHiuOnNotifyPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Consent notification
     * This API is called by HIU as acknowledgement to consent notifications, specifically for cases when consent is REVOKED or EXPIRED. 
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {String} X_CM_ID Suffix of the consent manager to which the request was intended.
     * @param {module:model/HIUConsentNotificationResponse} hIUConsentNotificationResponse 
     * @param {module:api/ConsentFlowApi~v05ConsentsHiuOnNotifyPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05ConsentsHiuOnNotifyPost(authorization, X_CM_ID, hIUConsentNotificationResponse, callback) {
      let postBody = hIUConsentNotificationResponse;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05ConsentsHiuOnNotifyPost");
      }
      // verify the required parameter 'X_CM_ID' is set
      if (X_CM_ID === undefined || X_CM_ID === null) {
        throw new Error("Missing the required parameter 'X_CM_ID' when calling v05ConsentsHiuOnNotifyPost");
      }
      // verify the required parameter 'hIUConsentNotificationResponse' is set
      if (hIUConsentNotificationResponse === undefined || hIUConsentNotificationResponse === null) {
        throw new Error("Missing the required parameter 'hIUConsentNotificationResponse' when calling v05ConsentsHiuOnNotifyPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-CM-ID': X_CM_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/consents/hiu/on-notify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05ConsentsOnFetchPost operation.
     * @callback module:api/ConsentFlowApi~v05ConsentsOnFetchPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Result of fetch request for a consent artefact
     * Must contain either consentDetail or error. Possible reason of errors are  1. consentId passed through /fetch is invalid 
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {String} X_HIU_ID Identifier of the health information user to which the request was intended.
     * @param {module:model/ConsentArtefactResponse} consentArtefactResponse 
     * @param {module:api/ConsentFlowApi~v05ConsentsOnFetchPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05ConsentsOnFetchPost(authorization, X_HIU_ID, consentArtefactResponse, callback) {
      let postBody = consentArtefactResponse;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05ConsentsOnFetchPost");
      }
      // verify the required parameter 'X_HIU_ID' is set
      if (X_HIU_ID === undefined || X_HIU_ID === null) {
        throw new Error("Missing the required parameter 'X_HIU_ID' when calling v05ConsentsOnFetchPost");
      }
      // verify the required parameter 'consentArtefactResponse' is set
      if (consentArtefactResponse === undefined || consentArtefactResponse === null) {
        throw new Error("Missing the required parameter 'consentArtefactResponse' when calling v05ConsentsOnFetchPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-HIU-ID': X_HIU_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/consents/on-fetch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
