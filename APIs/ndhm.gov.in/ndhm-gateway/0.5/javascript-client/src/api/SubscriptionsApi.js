/**
 * Gateway
 * Gateway is the hub that routes/orchestrates the interaction between consent managers and API bridges. There are 5 categories of APIs; discovery, link, consent flow, data flow and  monitoring. To reflect the consumers of APIs, the above apis are also categorized under cm facing, hiu facing and hip facing  
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import HIUSubscriptionNotification from '../model/HIUSubscriptionNotification';
import HIUSubscriptionNotificationAcknowledgment from '../model/HIUSubscriptionNotificationAcknowledgment';
import HIUSubscriptionRequestNotificationAcknowledgement from '../model/HIUSubscriptionRequestNotificationAcknowledgement';
import HIUSubscriptionRequestReceipt from '../model/HIUSubscriptionRequestReceipt';
import SubscriptionApprovalNotification from '../model/SubscriptionApprovalNotification';
import SubscriptionRequest from '../model/SubscriptionRequest';

/**
* Subscriptions service.
* @module api/SubscriptionsApi
* @version 0.5
*/
export default class SubscriptionsApi {

    /**
    * Constructs a new SubscriptionsApi. 
    * @alias module:api/SubscriptionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v05SubscriptionRequestsCmInitPost operation.
     * @callback module:api/SubscriptionsApi~v05SubscriptionRequestsCmInitPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request for subscription
     * creates a request for subscription. The subscription categories can be for care-contexts linkages or availability of data against existing care-contexts. Note that the requester must have HIU role
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {String} X_CM_ID Suffix of the consent manager to which the request was intended.
     * @param {module:model/SubscriptionRequest} subscriptionRequest 
     * @param {module:api/SubscriptionsApi~v05SubscriptionRequestsCmInitPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05SubscriptionRequestsCmInitPost(authorization, X_CM_ID, subscriptionRequest, callback) {
      let postBody = subscriptionRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05SubscriptionRequestsCmInitPost");
      }
      // verify the required parameter 'X_CM_ID' is set
      if (X_CM_ID === undefined || X_CM_ID === null) {
        throw new Error("Missing the required parameter 'X_CM_ID' when calling v05SubscriptionRequestsCmInitPost");
      }
      // verify the required parameter 'subscriptionRequest' is set
      if (subscriptionRequest === undefined || subscriptionRequest === null) {
        throw new Error("Missing the required parameter 'subscriptionRequest' when calling v05SubscriptionRequestsCmInitPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-CM-ID': X_CM_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/subscription-requests/cm/init', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05SubscriptionRequestsCmOnInitPost operation.
     * @callback module:api/SubscriptionsApi~v05SubscriptionRequestsCmOnInitPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * callback API for the /subscription-requests/cm/init to notify a HIU on acceptance/acknowledgement of the request for subscription.
     * This callback API acknowledges the request for subscription from a HIU, and sends back a \"id\" that will be used when the patient/user approves or denies the subscription.  
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {String} X_HIU_ID Identifier of the health information user to which the request was intended.
     * @param {module:model/HIUSubscriptionRequestReceipt} hIUSubscriptionRequestReceipt 
     * @param {module:api/SubscriptionsApi~v05SubscriptionRequestsCmOnInitPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05SubscriptionRequestsCmOnInitPost(authorization, X_HIU_ID, hIUSubscriptionRequestReceipt, callback) {
      let postBody = hIUSubscriptionRequestReceipt;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05SubscriptionRequestsCmOnInitPost");
      }
      // verify the required parameter 'X_HIU_ID' is set
      if (X_HIU_ID === undefined || X_HIU_ID === null) {
        throw new Error("Missing the required parameter 'X_HIU_ID' when calling v05SubscriptionRequestsCmOnInitPost");
      }
      // verify the required parameter 'hIUSubscriptionRequestReceipt' is set
      if (hIUSubscriptionRequestReceipt === undefined || hIUSubscriptionRequestReceipt === null) {
        throw new Error("Missing the required parameter 'hIUSubscriptionRequestReceipt' when calling v05SubscriptionRequestsCmOnInitPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-HIU-ID': X_HIU_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/subscription-requests/cm/on-init', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05SubscriptionRequestsHiuNotifyPost operation.
     * @callback module:api/SubscriptionsApi~v05SubscriptionRequestsHiuNotifyPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Notification for subscription grant/deny/revoke
     * This API is used by CM to notify a HIU to grant or deny a request for subscription, and also to notify that in case an existing subscription is revoked or expired. For notifying that a particular subscription request was GRANTED or DENIED, the **subscriptionRequestId** is passed.  
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {String} X_HIU_ID Identifier of the health information user to which the request was intended.
     * @param {module:model/SubscriptionApprovalNotification} subscriptionApprovalNotification 
     * @param {module:api/SubscriptionsApi~v05SubscriptionRequestsHiuNotifyPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05SubscriptionRequestsHiuNotifyPost(authorization, X_HIU_ID, subscriptionApprovalNotification, callback) {
      let postBody = subscriptionApprovalNotification;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05SubscriptionRequestsHiuNotifyPost");
      }
      // verify the required parameter 'X_HIU_ID' is set
      if (X_HIU_ID === undefined || X_HIU_ID === null) {
        throw new Error("Missing the required parameter 'X_HIU_ID' when calling v05SubscriptionRequestsHiuNotifyPost");
      }
      // verify the required parameter 'subscriptionApprovalNotification' is set
      if (subscriptionApprovalNotification === undefined || subscriptionApprovalNotification === null) {
        throw new Error("Missing the required parameter 'subscriptionApprovalNotification' when calling v05SubscriptionRequestsHiuNotifyPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-HIU-ID': X_HIU_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/subscription-requests/hiu/notify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05SubscriptionRequestsHiuOnNotifyPost operation.
     * @callback module:api/SubscriptionsApi~v05SubscriptionRequestsHiuOnNotifyPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Callback API for /subscription-requests/hiu/notify to acknowledge receipt of notification.
     * This API is called by HIU as acknowledgement to subscription request relevant notifications.  
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {String} X_CM_ID Suffix of the consent manager to which the request was intended.
     * @param {module:model/HIUSubscriptionRequestNotificationAcknowledgement} hIUSubscriptionRequestNotificationAcknowledgement 
     * @param {module:api/SubscriptionsApi~v05SubscriptionRequestsHiuOnNotifyPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05SubscriptionRequestsHiuOnNotifyPost(authorization, X_CM_ID, hIUSubscriptionRequestNotificationAcknowledgement, callback) {
      let postBody = hIUSubscriptionRequestNotificationAcknowledgement;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05SubscriptionRequestsHiuOnNotifyPost");
      }
      // verify the required parameter 'X_CM_ID' is set
      if (X_CM_ID === undefined || X_CM_ID === null) {
        throw new Error("Missing the required parameter 'X_CM_ID' when calling v05SubscriptionRequestsHiuOnNotifyPost");
      }
      // verify the required parameter 'hIUSubscriptionRequestNotificationAcknowledgement' is set
      if (hIUSubscriptionRequestNotificationAcknowledgement === undefined || hIUSubscriptionRequestNotificationAcknowledgement === null) {
        throw new Error("Missing the required parameter 'hIUSubscriptionRequestNotificationAcknowledgement' when calling v05SubscriptionRequestsHiuOnNotifyPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-CM-ID': X_CM_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/subscription-requests/hiu/on-notify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05SubscriptionsHiuNotifyPost operation.
     * @callback module:api/SubscriptionsApi~v05SubscriptionsHiuNotifyPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Notification to HIU on basis of a granted subscription
     * This API is used by CM to notify a HIU for notification relevant to subscription. Notifications are sent to subscribed HIUs whenever a new care-context is linked or new data is available on an existing linked care-context.  1. if event.category = LINK, then only care-contexts are passed when new care-contexts are linked for patient.  2. If event.category = DATA, then hiTypes are passed. Care-context is passed only if the subscribed HIU has any valid consent for that care-context 
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {String} X_HIU_ID Identifier of the health information user to which the request was intended.
     * @param {module:model/HIUSubscriptionNotification} hIUSubscriptionNotification 
     * @param {module:api/SubscriptionsApi~v05SubscriptionsHiuNotifyPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05SubscriptionsHiuNotifyPost(authorization, X_HIU_ID, hIUSubscriptionNotification, callback) {
      let postBody = hIUSubscriptionNotification;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05SubscriptionsHiuNotifyPost");
      }
      // verify the required parameter 'X_HIU_ID' is set
      if (X_HIU_ID === undefined || X_HIU_ID === null) {
        throw new Error("Missing the required parameter 'X_HIU_ID' when calling v05SubscriptionsHiuNotifyPost");
      }
      // verify the required parameter 'hIUSubscriptionNotification' is set
      if (hIUSubscriptionNotification === undefined || hIUSubscriptionNotification === null) {
        throw new Error("Missing the required parameter 'hIUSubscriptionNotification' when calling v05SubscriptionsHiuNotifyPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-HIU-ID': X_HIU_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/subscriptions/hiu/notify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05SubscriptionsHiuOnNotifyPost operation.
     * @callback module:api/SubscriptionsApi~v05SubscriptionsHiuOnNotifyPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Callback API for /subscriptions/hiu/notify to acknowledge receipt of notification.
     * This API is called by HIU as acknowledgement to consent notifications, specifically for cases when consent is REVOKED or EXPIRED. 
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {String} X_CM_ID Suffix of the consent manager to which the request was intended.
     * @param {module:model/HIUSubscriptionNotificationAcknowledgment} hIUSubscriptionNotificationAcknowledgment 
     * @param {module:api/SubscriptionsApi~v05SubscriptionsHiuOnNotifyPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05SubscriptionsHiuOnNotifyPost(authorization, X_CM_ID, hIUSubscriptionNotificationAcknowledgment, callback) {
      let postBody = hIUSubscriptionNotificationAcknowledgment;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05SubscriptionsHiuOnNotifyPost");
      }
      // verify the required parameter 'X_CM_ID' is set
      if (X_CM_ID === undefined || X_CM_ID === null) {
        throw new Error("Missing the required parameter 'X_CM_ID' when calling v05SubscriptionsHiuOnNotifyPost");
      }
      // verify the required parameter 'hIUSubscriptionNotificationAcknowledgment' is set
      if (hIUSubscriptionNotificationAcknowledgment === undefined || hIUSubscriptionNotificationAcknowledgment === null) {
        throw new Error("Missing the required parameter 'hIUSubscriptionNotificationAcknowledgment' when calling v05SubscriptionsHiuOnNotifyPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-CM-ID': X_CM_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/subscriptions/hiu/on-notify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
