/**
 * Gateway
 * Gateway is the hub that routes/orchestrates the interaction between consent managers and API bridges. There are 5 categories of APIs; discovery, link, consent flow, data flow and  monitoring. To reflect the consumers of APIs, the above apis are also categorized under cm facing, hiu facing and hip facing  
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConsentArtefactResponse from '../model/ConsentArtefactResponse';
import ConsentRequestInitResponse from '../model/ConsentRequestInitResponse';
import ErrorResponse from '../model/ErrorResponse';
import HIPConsentNotification from '../model/HIPConsentNotification';
import HIPHIRequest from '../model/HIPHIRequest';
import HIUConsentNotificationEvent from '../model/HIUConsentNotificationEvent';
import HIUConsentRequestStatus from '../model/HIUConsentRequestStatus';
import HIUHealthInformationRequestResponse from '../model/HIUHealthInformationRequestResponse';
import HIUSubscriptionNotification from '../model/HIUSubscriptionNotification';
import HIUSubscriptionRequestReceipt from '../model/HIUSubscriptionRequestReceipt';
import LinkConfirmationRequest from '../model/LinkConfirmationRequest';
import PatientAuthConfirmResponse from '../model/PatientAuthConfirmResponse';
import PatientAuthInitResponse from '../model/PatientAuthInitResponse';
import PatientAuthModeQueryResponse from '../model/PatientAuthModeQueryResponse';
import PatientAuthNotification from '../model/PatientAuthNotification';
import PatientCareContextLinkResponse from '../model/PatientCareContextLinkResponse';
import PatientDiscoveryRequest from '../model/PatientDiscoveryRequest';
import PatientDiscoveryResult from '../model/PatientDiscoveryResult';
import PatientIdentificationResponse from '../model/PatientIdentificationResponse';
import PatientLinkReferenceRequest from '../model/PatientLinkReferenceRequest';
import PatientSMSNotifcationResponse from '../model/PatientSMSNotifcationResponse';
import ShareProfileRequest from '../model/ShareProfileRequest';
import SubscriptionApprovalNotification from '../model/SubscriptionApprovalNotification';

/**
* CmFacing service.
* @module api/CmFacingApi
* @version 0.5
*/
export default class CmFacingApi {

    /**
    * Constructs a new CmFacingApi. 
    * @alias module:api/CmFacingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v05CareContextsDiscoverPost_0 operation.
     * @callback module:api/CmFacingApi~v05CareContextsDiscoverPost_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Discover patient's accounts
     * Request for patient care context discover, made by CM for a specific HIP. It is expected that HIP will subsequently return either zero or one patient record with (potentially masked) associated care contexts   1. **At least one of the verified identifier matches**   2. **Name (fuzzy), gender matches**   3. **If YoB was given, age band(+-2) matches**   4. **If unverified identifiers were given, one of them matches**   5. **If more than one patient records would be found after aforementioned steps, then patient who matches most verified and unverified identifiers would be returned.**   6. **If there would be still more than one patients (after ranking) error would be returned**   7. **Intended HIP should be able to resolve and identify results returned in the subsequent link confirmation request via the specified transactionId**   8. **Intended HIP should store the discovery results with transactionId and care contexts discovered for subsequent link initiation** 
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {String} X_HIP_ID Identifier of the health information provider to which the request was intended.
     * @param {module:model/PatientDiscoveryRequest} patientDiscoveryRequest 
     * @param {module:api/CmFacingApi~v05CareContextsDiscoverPost_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    v05CareContextsDiscoverPost_0(authorization, X_HIP_ID, patientDiscoveryRequest, callback) {
      let postBody = patientDiscoveryRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05CareContextsDiscoverPost_0");
      }
      // verify the required parameter 'X_HIP_ID' is set
      if (X_HIP_ID === undefined || X_HIP_ID === null) {
        throw new Error("Missing the required parameter 'X_HIP_ID' when calling v05CareContextsDiscoverPost_0");
      }
      // verify the required parameter 'patientDiscoveryRequest' is set
      if (patientDiscoveryRequest === undefined || patientDiscoveryRequest === null) {
        throw new Error("Missing the required parameter 'patientDiscoveryRequest' when calling v05CareContextsDiscoverPost_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-HIP-ID': X_HIP_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/care-contexts/discover', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05CareContextsOnDiscoverPost_0 operation.
     * @callback module:api/CmFacingApi~v05CareContextsOnDiscoverPost_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Response to patient's account discovery request
     * Result of patient care-context discovery request at HIP end. If a matching patient found with zero or more care contexts associated, it is specified as result attribute. If the prior discovery request, resulted in errors then it is specified in the error attribute. Reasons of errors can be    1. **more than one definitive match for the given request**    2. **no verified identifer was specified** 
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {String} X_CM_ID Suffix of the consent manager to which the request was intended.
     * @param {module:model/PatientDiscoveryResult} patientDiscoveryResult 
     * @param {module:api/CmFacingApi~v05CareContextsOnDiscoverPost_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    v05CareContextsOnDiscoverPost_0(authorization, X_CM_ID, patientDiscoveryResult, callback) {
      let postBody = patientDiscoveryResult;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05CareContextsOnDiscoverPost_0");
      }
      // verify the required parameter 'X_CM_ID' is set
      if (X_CM_ID === undefined || X_CM_ID === null) {
        throw new Error("Missing the required parameter 'X_CM_ID' when calling v05CareContextsOnDiscoverPost_0");
      }
      // verify the required parameter 'patientDiscoveryResult' is set
      if (patientDiscoveryResult === undefined || patientDiscoveryResult === null) {
        throw new Error("Missing the required parameter 'patientDiscoveryResult' when calling v05CareContextsOnDiscoverPost_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-CM-ID': X_CM_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/care-contexts/on-discover', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05ConsentRequestsOnInitPost_0 operation.
     * @callback module:api/CmFacingApi~v05ConsentRequestsOnInitPost_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Response to consent request
     * Result of consent request creation for a patient. **consentRequest.id** represents the consentrequest id created by CM. The result must contain either **consentRequest** or the **error** caused. <br/>   Reasons for error may be   * Invalid references (e.g patient id, hiu id), purpose, hiTypes, ranges, persmission 
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {String} X_HIU_ID Identifier of the health information user to which the request was intended.
     * @param {module:model/ConsentRequestInitResponse} consentRequestInitResponse 
     * @param {module:api/CmFacingApi~v05ConsentRequestsOnInitPost_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    v05ConsentRequestsOnInitPost_0(authorization, X_HIU_ID, consentRequestInitResponse, callback) {
      let postBody = consentRequestInitResponse;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05ConsentRequestsOnInitPost_0");
      }
      // verify the required parameter 'X_HIU_ID' is set
      if (X_HIU_ID === undefined || X_HIU_ID === null) {
        throw new Error("Missing the required parameter 'X_HIU_ID' when calling v05ConsentRequestsOnInitPost_0");
      }
      // verify the required parameter 'consentRequestInitResponse' is set
      if (consentRequestInitResponse === undefined || consentRequestInitResponse === null) {
        throw new Error("Missing the required parameter 'consentRequestInitResponse' when calling v05ConsentRequestsOnInitPost_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-HIU-ID': X_HIU_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/consent-requests/on-init', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05ConsentRequestsOnStatusPost_0 operation.
     * @callback module:api/CmFacingApi~v05ConsentRequestsOnStatusPost_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Result of consent request status
     * Result of consent request done previously. Status of request can be GRANTED,  DENIED, EXPIRED. If the request was GRANTED, then  
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {String} X_HIU_ID Identifier of the health information user to which the request was intended.
     * @param {module:model/HIUConsentRequestStatus} hIUConsentRequestStatus 
     * @param {module:api/CmFacingApi~v05ConsentRequestsOnStatusPost_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    v05ConsentRequestsOnStatusPost_0(authorization, X_HIU_ID, hIUConsentRequestStatus, callback) {
      let postBody = hIUConsentRequestStatus;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05ConsentRequestsOnStatusPost_0");
      }
      // verify the required parameter 'X_HIU_ID' is set
      if (X_HIU_ID === undefined || X_HIU_ID === null) {
        throw new Error("Missing the required parameter 'X_HIU_ID' when calling v05ConsentRequestsOnStatusPost_0");
      }
      // verify the required parameter 'hIUConsentRequestStatus' is set
      if (hIUConsentRequestStatus === undefined || hIUConsentRequestStatus === null) {
        throw new Error("Missing the required parameter 'hIUConsentRequestStatus' when calling v05ConsentRequestsOnStatusPost_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-HIU-ID': X_HIU_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/consent-requests/on-status', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05ConsentsHipNotifyPost_0 operation.
     * @callback module:api/CmFacingApi~v05ConsentsHipNotifyPost_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Consent notification
     * Notification of consents to health information providers consent request granted, consent revoked, consent expired. Only the GRANTED, REVOKED and EXPIRED status notifications will be sent to HIP.   1. If consent is granted, status=GRANTED, then consentDetail contains the consent artefact details and signature is available.    2. If consent is revoked, then status=REVOKED, and consentId specifes which consent artefact is revoked.    3. If the consent has expired, then status=EXPIRED, and consentId specifies which consent artefact has expired. Note, this is also responsibility of the HIP to keep track of consent expiry. Any data request on expired consent artefact must not be done.  
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {String} X_HIP_ID Identifier of the health information provider to which the request was intended.
     * @param {module:model/HIPConsentNotification} hIPConsentNotification 
     * @param {module:api/CmFacingApi~v05ConsentsHipNotifyPost_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    v05ConsentsHipNotifyPost_0(authorization, X_HIP_ID, hIPConsentNotification, callback) {
      let postBody = hIPConsentNotification;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05ConsentsHipNotifyPost_0");
      }
      // verify the required parameter 'X_HIP_ID' is set
      if (X_HIP_ID === undefined || X_HIP_ID === null) {
        throw new Error("Missing the required parameter 'X_HIP_ID' when calling v05ConsentsHipNotifyPost_0");
      }
      // verify the required parameter 'hIPConsentNotification' is set
      if (hIPConsentNotification === undefined || hIPConsentNotification === null) {
        throw new Error("Missing the required parameter 'hIPConsentNotification' when calling v05ConsentsHipNotifyPost_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-HIP-ID': X_HIP_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/consents/hip/notify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05ConsentsHiuNotifyPost_0 operation.
     * @callback module:api/CmFacingApi~v05ConsentsHiuNotifyPost_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Consent notification
     * Health information user will get notified about the consent request granted or denied, consent revoked, consent expired.  1. For consent request grant, status=GRANTED, consentRequestId=<consent-request-id>, and consentArtefacts is an array of generated consent artefact Ids. 2. For consent request expiry, status=EXPIRED, consentRequestId=<consent-request-id> 3. For consent request denied, status=DENIED, consentRequestId=<consent-request-id> 4. For consent revocation, status=REVOKED, consentArtefacts is an array of revoked consent artefact ids 
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {String} X_HIU_ID Identifier of the health information user to which the request was intended.
     * @param {module:model/HIUConsentNotificationEvent} hIUConsentNotificationEvent 
     * @param {module:api/CmFacingApi~v05ConsentsHiuNotifyPost_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    v05ConsentsHiuNotifyPost_0(authorization, X_HIU_ID, hIUConsentNotificationEvent, callback) {
      let postBody = hIUConsentNotificationEvent;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05ConsentsHiuNotifyPost_0");
      }
      // verify the required parameter 'X_HIU_ID' is set
      if (X_HIU_ID === undefined || X_HIU_ID === null) {
        throw new Error("Missing the required parameter 'X_HIU_ID' when calling v05ConsentsHiuNotifyPost_0");
      }
      // verify the required parameter 'hIUConsentNotificationEvent' is set
      if (hIUConsentNotificationEvent === undefined || hIUConsentNotificationEvent === null) {
        throw new Error("Missing the required parameter 'hIUConsentNotificationEvent' when calling v05ConsentsHiuNotifyPost_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-HIU-ID': X_HIU_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/consents/hiu/notify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05ConsentsOnFetchPost_0 operation.
     * @callback module:api/CmFacingApi~v05ConsentsOnFetchPost_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Result of fetch request for a consent artefact
     * Must contain either consentDetail or error. Possible reason of errors are  1. consentId passed through /fetch is invalid 
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {String} X_HIU_ID Identifier of the health information user to which the request was intended.
     * @param {module:model/ConsentArtefactResponse} consentArtefactResponse 
     * @param {module:api/CmFacingApi~v05ConsentsOnFetchPost_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    v05ConsentsOnFetchPost_0(authorization, X_HIU_ID, consentArtefactResponse, callback) {
      let postBody = consentArtefactResponse;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05ConsentsOnFetchPost_0");
      }
      // verify the required parameter 'X_HIU_ID' is set
      if (X_HIU_ID === undefined || X_HIU_ID === null) {
        throw new Error("Missing the required parameter 'X_HIU_ID' when calling v05ConsentsOnFetchPost_0");
      }
      // verify the required parameter 'consentArtefactResponse' is set
      if (consentArtefactResponse === undefined || consentArtefactResponse === null) {
        throw new Error("Missing the required parameter 'consentArtefactResponse' when calling v05ConsentsOnFetchPost_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-HIU-ID': X_HIU_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/consents/on-fetch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05HealthInformationCmOnRequestPost_0 operation.
     * @callback module:api/CmFacingApi~v05HealthInformationCmOnRequestPost_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Health information data request
     * Callback API for acknowledgement of Health information request of HIU. CM calls this API when it has validated the Health Information request given the consent id. Either the **hiRequest** or **error** would need to be specified. If the health info request was valid, then the ***hiRequest.transactionId*** specifies the transaction context against which HIP would send over the data.  Possible cases of errors are   1. **Invalid consent artefact id**   2. **Consent has expired**   3. **Date ranges are invalid** 
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {String} X_HIU_ID Identifier of the health information user to which the request was intended.
     * @param {module:model/HIUHealthInformationRequestResponse} hIUHealthInformationRequestResponse 
     * @param {module:api/CmFacingApi~v05HealthInformationCmOnRequestPost_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    v05HealthInformationCmOnRequestPost_0(authorization, X_HIU_ID, hIUHealthInformationRequestResponse, callback) {
      let postBody = hIUHealthInformationRequestResponse;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05HealthInformationCmOnRequestPost_0");
      }
      // verify the required parameter 'X_HIU_ID' is set
      if (X_HIU_ID === undefined || X_HIU_ID === null) {
        throw new Error("Missing the required parameter 'X_HIU_ID' when calling v05HealthInformationCmOnRequestPost_0");
      }
      // verify the required parameter 'hIUHealthInformationRequestResponse' is set
      if (hIUHealthInformationRequestResponse === undefined || hIUHealthInformationRequestResponse === null) {
        throw new Error("Missing the required parameter 'hIUHealthInformationRequestResponse' when calling v05HealthInformationCmOnRequestPost_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-HIU-ID': X_HIU_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/health-information/cm/on-request', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05HealthInformationHipRequestPost_0 operation.
     * @callback module:api/CmFacingApi~v05HealthInformationHipRequestPost_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Health information data request
     * API called by CM to request Health information from HIP against a validated consent artefact. The transactionId is the correlation id that HIP should use use when pushing data to the **dataPushUrl**.  
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {String} X_HIP_ID Identifier of the health information provider to which the request was intended.
     * @param {module:model/HIPHIRequest} hIPHIRequest 
     * @param {module:api/CmFacingApi~v05HealthInformationHipRequestPost_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    v05HealthInformationHipRequestPost_0(authorization, X_HIP_ID, hIPHIRequest, callback) {
      let postBody = hIPHIRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05HealthInformationHipRequestPost_0");
      }
      // verify the required parameter 'X_HIP_ID' is set
      if (X_HIP_ID === undefined || X_HIP_ID === null) {
        throw new Error("Missing the required parameter 'X_HIP_ID' when calling v05HealthInformationHipRequestPost_0");
      }
      // verify the required parameter 'hIPHIRequest' is set
      if (hIPHIRequest === undefined || hIPHIRequest === null) {
        throw new Error("Missing the required parameter 'hIPHIRequest' when calling v05HealthInformationHipRequestPost_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-HIP-ID': X_HIP_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/health-information/hip/request', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05LinksLinkConfirmPost_0 operation.
     * @callback module:api/CmFacingApi~v05LinksLinkConfirmPost_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Token submission by Consent Manager for link confirmation
     * API to submit the token that was sent by HIP during the link request.  
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {String} X_HIP_ID Identifier of the health information provider to which the request was intended.
     * @param {module:model/LinkConfirmationRequest} linkConfirmationRequest 
     * @param {module:api/CmFacingApi~v05LinksLinkConfirmPost_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    v05LinksLinkConfirmPost_0(authorization, X_HIP_ID, linkConfirmationRequest, callback) {
      let postBody = linkConfirmationRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05LinksLinkConfirmPost_0");
      }
      // verify the required parameter 'X_HIP_ID' is set
      if (X_HIP_ID === undefined || X_HIP_ID === null) {
        throw new Error("Missing the required parameter 'X_HIP_ID' when calling v05LinksLinkConfirmPost_0");
      }
      // verify the required parameter 'linkConfirmationRequest' is set
      if (linkConfirmationRequest === undefined || linkConfirmationRequest === null) {
        throw new Error("Missing the required parameter 'linkConfirmationRequest' when calling v05LinksLinkConfirmPost_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-HIP-ID': X_HIP_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/links/link/confirm', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05LinksLinkInitPost_0 operation.
     * @callback module:api/CmFacingApi~v05LinksLinkInitPost_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Link patient's care contexts
     * Request from CM to links care contexts associated with only one patient   1. **Validate account reference number and care context reference number**   2. **Validate transactionId in the request with discovery request entry to check whether there was a discovery       and were these care contexts discovered or not for a given patient**   3. **Before eventual link confirmation, HIP needs to authenticate the request with the patient(eg: OTP verification)**   4. **HIP should communicate the mode of authentication of a successful request to Consent Manager** 
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {String} X_HIP_ID Identifier of the health information provider to which the request was intended.
     * @param {module:model/PatientLinkReferenceRequest} patientLinkReferenceRequest 
     * @param {module:api/CmFacingApi~v05LinksLinkInitPost_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    v05LinksLinkInitPost_0(authorization, X_HIP_ID, patientLinkReferenceRequest, callback) {
      let postBody = patientLinkReferenceRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05LinksLinkInitPost_0");
      }
      // verify the required parameter 'X_HIP_ID' is set
      if (X_HIP_ID === undefined || X_HIP_ID === null) {
        throw new Error("Missing the required parameter 'X_HIP_ID' when calling v05LinksLinkInitPost_0");
      }
      // verify the required parameter 'patientLinkReferenceRequest' is set
      if (patientLinkReferenceRequest === undefined || patientLinkReferenceRequest === null) {
        throw new Error("Missing the required parameter 'patientLinkReferenceRequest' when calling v05LinksLinkInitPost_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-HIP-ID': X_HIP_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/links/link/init', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05LinksLinkOnAddContextsPost_0 operation.
     * @callback module:api/CmFacingApi~v05LinksLinkOnAddContextsPost_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * callback API for HIP initiated patient linking /link/add-context
     * If the accessToken is valid for purpose of linking, and specified details provided, CM will send \"acknoweldgement.status\" as SUCCESS. If any error occcurred, for example invalid token, or other required patient or care-context information not provided, then \"error\" attribute conveys so.    1. **accessToken must be valid and must be for the purpose of linking** 
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {String} X_HIP_ID Identifier of the health information provider to which the request was intended.
     * @param {module:model/PatientCareContextLinkResponse} patientCareContextLinkResponse 
     * @param {module:api/CmFacingApi~v05LinksLinkOnAddContextsPost_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    v05LinksLinkOnAddContextsPost_0(authorization, X_HIP_ID, patientCareContextLinkResponse, callback) {
      let postBody = patientCareContextLinkResponse;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05LinksLinkOnAddContextsPost_0");
      }
      // verify the required parameter 'X_HIP_ID' is set
      if (X_HIP_ID === undefined || X_HIP_ID === null) {
        throw new Error("Missing the required parameter 'X_HIP_ID' when calling v05LinksLinkOnAddContextsPost_0");
      }
      // verify the required parameter 'patientCareContextLinkResponse' is set
      if (patientCareContextLinkResponse === undefined || patientCareContextLinkResponse === null) {
        throw new Error("Missing the required parameter 'patientCareContextLinkResponse' when calling v05LinksLinkOnAddContextsPost_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-HIP-ID': X_HIP_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/links/link/on-add-contexts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05PatientsOnFindPost_0 operation.
     * @callback module:api/CmFacingApi~v05PatientsOnFindPost_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Identification result for a consent-manager user-id
     * If a patient is found then patient.name contains the patients name.  Otherwise, patient is not provided, and possibly error is raised for invalid requests Note in addition to the \"Authorization\" header, one of the following headers must be specified 1. specify **X-HIU-ID** if the requester is HIU (identified from /find requester.id) 2. specify **X-HIP-ID** if the requester is HIP (identified from /find requester.id) 
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {module:model/PatientIdentificationResponse} patientIdentificationResponse 
     * @param {module:api/CmFacingApi~v05PatientsOnFindPost_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    v05PatientsOnFindPost_0(authorization, patientIdentificationResponse, callback) {
      let postBody = patientIdentificationResponse;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05PatientsOnFindPost_0");
      }
      // verify the required parameter 'patientIdentificationResponse' is set
      if (patientIdentificationResponse === undefined || patientIdentificationResponse === null) {
        throw new Error("Missing the required parameter 'patientIdentificationResponse' when calling v05PatientsOnFindPost_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/patients/on-find', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05PatientsProfileSharePost_0 operation.
     * @callback module:api/CmFacingApi~v05PatientsProfileSharePost_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Share patient profile details
     * Request for sharing patient's profile details to HIP 
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {String} X_HIP_ID Identifier of the health information provider to which the request was intended.
     * @param {module:model/ShareProfileRequest} shareProfileRequest 
     * @param {module:api/CmFacingApi~v05PatientsProfileSharePost_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    v05PatientsProfileSharePost_0(authorization, X_HIP_ID, shareProfileRequest, opts, callback) {
      opts = opts || {};
      let postBody = shareProfileRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05PatientsProfileSharePost_0");
      }
      // verify the required parameter 'X_HIP_ID' is set
      if (X_HIP_ID === undefined || X_HIP_ID === null) {
        throw new Error("Missing the required parameter 'X_HIP_ID' when calling v05PatientsProfileSharePost_0");
      }
      // verify the required parameter 'shareProfileRequest' is set
      if (shareProfileRequest === undefined || shareProfileRequest === null) {
        throw new Error("Missing the required parameter 'shareProfileRequest' when calling v05PatientsProfileSharePost_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-HIP-ID': X_HIP_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      let basePaths = ['https://your-hrp-server.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v0.5/patients/profile/share', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the v05PatientsSmsOnNotifyPost operation.
     * @callback module:api/CmFacingApi~v05PatientsSmsOnNotifyPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Acknowledgment response for SMS notification sent to patient by HIP
     * If the SMS notification is successfully sent to patient then \"status\" will be \"ACKNOWLEDGED\" with no error. If the SMS notification is failed then \"status\" will be \"ERRORED\" with error. 
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {String} X_HIP_ID Identifier of the health information provider to which the request was intended.
     * @param {module:model/PatientSMSNotifcationResponse} patientSMSNotifcationResponse 
     * @param {module:api/CmFacingApi~v05PatientsSmsOnNotifyPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05PatientsSmsOnNotifyPost(authorization, X_HIP_ID, patientSMSNotifcationResponse, callback) {
      let postBody = patientSMSNotifcationResponse;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05PatientsSmsOnNotifyPost");
      }
      // verify the required parameter 'X_HIP_ID' is set
      if (X_HIP_ID === undefined || X_HIP_ID === null) {
        throw new Error("Missing the required parameter 'X_HIP_ID' when calling v05PatientsSmsOnNotifyPost");
      }
      // verify the required parameter 'patientSMSNotifcationResponse' is set
      if (patientSMSNotifcationResponse === undefined || patientSMSNotifcationResponse === null) {
        throw new Error("Missing the required parameter 'patientSMSNotifcationResponse' when calling v05PatientsSmsOnNotifyPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-HIP-ID': X_HIP_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/patients/sms/on-notify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05SubscriptionRequestsCmOnInitPost_0 operation.
     * @callback module:api/CmFacingApi~v05SubscriptionRequestsCmOnInitPost_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * callback API for the /subscription-requests/cm/init to notify a HIU on acceptance/acknowledgement of the request for subscription.
     * This callback API acknowledges the request for subscription from a HIU, and sends back a \"id\" that will be used when the patient/user approves or denies the subscription.  
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {String} X_HIU_ID Identifier of the health information user to which the request was intended.
     * @param {module:model/HIUSubscriptionRequestReceipt} hIUSubscriptionRequestReceipt 
     * @param {module:api/CmFacingApi~v05SubscriptionRequestsCmOnInitPost_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    v05SubscriptionRequestsCmOnInitPost_0(authorization, X_HIU_ID, hIUSubscriptionRequestReceipt, callback) {
      let postBody = hIUSubscriptionRequestReceipt;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05SubscriptionRequestsCmOnInitPost_0");
      }
      // verify the required parameter 'X_HIU_ID' is set
      if (X_HIU_ID === undefined || X_HIU_ID === null) {
        throw new Error("Missing the required parameter 'X_HIU_ID' when calling v05SubscriptionRequestsCmOnInitPost_0");
      }
      // verify the required parameter 'hIUSubscriptionRequestReceipt' is set
      if (hIUSubscriptionRequestReceipt === undefined || hIUSubscriptionRequestReceipt === null) {
        throw new Error("Missing the required parameter 'hIUSubscriptionRequestReceipt' when calling v05SubscriptionRequestsCmOnInitPost_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-HIU-ID': X_HIU_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/subscription-requests/cm/on-init', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05SubscriptionRequestsHiuNotifyPost_0 operation.
     * @callback module:api/CmFacingApi~v05SubscriptionRequestsHiuNotifyPost_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Notification for subscription grant/deny/revoke
     * This API is used by CM to notify a HIU to grant or deny a request for subscription, and also to notify that in case an existing subscription is revoked or expired. For notifying that a particular subscription request was GRANTED or DENIED, the **subscriptionRequestId** is passed.  
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {String} X_HIU_ID Identifier of the health information user to which the request was intended.
     * @param {module:model/SubscriptionApprovalNotification} subscriptionApprovalNotification 
     * @param {module:api/CmFacingApi~v05SubscriptionRequestsHiuNotifyPost_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    v05SubscriptionRequestsHiuNotifyPost_0(authorization, X_HIU_ID, subscriptionApprovalNotification, callback) {
      let postBody = subscriptionApprovalNotification;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05SubscriptionRequestsHiuNotifyPost_0");
      }
      // verify the required parameter 'X_HIU_ID' is set
      if (X_HIU_ID === undefined || X_HIU_ID === null) {
        throw new Error("Missing the required parameter 'X_HIU_ID' when calling v05SubscriptionRequestsHiuNotifyPost_0");
      }
      // verify the required parameter 'subscriptionApprovalNotification' is set
      if (subscriptionApprovalNotification === undefined || subscriptionApprovalNotification === null) {
        throw new Error("Missing the required parameter 'subscriptionApprovalNotification' when calling v05SubscriptionRequestsHiuNotifyPost_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-HIU-ID': X_HIU_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/subscription-requests/hiu/notify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05SubscriptionsHiuNotifyPost_0 operation.
     * @callback module:api/CmFacingApi~v05SubscriptionsHiuNotifyPost_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Notification to HIU on basis of a granted subscription
     * This API is used by CM to notify a HIU for notification relevant to subscription. Notifications are sent to subscribed HIUs whenever a new care-context is linked or new data is available on an existing linked care-context.  1. if event.category = LINK, then only care-contexts are passed when new care-contexts are linked for patient.  2. If event.category = DATA, then hiTypes are passed. Care-context is passed only if the subscribed HIU has any valid consent for that care-context 
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {String} X_HIU_ID Identifier of the health information user to which the request was intended.
     * @param {module:model/HIUSubscriptionNotification} hIUSubscriptionNotification 
     * @param {module:api/CmFacingApi~v05SubscriptionsHiuNotifyPost_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    v05SubscriptionsHiuNotifyPost_0(authorization, X_HIU_ID, hIUSubscriptionNotification, callback) {
      let postBody = hIUSubscriptionNotification;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05SubscriptionsHiuNotifyPost_0");
      }
      // verify the required parameter 'X_HIU_ID' is set
      if (X_HIU_ID === undefined || X_HIU_ID === null) {
        throw new Error("Missing the required parameter 'X_HIU_ID' when calling v05SubscriptionsHiuNotifyPost_0");
      }
      // verify the required parameter 'hIUSubscriptionNotification' is set
      if (hIUSubscriptionNotification === undefined || hIUSubscriptionNotification === null) {
        throw new Error("Missing the required parameter 'hIUSubscriptionNotification' when calling v05SubscriptionsHiuNotifyPost_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-HIU-ID': X_HIU_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/subscriptions/hiu/notify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05UsersAuthNotifyPost_0 operation.
     * @callback module:api/CmFacingApi~v05UsersAuthNotifyPost_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * notification API in case of DIRECT mode of authentication by the CM
     * This API is called by CM to confirm authentication of users. The transactionId returned is same as that passed in /auth/on-init. The \"auth.status\" conveys whether the request was GRANTED or DENIED.    1. **auth.accessToken** - is specific to the purpose mentioned in the /auth/init. This token needs to be used for initiating the intended action. For example for HIP initiated linking of care-contexts   2. **NOTE**, only one of **X-HIP-ID** or **X-HIU-ID** will be sent as part of header, not both.   3. The payload is conditional to the purpose of auth. If purpose specified in /auth/init is KYC or KYC_AND_LINK, then patient details are passed. **auth.accessToken** is passed only if the purpose is LINK or KYC_AND_LINK. 
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {String} X_HIP_ID Identifier of the health information provider to which the request was intended.
     * @param {String} X_HIU_ID Identifier of the health information user to which the request was intended.
     * @param {module:model/PatientAuthNotification} patientAuthNotification 
     * @param {module:api/CmFacingApi~v05UsersAuthNotifyPost_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    v05UsersAuthNotifyPost_0(authorization, X_HIP_ID, X_HIU_ID, patientAuthNotification, callback) {
      let postBody = patientAuthNotification;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05UsersAuthNotifyPost_0");
      }
      // verify the required parameter 'X_HIP_ID' is set
      if (X_HIP_ID === undefined || X_HIP_ID === null) {
        throw new Error("Missing the required parameter 'X_HIP_ID' when calling v05UsersAuthNotifyPost_0");
      }
      // verify the required parameter 'X_HIU_ID' is set
      if (X_HIU_ID === undefined || X_HIU_ID === null) {
        throw new Error("Missing the required parameter 'X_HIU_ID' when calling v05UsersAuthNotifyPost_0");
      }
      // verify the required parameter 'patientAuthNotification' is set
      if (patientAuthNotification === undefined || patientAuthNotification === null) {
        throw new Error("Missing the required parameter 'patientAuthNotification' when calling v05UsersAuthNotifyPost_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-HIP-ID': X_HIP_ID,
        'X-HIU-ID': X_HIU_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/users/auth/notify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05UsersAuthOnConfirmPost_0 operation.
     * @callback module:api/CmFacingApi~v05UsersAuthOnConfirmPost_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * callback API for /auth/confirm (in case of MEDIATED auth) to confirm user authentication or not
     * This API is called by CM to confirm authentication of users.    1. **auth.accessToken** - is specific to the purpose mentioned in the /auth/init. This token needs to be used for initiating the intended action. For example for HIP initiated linking of care-contexts   2. **NOTE**, only one of **X-HIP-ID** or **X-HIU-ID** will be sent as part of header, not both.      
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {String} X_HIP_ID Identifier of the health information provider to which the request was intended.
     * @param {String} X_HIU_ID Identifier of the health information user to which the request was intended.
     * @param {module:model/PatientAuthConfirmResponse} patientAuthConfirmResponse 
     * @param {module:api/CmFacingApi~v05UsersAuthOnConfirmPost_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    v05UsersAuthOnConfirmPost_0(authorization, X_HIP_ID, X_HIU_ID, patientAuthConfirmResponse, callback) {
      let postBody = patientAuthConfirmResponse;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05UsersAuthOnConfirmPost_0");
      }
      // verify the required parameter 'X_HIP_ID' is set
      if (X_HIP_ID === undefined || X_HIP_ID === null) {
        throw new Error("Missing the required parameter 'X_HIP_ID' when calling v05UsersAuthOnConfirmPost_0");
      }
      // verify the required parameter 'X_HIU_ID' is set
      if (X_HIU_ID === undefined || X_HIU_ID === null) {
        throw new Error("Missing the required parameter 'X_HIU_ID' when calling v05UsersAuthOnConfirmPost_0");
      }
      // verify the required parameter 'patientAuthConfirmResponse' is set
      if (patientAuthConfirmResponse === undefined || patientAuthConfirmResponse === null) {
        throw new Error("Missing the required parameter 'patientAuthConfirmResponse' when calling v05UsersAuthOnConfirmPost_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-HIP-ID': X_HIP_ID,
        'X-HIU-ID': X_HIU_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/users/auth/on-confirm', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05UsersAuthOnFetchModesPost_0 operation.
     * @callback module:api/CmFacingApi~v05UsersAuthOnFetchModesPost_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Identification result for a consent-manager user-id
     * If a patient is found then **auth** attribute contains the supported modes for the specified purpose.  Otherwise, error is raised for invalid requests or for non-existent id. Note in addition to the \"Authorization\" header, one of the following headers must be specified 1. **X-HIU-ID** if the requester is HIU (identified from /auth/fetch-modes requester.id) 2. **X-HIP-ID** if the requester is HIP (identified from /auth/fetch-modes requester.id) 
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {String} X_HIP_ID Identifier of the health information provider to which the request was intended.
     * @param {String} X_HIU_ID Identifier of the health information user to which the request was intended.
     * @param {module:model/PatientAuthModeQueryResponse} patientAuthModeQueryResponse 
     * @param {module:api/CmFacingApi~v05UsersAuthOnFetchModesPost_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    v05UsersAuthOnFetchModesPost_0(authorization, X_HIP_ID, X_HIU_ID, patientAuthModeQueryResponse, callback) {
      let postBody = patientAuthModeQueryResponse;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05UsersAuthOnFetchModesPost_0");
      }
      // verify the required parameter 'X_HIP_ID' is set
      if (X_HIP_ID === undefined || X_HIP_ID === null) {
        throw new Error("Missing the required parameter 'X_HIP_ID' when calling v05UsersAuthOnFetchModesPost_0");
      }
      // verify the required parameter 'X_HIU_ID' is set
      if (X_HIU_ID === undefined || X_HIU_ID === null) {
        throw new Error("Missing the required parameter 'X_HIU_ID' when calling v05UsersAuthOnFetchModesPost_0");
      }
      // verify the required parameter 'patientAuthModeQueryResponse' is set
      if (patientAuthModeQueryResponse === undefined || patientAuthModeQueryResponse === null) {
        throw new Error("Missing the required parameter 'patientAuthModeQueryResponse' when calling v05UsersAuthOnFetchModesPost_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-HIP-ID': X_HIP_ID,
        'X-HIU-ID': X_HIU_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/users/auth/on-fetch-modes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05UsersAuthOnInitPost_0 operation.
     * @callback module:api/CmFacingApi~v05UsersAuthOnInitPost_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Response to user authentication initialization from HIP
     * If the patient's id is valid, CM will return a transactionId as initialization of user auth. If the request is valid, then 'auth.mode' will convey how the authentication should be done. The authentication can be *mediated* or *direct*. For mediated authentication modes, HIP or HIU is epected to send over relevant code (OTP/token) or demographic info via subsequent API call to /auth/confirm. for direct authentication case, CM will notify requester through/users/auth/notify API.     1. **auth.mode** conveys whats the mode of authentication is, and what is expected from HIP/HIU in the subsequent /auth/confirm API call. Possible values        1. MOBILE_OTP - auth via OTP to registered mobile. Mediated.        2. AADHAAR_OTP - auth initiated with Aadhaar with OTP. Mediated.        3. DEMOGRAPHICS - auth initiated with demographic verification       4. DIRECT - for authentication directly with the patient. e.g. Mobile App, SMS. In this case, the HIP/HIU is not expected to call subsequent /auth/confirm call. CM will do direct authentication with the User (e.g. Mobile App, SMS etc) and will notify requester   2. **meta.expiry** conveys the expiry time of the token and the authentication session   3. **NOTE**, only one of **X-HIP-ID** or **X-HIU-ID** will be sent as part of header, not both.                         The error section in the body, represents the potential errors that may have occurred. Possible reasons:   1. Patient id is invalid 
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {String} X_HIP_ID Identifier of the health information provider to which the request was intended.
     * @param {String} X_HIU_ID Identifier of the health information user to which the request was intended.
     * @param {module:model/PatientAuthInitResponse} patientAuthInitResponse 
     * @param {module:api/CmFacingApi~v05UsersAuthOnInitPost_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    v05UsersAuthOnInitPost_0(authorization, X_HIP_ID, X_HIU_ID, patientAuthInitResponse, callback) {
      let postBody = patientAuthInitResponse;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05UsersAuthOnInitPost_0");
      }
      // verify the required parameter 'X_HIP_ID' is set
      if (X_HIP_ID === undefined || X_HIP_ID === null) {
        throw new Error("Missing the required parameter 'X_HIP_ID' when calling v05UsersAuthOnInitPost_0");
      }
      // verify the required parameter 'X_HIU_ID' is set
      if (X_HIU_ID === undefined || X_HIU_ID === null) {
        throw new Error("Missing the required parameter 'X_HIU_ID' when calling v05UsersAuthOnInitPost_0");
      }
      // verify the required parameter 'patientAuthInitResponse' is set
      if (patientAuthInitResponse === undefined || patientAuthInitResponse === null) {
        throw new Error("Missing the required parameter 'patientAuthInitResponse' when calling v05UsersAuthOnInitPost_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-HIP-ID': X_HIP_ID,
        'X-HIU-ID': X_HIU_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/users/auth/on-init', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
