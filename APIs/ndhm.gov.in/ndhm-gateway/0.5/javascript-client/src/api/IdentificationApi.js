/**
 * Gateway
 * Gateway is the hub that routes/orchestrates the interaction between consent managers and API bridges. There are 5 categories of APIs; discovery, link, consent flow, data flow and  monitoring. To reflect the consumers of APIs, the above apis are also categorized under cm facing, hiu facing and hip facing  
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import PatientIdentificationRequest from '../model/PatientIdentificationRequest';
import PatientIdentificationResponse from '../model/PatientIdentificationResponse';

/**
* Identification service.
* @module api/IdentificationApi
* @version 0.5
*/
export default class IdentificationApi {

    /**
    * Constructs a new IdentificationApi. 
    * @alias module:api/IdentificationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v05PatientsFindPost operation.
     * @callback module:api/IdentificationApi~v05PatientsFindPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Identify a patient by her consent-manager user-id
     * This API is meant for identify to patient given her consent-manager-user-id 
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {String} X_CM_ID Suffix of the consent manager to which the request was intended.
     * @param {module:model/PatientIdentificationRequest} patientIdentificationRequest 
     * @param {module:api/IdentificationApi~v05PatientsFindPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05PatientsFindPost(authorization, X_CM_ID, patientIdentificationRequest, callback) {
      let postBody = patientIdentificationRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05PatientsFindPost");
      }
      // verify the required parameter 'X_CM_ID' is set
      if (X_CM_ID === undefined || X_CM_ID === null) {
        throw new Error("Missing the required parameter 'X_CM_ID' when calling v05PatientsFindPost");
      }
      // verify the required parameter 'patientIdentificationRequest' is set
      if (patientIdentificationRequest === undefined || patientIdentificationRequest === null) {
        throw new Error("Missing the required parameter 'patientIdentificationRequest' when calling v05PatientsFindPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-CM-ID': X_CM_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/patients/find', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05PatientsOnFindPost operation.
     * @callback module:api/IdentificationApi~v05PatientsOnFindPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Identification result for a consent-manager user-id
     * If a patient is found then patient.name contains the patients name.  Otherwise, patient is not provided, and possibly error is raised for invalid requests Note in addition to the \"Authorization\" header, one of the following headers must be specified 1. specify **X-HIU-ID** if the requester is HIU (identified from /find requester.id) 2. specify **X-HIP-ID** if the requester is HIP (identified from /find requester.id) 
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {module:model/PatientIdentificationResponse} patientIdentificationResponse 
     * @param {module:api/IdentificationApi~v05PatientsOnFindPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05PatientsOnFindPost(authorization, patientIdentificationResponse, callback) {
      let postBody = patientIdentificationResponse;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05PatientsOnFindPost");
      }
      // verify the required parameter 'patientIdentificationResponse' is set
      if (patientIdentificationResponse === undefined || patientIdentificationResponse === null) {
        throw new Error("Missing the required parameter 'patientIdentificationResponse' when calling v05PatientsOnFindPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/patients/on-find', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
