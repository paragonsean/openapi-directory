/**
 * Gateway
 * Gateway is the hub that routes/orchestrates the interaction between consent managers and API bridges. There are 5 categories of APIs; discovery, link, consent flow, data flow and  monitoring. To reflect the consumers of APIs, the above apis are also categorized under cm facing, hiu facing and hip facing  
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import HIPConsentNotificationResponse from '../model/HIPConsentNotificationResponse';
import HIPHealthInformationRequestAcknowledgement from '../model/HIPHealthInformationRequestAcknowledgement';
import HealthInformationNotification from '../model/HealthInformationNotification';
import PatientAuthConfirmRequest from '../model/PatientAuthConfirmRequest';
import PatientAuthInitRequest from '../model/PatientAuthInitRequest';
import PatientAuthModeQueryRequest from '../model/PatientAuthModeQueryRequest';
import PatientAuthNotificationAcknowledgement from '../model/PatientAuthNotificationAcknowledgement';
import PatientCareContextLinkRequest from '../model/PatientCareContextLinkRequest';
import PatientLinkReferenceResult from '../model/PatientLinkReferenceResult';
import PatientLinkResult from '../model/PatientLinkResult';
import PatientSMSNotifcationRequest from '../model/PatientSMSNotifcationRequest';

/**
* HipFacing service.
* @module api/HipFacingApi
* @version 0.5
*/
export default class HipFacingApi {

    /**
    * Constructs a new HipFacingApi. 
    * @alias module:api/HipFacingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v05ConsentsHipOnNotifyPost_0 operation.
     * @callback module:api/HipFacingApi~v05ConsentsHipOnNotifyPost_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Consent notification
     * This API is called by HIP as acknowledgement to notification of consents, in cases of consent revocation and expiration.  
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {String} X_CM_ID Suffix of the consent manager to which the request was intended.
     * @param {module:model/HIPConsentNotificationResponse} hIPConsentNotificationResponse 
     * @param {module:api/HipFacingApi~v05ConsentsHipOnNotifyPost_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    v05ConsentsHipOnNotifyPost_0(authorization, X_CM_ID, hIPConsentNotificationResponse, callback) {
      let postBody = hIPConsentNotificationResponse;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05ConsentsHipOnNotifyPost_0");
      }
      // verify the required parameter 'X_CM_ID' is set
      if (X_CM_ID === undefined || X_CM_ID === null) {
        throw new Error("Missing the required parameter 'X_CM_ID' when calling v05ConsentsHipOnNotifyPost_0");
      }
      // verify the required parameter 'hIPConsentNotificationResponse' is set
      if (hIPConsentNotificationResponse === undefined || hIPConsentNotificationResponse === null) {
        throw new Error("Missing the required parameter 'hIPConsentNotificationResponse' when calling v05ConsentsHipOnNotifyPost_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-CM-ID': X_CM_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/consents/hip/on-notify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05HealthInformationHipOnRequestPost_0 operation.
     * @callback module:api/HipFacingApi~v05HealthInformationHipOnRequestPost_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Health information data request
     * API called by HIP to acknowledge Health information request receipt. Either the **hiRequest** or **error** must be specified. **hiRequest** element returns the same transactionId as before with a status indicating that the request is acknowledged.   
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {String} X_CM_ID Suffix of the consent manager to which the request was intended.
     * @param {module:model/HIPHealthInformationRequestAcknowledgement} hIPHealthInformationRequestAcknowledgement 
     * @param {module:api/HipFacingApi~v05HealthInformationHipOnRequestPost_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    v05HealthInformationHipOnRequestPost_0(authorization, X_CM_ID, hIPHealthInformationRequestAcknowledgement, callback) {
      let postBody = hIPHealthInformationRequestAcknowledgement;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05HealthInformationHipOnRequestPost_0");
      }
      // verify the required parameter 'X_CM_ID' is set
      if (X_CM_ID === undefined || X_CM_ID === null) {
        throw new Error("Missing the required parameter 'X_CM_ID' when calling v05HealthInformationHipOnRequestPost_0");
      }
      // verify the required parameter 'hIPHealthInformationRequestAcknowledgement' is set
      if (hIPHealthInformationRequestAcknowledgement === undefined || hIPHealthInformationRequestAcknowledgement === null) {
        throw new Error("Missing the required parameter 'hIPHealthInformationRequestAcknowledgement' when calling v05HealthInformationHipOnRequestPost_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-CM-ID': X_CM_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/health-information/hip/on-request', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05HealthInformationNotifyPost_0 operation.
     * @callback module:api/HipFacingApi~v05HealthInformationNotifyPost_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Notifications corresponding to events during data flow
     * API called by HIU and HIP during data-transfer.  1. HIP on transfer of data would send **sessionStatus** - one of [TRANSFERRED, FAILED] 2. HIP would also send **hiStatus** for each *careContextReference* - on of [DELIVERED, ERRORED] 3. HIU on receipt of data would send **sessionStatus** - one of [TRANSFERRED, FAILED]. For example, FAILED when if data was not sent or if invalid data was sent 4. HIU would also send **hiStatus** for each *careContextReference* - one of [OK, ERRORED]  
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {String} X_CM_ID Suffix of the consent manager to which the request was intended.
     * @param {module:model/HealthInformationNotification} healthInformationNotification 
     * @param {module:api/HipFacingApi~v05HealthInformationNotifyPost_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    v05HealthInformationNotifyPost_0(authorization, X_CM_ID, healthInformationNotification, callback) {
      let postBody = healthInformationNotification;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05HealthInformationNotifyPost_0");
      }
      // verify the required parameter 'X_CM_ID' is set
      if (X_CM_ID === undefined || X_CM_ID === null) {
        throw new Error("Missing the required parameter 'X_CM_ID' when calling v05HealthInformationNotifyPost_0");
      }
      // verify the required parameter 'healthInformationNotification' is set
      if (healthInformationNotification === undefined || healthInformationNotification === null) {
        throw new Error("Missing the required parameter 'healthInformationNotification' when calling v05HealthInformationNotifyPost_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-CM-ID': X_CM_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/health-information/notify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05LinksLinkAddContextsPost_0 operation.
     * @callback module:api/HipFacingApi~v05LinksLinkAddContextsPost_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API for HIP initiated care-context linking for patient
     * API to submit care-context to CM for HIP initiated linking. The API must accompany the \"accessToken\" fetched in the users/auth process.     1. subsequent usage for accessToken may be invalid if it was meant for one-time usage or if it expired 
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {String} X_CM_ID Suffix of the consent manager to which the request was intended.
     * @param {module:model/PatientCareContextLinkRequest} patientCareContextLinkRequest 
     * @param {module:api/HipFacingApi~v05LinksLinkAddContextsPost_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    v05LinksLinkAddContextsPost_0(authorization, X_CM_ID, patientCareContextLinkRequest, callback) {
      let postBody = patientCareContextLinkRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05LinksLinkAddContextsPost_0");
      }
      // verify the required parameter 'X_CM_ID' is set
      if (X_CM_ID === undefined || X_CM_ID === null) {
        throw new Error("Missing the required parameter 'X_CM_ID' when calling v05LinksLinkAddContextsPost_0");
      }
      // verify the required parameter 'patientCareContextLinkRequest' is set
      if (patientCareContextLinkRequest === undefined || patientCareContextLinkRequest === null) {
        throw new Error("Missing the required parameter 'patientCareContextLinkRequest' when calling v05LinksLinkAddContextsPost_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-CM-ID': X_CM_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/links/link/add-contexts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05LinksLinkOnConfirmPost_0 operation.
     * @callback module:api/HipFacingApi~v05LinksLinkOnConfirmPost_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Token authenticated by HIP, indicating completion of linkage of care-contexts
     * Returns a list of linked care contexts with patient reference number.   1. **Validated and linked account reference number**   2. **Validated that the token sent from Consent Manager is same as the one generated by HIP**   3. **Verified that same Consent Manager which made the link request is sending the token**   4. **Results of unmasked linked care contexts with patient reference number** 
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {String} X_CM_ID Suffix of the consent manager to which the request was intended.
     * @param {module:model/PatientLinkResult} patientLinkResult 
     * @param {module:api/HipFacingApi~v05LinksLinkOnConfirmPost_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    v05LinksLinkOnConfirmPost_0(authorization, X_CM_ID, patientLinkResult, callback) {
      let postBody = patientLinkResult;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05LinksLinkOnConfirmPost_0");
      }
      // verify the required parameter 'X_CM_ID' is set
      if (X_CM_ID === undefined || X_CM_ID === null) {
        throw new Error("Missing the required parameter 'X_CM_ID' when calling v05LinksLinkOnConfirmPost_0");
      }
      // verify the required parameter 'patientLinkResult' is set
      if (patientLinkResult === undefined || patientLinkResult === null) {
        throw new Error("Missing the required parameter 'patientLinkResult' when calling v05LinksLinkOnConfirmPost_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-CM-ID': X_CM_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/links/link/on-confirm', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05LinksLinkOnInitPost_0 operation.
     * @callback module:api/HipFacingApi~v05LinksLinkOnInitPost_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Response to patient's care context link request
     * Result of patient care-context link request from HIP end. This happens in context of previous discovery of patient found at HIP end, therefore the link requests ought to be in reference to the patient reference and care-context references previously returned by the HIP. The correlation of discovery and link request is maintained through the transactionId. HIP should have   1. **Validated transactionId in the request to check whether there was a discovery done previously, and the link request corresponds to returned patient care care context references**   2. **Before returning the response, HIP should have sent an authentication request to the patient(eg: OTP verification)**   3. **HIP should communicate the mode of authentication of a successful request**   4. **HIP subsequently should expect the token passed via /link/confirm against the link.referenceNumber passed in this call**                        The error section in the body, represents the potential errors that may have occurred. Possible reasons:   1. **Patient reference number is invalid**   2. **Care context reference numbers are invalid** 
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {String} X_CM_ID Suffix of the consent manager to which the request was intended.
     * @param {module:model/PatientLinkReferenceResult} patientLinkReferenceResult 
     * @param {module:api/HipFacingApi~v05LinksLinkOnInitPost_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    v05LinksLinkOnInitPost_0(authorization, X_CM_ID, patientLinkReferenceResult, callback) {
      let postBody = patientLinkReferenceResult;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05LinksLinkOnInitPost_0");
      }
      // verify the required parameter 'X_CM_ID' is set
      if (X_CM_ID === undefined || X_CM_ID === null) {
        throw new Error("Missing the required parameter 'X_CM_ID' when calling v05LinksLinkOnInitPost_0");
      }
      // verify the required parameter 'patientLinkReferenceResult' is set
      if (patientLinkReferenceResult === undefined || patientLinkReferenceResult === null) {
        throw new Error("Missing the required parameter 'patientLinkReferenceResult' when calling v05LinksLinkOnInitPost_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-CM-ID': X_CM_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/links/link/on-init', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05PatientsSmsNotifyPost operation.
     * @callback module:api/HipFacingApi~v05PatientsSmsNotifyPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API for HIP to send SMS notifications to patients
     * API to send SMS notifications to patient with custom deeplink. 
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {String} X_CM_ID Suffix of the consent manager to which the request was intended.
     * @param {module:model/PatientSMSNotifcationRequest} patientSMSNotifcationRequest 
     * @param {module:api/HipFacingApi~v05PatientsSmsNotifyPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05PatientsSmsNotifyPost(authorization, X_CM_ID, patientSMSNotifcationRequest, callback) {
      let postBody = patientSMSNotifcationRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05PatientsSmsNotifyPost");
      }
      // verify the required parameter 'X_CM_ID' is set
      if (X_CM_ID === undefined || X_CM_ID === null) {
        throw new Error("Missing the required parameter 'X_CM_ID' when calling v05PatientsSmsNotifyPost");
      }
      // verify the required parameter 'patientSMSNotifcationRequest' is set
      if (patientSMSNotifcationRequest === undefined || patientSMSNotifcationRequest === null) {
        throw new Error("Missing the required parameter 'patientSMSNotifcationRequest' when calling v05PatientsSmsNotifyPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-CM-ID': X_CM_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/patients/sms/notify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05UsersAuthConfirmPost_0 operation.
     * @callback module:api/HipFacingApi~v05UsersAuthConfirmPost_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Confirmation request sending token, otp or other authentication details from HIP/HIU for confirmation
     * This API is called by HIP/HIUs to confirm authentication of users. The transactionId returned by the previous callback API /users/auth/on-init must be sent. If Authentication is successful the callback API will send an \"access token\" for subsequent purpose specific API calls. Note only **credential.authCode** or **credential.demographic** should be sent   1. demographic details are only required for  demographic auth as of now.    2. demographic details are required only in MEDIATED cases and if the **auth.mode** so demands. e.g. if **auth.mode** is DEMOGRAPHICS. Usually for demographic authentication, the name, gender and DOB must be exactly as specified in User Account.   3. demographic.identifier is optional, however maybe required if authentication so mandates.    4. credential.authCode is required for other MEDIATED authentication like MOBILE_OTP, AADHAAR_OTP.  
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {String} X_CM_ID Suffix of the consent manager to which the request was intended.
     * @param {module:model/PatientAuthConfirmRequest} patientAuthConfirmRequest 
     * @param {module:api/HipFacingApi~v05UsersAuthConfirmPost_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    v05UsersAuthConfirmPost_0(authorization, X_CM_ID, patientAuthConfirmRequest, callback) {
      let postBody = patientAuthConfirmRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05UsersAuthConfirmPost_0");
      }
      // verify the required parameter 'X_CM_ID' is set
      if (X_CM_ID === undefined || X_CM_ID === null) {
        throw new Error("Missing the required parameter 'X_CM_ID' when calling v05UsersAuthConfirmPost_0");
      }
      // verify the required parameter 'patientAuthConfirmRequest' is set
      if (patientAuthConfirmRequest === undefined || patientAuthConfirmRequest === null) {
        throw new Error("Missing the required parameter 'patientAuthConfirmRequest' when calling v05UsersAuthConfirmPost_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-CM-ID': X_CM_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/users/auth/confirm', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05UsersAuthFetchModesPost_0 operation.
     * @callback module:api/HipFacingApi~v05UsersAuthFetchModesPost_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a patient's authentication modes relevant to specified purpose
     * This API is meant for identify supported authentication modes for a patient given a specific purpose 
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {String} X_CM_ID Suffix of the consent manager to which the request was intended.
     * @param {module:model/PatientAuthModeQueryRequest} patientAuthModeQueryRequest 
     * @param {module:api/HipFacingApi~v05UsersAuthFetchModesPost_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    v05UsersAuthFetchModesPost_0(authorization, X_CM_ID, patientAuthModeQueryRequest, callback) {
      let postBody = patientAuthModeQueryRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05UsersAuthFetchModesPost_0");
      }
      // verify the required parameter 'X_CM_ID' is set
      if (X_CM_ID === undefined || X_CM_ID === null) {
        throw new Error("Missing the required parameter 'X_CM_ID' when calling v05UsersAuthFetchModesPost_0");
      }
      // verify the required parameter 'patientAuthModeQueryRequest' is set
      if (patientAuthModeQueryRequest === undefined || patientAuthModeQueryRequest === null) {
        throw new Error("Missing the required parameter 'patientAuthModeQueryRequest' when calling v05UsersAuthFetchModesPost_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-CM-ID': X_CM_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/users/auth/fetch-modes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05UsersAuthInitPost_0 operation.
     * @callback module:api/HipFacingApi~v05UsersAuthInitPost_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initialize authentication from HIP
     * This API is called by HIPs to initiate authentication of users. A transactionId is retuned by the corresponding callback API for confirmation of user auth. 
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {String} X_CM_ID Suffix of the consent manager to which the request was intended.
     * @param {module:model/PatientAuthInitRequest} patientAuthInitRequest 
     * @param {module:api/HipFacingApi~v05UsersAuthInitPost_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    v05UsersAuthInitPost_0(authorization, X_CM_ID, patientAuthInitRequest, callback) {
      let postBody = patientAuthInitRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05UsersAuthInitPost_0");
      }
      // verify the required parameter 'X_CM_ID' is set
      if (X_CM_ID === undefined || X_CM_ID === null) {
        throw new Error("Missing the required parameter 'X_CM_ID' when calling v05UsersAuthInitPost_0");
      }
      // verify the required parameter 'patientAuthInitRequest' is set
      if (patientAuthInitRequest === undefined || patientAuthInitRequest === null) {
        throw new Error("Missing the required parameter 'patientAuthInitRequest' when calling v05UsersAuthInitPost_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-CM-ID': X_CM_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/users/auth/init', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05UsersAuthOnNotifyPost_0 operation.
     * @callback module:api/HipFacingApi~v05UsersAuthOnNotifyPost_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * callback API by HIU/HIPs as acknowledgement of auth notification
     * This API is called by HIU/HIPs to confirm acknowledgement for receipt of auth notification is case of DIRECT authentication.  
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {String} X_CM_ID Suffix of the consent manager to which the request was intended.
     * @param {module:model/PatientAuthNotificationAcknowledgement} patientAuthNotificationAcknowledgement 
     * @param {module:api/HipFacingApi~v05UsersAuthOnNotifyPost_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    v05UsersAuthOnNotifyPost_0(authorization, X_CM_ID, patientAuthNotificationAcknowledgement, callback) {
      let postBody = patientAuthNotificationAcknowledgement;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05UsersAuthOnNotifyPost_0");
      }
      // verify the required parameter 'X_CM_ID' is set
      if (X_CM_ID === undefined || X_CM_ID === null) {
        throw new Error("Missing the required parameter 'X_CM_ID' when calling v05UsersAuthOnNotifyPost_0");
      }
      // verify the required parameter 'patientAuthNotificationAcknowledgement' is set
      if (patientAuthNotificationAcknowledgement === undefined || patientAuthNotificationAcknowledgement === null) {
        throw new Error("Missing the required parameter 'patientAuthNotificationAcknowledgement' when calling v05UsersAuthOnNotifyPost_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-CM-ID': X_CM_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/users/auth/on-notify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
