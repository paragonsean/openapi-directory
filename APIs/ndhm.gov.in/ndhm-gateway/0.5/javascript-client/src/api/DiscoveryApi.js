/**
 * Gateway
 * Gateway is the hub that routes/orchestrates the interaction between consent managers and API bridges. There are 5 categories of APIs; discovery, link, consent flow, data flow and  monitoring. To reflect the consumers of APIs, the above apis are also categorized under cm facing, hiu facing and hip facing  
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import PatientDiscoveryRequest from '../model/PatientDiscoveryRequest';
import PatientDiscoveryResult from '../model/PatientDiscoveryResult';

/**
* Discovery service.
* @module api/DiscoveryApi
* @version 0.5
*/
export default class DiscoveryApi {

    /**
    * Constructs a new DiscoveryApi. 
    * @alias module:api/DiscoveryApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v05CareContextsDiscoverPost operation.
     * @callback module:api/DiscoveryApi~v05CareContextsDiscoverPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Discover patient's accounts
     * Request for patient care context discover, made by CM for a specific HIP. It is expected that HIP will subsequently return either zero or one patient record with (potentially masked) associated care contexts   1. **At least one of the verified identifier matches**   2. **Name (fuzzy), gender matches**   3. **If YoB was given, age band(+-2) matches**   4. **If unverified identifiers were given, one of them matches**   5. **If more than one patient records would be found after aforementioned steps, then patient who matches most verified and unverified identifiers would be returned.**   6. **If there would be still more than one patients (after ranking) error would be returned**   7. **Intended HIP should be able to resolve and identify results returned in the subsequent link confirmation request via the specified transactionId**   8. **Intended HIP should store the discovery results with transactionId and care contexts discovered for subsequent link initiation** 
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {String} X_HIP_ID Identifier of the health information provider to which the request was intended.
     * @param {module:model/PatientDiscoveryRequest} patientDiscoveryRequest 
     * @param {module:api/DiscoveryApi~v05CareContextsDiscoverPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05CareContextsDiscoverPost(authorization, X_HIP_ID, patientDiscoveryRequest, callback) {
      let postBody = patientDiscoveryRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05CareContextsDiscoverPost");
      }
      // verify the required parameter 'X_HIP_ID' is set
      if (X_HIP_ID === undefined || X_HIP_ID === null) {
        throw new Error("Missing the required parameter 'X_HIP_ID' when calling v05CareContextsDiscoverPost");
      }
      // verify the required parameter 'patientDiscoveryRequest' is set
      if (patientDiscoveryRequest === undefined || patientDiscoveryRequest === null) {
        throw new Error("Missing the required parameter 'patientDiscoveryRequest' when calling v05CareContextsDiscoverPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-HIP-ID': X_HIP_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/care-contexts/discover', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05CareContextsOnDiscoverPost operation.
     * @callback module:api/DiscoveryApi~v05CareContextsOnDiscoverPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Response to patient's account discovery request
     * Result of patient care-context discovery request at HIP end. If a matching patient found with zero or more care contexts associated, it is specified as result attribute. If the prior discovery request, resulted in errors then it is specified in the error attribute. Reasons of errors can be    1. **more than one definitive match for the given request**    2. **no verified identifer was specified** 
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {String} X_CM_ID Suffix of the consent manager to which the request was intended.
     * @param {module:model/PatientDiscoveryResult} patientDiscoveryResult 
     * @param {module:api/DiscoveryApi~v05CareContextsOnDiscoverPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05CareContextsOnDiscoverPost(authorization, X_CM_ID, patientDiscoveryResult, callback) {
      let postBody = patientDiscoveryResult;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05CareContextsOnDiscoverPost");
      }
      // verify the required parameter 'X_CM_ID' is set
      if (X_CM_ID === undefined || X_CM_ID === null) {
        throw new Error("Missing the required parameter 'X_CM_ID' when calling v05CareContextsOnDiscoverPost");
      }
      // verify the required parameter 'patientDiscoveryResult' is set
      if (patientDiscoveryResult === undefined || patientDiscoveryResult === null) {
        throw new Error("Missing the required parameter 'patientDiscoveryResult' when calling v05CareContextsOnDiscoverPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-CM-ID': X_CM_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/care-contexts/on-discover', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
