/**
 * Gateway
 * Gateway is the hub that routes/orchestrates the interaction between consent managers and API bridges. There are 5 categories of APIs; discovery, link, consent flow, data flow and  monitoring. To reflect the consumers of APIs, the above apis are also categorized under cm facing, hiu facing and hip facing  
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import ServiceProfileResponse from '../model/ServiceProfileResponse';

/**
* Services service.
* @module api/ServicesApi
* @version 0.5
*/
export default class ServicesApi {

    /**
    * Constructs a new ServicesApi. 
    * @alias module:api/ServicesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v05HiServicesServiceIdGet operation.
     * @callback module:api/ServicesApi~v05HiServicesServiceIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceProfileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get bridge service details/profile by the serviceId provided.
     * This API is meant for displaying the bridge service details by the serviceId provided . 
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {String} serviceId 
     * @param {module:api/ServicesApi~v05HiServicesServiceIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceProfileResponse}
     */
    v05HiServicesServiceIdGet(authorization, serviceId, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05HiServicesServiceIdGet");
      }
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling v05HiServicesServiceIdGet");
      }

      let pathParams = {
        'service-id': serviceId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = ServiceProfileResponse;
      return this.apiClient.callApi(
        '/v0.5/hi-services/{service-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
