/**
 * Gateway
 * Gateway is the hub that routes/orchestrates the interaction between consent managers and API bridges. There are 5 categories of APIs; discovery, link, consent flow, data flow and  monitoring. To reflect the consumers of APIs, the above apis are also categorized under cm facing, hiu facing and hip facing  
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import ShareProfileRequest from '../model/ShareProfileRequest';
import ShareProfileResult from '../model/ShareProfileResult';

/**
* Profile service.
* @module api/ProfileApi
* @version 0.5
*/
export default class ProfileApi {

    /**
    * Constructs a new ProfileApi. 
    * @alias module:api/ProfileApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v05PatientsProfileOnSharePost operation.
     * @callback module:api/ProfileApi~v05PatientsProfileOnSharePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Response to patient's share profile request
     * Result of patient share profile request at HIP end. 
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {String} X_CM_ID Suffix of the consent manager to which the request was intended.
     * @param {module:model/ShareProfileResult} shareProfileResult 
     * @param {module:api/ProfileApi~v05PatientsProfileOnSharePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05PatientsProfileOnSharePost(authorization, X_CM_ID, shareProfileResult, callback) {
      let postBody = shareProfileResult;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05PatientsProfileOnSharePost");
      }
      // verify the required parameter 'X_CM_ID' is set
      if (X_CM_ID === undefined || X_CM_ID === null) {
        throw new Error("Missing the required parameter 'X_CM_ID' when calling v05PatientsProfileOnSharePost");
      }
      // verify the required parameter 'shareProfileResult' is set
      if (shareProfileResult === undefined || shareProfileResult === null) {
        throw new Error("Missing the required parameter 'shareProfileResult' when calling v05PatientsProfileOnSharePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-CM-ID': X_CM_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/patients/profile/on-share', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05PatientsProfileSharePost operation.
     * @callback module:api/ProfileApi~v05PatientsProfileSharePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Share patient profile details
     * Request for sharing patient's profile details to HIP 
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {String} X_HIP_ID Identifier of the health information provider to which the request was intended.
     * @param {module:model/ShareProfileRequest} shareProfileRequest 
     * @param {module:api/ProfileApi~v05PatientsProfileSharePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05PatientsProfileSharePost(authorization, X_HIP_ID, shareProfileRequest, opts, callback) {
      opts = opts || {};
      let postBody = shareProfileRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05PatientsProfileSharePost");
      }
      // verify the required parameter 'X_HIP_ID' is set
      if (X_HIP_ID === undefined || X_HIP_ID === null) {
        throw new Error("Missing the required parameter 'X_HIP_ID' when calling v05PatientsProfileSharePost");
      }
      // verify the required parameter 'shareProfileRequest' is set
      if (shareProfileRequest === undefined || shareProfileRequest === null) {
        throw new Error("Missing the required parameter 'shareProfileRequest' when calling v05PatientsProfileSharePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-HIP-ID': X_HIP_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      let basePaths = ['https://your-hrp-server.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v0.5/patients/profile/share', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
