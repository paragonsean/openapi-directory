/*
 * Gateway
 * Gateway is the hub that routes/orchestrates the interaction between consent managers and API bridges. There are 5 categories of APIs; discovery, link, consent flow, data flow and  monitoring. To reflect the consumers of APIs, the above apis are also categorized under cm facing, hiu facing and hip facing  
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ConsentArtefactResponse;
import org.openapitools.client.model.ConsentFetchRequest;
import org.openapitools.client.model.ConsentRequest;
import org.openapitools.client.model.ConsentRequestInitResponse;
import org.openapitools.client.model.ConsentRequestStatusRequest;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.HIPConsentNotification;
import org.openapitools.client.model.HIPConsentNotificationResponse;
import org.openapitools.client.model.HIUConsentNotificationEvent;
import org.openapitools.client.model.HIUConsentNotificationResponse;
import org.openapitools.client.model.HIUConsentRequestStatus;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ConsentFlowApi
 */
@Disabled
public class ConsentFlowApiTest {

    private final ConsentFlowApi api = new ConsentFlowApi();

    /**
     * Create consent request
     *
     * Creates a consent request to get data about a patient by HIU user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v05ConsentRequestsInitPostTest() throws ApiException {
        String authorization = null;
        String X_CM_ID = null;
        ConsentRequest consentRequest = null;
        api.v05ConsentRequestsInitPost(authorization, X_CM_ID, consentRequest);
        // TODO: test validations
    }

    /**
     * Response to consent request
     *
     * Result of consent request creation for a patient. **consentRequest.id** represents the consentrequest id created by CM. The result must contain either **consentRequest** or the **error** caused. &lt;br/&gt;   Reasons for error may be   * Invalid references (e.g patient id, hiu id), purpose, hiTypes, ranges, persmission 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v05ConsentRequestsOnInitPostTest() throws ApiException {
        String authorization = null;
        String X_HIU_ID = null;
        ConsentRequestInitResponse consentRequestInitResponse = null;
        api.v05ConsentRequestsOnInitPost(authorization, X_HIU_ID, consentRequestInitResponse);
        // TODO: test validations
    }

    /**
     * Result of consent request status
     *
     * Result of consent request done previously. Status of request can be GRANTED,  DENIED, EXPIRED. If the request was GRANTED, then  
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v05ConsentRequestsOnStatusPostTest() throws ApiException {
        String authorization = null;
        String X_HIU_ID = null;
        HIUConsentRequestStatus hiUConsentRequestStatus = null;
        api.v05ConsentRequestsOnStatusPost(authorization, X_HIU_ID, hiUConsentRequestStatus);
        // TODO: test validations
    }

    /**
     * Get consent request status
     *
     * Get status of consent request done previously
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v05ConsentRequestsStatusPostTest() throws ApiException {
        String authorization = null;
        String X_CM_ID = null;
        ConsentRequestStatusRequest consentRequestStatusRequest = null;
        api.v05ConsentRequestsStatusPost(authorization, X_CM_ID, consentRequestStatusRequest);
        // TODO: test validations
    }

    /**
     * Get consent artefact
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v05ConsentsFetchPostTest() throws ApiException {
        String authorization = null;
        String X_CM_ID = null;
        ConsentFetchRequest consentFetchRequest = null;
        api.v05ConsentsFetchPost(authorization, X_CM_ID, consentFetchRequest);
        // TODO: test validations
    }

    /**
     * Consent notification
     *
     * Notification of consents to health information providers consent request granted, consent revoked, consent expired. Only the GRANTED, REVOKED and EXPIRED status notifications will be sent to HIP.   1. If consent is granted, status&#x3D;GRANTED, then consentDetail contains the consent artefact details and signature is available.    2. If consent is revoked, then status&#x3D;REVOKED, and consentId specifes which consent artefact is revoked.    3. If the consent has expired, then status&#x3D;EXPIRED, and consentId specifies which consent artefact has expired. Note, this is also responsibility of the HIP to keep track of consent expiry. Any data request on expired consent artefact must not be done.  
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v05ConsentsHipNotifyPostTest() throws ApiException {
        String authorization = null;
        String X_HIP_ID = null;
        HIPConsentNotification hiPConsentNotification = null;
        api.v05ConsentsHipNotifyPost(authorization, X_HIP_ID, hiPConsentNotification);
        // TODO: test validations
    }

    /**
     * Consent notification
     *
     * This API is called by HIP as acknowledgement to notification of consents, in cases of consent revocation and expiration.  
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v05ConsentsHipOnNotifyPostTest() throws ApiException {
        String authorization = null;
        String X_CM_ID = null;
        HIPConsentNotificationResponse hiPConsentNotificationResponse = null;
        api.v05ConsentsHipOnNotifyPost(authorization, X_CM_ID, hiPConsentNotificationResponse);
        // TODO: test validations
    }

    /**
     * Consent notification
     *
     * Health information user will get notified about the consent request granted or denied, consent revoked, consent expired.  1. For consent request grant, status&#x3D;GRANTED, consentRequestId&#x3D;&lt;consent-request-id&gt;, and consentArtefacts is an array of generated consent artefact Ids. 2. For consent request expiry, status&#x3D;EXPIRED, consentRequestId&#x3D;&lt;consent-request-id&gt; 3. For consent request denied, status&#x3D;DENIED, consentRequestId&#x3D;&lt;consent-request-id&gt; 4. For consent revocation, status&#x3D;REVOKED, consentArtefacts is an array of revoked consent artefact ids 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v05ConsentsHiuNotifyPostTest() throws ApiException {
        String authorization = null;
        String X_HIU_ID = null;
        HIUConsentNotificationEvent hiUConsentNotificationEvent = null;
        api.v05ConsentsHiuNotifyPost(authorization, X_HIU_ID, hiUConsentNotificationEvent);
        // TODO: test validations
    }

    /**
     * Consent notification
     *
     * This API is called by HIU as acknowledgement to consent notifications, specifically for cases when consent is REVOKED or EXPIRED. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v05ConsentsHiuOnNotifyPostTest() throws ApiException {
        String authorization = null;
        String X_CM_ID = null;
        HIUConsentNotificationResponse hiUConsentNotificationResponse = null;
        api.v05ConsentsHiuOnNotifyPost(authorization, X_CM_ID, hiUConsentNotificationResponse);
        // TODO: test validations
    }

    /**
     * Result of fetch request for a consent artefact
     *
     * Must contain either consentDetail or error. Possible reason of errors are  1. consentId passed through /fetch is invalid 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v05ConsentsOnFetchPostTest() throws ApiException {
        String authorization = null;
        String X_HIU_ID = null;
        ConsentArtefactResponse consentArtefactResponse = null;
        api.v05ConsentsOnFetchPost(authorization, X_HIU_ID, consentArtefactResponse);
        // TODO: test validations
    }

}
