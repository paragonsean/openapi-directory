/*
 * Gateway
 * Gateway is the hub that routes/orchestrates the interaction between consent managers and API bridges. There are 5 categories of APIs; discovery, link, consent flow, data flow and  monitoring. To reflect the consumers of APIs, the above apis are also categorized under cm facing, hiu facing and hip facing  
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ConsentFetchRequest;
import org.openapitools.client.model.ConsentRequest;
import org.openapitools.client.model.ConsentRequestStatusRequest;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.HIRequest;
import org.openapitools.client.model.HIUConsentNotificationResponse;
import org.openapitools.client.model.HIUSubscriptionNotificationAcknowledgment;
import org.openapitools.client.model.HIUSubscriptionRequestNotificationAcknowledgement;
import org.openapitools.client.model.HealthInformationNotification;
import org.openapitools.client.model.PatientAuthConfirmRequest;
import org.openapitools.client.model.PatientAuthInitRequest;
import org.openapitools.client.model.PatientAuthModeQueryRequest;
import org.openapitools.client.model.PatientAuthNotificationAcknowledgement;
import org.openapitools.client.model.PatientIdentificationRequest;
import org.openapitools.client.model.SubscriptionRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for HiuFacingApi
 */
@Disabled
public class HiuFacingApiTest {

    private final HiuFacingApi api = new HiuFacingApi();

    /**
     * Create consent request
     *
     * Creates a consent request to get data about a patient by HIU user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v05ConsentRequestsInitPost_0Test() throws ApiException {
        String authorization = null;
        String X_CM_ID = null;
        ConsentRequest consentRequest = null;
        api.v05ConsentRequestsInitPost_0(authorization, X_CM_ID, consentRequest);
        // TODO: test validations
    }

    /**
     * Get consent request status
     *
     * Get status of consent request done previously
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v05ConsentRequestsStatusPost_0Test() throws ApiException {
        String authorization = null;
        String X_CM_ID = null;
        ConsentRequestStatusRequest consentRequestStatusRequest = null;
        api.v05ConsentRequestsStatusPost_0(authorization, X_CM_ID, consentRequestStatusRequest);
        // TODO: test validations
    }

    /**
     * Get consent artefact
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v05ConsentsFetchPost_0Test() throws ApiException {
        String authorization = null;
        String X_CM_ID = null;
        ConsentFetchRequest consentFetchRequest = null;
        api.v05ConsentsFetchPost_0(authorization, X_CM_ID, consentFetchRequest);
        // TODO: test validations
    }

    /**
     * Consent notification
     *
     * This API is called by HIU as acknowledgement to consent notifications, specifically for cases when consent is REVOKED or EXPIRED. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v05ConsentsHiuOnNotifyPost_0Test() throws ApiException {
        String authorization = null;
        String X_CM_ID = null;
        HIUConsentNotificationResponse hiUConsentNotificationResponse = null;
        api.v05ConsentsHiuOnNotifyPost_0(authorization, X_CM_ID, hiUConsentNotificationResponse);
        // TODO: test validations
    }

    /**
     * Health information data request
     *
     * Request for Health information against a consent id. CM would generate a transactionId against each consent and pass it as trnasaction context / correlation id to the HIP and also return the same to HIU via /on-request.  
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v05HealthInformationCmRequestPost_0Test() throws ApiException {
        String authorization = null;
        String X_CM_ID = null;
        HIRequest hiRequest = null;
        api.v05HealthInformationCmRequestPost_0(authorization, X_CM_ID, hiRequest);
        // TODO: test validations
    }

    /**
     * Notifications corresponding to events during data flow
     *
     * API called by HIU and HIP during data-transfer.  1. HIP on transfer of data would send **sessionStatus** - one of [TRANSFERRED, FAILED] 2. HIP would also send **hiStatus** for each *careContextReference* - on of [DELIVERED, ERRORED] 3. HIU on receipt of data would send **sessionStatus** - one of [TRANSFERRED, FAILED]. For example, FAILED when if data was not sent or if invalid data was sent 4. HIU would also send **hiStatus** for each *careContextReference* - one of [OK, ERRORED]  
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v05HealthInformationNotifyPost_1Test() throws ApiException {
        String authorization = null;
        String X_CM_ID = null;
        HealthInformationNotification healthInformationNotification = null;
        api.v05HealthInformationNotifyPost_1(authorization, X_CM_ID, healthInformationNotification);
        // TODO: test validations
    }

    /**
     * Identify a patient by her consent-manager user-id
     *
     * This API is meant for identify to patient given her consent-manager-user-id 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v05PatientsFindPost_0Test() throws ApiException {
        String authorization = null;
        String X_CM_ID = null;
        PatientIdentificationRequest patientIdentificationRequest = null;
        api.v05PatientsFindPost_0(authorization, X_CM_ID, patientIdentificationRequest);
        // TODO: test validations
    }

    /**
     * Request for subscription
     *
     * creates a request for subscription. The subscription categories can be for care-contexts linkages or availability of data against existing care-contexts. Note that the requester must have HIU role
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v05SubscriptionRequestsCmInitPost_0Test() throws ApiException {
        String authorization = null;
        String X_CM_ID = null;
        SubscriptionRequest subscriptionRequest = null;
        api.v05SubscriptionRequestsCmInitPost_0(authorization, X_CM_ID, subscriptionRequest);
        // TODO: test validations
    }

    /**
     * Callback API for /subscription-requests/hiu/notify to acknowledge receipt of notification.
     *
     * This API is called by HIU as acknowledgement to subscription request relevant notifications.  
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v05SubscriptionRequestsHiuOnNotifyPost_0Test() throws ApiException {
        String authorization = null;
        String X_CM_ID = null;
        HIUSubscriptionRequestNotificationAcknowledgement hiUSubscriptionRequestNotificationAcknowledgement = null;
        api.v05SubscriptionRequestsHiuOnNotifyPost_0(authorization, X_CM_ID, hiUSubscriptionRequestNotificationAcknowledgement);
        // TODO: test validations
    }

    /**
     * Callback API for /subscriptions/hiu/notify to acknowledge receipt of notification.
     *
     * This API is called by HIU as acknowledgement to consent notifications, specifically for cases when consent is REVOKED or EXPIRED. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v05SubscriptionsHiuOnNotifyPost_0Test() throws ApiException {
        String authorization = null;
        String X_CM_ID = null;
        HIUSubscriptionNotificationAcknowledgment hiUSubscriptionNotificationAcknowledgment = null;
        api.v05SubscriptionsHiuOnNotifyPost_0(authorization, X_CM_ID, hiUSubscriptionNotificationAcknowledgment);
        // TODO: test validations
    }

    /**
     * Confirmation request sending token, otp or other authentication details from HIP/HIU for confirmation
     *
     * This API is called by HIP/HIUs to confirm authentication of users. The transactionId returned by the previous callback API /users/auth/on-init must be sent. If Authentication is successful the callback API will send an \&quot;access token\&quot; for subsequent purpose specific API calls. Note only **credential.authCode** or **credential.demographic** should be sent   1. demographic details are only required for  demographic auth as of now.    2. demographic details are required only in MEDIATED cases and if the **auth.mode** so demands. e.g. if **auth.mode** is DEMOGRAPHICS. Usually for demographic authentication, the name, gender and DOB must be exactly as specified in User Account.   3. demographic.identifier is optional, however maybe required if authentication so mandates.    4. credential.authCode is required for other MEDIATED authentication like MOBILE_OTP, AADHAAR_OTP.  
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v05UsersAuthConfirmPost_1Test() throws ApiException {
        String authorization = null;
        String X_CM_ID = null;
        PatientAuthConfirmRequest patientAuthConfirmRequest = null;
        api.v05UsersAuthConfirmPost_1(authorization, X_CM_ID, patientAuthConfirmRequest);
        // TODO: test validations
    }

    /**
     * Get a patient&#39;s authentication modes relevant to specified purpose
     *
     * This API is meant for identify supported authentication modes for a patient given a specific purpose 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v05UsersAuthFetchModesPost_1Test() throws ApiException {
        String authorization = null;
        String X_CM_ID = null;
        PatientAuthModeQueryRequest patientAuthModeQueryRequest = null;
        api.v05UsersAuthFetchModesPost_1(authorization, X_CM_ID, patientAuthModeQueryRequest);
        // TODO: test validations
    }

    /**
     * Initialize authentication from HIP
     *
     * This API is called by HIPs to initiate authentication of users. A transactionId is retuned by the corresponding callback API for confirmation of user auth. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v05UsersAuthInitPost_1Test() throws ApiException {
        String authorization = null;
        String X_CM_ID = null;
        PatientAuthInitRequest patientAuthInitRequest = null;
        api.v05UsersAuthInitPost_1(authorization, X_CM_ID, patientAuthInitRequest);
        // TODO: test validations
    }

    /**
     * callback API by HIU/HIPs as acknowledgement of auth notification
     *
     * This API is called by HIU/HIPs to confirm acknowledgement for receipt of auth notification is case of DIRECT authentication.  
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v05UsersAuthOnNotifyPost_1Test() throws ApiException {
        String authorization = null;
        String X_CM_ID = null;
        PatientAuthNotificationAcknowledgement patientAuthNotificationAcknowledgement = null;
        api.v05UsersAuthOnNotifyPost_1(authorization, X_CM_ID, patientAuthNotificationAcknowledgement);
        // TODO: test validations
    }

}
