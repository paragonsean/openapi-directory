/*
 * Gateway
 * Gateway is the hub that routes/orchestrates the interaction between consent managers and API bridges. There are 5 categories of APIs; discovery, link, consent flow, data flow and  monitoring. To reflect the consumers of APIs, the above apis are also categorized under cm facing, hiu facing and hip facing  
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.ConsentAcknowledgement;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.RequestReference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * HIUConsentNotificationResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:45.290770-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HIUConsentNotificationResponse {
  public static final String SERIALIZED_NAME_ACKNOWLEDGEMENT = "acknowledgement";
  @SerializedName(SERIALIZED_NAME_ACKNOWLEDGEMENT)
  private List<ConsentAcknowledgement> acknowledgement = new ArrayList<>();

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private Error error;

  public static final String SERIALIZED_NAME_REQUEST_ID = "requestId";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private UUID requestId;

  public static final String SERIALIZED_NAME_RESP = "resp";
  @SerializedName(SERIALIZED_NAME_RESP)
  private RequestReference resp;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public HIUConsentNotificationResponse() {
  }

  public HIUConsentNotificationResponse acknowledgement(List<ConsentAcknowledgement> acknowledgement) {
    this.acknowledgement = acknowledgement;
    return this;
  }

  public HIUConsentNotificationResponse addAcknowledgementItem(ConsentAcknowledgement acknowledgementItem) {
    if (this.acknowledgement == null) {
      this.acknowledgement = new ArrayList<>();
    }
    this.acknowledgement.add(acknowledgementItem);
    return this;
  }

  /**
   * Get acknowledgement
   * @return acknowledgement
   */
  @javax.annotation.Nullable
  public List<ConsentAcknowledgement> getAcknowledgement() {
    return acknowledgement;
  }

  public void setAcknowledgement(List<ConsentAcknowledgement> acknowledgement) {
    this.acknowledgement = acknowledgement;
  }


  public HIUConsentNotificationResponse error(Error error) {
    this.error = error;
    return this;
  }

  /**
   * Get error
   * @return error
   */
  @javax.annotation.Nullable
  public Error getError() {
    return error;
  }

  public void setError(Error error) {
    this.error = error;
  }


  public HIUConsentNotificationResponse requestId(UUID requestId) {
    this.requestId = requestId;
    return this;
  }

  /**
   * a nonce, unique for each HTTP request
   * @return requestId
   */
  @javax.annotation.Nonnull
  public UUID getRequestId() {
    return requestId;
  }

  public void setRequestId(UUID requestId) {
    this.requestId = requestId;
  }


  public HIUConsentNotificationResponse resp(RequestReference resp) {
    this.resp = resp;
    return this;
  }

  /**
   * Get resp
   * @return resp
   */
  @javax.annotation.Nonnull
  public RequestReference getResp() {
    return resp;
  }

  public void setResp(RequestReference resp) {
    this.resp = resp;
  }


  public HIUConsentNotificationResponse timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ
   * @return timestamp
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HIUConsentNotificationResponse hiUConsentNotificationResponse = (HIUConsentNotificationResponse) o;
    return Objects.equals(this.acknowledgement, hiUConsentNotificationResponse.acknowledgement) &&
        Objects.equals(this.error, hiUConsentNotificationResponse.error) &&
        Objects.equals(this.requestId, hiUConsentNotificationResponse.requestId) &&
        Objects.equals(this.resp, hiUConsentNotificationResponse.resp) &&
        Objects.equals(this.timestamp, hiUConsentNotificationResponse.timestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acknowledgement, error, requestId, resp, timestamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HIUConsentNotificationResponse {\n");
    sb.append("    acknowledgement: ").append(toIndentedString(acknowledgement)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    resp: ").append(toIndentedString(resp)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acknowledgement");
    openapiFields.add("error");
    openapiFields.add("requestId");
    openapiFields.add("resp");
    openapiFields.add("timestamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("requestId");
    openapiRequiredFields.add("resp");
    openapiRequiredFields.add("timestamp");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HIUConsentNotificationResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HIUConsentNotificationResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HIUConsentNotificationResponse is not found in the empty JSON string", HIUConsentNotificationResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HIUConsentNotificationResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HIUConsentNotificationResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : HIUConsentNotificationResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("acknowledgement") != null && !jsonObj.get("acknowledgement").isJsonNull()) {
        JsonArray jsonArrayacknowledgement = jsonObj.getAsJsonArray("acknowledgement");
        if (jsonArrayacknowledgement != null) {
          // ensure the json data is an array
          if (!jsonObj.get("acknowledgement").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `acknowledgement` to be an array in the JSON string but got `%s`", jsonObj.get("acknowledgement").toString()));
          }

          // validate the optional field `acknowledgement` (array)
          for (int i = 0; i < jsonArrayacknowledgement.size(); i++) {
            ConsentAcknowledgement.validateJsonElement(jsonArrayacknowledgement.get(i));
          };
        }
      }
      // validate the optional field `error`
      if (jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) {
        Error.validateJsonElement(jsonObj.get("error"));
      }
      if (!jsonObj.get("requestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestId").toString()));
      }
      // validate the required field `resp`
      RequestReference.validateJsonElement(jsonObj.get("resp"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HIUConsentNotificationResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HIUConsentNotificationResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HIUConsentNotificationResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HIUConsentNotificationResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<HIUConsentNotificationResponse>() {
           @Override
           public void write(JsonWriter out, HIUConsentNotificationResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HIUConsentNotificationResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HIUConsentNotificationResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HIUConsentNotificationResponse
   * @throws IOException if the JSON string is invalid with respect to HIUConsentNotificationResponse
   */
  public static HIUConsentNotificationResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HIUConsentNotificationResponse.class);
  }

  /**
   * Convert an instance of HIUConsentNotificationResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

