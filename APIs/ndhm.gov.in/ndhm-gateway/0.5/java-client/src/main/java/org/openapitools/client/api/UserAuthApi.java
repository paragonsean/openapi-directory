/*
 * Gateway
 * Gateway is the hub that routes/orchestrates the interaction between consent managers and API bridges. There are 5 categories of APIs; discovery, link, consent flow, data flow and  monitoring. To reflect the consumers of APIs, the above apis are also categorized under cm facing, hiu facing and hip facing  
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.PatientAuthConfirmRequest;
import org.openapitools.client.model.PatientAuthConfirmResponse;
import org.openapitools.client.model.PatientAuthInitRequest;
import org.openapitools.client.model.PatientAuthInitResponse;
import org.openapitools.client.model.PatientAuthModeQueryRequest;
import org.openapitools.client.model.PatientAuthModeQueryResponse;
import org.openapitools.client.model.PatientAuthNotification;
import org.openapitools.client.model.PatientAuthNotificationAcknowledgement;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserAuthApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UserAuthApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserAuthApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v05UsersAuthConfirmPost
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientAuthConfirmRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * transaction id is not provided or invalid   * token or other auth confirmation details not provided or invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05UsersAuthConfirmPostCall(String authorization, String X_CM_ID, PatientAuthConfirmRequest patientAuthConfirmRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patientAuthConfirmRequest;

        // create path and map variables
        String localVarPath = "/v0.5/users/auth/confirm";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (X_CM_ID != null) {
            localVarHeaderParams.put("X-CM-ID", localVarApiClient.parameterToString(X_CM_ID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v05UsersAuthConfirmPostValidateBeforeCall(String authorization, String X_CM_ID, PatientAuthConfirmRequest patientAuthConfirmRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v05UsersAuthConfirmPost(Async)");
        }

        // verify the required parameter 'X_CM_ID' is set
        if (X_CM_ID == null) {
            throw new ApiException("Missing the required parameter 'X_CM_ID' when calling v05UsersAuthConfirmPost(Async)");
        }

        // verify the required parameter 'patientAuthConfirmRequest' is set
        if (patientAuthConfirmRequest == null) {
            throw new ApiException("Missing the required parameter 'patientAuthConfirmRequest' when calling v05UsersAuthConfirmPost(Async)");
        }

        return v05UsersAuthConfirmPostCall(authorization, X_CM_ID, patientAuthConfirmRequest, _callback);

    }

    /**
     * Confirmation request sending token, otp or other authentication details from HIP/HIU for confirmation
     * This API is called by HIP/HIUs to confirm authentication of users. The transactionId returned by the previous callback API /users/auth/on-init must be sent. If Authentication is successful the callback API will send an \&quot;access token\&quot; for subsequent purpose specific API calls. Note only **credential.authCode** or **credential.demographic** should be sent   1. demographic details are only required for  demographic auth as of now.    2. demographic details are required only in MEDIATED cases and if the **auth.mode** so demands. e.g. if **auth.mode** is DEMOGRAPHICS. Usually for demographic authentication, the name, gender and DOB must be exactly as specified in User Account.   3. demographic.identifier is optional, however maybe required if authentication so mandates.    4. credential.authCode is required for other MEDIATED authentication like MOBILE_OTP, AADHAAR_OTP.  
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientAuthConfirmRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * transaction id is not provided or invalid   * token or other auth confirmation details not provided or invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public void v05UsersAuthConfirmPost(String authorization, String X_CM_ID, PatientAuthConfirmRequest patientAuthConfirmRequest) throws ApiException {
        v05UsersAuthConfirmPostWithHttpInfo(authorization, X_CM_ID, patientAuthConfirmRequest);
    }

    /**
     * Confirmation request sending token, otp or other authentication details from HIP/HIU for confirmation
     * This API is called by HIP/HIUs to confirm authentication of users. The transactionId returned by the previous callback API /users/auth/on-init must be sent. If Authentication is successful the callback API will send an \&quot;access token\&quot; for subsequent purpose specific API calls. Note only **credential.authCode** or **credential.demographic** should be sent   1. demographic details are only required for  demographic auth as of now.    2. demographic details are required only in MEDIATED cases and if the **auth.mode** so demands. e.g. if **auth.mode** is DEMOGRAPHICS. Usually for demographic authentication, the name, gender and DOB must be exactly as specified in User Account.   3. demographic.identifier is optional, however maybe required if authentication so mandates.    4. credential.authCode is required for other MEDIATED authentication like MOBILE_OTP, AADHAAR_OTP.  
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientAuthConfirmRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * transaction id is not provided or invalid   * token or other auth confirmation details not provided or invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v05UsersAuthConfirmPostWithHttpInfo(String authorization, String X_CM_ID, PatientAuthConfirmRequest patientAuthConfirmRequest) throws ApiException {
        okhttp3.Call localVarCall = v05UsersAuthConfirmPostValidateBeforeCall(authorization, X_CM_ID, patientAuthConfirmRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Confirmation request sending token, otp or other authentication details from HIP/HIU for confirmation (asynchronously)
     * This API is called by HIP/HIUs to confirm authentication of users. The transactionId returned by the previous callback API /users/auth/on-init must be sent. If Authentication is successful the callback API will send an \&quot;access token\&quot; for subsequent purpose specific API calls. Note only **credential.authCode** or **credential.demographic** should be sent   1. demographic details are only required for  demographic auth as of now.    2. demographic details are required only in MEDIATED cases and if the **auth.mode** so demands. e.g. if **auth.mode** is DEMOGRAPHICS. Usually for demographic authentication, the name, gender and DOB must be exactly as specified in User Account.   3. demographic.identifier is optional, however maybe required if authentication so mandates.    4. credential.authCode is required for other MEDIATED authentication like MOBILE_OTP, AADHAAR_OTP.  
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientAuthConfirmRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * transaction id is not provided or invalid   * token or other auth confirmation details not provided or invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05UsersAuthConfirmPostAsync(String authorization, String X_CM_ID, PatientAuthConfirmRequest patientAuthConfirmRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v05UsersAuthConfirmPostValidateBeforeCall(authorization, X_CM_ID, patientAuthConfirmRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v05UsersAuthFetchModesPost
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientAuthModeQueryRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request, required attributes not provided  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05UsersAuthFetchModesPostCall(String authorization, String X_CM_ID, PatientAuthModeQueryRequest patientAuthModeQueryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patientAuthModeQueryRequest;

        // create path and map variables
        String localVarPath = "/v0.5/users/auth/fetch-modes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (X_CM_ID != null) {
            localVarHeaderParams.put("X-CM-ID", localVarApiClient.parameterToString(X_CM_ID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v05UsersAuthFetchModesPostValidateBeforeCall(String authorization, String X_CM_ID, PatientAuthModeQueryRequest patientAuthModeQueryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v05UsersAuthFetchModesPost(Async)");
        }

        // verify the required parameter 'X_CM_ID' is set
        if (X_CM_ID == null) {
            throw new ApiException("Missing the required parameter 'X_CM_ID' when calling v05UsersAuthFetchModesPost(Async)");
        }

        // verify the required parameter 'patientAuthModeQueryRequest' is set
        if (patientAuthModeQueryRequest == null) {
            throw new ApiException("Missing the required parameter 'patientAuthModeQueryRequest' when calling v05UsersAuthFetchModesPost(Async)");
        }

        return v05UsersAuthFetchModesPostCall(authorization, X_CM_ID, patientAuthModeQueryRequest, _callback);

    }

    /**
     * Get a patient&#39;s authentication modes relevant to specified purpose
     * This API is meant for identify supported authentication modes for a patient given a specific purpose 
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientAuthModeQueryRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request, required attributes not provided  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public void v05UsersAuthFetchModesPost(String authorization, String X_CM_ID, PatientAuthModeQueryRequest patientAuthModeQueryRequest) throws ApiException {
        v05UsersAuthFetchModesPostWithHttpInfo(authorization, X_CM_ID, patientAuthModeQueryRequest);
    }

    /**
     * Get a patient&#39;s authentication modes relevant to specified purpose
     * This API is meant for identify supported authentication modes for a patient given a specific purpose 
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientAuthModeQueryRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request, required attributes not provided  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v05UsersAuthFetchModesPostWithHttpInfo(String authorization, String X_CM_ID, PatientAuthModeQueryRequest patientAuthModeQueryRequest) throws ApiException {
        okhttp3.Call localVarCall = v05UsersAuthFetchModesPostValidateBeforeCall(authorization, X_CM_ID, patientAuthModeQueryRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get a patient&#39;s authentication modes relevant to specified purpose (asynchronously)
     * This API is meant for identify supported authentication modes for a patient given a specific purpose 
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientAuthModeQueryRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request, required attributes not provided  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05UsersAuthFetchModesPostAsync(String authorization, String X_CM_ID, PatientAuthModeQueryRequest patientAuthModeQueryRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v05UsersAuthFetchModesPostValidateBeforeCall(authorization, X_CM_ID, patientAuthModeQueryRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v05UsersAuthInitPost
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientAuthInitRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * patient id is not provided  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05UsersAuthInitPostCall(String authorization, String X_CM_ID, PatientAuthInitRequest patientAuthInitRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patientAuthInitRequest;

        // create path and map variables
        String localVarPath = "/v0.5/users/auth/init";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (X_CM_ID != null) {
            localVarHeaderParams.put("X-CM-ID", localVarApiClient.parameterToString(X_CM_ID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v05UsersAuthInitPostValidateBeforeCall(String authorization, String X_CM_ID, PatientAuthInitRequest patientAuthInitRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v05UsersAuthInitPost(Async)");
        }

        // verify the required parameter 'X_CM_ID' is set
        if (X_CM_ID == null) {
            throw new ApiException("Missing the required parameter 'X_CM_ID' when calling v05UsersAuthInitPost(Async)");
        }

        // verify the required parameter 'patientAuthInitRequest' is set
        if (patientAuthInitRequest == null) {
            throw new ApiException("Missing the required parameter 'patientAuthInitRequest' when calling v05UsersAuthInitPost(Async)");
        }

        return v05UsersAuthInitPostCall(authorization, X_CM_ID, patientAuthInitRequest, _callback);

    }

    /**
     * Initialize authentication from HIP
     * This API is called by HIPs to initiate authentication of users. A transactionId is retuned by the corresponding callback API for confirmation of user auth. 
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientAuthInitRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * patient id is not provided  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public void v05UsersAuthInitPost(String authorization, String X_CM_ID, PatientAuthInitRequest patientAuthInitRequest) throws ApiException {
        v05UsersAuthInitPostWithHttpInfo(authorization, X_CM_ID, patientAuthInitRequest);
    }

    /**
     * Initialize authentication from HIP
     * This API is called by HIPs to initiate authentication of users. A transactionId is retuned by the corresponding callback API for confirmation of user auth. 
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientAuthInitRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * patient id is not provided  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v05UsersAuthInitPostWithHttpInfo(String authorization, String X_CM_ID, PatientAuthInitRequest patientAuthInitRequest) throws ApiException {
        okhttp3.Call localVarCall = v05UsersAuthInitPostValidateBeforeCall(authorization, X_CM_ID, patientAuthInitRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Initialize authentication from HIP (asynchronously)
     * This API is called by HIPs to initiate authentication of users. A transactionId is retuned by the corresponding callback API for confirmation of user auth. 
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientAuthInitRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * patient id is not provided  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05UsersAuthInitPostAsync(String authorization, String X_CM_ID, PatientAuthInitRequest patientAuthInitRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v05UsersAuthInitPostValidateBeforeCall(authorization, X_CM_ID, patientAuthInitRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v05UsersAuthNotifyPost
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_HIP_ID Identifier of the health information provider to which the request was intended. (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended. (required)
     * @param patientAuthNotification  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * required details not provided   * neither auth nor error specified   </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05UsersAuthNotifyPostCall(String authorization, String X_HIP_ID, String X_HIU_ID, PatientAuthNotification patientAuthNotification, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patientAuthNotification;

        // create path and map variables
        String localVarPath = "/v0.5/users/auth/notify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (X_HIP_ID != null) {
            localVarHeaderParams.put("X-HIP-ID", localVarApiClient.parameterToString(X_HIP_ID));
        }

        if (X_HIU_ID != null) {
            localVarHeaderParams.put("X-HIU-ID", localVarApiClient.parameterToString(X_HIU_ID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v05UsersAuthNotifyPostValidateBeforeCall(String authorization, String X_HIP_ID, String X_HIU_ID, PatientAuthNotification patientAuthNotification, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v05UsersAuthNotifyPost(Async)");
        }

        // verify the required parameter 'X_HIP_ID' is set
        if (X_HIP_ID == null) {
            throw new ApiException("Missing the required parameter 'X_HIP_ID' when calling v05UsersAuthNotifyPost(Async)");
        }

        // verify the required parameter 'X_HIU_ID' is set
        if (X_HIU_ID == null) {
            throw new ApiException("Missing the required parameter 'X_HIU_ID' when calling v05UsersAuthNotifyPost(Async)");
        }

        // verify the required parameter 'patientAuthNotification' is set
        if (patientAuthNotification == null) {
            throw new ApiException("Missing the required parameter 'patientAuthNotification' when calling v05UsersAuthNotifyPost(Async)");
        }

        return v05UsersAuthNotifyPostCall(authorization, X_HIP_ID, X_HIU_ID, patientAuthNotification, _callback);

    }

    /**
     * notification API in case of DIRECT mode of authentication by the CM
     * This API is called by CM to confirm authentication of users. The transactionId returned is same as that passed in /auth/on-init. The \&quot;auth.status\&quot; conveys whether the request was GRANTED or DENIED.    1. **auth.accessToken** - is specific to the purpose mentioned in the /auth/init. This token needs to be used for initiating the intended action. For example for HIP initiated linking of care-contexts   2. **NOTE**, only one of **X-HIP-ID** or **X-HIU-ID** will be sent as part of header, not both.   3. The payload is conditional to the purpose of auth. If purpose specified in /auth/init is KYC or KYC_AND_LINK, then patient details are passed. **auth.accessToken** is passed only if the purpose is LINK or KYC_AND_LINK. 
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_HIP_ID Identifier of the health information provider to which the request was intended. (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended. (required)
     * @param patientAuthNotification  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * required details not provided   * neither auth nor error specified   </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public void v05UsersAuthNotifyPost(String authorization, String X_HIP_ID, String X_HIU_ID, PatientAuthNotification patientAuthNotification) throws ApiException {
        v05UsersAuthNotifyPostWithHttpInfo(authorization, X_HIP_ID, X_HIU_ID, patientAuthNotification);
    }

    /**
     * notification API in case of DIRECT mode of authentication by the CM
     * This API is called by CM to confirm authentication of users. The transactionId returned is same as that passed in /auth/on-init. The \&quot;auth.status\&quot; conveys whether the request was GRANTED or DENIED.    1. **auth.accessToken** - is specific to the purpose mentioned in the /auth/init. This token needs to be used for initiating the intended action. For example for HIP initiated linking of care-contexts   2. **NOTE**, only one of **X-HIP-ID** or **X-HIU-ID** will be sent as part of header, not both.   3. The payload is conditional to the purpose of auth. If purpose specified in /auth/init is KYC or KYC_AND_LINK, then patient details are passed. **auth.accessToken** is passed only if the purpose is LINK or KYC_AND_LINK. 
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_HIP_ID Identifier of the health information provider to which the request was intended. (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended. (required)
     * @param patientAuthNotification  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * required details not provided   * neither auth nor error specified   </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v05UsersAuthNotifyPostWithHttpInfo(String authorization, String X_HIP_ID, String X_HIU_ID, PatientAuthNotification patientAuthNotification) throws ApiException {
        okhttp3.Call localVarCall = v05UsersAuthNotifyPostValidateBeforeCall(authorization, X_HIP_ID, X_HIU_ID, patientAuthNotification, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * notification API in case of DIRECT mode of authentication by the CM (asynchronously)
     * This API is called by CM to confirm authentication of users. The transactionId returned is same as that passed in /auth/on-init. The \&quot;auth.status\&quot; conveys whether the request was GRANTED or DENIED.    1. **auth.accessToken** - is specific to the purpose mentioned in the /auth/init. This token needs to be used for initiating the intended action. For example for HIP initiated linking of care-contexts   2. **NOTE**, only one of **X-HIP-ID** or **X-HIU-ID** will be sent as part of header, not both.   3. The payload is conditional to the purpose of auth. If purpose specified in /auth/init is KYC or KYC_AND_LINK, then patient details are passed. **auth.accessToken** is passed only if the purpose is LINK or KYC_AND_LINK. 
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_HIP_ID Identifier of the health information provider to which the request was intended. (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended. (required)
     * @param patientAuthNotification  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * required details not provided   * neither auth nor error specified   </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05UsersAuthNotifyPostAsync(String authorization, String X_HIP_ID, String X_HIU_ID, PatientAuthNotification patientAuthNotification, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v05UsersAuthNotifyPostValidateBeforeCall(authorization, X_HIP_ID, X_HIU_ID, patientAuthNotification, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v05UsersAuthOnConfirmPost
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_HIP_ID Identifier of the health information provider to which the request was intended. (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended. (required)
     * @param patientAuthConfirmResponse  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * required details not provided   * neither auth nor error specified   </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05UsersAuthOnConfirmPostCall(String authorization, String X_HIP_ID, String X_HIU_ID, PatientAuthConfirmResponse patientAuthConfirmResponse, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patientAuthConfirmResponse;

        // create path and map variables
        String localVarPath = "/v0.5/users/auth/on-confirm";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (X_HIP_ID != null) {
            localVarHeaderParams.put("X-HIP-ID", localVarApiClient.parameterToString(X_HIP_ID));
        }

        if (X_HIU_ID != null) {
            localVarHeaderParams.put("X-HIU-ID", localVarApiClient.parameterToString(X_HIU_ID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v05UsersAuthOnConfirmPostValidateBeforeCall(String authorization, String X_HIP_ID, String X_HIU_ID, PatientAuthConfirmResponse patientAuthConfirmResponse, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v05UsersAuthOnConfirmPost(Async)");
        }

        // verify the required parameter 'X_HIP_ID' is set
        if (X_HIP_ID == null) {
            throw new ApiException("Missing the required parameter 'X_HIP_ID' when calling v05UsersAuthOnConfirmPost(Async)");
        }

        // verify the required parameter 'X_HIU_ID' is set
        if (X_HIU_ID == null) {
            throw new ApiException("Missing the required parameter 'X_HIU_ID' when calling v05UsersAuthOnConfirmPost(Async)");
        }

        // verify the required parameter 'patientAuthConfirmResponse' is set
        if (patientAuthConfirmResponse == null) {
            throw new ApiException("Missing the required parameter 'patientAuthConfirmResponse' when calling v05UsersAuthOnConfirmPost(Async)");
        }

        return v05UsersAuthOnConfirmPostCall(authorization, X_HIP_ID, X_HIU_ID, patientAuthConfirmResponse, _callback);

    }

    /**
     * callback API for /auth/confirm (in case of MEDIATED auth) to confirm user authentication or not
     * This API is called by CM to confirm authentication of users.    1. **auth.accessToken** - is specific to the purpose mentioned in the /auth/init. This token needs to be used for initiating the intended action. For example for HIP initiated linking of care-contexts   2. **NOTE**, only one of **X-HIP-ID** or **X-HIU-ID** will be sent as part of header, not both.      
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_HIP_ID Identifier of the health information provider to which the request was intended. (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended. (required)
     * @param patientAuthConfirmResponse  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * required details not provided   * neither auth nor error specified   </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public void v05UsersAuthOnConfirmPost(String authorization, String X_HIP_ID, String X_HIU_ID, PatientAuthConfirmResponse patientAuthConfirmResponse) throws ApiException {
        v05UsersAuthOnConfirmPostWithHttpInfo(authorization, X_HIP_ID, X_HIU_ID, patientAuthConfirmResponse);
    }

    /**
     * callback API for /auth/confirm (in case of MEDIATED auth) to confirm user authentication or not
     * This API is called by CM to confirm authentication of users.    1. **auth.accessToken** - is specific to the purpose mentioned in the /auth/init. This token needs to be used for initiating the intended action. For example for HIP initiated linking of care-contexts   2. **NOTE**, only one of **X-HIP-ID** or **X-HIU-ID** will be sent as part of header, not both.      
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_HIP_ID Identifier of the health information provider to which the request was intended. (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended. (required)
     * @param patientAuthConfirmResponse  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * required details not provided   * neither auth nor error specified   </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v05UsersAuthOnConfirmPostWithHttpInfo(String authorization, String X_HIP_ID, String X_HIU_ID, PatientAuthConfirmResponse patientAuthConfirmResponse) throws ApiException {
        okhttp3.Call localVarCall = v05UsersAuthOnConfirmPostValidateBeforeCall(authorization, X_HIP_ID, X_HIU_ID, patientAuthConfirmResponse, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * callback API for /auth/confirm (in case of MEDIATED auth) to confirm user authentication or not (asynchronously)
     * This API is called by CM to confirm authentication of users.    1. **auth.accessToken** - is specific to the purpose mentioned in the /auth/init. This token needs to be used for initiating the intended action. For example for HIP initiated linking of care-contexts   2. **NOTE**, only one of **X-HIP-ID** or **X-HIU-ID** will be sent as part of header, not both.      
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_HIP_ID Identifier of the health information provider to which the request was intended. (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended. (required)
     * @param patientAuthConfirmResponse  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * required details not provided   * neither auth nor error specified   </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05UsersAuthOnConfirmPostAsync(String authorization, String X_HIP_ID, String X_HIU_ID, PatientAuthConfirmResponse patientAuthConfirmResponse, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v05UsersAuthOnConfirmPostValidateBeforeCall(authorization, X_HIP_ID, X_HIU_ID, patientAuthConfirmResponse, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v05UsersAuthOnFetchModesPost
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_HIP_ID Identifier of the health information provider to which the request was intended. (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended. (required)
     * @param patientAuthModeQueryResponse  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request, required attributes not provided  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05UsersAuthOnFetchModesPostCall(String authorization, String X_HIP_ID, String X_HIU_ID, PatientAuthModeQueryResponse patientAuthModeQueryResponse, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patientAuthModeQueryResponse;

        // create path and map variables
        String localVarPath = "/v0.5/users/auth/on-fetch-modes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (X_HIP_ID != null) {
            localVarHeaderParams.put("X-HIP-ID", localVarApiClient.parameterToString(X_HIP_ID));
        }

        if (X_HIU_ID != null) {
            localVarHeaderParams.put("X-HIU-ID", localVarApiClient.parameterToString(X_HIU_ID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v05UsersAuthOnFetchModesPostValidateBeforeCall(String authorization, String X_HIP_ID, String X_HIU_ID, PatientAuthModeQueryResponse patientAuthModeQueryResponse, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v05UsersAuthOnFetchModesPost(Async)");
        }

        // verify the required parameter 'X_HIP_ID' is set
        if (X_HIP_ID == null) {
            throw new ApiException("Missing the required parameter 'X_HIP_ID' when calling v05UsersAuthOnFetchModesPost(Async)");
        }

        // verify the required parameter 'X_HIU_ID' is set
        if (X_HIU_ID == null) {
            throw new ApiException("Missing the required parameter 'X_HIU_ID' when calling v05UsersAuthOnFetchModesPost(Async)");
        }

        // verify the required parameter 'patientAuthModeQueryResponse' is set
        if (patientAuthModeQueryResponse == null) {
            throw new ApiException("Missing the required parameter 'patientAuthModeQueryResponse' when calling v05UsersAuthOnFetchModesPost(Async)");
        }

        return v05UsersAuthOnFetchModesPostCall(authorization, X_HIP_ID, X_HIU_ID, patientAuthModeQueryResponse, _callback);

    }

    /**
     * Identification result for a consent-manager user-id
     * If a patient is found then **auth** attribute contains the supported modes for the specified purpose.  Otherwise, error is raised for invalid requests or for non-existent id. Note in addition to the \&quot;Authorization\&quot; header, one of the following headers must be specified 1. **X-HIU-ID** if the requester is HIU (identified from /auth/fetch-modes requester.id) 2. **X-HIP-ID** if the requester is HIP (identified from /auth/fetch-modes requester.id) 
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_HIP_ID Identifier of the health information provider to which the request was intended. (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended. (required)
     * @param patientAuthModeQueryResponse  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request, required attributes not provided  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public void v05UsersAuthOnFetchModesPost(String authorization, String X_HIP_ID, String X_HIU_ID, PatientAuthModeQueryResponse patientAuthModeQueryResponse) throws ApiException {
        v05UsersAuthOnFetchModesPostWithHttpInfo(authorization, X_HIP_ID, X_HIU_ID, patientAuthModeQueryResponse);
    }

    /**
     * Identification result for a consent-manager user-id
     * If a patient is found then **auth** attribute contains the supported modes for the specified purpose.  Otherwise, error is raised for invalid requests or for non-existent id. Note in addition to the \&quot;Authorization\&quot; header, one of the following headers must be specified 1. **X-HIU-ID** if the requester is HIU (identified from /auth/fetch-modes requester.id) 2. **X-HIP-ID** if the requester is HIP (identified from /auth/fetch-modes requester.id) 
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_HIP_ID Identifier of the health information provider to which the request was intended. (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended. (required)
     * @param patientAuthModeQueryResponse  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request, required attributes not provided  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v05UsersAuthOnFetchModesPostWithHttpInfo(String authorization, String X_HIP_ID, String X_HIU_ID, PatientAuthModeQueryResponse patientAuthModeQueryResponse) throws ApiException {
        okhttp3.Call localVarCall = v05UsersAuthOnFetchModesPostValidateBeforeCall(authorization, X_HIP_ID, X_HIU_ID, patientAuthModeQueryResponse, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Identification result for a consent-manager user-id (asynchronously)
     * If a patient is found then **auth** attribute contains the supported modes for the specified purpose.  Otherwise, error is raised for invalid requests or for non-existent id. Note in addition to the \&quot;Authorization\&quot; header, one of the following headers must be specified 1. **X-HIU-ID** if the requester is HIU (identified from /auth/fetch-modes requester.id) 2. **X-HIP-ID** if the requester is HIP (identified from /auth/fetch-modes requester.id) 
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_HIP_ID Identifier of the health information provider to which the request was intended. (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended. (required)
     * @param patientAuthModeQueryResponse  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request, required attributes not provided  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05UsersAuthOnFetchModesPostAsync(String authorization, String X_HIP_ID, String X_HIU_ID, PatientAuthModeQueryResponse patientAuthModeQueryResponse, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v05UsersAuthOnFetchModesPostValidateBeforeCall(authorization, X_HIP_ID, X_HIU_ID, patientAuthModeQueryResponse, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v05UsersAuthOnInitPost
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_HIP_ID Identifier of the health information provider to which the request was intended. (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended. (required)
     * @param patientAuthInitResponse  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * required information not provided   * neither authInit nor error specified   </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05UsersAuthOnInitPostCall(String authorization, String X_HIP_ID, String X_HIU_ID, PatientAuthInitResponse patientAuthInitResponse, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patientAuthInitResponse;

        // create path and map variables
        String localVarPath = "/v0.5/users/auth/on-init";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (X_HIP_ID != null) {
            localVarHeaderParams.put("X-HIP-ID", localVarApiClient.parameterToString(X_HIP_ID));
        }

        if (X_HIU_ID != null) {
            localVarHeaderParams.put("X-HIU-ID", localVarApiClient.parameterToString(X_HIU_ID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v05UsersAuthOnInitPostValidateBeforeCall(String authorization, String X_HIP_ID, String X_HIU_ID, PatientAuthInitResponse patientAuthInitResponse, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v05UsersAuthOnInitPost(Async)");
        }

        // verify the required parameter 'X_HIP_ID' is set
        if (X_HIP_ID == null) {
            throw new ApiException("Missing the required parameter 'X_HIP_ID' when calling v05UsersAuthOnInitPost(Async)");
        }

        // verify the required parameter 'X_HIU_ID' is set
        if (X_HIU_ID == null) {
            throw new ApiException("Missing the required parameter 'X_HIU_ID' when calling v05UsersAuthOnInitPost(Async)");
        }

        // verify the required parameter 'patientAuthInitResponse' is set
        if (patientAuthInitResponse == null) {
            throw new ApiException("Missing the required parameter 'patientAuthInitResponse' when calling v05UsersAuthOnInitPost(Async)");
        }

        return v05UsersAuthOnInitPostCall(authorization, X_HIP_ID, X_HIU_ID, patientAuthInitResponse, _callback);

    }

    /**
     * Response to user authentication initialization from HIP
     * If the patient&#39;s id is valid, CM will return a transactionId as initialization of user auth. If the request is valid, then &#39;auth.mode&#39; will convey how the authentication should be done. The authentication can be *mediated* or *direct*. For mediated authentication modes, HIP or HIU is epected to send over relevant code (OTP/token) or demographic info via subsequent API call to /auth/confirm. for direct authentication case, CM will notify requester through/users/auth/notify API.     1. **auth.mode** conveys whats the mode of authentication is, and what is expected from HIP/HIU in the subsequent /auth/confirm API call. Possible values        1. MOBILE_OTP - auth via OTP to registered mobile. Mediated.        2. AADHAAR_OTP - auth initiated with Aadhaar with OTP. Mediated.        3. DEMOGRAPHICS - auth initiated with demographic verification       4. DIRECT - for authentication directly with the patient. e.g. Mobile App, SMS. In this case, the HIP/HIU is not expected to call subsequent /auth/confirm call. CM will do direct authentication with the User (e.g. Mobile App, SMS etc) and will notify requester   2. **meta.expiry** conveys the expiry time of the token and the authentication session   3. **NOTE**, only one of **X-HIP-ID** or **X-HIU-ID** will be sent as part of header, not both.                         The error section in the body, represents the potential errors that may have occurred. Possible reasons:   1. Patient id is invalid 
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_HIP_ID Identifier of the health information provider to which the request was intended. (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended. (required)
     * @param patientAuthInitResponse  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * required information not provided   * neither authInit nor error specified   </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public void v05UsersAuthOnInitPost(String authorization, String X_HIP_ID, String X_HIU_ID, PatientAuthInitResponse patientAuthInitResponse) throws ApiException {
        v05UsersAuthOnInitPostWithHttpInfo(authorization, X_HIP_ID, X_HIU_ID, patientAuthInitResponse);
    }

    /**
     * Response to user authentication initialization from HIP
     * If the patient&#39;s id is valid, CM will return a transactionId as initialization of user auth. If the request is valid, then &#39;auth.mode&#39; will convey how the authentication should be done. The authentication can be *mediated* or *direct*. For mediated authentication modes, HIP or HIU is epected to send over relevant code (OTP/token) or demographic info via subsequent API call to /auth/confirm. for direct authentication case, CM will notify requester through/users/auth/notify API.     1. **auth.mode** conveys whats the mode of authentication is, and what is expected from HIP/HIU in the subsequent /auth/confirm API call. Possible values        1. MOBILE_OTP - auth via OTP to registered mobile. Mediated.        2. AADHAAR_OTP - auth initiated with Aadhaar with OTP. Mediated.        3. DEMOGRAPHICS - auth initiated with demographic verification       4. DIRECT - for authentication directly with the patient. e.g. Mobile App, SMS. In this case, the HIP/HIU is not expected to call subsequent /auth/confirm call. CM will do direct authentication with the User (e.g. Mobile App, SMS etc) and will notify requester   2. **meta.expiry** conveys the expiry time of the token and the authentication session   3. **NOTE**, only one of **X-HIP-ID** or **X-HIU-ID** will be sent as part of header, not both.                         The error section in the body, represents the potential errors that may have occurred. Possible reasons:   1. Patient id is invalid 
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_HIP_ID Identifier of the health information provider to which the request was intended. (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended. (required)
     * @param patientAuthInitResponse  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * required information not provided   * neither authInit nor error specified   </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v05UsersAuthOnInitPostWithHttpInfo(String authorization, String X_HIP_ID, String X_HIU_ID, PatientAuthInitResponse patientAuthInitResponse) throws ApiException {
        okhttp3.Call localVarCall = v05UsersAuthOnInitPostValidateBeforeCall(authorization, X_HIP_ID, X_HIU_ID, patientAuthInitResponse, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Response to user authentication initialization from HIP (asynchronously)
     * If the patient&#39;s id is valid, CM will return a transactionId as initialization of user auth. If the request is valid, then &#39;auth.mode&#39; will convey how the authentication should be done. The authentication can be *mediated* or *direct*. For mediated authentication modes, HIP or HIU is epected to send over relevant code (OTP/token) or demographic info via subsequent API call to /auth/confirm. for direct authentication case, CM will notify requester through/users/auth/notify API.     1. **auth.mode** conveys whats the mode of authentication is, and what is expected from HIP/HIU in the subsequent /auth/confirm API call. Possible values        1. MOBILE_OTP - auth via OTP to registered mobile. Mediated.        2. AADHAAR_OTP - auth initiated with Aadhaar with OTP. Mediated.        3. DEMOGRAPHICS - auth initiated with demographic verification       4. DIRECT - for authentication directly with the patient. e.g. Mobile App, SMS. In this case, the HIP/HIU is not expected to call subsequent /auth/confirm call. CM will do direct authentication with the User (e.g. Mobile App, SMS etc) and will notify requester   2. **meta.expiry** conveys the expiry time of the token and the authentication session   3. **NOTE**, only one of **X-HIP-ID** or **X-HIU-ID** will be sent as part of header, not both.                         The error section in the body, represents the potential errors that may have occurred. Possible reasons:   1. Patient id is invalid 
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_HIP_ID Identifier of the health information provider to which the request was intended. (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended. (required)
     * @param patientAuthInitResponse  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * required information not provided   * neither authInit nor error specified   </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05UsersAuthOnInitPostAsync(String authorization, String X_HIP_ID, String X_HIU_ID, PatientAuthInitResponse patientAuthInitResponse, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v05UsersAuthOnInitPostValidateBeforeCall(authorization, X_HIP_ID, X_HIU_ID, patientAuthInitResponse, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v05UsersAuthOnNotifyPost
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientAuthNotificationAcknowledgement  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * required details not provided   * neither auth nor error specified   </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05UsersAuthOnNotifyPostCall(String authorization, String X_CM_ID, PatientAuthNotificationAcknowledgement patientAuthNotificationAcknowledgement, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patientAuthNotificationAcknowledgement;

        // create path and map variables
        String localVarPath = "/v0.5/users/auth/on-notify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (X_CM_ID != null) {
            localVarHeaderParams.put("X-CM-ID", localVarApiClient.parameterToString(X_CM_ID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v05UsersAuthOnNotifyPostValidateBeforeCall(String authorization, String X_CM_ID, PatientAuthNotificationAcknowledgement patientAuthNotificationAcknowledgement, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v05UsersAuthOnNotifyPost(Async)");
        }

        // verify the required parameter 'X_CM_ID' is set
        if (X_CM_ID == null) {
            throw new ApiException("Missing the required parameter 'X_CM_ID' when calling v05UsersAuthOnNotifyPost(Async)");
        }

        // verify the required parameter 'patientAuthNotificationAcknowledgement' is set
        if (patientAuthNotificationAcknowledgement == null) {
            throw new ApiException("Missing the required parameter 'patientAuthNotificationAcknowledgement' when calling v05UsersAuthOnNotifyPost(Async)");
        }

        return v05UsersAuthOnNotifyPostCall(authorization, X_CM_ID, patientAuthNotificationAcknowledgement, _callback);

    }

    /**
     * callback API by HIU/HIPs as acknowledgement of auth notification
     * This API is called by HIU/HIPs to confirm acknowledgement for receipt of auth notification is case of DIRECT authentication.  
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientAuthNotificationAcknowledgement  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * required details not provided   * neither auth nor error specified   </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public void v05UsersAuthOnNotifyPost(String authorization, String X_CM_ID, PatientAuthNotificationAcknowledgement patientAuthNotificationAcknowledgement) throws ApiException {
        v05UsersAuthOnNotifyPostWithHttpInfo(authorization, X_CM_ID, patientAuthNotificationAcknowledgement);
    }

    /**
     * callback API by HIU/HIPs as acknowledgement of auth notification
     * This API is called by HIU/HIPs to confirm acknowledgement for receipt of auth notification is case of DIRECT authentication.  
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientAuthNotificationAcknowledgement  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * required details not provided   * neither auth nor error specified   </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v05UsersAuthOnNotifyPostWithHttpInfo(String authorization, String X_CM_ID, PatientAuthNotificationAcknowledgement patientAuthNotificationAcknowledgement) throws ApiException {
        okhttp3.Call localVarCall = v05UsersAuthOnNotifyPostValidateBeforeCall(authorization, X_CM_ID, patientAuthNotificationAcknowledgement, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * callback API by HIU/HIPs as acknowledgement of auth notification (asynchronously)
     * This API is called by HIU/HIPs to confirm acknowledgement for receipt of auth notification is case of DIRECT authentication.  
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientAuthNotificationAcknowledgement  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * required details not provided   * neither auth nor error specified   </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05UsersAuthOnNotifyPostAsync(String authorization, String X_CM_ID, PatientAuthNotificationAcknowledgement patientAuthNotificationAcknowledgement, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v05UsersAuthOnNotifyPostValidateBeforeCall(authorization, X_CM_ID, patientAuthNotificationAcknowledgement, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
