/*
 * Gateway
 * Gateway is the hub that routes/orchestrates the interaction between consent managers and API bridges. There are 5 categories of APIs; discovery, link, consent flow, data flow and  monitoring. To reflect the consumers of APIs, the above apis are also categorized under cm facing, hiu facing and hip facing  
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.HIPConsentNotificationResponse;
import org.openapitools.client.model.HIPHealthInformationRequestAcknowledgement;
import org.openapitools.client.model.HealthInformationNotification;
import org.openapitools.client.model.PatientAuthConfirmRequest;
import org.openapitools.client.model.PatientAuthInitRequest;
import org.openapitools.client.model.PatientAuthModeQueryRequest;
import org.openapitools.client.model.PatientAuthNotificationAcknowledgement;
import org.openapitools.client.model.PatientCareContextLinkRequest;
import org.openapitools.client.model.PatientLinkReferenceResult;
import org.openapitools.client.model.PatientLinkResult;
import org.openapitools.client.model.PatientSMSNotifcationRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class HipFacingApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public HipFacingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public HipFacingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v05ConsentsHipOnNotifyPost_0
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param hiPConsentNotificationResponse  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Invalid/Expired/Empty token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream services are down  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05ConsentsHipOnNotifyPost_0Call(String authorization, String X_CM_ID, HIPConsentNotificationResponse hiPConsentNotificationResponse, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = hiPConsentNotificationResponse;

        // create path and map variables
        String localVarPath = "/v0.5/consents/hip/on-notify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (X_CM_ID != null) {
            localVarHeaderParams.put("X-CM-ID", localVarApiClient.parameterToString(X_CM_ID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v05ConsentsHipOnNotifyPost_0ValidateBeforeCall(String authorization, String X_CM_ID, HIPConsentNotificationResponse hiPConsentNotificationResponse, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v05ConsentsHipOnNotifyPost_0(Async)");
        }

        // verify the required parameter 'X_CM_ID' is set
        if (X_CM_ID == null) {
            throw new ApiException("Missing the required parameter 'X_CM_ID' when calling v05ConsentsHipOnNotifyPost_0(Async)");
        }

        // verify the required parameter 'hiPConsentNotificationResponse' is set
        if (hiPConsentNotificationResponse == null) {
            throw new ApiException("Missing the required parameter 'hiPConsentNotificationResponse' when calling v05ConsentsHipOnNotifyPost_0(Async)");
        }

        return v05ConsentsHipOnNotifyPost_0Call(authorization, X_CM_ID, hiPConsentNotificationResponse, _callback);

    }

    /**
     * Consent notification
     * This API is called by HIP as acknowledgement to notification of consents, in cases of consent revocation and expiration.  
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param hiPConsentNotificationResponse  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Invalid/Expired/Empty token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream services are down  </td><td>  -  </td></tr>
     </table>
     */
    public void v05ConsentsHipOnNotifyPost_0(String authorization, String X_CM_ID, HIPConsentNotificationResponse hiPConsentNotificationResponse) throws ApiException {
        v05ConsentsHipOnNotifyPost_0WithHttpInfo(authorization, X_CM_ID, hiPConsentNotificationResponse);
    }

    /**
     * Consent notification
     * This API is called by HIP as acknowledgement to notification of consents, in cases of consent revocation and expiration.  
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param hiPConsentNotificationResponse  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Invalid/Expired/Empty token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream services are down  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v05ConsentsHipOnNotifyPost_0WithHttpInfo(String authorization, String X_CM_ID, HIPConsentNotificationResponse hiPConsentNotificationResponse) throws ApiException {
        okhttp3.Call localVarCall = v05ConsentsHipOnNotifyPost_0ValidateBeforeCall(authorization, X_CM_ID, hiPConsentNotificationResponse, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Consent notification (asynchronously)
     * This API is called by HIP as acknowledgement to notification of consents, in cases of consent revocation and expiration.  
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param hiPConsentNotificationResponse  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Invalid/Expired/Empty token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream services are down  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05ConsentsHipOnNotifyPost_0Async(String authorization, String X_CM_ID, HIPConsentNotificationResponse hiPConsentNotificationResponse, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v05ConsentsHipOnNotifyPost_0ValidateBeforeCall(authorization, X_CM_ID, hiPConsentNotificationResponse, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v05HealthInformationHipOnRequestPost_0
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param hiPHealthInformationRequestAcknowledgement  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Bad request  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Token is invalid or Link has expired  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05HealthInformationHipOnRequestPost_0Call(String authorization, String X_CM_ID, HIPHealthInformationRequestAcknowledgement hiPHealthInformationRequestAcknowledgement, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = hiPHealthInformationRequestAcknowledgement;

        // create path and map variables
        String localVarPath = "/v0.5/health-information/hip/on-request";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (X_CM_ID != null) {
            localVarHeaderParams.put("X-CM-ID", localVarApiClient.parameterToString(X_CM_ID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v05HealthInformationHipOnRequestPost_0ValidateBeforeCall(String authorization, String X_CM_ID, HIPHealthInformationRequestAcknowledgement hiPHealthInformationRequestAcknowledgement, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v05HealthInformationHipOnRequestPost_0(Async)");
        }

        // verify the required parameter 'X_CM_ID' is set
        if (X_CM_ID == null) {
            throw new ApiException("Missing the required parameter 'X_CM_ID' when calling v05HealthInformationHipOnRequestPost_0(Async)");
        }

        // verify the required parameter 'hiPHealthInformationRequestAcknowledgement' is set
        if (hiPHealthInformationRequestAcknowledgement == null) {
            throw new ApiException("Missing the required parameter 'hiPHealthInformationRequestAcknowledgement' when calling v05HealthInformationHipOnRequestPost_0(Async)");
        }

        return v05HealthInformationHipOnRequestPost_0Call(authorization, X_CM_ID, hiPHealthInformationRequestAcknowledgement, _callback);

    }

    /**
     * Health information data request
     * API called by HIP to acknowledge Health information request receipt. Either the **hiRequest** or **error** must be specified. **hiRequest** element returns the same transactionId as before with a status indicating that the request is acknowledged.   
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param hiPHealthInformationRequestAcknowledgement  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Bad request  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Token is invalid or Link has expired  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public void v05HealthInformationHipOnRequestPost_0(String authorization, String X_CM_ID, HIPHealthInformationRequestAcknowledgement hiPHealthInformationRequestAcknowledgement) throws ApiException {
        v05HealthInformationHipOnRequestPost_0WithHttpInfo(authorization, X_CM_ID, hiPHealthInformationRequestAcknowledgement);
    }

    /**
     * Health information data request
     * API called by HIP to acknowledge Health information request receipt. Either the **hiRequest** or **error** must be specified. **hiRequest** element returns the same transactionId as before with a status indicating that the request is acknowledged.   
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param hiPHealthInformationRequestAcknowledgement  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Bad request  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Token is invalid or Link has expired  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v05HealthInformationHipOnRequestPost_0WithHttpInfo(String authorization, String X_CM_ID, HIPHealthInformationRequestAcknowledgement hiPHealthInformationRequestAcknowledgement) throws ApiException {
        okhttp3.Call localVarCall = v05HealthInformationHipOnRequestPost_0ValidateBeforeCall(authorization, X_CM_ID, hiPHealthInformationRequestAcknowledgement, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Health information data request (asynchronously)
     * API called by HIP to acknowledge Health information request receipt. Either the **hiRequest** or **error** must be specified. **hiRequest** element returns the same transactionId as before with a status indicating that the request is acknowledged.   
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param hiPHealthInformationRequestAcknowledgement  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Bad request  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Token is invalid or Link has expired  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05HealthInformationHipOnRequestPost_0Async(String authorization, String X_CM_ID, HIPHealthInformationRequestAcknowledgement hiPHealthInformationRequestAcknowledgement, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v05HealthInformationHipOnRequestPost_0ValidateBeforeCall(authorization, X_CM_ID, hiPHealthInformationRequestAcknowledgement, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v05HealthInformationNotifyPost_0
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param healthInformationNotification  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Notification is Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Invalid Request  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Expired/Invalid token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05HealthInformationNotifyPost_0Call(String authorization, String X_CM_ID, HealthInformationNotification healthInformationNotification, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = healthInformationNotification;

        // create path and map variables
        String localVarPath = "/v0.5/health-information/notify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (X_CM_ID != null) {
            localVarHeaderParams.put("X-CM-ID", localVarApiClient.parameterToString(X_CM_ID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v05HealthInformationNotifyPost_0ValidateBeforeCall(String authorization, String X_CM_ID, HealthInformationNotification healthInformationNotification, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v05HealthInformationNotifyPost_0(Async)");
        }

        // verify the required parameter 'X_CM_ID' is set
        if (X_CM_ID == null) {
            throw new ApiException("Missing the required parameter 'X_CM_ID' when calling v05HealthInformationNotifyPost_0(Async)");
        }

        // verify the required parameter 'healthInformationNotification' is set
        if (healthInformationNotification == null) {
            throw new ApiException("Missing the required parameter 'healthInformationNotification' when calling v05HealthInformationNotifyPost_0(Async)");
        }

        return v05HealthInformationNotifyPost_0Call(authorization, X_CM_ID, healthInformationNotification, _callback);

    }

    /**
     * Notifications corresponding to events during data flow
     * API called by HIU and HIP during data-transfer.  1. HIP on transfer of data would send **sessionStatus** - one of [TRANSFERRED, FAILED] 2. HIP would also send **hiStatus** for each *careContextReference* - on of [DELIVERED, ERRORED] 3. HIU on receipt of data would send **sessionStatus** - one of [TRANSFERRED, FAILED]. For example, FAILED when if data was not sent or if invalid data was sent 4. HIU would also send **hiStatus** for each *careContextReference* - one of [OK, ERRORED]  
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param healthInformationNotification  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Notification is Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Invalid Request  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Expired/Invalid token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public void v05HealthInformationNotifyPost_0(String authorization, String X_CM_ID, HealthInformationNotification healthInformationNotification) throws ApiException {
        v05HealthInformationNotifyPost_0WithHttpInfo(authorization, X_CM_ID, healthInformationNotification);
    }

    /**
     * Notifications corresponding to events during data flow
     * API called by HIU and HIP during data-transfer.  1. HIP on transfer of data would send **sessionStatus** - one of [TRANSFERRED, FAILED] 2. HIP would also send **hiStatus** for each *careContextReference* - on of [DELIVERED, ERRORED] 3. HIU on receipt of data would send **sessionStatus** - one of [TRANSFERRED, FAILED]. For example, FAILED when if data was not sent or if invalid data was sent 4. HIU would also send **hiStatus** for each *careContextReference* - one of [OK, ERRORED]  
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param healthInformationNotification  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Notification is Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Invalid Request  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Expired/Invalid token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v05HealthInformationNotifyPost_0WithHttpInfo(String authorization, String X_CM_ID, HealthInformationNotification healthInformationNotification) throws ApiException {
        okhttp3.Call localVarCall = v05HealthInformationNotifyPost_0ValidateBeforeCall(authorization, X_CM_ID, healthInformationNotification, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Notifications corresponding to events during data flow (asynchronously)
     * API called by HIU and HIP during data-transfer.  1. HIP on transfer of data would send **sessionStatus** - one of [TRANSFERRED, FAILED] 2. HIP would also send **hiStatus** for each *careContextReference* - on of [DELIVERED, ERRORED] 3. HIU on receipt of data would send **sessionStatus** - one of [TRANSFERRED, FAILED]. For example, FAILED when if data was not sent or if invalid data was sent 4. HIU would also send **hiStatus** for each *careContextReference* - one of [OK, ERRORED]  
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param healthInformationNotification  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Notification is Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Invalid Request  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Expired/Invalid token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05HealthInformationNotifyPost_0Async(String authorization, String X_CM_ID, HealthInformationNotification healthInformationNotification, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v05HealthInformationNotifyPost_0ValidateBeforeCall(authorization, X_CM_ID, healthInformationNotification, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v05LinksLinkAddContextsPost_0
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientCareContextLinkRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * required information not provided  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05LinksLinkAddContextsPost_0Call(String authorization, String X_CM_ID, PatientCareContextLinkRequest patientCareContextLinkRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patientCareContextLinkRequest;

        // create path and map variables
        String localVarPath = "/v0.5/links/link/add-contexts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (X_CM_ID != null) {
            localVarHeaderParams.put("X-CM-ID", localVarApiClient.parameterToString(X_CM_ID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v05LinksLinkAddContextsPost_0ValidateBeforeCall(String authorization, String X_CM_ID, PatientCareContextLinkRequest patientCareContextLinkRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v05LinksLinkAddContextsPost_0(Async)");
        }

        // verify the required parameter 'X_CM_ID' is set
        if (X_CM_ID == null) {
            throw new ApiException("Missing the required parameter 'X_CM_ID' when calling v05LinksLinkAddContextsPost_0(Async)");
        }

        // verify the required parameter 'patientCareContextLinkRequest' is set
        if (patientCareContextLinkRequest == null) {
            throw new ApiException("Missing the required parameter 'patientCareContextLinkRequest' when calling v05LinksLinkAddContextsPost_0(Async)");
        }

        return v05LinksLinkAddContextsPost_0Call(authorization, X_CM_ID, patientCareContextLinkRequest, _callback);

    }

    /**
     * API for HIP initiated care-context linking for patient
     * API to submit care-context to CM for HIP initiated linking. The API must accompany the \&quot;accessToken\&quot; fetched in the users/auth process.     1. subsequent usage for accessToken may be invalid if it was meant for one-time usage or if it expired 
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientCareContextLinkRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * required information not provided  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public void v05LinksLinkAddContextsPost_0(String authorization, String X_CM_ID, PatientCareContextLinkRequest patientCareContextLinkRequest) throws ApiException {
        v05LinksLinkAddContextsPost_0WithHttpInfo(authorization, X_CM_ID, patientCareContextLinkRequest);
    }

    /**
     * API for HIP initiated care-context linking for patient
     * API to submit care-context to CM for HIP initiated linking. The API must accompany the \&quot;accessToken\&quot; fetched in the users/auth process.     1. subsequent usage for accessToken may be invalid if it was meant for one-time usage or if it expired 
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientCareContextLinkRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * required information not provided  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v05LinksLinkAddContextsPost_0WithHttpInfo(String authorization, String X_CM_ID, PatientCareContextLinkRequest patientCareContextLinkRequest) throws ApiException {
        okhttp3.Call localVarCall = v05LinksLinkAddContextsPost_0ValidateBeforeCall(authorization, X_CM_ID, patientCareContextLinkRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * API for HIP initiated care-context linking for patient (asynchronously)
     * API to submit care-context to CM for HIP initiated linking. The API must accompany the \&quot;accessToken\&quot; fetched in the users/auth process.     1. subsequent usage for accessToken may be invalid if it was meant for one-time usage or if it expired 
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientCareContextLinkRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * required information not provided  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05LinksLinkAddContextsPost_0Async(String authorization, String X_CM_ID, PatientCareContextLinkRequest patientCareContextLinkRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v05LinksLinkAddContextsPost_0ValidateBeforeCall(authorization, X_CM_ID, patientCareContextLinkRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v05LinksLinkOnConfirmPost_0
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientLinkResult  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * resp not specified   * atleast patient or error should be specified  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05LinksLinkOnConfirmPost_0Call(String authorization, String X_CM_ID, PatientLinkResult patientLinkResult, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patientLinkResult;

        // create path and map variables
        String localVarPath = "/v0.5/links/link/on-confirm";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (X_CM_ID != null) {
            localVarHeaderParams.put("X-CM-ID", localVarApiClient.parameterToString(X_CM_ID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v05LinksLinkOnConfirmPost_0ValidateBeforeCall(String authorization, String X_CM_ID, PatientLinkResult patientLinkResult, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v05LinksLinkOnConfirmPost_0(Async)");
        }

        // verify the required parameter 'X_CM_ID' is set
        if (X_CM_ID == null) {
            throw new ApiException("Missing the required parameter 'X_CM_ID' when calling v05LinksLinkOnConfirmPost_0(Async)");
        }

        // verify the required parameter 'patientLinkResult' is set
        if (patientLinkResult == null) {
            throw new ApiException("Missing the required parameter 'patientLinkResult' when calling v05LinksLinkOnConfirmPost_0(Async)");
        }

        return v05LinksLinkOnConfirmPost_0Call(authorization, X_CM_ID, patientLinkResult, _callback);

    }

    /**
     * Token authenticated by HIP, indicating completion of linkage of care-contexts
     * Returns a list of linked care contexts with patient reference number.   1. **Validated and linked account reference number**   2. **Validated that the token sent from Consent Manager is same as the one generated by HIP**   3. **Verified that same Consent Manager which made the link request is sending the token**   4. **Results of unmasked linked care contexts with patient reference number** 
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientLinkResult  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * resp not specified   * atleast patient or error should be specified  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public void v05LinksLinkOnConfirmPost_0(String authorization, String X_CM_ID, PatientLinkResult patientLinkResult) throws ApiException {
        v05LinksLinkOnConfirmPost_0WithHttpInfo(authorization, X_CM_ID, patientLinkResult);
    }

    /**
     * Token authenticated by HIP, indicating completion of linkage of care-contexts
     * Returns a list of linked care contexts with patient reference number.   1. **Validated and linked account reference number**   2. **Validated that the token sent from Consent Manager is same as the one generated by HIP**   3. **Verified that same Consent Manager which made the link request is sending the token**   4. **Results of unmasked linked care contexts with patient reference number** 
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientLinkResult  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * resp not specified   * atleast patient or error should be specified  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v05LinksLinkOnConfirmPost_0WithHttpInfo(String authorization, String X_CM_ID, PatientLinkResult patientLinkResult) throws ApiException {
        okhttp3.Call localVarCall = v05LinksLinkOnConfirmPost_0ValidateBeforeCall(authorization, X_CM_ID, patientLinkResult, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Token authenticated by HIP, indicating completion of linkage of care-contexts (asynchronously)
     * Returns a list of linked care contexts with patient reference number.   1. **Validated and linked account reference number**   2. **Validated that the token sent from Consent Manager is same as the one generated by HIP**   3. **Verified that same Consent Manager which made the link request is sending the token**   4. **Results of unmasked linked care contexts with patient reference number** 
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientLinkResult  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * resp not specified   * atleast patient or error should be specified  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05LinksLinkOnConfirmPost_0Async(String authorization, String X_CM_ID, PatientLinkResult patientLinkResult, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v05LinksLinkOnConfirmPost_0ValidateBeforeCall(authorization, X_CM_ID, patientLinkResult, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v05LinksLinkOnInitPost_0
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientLinkReferenceResult  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Format mismatch of any of attributes.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05LinksLinkOnInitPost_0Call(String authorization, String X_CM_ID, PatientLinkReferenceResult patientLinkReferenceResult, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patientLinkReferenceResult;

        // create path and map variables
        String localVarPath = "/v0.5/links/link/on-init";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (X_CM_ID != null) {
            localVarHeaderParams.put("X-CM-ID", localVarApiClient.parameterToString(X_CM_ID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v05LinksLinkOnInitPost_0ValidateBeforeCall(String authorization, String X_CM_ID, PatientLinkReferenceResult patientLinkReferenceResult, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v05LinksLinkOnInitPost_0(Async)");
        }

        // verify the required parameter 'X_CM_ID' is set
        if (X_CM_ID == null) {
            throw new ApiException("Missing the required parameter 'X_CM_ID' when calling v05LinksLinkOnInitPost_0(Async)");
        }

        // verify the required parameter 'patientLinkReferenceResult' is set
        if (patientLinkReferenceResult == null) {
            throw new ApiException("Missing the required parameter 'patientLinkReferenceResult' when calling v05LinksLinkOnInitPost_0(Async)");
        }

        return v05LinksLinkOnInitPost_0Call(authorization, X_CM_ID, patientLinkReferenceResult, _callback);

    }

    /**
     * Response to patient&#39;s care context link request
     * Result of patient care-context link request from HIP end. This happens in context of previous discovery of patient found at HIP end, therefore the link requests ought to be in reference to the patient reference and care-context references previously returned by the HIP. The correlation of discovery and link request is maintained through the transactionId. HIP should have   1. **Validated transactionId in the request to check whether there was a discovery done previously, and the link request corresponds to returned patient care care context references**   2. **Before returning the response, HIP should have sent an authentication request to the patient(eg: OTP verification)**   3. **HIP should communicate the mode of authentication of a successful request**   4. **HIP subsequently should expect the token passed via /link/confirm against the link.referenceNumber passed in this call**                        The error section in the body, represents the potential errors that may have occurred. Possible reasons:   1. **Patient reference number is invalid**   2. **Care context reference numbers are invalid** 
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientLinkReferenceResult  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Format mismatch of any of attributes.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public void v05LinksLinkOnInitPost_0(String authorization, String X_CM_ID, PatientLinkReferenceResult patientLinkReferenceResult) throws ApiException {
        v05LinksLinkOnInitPost_0WithHttpInfo(authorization, X_CM_ID, patientLinkReferenceResult);
    }

    /**
     * Response to patient&#39;s care context link request
     * Result of patient care-context link request from HIP end. This happens in context of previous discovery of patient found at HIP end, therefore the link requests ought to be in reference to the patient reference and care-context references previously returned by the HIP. The correlation of discovery and link request is maintained through the transactionId. HIP should have   1. **Validated transactionId in the request to check whether there was a discovery done previously, and the link request corresponds to returned patient care care context references**   2. **Before returning the response, HIP should have sent an authentication request to the patient(eg: OTP verification)**   3. **HIP should communicate the mode of authentication of a successful request**   4. **HIP subsequently should expect the token passed via /link/confirm against the link.referenceNumber passed in this call**                        The error section in the body, represents the potential errors that may have occurred. Possible reasons:   1. **Patient reference number is invalid**   2. **Care context reference numbers are invalid** 
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientLinkReferenceResult  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Format mismatch of any of attributes.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v05LinksLinkOnInitPost_0WithHttpInfo(String authorization, String X_CM_ID, PatientLinkReferenceResult patientLinkReferenceResult) throws ApiException {
        okhttp3.Call localVarCall = v05LinksLinkOnInitPost_0ValidateBeforeCall(authorization, X_CM_ID, patientLinkReferenceResult, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Response to patient&#39;s care context link request (asynchronously)
     * Result of patient care-context link request from HIP end. This happens in context of previous discovery of patient found at HIP end, therefore the link requests ought to be in reference to the patient reference and care-context references previously returned by the HIP. The correlation of discovery and link request is maintained through the transactionId. HIP should have   1. **Validated transactionId in the request to check whether there was a discovery done previously, and the link request corresponds to returned patient care care context references**   2. **Before returning the response, HIP should have sent an authentication request to the patient(eg: OTP verification)**   3. **HIP should communicate the mode of authentication of a successful request**   4. **HIP subsequently should expect the token passed via /link/confirm against the link.referenceNumber passed in this call**                        The error section in the body, represents the potential errors that may have occurred. Possible reasons:   1. **Patient reference number is invalid**   2. **Care context reference numbers are invalid** 
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientLinkReferenceResult  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Format mismatch of any of attributes.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05LinksLinkOnInitPost_0Async(String authorization, String X_CM_ID, PatientLinkReferenceResult patientLinkReferenceResult, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v05LinksLinkOnInitPost_0ValidateBeforeCall(authorization, X_CM_ID, patientLinkReferenceResult, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v05PatientsSmsNotifyPost
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientSMSNotifcationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * required information not provided  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05PatientsSmsNotifyPostCall(String authorization, String X_CM_ID, PatientSMSNotifcationRequest patientSMSNotifcationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patientSMSNotifcationRequest;

        // create path and map variables
        String localVarPath = "/v0.5/patients/sms/notify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (X_CM_ID != null) {
            localVarHeaderParams.put("X-CM-ID", localVarApiClient.parameterToString(X_CM_ID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v05PatientsSmsNotifyPostValidateBeforeCall(String authorization, String X_CM_ID, PatientSMSNotifcationRequest patientSMSNotifcationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v05PatientsSmsNotifyPost(Async)");
        }

        // verify the required parameter 'X_CM_ID' is set
        if (X_CM_ID == null) {
            throw new ApiException("Missing the required parameter 'X_CM_ID' when calling v05PatientsSmsNotifyPost(Async)");
        }

        // verify the required parameter 'patientSMSNotifcationRequest' is set
        if (patientSMSNotifcationRequest == null) {
            throw new ApiException("Missing the required parameter 'patientSMSNotifcationRequest' when calling v05PatientsSmsNotifyPost(Async)");
        }

        return v05PatientsSmsNotifyPostCall(authorization, X_CM_ID, patientSMSNotifcationRequest, _callback);

    }

    /**
     * API for HIP to send SMS notifications to patients
     * API to send SMS notifications to patient with custom deeplink. 
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientSMSNotifcationRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * required information not provided  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public void v05PatientsSmsNotifyPost(String authorization, String X_CM_ID, PatientSMSNotifcationRequest patientSMSNotifcationRequest) throws ApiException {
        v05PatientsSmsNotifyPostWithHttpInfo(authorization, X_CM_ID, patientSMSNotifcationRequest);
    }

    /**
     * API for HIP to send SMS notifications to patients
     * API to send SMS notifications to patient with custom deeplink. 
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientSMSNotifcationRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * required information not provided  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v05PatientsSmsNotifyPostWithHttpInfo(String authorization, String X_CM_ID, PatientSMSNotifcationRequest patientSMSNotifcationRequest) throws ApiException {
        okhttp3.Call localVarCall = v05PatientsSmsNotifyPostValidateBeforeCall(authorization, X_CM_ID, patientSMSNotifcationRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * API for HIP to send SMS notifications to patients (asynchronously)
     * API to send SMS notifications to patient with custom deeplink. 
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientSMSNotifcationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * required information not provided  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05PatientsSmsNotifyPostAsync(String authorization, String X_CM_ID, PatientSMSNotifcationRequest patientSMSNotifcationRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v05PatientsSmsNotifyPostValidateBeforeCall(authorization, X_CM_ID, patientSMSNotifcationRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v05UsersAuthConfirmPost_0
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientAuthConfirmRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * transaction id is not provided or invalid   * token or other auth confirmation details not provided or invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05UsersAuthConfirmPost_0Call(String authorization, String X_CM_ID, PatientAuthConfirmRequest patientAuthConfirmRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patientAuthConfirmRequest;

        // create path and map variables
        String localVarPath = "/v0.5/users/auth/confirm";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (X_CM_ID != null) {
            localVarHeaderParams.put("X-CM-ID", localVarApiClient.parameterToString(X_CM_ID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v05UsersAuthConfirmPost_0ValidateBeforeCall(String authorization, String X_CM_ID, PatientAuthConfirmRequest patientAuthConfirmRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v05UsersAuthConfirmPost_0(Async)");
        }

        // verify the required parameter 'X_CM_ID' is set
        if (X_CM_ID == null) {
            throw new ApiException("Missing the required parameter 'X_CM_ID' when calling v05UsersAuthConfirmPost_0(Async)");
        }

        // verify the required parameter 'patientAuthConfirmRequest' is set
        if (patientAuthConfirmRequest == null) {
            throw new ApiException("Missing the required parameter 'patientAuthConfirmRequest' when calling v05UsersAuthConfirmPost_0(Async)");
        }

        return v05UsersAuthConfirmPost_0Call(authorization, X_CM_ID, patientAuthConfirmRequest, _callback);

    }

    /**
     * Confirmation request sending token, otp or other authentication details from HIP/HIU for confirmation
     * This API is called by HIP/HIUs to confirm authentication of users. The transactionId returned by the previous callback API /users/auth/on-init must be sent. If Authentication is successful the callback API will send an \&quot;access token\&quot; for subsequent purpose specific API calls. Note only **credential.authCode** or **credential.demographic** should be sent   1. demographic details are only required for  demographic auth as of now.    2. demographic details are required only in MEDIATED cases and if the **auth.mode** so demands. e.g. if **auth.mode** is DEMOGRAPHICS. Usually for demographic authentication, the name, gender and DOB must be exactly as specified in User Account.   3. demographic.identifier is optional, however maybe required if authentication so mandates.    4. credential.authCode is required for other MEDIATED authentication like MOBILE_OTP, AADHAAR_OTP.  
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientAuthConfirmRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * transaction id is not provided or invalid   * token or other auth confirmation details not provided or invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public void v05UsersAuthConfirmPost_0(String authorization, String X_CM_ID, PatientAuthConfirmRequest patientAuthConfirmRequest) throws ApiException {
        v05UsersAuthConfirmPost_0WithHttpInfo(authorization, X_CM_ID, patientAuthConfirmRequest);
    }

    /**
     * Confirmation request sending token, otp or other authentication details from HIP/HIU for confirmation
     * This API is called by HIP/HIUs to confirm authentication of users. The transactionId returned by the previous callback API /users/auth/on-init must be sent. If Authentication is successful the callback API will send an \&quot;access token\&quot; for subsequent purpose specific API calls. Note only **credential.authCode** or **credential.demographic** should be sent   1. demographic details are only required for  demographic auth as of now.    2. demographic details are required only in MEDIATED cases and if the **auth.mode** so demands. e.g. if **auth.mode** is DEMOGRAPHICS. Usually for demographic authentication, the name, gender and DOB must be exactly as specified in User Account.   3. demographic.identifier is optional, however maybe required if authentication so mandates.    4. credential.authCode is required for other MEDIATED authentication like MOBILE_OTP, AADHAAR_OTP.  
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientAuthConfirmRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * transaction id is not provided or invalid   * token or other auth confirmation details not provided or invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v05UsersAuthConfirmPost_0WithHttpInfo(String authorization, String X_CM_ID, PatientAuthConfirmRequest patientAuthConfirmRequest) throws ApiException {
        okhttp3.Call localVarCall = v05UsersAuthConfirmPost_0ValidateBeforeCall(authorization, X_CM_ID, patientAuthConfirmRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Confirmation request sending token, otp or other authentication details from HIP/HIU for confirmation (asynchronously)
     * This API is called by HIP/HIUs to confirm authentication of users. The transactionId returned by the previous callback API /users/auth/on-init must be sent. If Authentication is successful the callback API will send an \&quot;access token\&quot; for subsequent purpose specific API calls. Note only **credential.authCode** or **credential.demographic** should be sent   1. demographic details are only required for  demographic auth as of now.    2. demographic details are required only in MEDIATED cases and if the **auth.mode** so demands. e.g. if **auth.mode** is DEMOGRAPHICS. Usually for demographic authentication, the name, gender and DOB must be exactly as specified in User Account.   3. demographic.identifier is optional, however maybe required if authentication so mandates.    4. credential.authCode is required for other MEDIATED authentication like MOBILE_OTP, AADHAAR_OTP.  
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientAuthConfirmRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * transaction id is not provided or invalid   * token or other auth confirmation details not provided or invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05UsersAuthConfirmPost_0Async(String authorization, String X_CM_ID, PatientAuthConfirmRequest patientAuthConfirmRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v05UsersAuthConfirmPost_0ValidateBeforeCall(authorization, X_CM_ID, patientAuthConfirmRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v05UsersAuthFetchModesPost_0
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientAuthModeQueryRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request, required attributes not provided  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05UsersAuthFetchModesPost_0Call(String authorization, String X_CM_ID, PatientAuthModeQueryRequest patientAuthModeQueryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patientAuthModeQueryRequest;

        // create path and map variables
        String localVarPath = "/v0.5/users/auth/fetch-modes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (X_CM_ID != null) {
            localVarHeaderParams.put("X-CM-ID", localVarApiClient.parameterToString(X_CM_ID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v05UsersAuthFetchModesPost_0ValidateBeforeCall(String authorization, String X_CM_ID, PatientAuthModeQueryRequest patientAuthModeQueryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v05UsersAuthFetchModesPost_0(Async)");
        }

        // verify the required parameter 'X_CM_ID' is set
        if (X_CM_ID == null) {
            throw new ApiException("Missing the required parameter 'X_CM_ID' when calling v05UsersAuthFetchModesPost_0(Async)");
        }

        // verify the required parameter 'patientAuthModeQueryRequest' is set
        if (patientAuthModeQueryRequest == null) {
            throw new ApiException("Missing the required parameter 'patientAuthModeQueryRequest' when calling v05UsersAuthFetchModesPost_0(Async)");
        }

        return v05UsersAuthFetchModesPost_0Call(authorization, X_CM_ID, patientAuthModeQueryRequest, _callback);

    }

    /**
     * Get a patient&#39;s authentication modes relevant to specified purpose
     * This API is meant for identify supported authentication modes for a patient given a specific purpose 
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientAuthModeQueryRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request, required attributes not provided  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public void v05UsersAuthFetchModesPost_0(String authorization, String X_CM_ID, PatientAuthModeQueryRequest patientAuthModeQueryRequest) throws ApiException {
        v05UsersAuthFetchModesPost_0WithHttpInfo(authorization, X_CM_ID, patientAuthModeQueryRequest);
    }

    /**
     * Get a patient&#39;s authentication modes relevant to specified purpose
     * This API is meant for identify supported authentication modes for a patient given a specific purpose 
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientAuthModeQueryRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request, required attributes not provided  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v05UsersAuthFetchModesPost_0WithHttpInfo(String authorization, String X_CM_ID, PatientAuthModeQueryRequest patientAuthModeQueryRequest) throws ApiException {
        okhttp3.Call localVarCall = v05UsersAuthFetchModesPost_0ValidateBeforeCall(authorization, X_CM_ID, patientAuthModeQueryRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get a patient&#39;s authentication modes relevant to specified purpose (asynchronously)
     * This API is meant for identify supported authentication modes for a patient given a specific purpose 
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientAuthModeQueryRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request, required attributes not provided  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05UsersAuthFetchModesPost_0Async(String authorization, String X_CM_ID, PatientAuthModeQueryRequest patientAuthModeQueryRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v05UsersAuthFetchModesPost_0ValidateBeforeCall(authorization, X_CM_ID, patientAuthModeQueryRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v05UsersAuthInitPost_0
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientAuthInitRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * patient id is not provided  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05UsersAuthInitPost_0Call(String authorization, String X_CM_ID, PatientAuthInitRequest patientAuthInitRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patientAuthInitRequest;

        // create path and map variables
        String localVarPath = "/v0.5/users/auth/init";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (X_CM_ID != null) {
            localVarHeaderParams.put("X-CM-ID", localVarApiClient.parameterToString(X_CM_ID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v05UsersAuthInitPost_0ValidateBeforeCall(String authorization, String X_CM_ID, PatientAuthInitRequest patientAuthInitRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v05UsersAuthInitPost_0(Async)");
        }

        // verify the required parameter 'X_CM_ID' is set
        if (X_CM_ID == null) {
            throw new ApiException("Missing the required parameter 'X_CM_ID' when calling v05UsersAuthInitPost_0(Async)");
        }

        // verify the required parameter 'patientAuthInitRequest' is set
        if (patientAuthInitRequest == null) {
            throw new ApiException("Missing the required parameter 'patientAuthInitRequest' when calling v05UsersAuthInitPost_0(Async)");
        }

        return v05UsersAuthInitPost_0Call(authorization, X_CM_ID, patientAuthInitRequest, _callback);

    }

    /**
     * Initialize authentication from HIP
     * This API is called by HIPs to initiate authentication of users. A transactionId is retuned by the corresponding callback API for confirmation of user auth. 
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientAuthInitRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * patient id is not provided  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public void v05UsersAuthInitPost_0(String authorization, String X_CM_ID, PatientAuthInitRequest patientAuthInitRequest) throws ApiException {
        v05UsersAuthInitPost_0WithHttpInfo(authorization, X_CM_ID, patientAuthInitRequest);
    }

    /**
     * Initialize authentication from HIP
     * This API is called by HIPs to initiate authentication of users. A transactionId is retuned by the corresponding callback API for confirmation of user auth. 
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientAuthInitRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * patient id is not provided  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v05UsersAuthInitPost_0WithHttpInfo(String authorization, String X_CM_ID, PatientAuthInitRequest patientAuthInitRequest) throws ApiException {
        okhttp3.Call localVarCall = v05UsersAuthInitPost_0ValidateBeforeCall(authorization, X_CM_ID, patientAuthInitRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Initialize authentication from HIP (asynchronously)
     * This API is called by HIPs to initiate authentication of users. A transactionId is retuned by the corresponding callback API for confirmation of user auth. 
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientAuthInitRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * patient id is not provided  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05UsersAuthInitPost_0Async(String authorization, String X_CM_ID, PatientAuthInitRequest patientAuthInitRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v05UsersAuthInitPost_0ValidateBeforeCall(authorization, X_CM_ID, patientAuthInitRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v05UsersAuthOnNotifyPost_0
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientAuthNotificationAcknowledgement  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * required details not provided   * neither auth nor error specified   </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05UsersAuthOnNotifyPost_0Call(String authorization, String X_CM_ID, PatientAuthNotificationAcknowledgement patientAuthNotificationAcknowledgement, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patientAuthNotificationAcknowledgement;

        // create path and map variables
        String localVarPath = "/v0.5/users/auth/on-notify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (X_CM_ID != null) {
            localVarHeaderParams.put("X-CM-ID", localVarApiClient.parameterToString(X_CM_ID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v05UsersAuthOnNotifyPost_0ValidateBeforeCall(String authorization, String X_CM_ID, PatientAuthNotificationAcknowledgement patientAuthNotificationAcknowledgement, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v05UsersAuthOnNotifyPost_0(Async)");
        }

        // verify the required parameter 'X_CM_ID' is set
        if (X_CM_ID == null) {
            throw new ApiException("Missing the required parameter 'X_CM_ID' when calling v05UsersAuthOnNotifyPost_0(Async)");
        }

        // verify the required parameter 'patientAuthNotificationAcknowledgement' is set
        if (patientAuthNotificationAcknowledgement == null) {
            throw new ApiException("Missing the required parameter 'patientAuthNotificationAcknowledgement' when calling v05UsersAuthOnNotifyPost_0(Async)");
        }

        return v05UsersAuthOnNotifyPost_0Call(authorization, X_CM_ID, patientAuthNotificationAcknowledgement, _callback);

    }

    /**
     * callback API by HIU/HIPs as acknowledgement of auth notification
     * This API is called by HIU/HIPs to confirm acknowledgement for receipt of auth notification is case of DIRECT authentication.  
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientAuthNotificationAcknowledgement  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * required details not provided   * neither auth nor error specified   </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public void v05UsersAuthOnNotifyPost_0(String authorization, String X_CM_ID, PatientAuthNotificationAcknowledgement patientAuthNotificationAcknowledgement) throws ApiException {
        v05UsersAuthOnNotifyPost_0WithHttpInfo(authorization, X_CM_ID, patientAuthNotificationAcknowledgement);
    }

    /**
     * callback API by HIU/HIPs as acknowledgement of auth notification
     * This API is called by HIU/HIPs to confirm acknowledgement for receipt of auth notification is case of DIRECT authentication.  
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientAuthNotificationAcknowledgement  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * required details not provided   * neither auth nor error specified   </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v05UsersAuthOnNotifyPost_0WithHttpInfo(String authorization, String X_CM_ID, PatientAuthNotificationAcknowledgement patientAuthNotificationAcknowledgement) throws ApiException {
        okhttp3.Call localVarCall = v05UsersAuthOnNotifyPost_0ValidateBeforeCall(authorization, X_CM_ID, patientAuthNotificationAcknowledgement, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * callback API by HIU/HIPs as acknowledgement of auth notification (asynchronously)
     * This API is called by HIU/HIPs to confirm acknowledgement for receipt of auth notification is case of DIRECT authentication.  
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param patientAuthNotificationAcknowledgement  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * required details not provided   * neither auth nor error specified   </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05UsersAuthOnNotifyPost_0Async(String authorization, String X_CM_ID, PatientAuthNotificationAcknowledgement patientAuthNotificationAcknowledgement, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v05UsersAuthOnNotifyPost_0ValidateBeforeCall(authorization, X_CM_ID, patientAuthNotificationAcknowledgement, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
