/*
 * Gateway
 * Gateway is the hub that routes/orchestrates the interaction between consent managers and API bridges. There are 5 categories of APIs; discovery, link, consent flow, data flow and  monitoring. To reflect the consumers of APIs, the above apis are also categorized under cm facing, hiu facing and hip facing  
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ConsentArtefactResponse;
import org.openapitools.client.model.ConsentFetchRequest;
import org.openapitools.client.model.ConsentRequest;
import org.openapitools.client.model.ConsentRequestInitResponse;
import org.openapitools.client.model.ConsentRequestStatusRequest;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.HIPConsentNotification;
import org.openapitools.client.model.HIPConsentNotificationResponse;
import org.openapitools.client.model.HIUConsentNotificationEvent;
import org.openapitools.client.model.HIUConsentNotificationResponse;
import org.openapitools.client.model.HIUConsentRequestStatus;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConsentFlowApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ConsentFlowApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConsentFlowApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v05ConsentRequestsInitPost
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param consentRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Invalid data sent    * Required attributes not mentioned  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Expired/Invalid token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05ConsentRequestsInitPostCall(String authorization, String X_CM_ID, ConsentRequest consentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = consentRequest;

        // create path and map variables
        String localVarPath = "/v0.5/consent-requests/init";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (X_CM_ID != null) {
            localVarHeaderParams.put("X-CM-ID", localVarApiClient.parameterToString(X_CM_ID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v05ConsentRequestsInitPostValidateBeforeCall(String authorization, String X_CM_ID, ConsentRequest consentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v05ConsentRequestsInitPost(Async)");
        }

        // verify the required parameter 'X_CM_ID' is set
        if (X_CM_ID == null) {
            throw new ApiException("Missing the required parameter 'X_CM_ID' when calling v05ConsentRequestsInitPost(Async)");
        }

        // verify the required parameter 'consentRequest' is set
        if (consentRequest == null) {
            throw new ApiException("Missing the required parameter 'consentRequest' when calling v05ConsentRequestsInitPost(Async)");
        }

        return v05ConsentRequestsInitPostCall(authorization, X_CM_ID, consentRequest, _callback);

    }

    /**
     * Create consent request
     * Creates a consent request to get data about a patient by HIU user.
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param consentRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Invalid data sent    * Required attributes not mentioned  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Expired/Invalid token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public void v05ConsentRequestsInitPost(String authorization, String X_CM_ID, ConsentRequest consentRequest) throws ApiException {
        v05ConsentRequestsInitPostWithHttpInfo(authorization, X_CM_ID, consentRequest);
    }

    /**
     * Create consent request
     * Creates a consent request to get data about a patient by HIU user.
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param consentRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Invalid data sent    * Required attributes not mentioned  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Expired/Invalid token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v05ConsentRequestsInitPostWithHttpInfo(String authorization, String X_CM_ID, ConsentRequest consentRequest) throws ApiException {
        okhttp3.Call localVarCall = v05ConsentRequestsInitPostValidateBeforeCall(authorization, X_CM_ID, consentRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create consent request (asynchronously)
     * Creates a consent request to get data about a patient by HIU user.
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param consentRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Invalid data sent    * Required attributes not mentioned  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Expired/Invalid token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05ConsentRequestsInitPostAsync(String authorization, String X_CM_ID, ConsentRequest consentRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v05ConsentRequestsInitPostValidateBeforeCall(authorization, X_CM_ID, consentRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v05ConsentRequestsOnInitPost
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended. (required)
     * @param consentRequestInitResponse  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Invalid data sent  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Expired/Invalid token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05ConsentRequestsOnInitPostCall(String authorization, String X_HIU_ID, ConsentRequestInitResponse consentRequestInitResponse, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = consentRequestInitResponse;

        // create path and map variables
        String localVarPath = "/v0.5/consent-requests/on-init";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (X_HIU_ID != null) {
            localVarHeaderParams.put("X-HIU-ID", localVarApiClient.parameterToString(X_HIU_ID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v05ConsentRequestsOnInitPostValidateBeforeCall(String authorization, String X_HIU_ID, ConsentRequestInitResponse consentRequestInitResponse, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v05ConsentRequestsOnInitPost(Async)");
        }

        // verify the required parameter 'X_HIU_ID' is set
        if (X_HIU_ID == null) {
            throw new ApiException("Missing the required parameter 'X_HIU_ID' when calling v05ConsentRequestsOnInitPost(Async)");
        }

        // verify the required parameter 'consentRequestInitResponse' is set
        if (consentRequestInitResponse == null) {
            throw new ApiException("Missing the required parameter 'consentRequestInitResponse' when calling v05ConsentRequestsOnInitPost(Async)");
        }

        return v05ConsentRequestsOnInitPostCall(authorization, X_HIU_ID, consentRequestInitResponse, _callback);

    }

    /**
     * Response to consent request
     * Result of consent request creation for a patient. **consentRequest.id** represents the consentrequest id created by CM. The result must contain either **consentRequest** or the **error** caused. &lt;br/&gt;   Reasons for error may be   * Invalid references (e.g patient id, hiu id), purpose, hiTypes, ranges, persmission 
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended. (required)
     * @param consentRequestInitResponse  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Invalid data sent  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Expired/Invalid token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public void v05ConsentRequestsOnInitPost(String authorization, String X_HIU_ID, ConsentRequestInitResponse consentRequestInitResponse) throws ApiException {
        v05ConsentRequestsOnInitPostWithHttpInfo(authorization, X_HIU_ID, consentRequestInitResponse);
    }

    /**
     * Response to consent request
     * Result of consent request creation for a patient. **consentRequest.id** represents the consentrequest id created by CM. The result must contain either **consentRequest** or the **error** caused. &lt;br/&gt;   Reasons for error may be   * Invalid references (e.g patient id, hiu id), purpose, hiTypes, ranges, persmission 
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended. (required)
     * @param consentRequestInitResponse  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Invalid data sent  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Expired/Invalid token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v05ConsentRequestsOnInitPostWithHttpInfo(String authorization, String X_HIU_ID, ConsentRequestInitResponse consentRequestInitResponse) throws ApiException {
        okhttp3.Call localVarCall = v05ConsentRequestsOnInitPostValidateBeforeCall(authorization, X_HIU_ID, consentRequestInitResponse, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Response to consent request (asynchronously)
     * Result of consent request creation for a patient. **consentRequest.id** represents the consentrequest id created by CM. The result must contain either **consentRequest** or the **error** caused. &lt;br/&gt;   Reasons for error may be   * Invalid references (e.g patient id, hiu id), purpose, hiTypes, ranges, persmission 
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended. (required)
     * @param consentRequestInitResponse  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Invalid data sent  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Expired/Invalid token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05ConsentRequestsOnInitPostAsync(String authorization, String X_HIU_ID, ConsentRequestInitResponse consentRequestInitResponse, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v05ConsentRequestsOnInitPostValidateBeforeCall(authorization, X_HIU_ID, consentRequestInitResponse, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v05ConsentRequestsOnStatusPost
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended. (required)
     * @param hiUConsentRequestStatus  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Invalid data sent  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Expired/Invalid token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05ConsentRequestsOnStatusPostCall(String authorization, String X_HIU_ID, HIUConsentRequestStatus hiUConsentRequestStatus, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = hiUConsentRequestStatus;

        // create path and map variables
        String localVarPath = "/v0.5/consent-requests/on-status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (X_HIU_ID != null) {
            localVarHeaderParams.put("X-HIU-ID", localVarApiClient.parameterToString(X_HIU_ID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v05ConsentRequestsOnStatusPostValidateBeforeCall(String authorization, String X_HIU_ID, HIUConsentRequestStatus hiUConsentRequestStatus, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v05ConsentRequestsOnStatusPost(Async)");
        }

        // verify the required parameter 'X_HIU_ID' is set
        if (X_HIU_ID == null) {
            throw new ApiException("Missing the required parameter 'X_HIU_ID' when calling v05ConsentRequestsOnStatusPost(Async)");
        }

        // verify the required parameter 'hiUConsentRequestStatus' is set
        if (hiUConsentRequestStatus == null) {
            throw new ApiException("Missing the required parameter 'hiUConsentRequestStatus' when calling v05ConsentRequestsOnStatusPost(Async)");
        }

        return v05ConsentRequestsOnStatusPostCall(authorization, X_HIU_ID, hiUConsentRequestStatus, _callback);

    }

    /**
     * Result of consent request status
     * Result of consent request done previously. Status of request can be GRANTED,  DENIED, EXPIRED. If the request was GRANTED, then  
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended. (required)
     * @param hiUConsentRequestStatus  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Invalid data sent  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Expired/Invalid token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public void v05ConsentRequestsOnStatusPost(String authorization, String X_HIU_ID, HIUConsentRequestStatus hiUConsentRequestStatus) throws ApiException {
        v05ConsentRequestsOnStatusPostWithHttpInfo(authorization, X_HIU_ID, hiUConsentRequestStatus);
    }

    /**
     * Result of consent request status
     * Result of consent request done previously. Status of request can be GRANTED,  DENIED, EXPIRED. If the request was GRANTED, then  
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended. (required)
     * @param hiUConsentRequestStatus  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Invalid data sent  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Expired/Invalid token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v05ConsentRequestsOnStatusPostWithHttpInfo(String authorization, String X_HIU_ID, HIUConsentRequestStatus hiUConsentRequestStatus) throws ApiException {
        okhttp3.Call localVarCall = v05ConsentRequestsOnStatusPostValidateBeforeCall(authorization, X_HIU_ID, hiUConsentRequestStatus, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Result of consent request status (asynchronously)
     * Result of consent request done previously. Status of request can be GRANTED,  DENIED, EXPIRED. If the request was GRANTED, then  
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended. (required)
     * @param hiUConsentRequestStatus  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Invalid data sent  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Expired/Invalid token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05ConsentRequestsOnStatusPostAsync(String authorization, String X_HIU_ID, HIUConsentRequestStatus hiUConsentRequestStatus, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v05ConsentRequestsOnStatusPostValidateBeforeCall(authorization, X_HIU_ID, hiUConsentRequestStatus, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v05ConsentRequestsStatusPost
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param consentRequestStatusRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Invalid data sent  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Expired/Invalid token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05ConsentRequestsStatusPostCall(String authorization, String X_CM_ID, ConsentRequestStatusRequest consentRequestStatusRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = consentRequestStatusRequest;

        // create path and map variables
        String localVarPath = "/v0.5/consent-requests/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (X_CM_ID != null) {
            localVarHeaderParams.put("X-CM-ID", localVarApiClient.parameterToString(X_CM_ID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v05ConsentRequestsStatusPostValidateBeforeCall(String authorization, String X_CM_ID, ConsentRequestStatusRequest consentRequestStatusRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v05ConsentRequestsStatusPost(Async)");
        }

        // verify the required parameter 'X_CM_ID' is set
        if (X_CM_ID == null) {
            throw new ApiException("Missing the required parameter 'X_CM_ID' when calling v05ConsentRequestsStatusPost(Async)");
        }

        // verify the required parameter 'consentRequestStatusRequest' is set
        if (consentRequestStatusRequest == null) {
            throw new ApiException("Missing the required parameter 'consentRequestStatusRequest' when calling v05ConsentRequestsStatusPost(Async)");
        }

        return v05ConsentRequestsStatusPostCall(authorization, X_CM_ID, consentRequestStatusRequest, _callback);

    }

    /**
     * Get consent request status
     * Get status of consent request done previously
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param consentRequestStatusRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Invalid data sent  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Expired/Invalid token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public void v05ConsentRequestsStatusPost(String authorization, String X_CM_ID, ConsentRequestStatusRequest consentRequestStatusRequest) throws ApiException {
        v05ConsentRequestsStatusPostWithHttpInfo(authorization, X_CM_ID, consentRequestStatusRequest);
    }

    /**
     * Get consent request status
     * Get status of consent request done previously
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param consentRequestStatusRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Invalid data sent  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Expired/Invalid token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v05ConsentRequestsStatusPostWithHttpInfo(String authorization, String X_CM_ID, ConsentRequestStatusRequest consentRequestStatusRequest) throws ApiException {
        okhttp3.Call localVarCall = v05ConsentRequestsStatusPostValidateBeforeCall(authorization, X_CM_ID, consentRequestStatusRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get consent request status (asynchronously)
     * Get status of consent request done previously
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param consentRequestStatusRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Invalid data sent  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Expired/Invalid token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05ConsentRequestsStatusPostAsync(String authorization, String X_CM_ID, ConsentRequestStatusRequest consentRequestStatusRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v05ConsentRequestsStatusPostValidateBeforeCall(authorization, X_CM_ID, consentRequestStatusRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v05ConsentsFetchPost
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param consentFetchRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Invalid data sent  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Expired/Invalid token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05ConsentsFetchPostCall(String authorization, String X_CM_ID, ConsentFetchRequest consentFetchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = consentFetchRequest;

        // create path and map variables
        String localVarPath = "/v0.5/consents/fetch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (X_CM_ID != null) {
            localVarHeaderParams.put("X-CM-ID", localVarApiClient.parameterToString(X_CM_ID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v05ConsentsFetchPostValidateBeforeCall(String authorization, String X_CM_ID, ConsentFetchRequest consentFetchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v05ConsentsFetchPost(Async)");
        }

        // verify the required parameter 'X_CM_ID' is set
        if (X_CM_ID == null) {
            throw new ApiException("Missing the required parameter 'X_CM_ID' when calling v05ConsentsFetchPost(Async)");
        }

        // verify the required parameter 'consentFetchRequest' is set
        if (consentFetchRequest == null) {
            throw new ApiException("Missing the required parameter 'consentFetchRequest' when calling v05ConsentsFetchPost(Async)");
        }

        return v05ConsentsFetchPostCall(authorization, X_CM_ID, consentFetchRequest, _callback);

    }

    /**
     * Get consent artefact
     * 
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param consentFetchRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Invalid data sent  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Expired/Invalid token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public void v05ConsentsFetchPost(String authorization, String X_CM_ID, ConsentFetchRequest consentFetchRequest) throws ApiException {
        v05ConsentsFetchPostWithHttpInfo(authorization, X_CM_ID, consentFetchRequest);
    }

    /**
     * Get consent artefact
     * 
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param consentFetchRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Invalid data sent  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Expired/Invalid token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v05ConsentsFetchPostWithHttpInfo(String authorization, String X_CM_ID, ConsentFetchRequest consentFetchRequest) throws ApiException {
        okhttp3.Call localVarCall = v05ConsentsFetchPostValidateBeforeCall(authorization, X_CM_ID, consentFetchRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get consent artefact (asynchronously)
     * 
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param consentFetchRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Invalid data sent  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Expired/Invalid token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05ConsentsFetchPostAsync(String authorization, String X_CM_ID, ConsentFetchRequest consentFetchRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v05ConsentsFetchPostValidateBeforeCall(authorization, X_CM_ID, consentFetchRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v05ConsentsHipNotifyPost
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_HIP_ID Identifier of the health information provider to which the request was intended. (required)
     * @param hiPConsentNotification  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Invalid/Expired/Empty token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream services are down  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05ConsentsHipNotifyPostCall(String authorization, String X_HIP_ID, HIPConsentNotification hiPConsentNotification, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = hiPConsentNotification;

        // create path and map variables
        String localVarPath = "/v0.5/consents/hip/notify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (X_HIP_ID != null) {
            localVarHeaderParams.put("X-HIP-ID", localVarApiClient.parameterToString(X_HIP_ID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v05ConsentsHipNotifyPostValidateBeforeCall(String authorization, String X_HIP_ID, HIPConsentNotification hiPConsentNotification, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v05ConsentsHipNotifyPost(Async)");
        }

        // verify the required parameter 'X_HIP_ID' is set
        if (X_HIP_ID == null) {
            throw new ApiException("Missing the required parameter 'X_HIP_ID' when calling v05ConsentsHipNotifyPost(Async)");
        }

        // verify the required parameter 'hiPConsentNotification' is set
        if (hiPConsentNotification == null) {
            throw new ApiException("Missing the required parameter 'hiPConsentNotification' when calling v05ConsentsHipNotifyPost(Async)");
        }

        return v05ConsentsHipNotifyPostCall(authorization, X_HIP_ID, hiPConsentNotification, _callback);

    }

    /**
     * Consent notification
     * Notification of consents to health information providers consent request granted, consent revoked, consent expired. Only the GRANTED, REVOKED and EXPIRED status notifications will be sent to HIP.   1. If consent is granted, status&#x3D;GRANTED, then consentDetail contains the consent artefact details and signature is available.    2. If consent is revoked, then status&#x3D;REVOKED, and consentId specifes which consent artefact is revoked.    3. If the consent has expired, then status&#x3D;EXPIRED, and consentId specifies which consent artefact has expired. Note, this is also responsibility of the HIP to keep track of consent expiry. Any data request on expired consent artefact must not be done.  
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_HIP_ID Identifier of the health information provider to which the request was intended. (required)
     * @param hiPConsentNotification  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Invalid/Expired/Empty token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream services are down  </td><td>  -  </td></tr>
     </table>
     */
    public void v05ConsentsHipNotifyPost(String authorization, String X_HIP_ID, HIPConsentNotification hiPConsentNotification) throws ApiException {
        v05ConsentsHipNotifyPostWithHttpInfo(authorization, X_HIP_ID, hiPConsentNotification);
    }

    /**
     * Consent notification
     * Notification of consents to health information providers consent request granted, consent revoked, consent expired. Only the GRANTED, REVOKED and EXPIRED status notifications will be sent to HIP.   1. If consent is granted, status&#x3D;GRANTED, then consentDetail contains the consent artefact details and signature is available.    2. If consent is revoked, then status&#x3D;REVOKED, and consentId specifes which consent artefact is revoked.    3. If the consent has expired, then status&#x3D;EXPIRED, and consentId specifies which consent artefact has expired. Note, this is also responsibility of the HIP to keep track of consent expiry. Any data request on expired consent artefact must not be done.  
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_HIP_ID Identifier of the health information provider to which the request was intended. (required)
     * @param hiPConsentNotification  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Invalid/Expired/Empty token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream services are down  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v05ConsentsHipNotifyPostWithHttpInfo(String authorization, String X_HIP_ID, HIPConsentNotification hiPConsentNotification) throws ApiException {
        okhttp3.Call localVarCall = v05ConsentsHipNotifyPostValidateBeforeCall(authorization, X_HIP_ID, hiPConsentNotification, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Consent notification (asynchronously)
     * Notification of consents to health information providers consent request granted, consent revoked, consent expired. Only the GRANTED, REVOKED and EXPIRED status notifications will be sent to HIP.   1. If consent is granted, status&#x3D;GRANTED, then consentDetail contains the consent artefact details and signature is available.    2. If consent is revoked, then status&#x3D;REVOKED, and consentId specifes which consent artefact is revoked.    3. If the consent has expired, then status&#x3D;EXPIRED, and consentId specifies which consent artefact has expired. Note, this is also responsibility of the HIP to keep track of consent expiry. Any data request on expired consent artefact must not be done.  
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_HIP_ID Identifier of the health information provider to which the request was intended. (required)
     * @param hiPConsentNotification  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Invalid/Expired/Empty token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream services are down  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05ConsentsHipNotifyPostAsync(String authorization, String X_HIP_ID, HIPConsentNotification hiPConsentNotification, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v05ConsentsHipNotifyPostValidateBeforeCall(authorization, X_HIP_ID, hiPConsentNotification, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v05ConsentsHipOnNotifyPost
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param hiPConsentNotificationResponse  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Invalid/Expired/Empty token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream services are down  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05ConsentsHipOnNotifyPostCall(String authorization, String X_CM_ID, HIPConsentNotificationResponse hiPConsentNotificationResponse, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = hiPConsentNotificationResponse;

        // create path and map variables
        String localVarPath = "/v0.5/consents/hip/on-notify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (X_CM_ID != null) {
            localVarHeaderParams.put("X-CM-ID", localVarApiClient.parameterToString(X_CM_ID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v05ConsentsHipOnNotifyPostValidateBeforeCall(String authorization, String X_CM_ID, HIPConsentNotificationResponse hiPConsentNotificationResponse, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v05ConsentsHipOnNotifyPost(Async)");
        }

        // verify the required parameter 'X_CM_ID' is set
        if (X_CM_ID == null) {
            throw new ApiException("Missing the required parameter 'X_CM_ID' when calling v05ConsentsHipOnNotifyPost(Async)");
        }

        // verify the required parameter 'hiPConsentNotificationResponse' is set
        if (hiPConsentNotificationResponse == null) {
            throw new ApiException("Missing the required parameter 'hiPConsentNotificationResponse' when calling v05ConsentsHipOnNotifyPost(Async)");
        }

        return v05ConsentsHipOnNotifyPostCall(authorization, X_CM_ID, hiPConsentNotificationResponse, _callback);

    }

    /**
     * Consent notification
     * This API is called by HIP as acknowledgement to notification of consents, in cases of consent revocation and expiration.  
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param hiPConsentNotificationResponse  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Invalid/Expired/Empty token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream services are down  </td><td>  -  </td></tr>
     </table>
     */
    public void v05ConsentsHipOnNotifyPost(String authorization, String X_CM_ID, HIPConsentNotificationResponse hiPConsentNotificationResponse) throws ApiException {
        v05ConsentsHipOnNotifyPostWithHttpInfo(authorization, X_CM_ID, hiPConsentNotificationResponse);
    }

    /**
     * Consent notification
     * This API is called by HIP as acknowledgement to notification of consents, in cases of consent revocation and expiration.  
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param hiPConsentNotificationResponse  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Invalid/Expired/Empty token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream services are down  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v05ConsentsHipOnNotifyPostWithHttpInfo(String authorization, String X_CM_ID, HIPConsentNotificationResponse hiPConsentNotificationResponse) throws ApiException {
        okhttp3.Call localVarCall = v05ConsentsHipOnNotifyPostValidateBeforeCall(authorization, X_CM_ID, hiPConsentNotificationResponse, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Consent notification (asynchronously)
     * This API is called by HIP as acknowledgement to notification of consents, in cases of consent revocation and expiration.  
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param hiPConsentNotificationResponse  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Invalid/Expired/Empty token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream services are down  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05ConsentsHipOnNotifyPostAsync(String authorization, String X_CM_ID, HIPConsentNotificationResponse hiPConsentNotificationResponse, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v05ConsentsHipOnNotifyPostValidateBeforeCall(authorization, X_CM_ID, hiPConsentNotificationResponse, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v05ConsentsHiuNotifyPost
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended. (required)
     * @param hiUConsentNotificationEvent  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Invalid/Expired/Empty token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream services are down  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05ConsentsHiuNotifyPostCall(String authorization, String X_HIU_ID, HIUConsentNotificationEvent hiUConsentNotificationEvent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = hiUConsentNotificationEvent;

        // create path and map variables
        String localVarPath = "/v0.5/consents/hiu/notify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (X_HIU_ID != null) {
            localVarHeaderParams.put("X-HIU-ID", localVarApiClient.parameterToString(X_HIU_ID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v05ConsentsHiuNotifyPostValidateBeforeCall(String authorization, String X_HIU_ID, HIUConsentNotificationEvent hiUConsentNotificationEvent, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v05ConsentsHiuNotifyPost(Async)");
        }

        // verify the required parameter 'X_HIU_ID' is set
        if (X_HIU_ID == null) {
            throw new ApiException("Missing the required parameter 'X_HIU_ID' when calling v05ConsentsHiuNotifyPost(Async)");
        }

        // verify the required parameter 'hiUConsentNotificationEvent' is set
        if (hiUConsentNotificationEvent == null) {
            throw new ApiException("Missing the required parameter 'hiUConsentNotificationEvent' when calling v05ConsentsHiuNotifyPost(Async)");
        }

        return v05ConsentsHiuNotifyPostCall(authorization, X_HIU_ID, hiUConsentNotificationEvent, _callback);

    }

    /**
     * Consent notification
     * Health information user will get notified about the consent request granted or denied, consent revoked, consent expired.  1. For consent request grant, status&#x3D;GRANTED, consentRequestId&#x3D;&lt;consent-request-id&gt;, and consentArtefacts is an array of generated consent artefact Ids. 2. For consent request expiry, status&#x3D;EXPIRED, consentRequestId&#x3D;&lt;consent-request-id&gt; 3. For consent request denied, status&#x3D;DENIED, consentRequestId&#x3D;&lt;consent-request-id&gt; 4. For consent revocation, status&#x3D;REVOKED, consentArtefacts is an array of revoked consent artefact ids 
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended. (required)
     * @param hiUConsentNotificationEvent  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Invalid/Expired/Empty token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream services are down  </td><td>  -  </td></tr>
     </table>
     */
    public void v05ConsentsHiuNotifyPost(String authorization, String X_HIU_ID, HIUConsentNotificationEvent hiUConsentNotificationEvent) throws ApiException {
        v05ConsentsHiuNotifyPostWithHttpInfo(authorization, X_HIU_ID, hiUConsentNotificationEvent);
    }

    /**
     * Consent notification
     * Health information user will get notified about the consent request granted or denied, consent revoked, consent expired.  1. For consent request grant, status&#x3D;GRANTED, consentRequestId&#x3D;&lt;consent-request-id&gt;, and consentArtefacts is an array of generated consent artefact Ids. 2. For consent request expiry, status&#x3D;EXPIRED, consentRequestId&#x3D;&lt;consent-request-id&gt; 3. For consent request denied, status&#x3D;DENIED, consentRequestId&#x3D;&lt;consent-request-id&gt; 4. For consent revocation, status&#x3D;REVOKED, consentArtefacts is an array of revoked consent artefact ids 
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended. (required)
     * @param hiUConsentNotificationEvent  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Invalid/Expired/Empty token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream services are down  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v05ConsentsHiuNotifyPostWithHttpInfo(String authorization, String X_HIU_ID, HIUConsentNotificationEvent hiUConsentNotificationEvent) throws ApiException {
        okhttp3.Call localVarCall = v05ConsentsHiuNotifyPostValidateBeforeCall(authorization, X_HIU_ID, hiUConsentNotificationEvent, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Consent notification (asynchronously)
     * Health information user will get notified about the consent request granted or denied, consent revoked, consent expired.  1. For consent request grant, status&#x3D;GRANTED, consentRequestId&#x3D;&lt;consent-request-id&gt;, and consentArtefacts is an array of generated consent artefact Ids. 2. For consent request expiry, status&#x3D;EXPIRED, consentRequestId&#x3D;&lt;consent-request-id&gt; 3. For consent request denied, status&#x3D;DENIED, consentRequestId&#x3D;&lt;consent-request-id&gt; 4. For consent revocation, status&#x3D;REVOKED, consentArtefacts is an array of revoked consent artefact ids 
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended. (required)
     * @param hiUConsentNotificationEvent  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Invalid/Expired/Empty token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream services are down  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05ConsentsHiuNotifyPostAsync(String authorization, String X_HIU_ID, HIUConsentNotificationEvent hiUConsentNotificationEvent, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v05ConsentsHiuNotifyPostValidateBeforeCall(authorization, X_HIU_ID, hiUConsentNotificationEvent, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v05ConsentsHiuOnNotifyPost
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param hiUConsentNotificationResponse  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Invalid/Expired/Empty token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream services are down  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05ConsentsHiuOnNotifyPostCall(String authorization, String X_CM_ID, HIUConsentNotificationResponse hiUConsentNotificationResponse, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = hiUConsentNotificationResponse;

        // create path and map variables
        String localVarPath = "/v0.5/consents/hiu/on-notify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (X_CM_ID != null) {
            localVarHeaderParams.put("X-CM-ID", localVarApiClient.parameterToString(X_CM_ID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v05ConsentsHiuOnNotifyPostValidateBeforeCall(String authorization, String X_CM_ID, HIUConsentNotificationResponse hiUConsentNotificationResponse, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v05ConsentsHiuOnNotifyPost(Async)");
        }

        // verify the required parameter 'X_CM_ID' is set
        if (X_CM_ID == null) {
            throw new ApiException("Missing the required parameter 'X_CM_ID' when calling v05ConsentsHiuOnNotifyPost(Async)");
        }

        // verify the required parameter 'hiUConsentNotificationResponse' is set
        if (hiUConsentNotificationResponse == null) {
            throw new ApiException("Missing the required parameter 'hiUConsentNotificationResponse' when calling v05ConsentsHiuOnNotifyPost(Async)");
        }

        return v05ConsentsHiuOnNotifyPostCall(authorization, X_CM_ID, hiUConsentNotificationResponse, _callback);

    }

    /**
     * Consent notification
     * This API is called by HIU as acknowledgement to consent notifications, specifically for cases when consent is REVOKED or EXPIRED. 
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param hiUConsentNotificationResponse  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Invalid/Expired/Empty token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream services are down  </td><td>  -  </td></tr>
     </table>
     */
    public void v05ConsentsHiuOnNotifyPost(String authorization, String X_CM_ID, HIUConsentNotificationResponse hiUConsentNotificationResponse) throws ApiException {
        v05ConsentsHiuOnNotifyPostWithHttpInfo(authorization, X_CM_ID, hiUConsentNotificationResponse);
    }

    /**
     * Consent notification
     * This API is called by HIU as acknowledgement to consent notifications, specifically for cases when consent is REVOKED or EXPIRED. 
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param hiUConsentNotificationResponse  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Invalid/Expired/Empty token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream services are down  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v05ConsentsHiuOnNotifyPostWithHttpInfo(String authorization, String X_CM_ID, HIUConsentNotificationResponse hiUConsentNotificationResponse) throws ApiException {
        okhttp3.Call localVarCall = v05ConsentsHiuOnNotifyPostValidateBeforeCall(authorization, X_CM_ID, hiUConsentNotificationResponse, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Consent notification (asynchronously)
     * This API is called by HIU as acknowledgement to consent notifications, specifically for cases when consent is REVOKED or EXPIRED. 
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param hiUConsentNotificationResponse  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Invalid/Expired/Empty token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream services are down  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05ConsentsHiuOnNotifyPostAsync(String authorization, String X_CM_ID, HIUConsentNotificationResponse hiUConsentNotificationResponse, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v05ConsentsHiuOnNotifyPostValidateBeforeCall(authorization, X_CM_ID, hiUConsentNotificationResponse, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v05ConsentsOnFetchPost
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended. (required)
     * @param consentArtefactResponse  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Invalid data sent  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Expired/Invalid token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05ConsentsOnFetchPostCall(String authorization, String X_HIU_ID, ConsentArtefactResponse consentArtefactResponse, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = consentArtefactResponse;

        // create path and map variables
        String localVarPath = "/v0.5/consents/on-fetch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (X_HIU_ID != null) {
            localVarHeaderParams.put("X-HIU-ID", localVarApiClient.parameterToString(X_HIU_ID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v05ConsentsOnFetchPostValidateBeforeCall(String authorization, String X_HIU_ID, ConsentArtefactResponse consentArtefactResponse, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v05ConsentsOnFetchPost(Async)");
        }

        // verify the required parameter 'X_HIU_ID' is set
        if (X_HIU_ID == null) {
            throw new ApiException("Missing the required parameter 'X_HIU_ID' when calling v05ConsentsOnFetchPost(Async)");
        }

        // verify the required parameter 'consentArtefactResponse' is set
        if (consentArtefactResponse == null) {
            throw new ApiException("Missing the required parameter 'consentArtefactResponse' when calling v05ConsentsOnFetchPost(Async)");
        }

        return v05ConsentsOnFetchPostCall(authorization, X_HIU_ID, consentArtefactResponse, _callback);

    }

    /**
     * Result of fetch request for a consent artefact
     * Must contain either consentDetail or error. Possible reason of errors are  1. consentId passed through /fetch is invalid 
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended. (required)
     * @param consentArtefactResponse  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Invalid data sent  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Expired/Invalid token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public void v05ConsentsOnFetchPost(String authorization, String X_HIU_ID, ConsentArtefactResponse consentArtefactResponse) throws ApiException {
        v05ConsentsOnFetchPostWithHttpInfo(authorization, X_HIU_ID, consentArtefactResponse);
    }

    /**
     * Result of fetch request for a consent artefact
     * Must contain either consentDetail or error. Possible reason of errors are  1. consentId passed through /fetch is invalid 
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended. (required)
     * @param consentArtefactResponse  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Invalid data sent  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Expired/Invalid token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v05ConsentsOnFetchPostWithHttpInfo(String authorization, String X_HIU_ID, ConsentArtefactResponse consentArtefactResponse) throws ApiException {
        okhttp3.Call localVarCall = v05ConsentsOnFetchPostValidateBeforeCall(authorization, X_HIU_ID, consentArtefactResponse, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Result of fetch request for a consent artefact (asynchronously)
     * Must contain either consentDetail or error. Possible reason of errors are  1. consentId passed through /fetch is invalid 
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended. (required)
     * @param consentArtefactResponse  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Invalid data sent  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Expired/Invalid token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05ConsentsOnFetchPostAsync(String authorization, String X_HIU_ID, ConsentArtefactResponse consentArtefactResponse, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v05ConsentsOnFetchPostValidateBeforeCall(authorization, X_HIU_ID, consentArtefactResponse, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
