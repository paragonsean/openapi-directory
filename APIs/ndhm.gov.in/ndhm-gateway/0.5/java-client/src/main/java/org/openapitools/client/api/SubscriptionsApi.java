/*
 * Gateway
 * Gateway is the hub that routes/orchestrates the interaction between consent managers and API bridges. There are 5 categories of APIs; discovery, link, consent flow, data flow and  monitoring. To reflect the consumers of APIs, the above apis are also categorized under cm facing, hiu facing and hip facing  
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.HIUSubscriptionNotification;
import org.openapitools.client.model.HIUSubscriptionNotificationAcknowledgment;
import org.openapitools.client.model.HIUSubscriptionRequestNotificationAcknowledgement;
import org.openapitools.client.model.HIUSubscriptionRequestReceipt;
import org.openapitools.client.model.SubscriptionApprovalNotification;
import org.openapitools.client.model.SubscriptionRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SubscriptionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SubscriptionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SubscriptionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v05SubscriptionRequestsCmInitPost
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param subscriptionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Invalid data sent    * Required attributes not mentioned  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Expired/Invalid token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05SubscriptionRequestsCmInitPostCall(String authorization, String X_CM_ID, SubscriptionRequest subscriptionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = subscriptionRequest;

        // create path and map variables
        String localVarPath = "/v0.5/subscription-requests/cm/init";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (X_CM_ID != null) {
            localVarHeaderParams.put("X-CM-ID", localVarApiClient.parameterToString(X_CM_ID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v05SubscriptionRequestsCmInitPostValidateBeforeCall(String authorization, String X_CM_ID, SubscriptionRequest subscriptionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v05SubscriptionRequestsCmInitPost(Async)");
        }

        // verify the required parameter 'X_CM_ID' is set
        if (X_CM_ID == null) {
            throw new ApiException("Missing the required parameter 'X_CM_ID' when calling v05SubscriptionRequestsCmInitPost(Async)");
        }

        // verify the required parameter 'subscriptionRequest' is set
        if (subscriptionRequest == null) {
            throw new ApiException("Missing the required parameter 'subscriptionRequest' when calling v05SubscriptionRequestsCmInitPost(Async)");
        }

        return v05SubscriptionRequestsCmInitPostCall(authorization, X_CM_ID, subscriptionRequest, _callback);

    }

    /**
     * Request for subscription
     * creates a request for subscription. The subscription categories can be for care-contexts linkages or availability of data against existing care-contexts. Note that the requester must have HIU role
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param subscriptionRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Invalid data sent    * Required attributes not mentioned  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Expired/Invalid token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public void v05SubscriptionRequestsCmInitPost(String authorization, String X_CM_ID, SubscriptionRequest subscriptionRequest) throws ApiException {
        v05SubscriptionRequestsCmInitPostWithHttpInfo(authorization, X_CM_ID, subscriptionRequest);
    }

    /**
     * Request for subscription
     * creates a request for subscription. The subscription categories can be for care-contexts linkages or availability of data against existing care-contexts. Note that the requester must have HIU role
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param subscriptionRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Invalid data sent    * Required attributes not mentioned  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Expired/Invalid token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v05SubscriptionRequestsCmInitPostWithHttpInfo(String authorization, String X_CM_ID, SubscriptionRequest subscriptionRequest) throws ApiException {
        okhttp3.Call localVarCall = v05SubscriptionRequestsCmInitPostValidateBeforeCall(authorization, X_CM_ID, subscriptionRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Request for subscription (asynchronously)
     * creates a request for subscription. The subscription categories can be for care-contexts linkages or availability of data against existing care-contexts. Note that the requester must have HIU role
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param subscriptionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Invalid data sent    * Required attributes not mentioned  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Expired/Invalid token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05SubscriptionRequestsCmInitPostAsync(String authorization, String X_CM_ID, SubscriptionRequest subscriptionRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v05SubscriptionRequestsCmInitPostValidateBeforeCall(authorization, X_CM_ID, subscriptionRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v05SubscriptionRequestsCmOnInitPost
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended. (required)
     * @param hiUSubscriptionRequestReceipt  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Invalid/Expired/Empty token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream services are down  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05SubscriptionRequestsCmOnInitPostCall(String authorization, String X_HIU_ID, HIUSubscriptionRequestReceipt hiUSubscriptionRequestReceipt, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = hiUSubscriptionRequestReceipt;

        // create path and map variables
        String localVarPath = "/v0.5/subscription-requests/cm/on-init";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (X_HIU_ID != null) {
            localVarHeaderParams.put("X-HIU-ID", localVarApiClient.parameterToString(X_HIU_ID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v05SubscriptionRequestsCmOnInitPostValidateBeforeCall(String authorization, String X_HIU_ID, HIUSubscriptionRequestReceipt hiUSubscriptionRequestReceipt, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v05SubscriptionRequestsCmOnInitPost(Async)");
        }

        // verify the required parameter 'X_HIU_ID' is set
        if (X_HIU_ID == null) {
            throw new ApiException("Missing the required parameter 'X_HIU_ID' when calling v05SubscriptionRequestsCmOnInitPost(Async)");
        }

        // verify the required parameter 'hiUSubscriptionRequestReceipt' is set
        if (hiUSubscriptionRequestReceipt == null) {
            throw new ApiException("Missing the required parameter 'hiUSubscriptionRequestReceipt' when calling v05SubscriptionRequestsCmOnInitPost(Async)");
        }

        return v05SubscriptionRequestsCmOnInitPostCall(authorization, X_HIU_ID, hiUSubscriptionRequestReceipt, _callback);

    }

    /**
     * callback API for the /subscription-requests/cm/init to notify a HIU on acceptance/acknowledgement of the request for subscription.
     * This callback API acknowledges the request for subscription from a HIU, and sends back a \&quot;id\&quot; that will be used when the patient/user approves or denies the subscription.  
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended. (required)
     * @param hiUSubscriptionRequestReceipt  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Invalid/Expired/Empty token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream services are down  </td><td>  -  </td></tr>
     </table>
     */
    public void v05SubscriptionRequestsCmOnInitPost(String authorization, String X_HIU_ID, HIUSubscriptionRequestReceipt hiUSubscriptionRequestReceipt) throws ApiException {
        v05SubscriptionRequestsCmOnInitPostWithHttpInfo(authorization, X_HIU_ID, hiUSubscriptionRequestReceipt);
    }

    /**
     * callback API for the /subscription-requests/cm/init to notify a HIU on acceptance/acknowledgement of the request for subscription.
     * This callback API acknowledges the request for subscription from a HIU, and sends back a \&quot;id\&quot; that will be used when the patient/user approves or denies the subscription.  
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended. (required)
     * @param hiUSubscriptionRequestReceipt  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Invalid/Expired/Empty token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream services are down  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v05SubscriptionRequestsCmOnInitPostWithHttpInfo(String authorization, String X_HIU_ID, HIUSubscriptionRequestReceipt hiUSubscriptionRequestReceipt) throws ApiException {
        okhttp3.Call localVarCall = v05SubscriptionRequestsCmOnInitPostValidateBeforeCall(authorization, X_HIU_ID, hiUSubscriptionRequestReceipt, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * callback API for the /subscription-requests/cm/init to notify a HIU on acceptance/acknowledgement of the request for subscription. (asynchronously)
     * This callback API acknowledges the request for subscription from a HIU, and sends back a \&quot;id\&quot; that will be used when the patient/user approves or denies the subscription.  
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended. (required)
     * @param hiUSubscriptionRequestReceipt  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Invalid/Expired/Empty token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream services are down  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05SubscriptionRequestsCmOnInitPostAsync(String authorization, String X_HIU_ID, HIUSubscriptionRequestReceipt hiUSubscriptionRequestReceipt, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v05SubscriptionRequestsCmOnInitPostValidateBeforeCall(authorization, X_HIU_ID, hiUSubscriptionRequestReceipt, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v05SubscriptionRequestsHiuNotifyPost
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended. (required)
     * @param subscriptionApprovalNotification  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Invalid data sent    * Required attributes not mentioned  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Expired/Invalid token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05SubscriptionRequestsHiuNotifyPostCall(String authorization, String X_HIU_ID, SubscriptionApprovalNotification subscriptionApprovalNotification, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = subscriptionApprovalNotification;

        // create path and map variables
        String localVarPath = "/v0.5/subscription-requests/hiu/notify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (X_HIU_ID != null) {
            localVarHeaderParams.put("X-HIU-ID", localVarApiClient.parameterToString(X_HIU_ID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v05SubscriptionRequestsHiuNotifyPostValidateBeforeCall(String authorization, String X_HIU_ID, SubscriptionApprovalNotification subscriptionApprovalNotification, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v05SubscriptionRequestsHiuNotifyPost(Async)");
        }

        // verify the required parameter 'X_HIU_ID' is set
        if (X_HIU_ID == null) {
            throw new ApiException("Missing the required parameter 'X_HIU_ID' when calling v05SubscriptionRequestsHiuNotifyPost(Async)");
        }

        // verify the required parameter 'subscriptionApprovalNotification' is set
        if (subscriptionApprovalNotification == null) {
            throw new ApiException("Missing the required parameter 'subscriptionApprovalNotification' when calling v05SubscriptionRequestsHiuNotifyPost(Async)");
        }

        return v05SubscriptionRequestsHiuNotifyPostCall(authorization, X_HIU_ID, subscriptionApprovalNotification, _callback);

    }

    /**
     * Notification for subscription grant/deny/revoke
     * This API is used by CM to notify a HIU to grant or deny a request for subscription, and also to notify that in case an existing subscription is revoked or expired. For notifying that a particular subscription request was GRANTED or DENIED, the **subscriptionRequestId** is passed.  
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended. (required)
     * @param subscriptionApprovalNotification  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Invalid data sent    * Required attributes not mentioned  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Expired/Invalid token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public void v05SubscriptionRequestsHiuNotifyPost(String authorization, String X_HIU_ID, SubscriptionApprovalNotification subscriptionApprovalNotification) throws ApiException {
        v05SubscriptionRequestsHiuNotifyPostWithHttpInfo(authorization, X_HIU_ID, subscriptionApprovalNotification);
    }

    /**
     * Notification for subscription grant/deny/revoke
     * This API is used by CM to notify a HIU to grant or deny a request for subscription, and also to notify that in case an existing subscription is revoked or expired. For notifying that a particular subscription request was GRANTED or DENIED, the **subscriptionRequestId** is passed.  
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended. (required)
     * @param subscriptionApprovalNotification  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Invalid data sent    * Required attributes not mentioned  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Expired/Invalid token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v05SubscriptionRequestsHiuNotifyPostWithHttpInfo(String authorization, String X_HIU_ID, SubscriptionApprovalNotification subscriptionApprovalNotification) throws ApiException {
        okhttp3.Call localVarCall = v05SubscriptionRequestsHiuNotifyPostValidateBeforeCall(authorization, X_HIU_ID, subscriptionApprovalNotification, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Notification for subscription grant/deny/revoke (asynchronously)
     * This API is used by CM to notify a HIU to grant or deny a request for subscription, and also to notify that in case an existing subscription is revoked or expired. For notifying that a particular subscription request was GRANTED or DENIED, the **subscriptionRequestId** is passed.  
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended. (required)
     * @param subscriptionApprovalNotification  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Invalid data sent    * Required attributes not mentioned  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Expired/Invalid token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05SubscriptionRequestsHiuNotifyPostAsync(String authorization, String X_HIU_ID, SubscriptionApprovalNotification subscriptionApprovalNotification, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v05SubscriptionRequestsHiuNotifyPostValidateBeforeCall(authorization, X_HIU_ID, subscriptionApprovalNotification, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v05SubscriptionRequestsHiuOnNotifyPost
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param hiUSubscriptionRequestNotificationAcknowledgement  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Invalid/Expired/Empty token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream services are down  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05SubscriptionRequestsHiuOnNotifyPostCall(String authorization, String X_CM_ID, HIUSubscriptionRequestNotificationAcknowledgement hiUSubscriptionRequestNotificationAcknowledgement, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = hiUSubscriptionRequestNotificationAcknowledgement;

        // create path and map variables
        String localVarPath = "/v0.5/subscription-requests/hiu/on-notify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (X_CM_ID != null) {
            localVarHeaderParams.put("X-CM-ID", localVarApiClient.parameterToString(X_CM_ID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v05SubscriptionRequestsHiuOnNotifyPostValidateBeforeCall(String authorization, String X_CM_ID, HIUSubscriptionRequestNotificationAcknowledgement hiUSubscriptionRequestNotificationAcknowledgement, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v05SubscriptionRequestsHiuOnNotifyPost(Async)");
        }

        // verify the required parameter 'X_CM_ID' is set
        if (X_CM_ID == null) {
            throw new ApiException("Missing the required parameter 'X_CM_ID' when calling v05SubscriptionRequestsHiuOnNotifyPost(Async)");
        }

        // verify the required parameter 'hiUSubscriptionRequestNotificationAcknowledgement' is set
        if (hiUSubscriptionRequestNotificationAcknowledgement == null) {
            throw new ApiException("Missing the required parameter 'hiUSubscriptionRequestNotificationAcknowledgement' when calling v05SubscriptionRequestsHiuOnNotifyPost(Async)");
        }

        return v05SubscriptionRequestsHiuOnNotifyPostCall(authorization, X_CM_ID, hiUSubscriptionRequestNotificationAcknowledgement, _callback);

    }

    /**
     * Callback API for /subscription-requests/hiu/notify to acknowledge receipt of notification.
     * This API is called by HIU as acknowledgement to subscription request relevant notifications.  
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param hiUSubscriptionRequestNotificationAcknowledgement  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Invalid/Expired/Empty token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream services are down  </td><td>  -  </td></tr>
     </table>
     */
    public void v05SubscriptionRequestsHiuOnNotifyPost(String authorization, String X_CM_ID, HIUSubscriptionRequestNotificationAcknowledgement hiUSubscriptionRequestNotificationAcknowledgement) throws ApiException {
        v05SubscriptionRequestsHiuOnNotifyPostWithHttpInfo(authorization, X_CM_ID, hiUSubscriptionRequestNotificationAcknowledgement);
    }

    /**
     * Callback API for /subscription-requests/hiu/notify to acknowledge receipt of notification.
     * This API is called by HIU as acknowledgement to subscription request relevant notifications.  
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param hiUSubscriptionRequestNotificationAcknowledgement  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Invalid/Expired/Empty token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream services are down  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v05SubscriptionRequestsHiuOnNotifyPostWithHttpInfo(String authorization, String X_CM_ID, HIUSubscriptionRequestNotificationAcknowledgement hiUSubscriptionRequestNotificationAcknowledgement) throws ApiException {
        okhttp3.Call localVarCall = v05SubscriptionRequestsHiuOnNotifyPostValidateBeforeCall(authorization, X_CM_ID, hiUSubscriptionRequestNotificationAcknowledgement, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Callback API for /subscription-requests/hiu/notify to acknowledge receipt of notification. (asynchronously)
     * This API is called by HIU as acknowledgement to subscription request relevant notifications.  
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param hiUSubscriptionRequestNotificationAcknowledgement  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Invalid/Expired/Empty token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream services are down  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05SubscriptionRequestsHiuOnNotifyPostAsync(String authorization, String X_CM_ID, HIUSubscriptionRequestNotificationAcknowledgement hiUSubscriptionRequestNotificationAcknowledgement, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v05SubscriptionRequestsHiuOnNotifyPostValidateBeforeCall(authorization, X_CM_ID, hiUSubscriptionRequestNotificationAcknowledgement, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v05SubscriptionsHiuNotifyPost
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended. (required)
     * @param hiUSubscriptionNotification  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Invalid data sent    * Required attributes not mentioned  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Expired/Invalid token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05SubscriptionsHiuNotifyPostCall(String authorization, String X_HIU_ID, HIUSubscriptionNotification hiUSubscriptionNotification, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = hiUSubscriptionNotification;

        // create path and map variables
        String localVarPath = "/v0.5/subscriptions/hiu/notify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (X_HIU_ID != null) {
            localVarHeaderParams.put("X-HIU-ID", localVarApiClient.parameterToString(X_HIU_ID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v05SubscriptionsHiuNotifyPostValidateBeforeCall(String authorization, String X_HIU_ID, HIUSubscriptionNotification hiUSubscriptionNotification, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v05SubscriptionsHiuNotifyPost(Async)");
        }

        // verify the required parameter 'X_HIU_ID' is set
        if (X_HIU_ID == null) {
            throw new ApiException("Missing the required parameter 'X_HIU_ID' when calling v05SubscriptionsHiuNotifyPost(Async)");
        }

        // verify the required parameter 'hiUSubscriptionNotification' is set
        if (hiUSubscriptionNotification == null) {
            throw new ApiException("Missing the required parameter 'hiUSubscriptionNotification' when calling v05SubscriptionsHiuNotifyPost(Async)");
        }

        return v05SubscriptionsHiuNotifyPostCall(authorization, X_HIU_ID, hiUSubscriptionNotification, _callback);

    }

    /**
     * Notification to HIU on basis of a granted subscription
     * This API is used by CM to notify a HIU for notification relevant to subscription. Notifications are sent to subscribed HIUs whenever a new care-context is linked or new data is available on an existing linked care-context.  1. if event.category &#x3D; LINK, then only care-contexts are passed when new care-contexts are linked for patient.  2. If event.category &#x3D; DATA, then hiTypes are passed. Care-context is passed only if the subscribed HIU has any valid consent for that care-context 
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended. (required)
     * @param hiUSubscriptionNotification  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Invalid data sent    * Required attributes not mentioned  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Expired/Invalid token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public void v05SubscriptionsHiuNotifyPost(String authorization, String X_HIU_ID, HIUSubscriptionNotification hiUSubscriptionNotification) throws ApiException {
        v05SubscriptionsHiuNotifyPostWithHttpInfo(authorization, X_HIU_ID, hiUSubscriptionNotification);
    }

    /**
     * Notification to HIU on basis of a granted subscription
     * This API is used by CM to notify a HIU for notification relevant to subscription. Notifications are sent to subscribed HIUs whenever a new care-context is linked or new data is available on an existing linked care-context.  1. if event.category &#x3D; LINK, then only care-contexts are passed when new care-contexts are linked for patient.  2. If event.category &#x3D; DATA, then hiTypes are passed. Care-context is passed only if the subscribed HIU has any valid consent for that care-context 
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended. (required)
     * @param hiUSubscriptionNotification  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Invalid data sent    * Required attributes not mentioned  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Expired/Invalid token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v05SubscriptionsHiuNotifyPostWithHttpInfo(String authorization, String X_HIU_ID, HIUSubscriptionNotification hiUSubscriptionNotification) throws ApiException {
        okhttp3.Call localVarCall = v05SubscriptionsHiuNotifyPostValidateBeforeCall(authorization, X_HIU_ID, hiUSubscriptionNotification, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Notification to HIU on basis of a granted subscription (asynchronously)
     * This API is used by CM to notify a HIU for notification relevant to subscription. Notifications are sent to subscribed HIUs whenever a new care-context is linked or new data is available on an existing linked care-context.  1. if event.category &#x3D; LINK, then only care-contexts are passed when new care-contexts are linked for patient.  2. If event.category &#x3D; DATA, then hiTypes are passed. Care-context is passed only if the subscribed HIU has any valid consent for that care-context 
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended. (required)
     * @param hiUSubscriptionNotification  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Invalid data sent    * Required attributes not mentioned  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Expired/Invalid token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05SubscriptionsHiuNotifyPostAsync(String authorization, String X_HIU_ID, HIUSubscriptionNotification hiUSubscriptionNotification, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v05SubscriptionsHiuNotifyPostValidateBeforeCall(authorization, X_HIU_ID, hiUSubscriptionNotification, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v05SubscriptionsHiuOnNotifyPost
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param hiUSubscriptionNotificationAcknowledgment  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Invalid/Expired/Empty token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream services are down  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05SubscriptionsHiuOnNotifyPostCall(String authorization, String X_CM_ID, HIUSubscriptionNotificationAcknowledgment hiUSubscriptionNotificationAcknowledgment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = hiUSubscriptionNotificationAcknowledgment;

        // create path and map variables
        String localVarPath = "/v0.5/subscriptions/hiu/on-notify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (X_CM_ID != null) {
            localVarHeaderParams.put("X-CM-ID", localVarApiClient.parameterToString(X_CM_ID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v05SubscriptionsHiuOnNotifyPostValidateBeforeCall(String authorization, String X_CM_ID, HIUSubscriptionNotificationAcknowledgment hiUSubscriptionNotificationAcknowledgment, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v05SubscriptionsHiuOnNotifyPost(Async)");
        }

        // verify the required parameter 'X_CM_ID' is set
        if (X_CM_ID == null) {
            throw new ApiException("Missing the required parameter 'X_CM_ID' when calling v05SubscriptionsHiuOnNotifyPost(Async)");
        }

        // verify the required parameter 'hiUSubscriptionNotificationAcknowledgment' is set
        if (hiUSubscriptionNotificationAcknowledgment == null) {
            throw new ApiException("Missing the required parameter 'hiUSubscriptionNotificationAcknowledgment' when calling v05SubscriptionsHiuOnNotifyPost(Async)");
        }

        return v05SubscriptionsHiuOnNotifyPostCall(authorization, X_CM_ID, hiUSubscriptionNotificationAcknowledgment, _callback);

    }

    /**
     * Callback API for /subscriptions/hiu/notify to acknowledge receipt of notification.
     * This API is called by HIU as acknowledgement to consent notifications, specifically for cases when consent is REVOKED or EXPIRED. 
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param hiUSubscriptionNotificationAcknowledgment  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Invalid/Expired/Empty token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream services are down  </td><td>  -  </td></tr>
     </table>
     */
    public void v05SubscriptionsHiuOnNotifyPost(String authorization, String X_CM_ID, HIUSubscriptionNotificationAcknowledgment hiUSubscriptionNotificationAcknowledgment) throws ApiException {
        v05SubscriptionsHiuOnNotifyPostWithHttpInfo(authorization, X_CM_ID, hiUSubscriptionNotificationAcknowledgment);
    }

    /**
     * Callback API for /subscriptions/hiu/notify to acknowledge receipt of notification.
     * This API is called by HIU as acknowledgement to consent notifications, specifically for cases when consent is REVOKED or EXPIRED. 
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param hiUSubscriptionNotificationAcknowledgment  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Invalid/Expired/Empty token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream services are down  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v05SubscriptionsHiuOnNotifyPostWithHttpInfo(String authorization, String X_CM_ID, HIUSubscriptionNotificationAcknowledgment hiUSubscriptionNotificationAcknowledgment) throws ApiException {
        okhttp3.Call localVarCall = v05SubscriptionsHiuOnNotifyPostValidateBeforeCall(authorization, X_CM_ID, hiUSubscriptionNotificationAcknowledgment, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Callback API for /subscriptions/hiu/notify to acknowledge receipt of notification. (asynchronously)
     * This API is called by HIU as acknowledgement to consent notifications, specifically for cases when consent is REVOKED or EXPIRED. 
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended. (required)
     * @param hiUSubscriptionNotificationAcknowledgment  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Invalid/Expired/Empty token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream services are down  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05SubscriptionsHiuOnNotifyPostAsync(String authorization, String X_CM_ID, HIUSubscriptionNotificationAcknowledgment hiUSubscriptionNotificationAcknowledgment, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v05SubscriptionsHiuOnNotifyPostValidateBeforeCall(authorization, X_CM_ID, hiUSubscriptionNotificationAcknowledgment, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
