/*
 * Gateway
 * Gateway is the hub that routes/orchestrates the interaction between consent managers and API bridges. There are 5 categories of APIs; discovery, link, consent flow, data flow and  monitoring. To reflect the consumers of APIs, the above apis are also categorized under cm facing, hiu facing and hip facing  
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.Arrays;
import org.openapitools.client.model.PatientSMSNotifcationRequestNotificationHip;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PatientSMSNotifcationRequestNotification
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:45.290770-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PatientSMSNotifcationRequestNotification {
  public static final String SERIALIZED_NAME_CARE_CONTEXT_INFO = "careContextInfo";
  @SerializedName(SERIALIZED_NAME_CARE_CONTEXT_INFO)
  private String careContextInfo;

  public static final String SERIALIZED_NAME_DEEPLINK_URL = "deeplinkUrl";
  @SerializedName(SERIALIZED_NAME_DEEPLINK_URL)
  private URI deeplinkUrl;

  public static final String SERIALIZED_NAME_HIP = "hip";
  @SerializedName(SERIALIZED_NAME_HIP)
  private PatientSMSNotifcationRequestNotificationHip hip;

  public static final String SERIALIZED_NAME_PHONE_NO = "phoneNo";
  @SerializedName(SERIALIZED_NAME_PHONE_NO)
  private String phoneNo;

  public static final String SERIALIZED_NAME_RECEIVER_NAME = "receiverName";
  @SerializedName(SERIALIZED_NAME_RECEIVER_NAME)
  private String receiverName;

  public PatientSMSNotifcationRequestNotification() {
  }

  public PatientSMSNotifcationRequestNotification careContextInfo(String careContextInfo) {
    this.careContextInfo = careContextInfo;
    return this;
  }

  /**
   * Information about care context or visit for which the SMS is being sent.
   * @return careContextInfo
   */
  @javax.annotation.Nonnull
  public String getCareContextInfo() {
    return careContextInfo;
  }

  public void setCareContextInfo(String careContextInfo) {
    this.careContextInfo = careContextInfo;
  }


  public PatientSMSNotifcationRequestNotification deeplinkUrl(URI deeplinkUrl) {
    this.deeplinkUrl = deeplinkUrl;
    return this;
  }

  /**
   * A link pointing to digital health records of the patient. PHR App&#39;s deeplink will be sent in SMS if this field is not provided.
   * @return deeplinkUrl
   */
  @javax.annotation.Nullable
  public URI getDeeplinkUrl() {
    return deeplinkUrl;
  }

  public void setDeeplinkUrl(URI deeplinkUrl) {
    this.deeplinkUrl = deeplinkUrl;
  }


  public PatientSMSNotifcationRequestNotification hip(PatientSMSNotifcationRequestNotificationHip hip) {
    this.hip = hip;
    return this;
  }

  /**
   * Get hip
   * @return hip
   */
  @javax.annotation.Nonnull
  public PatientSMSNotifcationRequestNotificationHip getHip() {
    return hip;
  }

  public void setHip(PatientSMSNotifcationRequestNotificationHip hip) {
    this.hip = hip;
  }


  public PatientSMSNotifcationRequestNotification phoneNo(String phoneNo) {
    this.phoneNo = phoneNo;
    return this;
  }

  /**
   * Phone number of the receiver with country code
   * @return phoneNo
   */
  @javax.annotation.Nonnull
  public String getPhoneNo() {
    return phoneNo;
  }

  public void setPhoneNo(String phoneNo) {
    this.phoneNo = phoneNo;
  }


  public PatientSMSNotifcationRequestNotification receiverName(String receiverName) {
    this.receiverName = receiverName;
    return this;
  }

  /**
   * Name of the reciever/patient. Receiver&#39;s name will not be sent if not provided.
   * @return receiverName
   */
  @javax.annotation.Nullable
  public String getReceiverName() {
    return receiverName;
  }

  public void setReceiverName(String receiverName) {
    this.receiverName = receiverName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PatientSMSNotifcationRequestNotification patientSMSNotifcationRequestNotification = (PatientSMSNotifcationRequestNotification) o;
    return Objects.equals(this.careContextInfo, patientSMSNotifcationRequestNotification.careContextInfo) &&
        Objects.equals(this.deeplinkUrl, patientSMSNotifcationRequestNotification.deeplinkUrl) &&
        Objects.equals(this.hip, patientSMSNotifcationRequestNotification.hip) &&
        Objects.equals(this.phoneNo, patientSMSNotifcationRequestNotification.phoneNo) &&
        Objects.equals(this.receiverName, patientSMSNotifcationRequestNotification.receiverName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(careContextInfo, deeplinkUrl, hip, phoneNo, receiverName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PatientSMSNotifcationRequestNotification {\n");
    sb.append("    careContextInfo: ").append(toIndentedString(careContextInfo)).append("\n");
    sb.append("    deeplinkUrl: ").append(toIndentedString(deeplinkUrl)).append("\n");
    sb.append("    hip: ").append(toIndentedString(hip)).append("\n");
    sb.append("    phoneNo: ").append(toIndentedString(phoneNo)).append("\n");
    sb.append("    receiverName: ").append(toIndentedString(receiverName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("careContextInfo");
    openapiFields.add("deeplinkUrl");
    openapiFields.add("hip");
    openapiFields.add("phoneNo");
    openapiFields.add("receiverName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("careContextInfo");
    openapiRequiredFields.add("hip");
    openapiRequiredFields.add("phoneNo");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PatientSMSNotifcationRequestNotification
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PatientSMSNotifcationRequestNotification.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PatientSMSNotifcationRequestNotification is not found in the empty JSON string", PatientSMSNotifcationRequestNotification.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PatientSMSNotifcationRequestNotification.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PatientSMSNotifcationRequestNotification` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PatientSMSNotifcationRequestNotification.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("careContextInfo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `careContextInfo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("careContextInfo").toString()));
      }
      if ((jsonObj.get("deeplinkUrl") != null && !jsonObj.get("deeplinkUrl").isJsonNull()) && !jsonObj.get("deeplinkUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deeplinkUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deeplinkUrl").toString()));
      }
      // validate the required field `hip`
      PatientSMSNotifcationRequestNotificationHip.validateJsonElement(jsonObj.get("hip"));
      if (!jsonObj.get("phoneNo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneNo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneNo").toString()));
      }
      if ((jsonObj.get("receiverName") != null && !jsonObj.get("receiverName").isJsonNull()) && !jsonObj.get("receiverName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receiverName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receiverName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PatientSMSNotifcationRequestNotification.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PatientSMSNotifcationRequestNotification' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PatientSMSNotifcationRequestNotification> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PatientSMSNotifcationRequestNotification.class));

       return (TypeAdapter<T>) new TypeAdapter<PatientSMSNotifcationRequestNotification>() {
           @Override
           public void write(JsonWriter out, PatientSMSNotifcationRequestNotification value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PatientSMSNotifcationRequestNotification read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PatientSMSNotifcationRequestNotification given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PatientSMSNotifcationRequestNotification
   * @throws IOException if the JSON string is invalid with respect to PatientSMSNotifcationRequestNotification
   */
  public static PatientSMSNotifcationRequestNotification fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PatientSMSNotifcationRequestNotification.class);
  }

  /**
   * Convert an instance of PatientSMSNotifcationRequestNotification to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

