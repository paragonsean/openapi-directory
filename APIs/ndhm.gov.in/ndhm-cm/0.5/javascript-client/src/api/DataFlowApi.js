/**
 * Health Data Consent Manager
 * Entity which provides health information aggregation services to customers of health care services. It enables customers to fetch their health information from one or more Health Information Providers (e.g., Hospitals, Diagnostic Labs, Medical Device Companies), based on their explicit Consent and to share such aggregated information with Health Information Users i.e. entities in need of such data (e.g., Insurers, Doctors, Medical Researchers).  # Specifications 1. This document maintains only the Health Information Gateway relevant APIs.  
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import HIPHealthInformationRequestAcknowledgement from '../model/HIPHealthInformationRequestAcknowledgement';
import HIRequest from '../model/HIRequest';
import HealthInformationNotification from '../model/HealthInformationNotification';

/**
* DataFlow service.
* @module api/DataFlowApi
* @version 0.5
*/
export default class DataFlowApi {

    /**
    * Constructs a new DataFlowApi. 
    * @alias module:api/DataFlowApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v05HealthInformationNotifyPost operation.
     * @callback module:api/DataFlowApi~v05HealthInformationNotifyPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Notifications corresponding to events during data flow
     * API called by HIU and HIP during data-transfer.  1. HIP on transfer of data would send **sessionStatus** - one of [TRANSFERRED, FAILED] 2. HIP would also send **hiStatus** for each *careContextReference* - on of [DELIVERED, ERRORED] 3. HIU on receipt of data would send **sessionStatus** - one of [TRANSFERRED, FAILED]. For example, FAILED when if data was not sent or if invalid data was sent 4. HIU would also send **hiStatus** for each *careContextReference* - one of [OK, ERRORED]  
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {module:model/HealthInformationNotification} healthInformationNotification 
     * @param {module:api/DataFlowApi~v05HealthInformationNotifyPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05HealthInformationNotifyPost(authorization, healthInformationNotification, callback) {
      let postBody = healthInformationNotification;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05HealthInformationNotifyPost");
      }
      // verify the required parameter 'healthInformationNotification' is set
      if (healthInformationNotification === undefined || healthInformationNotification === null) {
        throw new Error("Missing the required parameter 'healthInformationNotification' when calling v05HealthInformationNotifyPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/health-information/notify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05HealthInformationOnRequestPost operation.
     * @callback module:api/DataFlowApi~v05HealthInformationOnRequestPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Health information data request acknowledgement from HIP
     * This API is called by HIP to acknowledge Health information request receipt. When HIU requests health information, CM generates a transactionId and makes a health information request to the HIP(s). HIPs acknowledgement to the health-information request is coveyed by this API. Either the **hiRequest** or **error** must be specified. **hiRequest** element returns the same transactionId as before with a status indicating that the request is acknowledged.   
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {module:model/HIPHealthInformationRequestAcknowledgement} hIPHealthInformationRequestAcknowledgement 
     * @param {module:api/DataFlowApi~v05HealthInformationOnRequestPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05HealthInformationOnRequestPost(authorization, hIPHealthInformationRequestAcknowledgement, callback) {
      let postBody = hIPHealthInformationRequestAcknowledgement;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05HealthInformationOnRequestPost");
      }
      // verify the required parameter 'hIPHealthInformationRequestAcknowledgement' is set
      if (hIPHealthInformationRequestAcknowledgement === undefined || hIPHealthInformationRequestAcknowledgement === null) {
        throw new Error("Missing the required parameter 'hIPHealthInformationRequestAcknowledgement' when calling v05HealthInformationOnRequestPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/health-information/on-request', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05HealthInformationRequestPost operation.
     * @callback module:api/DataFlowApi~v05HealthInformationRequestPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Health information data request from HIU
     * HIU request for Health information against a consent id. CM would generate a transactionId against each consent and pass it as trnasaction context / correlation id to the HIP and also return the same to HIU via Gateway API - ***_/v0.5/health-information/cm/on-request***.  
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {module:model/HIRequest} hIRequest 
     * @param {module:api/DataFlowApi~v05HealthInformationRequestPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05HealthInformationRequestPost(authorization, hIRequest, callback) {
      let postBody = hIRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05HealthInformationRequestPost");
      }
      // verify the required parameter 'hIRequest' is set
      if (hIRequest === undefined || hIRequest === null) {
        throw new Error("Missing the required parameter 'hIRequest' when calling v05HealthInformationRequestPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/health-information/request', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
