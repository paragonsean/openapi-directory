/**
 * Health Data Consent Manager
 * Entity which provides health information aggregation services to customers of health care services. It enables customers to fetch their health information from one or more Health Information Providers (e.g., Hospitals, Diagnostic Labs, Medical Device Companies), based on their explicit Consent and to share such aggregated information with Health Information Users i.e. entities in need of such data (e.g., Insurers, Doctors, Medical Researchers).  # Specifications 1. This document maintains only the Health Information Gateway relevant APIs.  
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import PatientAuthConfirmRequest from '../model/PatientAuthConfirmRequest';
import PatientAuthInitRequest from '../model/PatientAuthInitRequest';
import PatientAuthModeQueryRequest from '../model/PatientAuthModeQueryRequest';
import PatientAuthNotificationAcknowledgement from '../model/PatientAuthNotificationAcknowledgement';

/**
* UserAuth service.
* @module api/UserAuthApi
* @version 0.5
*/
export default class UserAuthApi {

    /**
    * Constructs a new UserAuthApi. 
    * @alias module:api/UserAuthApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v05UsersAuthConfirmPost operation.
     * @callback module:api/UserAuthApi~v05UsersAuthConfirmPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Confirmation request sending token, otp or other authentication details from HIP/HIU for confirmation
     * This API is called by HIP/HIUs to confirm authentication of users. The transactionId returned by the previous callback API /users/auth/on-init must be sent. If Authentication is successful the callback API will send an \"access token\" for subsequent purpose specific API calls. Note only **credential.authCode** or **credential.demographic** should be sent   1. demographic details are only required for  demographic auth as of now.    2. demographic details are required only in MEDIATED cases and if the **auth.mode** so demands. e.g. if **auth.mode** is DEMOGRAPHICS. Usually for demographic authentication, the name, gender and DOB must be exactly as specified in User Account.   3. demographic.identifier is optional, however maybe required if authentication so mandates.    4. credential.authCode is required for other MEDIATED authentication like MOBILE_OTP, AADHAAR_OTP.  
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {module:model/PatientAuthConfirmRequest} patientAuthConfirmRequest 
     * @param {module:api/UserAuthApi~v05UsersAuthConfirmPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05UsersAuthConfirmPost(authorization, patientAuthConfirmRequest, callback) {
      let postBody = patientAuthConfirmRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05UsersAuthConfirmPost");
      }
      // verify the required parameter 'patientAuthConfirmRequest' is set
      if (patientAuthConfirmRequest === undefined || patientAuthConfirmRequest === null) {
        throw new Error("Missing the required parameter 'patientAuthConfirmRequest' when calling v05UsersAuthConfirmPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/users/auth/confirm', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05UsersAuthFetchModesPost operation.
     * @callback module:api/UserAuthApi~v05UsersAuthFetchModesPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a patient's authentication modes relevant to specified purpose
     * This API is meant for identify supported authentication modes for a patient given a specific purpose 
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {module:model/PatientAuthModeQueryRequest} patientAuthModeQueryRequest 
     * @param {module:api/UserAuthApi~v05UsersAuthFetchModesPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05UsersAuthFetchModesPost(authorization, patientAuthModeQueryRequest, callback) {
      let postBody = patientAuthModeQueryRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05UsersAuthFetchModesPost");
      }
      // verify the required parameter 'patientAuthModeQueryRequest' is set
      if (patientAuthModeQueryRequest === undefined || patientAuthModeQueryRequest === null) {
        throw new Error("Missing the required parameter 'patientAuthModeQueryRequest' when calling v05UsersAuthFetchModesPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/users/auth/fetch-modes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05UsersAuthInitPost operation.
     * @callback module:api/UserAuthApi~v05UsersAuthInitPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initialize authentication from HIP
     * This API is called by HIPs to initiate authentication of users. A transactionId is retuned by the corresponding callback API for confirmation of user auth. 
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {module:model/PatientAuthInitRequest} patientAuthInitRequest 
     * @param {module:api/UserAuthApi~v05UsersAuthInitPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05UsersAuthInitPost(authorization, patientAuthInitRequest, callback) {
      let postBody = patientAuthInitRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05UsersAuthInitPost");
      }
      // verify the required parameter 'patientAuthInitRequest' is set
      if (patientAuthInitRequest === undefined || patientAuthInitRequest === null) {
        throw new Error("Missing the required parameter 'patientAuthInitRequest' when calling v05UsersAuthInitPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/users/auth/init', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05UsersAuthOnNotifyPost operation.
     * @callback module:api/UserAuthApi~v05UsersAuthOnNotifyPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * callback API from HIU/HIPs as acknowledgement of auth notification (in case of DIRECT auth)
     * This API is called by HIU/HIPs to confirm acknowledgement for receipt of auth notification is case of DIRECT authentication.  
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {module:model/PatientAuthNotificationAcknowledgement} patientAuthNotificationAcknowledgement 
     * @param {module:api/UserAuthApi~v05UsersAuthOnNotifyPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05UsersAuthOnNotifyPost(authorization, patientAuthNotificationAcknowledgement, callback) {
      let postBody = patientAuthNotificationAcknowledgement;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05UsersAuthOnNotifyPost");
      }
      // verify the required parameter 'patientAuthNotificationAcknowledgement' is set
      if (patientAuthNotificationAcknowledgement === undefined || patientAuthNotificationAcknowledgement === null) {
        throw new Error("Missing the required parameter 'patientAuthNotificationAcknowledgement' when calling v05UsersAuthOnNotifyPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/users/auth/on-notify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
