/**
 * Health Data Consent Manager
 * Entity which provides health information aggregation services to customers of health care services. It enables customers to fetch their health information from one or more Health Information Providers (e.g., Hospitals, Diagnostic Labs, Medical Device Companies), based on their explicit Consent and to share such aggregated information with Health Information Users i.e. entities in need of such data (e.g., Insurers, Doctors, Medical Researchers).  # Specifications 1. This document maintains only the Health Information Gateway relevant APIs.  
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConsentFetchRequest from '../model/ConsentFetchRequest';
import ConsentRequest from '../model/ConsentRequest';
import ConsentRequestStatusRequest from '../model/ConsentRequestStatusRequest';
import ErrorResponse from '../model/ErrorResponse';
import HIPConsentNotificationResponse from '../model/HIPConsentNotificationResponse';
import HIUConsentNotificationResponse from '../model/HIUConsentNotificationResponse';

/**
* Consent service.
* @module api/ConsentApi
* @version 0.5
*/
export default class ConsentApi {

    /**
    * Constructs a new ConsentApi. 
    * @alias module:api/ConsentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v05ConsentRequestsInitPost operation.
     * @callback module:api/ConsentApi~v05ConsentRequestsInitPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create consent request
     * Creates a consent request to get data about a patient by HIU user. CM should call Gateway - ***_/v0.5/consent-requests/on-init*** API with the consent-request-id
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {module:model/ConsentRequest} consentRequest 
     * @param {module:api/ConsentApi~v05ConsentRequestsInitPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05ConsentRequestsInitPost(authorization, consentRequest, callback) {
      let postBody = consentRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05ConsentRequestsInitPost");
      }
      // verify the required parameter 'consentRequest' is set
      if (consentRequest === undefined || consentRequest === null) {
        throw new Error("Missing the required parameter 'consentRequest' when calling v05ConsentRequestsInitPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/consent-requests/init', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05ConsentRequestsStatusPost operation.
     * @callback module:api/ConsentApi~v05ConsentRequestsStatusPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get consent request status
     * Get status of consent request done previously. CM responds by calling Gateway API - ***_/v0.5/consent-requests/on-status***
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {module:model/ConsentRequestStatusRequest} consentRequestStatusRequest 
     * @param {module:api/ConsentApi~v05ConsentRequestsStatusPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05ConsentRequestsStatusPost(authorization, consentRequestStatusRequest, callback) {
      let postBody = consentRequestStatusRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05ConsentRequestsStatusPost");
      }
      // verify the required parameter 'consentRequestStatusRequest' is set
      if (consentRequestStatusRequest === undefined || consentRequestStatusRequest === null) {
        throw new Error("Missing the required parameter 'consentRequestStatusRequest' when calling v05ConsentRequestsStatusPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/consent-requests/status', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05ConsentsFetchPost operation.
     * @callback module:api/ConsentApi~v05ConsentsFetchPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get consent artefact
     * This API is called when a HIU makes a request to get a consent artefact. For response please refer to the Gateway ***_/v0.5/consents/on-fetch***
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {module:model/ConsentFetchRequest} consentFetchRequest 
     * @param {module:api/ConsentApi~v05ConsentsFetchPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05ConsentsFetchPost(authorization, consentFetchRequest, callback) {
      let postBody = consentFetchRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05ConsentsFetchPost");
      }
      // verify the required parameter 'consentFetchRequest' is set
      if (consentFetchRequest === undefined || consentFetchRequest === null) {
        throw new Error("Missing the required parameter 'consentFetchRequest' when calling v05ConsentsFetchPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/consents/fetch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05ConsentsHipOnNotifyPost operation.
     * @callback module:api/ConsentApi~v05ConsentsHipOnNotifyPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Consent notification
     * This API is called by HIP as acknowledgement to notification of consents, in cases of consent revocation and expiration, notified by CM earlier via Gateway API - ***_/v0.5/consents/hip/notify***.  
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {module:model/HIPConsentNotificationResponse} hIPConsentNotificationResponse 
     * @param {module:api/ConsentApi~v05ConsentsHipOnNotifyPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05ConsentsHipOnNotifyPost(authorization, hIPConsentNotificationResponse, callback) {
      let postBody = hIPConsentNotificationResponse;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05ConsentsHipOnNotifyPost");
      }
      // verify the required parameter 'hIPConsentNotificationResponse' is set
      if (hIPConsentNotificationResponse === undefined || hIPConsentNotificationResponse === null) {
        throw new Error("Missing the required parameter 'hIPConsentNotificationResponse' when calling v05ConsentsHipOnNotifyPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/consents/hip/on-notify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05ConsentsHiuOnNotifyPost operation.
     * @callback module:api/ConsentApi~v05ConsentsHiuOnNotifyPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Consent notification
     * This API is called by HIU as acknowledgement to consent notifications, specifically for cases when consent is REVOKED or EXPIRED, notified by CM earlier via Gateway API - ***_/v0.5/consents/hiu/notify***. 
     * @param {String} authorization Access token which was issued after successful login with gateway auth server.
     * @param {module:model/HIUConsentNotificationResponse} hIUConsentNotificationResponse 
     * @param {module:api/ConsentApi~v05ConsentsHiuOnNotifyPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05ConsentsHiuOnNotifyPost(authorization, hIUConsentNotificationResponse, callback) {
      let postBody = hIUConsentNotificationResponse;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05ConsentsHiuOnNotifyPost");
      }
      // verify the required parameter 'hIUConsentNotificationResponse' is set
      if (hIUConsentNotificationResponse === undefined || hIUConsentNotificationResponse === null) {
        throw new Error("Missing the required parameter 'hIUConsentNotificationResponse' when calling v05ConsentsHiuOnNotifyPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/consents/hiu/on-notify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
