# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class KeyObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expiry: datetime=None, key_value: str=None, parameters: str=None):
        """KeyObject - a model defined in OpenAPI

        :param expiry: The expiry of this KeyObject.
        :param key_value: The key_value of this KeyObject.
        :param parameters: The parameters of this KeyObject.
        """
        self.openapi_types = {
            'expiry': datetime,
            'key_value': str,
            'parameters': str
        }

        self.attribute_map = {
            'expiry': 'expiry',
            'key_value': 'keyValue',
            'parameters': 'parameters'
        }

        self._expiry = expiry
        self._key_value = key_value
        self._parameters = parameters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KeyObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KeyObject of this KeyObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expiry(self):
        """Gets the expiry of this KeyObject.


        :return: The expiry of this KeyObject.
        :rtype: datetime
        """
        return self._expiry

    @expiry.setter
    def expiry(self, expiry):
        """Sets the expiry of this KeyObject.


        :param expiry: The expiry of this KeyObject.
        :type expiry: datetime
        """
        if expiry is None:
            raise ValueError("Invalid value for `expiry`, must not be `None`")

        self._expiry = expiry

    @property
    def key_value(self):
        """Gets the key_value of this KeyObject.


        :return: The key_value of this KeyObject.
        :rtype: str
        """
        return self._key_value

    @key_value.setter
    def key_value(self, key_value):
        """Sets the key_value of this KeyObject.


        :param key_value: The key_value of this KeyObject.
        :type key_value: str
        """
        if key_value is None:
            raise ValueError("Invalid value for `key_value`, must not be `None`")

        self._key_value = key_value

    @property
    def parameters(self):
        """Gets the parameters of this KeyObject.


        :return: The parameters of this KeyObject.
        :rtype: str
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this KeyObject.


        :param parameters: The parameters of this KeyObject.
        :type parameters: str
        """
        if parameters is None:
            raise ValueError("Invalid value for `parameters`, must not be `None`")

        self._parameters = parameters
