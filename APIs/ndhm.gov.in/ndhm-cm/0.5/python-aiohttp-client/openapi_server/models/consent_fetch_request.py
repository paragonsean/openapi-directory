# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConsentFetchRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, consent_id: str=None, request_id: str=None, timestamp: datetime=None):
        """ConsentFetchRequest - a model defined in OpenAPI

        :param consent_id: The consent_id of this ConsentFetchRequest.
        :param request_id: The request_id of this ConsentFetchRequest.
        :param timestamp: The timestamp of this ConsentFetchRequest.
        """
        self.openapi_types = {
            'consent_id': str,
            'request_id': str,
            'timestamp': datetime
        }

        self.attribute_map = {
            'consent_id': 'consentId',
            'request_id': 'requestId',
            'timestamp': 'timestamp'
        }

        self._consent_id = consent_id
        self._request_id = request_id
        self._timestamp = timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConsentFetchRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConsentFetchRequest of this ConsentFetchRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def consent_id(self):
        """Gets the consent_id of this ConsentFetchRequest.


        :return: The consent_id of this ConsentFetchRequest.
        :rtype: str
        """
        return self._consent_id

    @consent_id.setter
    def consent_id(self, consent_id):
        """Sets the consent_id of this ConsentFetchRequest.


        :param consent_id: The consent_id of this ConsentFetchRequest.
        :type consent_id: str
        """
        if consent_id is None:
            raise ValueError("Invalid value for `consent_id`, must not be `None`")

        self._consent_id = consent_id

    @property
    def request_id(self):
        """Gets the request_id of this ConsentFetchRequest.

        a nonce, unique for each HTTP request

        :return: The request_id of this ConsentFetchRequest.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this ConsentFetchRequest.

        a nonce, unique for each HTTP request

        :param request_id: The request_id of this ConsentFetchRequest.
        :type request_id: str
        """
        if request_id is None:
            raise ValueError("Invalid value for `request_id`, must not be `None`")

        self._request_id = request_id

    @property
    def timestamp(self):
        """Gets the timestamp of this ConsentFetchRequest.

        Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ

        :return: The timestamp of this ConsentFetchRequest.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ConsentFetchRequest.

        Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ

        :param timestamp: The timestamp of this ConsentFetchRequest.
        :type timestamp: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")

        self._timestamp = timestamp
