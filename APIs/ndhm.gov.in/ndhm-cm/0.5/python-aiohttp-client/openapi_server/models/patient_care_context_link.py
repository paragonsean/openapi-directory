# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.patient_care_context_link_patient import PatientCareContextLinkPatient
from openapi_server import util


class PatientCareContextLink(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_token: str=None, patient: PatientCareContextLinkPatient=None):
        """PatientCareContextLink - a model defined in OpenAPI

        :param access_token: The access_token of this PatientCareContextLink.
        :param patient: The patient of this PatientCareContextLink.
        """
        self.openapi_types = {
            'access_token': str,
            'patient': PatientCareContextLinkPatient
        }

        self.attribute_map = {
            'access_token': 'accessToken',
            'patient': 'patient'
        }

        self._access_token = access_token
        self._patient = patient

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatientCareContextLink':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatientCareContextLink of this PatientCareContextLink.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_token(self):
        """Gets the access_token of this PatientCareContextLink.

        AccessToken fetched in the user auth process for the purpose specified

        :return: The access_token of this PatientCareContextLink.
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this PatientCareContextLink.

        AccessToken fetched in the user auth process for the purpose specified

        :param access_token: The access_token of this PatientCareContextLink.
        :type access_token: str
        """
        if access_token is None:
            raise ValueError("Invalid value for `access_token`, must not be `None`")

        self._access_token = access_token

    @property
    def patient(self):
        """Gets the patient of this PatientCareContextLink.


        :return: The patient of this PatientCareContextLink.
        :rtype: PatientCareContextLinkPatient
        """
        return self._patient

    @patient.setter
    def patient(self, patient):
        """Sets the patient of this PatientCareContextLink.


        :param patient: The patient of this PatientCareContextLink.
        :type patient: PatientCareContextLinkPatient
        """
        if patient is None:
            raise ValueError("Invalid value for `patient`, must not be `None`")

        self._patient = patient
