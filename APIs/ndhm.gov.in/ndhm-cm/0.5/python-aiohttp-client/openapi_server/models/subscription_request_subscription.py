# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.consent_manager_patient_id import ConsentManagerPatientID
from openapi_server.models.organization_representation import OrganizationRepresentation
from openapi_server.models.subscription_category import SubscriptionCategory
from openapi_server.models.subscription_period import SubscriptionPeriod
from openapi_server.models.use_purpose import UsePurpose
from openapi_server import util


class SubscriptionRequestSubscription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, categories: List[SubscriptionCategory]=None, hips: List[OrganizationRepresentation]=None, hiu: OrganizationRepresentation=None, patient: ConsentManagerPatientID=None, period: SubscriptionPeriod=None, purpose: UsePurpose=None):
        """SubscriptionRequestSubscription - a model defined in OpenAPI

        :param categories: The categories of this SubscriptionRequestSubscription.
        :param hips: The hips of this SubscriptionRequestSubscription.
        :param hiu: The hiu of this SubscriptionRequestSubscription.
        :param patient: The patient of this SubscriptionRequestSubscription.
        :param period: The period of this SubscriptionRequestSubscription.
        :param purpose: The purpose of this SubscriptionRequestSubscription.
        """
        self.openapi_types = {
            'categories': List[SubscriptionCategory],
            'hips': List[OrganizationRepresentation],
            'hiu': OrganizationRepresentation,
            'patient': ConsentManagerPatientID,
            'period': SubscriptionPeriod,
            'purpose': UsePurpose
        }

        self.attribute_map = {
            'categories': 'categories',
            'hips': 'hips',
            'hiu': 'hiu',
            'patient': 'patient',
            'period': 'period',
            'purpose': 'purpose'
        }

        self._categories = categories
        self._hips = hips
        self._hiu = hiu
        self._patient = patient
        self._period = period
        self._purpose = purpose

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscriptionRequestSubscription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubscriptionRequest_subscription of this SubscriptionRequestSubscription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def categories(self):
        """Gets the categories of this SubscriptionRequestSubscription.


        :return: The categories of this SubscriptionRequestSubscription.
        :rtype: List[SubscriptionCategory]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this SubscriptionRequestSubscription.


        :param categories: The categories of this SubscriptionRequestSubscription.
        :type categories: List[SubscriptionCategory]
        """
        if categories is None:
            raise ValueError("Invalid value for `categories`, must not be `None`")

        self._categories = categories

    @property
    def hips(self):
        """Gets the hips of this SubscriptionRequestSubscription.


        :return: The hips of this SubscriptionRequestSubscription.
        :rtype: List[OrganizationRepresentation]
        """
        return self._hips

    @hips.setter
    def hips(self, hips):
        """Sets the hips of this SubscriptionRequestSubscription.


        :param hips: The hips of this SubscriptionRequestSubscription.
        :type hips: List[OrganizationRepresentation]
        """

        self._hips = hips

    @property
    def hiu(self):
        """Gets the hiu of this SubscriptionRequestSubscription.


        :return: The hiu of this SubscriptionRequestSubscription.
        :rtype: OrganizationRepresentation
        """
        return self._hiu

    @hiu.setter
    def hiu(self, hiu):
        """Sets the hiu of this SubscriptionRequestSubscription.


        :param hiu: The hiu of this SubscriptionRequestSubscription.
        :type hiu: OrganizationRepresentation
        """
        if hiu is None:
            raise ValueError("Invalid value for `hiu`, must not be `None`")

        self._hiu = hiu

    @property
    def patient(self):
        """Gets the patient of this SubscriptionRequestSubscription.


        :return: The patient of this SubscriptionRequestSubscription.
        :rtype: ConsentManagerPatientID
        """
        return self._patient

    @patient.setter
    def patient(self, patient):
        """Sets the patient of this SubscriptionRequestSubscription.


        :param patient: The patient of this SubscriptionRequestSubscription.
        :type patient: ConsentManagerPatientID
        """
        if patient is None:
            raise ValueError("Invalid value for `patient`, must not be `None`")

        self._patient = patient

    @property
    def period(self):
        """Gets the period of this SubscriptionRequestSubscription.


        :return: The period of this SubscriptionRequestSubscription.
        :rtype: SubscriptionPeriod
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this SubscriptionRequestSubscription.


        :param period: The period of this SubscriptionRequestSubscription.
        :type period: SubscriptionPeriod
        """
        if period is None:
            raise ValueError("Invalid value for `period`, must not be `None`")

        self._period = period

    @property
    def purpose(self):
        """Gets the purpose of this SubscriptionRequestSubscription.


        :return: The purpose of this SubscriptionRequestSubscription.
        :rtype: UsePurpose
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """Sets the purpose of this SubscriptionRequestSubscription.


        :param purpose: The purpose of this SubscriptionRequestSubscription.
        :type purpose: UsePurpose
        """
        if purpose is None:
            raise ValueError("Invalid value for `purpose`, must not be `None`")

        self._purpose = purpose
