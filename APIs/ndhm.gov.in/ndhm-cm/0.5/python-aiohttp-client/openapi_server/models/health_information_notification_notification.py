# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.health_information_notification_notification_notifier import HealthInformationNotificationNotificationNotifier
from openapi_server.models.health_information_notification_notification_status_notification import HealthInformationNotificationNotificationStatusNotification
from openapi_server import util


class HealthInformationNotificationNotification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, consent_id: str=None, done_at: datetime=None, notifier: HealthInformationNotificationNotificationNotifier=None, status_notification: HealthInformationNotificationNotificationStatusNotification=None, transaction_id: str=None):
        """HealthInformationNotificationNotification - a model defined in OpenAPI

        :param consent_id: The consent_id of this HealthInformationNotificationNotification.
        :param done_at: The done_at of this HealthInformationNotificationNotification.
        :param notifier: The notifier of this HealthInformationNotificationNotification.
        :param status_notification: The status_notification of this HealthInformationNotificationNotification.
        :param transaction_id: The transaction_id of this HealthInformationNotificationNotification.
        """
        self.openapi_types = {
            'consent_id': str,
            'done_at': datetime,
            'notifier': HealthInformationNotificationNotificationNotifier,
            'status_notification': HealthInformationNotificationNotificationStatusNotification,
            'transaction_id': str
        }

        self.attribute_map = {
            'consent_id': 'consentId',
            'done_at': 'doneAt',
            'notifier': 'notifier',
            'status_notification': 'statusNotification',
            'transaction_id': 'transactionId'
        }

        self._consent_id = consent_id
        self._done_at = done_at
        self._notifier = notifier
        self._status_notification = status_notification
        self._transaction_id = transaction_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HealthInformationNotificationNotification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HealthInformationNotification_notification of this HealthInformationNotificationNotification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def consent_id(self):
        """Gets the consent_id of this HealthInformationNotificationNotification.


        :return: The consent_id of this HealthInformationNotificationNotification.
        :rtype: str
        """
        return self._consent_id

    @consent_id.setter
    def consent_id(self, consent_id):
        """Sets the consent_id of this HealthInformationNotificationNotification.


        :param consent_id: The consent_id of this HealthInformationNotificationNotification.
        :type consent_id: str
        """
        if consent_id is None:
            raise ValueError("Invalid value for `consent_id`, must not be `None`")

        self._consent_id = consent_id

    @property
    def done_at(self):
        """Gets the done_at of this HealthInformationNotificationNotification.


        :return: The done_at of this HealthInformationNotificationNotification.
        :rtype: datetime
        """
        return self._done_at

    @done_at.setter
    def done_at(self, done_at):
        """Sets the done_at of this HealthInformationNotificationNotification.


        :param done_at: The done_at of this HealthInformationNotificationNotification.
        :type done_at: datetime
        """
        if done_at is None:
            raise ValueError("Invalid value for `done_at`, must not be `None`")

        self._done_at = done_at

    @property
    def notifier(self):
        """Gets the notifier of this HealthInformationNotificationNotification.


        :return: The notifier of this HealthInformationNotificationNotification.
        :rtype: HealthInformationNotificationNotificationNotifier
        """
        return self._notifier

    @notifier.setter
    def notifier(self, notifier):
        """Sets the notifier of this HealthInformationNotificationNotification.


        :param notifier: The notifier of this HealthInformationNotificationNotification.
        :type notifier: HealthInformationNotificationNotificationNotifier
        """
        if notifier is None:
            raise ValueError("Invalid value for `notifier`, must not be `None`")

        self._notifier = notifier

    @property
    def status_notification(self):
        """Gets the status_notification of this HealthInformationNotificationNotification.


        :return: The status_notification of this HealthInformationNotificationNotification.
        :rtype: HealthInformationNotificationNotificationStatusNotification
        """
        return self._status_notification

    @status_notification.setter
    def status_notification(self, status_notification):
        """Sets the status_notification of this HealthInformationNotificationNotification.


        :param status_notification: The status_notification of this HealthInformationNotificationNotification.
        :type status_notification: HealthInformationNotificationNotificationStatusNotification
        """
        if status_notification is None:
            raise ValueError("Invalid value for `status_notification`, must not be `None`")

        self._status_notification = status_notification

    @property
    def transaction_id(self):
        """Gets the transaction_id of this HealthInformationNotificationNotification.


        :return: The transaction_id of this HealthInformationNotificationNotification.
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this HealthInformationNotificationNotification.


        :param transaction_id: The transaction_id of this HealthInformationNotificationNotification.
        :type transaction_id: str
        """
        if transaction_id is None:
            raise ValueError("Invalid value for `transaction_id`, must not be `None`")

        self._transaction_id = transaction_id
