# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.care_context_definition import CareContextDefinition
from openapi_server.models.consent_request_consent_hip import ConsentRequestConsentHip
from openapi_server.models.consent_request_consent_hiu import ConsentRequestConsentHiu
from openapi_server.models.consent_request_consent_patient import ConsentRequestConsentPatient
from openapi_server.models.hi_type_enum import HITypeEnum
from openapi_server.models.permission import Permission
from openapi_server.models.requester import Requester
from openapi_server.models.use_purpose import UsePurpose
from openapi_server import util


class ConsentRequestConsent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, care_contexts: List[CareContextDefinition]=None, hi_types: List[HITypeEnum]=None, hip: ConsentRequestConsentHip=None, hiu: ConsentRequestConsentHiu=None, patient: ConsentRequestConsentPatient=None, permission: Permission=None, purpose: UsePurpose=None, requester: Requester=None):
        """ConsentRequestConsent - a model defined in OpenAPI

        :param care_contexts: The care_contexts of this ConsentRequestConsent.
        :param hi_types: The hi_types of this ConsentRequestConsent.
        :param hip: The hip of this ConsentRequestConsent.
        :param hiu: The hiu of this ConsentRequestConsent.
        :param patient: The patient of this ConsentRequestConsent.
        :param permission: The permission of this ConsentRequestConsent.
        :param purpose: The purpose of this ConsentRequestConsent.
        :param requester: The requester of this ConsentRequestConsent.
        """
        self.openapi_types = {
            'care_contexts': List[CareContextDefinition],
            'hi_types': List[HITypeEnum],
            'hip': ConsentRequestConsentHip,
            'hiu': ConsentRequestConsentHiu,
            'patient': ConsentRequestConsentPatient,
            'permission': Permission,
            'purpose': UsePurpose,
            'requester': Requester
        }

        self.attribute_map = {
            'care_contexts': 'careContexts',
            'hi_types': 'hiTypes',
            'hip': 'hip',
            'hiu': 'hiu',
            'patient': 'patient',
            'permission': 'permission',
            'purpose': 'purpose',
            'requester': 'requester'
        }

        self._care_contexts = care_contexts
        self._hi_types = hi_types
        self._hip = hip
        self._hiu = hiu
        self._patient = patient
        self._permission = permission
        self._purpose = purpose
        self._requester = requester

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConsentRequestConsent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConsentRequest_consent of this ConsentRequestConsent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def care_contexts(self):
        """Gets the care_contexts of this ConsentRequestConsent.


        :return: The care_contexts of this ConsentRequestConsent.
        :rtype: List[CareContextDefinition]
        """
        return self._care_contexts

    @care_contexts.setter
    def care_contexts(self, care_contexts):
        """Sets the care_contexts of this ConsentRequestConsent.


        :param care_contexts: The care_contexts of this ConsentRequestConsent.
        :type care_contexts: List[CareContextDefinition]
        """

        self._care_contexts = care_contexts

    @property
    def hi_types(self):
        """Gets the hi_types of this ConsentRequestConsent.


        :return: The hi_types of this ConsentRequestConsent.
        :rtype: List[HITypeEnum]
        """
        return self._hi_types

    @hi_types.setter
    def hi_types(self, hi_types):
        """Sets the hi_types of this ConsentRequestConsent.


        :param hi_types: The hi_types of this ConsentRequestConsent.
        :type hi_types: List[HITypeEnum]
        """
        if hi_types is None:
            raise ValueError("Invalid value for `hi_types`, must not be `None`")

        self._hi_types = hi_types

    @property
    def hip(self):
        """Gets the hip of this ConsentRequestConsent.


        :return: The hip of this ConsentRequestConsent.
        :rtype: ConsentRequestConsentHip
        """
        return self._hip

    @hip.setter
    def hip(self, hip):
        """Sets the hip of this ConsentRequestConsent.


        :param hip: The hip of this ConsentRequestConsent.
        :type hip: ConsentRequestConsentHip
        """

        self._hip = hip

    @property
    def hiu(self):
        """Gets the hiu of this ConsentRequestConsent.


        :return: The hiu of this ConsentRequestConsent.
        :rtype: ConsentRequestConsentHiu
        """
        return self._hiu

    @hiu.setter
    def hiu(self, hiu):
        """Sets the hiu of this ConsentRequestConsent.


        :param hiu: The hiu of this ConsentRequestConsent.
        :type hiu: ConsentRequestConsentHiu
        """
        if hiu is None:
            raise ValueError("Invalid value for `hiu`, must not be `None`")

        self._hiu = hiu

    @property
    def patient(self):
        """Gets the patient of this ConsentRequestConsent.


        :return: The patient of this ConsentRequestConsent.
        :rtype: ConsentRequestConsentPatient
        """
        return self._patient

    @patient.setter
    def patient(self, patient):
        """Sets the patient of this ConsentRequestConsent.


        :param patient: The patient of this ConsentRequestConsent.
        :type patient: ConsentRequestConsentPatient
        """
        if patient is None:
            raise ValueError("Invalid value for `patient`, must not be `None`")

        self._patient = patient

    @property
    def permission(self):
        """Gets the permission of this ConsentRequestConsent.


        :return: The permission of this ConsentRequestConsent.
        :rtype: Permission
        """
        return self._permission

    @permission.setter
    def permission(self, permission):
        """Sets the permission of this ConsentRequestConsent.


        :param permission: The permission of this ConsentRequestConsent.
        :type permission: Permission
        """
        if permission is None:
            raise ValueError("Invalid value for `permission`, must not be `None`")

        self._permission = permission

    @property
    def purpose(self):
        """Gets the purpose of this ConsentRequestConsent.


        :return: The purpose of this ConsentRequestConsent.
        :rtype: UsePurpose
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """Sets the purpose of this ConsentRequestConsent.


        :param purpose: The purpose of this ConsentRequestConsent.
        :type purpose: UsePurpose
        """
        if purpose is None:
            raise ValueError("Invalid value for `purpose`, must not be `None`")

        self._purpose = purpose

    @property
    def requester(self):
        """Gets the requester of this ConsentRequestConsent.


        :return: The requester of this ConsentRequestConsent.
        :rtype: Requester
        """
        return self._requester

    @requester.setter
    def requester(self, requester):
        """Sets the requester of this ConsentRequestConsent.


        :param requester: The requester of this ConsentRequestConsent.
        :type requester: Requester
        """
        if requester is None:
            raise ValueError("Invalid value for `requester`, must not be `None`")

        self._requester = requester
