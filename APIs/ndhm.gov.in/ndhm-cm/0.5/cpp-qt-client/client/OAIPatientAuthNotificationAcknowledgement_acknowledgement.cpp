/**
 * Health Data Consent Manager
 * Entity which provides health information aggregation services to customers of health care services. It enables customers to fetch their health information from one or more Health Information Providers (e.g., Hospitals, Diagnostic Labs, Medical Device Companies), based on their explicit Consent and to share such aggregated information with Health Information Users i.e. entities in need of such data (e.g., Insurers, Doctors, Medical Researchers).  # Specifications 1. This document maintains only the Health Information Gateway relevant APIs.  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPatientAuthNotificationAcknowledgement_acknowledgement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPatientAuthNotificationAcknowledgement_acknowledgement::OAIPatientAuthNotificationAcknowledgement_acknowledgement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPatientAuthNotificationAcknowledgement_acknowledgement::OAIPatientAuthNotificationAcknowledgement_acknowledgement() {
    this->initializeModel();
}

OAIPatientAuthNotificationAcknowledgement_acknowledgement::~OAIPatientAuthNotificationAcknowledgement_acknowledgement() {}

void OAIPatientAuthNotificationAcknowledgement_acknowledgement::initializeModel() {

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIPatientAuthNotificationAcknowledgement_acknowledgement::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPatientAuthNotificationAcknowledgement_acknowledgement::fromJsonObject(QJsonObject json) {

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIPatientAuthNotificationAcknowledgement_acknowledgement::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPatientAuthNotificationAcknowledgement_acknowledgement::asJsonObject() const {
    QJsonObject obj;
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIPatientAuthNotificationAcknowledgement_acknowledgement::getStatus() const {
    return m_status;
}
void OAIPatientAuthNotificationAcknowledgement_acknowledgement::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPatientAuthNotificationAcknowledgement_acknowledgement::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPatientAuthNotificationAcknowledgement_acknowledgement::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIPatientAuthNotificationAcknowledgement_acknowledgement::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPatientAuthNotificationAcknowledgement_acknowledgement::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_status_isValid && true;
}

} // namespace OpenAPI
