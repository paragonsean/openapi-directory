/**
 * Health Data Consent Manager
 * Entity which provides health information aggregation services to customers of health care services. It enables customers to fetch their health information from one or more Health Information Providers (e.g., Hospitals, Diagnostic Labs, Medical Device Companies), based on their explicit Consent and to share such aggregated information with Health Information Users i.e. entities in need of such data (e.g., Insurers, Doctors, Medical Researchers).  # Specifications 1. This document maintains only the Health Information Gateway relevant APIs.  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPermission_frequency.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPermission_frequency::OAIPermission_frequency(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPermission_frequency::OAIPermission_frequency() {
    this->initializeModel();
}

OAIPermission_frequency::~OAIPermission_frequency() {}

void OAIPermission_frequency::initializeModel() {

    m_repeats_isSet = false;
    m_repeats_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIPermission_frequency::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPermission_frequency::fromJsonObject(QJsonObject json) {

    m_repeats_isValid = ::OpenAPI::fromJsonValue(m_repeats, json[QString("repeats")]);
    m_repeats_isSet = !json[QString("repeats")].isNull() && m_repeats_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("unit")]);
    m_unit_isSet = !json[QString("unit")].isNull() && m_unit_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIPermission_frequency::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPermission_frequency::asJsonObject() const {
    QJsonObject obj;
    if (m_repeats_isSet) {
        obj.insert(QString("repeats"), ::OpenAPI::toJsonValue(m_repeats));
    }
    if (m_unit_isSet) {
        obj.insert(QString("unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

qint32 OAIPermission_frequency::getRepeats() const {
    return m_repeats;
}
void OAIPermission_frequency::setRepeats(const qint32 &repeats) {
    m_repeats = repeats;
    m_repeats_isSet = true;
}

bool OAIPermission_frequency::is_repeats_Set() const{
    return m_repeats_isSet;
}

bool OAIPermission_frequency::is_repeats_Valid() const{
    return m_repeats_isValid;
}

QString OAIPermission_frequency::getUnit() const {
    return m_unit;
}
void OAIPermission_frequency::setUnit(const QString &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAIPermission_frequency::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAIPermission_frequency::is_unit_Valid() const{
    return m_unit_isValid;
}

qint32 OAIPermission_frequency::getValue() const {
    return m_value;
}
void OAIPermission_frequency::setValue(const qint32 &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIPermission_frequency::is_value_Set() const{
    return m_value_isSet;
}

bool OAIPermission_frequency::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIPermission_frequency::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_repeats_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPermission_frequency::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
