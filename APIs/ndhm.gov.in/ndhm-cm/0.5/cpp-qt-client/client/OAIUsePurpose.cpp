/**
 * Health Data Consent Manager
 * Entity which provides health information aggregation services to customers of health care services. It enables customers to fetch their health information from one or more Health Information Providers (e.g., Hospitals, Diagnostic Labs, Medical Device Companies), based on their explicit Consent and to share such aggregated information with Health Information Users i.e. entities in need of such data (e.g., Insurers, Doctors, Medical Researchers).  # Specifications 1. This document maintains only the Health Information Gateway relevant APIs.  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUsePurpose.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUsePurpose::OAIUsePurpose(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUsePurpose::OAIUsePurpose() {
    this->initializeModel();
}

OAIUsePurpose::~OAIUsePurpose() {}

void OAIUsePurpose::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_ref_uri_isSet = false;
    m_ref_uri_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;
}

void OAIUsePurpose::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUsePurpose::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_ref_uri_isValid = ::OpenAPI::fromJsonValue(m_ref_uri, json[QString("refUri")]);
    m_ref_uri_isSet = !json[QString("refUri")].isNull() && m_ref_uri_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;
}

QString OAIUsePurpose::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUsePurpose::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_ref_uri_isSet) {
        obj.insert(QString("refUri"), ::OpenAPI::toJsonValue(m_ref_uri));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    return obj;
}

QString OAIUsePurpose::getCode() const {
    return m_code;
}
void OAIUsePurpose::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIUsePurpose::is_code_Set() const{
    return m_code_isSet;
}

bool OAIUsePurpose::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIUsePurpose::getRefUri() const {
    return m_ref_uri;
}
void OAIUsePurpose::setRefUri(const QString &ref_uri) {
    m_ref_uri = ref_uri;
    m_ref_uri_isSet = true;
}

bool OAIUsePurpose::is_ref_uri_Set() const{
    return m_ref_uri_isSet;
}

bool OAIUsePurpose::is_ref_uri_Valid() const{
    return m_ref_uri_isValid;
}

QString OAIUsePurpose::getText() const {
    return m_text;
}
void OAIUsePurpose::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIUsePurpose::is_text_Set() const{
    return m_text_isSet;
}

bool OAIUsePurpose::is_text_Valid() const{
    return m_text_isValid;
}

bool OAIUsePurpose::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUsePurpose::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_code_isValid && m_text_isValid && true;
}

} // namespace OpenAPI
