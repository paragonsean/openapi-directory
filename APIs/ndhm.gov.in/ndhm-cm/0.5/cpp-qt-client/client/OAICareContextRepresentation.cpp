/**
 * Health Data Consent Manager
 * Entity which provides health information aggregation services to customers of health care services. It enables customers to fetch their health information from one or more Health Information Providers (e.g., Hospitals, Diagnostic Labs, Medical Device Companies), based on their explicit Consent and to share such aggregated information with Health Information Users i.e. entities in need of such data (e.g., Insurers, Doctors, Medical Researchers).  # Specifications 1. This document maintains only the Health Information Gateway relevant APIs.  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICareContextRepresentation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICareContextRepresentation::OAICareContextRepresentation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICareContextRepresentation::OAICareContextRepresentation() {
    this->initializeModel();
}

OAICareContextRepresentation::~OAICareContextRepresentation() {}

void OAICareContextRepresentation::initializeModel() {

    m_display_isSet = false;
    m_display_isValid = false;

    m_reference_number_isSet = false;
    m_reference_number_isValid = false;
}

void OAICareContextRepresentation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICareContextRepresentation::fromJsonObject(QJsonObject json) {

    m_display_isValid = ::OpenAPI::fromJsonValue(m_display, json[QString("display")]);
    m_display_isSet = !json[QString("display")].isNull() && m_display_isValid;

    m_reference_number_isValid = ::OpenAPI::fromJsonValue(m_reference_number, json[QString("referenceNumber")]);
    m_reference_number_isSet = !json[QString("referenceNumber")].isNull() && m_reference_number_isValid;
}

QString OAICareContextRepresentation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICareContextRepresentation::asJsonObject() const {
    QJsonObject obj;
    if (m_display_isSet) {
        obj.insert(QString("display"), ::OpenAPI::toJsonValue(m_display));
    }
    if (m_reference_number_isSet) {
        obj.insert(QString("referenceNumber"), ::OpenAPI::toJsonValue(m_reference_number));
    }
    return obj;
}

QString OAICareContextRepresentation::getDisplay() const {
    return m_display;
}
void OAICareContextRepresentation::setDisplay(const QString &display) {
    m_display = display;
    m_display_isSet = true;
}

bool OAICareContextRepresentation::is_display_Set() const{
    return m_display_isSet;
}

bool OAICareContextRepresentation::is_display_Valid() const{
    return m_display_isValid;
}

QString OAICareContextRepresentation::getReferenceNumber() const {
    return m_reference_number;
}
void OAICareContextRepresentation::setReferenceNumber(const QString &reference_number) {
    m_reference_number = reference_number;
    m_reference_number_isSet = true;
}

bool OAICareContextRepresentation::is_reference_number_Set() const{
    return m_reference_number_isSet;
}

bool OAICareContextRepresentation::is_reference_number_Valid() const{
    return m_reference_number_isValid;
}

bool OAICareContextRepresentation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICareContextRepresentation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_display_isValid && m_reference_number_isValid && true;
}

} // namespace OpenAPI
