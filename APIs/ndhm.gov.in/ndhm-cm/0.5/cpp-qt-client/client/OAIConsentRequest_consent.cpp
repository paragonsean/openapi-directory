/**
 * Health Data Consent Manager
 * Entity which provides health information aggregation services to customers of health care services. It enables customers to fetch their health information from one or more Health Information Providers (e.g., Hospitals, Diagnostic Labs, Medical Device Companies), based on their explicit Consent and to share such aggregated information with Health Information Users i.e. entities in need of such data (e.g., Insurers, Doctors, Medical Researchers).  # Specifications 1. This document maintains only the Health Information Gateway relevant APIs.  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConsentRequest_consent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConsentRequest_consent::OAIConsentRequest_consent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConsentRequest_consent::OAIConsentRequest_consent() {
    this->initializeModel();
}

OAIConsentRequest_consent::~OAIConsentRequest_consent() {}

void OAIConsentRequest_consent::initializeModel() {

    m_care_contexts_isSet = false;
    m_care_contexts_isValid = false;

    m_hi_types_isSet = false;
    m_hi_types_isValid = false;

    m_hip_isSet = false;
    m_hip_isValid = false;

    m_hiu_isSet = false;
    m_hiu_isValid = false;

    m_patient_isSet = false;
    m_patient_isValid = false;

    m_permission_isSet = false;
    m_permission_isValid = false;

    m_purpose_isSet = false;
    m_purpose_isValid = false;

    m_requester_isSet = false;
    m_requester_isValid = false;
}

void OAIConsentRequest_consent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConsentRequest_consent::fromJsonObject(QJsonObject json) {

    m_care_contexts_isValid = ::OpenAPI::fromJsonValue(m_care_contexts, json[QString("careContexts")]);
    m_care_contexts_isSet = !json[QString("careContexts")].isNull() && m_care_contexts_isValid;

    m_hi_types_isValid = ::OpenAPI::fromJsonValue(m_hi_types, json[QString("hiTypes")]);
    m_hi_types_isSet = !json[QString("hiTypes")].isNull() && m_hi_types_isValid;

    m_hip_isValid = ::OpenAPI::fromJsonValue(m_hip, json[QString("hip")]);
    m_hip_isSet = !json[QString("hip")].isNull() && m_hip_isValid;

    m_hiu_isValid = ::OpenAPI::fromJsonValue(m_hiu, json[QString("hiu")]);
    m_hiu_isSet = !json[QString("hiu")].isNull() && m_hiu_isValid;

    m_patient_isValid = ::OpenAPI::fromJsonValue(m_patient, json[QString("patient")]);
    m_patient_isSet = !json[QString("patient")].isNull() && m_patient_isValid;

    m_permission_isValid = ::OpenAPI::fromJsonValue(m_permission, json[QString("permission")]);
    m_permission_isSet = !json[QString("permission")].isNull() && m_permission_isValid;

    m_purpose_isValid = ::OpenAPI::fromJsonValue(m_purpose, json[QString("purpose")]);
    m_purpose_isSet = !json[QString("purpose")].isNull() && m_purpose_isValid;

    m_requester_isValid = ::OpenAPI::fromJsonValue(m_requester, json[QString("requester")]);
    m_requester_isSet = !json[QString("requester")].isNull() && m_requester_isValid;
}

QString OAIConsentRequest_consent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConsentRequest_consent::asJsonObject() const {
    QJsonObject obj;
    if (m_care_contexts.size() > 0) {
        obj.insert(QString("careContexts"), ::OpenAPI::toJsonValue(m_care_contexts));
    }
    if (m_hi_types.size() > 0) {
        obj.insert(QString("hiTypes"), ::OpenAPI::toJsonValue(m_hi_types));
    }
    if (m_hip.isSet()) {
        obj.insert(QString("hip"), ::OpenAPI::toJsonValue(m_hip));
    }
    if (m_hiu.isSet()) {
        obj.insert(QString("hiu"), ::OpenAPI::toJsonValue(m_hiu));
    }
    if (m_patient.isSet()) {
        obj.insert(QString("patient"), ::OpenAPI::toJsonValue(m_patient));
    }
    if (m_permission.isSet()) {
        obj.insert(QString("permission"), ::OpenAPI::toJsonValue(m_permission));
    }
    if (m_purpose.isSet()) {
        obj.insert(QString("purpose"), ::OpenAPI::toJsonValue(m_purpose));
    }
    if (m_requester.isSet()) {
        obj.insert(QString("requester"), ::OpenAPI::toJsonValue(m_requester));
    }
    return obj;
}

QList<OAICareContextDefinition> OAIConsentRequest_consent::getCareContexts() const {
    return m_care_contexts;
}
void OAIConsentRequest_consent::setCareContexts(const QList<OAICareContextDefinition> &care_contexts) {
    m_care_contexts = care_contexts;
    m_care_contexts_isSet = true;
}

bool OAIConsentRequest_consent::is_care_contexts_Set() const{
    return m_care_contexts_isSet;
}

bool OAIConsentRequest_consent::is_care_contexts_Valid() const{
    return m_care_contexts_isValid;
}

QList<OAIHITypeEnum> OAIConsentRequest_consent::getHiTypes() const {
    return m_hi_types;
}
void OAIConsentRequest_consent::setHiTypes(const QList<OAIHITypeEnum> &hi_types) {
    m_hi_types = hi_types;
    m_hi_types_isSet = true;
}

bool OAIConsentRequest_consent::is_hi_types_Set() const{
    return m_hi_types_isSet;
}

bool OAIConsentRequest_consent::is_hi_types_Valid() const{
    return m_hi_types_isValid;
}

OAIConsentRequest_consent_hip OAIConsentRequest_consent::getHip() const {
    return m_hip;
}
void OAIConsentRequest_consent::setHip(const OAIConsentRequest_consent_hip &hip) {
    m_hip = hip;
    m_hip_isSet = true;
}

bool OAIConsentRequest_consent::is_hip_Set() const{
    return m_hip_isSet;
}

bool OAIConsentRequest_consent::is_hip_Valid() const{
    return m_hip_isValid;
}

OAIConsentRequest_consent_hiu OAIConsentRequest_consent::getHiu() const {
    return m_hiu;
}
void OAIConsentRequest_consent::setHiu(const OAIConsentRequest_consent_hiu &hiu) {
    m_hiu = hiu;
    m_hiu_isSet = true;
}

bool OAIConsentRequest_consent::is_hiu_Set() const{
    return m_hiu_isSet;
}

bool OAIConsentRequest_consent::is_hiu_Valid() const{
    return m_hiu_isValid;
}

OAIConsentRequest_consent_patient OAIConsentRequest_consent::getPatient() const {
    return m_patient;
}
void OAIConsentRequest_consent::setPatient(const OAIConsentRequest_consent_patient &patient) {
    m_patient = patient;
    m_patient_isSet = true;
}

bool OAIConsentRequest_consent::is_patient_Set() const{
    return m_patient_isSet;
}

bool OAIConsentRequest_consent::is_patient_Valid() const{
    return m_patient_isValid;
}

OAIPermission OAIConsentRequest_consent::getPermission() const {
    return m_permission;
}
void OAIConsentRequest_consent::setPermission(const OAIPermission &permission) {
    m_permission = permission;
    m_permission_isSet = true;
}

bool OAIConsentRequest_consent::is_permission_Set() const{
    return m_permission_isSet;
}

bool OAIConsentRequest_consent::is_permission_Valid() const{
    return m_permission_isValid;
}

OAIUsePurpose OAIConsentRequest_consent::getPurpose() const {
    return m_purpose;
}
void OAIConsentRequest_consent::setPurpose(const OAIUsePurpose &purpose) {
    m_purpose = purpose;
    m_purpose_isSet = true;
}

bool OAIConsentRequest_consent::is_purpose_Set() const{
    return m_purpose_isSet;
}

bool OAIConsentRequest_consent::is_purpose_Valid() const{
    return m_purpose_isValid;
}

OAIRequester OAIConsentRequest_consent::getRequester() const {
    return m_requester;
}
void OAIConsentRequest_consent::setRequester(const OAIRequester &requester) {
    m_requester = requester;
    m_requester_isSet = true;
}

bool OAIConsentRequest_consent::is_requester_Set() const{
    return m_requester_isSet;
}

bool OAIConsentRequest_consent::is_requester_Valid() const{
    return m_requester_isValid;
}

bool OAIConsentRequest_consent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_care_contexts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_hi_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_hip.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hiu.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_patient.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_permission.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_purpose.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_requester.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConsentRequest_consent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_hi_types_isValid && m_hiu_isValid && m_patient_isValid && m_permission_isValid && m_purpose_isValid && m_requester_isValid && true;
}

} // namespace OpenAPI
