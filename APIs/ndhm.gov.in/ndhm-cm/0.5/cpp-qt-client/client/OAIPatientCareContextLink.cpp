/**
 * Health Data Consent Manager
 * Entity which provides health information aggregation services to customers of health care services. It enables customers to fetch their health information from one or more Health Information Providers (e.g., Hospitals, Diagnostic Labs, Medical Device Companies), based on their explicit Consent and to share such aggregated information with Health Information Users i.e. entities in need of such data (e.g., Insurers, Doctors, Medical Researchers).  # Specifications 1. This document maintains only the Health Information Gateway relevant APIs.  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPatientCareContextLink.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPatientCareContextLink::OAIPatientCareContextLink(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPatientCareContextLink::OAIPatientCareContextLink() {
    this->initializeModel();
}

OAIPatientCareContextLink::~OAIPatientCareContextLink() {}

void OAIPatientCareContextLink::initializeModel() {

    m_access_token_isSet = false;
    m_access_token_isValid = false;

    m_patient_isSet = false;
    m_patient_isValid = false;
}

void OAIPatientCareContextLink::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPatientCareContextLink::fromJsonObject(QJsonObject json) {

    m_access_token_isValid = ::OpenAPI::fromJsonValue(m_access_token, json[QString("accessToken")]);
    m_access_token_isSet = !json[QString("accessToken")].isNull() && m_access_token_isValid;

    m_patient_isValid = ::OpenAPI::fromJsonValue(m_patient, json[QString("patient")]);
    m_patient_isSet = !json[QString("patient")].isNull() && m_patient_isValid;
}

QString OAIPatientCareContextLink::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPatientCareContextLink::asJsonObject() const {
    QJsonObject obj;
    if (m_access_token_isSet) {
        obj.insert(QString("accessToken"), ::OpenAPI::toJsonValue(m_access_token));
    }
    if (m_patient.isSet()) {
        obj.insert(QString("patient"), ::OpenAPI::toJsonValue(m_patient));
    }
    return obj;
}

QString OAIPatientCareContextLink::getAccessToken() const {
    return m_access_token;
}
void OAIPatientCareContextLink::setAccessToken(const QString &access_token) {
    m_access_token = access_token;
    m_access_token_isSet = true;
}

bool OAIPatientCareContextLink::is_access_token_Set() const{
    return m_access_token_isSet;
}

bool OAIPatientCareContextLink::is_access_token_Valid() const{
    return m_access_token_isValid;
}

OAIPatientCareContextLink_patient OAIPatientCareContextLink::getPatient() const {
    return m_patient;
}
void OAIPatientCareContextLink::setPatient(const OAIPatientCareContextLink_patient &patient) {
    m_patient = patient;
    m_patient_isSet = true;
}

bool OAIPatientCareContextLink::is_patient_Set() const{
    return m_patient_isSet;
}

bool OAIPatientCareContextLink::is_patient_Valid() const{
    return m_patient_isValid;
}

bool OAIPatientCareContextLink::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_patient.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPatientCareContextLink::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_access_token_isValid && m_patient_isValid && true;
}

} // namespace OpenAPI
