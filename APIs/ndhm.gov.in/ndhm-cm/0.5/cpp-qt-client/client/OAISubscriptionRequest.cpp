/**
 * Health Data Consent Manager
 * Entity which provides health information aggregation services to customers of health care services. It enables customers to fetch their health information from one or more Health Information Providers (e.g., Hospitals, Diagnostic Labs, Medical Device Companies), based on their explicit Consent and to share such aggregated information with Health Information Users i.e. entities in need of such data (e.g., Insurers, Doctors, Medical Researchers).  # Specifications 1. This document maintains only the Health Information Gateway relevant APIs.  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscriptionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscriptionRequest::OAISubscriptionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscriptionRequest::OAISubscriptionRequest() {
    this->initializeModel();
}

OAISubscriptionRequest::~OAISubscriptionRequest() {}

void OAISubscriptionRequest::initializeModel() {

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_subscription_isSet = false;
    m_subscription_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;
}

void OAISubscriptionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscriptionRequest::fromJsonObject(QJsonObject json) {

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("requestId")]);
    m_request_id_isSet = !json[QString("requestId")].isNull() && m_request_id_isValid;

    m_subscription_isValid = ::OpenAPI::fromJsonValue(m_subscription, json[QString("subscription")]);
    m_subscription_isSet = !json[QString("subscription")].isNull() && m_subscription_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;
}

QString OAISubscriptionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscriptionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_request_id_isSet) {
        obj.insert(QString("requestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_subscription.isSet()) {
        obj.insert(QString("subscription"), ::OpenAPI::toJsonValue(m_subscription));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    return obj;
}

QString OAISubscriptionRequest::getRequestId() const {
    return m_request_id;
}
void OAISubscriptionRequest::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAISubscriptionRequest::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAISubscriptionRequest::is_request_id_Valid() const{
    return m_request_id_isValid;
}

OAISubscriptionRequest_subscription OAISubscriptionRequest::getSubscription() const {
    return m_subscription;
}
void OAISubscriptionRequest::setSubscription(const OAISubscriptionRequest_subscription &subscription) {
    m_subscription = subscription;
    m_subscription_isSet = true;
}

bool OAISubscriptionRequest::is_subscription_Set() const{
    return m_subscription_isSet;
}

bool OAISubscriptionRequest::is_subscription_Valid() const{
    return m_subscription_isValid;
}

QDateTime OAISubscriptionRequest::getTimestamp() const {
    return m_timestamp;
}
void OAISubscriptionRequest::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAISubscriptionRequest::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAISubscriptionRequest::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

bool OAISubscriptionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscriptionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_request_id_isValid && m_subscription_isValid && m_timestamp_isValid && true;
}

} // namespace OpenAPI
