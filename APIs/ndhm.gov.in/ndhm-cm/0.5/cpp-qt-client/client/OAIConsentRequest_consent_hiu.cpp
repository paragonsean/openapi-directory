/**
 * Health Data Consent Manager
 * Entity which provides health information aggregation services to customers of health care services. It enables customers to fetch their health information from one or more Health Information Providers (e.g., Hospitals, Diagnostic Labs, Medical Device Companies), based on their explicit Consent and to share such aggregated information with Health Information Users i.e. entities in need of such data (e.g., Insurers, Doctors, Medical Researchers).  # Specifications 1. This document maintains only the Health Information Gateway relevant APIs.  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConsentRequest_consent_hiu.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConsentRequest_consent_hiu::OAIConsentRequest_consent_hiu(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConsentRequest_consent_hiu::OAIConsentRequest_consent_hiu() {
    this->initializeModel();
}

OAIConsentRequest_consent_hiu::~OAIConsentRequest_consent_hiu() {}

void OAIConsentRequest_consent_hiu::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;
}

void OAIConsentRequest_consent_hiu::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConsentRequest_consent_hiu::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;
}

QString OAIConsentRequest_consent_hiu::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConsentRequest_consent_hiu::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    return obj;
}

QString OAIConsentRequest_consent_hiu::getId() const {
    return m_id;
}
void OAIConsentRequest_consent_hiu::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIConsentRequest_consent_hiu::is_id_Set() const{
    return m_id_isSet;
}

bool OAIConsentRequest_consent_hiu::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIConsentRequest_consent_hiu::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConsentRequest_consent_hiu::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && true;
}

} // namespace OpenAPI
