/**
 * Health Data Consent Manager
 * Entity which provides health information aggregation services to customers of health care services. It enables customers to fetch their health information from one or more Health Information Providers (e.g., Hospitals, Diagnostic Labs, Medical Device Companies), based on their explicit Consent and to share such aggregated information with Health Information Users i.e. entities in need of such data (e.g., Insurers, Doctors, Medical Researchers).  # Specifications 1. This document maintains only the Health Information Gateway relevant APIs.  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPatientAuthConfirmRequest_credential.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPatientAuthConfirmRequest_credential::OAIPatientAuthConfirmRequest_credential(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPatientAuthConfirmRequest_credential::OAIPatientAuthConfirmRequest_credential() {
    this->initializeModel();
}

OAIPatientAuthConfirmRequest_credential::~OAIPatientAuthConfirmRequest_credential() {}

void OAIPatientAuthConfirmRequest_credential::initializeModel() {

    m_auth_code_isSet = false;
    m_auth_code_isValid = false;

    m_demographic_isSet = false;
    m_demographic_isValid = false;
}

void OAIPatientAuthConfirmRequest_credential::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPatientAuthConfirmRequest_credential::fromJsonObject(QJsonObject json) {

    m_auth_code_isValid = ::OpenAPI::fromJsonValue(m_auth_code, json[QString("authCode")]);
    m_auth_code_isSet = !json[QString("authCode")].isNull() && m_auth_code_isValid;

    m_demographic_isValid = ::OpenAPI::fromJsonValue(m_demographic, json[QString("demographic")]);
    m_demographic_isSet = !json[QString("demographic")].isNull() && m_demographic_isValid;
}

QString OAIPatientAuthConfirmRequest_credential::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPatientAuthConfirmRequest_credential::asJsonObject() const {
    QJsonObject obj;
    if (m_auth_code_isSet) {
        obj.insert(QString("authCode"), ::OpenAPI::toJsonValue(m_auth_code));
    }
    if (m_demographic.isSet()) {
        obj.insert(QString("demographic"), ::OpenAPI::toJsonValue(m_demographic));
    }
    return obj;
}

QString OAIPatientAuthConfirmRequest_credential::getAuthCode() const {
    return m_auth_code;
}
void OAIPatientAuthConfirmRequest_credential::setAuthCode(const QString &auth_code) {
    m_auth_code = auth_code;
    m_auth_code_isSet = true;
}

bool OAIPatientAuthConfirmRequest_credential::is_auth_code_Set() const{
    return m_auth_code_isSet;
}

bool OAIPatientAuthConfirmRequest_credential::is_auth_code_Valid() const{
    return m_auth_code_isValid;
}

OAIPatientDemographic OAIPatientAuthConfirmRequest_credential::getDemographic() const {
    return m_demographic;
}
void OAIPatientAuthConfirmRequest_credential::setDemographic(const OAIPatientDemographic &demographic) {
    m_demographic = demographic;
    m_demographic_isSet = true;
}

bool OAIPatientAuthConfirmRequest_credential::is_demographic_Set() const{
    return m_demographic_isSet;
}

bool OAIPatientAuthConfirmRequest_credential::is_demographic_Valid() const{
    return m_demographic_isValid;
}

bool OAIPatientAuthConfirmRequest_credential::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auth_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_demographic.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPatientAuthConfirmRequest_credential::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
