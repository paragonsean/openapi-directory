/**
 * Health Data Consent Manager
 * Entity which provides health information aggregation services to customers of health care services. It enables customers to fetch their health information from one or more Health Information Providers (e.g., Hospitals, Diagnostic Labs, Medical Device Companies), based on their explicit Consent and to share such aggregated information with Health Information Users i.e. entities in need of such data (e.g., Insurers, Doctors, Medical Researchers).  # Specifications 1. This document maintains only the Health Information Gateway relevant APIs.  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPermission_dateRange.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPermission_dateRange::OAIPermission_dateRange(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPermission_dateRange::OAIPermission_dateRange() {
    this->initializeModel();
}

OAIPermission_dateRange::~OAIPermission_dateRange() {}

void OAIPermission_dateRange::initializeModel() {

    m_from_isSet = false;
    m_from_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;
}

void OAIPermission_dateRange::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPermission_dateRange::fromJsonObject(QJsonObject json) {

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;
}

QString OAIPermission_dateRange::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPermission_dateRange::asJsonObject() const {
    QJsonObject obj;
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    return obj;
}

QDateTime OAIPermission_dateRange::getFrom() const {
    return m_from;
}
void OAIPermission_dateRange::setFrom(const QDateTime &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAIPermission_dateRange::is_from_Set() const{
    return m_from_isSet;
}

bool OAIPermission_dateRange::is_from_Valid() const{
    return m_from_isValid;
}

QDateTime OAIPermission_dateRange::getTo() const {
    return m_to;
}
void OAIPermission_dateRange::setTo(const QDateTime &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAIPermission_dateRange::is_to_Set() const{
    return m_to_isSet;
}

bool OAIPermission_dateRange::is_to_Valid() const{
    return m_to_isValid;
}

bool OAIPermission_dateRange::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPermission_dateRange::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_from_isValid && m_to_isValid && true;
}

} // namespace OpenAPI
