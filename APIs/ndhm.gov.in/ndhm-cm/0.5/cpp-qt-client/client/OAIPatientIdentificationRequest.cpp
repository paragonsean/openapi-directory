/**
 * Health Data Consent Manager
 * Entity which provides health information aggregation services to customers of health care services. It enables customers to fetch their health information from one or more Health Information Providers (e.g., Hospitals, Diagnostic Labs, Medical Device Companies), based on their explicit Consent and to share such aggregated information with Health Information Users i.e. entities in need of such data (e.g., Insurers, Doctors, Medical Researchers).  # Specifications 1. This document maintains only the Health Information Gateway relevant APIs.  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPatientIdentificationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPatientIdentificationRequest::OAIPatientIdentificationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPatientIdentificationRequest::OAIPatientIdentificationRequest() {
    this->initializeModel();
}

OAIPatientIdentificationRequest::~OAIPatientIdentificationRequest() {}

void OAIPatientIdentificationRequest::initializeModel() {

    m_query_isSet = false;
    m_query_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;
}

void OAIPatientIdentificationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPatientIdentificationRequest::fromJsonObject(QJsonObject json) {

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("requestId")]);
    m_request_id_isSet = !json[QString("requestId")].isNull() && m_request_id_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;
}

QString OAIPatientIdentificationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPatientIdentificationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_query.isSet()) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("requestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    return obj;
}

OAIPatientIdentificationRequest_query OAIPatientIdentificationRequest::getQuery() const {
    return m_query;
}
void OAIPatientIdentificationRequest::setQuery(const OAIPatientIdentificationRequest_query &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAIPatientIdentificationRequest::is_query_Set() const{
    return m_query_isSet;
}

bool OAIPatientIdentificationRequest::is_query_Valid() const{
    return m_query_isValid;
}

QString OAIPatientIdentificationRequest::getRequestId() const {
    return m_request_id;
}
void OAIPatientIdentificationRequest::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIPatientIdentificationRequest::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIPatientIdentificationRequest::is_request_id_Valid() const{
    return m_request_id_isValid;
}

QDateTime OAIPatientIdentificationRequest::getTimestamp() const {
    return m_timestamp;
}
void OAIPatientIdentificationRequest::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIPatientIdentificationRequest::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIPatientIdentificationRequest::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

bool OAIPatientIdentificationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_query.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPatientIdentificationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_query_isValid && m_request_id_isValid && m_timestamp_isValid && true;
}

} // namespace OpenAPI
