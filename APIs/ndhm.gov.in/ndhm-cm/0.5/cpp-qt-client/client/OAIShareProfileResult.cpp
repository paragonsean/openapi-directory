/**
 * Health Data Consent Manager
 * Entity which provides health information aggregation services to customers of health care services. It enables customers to fetch their health information from one or more Health Information Providers (e.g., Hospitals, Diagnostic Labs, Medical Device Companies), based on their explicit Consent and to share such aggregated information with Health Information Users i.e. entities in need of such data (e.g., Insurers, Doctors, Medical Researchers).  # Specifications 1. This document maintains only the Health Information Gateway relevant APIs.  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShareProfileResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShareProfileResult::OAIShareProfileResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShareProfileResult::OAIShareProfileResult() {
    this->initializeModel();
}

OAIShareProfileResult::~OAIShareProfileResult() {}

void OAIShareProfileResult::initializeModel() {

    m_acknowledgement_isSet = false;
    m_acknowledgement_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_resp_isSet = false;
    m_resp_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;
}

void OAIShareProfileResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShareProfileResult::fromJsonObject(QJsonObject json) {

    m_acknowledgement_isValid = ::OpenAPI::fromJsonValue(m_acknowledgement, json[QString("acknowledgement")]);
    m_acknowledgement_isSet = !json[QString("acknowledgement")].isNull() && m_acknowledgement_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("requestId")]);
    m_request_id_isSet = !json[QString("requestId")].isNull() && m_request_id_isValid;

    m_resp_isValid = ::OpenAPI::fromJsonValue(m_resp, json[QString("resp")]);
    m_resp_isSet = !json[QString("resp")].isNull() && m_resp_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;
}

QString OAIShareProfileResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShareProfileResult::asJsonObject() const {
    QJsonObject obj;
    if (m_acknowledgement.isSet()) {
        obj.insert(QString("acknowledgement"), ::OpenAPI::toJsonValue(m_acknowledgement));
    }
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("requestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_resp.isSet()) {
        obj.insert(QString("resp"), ::OpenAPI::toJsonValue(m_resp));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    return obj;
}

OAIShareProfileAcknowledgement OAIShareProfileResult::getAcknowledgement() const {
    return m_acknowledgement;
}
void OAIShareProfileResult::setAcknowledgement(const OAIShareProfileAcknowledgement &acknowledgement) {
    m_acknowledgement = acknowledgement;
    m_acknowledgement_isSet = true;
}

bool OAIShareProfileResult::is_acknowledgement_Set() const{
    return m_acknowledgement_isSet;
}

bool OAIShareProfileResult::is_acknowledgement_Valid() const{
    return m_acknowledgement_isValid;
}

OAIError OAIShareProfileResult::getError() const {
    return m_error;
}
void OAIShareProfileResult::setError(const OAIError &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIShareProfileResult::is_error_Set() const{
    return m_error_isSet;
}

bool OAIShareProfileResult::is_error_Valid() const{
    return m_error_isValid;
}

QString OAIShareProfileResult::getRequestId() const {
    return m_request_id;
}
void OAIShareProfileResult::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIShareProfileResult::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIShareProfileResult::is_request_id_Valid() const{
    return m_request_id_isValid;
}

OAIRequestReference OAIShareProfileResult::getResp() const {
    return m_resp;
}
void OAIShareProfileResult::setResp(const OAIRequestReference &resp) {
    m_resp = resp;
    m_resp_isSet = true;
}

bool OAIShareProfileResult::is_resp_Set() const{
    return m_resp_isSet;
}

bool OAIShareProfileResult::is_resp_Valid() const{
    return m_resp_isValid;
}

QDateTime OAIShareProfileResult::getTimestamp() const {
    return m_timestamp;
}
void OAIShareProfileResult::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIShareProfileResult::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIShareProfileResult::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

bool OAIShareProfileResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acknowledgement.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resp.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShareProfileResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_acknowledgement_isValid && m_request_id_isValid && m_resp_isValid && m_timestamp_isValid && true;
}

} // namespace OpenAPI
