/**
 * Health Data Consent Manager
 * Entity which provides health information aggregation services to customers of health care services. It enables customers to fetch their health information from one or more Health Information Providers (e.g., Hospitals, Diagnostic Labs, Medical Device Companies), based on their explicit Consent and to share such aggregated information with Health Information Users i.e. entities in need of such data (e.g., Insurers, Doctors, Medical Researchers).  # Specifications 1. This document maintains only the Health Information Gateway relevant APIs.  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPatientIdentificationRequest_query_patient.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPatientIdentificationRequest_query_patient::OAIPatientIdentificationRequest_query_patient(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPatientIdentificationRequest_query_patient::OAIPatientIdentificationRequest_query_patient() {
    this->initializeModel();
}

OAIPatientIdentificationRequest_query_patient::~OAIPatientIdentificationRequest_query_patient() {}

void OAIPatientIdentificationRequest_query_patient::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;
}

void OAIPatientIdentificationRequest_query_patient::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPatientIdentificationRequest_query_patient::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;
}

QString OAIPatientIdentificationRequest_query_patient::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPatientIdentificationRequest_query_patient::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    return obj;
}

QString OAIPatientIdentificationRequest_query_patient::getId() const {
    return m_id;
}
void OAIPatientIdentificationRequest_query_patient::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPatientIdentificationRequest_query_patient::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPatientIdentificationRequest_query_patient::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIPatientIdentificationRequest_query_patient::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPatientIdentificationRequest_query_patient::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && true;
}

} // namespace OpenAPI
