/**
 * Health Data Consent Manager
 * Entity which provides health information aggregation services to customers of health care services. It enables customers to fetch their health information from one or more Health Information Providers (e.g., Hospitals, Diagnostic Labs, Medical Device Companies), based on their explicit Consent and to share such aggregated information with Health Information Users i.e. entities in need of such data (e.g., Insurers, Doctors, Medical Researchers).  # Specifications 1. This document maintains only the Health Information Gateway relevant APIs.  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHIUSubscriptionNotificationAcknowledgment_acknowledgement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHIUSubscriptionNotificationAcknowledgment_acknowledgement::OAIHIUSubscriptionNotificationAcknowledgment_acknowledgement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHIUSubscriptionNotificationAcknowledgment_acknowledgement::OAIHIUSubscriptionNotificationAcknowledgment_acknowledgement() {
    this->initializeModel();
}

OAIHIUSubscriptionNotificationAcknowledgment_acknowledgement::~OAIHIUSubscriptionNotificationAcknowledgment_acknowledgement() {}

void OAIHIUSubscriptionNotificationAcknowledgment_acknowledgement::initializeModel() {

    m_event_id_isSet = false;
    m_event_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIHIUSubscriptionNotificationAcknowledgment_acknowledgement::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHIUSubscriptionNotificationAcknowledgment_acknowledgement::fromJsonObject(QJsonObject json) {

    m_event_id_isValid = ::OpenAPI::fromJsonValue(m_event_id, json[QString("eventId")]);
    m_event_id_isSet = !json[QString("eventId")].isNull() && m_event_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIHIUSubscriptionNotificationAcknowledgment_acknowledgement::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHIUSubscriptionNotificationAcknowledgment_acknowledgement::asJsonObject() const {
    QJsonObject obj;
    if (m_event_id_isSet) {
        obj.insert(QString("eventId"), ::OpenAPI::toJsonValue(m_event_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIHIUSubscriptionNotificationAcknowledgment_acknowledgement::getEventId() const {
    return m_event_id;
}
void OAIHIUSubscriptionNotificationAcknowledgment_acknowledgement::setEventId(const QString &event_id) {
    m_event_id = event_id;
    m_event_id_isSet = true;
}

bool OAIHIUSubscriptionNotificationAcknowledgment_acknowledgement::is_event_id_Set() const{
    return m_event_id_isSet;
}

bool OAIHIUSubscriptionNotificationAcknowledgment_acknowledgement::is_event_id_Valid() const{
    return m_event_id_isValid;
}

QString OAIHIUSubscriptionNotificationAcknowledgment_acknowledgement::getStatus() const {
    return m_status;
}
void OAIHIUSubscriptionNotificationAcknowledgment_acknowledgement::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIHIUSubscriptionNotificationAcknowledgment_acknowledgement::is_status_Set() const{
    return m_status_isSet;
}

bool OAIHIUSubscriptionNotificationAcknowledgment_acknowledgement::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIHIUSubscriptionNotificationAcknowledgment_acknowledgement::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHIUSubscriptionNotificationAcknowledgment_acknowledgement::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_event_id_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
