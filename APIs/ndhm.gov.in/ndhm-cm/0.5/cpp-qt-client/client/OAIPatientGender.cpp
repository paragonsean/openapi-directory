/**
 * Health Data Consent Manager
 * Entity which provides health information aggregation services to customers of health care services. It enables customers to fetch their health information from one or more Health Information Providers (e.g., Hospitals, Diagnostic Labs, Medical Device Companies), based on their explicit Consent and to share such aggregated information with Health Information Users i.e. entities in need of such data (e.g., Insurers, Doctors, Medical Researchers).  # Specifications 1. This document maintains only the Health Information Gateway relevant APIs.  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPatientGender.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPatientGender::OAIPatientGender(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPatientGender::OAIPatientGender() {
    this->initializeModel();
}

OAIPatientGender::~OAIPatientGender() {}

void OAIPatientGender::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIPatientGender::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIPatientGender::fromJson(QString jsonString) {
    
    if ( jsonString.compare("M", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPatientGender::M;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("F", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPatientGender::F;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("O", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPatientGender::O;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("U", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPatientGender::U;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIPatientGender::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIPatientGender::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIPatientGender::M:
            val = "M";
            break;
        case eOAIPatientGender::F:
            val = "F";
            break;
        case eOAIPatientGender::O:
            val = "O";
            break;
        case eOAIPatientGender::U:
            val = "U";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIPatientGender::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIPatientGender::eOAIPatientGender OAIPatientGender::getValue() const {
    return m_value;
}

void OAIPatientGender::setValue(const OAIPatientGender::eOAIPatientGender& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIPatientGender::isSet() const {
    
    return m_value_isSet;
}

bool OAIPatientGender::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
