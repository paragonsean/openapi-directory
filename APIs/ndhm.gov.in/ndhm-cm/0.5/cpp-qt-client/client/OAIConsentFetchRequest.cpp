/**
 * Health Data Consent Manager
 * Entity which provides health information aggregation services to customers of health care services. It enables customers to fetch their health information from one or more Health Information Providers (e.g., Hospitals, Diagnostic Labs, Medical Device Companies), based on their explicit Consent and to share such aggregated information with Health Information Users i.e. entities in need of such data (e.g., Insurers, Doctors, Medical Researchers).  # Specifications 1. This document maintains only the Health Information Gateway relevant APIs.  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConsentFetchRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConsentFetchRequest::OAIConsentFetchRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConsentFetchRequest::OAIConsentFetchRequest() {
    this->initializeModel();
}

OAIConsentFetchRequest::~OAIConsentFetchRequest() {}

void OAIConsentFetchRequest::initializeModel() {

    m_consent_id_isSet = false;
    m_consent_id_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;
}

void OAIConsentFetchRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConsentFetchRequest::fromJsonObject(QJsonObject json) {

    m_consent_id_isValid = ::OpenAPI::fromJsonValue(m_consent_id, json[QString("consentId")]);
    m_consent_id_isSet = !json[QString("consentId")].isNull() && m_consent_id_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("requestId")]);
    m_request_id_isSet = !json[QString("requestId")].isNull() && m_request_id_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;
}

QString OAIConsentFetchRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConsentFetchRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_consent_id_isSet) {
        obj.insert(QString("consentId"), ::OpenAPI::toJsonValue(m_consent_id));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("requestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    return obj;
}

QString OAIConsentFetchRequest::getConsentId() const {
    return m_consent_id;
}
void OAIConsentFetchRequest::setConsentId(const QString &consent_id) {
    m_consent_id = consent_id;
    m_consent_id_isSet = true;
}

bool OAIConsentFetchRequest::is_consent_id_Set() const{
    return m_consent_id_isSet;
}

bool OAIConsentFetchRequest::is_consent_id_Valid() const{
    return m_consent_id_isValid;
}

QString OAIConsentFetchRequest::getRequestId() const {
    return m_request_id;
}
void OAIConsentFetchRequest::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIConsentFetchRequest::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIConsentFetchRequest::is_request_id_Valid() const{
    return m_request_id_isValid;
}

QDateTime OAIConsentFetchRequest::getTimestamp() const {
    return m_timestamp;
}
void OAIConsentFetchRequest::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIConsentFetchRequest::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIConsentFetchRequest::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

bool OAIConsentFetchRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_consent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConsentFetchRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_consent_id_isValid && m_request_id_isValid && m_timestamp_isValid && true;
}

} // namespace OpenAPI
