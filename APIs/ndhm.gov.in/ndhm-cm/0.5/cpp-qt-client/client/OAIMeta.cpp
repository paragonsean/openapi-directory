/**
 * Health Data Consent Manager
 * Entity which provides health information aggregation services to customers of health care services. It enables customers to fetch their health information from one or more Health Information Providers (e.g., Hospitals, Diagnostic Labs, Medical Device Companies), based on their explicit Consent and to share such aggregated information with Health Information Users i.e. entities in need of such data (e.g., Insurers, Doctors, Medical Researchers).  # Specifications 1. This document maintains only the Health Information Gateway relevant APIs.  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMeta.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMeta::OAIMeta(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMeta::OAIMeta() {
    this->initializeModel();
}

OAIMeta::~OAIMeta() {}

void OAIMeta::initializeModel() {

    m_communication_expiry_isSet = false;
    m_communication_expiry_isValid = false;

    m_communication_hint_isSet = false;
    m_communication_hint_isValid = false;

    m_communication_medium_isSet = false;
    m_communication_medium_isValid = false;
}

void OAIMeta::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMeta::fromJsonObject(QJsonObject json) {

    m_communication_expiry_isValid = ::OpenAPI::fromJsonValue(m_communication_expiry, json[QString("communicationExpiry")]);
    m_communication_expiry_isSet = !json[QString("communicationExpiry")].isNull() && m_communication_expiry_isValid;

    m_communication_hint_isValid = ::OpenAPI::fromJsonValue(m_communication_hint, json[QString("communicationHint")]);
    m_communication_hint_isSet = !json[QString("communicationHint")].isNull() && m_communication_hint_isValid;

    m_communication_medium_isValid = ::OpenAPI::fromJsonValue(m_communication_medium, json[QString("communicationMedium")]);
    m_communication_medium_isSet = !json[QString("communicationMedium")].isNull() && m_communication_medium_isValid;
}

QString OAIMeta::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMeta::asJsonObject() const {
    QJsonObject obj;
    if (m_communication_expiry_isSet) {
        obj.insert(QString("communicationExpiry"), ::OpenAPI::toJsonValue(m_communication_expiry));
    }
    if (m_communication_hint_isSet) {
        obj.insert(QString("communicationHint"), ::OpenAPI::toJsonValue(m_communication_hint));
    }
    if (m_communication_medium_isSet) {
        obj.insert(QString("communicationMedium"), ::OpenAPI::toJsonValue(m_communication_medium));
    }
    return obj;
}

QString OAIMeta::getCommunicationExpiry() const {
    return m_communication_expiry;
}
void OAIMeta::setCommunicationExpiry(const QString &communication_expiry) {
    m_communication_expiry = communication_expiry;
    m_communication_expiry_isSet = true;
}

bool OAIMeta::is_communication_expiry_Set() const{
    return m_communication_expiry_isSet;
}

bool OAIMeta::is_communication_expiry_Valid() const{
    return m_communication_expiry_isValid;
}

QString OAIMeta::getCommunicationHint() const {
    return m_communication_hint;
}
void OAIMeta::setCommunicationHint(const QString &communication_hint) {
    m_communication_hint = communication_hint;
    m_communication_hint_isSet = true;
}

bool OAIMeta::is_communication_hint_Set() const{
    return m_communication_hint_isSet;
}

bool OAIMeta::is_communication_hint_Valid() const{
    return m_communication_hint_isValid;
}

QString OAIMeta::getCommunicationMedium() const {
    return m_communication_medium;
}
void OAIMeta::setCommunicationMedium(const QString &communication_medium) {
    m_communication_medium = communication_medium;
    m_communication_medium_isSet = true;
}

bool OAIMeta::is_communication_medium_Set() const{
    return m_communication_medium_isSet;
}

bool OAIMeta::is_communication_medium_Valid() const{
    return m_communication_medium_isValid;
}

bool OAIMeta::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_communication_expiry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_communication_hint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_communication_medium_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMeta::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_communication_medium_isValid && true;
}

} // namespace OpenAPI
