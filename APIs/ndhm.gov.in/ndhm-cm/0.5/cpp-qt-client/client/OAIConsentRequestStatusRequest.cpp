/**
 * Health Data Consent Manager
 * Entity which provides health information aggregation services to customers of health care services. It enables customers to fetch their health information from one or more Health Information Providers (e.g., Hospitals, Diagnostic Labs, Medical Device Companies), based on their explicit Consent and to share such aggregated information with Health Information Users i.e. entities in need of such data (e.g., Insurers, Doctors, Medical Researchers).  # Specifications 1. This document maintains only the Health Information Gateway relevant APIs.  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConsentRequestStatusRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConsentRequestStatusRequest::OAIConsentRequestStatusRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConsentRequestStatusRequest::OAIConsentRequestStatusRequest() {
    this->initializeModel();
}

OAIConsentRequestStatusRequest::~OAIConsentRequestStatusRequest() {}

void OAIConsentRequestStatusRequest::initializeModel() {

    m_consent_request_id_isSet = false;
    m_consent_request_id_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;
}

void OAIConsentRequestStatusRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConsentRequestStatusRequest::fromJsonObject(QJsonObject json) {

    m_consent_request_id_isValid = ::OpenAPI::fromJsonValue(m_consent_request_id, json[QString("consentRequestId")]);
    m_consent_request_id_isSet = !json[QString("consentRequestId")].isNull() && m_consent_request_id_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("requestId")]);
    m_request_id_isSet = !json[QString("requestId")].isNull() && m_request_id_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;
}

QString OAIConsentRequestStatusRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConsentRequestStatusRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_consent_request_id_isSet) {
        obj.insert(QString("consentRequestId"), ::OpenAPI::toJsonValue(m_consent_request_id));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("requestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    return obj;
}

QString OAIConsentRequestStatusRequest::getConsentRequestId() const {
    return m_consent_request_id;
}
void OAIConsentRequestStatusRequest::setConsentRequestId(const QString &consent_request_id) {
    m_consent_request_id = consent_request_id;
    m_consent_request_id_isSet = true;
}

bool OAIConsentRequestStatusRequest::is_consent_request_id_Set() const{
    return m_consent_request_id_isSet;
}

bool OAIConsentRequestStatusRequest::is_consent_request_id_Valid() const{
    return m_consent_request_id_isValid;
}

QString OAIConsentRequestStatusRequest::getRequestId() const {
    return m_request_id;
}
void OAIConsentRequestStatusRequest::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIConsentRequestStatusRequest::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIConsentRequestStatusRequest::is_request_id_Valid() const{
    return m_request_id_isValid;
}

QDateTime OAIConsentRequestStatusRequest::getTimestamp() const {
    return m_timestamp;
}
void OAIConsentRequestStatusRequest::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIConsentRequestStatusRequest::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIConsentRequestStatusRequest::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

bool OAIConsentRequestStatusRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_consent_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConsentRequestStatusRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_consent_request_id_isValid && m_request_id_isValid && m_timestamp_isValid && true;
}

} // namespace OpenAPI
