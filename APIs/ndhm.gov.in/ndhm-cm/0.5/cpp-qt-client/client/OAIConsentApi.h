/**
 * Health Data Consent Manager
 * Entity which provides health information aggregation services to customers of health care services. It enables customers to fetch their health information from one or more Health Information Providers (e.g., Hospitals, Diagnostic Labs, Medical Device Companies), based on their explicit Consent and to share such aggregated information with Health Information Users i.e. entities in need of such data (e.g., Insurers, Doctors, Medical Researchers).  # Specifications 1. This document maintains only the Health Information Gateway relevant APIs.  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIConsentApi_H
#define OAI_OAIConsentApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIConsentFetchRequest.h"
#include "OAIConsentRequest.h"
#include "OAIConsentRequestStatusRequest.h"
#include "OAIErrorResponse.h"
#include "OAIHIPConsentNotificationResponse.h"
#include "OAIHIUConsentNotificationResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIConsentApi : public QObject {
    Q_OBJECT

public:
    OAIConsentApi(const int timeOut = 0);
    ~OAIConsentApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  oai_consent_request OAIConsentRequest [required]
    */
    virtual void v05ConsentRequestsInitPost(const QString &authorization, const OAIConsentRequest &oai_consent_request);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  oai_consent_request_status_request OAIConsentRequestStatusRequest [required]
    */
    virtual void v05ConsentRequestsStatusPost(const QString &authorization, const OAIConsentRequestStatusRequest &oai_consent_request_status_request);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  oai_consent_fetch_request OAIConsentFetchRequest [required]
    */
    virtual void v05ConsentsFetchPost(const QString &authorization, const OAIConsentFetchRequest &oai_consent_fetch_request);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  oaihip_consent_notification_response OAIHIPConsentNotificationResponse [required]
    */
    virtual void v05ConsentsHipOnNotifyPost(const QString &authorization, const OAIHIPConsentNotificationResponse &oaihip_consent_notification_response);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  oaihiu_consent_notification_response OAIHIUConsentNotificationResponse [required]
    */
    virtual void v05ConsentsHiuOnNotifyPost(const QString &authorization, const OAIHIUConsentNotificationResponse &oaihiu_consent_notification_response);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void v05ConsentRequestsInitPostCallback(OAIHttpRequestWorker *worker);
    void v05ConsentRequestsStatusPostCallback(OAIHttpRequestWorker *worker);
    void v05ConsentsFetchPostCallback(OAIHttpRequestWorker *worker);
    void v05ConsentsHipOnNotifyPostCallback(OAIHttpRequestWorker *worker);
    void v05ConsentsHiuOnNotifyPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void v05ConsentRequestsInitPostSignal();
    void v05ConsentRequestsStatusPostSignal();
    void v05ConsentsFetchPostSignal();
    void v05ConsentsHipOnNotifyPostSignal();
    void v05ConsentsHiuOnNotifyPostSignal();


    void v05ConsentRequestsInitPostSignalFull(OAIHttpRequestWorker *worker);
    void v05ConsentRequestsStatusPostSignalFull(OAIHttpRequestWorker *worker);
    void v05ConsentsFetchPostSignalFull(OAIHttpRequestWorker *worker);
    void v05ConsentsHipOnNotifyPostSignalFull(OAIHttpRequestWorker *worker);
    void v05ConsentsHiuOnNotifyPostSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use v05ConsentRequestsInitPostSignalError() instead")
    void v05ConsentRequestsInitPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v05ConsentRequestsInitPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05ConsentRequestsStatusPostSignalError() instead")
    void v05ConsentRequestsStatusPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v05ConsentRequestsStatusPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05ConsentsFetchPostSignalError() instead")
    void v05ConsentsFetchPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v05ConsentsFetchPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05ConsentsHipOnNotifyPostSignalError() instead")
    void v05ConsentsHipOnNotifyPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v05ConsentsHipOnNotifyPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05ConsentsHiuOnNotifyPostSignalError() instead")
    void v05ConsentsHiuOnNotifyPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v05ConsentsHiuOnNotifyPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use v05ConsentRequestsInitPostSignalErrorFull() instead")
    void v05ConsentRequestsInitPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v05ConsentRequestsInitPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05ConsentRequestsStatusPostSignalErrorFull() instead")
    void v05ConsentRequestsStatusPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v05ConsentRequestsStatusPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05ConsentsFetchPostSignalErrorFull() instead")
    void v05ConsentsFetchPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v05ConsentsFetchPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05ConsentsHipOnNotifyPostSignalErrorFull() instead")
    void v05ConsentsHipOnNotifyPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v05ConsentsHipOnNotifyPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05ConsentsHiuOnNotifyPostSignalErrorFull() instead")
    void v05ConsentsHiuOnNotifyPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v05ConsentsHiuOnNotifyPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
