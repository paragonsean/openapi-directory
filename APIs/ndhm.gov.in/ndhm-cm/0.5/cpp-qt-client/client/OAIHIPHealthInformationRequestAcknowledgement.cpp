/**
 * Health Data Consent Manager
 * Entity which provides health information aggregation services to customers of health care services. It enables customers to fetch their health information from one or more Health Information Providers (e.g., Hospitals, Diagnostic Labs, Medical Device Companies), based on their explicit Consent and to share such aggregated information with Health Information Users i.e. entities in need of such data (e.g., Insurers, Doctors, Medical Researchers).  # Specifications 1. This document maintains only the Health Information Gateway relevant APIs.  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHIPHealthInformationRequestAcknowledgement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHIPHealthInformationRequestAcknowledgement::OAIHIPHealthInformationRequestAcknowledgement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHIPHealthInformationRequestAcknowledgement::OAIHIPHealthInformationRequestAcknowledgement() {
    this->initializeModel();
}

OAIHIPHealthInformationRequestAcknowledgement::~OAIHIPHealthInformationRequestAcknowledgement() {}

void OAIHIPHealthInformationRequestAcknowledgement::initializeModel() {

    m_error_isSet = false;
    m_error_isValid = false;

    m_hi_request_isSet = false;
    m_hi_request_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_resp_isSet = false;
    m_resp_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;
}

void OAIHIPHealthInformationRequestAcknowledgement::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHIPHealthInformationRequestAcknowledgement::fromJsonObject(QJsonObject json) {

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_hi_request_isValid = ::OpenAPI::fromJsonValue(m_hi_request, json[QString("hiRequest")]);
    m_hi_request_isSet = !json[QString("hiRequest")].isNull() && m_hi_request_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("requestId")]);
    m_request_id_isSet = !json[QString("requestId")].isNull() && m_request_id_isValid;

    m_resp_isValid = ::OpenAPI::fromJsonValue(m_resp, json[QString("resp")]);
    m_resp_isSet = !json[QString("resp")].isNull() && m_resp_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;
}

QString OAIHIPHealthInformationRequestAcknowledgement::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHIPHealthInformationRequestAcknowledgement::asJsonObject() const {
    QJsonObject obj;
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_hi_request.isSet()) {
        obj.insert(QString("hiRequest"), ::OpenAPI::toJsonValue(m_hi_request));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("requestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_resp.isSet()) {
        obj.insert(QString("resp"), ::OpenAPI::toJsonValue(m_resp));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    return obj;
}

OAIError OAIHIPHealthInformationRequestAcknowledgement::getError() const {
    return m_error;
}
void OAIHIPHealthInformationRequestAcknowledgement::setError(const OAIError &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIHIPHealthInformationRequestAcknowledgement::is_error_Set() const{
    return m_error_isSet;
}

bool OAIHIPHealthInformationRequestAcknowledgement::is_error_Valid() const{
    return m_error_isValid;
}

OAIHIPHealthInformationRequestAcknowledgement_hiRequest OAIHIPHealthInformationRequestAcknowledgement::getHiRequest() const {
    return m_hi_request;
}
void OAIHIPHealthInformationRequestAcknowledgement::setHiRequest(const OAIHIPHealthInformationRequestAcknowledgement_hiRequest &hi_request) {
    m_hi_request = hi_request;
    m_hi_request_isSet = true;
}

bool OAIHIPHealthInformationRequestAcknowledgement::is_hi_request_Set() const{
    return m_hi_request_isSet;
}

bool OAIHIPHealthInformationRequestAcknowledgement::is_hi_request_Valid() const{
    return m_hi_request_isValid;
}

QString OAIHIPHealthInformationRequestAcknowledgement::getRequestId() const {
    return m_request_id;
}
void OAIHIPHealthInformationRequestAcknowledgement::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIHIPHealthInformationRequestAcknowledgement::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIHIPHealthInformationRequestAcknowledgement::is_request_id_Valid() const{
    return m_request_id_isValid;
}

OAIRequestReference OAIHIPHealthInformationRequestAcknowledgement::getResp() const {
    return m_resp;
}
void OAIHIPHealthInformationRequestAcknowledgement::setResp(const OAIRequestReference &resp) {
    m_resp = resp;
    m_resp_isSet = true;
}

bool OAIHIPHealthInformationRequestAcknowledgement::is_resp_Set() const{
    return m_resp_isSet;
}

bool OAIHIPHealthInformationRequestAcknowledgement::is_resp_Valid() const{
    return m_resp_isValid;
}

QDateTime OAIHIPHealthInformationRequestAcknowledgement::getTimestamp() const {
    return m_timestamp;
}
void OAIHIPHealthInformationRequestAcknowledgement::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIHIPHealthInformationRequestAcknowledgement::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIHIPHealthInformationRequestAcknowledgement::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

bool OAIHIPHealthInformationRequestAcknowledgement::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hi_request.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resp.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHIPHealthInformationRequestAcknowledgement::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_request_id_isValid && m_resp_isValid && m_timestamp_isValid && true;
}

} // namespace OpenAPI
