/**
 * Health Data Consent Manager
 * Entity which provides health information aggregation services to customers of health care services. It enables customers to fetch their health information from one or more Health Information Providers (e.g., Hospitals, Diagnostic Labs, Medical Device Companies), based on their explicit Consent and to share such aggregated information with Health Information Users i.e. entities in need of such data (e.g., Insurers, Doctors, Medical Researchers).  # Specifications 1. This document maintains only the Health Information Gateway relevant APIs.  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHealthInformationNotification_notification_statusNotification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHealthInformationNotification_notification_statusNotification::OAIHealthInformationNotification_notification_statusNotification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHealthInformationNotification_notification_statusNotification::OAIHealthInformationNotification_notification_statusNotification() {
    this->initializeModel();
}

OAIHealthInformationNotification_notification_statusNotification::~OAIHealthInformationNotification_notification_statusNotification() {}

void OAIHealthInformationNotification_notification_statusNotification::initializeModel() {

    m_hip_id_isSet = false;
    m_hip_id_isValid = false;

    m_session_status_isSet = false;
    m_session_status_isValid = false;

    m_status_responses_isSet = false;
    m_status_responses_isValid = false;
}

void OAIHealthInformationNotification_notification_statusNotification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHealthInformationNotification_notification_statusNotification::fromJsonObject(QJsonObject json) {

    m_hip_id_isValid = ::OpenAPI::fromJsonValue(m_hip_id, json[QString("hipId")]);
    m_hip_id_isSet = !json[QString("hipId")].isNull() && m_hip_id_isValid;

    m_session_status_isValid = ::OpenAPI::fromJsonValue(m_session_status, json[QString("sessionStatus")]);
    m_session_status_isSet = !json[QString("sessionStatus")].isNull() && m_session_status_isValid;

    m_status_responses_isValid = ::OpenAPI::fromJsonValue(m_status_responses, json[QString("statusResponses")]);
    m_status_responses_isSet = !json[QString("statusResponses")].isNull() && m_status_responses_isValid;
}

QString OAIHealthInformationNotification_notification_statusNotification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHealthInformationNotification_notification_statusNotification::asJsonObject() const {
    QJsonObject obj;
    if (m_hip_id_isSet) {
        obj.insert(QString("hipId"), ::OpenAPI::toJsonValue(m_hip_id));
    }
    if (m_session_status_isSet) {
        obj.insert(QString("sessionStatus"), ::OpenAPI::toJsonValue(m_session_status));
    }
    if (m_status_responses.size() > 0) {
        obj.insert(QString("statusResponses"), ::OpenAPI::toJsonValue(m_status_responses));
    }
    return obj;
}

QString OAIHealthInformationNotification_notification_statusNotification::getHipId() const {
    return m_hip_id;
}
void OAIHealthInformationNotification_notification_statusNotification::setHipId(const QString &hip_id) {
    m_hip_id = hip_id;
    m_hip_id_isSet = true;
}

bool OAIHealthInformationNotification_notification_statusNotification::is_hip_id_Set() const{
    return m_hip_id_isSet;
}

bool OAIHealthInformationNotification_notification_statusNotification::is_hip_id_Valid() const{
    return m_hip_id_isValid;
}

QString OAIHealthInformationNotification_notification_statusNotification::getSessionStatus() const {
    return m_session_status;
}
void OAIHealthInformationNotification_notification_statusNotification::setSessionStatus(const QString &session_status) {
    m_session_status = session_status;
    m_session_status_isSet = true;
}

bool OAIHealthInformationNotification_notification_statusNotification::is_session_status_Set() const{
    return m_session_status_isSet;
}

bool OAIHealthInformationNotification_notification_statusNotification::is_session_status_Valid() const{
    return m_session_status_isValid;
}

QList<OAIHealthInformationNotification_notification_statusNotification_statusResponses_inner> OAIHealthInformationNotification_notification_statusNotification::getStatusResponses() const {
    return m_status_responses;
}
void OAIHealthInformationNotification_notification_statusNotification::setStatusResponses(const QList<OAIHealthInformationNotification_notification_statusNotification_statusResponses_inner> &status_responses) {
    m_status_responses = status_responses;
    m_status_responses_isSet = true;
}

bool OAIHealthInformationNotification_notification_statusNotification::is_status_responses_Set() const{
    return m_status_responses_isSet;
}

bool OAIHealthInformationNotification_notification_statusNotification::is_status_responses_Valid() const{
    return m_status_responses_isValid;
}

bool OAIHealthInformationNotification_notification_statusNotification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hip_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_responses.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHealthInformationNotification_notification_statusNotification::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_hip_id_isValid && m_session_status_isValid && true;
}

} // namespace OpenAPI
