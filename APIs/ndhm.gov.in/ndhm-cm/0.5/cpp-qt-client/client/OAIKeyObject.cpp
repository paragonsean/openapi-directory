/**
 * Health Data Consent Manager
 * Entity which provides health information aggregation services to customers of health care services. It enables customers to fetch their health information from one or more Health Information Providers (e.g., Hospitals, Diagnostic Labs, Medical Device Companies), based on their explicit Consent and to share such aggregated information with Health Information Users i.e. entities in need of such data (e.g., Insurers, Doctors, Medical Researchers).  # Specifications 1. This document maintains only the Health Information Gateway relevant APIs.  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKeyObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKeyObject::OAIKeyObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKeyObject::OAIKeyObject() {
    this->initializeModel();
}

OAIKeyObject::~OAIKeyObject() {}

void OAIKeyObject::initializeModel() {

    m_expiry_isSet = false;
    m_expiry_isValid = false;

    m_key_value_isSet = false;
    m_key_value_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;
}

void OAIKeyObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKeyObject::fromJsonObject(QJsonObject json) {

    m_expiry_isValid = ::OpenAPI::fromJsonValue(m_expiry, json[QString("expiry")]);
    m_expiry_isSet = !json[QString("expiry")].isNull() && m_expiry_isValid;

    m_key_value_isValid = ::OpenAPI::fromJsonValue(m_key_value, json[QString("keyValue")]);
    m_key_value_isSet = !json[QString("keyValue")].isNull() && m_key_value_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;
}

QString OAIKeyObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKeyObject::asJsonObject() const {
    QJsonObject obj;
    if (m_expiry_isSet) {
        obj.insert(QString("expiry"), ::OpenAPI::toJsonValue(m_expiry));
    }
    if (m_key_value_isSet) {
        obj.insert(QString("keyValue"), ::OpenAPI::toJsonValue(m_key_value));
    }
    if (m_parameters_isSet) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    return obj;
}

QDateTime OAIKeyObject::getExpiry() const {
    return m_expiry;
}
void OAIKeyObject::setExpiry(const QDateTime &expiry) {
    m_expiry = expiry;
    m_expiry_isSet = true;
}

bool OAIKeyObject::is_expiry_Set() const{
    return m_expiry_isSet;
}

bool OAIKeyObject::is_expiry_Valid() const{
    return m_expiry_isValid;
}

QString OAIKeyObject::getKeyValue() const {
    return m_key_value;
}
void OAIKeyObject::setKeyValue(const QString &key_value) {
    m_key_value = key_value;
    m_key_value_isSet = true;
}

bool OAIKeyObject::is_key_value_Set() const{
    return m_key_value_isSet;
}

bool OAIKeyObject::is_key_value_Valid() const{
    return m_key_value_isValid;
}

QString OAIKeyObject::getParameters() const {
    return m_parameters;
}
void OAIKeyObject::setParameters(const QString &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIKeyObject::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIKeyObject::is_parameters_Valid() const{
    return m_parameters_isValid;
}

bool OAIKeyObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expiry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKeyObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_expiry_isValid && m_key_value_isValid && m_parameters_isValid && true;
}

} // namespace OpenAPI
