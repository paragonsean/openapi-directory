/**
 * Health Data Consent Manager
 * Entity which provides health information aggregation services to customers of health care services. It enables customers to fetch their health information from one or more Health Information Providers (e.g., Hospitals, Diagnostic Labs, Medical Device Companies), based on their explicit Consent and to share such aggregated information with Health Information Users i.e. entities in need of such data (e.g., Insurers, Doctors, Medical Researchers).  # Specifications 1. This document maintains only the Health Information Gateway relevant APIs.  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHIRequest_hiRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHIRequest_hiRequest::OAIHIRequest_hiRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHIRequest_hiRequest::OAIHIRequest_hiRequest() {
    this->initializeModel();
}

OAIHIRequest_hiRequest::~OAIHIRequest_hiRequest() {}

void OAIHIRequest_hiRequest::initializeModel() {

    m_consent_isSet = false;
    m_consent_isValid = false;

    m_data_push_url_isSet = false;
    m_data_push_url_isValid = false;

    m_date_range_isSet = false;
    m_date_range_isValid = false;

    m_key_material_isSet = false;
    m_key_material_isValid = false;
}

void OAIHIRequest_hiRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHIRequest_hiRequest::fromJsonObject(QJsonObject json) {

    m_consent_isValid = ::OpenAPI::fromJsonValue(m_consent, json[QString("consent")]);
    m_consent_isSet = !json[QString("consent")].isNull() && m_consent_isValid;

    m_data_push_url_isValid = ::OpenAPI::fromJsonValue(m_data_push_url, json[QString("dataPushUrl")]);
    m_data_push_url_isSet = !json[QString("dataPushUrl")].isNull() && m_data_push_url_isValid;

    m_date_range_isValid = ::OpenAPI::fromJsonValue(m_date_range, json[QString("dateRange")]);
    m_date_range_isSet = !json[QString("dateRange")].isNull() && m_date_range_isValid;

    m_key_material_isValid = ::OpenAPI::fromJsonValue(m_key_material, json[QString("keyMaterial")]);
    m_key_material_isSet = !json[QString("keyMaterial")].isNull() && m_key_material_isValid;
}

QString OAIHIRequest_hiRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHIRequest_hiRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_consent.isSet()) {
        obj.insert(QString("consent"), ::OpenAPI::toJsonValue(m_consent));
    }
    if (m_data_push_url_isSet) {
        obj.insert(QString("dataPushUrl"), ::OpenAPI::toJsonValue(m_data_push_url));
    }
    if (m_date_range.isSet()) {
        obj.insert(QString("dateRange"), ::OpenAPI::toJsonValue(m_date_range));
    }
    if (m_key_material.isSet()) {
        obj.insert(QString("keyMaterial"), ::OpenAPI::toJsonValue(m_key_material));
    }
    return obj;
}

OAIConsent OAIHIRequest_hiRequest::getConsent() const {
    return m_consent;
}
void OAIHIRequest_hiRequest::setConsent(const OAIConsent &consent) {
    m_consent = consent;
    m_consent_isSet = true;
}

bool OAIHIRequest_hiRequest::is_consent_Set() const{
    return m_consent_isSet;
}

bool OAIHIRequest_hiRequest::is_consent_Valid() const{
    return m_consent_isValid;
}

QString OAIHIRequest_hiRequest::getDataPushUrl() const {
    return m_data_push_url;
}
void OAIHIRequest_hiRequest::setDataPushUrl(const QString &data_push_url) {
    m_data_push_url = data_push_url;
    m_data_push_url_isSet = true;
}

bool OAIHIRequest_hiRequest::is_data_push_url_Set() const{
    return m_data_push_url_isSet;
}

bool OAIHIRequest_hiRequest::is_data_push_url_Valid() const{
    return m_data_push_url_isValid;
}

OAIDateRange OAIHIRequest_hiRequest::getDateRange() const {
    return m_date_range;
}
void OAIHIRequest_hiRequest::setDateRange(const OAIDateRange &date_range) {
    m_date_range = date_range;
    m_date_range_isSet = true;
}

bool OAIHIRequest_hiRequest::is_date_range_Set() const{
    return m_date_range_isSet;
}

bool OAIHIRequest_hiRequest::is_date_range_Valid() const{
    return m_date_range_isValid;
}

OAIKeyMaterial OAIHIRequest_hiRequest::getKeyMaterial() const {
    return m_key_material;
}
void OAIHIRequest_hiRequest::setKeyMaterial(const OAIKeyMaterial &key_material) {
    m_key_material = key_material;
    m_key_material_isSet = true;
}

bool OAIHIRequest_hiRequest::is_key_material_Set() const{
    return m_key_material_isSet;
}

bool OAIHIRequest_hiRequest::is_key_material_Valid() const{
    return m_key_material_isValid;
}

bool OAIHIRequest_hiRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_consent.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_push_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_material.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHIRequest_hiRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_consent_isValid && m_data_push_url_isValid && m_date_range_isValid && m_key_material_isValid && true;
}

} // namespace OpenAPI
