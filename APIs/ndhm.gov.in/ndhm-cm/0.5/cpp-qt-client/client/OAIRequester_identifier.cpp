/**
 * Health Data Consent Manager
 * Entity which provides health information aggregation services to customers of health care services. It enables customers to fetch their health information from one or more Health Information Providers (e.g., Hospitals, Diagnostic Labs, Medical Device Companies), based on their explicit Consent and to share such aggregated information with Health Information Users i.e. entities in need of such data (e.g., Insurers, Doctors, Medical Researchers).  # Specifications 1. This document maintains only the Health Information Gateway relevant APIs.  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRequester_identifier.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRequester_identifier::OAIRequester_identifier(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRequester_identifier::OAIRequester_identifier() {
    this->initializeModel();
}

OAIRequester_identifier::~OAIRequester_identifier() {}

void OAIRequester_identifier::initializeModel() {

    m_system_isSet = false;
    m_system_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIRequester_identifier::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRequester_identifier::fromJsonObject(QJsonObject json) {

    m_system_isValid = ::OpenAPI::fromJsonValue(m_system, json[QString("system")]);
    m_system_isSet = !json[QString("system")].isNull() && m_system_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIRequester_identifier::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRequester_identifier::asJsonObject() const {
    QJsonObject obj;
    if (m_system_isSet) {
        obj.insert(QString("system"), ::OpenAPI::toJsonValue(m_system));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIRequester_identifier::getSystem() const {
    return m_system;
}
void OAIRequester_identifier::setSystem(const QString &system) {
    m_system = system;
    m_system_isSet = true;
}

bool OAIRequester_identifier::is_system_Set() const{
    return m_system_isSet;
}

bool OAIRequester_identifier::is_system_Valid() const{
    return m_system_isValid;
}

QString OAIRequester_identifier::getType() const {
    return m_type;
}
void OAIRequester_identifier::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIRequester_identifier::is_type_Set() const{
    return m_type_isSet;
}

bool OAIRequester_identifier::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIRequester_identifier::getValue() const {
    return m_value;
}
void OAIRequester_identifier::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIRequester_identifier::is_value_Set() const{
    return m_value_isSet;
}

bool OAIRequester_identifier::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIRequester_identifier::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_system_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRequester_identifier::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && m_value_isValid && true;
}

} // namespace OpenAPI
