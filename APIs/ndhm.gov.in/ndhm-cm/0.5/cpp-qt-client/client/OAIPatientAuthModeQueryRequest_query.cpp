/**
 * Health Data Consent Manager
 * Entity which provides health information aggregation services to customers of health care services. It enables customers to fetch their health information from one or more Health Information Providers (e.g., Hospitals, Diagnostic Labs, Medical Device Companies), based on their explicit Consent and to share such aggregated information with Health Information Users i.e. entities in need of such data (e.g., Insurers, Doctors, Medical Researchers).  # Specifications 1. This document maintains only the Health Information Gateway relevant APIs.  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPatientAuthModeQueryRequest_query.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPatientAuthModeQueryRequest_query::OAIPatientAuthModeQueryRequest_query(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPatientAuthModeQueryRequest_query::OAIPatientAuthModeQueryRequest_query() {
    this->initializeModel();
}

OAIPatientAuthModeQueryRequest_query::~OAIPatientAuthModeQueryRequest_query() {}

void OAIPatientAuthModeQueryRequest_query::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_purpose_isSet = false;
    m_purpose_isValid = false;

    m_requester_isSet = false;
    m_requester_isValid = false;
}

void OAIPatientAuthModeQueryRequest_query::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPatientAuthModeQueryRequest_query::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_purpose_isValid = ::OpenAPI::fromJsonValue(m_purpose, json[QString("purpose")]);
    m_purpose_isSet = !json[QString("purpose")].isNull() && m_purpose_isValid;

    m_requester_isValid = ::OpenAPI::fromJsonValue(m_requester, json[QString("requester")]);
    m_requester_isSet = !json[QString("requester")].isNull() && m_requester_isValid;
}

QString OAIPatientAuthModeQueryRequest_query::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPatientAuthModeQueryRequest_query::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_purpose.isSet()) {
        obj.insert(QString("purpose"), ::OpenAPI::toJsonValue(m_purpose));
    }
    if (m_requester.isSet()) {
        obj.insert(QString("requester"), ::OpenAPI::toJsonValue(m_requester));
    }
    return obj;
}

QString OAIPatientAuthModeQueryRequest_query::getId() const {
    return m_id;
}
void OAIPatientAuthModeQueryRequest_query::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPatientAuthModeQueryRequest_query::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPatientAuthModeQueryRequest_query::is_id_Valid() const{
    return m_id_isValid;
}

OAIPatientAuthPurpose OAIPatientAuthModeQueryRequest_query::getPurpose() const {
    return m_purpose;
}
void OAIPatientAuthModeQueryRequest_query::setPurpose(const OAIPatientAuthPurpose &purpose) {
    m_purpose = purpose;
    m_purpose_isSet = true;
}

bool OAIPatientAuthModeQueryRequest_query::is_purpose_Set() const{
    return m_purpose_isSet;
}

bool OAIPatientAuthModeQueryRequest_query::is_purpose_Valid() const{
    return m_purpose_isValid;
}

OAIPatientAuthModeQueryRequest_query_requester OAIPatientAuthModeQueryRequest_query::getRequester() const {
    return m_requester;
}
void OAIPatientAuthModeQueryRequest_query::setRequester(const OAIPatientAuthModeQueryRequest_query_requester &requester) {
    m_requester = requester;
    m_requester_isSet = true;
}

bool OAIPatientAuthModeQueryRequest_query::is_requester_Set() const{
    return m_requester_isSet;
}

bool OAIPatientAuthModeQueryRequest_query::is_requester_Valid() const{
    return m_requester_isValid;
}

bool OAIPatientAuthModeQueryRequest_query::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purpose.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_requester.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPatientAuthModeQueryRequest_query::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_purpose_isValid && m_requester_isValid && true;
}

} // namespace OpenAPI
