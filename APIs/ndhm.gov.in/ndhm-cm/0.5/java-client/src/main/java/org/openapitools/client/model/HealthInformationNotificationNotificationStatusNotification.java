/*
 * Health Data Consent Manager
 * Entity which provides health information aggregation services to customers of health care services. It enables customers to fetch their health information from one or more Health Information Providers (e.g., Hospitals, Diagnostic Labs, Medical Device Companies), based on their explicit Consent and to share such aggregated information with Health Information Users i.e. entities in need of such data (e.g., Insurers, Doctors, Medical Researchers).  # Specifications 1. This document maintains only the Health Information Gateway relevant APIs.  
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.HealthInformationNotificationNotificationStatusNotificationStatusResponsesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * HealthInformationNotificationNotificationStatusNotification
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:38.835611-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HealthInformationNotificationNotificationStatusNotification {
  public static final String SERIALIZED_NAME_HIP_ID = "hipId";
  @SerializedName(SERIALIZED_NAME_HIP_ID)
  private String hipId;

  /**
   * Gets or Sets sessionStatus
   */
  @JsonAdapter(SessionStatusEnum.Adapter.class)
  public enum SessionStatusEnum {
    TRANSFERRED("TRANSFERRED"),
    
    FAILED("FAILED");

    private String value;

    SessionStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SessionStatusEnum fromValue(String value) {
      for (SessionStatusEnum b : SessionStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SessionStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SessionStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SessionStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SessionStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SessionStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SESSION_STATUS = "sessionStatus";
  @SerializedName(SERIALIZED_NAME_SESSION_STATUS)
  private SessionStatusEnum sessionStatus;

  public static final String SERIALIZED_NAME_STATUS_RESPONSES = "statusResponses";
  @SerializedName(SERIALIZED_NAME_STATUS_RESPONSES)
  private List<HealthInformationNotificationNotificationStatusNotificationStatusResponsesInner> statusResponses = new ArrayList<>();

  public HealthInformationNotificationNotificationStatusNotification() {
  }

  public HealthInformationNotificationNotificationStatusNotification hipId(String hipId) {
    this.hipId = hipId;
    return this;
  }

  /**
   * Get hipId
   * @return hipId
   */
  @javax.annotation.Nonnull
  public String getHipId() {
    return hipId;
  }

  public void setHipId(String hipId) {
    this.hipId = hipId;
  }


  public HealthInformationNotificationNotificationStatusNotification sessionStatus(SessionStatusEnum sessionStatus) {
    this.sessionStatus = sessionStatus;
    return this;
  }

  /**
   * Get sessionStatus
   * @return sessionStatus
   */
  @javax.annotation.Nonnull
  public SessionStatusEnum getSessionStatus() {
    return sessionStatus;
  }

  public void setSessionStatus(SessionStatusEnum sessionStatus) {
    this.sessionStatus = sessionStatus;
  }


  public HealthInformationNotificationNotificationStatusNotification statusResponses(List<HealthInformationNotificationNotificationStatusNotificationStatusResponsesInner> statusResponses) {
    this.statusResponses = statusResponses;
    return this;
  }

  public HealthInformationNotificationNotificationStatusNotification addStatusResponsesItem(HealthInformationNotificationNotificationStatusNotificationStatusResponsesInner statusResponsesItem) {
    if (this.statusResponses == null) {
      this.statusResponses = new ArrayList<>();
    }
    this.statusResponses.add(statusResponsesItem);
    return this;
  }

  /**
   * Get statusResponses
   * @return statusResponses
   */
  @javax.annotation.Nullable
  public List<HealthInformationNotificationNotificationStatusNotificationStatusResponsesInner> getStatusResponses() {
    return statusResponses;
  }

  public void setStatusResponses(List<HealthInformationNotificationNotificationStatusNotificationStatusResponsesInner> statusResponses) {
    this.statusResponses = statusResponses;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HealthInformationNotificationNotificationStatusNotification healthInformationNotificationNotificationStatusNotification = (HealthInformationNotificationNotificationStatusNotification) o;
    return Objects.equals(this.hipId, healthInformationNotificationNotificationStatusNotification.hipId) &&
        Objects.equals(this.sessionStatus, healthInformationNotificationNotificationStatusNotification.sessionStatus) &&
        Objects.equals(this.statusResponses, healthInformationNotificationNotificationStatusNotification.statusResponses);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hipId, sessionStatus, statusResponses);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HealthInformationNotificationNotificationStatusNotification {\n");
    sb.append("    hipId: ").append(toIndentedString(hipId)).append("\n");
    sb.append("    sessionStatus: ").append(toIndentedString(sessionStatus)).append("\n");
    sb.append("    statusResponses: ").append(toIndentedString(statusResponses)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("hipId");
    openapiFields.add("sessionStatus");
    openapiFields.add("statusResponses");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("hipId");
    openapiRequiredFields.add("sessionStatus");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HealthInformationNotificationNotificationStatusNotification
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HealthInformationNotificationNotificationStatusNotification.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HealthInformationNotificationNotificationStatusNotification is not found in the empty JSON string", HealthInformationNotificationNotificationStatusNotification.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HealthInformationNotificationNotificationStatusNotification.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HealthInformationNotificationNotificationStatusNotification` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : HealthInformationNotificationNotificationStatusNotification.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("hipId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hipId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hipId").toString()));
      }
      if (!jsonObj.get("sessionStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sessionStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sessionStatus").toString()));
      }
      // validate the required field `sessionStatus`
      SessionStatusEnum.validateJsonElement(jsonObj.get("sessionStatus"));
      if (jsonObj.get("statusResponses") != null && !jsonObj.get("statusResponses").isJsonNull()) {
        JsonArray jsonArraystatusResponses = jsonObj.getAsJsonArray("statusResponses");
        if (jsonArraystatusResponses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("statusResponses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `statusResponses` to be an array in the JSON string but got `%s`", jsonObj.get("statusResponses").toString()));
          }

          // validate the optional field `statusResponses` (array)
          for (int i = 0; i < jsonArraystatusResponses.size(); i++) {
            HealthInformationNotificationNotificationStatusNotificationStatusResponsesInner.validateJsonElement(jsonArraystatusResponses.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HealthInformationNotificationNotificationStatusNotification.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HealthInformationNotificationNotificationStatusNotification' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HealthInformationNotificationNotificationStatusNotification> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HealthInformationNotificationNotificationStatusNotification.class));

       return (TypeAdapter<T>) new TypeAdapter<HealthInformationNotificationNotificationStatusNotification>() {
           @Override
           public void write(JsonWriter out, HealthInformationNotificationNotificationStatusNotification value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HealthInformationNotificationNotificationStatusNotification read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HealthInformationNotificationNotificationStatusNotification given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HealthInformationNotificationNotificationStatusNotification
   * @throws IOException if the JSON string is invalid with respect to HealthInformationNotificationNotificationStatusNotification
   */
  public static HealthInformationNotificationNotificationStatusNotification fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HealthInformationNotificationNotificationStatusNotification.class);
  }

  /**
   * Convert an instance of HealthInformationNotificationNotificationStatusNotification to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

