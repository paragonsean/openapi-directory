/*
 * Health Data Consent Manager
 * Entity which provides health information aggregation services to customers of health care services. It enables customers to fetch their health information from one or more Health Information Providers (e.g., Hospitals, Diagnostic Labs, Medical Device Companies), based on their explicit Consent and to share such aggregated information with Health Information Users i.e. entities in need of such data (e.g., Insurers, Doctors, Medical Researchers).  # Specifications 1. This document maintains only the Health Information Gateway relevant APIs.  
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.HIUSubscriptionNotificationAcknowledgment;
import org.openapitools.client.model.HIUSubscriptionRequestNotificationAcknowledgement;
import org.openapitools.client.model.SubscriptionRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SubscriptionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SubscriptionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SubscriptionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v05SubscriptionRequestsCmInitPost
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param subscriptionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Invalid data sent    * Required attributes not mentioned  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Expired/Invalid token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05SubscriptionRequestsCmInitPostCall(String authorization, SubscriptionRequest subscriptionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = subscriptionRequest;

        // create path and map variables
        String localVarPath = "/v0.5/subscription-requests/cm/init";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v05SubscriptionRequestsCmInitPostValidateBeforeCall(String authorization, SubscriptionRequest subscriptionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v05SubscriptionRequestsCmInitPost(Async)");
        }

        // verify the required parameter 'subscriptionRequest' is set
        if (subscriptionRequest == null) {
            throw new ApiException("Missing the required parameter 'subscriptionRequest' when calling v05SubscriptionRequestsCmInitPost(Async)");
        }

        return v05SubscriptionRequestsCmInitPostCall(authorization, subscriptionRequest, _callback);

    }

    /**
     * Request for subscription
     * creates a request for subscription. The subscription categories can be for care-contexts linkages or availability of data against existing care-contexts. Note that the requester must have HIU role
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param subscriptionRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Invalid data sent    * Required attributes not mentioned  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Expired/Invalid token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public void v05SubscriptionRequestsCmInitPost(String authorization, SubscriptionRequest subscriptionRequest) throws ApiException {
        v05SubscriptionRequestsCmInitPostWithHttpInfo(authorization, subscriptionRequest);
    }

    /**
     * Request for subscription
     * creates a request for subscription. The subscription categories can be for care-contexts linkages or availability of data against existing care-contexts. Note that the requester must have HIU role
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param subscriptionRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Invalid data sent    * Required attributes not mentioned  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Expired/Invalid token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v05SubscriptionRequestsCmInitPostWithHttpInfo(String authorization, SubscriptionRequest subscriptionRequest) throws ApiException {
        okhttp3.Call localVarCall = v05SubscriptionRequestsCmInitPostValidateBeforeCall(authorization, subscriptionRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Request for subscription (asynchronously)
     * creates a request for subscription. The subscription categories can be for care-contexts linkages or availability of data against existing care-contexts. Note that the requester must have HIU role
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param subscriptionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Invalid data sent    * Required attributes not mentioned  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Expired/Invalid token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05SubscriptionRequestsCmInitPostAsync(String authorization, SubscriptionRequest subscriptionRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v05SubscriptionRequestsCmInitPostValidateBeforeCall(authorization, subscriptionRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v05SubscriptionRequestsHiuOnNotifyPost
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param hiUSubscriptionRequestNotificationAcknowledgement  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Invalid/Expired/Empty token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream services are down  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05SubscriptionRequestsHiuOnNotifyPostCall(String authorization, HIUSubscriptionRequestNotificationAcknowledgement hiUSubscriptionRequestNotificationAcknowledgement, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = hiUSubscriptionRequestNotificationAcknowledgement;

        // create path and map variables
        String localVarPath = "/v0.5/subscription-requests/hiu/on-notify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v05SubscriptionRequestsHiuOnNotifyPostValidateBeforeCall(String authorization, HIUSubscriptionRequestNotificationAcknowledgement hiUSubscriptionRequestNotificationAcknowledgement, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v05SubscriptionRequestsHiuOnNotifyPost(Async)");
        }

        // verify the required parameter 'hiUSubscriptionRequestNotificationAcknowledgement' is set
        if (hiUSubscriptionRequestNotificationAcknowledgement == null) {
            throw new ApiException("Missing the required parameter 'hiUSubscriptionRequestNotificationAcknowledgement' when calling v05SubscriptionRequestsHiuOnNotifyPost(Async)");
        }

        return v05SubscriptionRequestsHiuOnNotifyPostCall(authorization, hiUSubscriptionRequestNotificationAcknowledgement, _callback);

    }

    /**
     * Callback API for /subscription-requests/hiu/notify to acknowledge receipt of notification.
     * This API is called by HIU as acknowledgement to subscription request relevant notifications.  
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param hiUSubscriptionRequestNotificationAcknowledgement  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Invalid/Expired/Empty token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream services are down  </td><td>  -  </td></tr>
     </table>
     */
    public void v05SubscriptionRequestsHiuOnNotifyPost(String authorization, HIUSubscriptionRequestNotificationAcknowledgement hiUSubscriptionRequestNotificationAcknowledgement) throws ApiException {
        v05SubscriptionRequestsHiuOnNotifyPostWithHttpInfo(authorization, hiUSubscriptionRequestNotificationAcknowledgement);
    }

    /**
     * Callback API for /subscription-requests/hiu/notify to acknowledge receipt of notification.
     * This API is called by HIU as acknowledgement to subscription request relevant notifications.  
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param hiUSubscriptionRequestNotificationAcknowledgement  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Invalid/Expired/Empty token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream services are down  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v05SubscriptionRequestsHiuOnNotifyPostWithHttpInfo(String authorization, HIUSubscriptionRequestNotificationAcknowledgement hiUSubscriptionRequestNotificationAcknowledgement) throws ApiException {
        okhttp3.Call localVarCall = v05SubscriptionRequestsHiuOnNotifyPostValidateBeforeCall(authorization, hiUSubscriptionRequestNotificationAcknowledgement, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Callback API for /subscription-requests/hiu/notify to acknowledge receipt of notification. (asynchronously)
     * This API is called by HIU as acknowledgement to subscription request relevant notifications.  
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param hiUSubscriptionRequestNotificationAcknowledgement  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Invalid/Expired/Empty token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream services are down  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05SubscriptionRequestsHiuOnNotifyPostAsync(String authorization, HIUSubscriptionRequestNotificationAcknowledgement hiUSubscriptionRequestNotificationAcknowledgement, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v05SubscriptionRequestsHiuOnNotifyPostValidateBeforeCall(authorization, hiUSubscriptionRequestNotificationAcknowledgement, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v05SubscriptionsHiuOnNotifyPost
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param hiUSubscriptionNotificationAcknowledgment  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Invalid/Expired/Empty token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream services are down  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05SubscriptionsHiuOnNotifyPostCall(String authorization, HIUSubscriptionNotificationAcknowledgment hiUSubscriptionNotificationAcknowledgment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = hiUSubscriptionNotificationAcknowledgment;

        // create path and map variables
        String localVarPath = "/v0.5/subscriptions/hiu/on-notify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v05SubscriptionsHiuOnNotifyPostValidateBeforeCall(String authorization, HIUSubscriptionNotificationAcknowledgment hiUSubscriptionNotificationAcknowledgment, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v05SubscriptionsHiuOnNotifyPost(Async)");
        }

        // verify the required parameter 'hiUSubscriptionNotificationAcknowledgment' is set
        if (hiUSubscriptionNotificationAcknowledgment == null) {
            throw new ApiException("Missing the required parameter 'hiUSubscriptionNotificationAcknowledgment' when calling v05SubscriptionsHiuOnNotifyPost(Async)");
        }

        return v05SubscriptionsHiuOnNotifyPostCall(authorization, hiUSubscriptionNotificationAcknowledgment, _callback);

    }

    /**
     * Callback API for /subscriptions/hiu/notify to acknowledge receipt of notification.
     * This API is called by HIU as acknowledgement to consent notifications, specifically for cases when consent is REVOKED or EXPIRED. 
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param hiUSubscriptionNotificationAcknowledgment  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Invalid/Expired/Empty token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream services are down  </td><td>  -  </td></tr>
     </table>
     */
    public void v05SubscriptionsHiuOnNotifyPost(String authorization, HIUSubscriptionNotificationAcknowledgment hiUSubscriptionNotificationAcknowledgment) throws ApiException {
        v05SubscriptionsHiuOnNotifyPostWithHttpInfo(authorization, hiUSubscriptionNotificationAcknowledgment);
    }

    /**
     * Callback API for /subscriptions/hiu/notify to acknowledge receipt of notification.
     * This API is called by HIU as acknowledgement to consent notifications, specifically for cases when consent is REVOKED or EXPIRED. 
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param hiUSubscriptionNotificationAcknowledgment  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Invalid/Expired/Empty token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream services are down  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v05SubscriptionsHiuOnNotifyPostWithHttpInfo(String authorization, HIUSubscriptionNotificationAcknowledgment hiUSubscriptionNotificationAcknowledgment) throws ApiException {
        okhttp3.Call localVarCall = v05SubscriptionsHiuOnNotifyPostValidateBeforeCall(authorization, hiUSubscriptionNotificationAcknowledgment, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Callback API for /subscriptions/hiu/notify to acknowledge receipt of notification. (asynchronously)
     * This API is called by HIU as acknowledgement to consent notifications, specifically for cases when consent is REVOKED or EXPIRED. 
     * @param authorization Access token which was issued after successful login with gateway auth server. (required)
     * @param hiUSubscriptionNotificationAcknowledgment  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Invalid/Expired/Empty token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream services are down  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05SubscriptionsHiuOnNotifyPostAsync(String authorization, HIUSubscriptionNotificationAcknowledgment hiUSubscriptionNotificationAcknowledgment, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v05SubscriptionsHiuOnNotifyPostValidateBeforeCall(authorization, hiUSubscriptionNotificationAcknowledgment, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
