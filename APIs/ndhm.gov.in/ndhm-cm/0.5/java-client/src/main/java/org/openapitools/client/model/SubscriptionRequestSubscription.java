/*
 * Health Data Consent Manager
 * Entity which provides health information aggregation services to customers of health care services. It enables customers to fetch their health information from one or more Health Information Providers (e.g., Hospitals, Diagnostic Labs, Medical Device Companies), based on their explicit Consent and to share such aggregated information with Health Information Users i.e. entities in need of such data (e.g., Insurers, Doctors, Medical Researchers).  # Specifications 1. This document maintains only the Health Information Gateway relevant APIs.  
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ConsentManagerPatientID;
import org.openapitools.client.model.OrganizationRepresentation;
import org.openapitools.client.model.SubscriptionCategory;
import org.openapitools.client.model.SubscriptionPeriod;
import org.openapitools.client.model.UsePurpose;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SubscriptionRequestSubscription
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:38.835611-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SubscriptionRequestSubscription {
  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private List<SubscriptionCategory> categories = new ArrayList<>();

  public static final String SERIALIZED_NAME_HIPS = "hips";
  @SerializedName(SERIALIZED_NAME_HIPS)
  private List<OrganizationRepresentation> hips = new ArrayList<>();

  public static final String SERIALIZED_NAME_HIU = "hiu";
  @SerializedName(SERIALIZED_NAME_HIU)
  private OrganizationRepresentation hiu;

  public static final String SERIALIZED_NAME_PATIENT = "patient";
  @SerializedName(SERIALIZED_NAME_PATIENT)
  private ConsentManagerPatientID patient;

  public static final String SERIALIZED_NAME_PERIOD = "period";
  @SerializedName(SERIALIZED_NAME_PERIOD)
  private SubscriptionPeriod period;

  public static final String SERIALIZED_NAME_PURPOSE = "purpose";
  @SerializedName(SERIALIZED_NAME_PURPOSE)
  private UsePurpose purpose;

  public SubscriptionRequestSubscription() {
  }

  public SubscriptionRequestSubscription categories(List<SubscriptionCategory> categories) {
    this.categories = categories;
    return this;
  }

  public SubscriptionRequestSubscription addCategoriesItem(SubscriptionCategory categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

  /**
   * Get categories
   * @return categories
   */
  @javax.annotation.Nonnull
  public List<SubscriptionCategory> getCategories() {
    return categories;
  }

  public void setCategories(List<SubscriptionCategory> categories) {
    this.categories = categories;
  }


  public SubscriptionRequestSubscription hips(List<OrganizationRepresentation> hips) {
    this.hips = hips;
    return this;
  }

  public SubscriptionRequestSubscription addHipsItem(OrganizationRepresentation hipsItem) {
    if (this.hips == null) {
      this.hips = new ArrayList<>();
    }
    this.hips.add(hipsItem);
    return this;
  }

  /**
   * Get hips
   * @return hips
   */
  @javax.annotation.Nullable
  public List<OrganizationRepresentation> getHips() {
    return hips;
  }

  public void setHips(List<OrganizationRepresentation> hips) {
    this.hips = hips;
  }


  public SubscriptionRequestSubscription hiu(OrganizationRepresentation hiu) {
    this.hiu = hiu;
    return this;
  }

  /**
   * Get hiu
   * @return hiu
   */
  @javax.annotation.Nonnull
  public OrganizationRepresentation getHiu() {
    return hiu;
  }

  public void setHiu(OrganizationRepresentation hiu) {
    this.hiu = hiu;
  }


  public SubscriptionRequestSubscription patient(ConsentManagerPatientID patient) {
    this.patient = patient;
    return this;
  }

  /**
   * Get patient
   * @return patient
   */
  @javax.annotation.Nonnull
  public ConsentManagerPatientID getPatient() {
    return patient;
  }

  public void setPatient(ConsentManagerPatientID patient) {
    this.patient = patient;
  }


  public SubscriptionRequestSubscription period(SubscriptionPeriod period) {
    this.period = period;
    return this;
  }

  /**
   * Get period
   * @return period
   */
  @javax.annotation.Nonnull
  public SubscriptionPeriod getPeriod() {
    return period;
  }

  public void setPeriod(SubscriptionPeriod period) {
    this.period = period;
  }


  public SubscriptionRequestSubscription purpose(UsePurpose purpose) {
    this.purpose = purpose;
    return this;
  }

  /**
   * Get purpose
   * @return purpose
   */
  @javax.annotation.Nonnull
  public UsePurpose getPurpose() {
    return purpose;
  }

  public void setPurpose(UsePurpose purpose) {
    this.purpose = purpose;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubscriptionRequestSubscription subscriptionRequestSubscription = (SubscriptionRequestSubscription) o;
    return Objects.equals(this.categories, subscriptionRequestSubscription.categories) &&
        Objects.equals(this.hips, subscriptionRequestSubscription.hips) &&
        Objects.equals(this.hiu, subscriptionRequestSubscription.hiu) &&
        Objects.equals(this.patient, subscriptionRequestSubscription.patient) &&
        Objects.equals(this.period, subscriptionRequestSubscription.period) &&
        Objects.equals(this.purpose, subscriptionRequestSubscription.purpose);
  }

  @Override
  public int hashCode() {
    return Objects.hash(categories, hips, hiu, patient, period, purpose);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubscriptionRequestSubscription {\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    hips: ").append(toIndentedString(hips)).append("\n");
    sb.append("    hiu: ").append(toIndentedString(hiu)).append("\n");
    sb.append("    patient: ").append(toIndentedString(patient)).append("\n");
    sb.append("    period: ").append(toIndentedString(period)).append("\n");
    sb.append("    purpose: ").append(toIndentedString(purpose)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("categories");
    openapiFields.add("hips");
    openapiFields.add("hiu");
    openapiFields.add("patient");
    openapiFields.add("period");
    openapiFields.add("purpose");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("categories");
    openapiRequiredFields.add("hiu");
    openapiRequiredFields.add("patient");
    openapiRequiredFields.add("period");
    openapiRequiredFields.add("purpose");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SubscriptionRequestSubscription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SubscriptionRequestSubscription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SubscriptionRequestSubscription is not found in the empty JSON string", SubscriptionRequestSubscription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SubscriptionRequestSubscription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SubscriptionRequestSubscription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SubscriptionRequestSubscription.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("categories") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("categories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `categories` to be an array in the JSON string but got `%s`", jsonObj.get("categories").toString()));
      }
      if (jsonObj.get("hips") != null && !jsonObj.get("hips").isJsonNull()) {
        JsonArray jsonArrayhips = jsonObj.getAsJsonArray("hips");
        if (jsonArrayhips != null) {
          // ensure the json data is an array
          if (!jsonObj.get("hips").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `hips` to be an array in the JSON string but got `%s`", jsonObj.get("hips").toString()));
          }

          // validate the optional field `hips` (array)
          for (int i = 0; i < jsonArrayhips.size(); i++) {
            OrganizationRepresentation.validateJsonElement(jsonArrayhips.get(i));
          };
        }
      }
      // validate the required field `hiu`
      OrganizationRepresentation.validateJsonElement(jsonObj.get("hiu"));
      // validate the required field `patient`
      ConsentManagerPatientID.validateJsonElement(jsonObj.get("patient"));
      // validate the required field `period`
      SubscriptionPeriod.validateJsonElement(jsonObj.get("period"));
      // validate the required field `purpose`
      UsePurpose.validateJsonElement(jsonObj.get("purpose"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SubscriptionRequestSubscription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SubscriptionRequestSubscription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SubscriptionRequestSubscription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SubscriptionRequestSubscription.class));

       return (TypeAdapter<T>) new TypeAdapter<SubscriptionRequestSubscription>() {
           @Override
           public void write(JsonWriter out, SubscriptionRequestSubscription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SubscriptionRequestSubscription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SubscriptionRequestSubscription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SubscriptionRequestSubscription
   * @throws IOException if the JSON string is invalid with respect to SubscriptionRequestSubscription
   */
  public static SubscriptionRequestSubscription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SubscriptionRequestSubscription.class);
  }

  /**
   * Convert an instance of SubscriptionRequestSubscription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

