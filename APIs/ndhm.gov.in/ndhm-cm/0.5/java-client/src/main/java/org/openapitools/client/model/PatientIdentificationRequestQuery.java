/*
 * Health Data Consent Manager
 * Entity which provides health information aggregation services to customers of health care services. It enables customers to fetch their health information from one or more Health Information Providers (e.g., Hospitals, Diagnostic Labs, Medical Device Companies), based on their explicit Consent and to share such aggregated information with Health Information Users i.e. entities in need of such data (e.g., Insurers, Doctors, Medical Researchers).  # Specifications 1. This document maintains only the Health Information Gateway relevant APIs.  
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.HealthInformationNotificationNotificationNotifier;
import org.openapitools.client.model.PatientIdentificationRequestQueryPatient;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PatientIdentificationRequestQuery
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:38.835611-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PatientIdentificationRequestQuery {
  public static final String SERIALIZED_NAME_PATIENT = "patient";
  @SerializedName(SERIALIZED_NAME_PATIENT)
  private PatientIdentificationRequestQueryPatient patient;

  public static final String SERIALIZED_NAME_REQUESTER = "requester";
  @SerializedName(SERIALIZED_NAME_REQUESTER)
  private HealthInformationNotificationNotificationNotifier requester;

  public PatientIdentificationRequestQuery() {
  }

  public PatientIdentificationRequestQuery patient(PatientIdentificationRequestQueryPatient patient) {
    this.patient = patient;
    return this;
  }

  /**
   * Get patient
   * @return patient
   */
  @javax.annotation.Nonnull
  public PatientIdentificationRequestQueryPatient getPatient() {
    return patient;
  }

  public void setPatient(PatientIdentificationRequestQueryPatient patient) {
    this.patient = patient;
  }


  public PatientIdentificationRequestQuery requester(HealthInformationNotificationNotificationNotifier requester) {
    this.requester = requester;
    return this;
  }

  /**
   * Get requester
   * @return requester
   */
  @javax.annotation.Nonnull
  public HealthInformationNotificationNotificationNotifier getRequester() {
    return requester;
  }

  public void setRequester(HealthInformationNotificationNotificationNotifier requester) {
    this.requester = requester;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PatientIdentificationRequestQuery patientIdentificationRequestQuery = (PatientIdentificationRequestQuery) o;
    return Objects.equals(this.patient, patientIdentificationRequestQuery.patient) &&
        Objects.equals(this.requester, patientIdentificationRequestQuery.requester);
  }

  @Override
  public int hashCode() {
    return Objects.hash(patient, requester);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PatientIdentificationRequestQuery {\n");
    sb.append("    patient: ").append(toIndentedString(patient)).append("\n");
    sb.append("    requester: ").append(toIndentedString(requester)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("patient");
    openapiFields.add("requester");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("patient");
    openapiRequiredFields.add("requester");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PatientIdentificationRequestQuery
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PatientIdentificationRequestQuery.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PatientIdentificationRequestQuery is not found in the empty JSON string", PatientIdentificationRequestQuery.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PatientIdentificationRequestQuery.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PatientIdentificationRequestQuery` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PatientIdentificationRequestQuery.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `patient`
      PatientIdentificationRequestQueryPatient.validateJsonElement(jsonObj.get("patient"));
      // validate the required field `requester`
      HealthInformationNotificationNotificationNotifier.validateJsonElement(jsonObj.get("requester"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PatientIdentificationRequestQuery.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PatientIdentificationRequestQuery' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PatientIdentificationRequestQuery> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PatientIdentificationRequestQuery.class));

       return (TypeAdapter<T>) new TypeAdapter<PatientIdentificationRequestQuery>() {
           @Override
           public void write(JsonWriter out, PatientIdentificationRequestQuery value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PatientIdentificationRequestQuery read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PatientIdentificationRequestQuery given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PatientIdentificationRequestQuery
   * @throws IOException if the JSON string is invalid with respect to PatientIdentificationRequestQuery
   */
  public static PatientIdentificationRequestQuery fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PatientIdentificationRequestQuery.class);
  }

  /**
   * Convert an instance of PatientIdentificationRequestQuery to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

