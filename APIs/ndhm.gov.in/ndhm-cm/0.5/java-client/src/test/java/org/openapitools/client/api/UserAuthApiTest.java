/*
 * Health Data Consent Manager
 * Entity which provides health information aggregation services to customers of health care services. It enables customers to fetch their health information from one or more Health Information Providers (e.g., Hospitals, Diagnostic Labs, Medical Device Companies), based on their explicit Consent and to share such aggregated information with Health Information Users i.e. entities in need of such data (e.g., Insurers, Doctors, Medical Researchers).  # Specifications 1. This document maintains only the Health Information Gateway relevant APIs.  
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.PatientAuthConfirmRequest;
import org.openapitools.client.model.PatientAuthInitRequest;
import org.openapitools.client.model.PatientAuthModeQueryRequest;
import org.openapitools.client.model.PatientAuthNotificationAcknowledgement;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserAuthApi
 */
@Disabled
public class UserAuthApiTest {

    private final UserAuthApi api = new UserAuthApi();

    /**
     * Confirmation request sending token, otp or other authentication details from HIP/HIU for confirmation
     *
     * This API is called by HIP/HIUs to confirm authentication of users. The transactionId returned by the previous callback API /users/auth/on-init must be sent. If Authentication is successful the callback API will send an \&quot;access token\&quot; for subsequent purpose specific API calls. Note only **credential.authCode** or **credential.demographic** should be sent   1. demographic details are only required for  demographic auth as of now.    2. demographic details are required only in MEDIATED cases and if the **auth.mode** so demands. e.g. if **auth.mode** is DEMOGRAPHICS. Usually for demographic authentication, the name, gender and DOB must be exactly as specified in User Account.   3. demographic.identifier is optional, however maybe required if authentication so mandates.    4. credential.authCode is required for other MEDIATED authentication like MOBILE_OTP, AADHAAR_OTP.  
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v05UsersAuthConfirmPostTest() throws ApiException {
        String authorization = null;
        PatientAuthConfirmRequest patientAuthConfirmRequest = null;
        api.v05UsersAuthConfirmPost(authorization, patientAuthConfirmRequest);
        // TODO: test validations
    }

    /**
     * Get a patient&#39;s authentication modes relevant to specified purpose
     *
     * This API is meant for identify supported authentication modes for a patient given a specific purpose 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v05UsersAuthFetchModesPostTest() throws ApiException {
        String authorization = null;
        PatientAuthModeQueryRequest patientAuthModeQueryRequest = null;
        api.v05UsersAuthFetchModesPost(authorization, patientAuthModeQueryRequest);
        // TODO: test validations
    }

    /**
     * Initialize authentication from HIP
     *
     * This API is called by HIPs to initiate authentication of users. A transactionId is retuned by the corresponding callback API for confirmation of user auth. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v05UsersAuthInitPostTest() throws ApiException {
        String authorization = null;
        PatientAuthInitRequest patientAuthInitRequest = null;
        api.v05UsersAuthInitPost(authorization, patientAuthInitRequest);
        // TODO: test validations
    }

    /**
     * callback API from HIU/HIPs as acknowledgement of auth notification (in case of DIRECT auth)
     *
     * This API is called by HIU/HIPs to confirm acknowledgement for receipt of auth notification is case of DIRECT authentication.  
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v05UsersAuthOnNotifyPostTest() throws ApiException {
        String authorization = null;
        PatientAuthNotificationAcknowledgement patientAuthNotificationAcknowledgement = null;
        api.v05UsersAuthOnNotifyPost(authorization, patientAuthNotificationAcknowledgement);
        // TODO: test validations
    }

}
