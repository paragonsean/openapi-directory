/**
 * Health Repository Provider Specifications for HIU
 * The following are the specifications for the APIs to be implemented at the Health Repository end if an entity is only serving the role of a HIU. The specs are essentially duplicates from the Gateway and Bridge, but put together so as to make it clear to *HIUs* which set of APIs they should implement to participate in the network.     1. The APIs are organized by the flows - **identification**, **consent flow**, **data flow** and **monitoring**. They represent the APIs that are expected to be available at the HIU end by the Gateway.    2. For majority of the APIs, if Gateway has initiated a call, there are corresponding callback APIs on the Gateway. e.g for **_/consents/hiu/notify** API on HIU end, its expected that a corresponding callback API **_/consents/hiu/on-notify** on Gateway is called. Such APIs are organized under the **Gateway** label.    3. Gateway relevant APIs for HIUs are grouped under **Gateway** label. These include the APIs that HIPs are required to call on the Gateway. For example, to request a CM for consent, HIU would call **_/consent-requests/init** API on gateway.    4. **NOTE**, in some of the API documentations below, **X-HIP-ID** is mentioned in header (for example in /auth/on-init). These are the cases, when a particular API is applicable for both HIU and HIP (e.g an entity is playing the role of HRP representing both HIU and HIP). If you are only playing the role of HIP, then only X-HIU-ID header will be sent  
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HealthRepositoryProviderSpecificationsForHiu);
  }
}(this, function(expect, HealthRepositoryProviderSpecificationsForHiu) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new HealthRepositoryProviderSpecificationsForHiu.GatewayApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GatewayApi', function() {
    describe('v05CertsGet', function() {
      it('should call v05CertsGet successfully', function(done) {
        //uncomment below and update the code to test v05CertsGet
        //instance.v05CertsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('v05ConsentRequestsInitPost', function() {
      it('should call v05ConsentRequestsInitPost successfully', function(done) {
        //uncomment below and update the code to test v05ConsentRequestsInitPost
        //instance.v05ConsentRequestsInitPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('v05ConsentRequestsStatusPost', function() {
      it('should call v05ConsentRequestsStatusPost successfully', function(done) {
        //uncomment below and update the code to test v05ConsentRequestsStatusPost
        //instance.v05ConsentRequestsStatusPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('v05ConsentsFetchPost', function() {
      it('should call v05ConsentsFetchPost successfully', function(done) {
        //uncomment below and update the code to test v05ConsentsFetchPost
        //instance.v05ConsentsFetchPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('v05ConsentsHiuOnNotifyPost', function() {
      it('should call v05ConsentsHiuOnNotifyPost successfully', function(done) {
        //uncomment below and update the code to test v05ConsentsHiuOnNotifyPost
        //instance.v05ConsentsHiuOnNotifyPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('v05HealthInformationCmRequestPost', function() {
      it('should call v05HealthInformationCmRequestPost successfully', function(done) {
        //uncomment below and update the code to test v05HealthInformationCmRequestPost
        //instance.v05HealthInformationCmRequestPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('v05HealthInformationNotifyPost', function() {
      it('should call v05HealthInformationNotifyPost successfully', function(done) {
        //uncomment below and update the code to test v05HealthInformationNotifyPost
        //instance.v05HealthInformationNotifyPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('v05PatientsFindPost', function() {
      it('should call v05PatientsFindPost successfully', function(done) {
        //uncomment below and update the code to test v05PatientsFindPost
        //instance.v05PatientsFindPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('v05SessionsPost', function() {
      it('should call v05SessionsPost successfully', function(done) {
        //uncomment below and update the code to test v05SessionsPost
        //instance.v05SessionsPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('v05SubscriptionRequestsCmInitPost', function() {
      it('should call v05SubscriptionRequestsCmInitPost successfully', function(done) {
        //uncomment below and update the code to test v05SubscriptionRequestsCmInitPost
        //instance.v05SubscriptionRequestsCmInitPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('v05SubscriptionRequestsHiuOnNotifyPost', function() {
      it('should call v05SubscriptionRequestsHiuOnNotifyPost successfully', function(done) {
        //uncomment below and update the code to test v05SubscriptionRequestsHiuOnNotifyPost
        //instance.v05SubscriptionRequestsHiuOnNotifyPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('v05SubscriptionsHiuOnNotifyPost', function() {
      it('should call v05SubscriptionsHiuOnNotifyPost successfully', function(done) {
        //uncomment below and update the code to test v05SubscriptionsHiuOnNotifyPost
        //instance.v05SubscriptionsHiuOnNotifyPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('v05UsersAuthConfirmPost', function() {
      it('should call v05UsersAuthConfirmPost successfully', function(done) {
        //uncomment below and update the code to test v05UsersAuthConfirmPost
        //instance.v05UsersAuthConfirmPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('v05UsersAuthFetchModesPost', function() {
      it('should call v05UsersAuthFetchModesPost successfully', function(done) {
        //uncomment below and update the code to test v05UsersAuthFetchModesPost
        //instance.v05UsersAuthFetchModesPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('v05UsersAuthInitPost', function() {
      it('should call v05UsersAuthInitPost successfully', function(done) {
        //uncomment below and update the code to test v05UsersAuthInitPost
        //instance.v05UsersAuthInitPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('v05UsersAuthOnNotifyPost', function() {
      it('should call v05UsersAuthOnNotifyPost successfully', function(done) {
        //uncomment below and update the code to test v05UsersAuthOnNotifyPost
        //instance.v05UsersAuthOnNotifyPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('v05WellKnownOpenidConfigurationGet', function() {
      it('should call v05WellKnownOpenidConfigurationGet successfully', function(done) {
        //uncomment below and update the code to test v05WellKnownOpenidConfigurationGet
        //instance.v05WellKnownOpenidConfigurationGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
