/**
 * Health Repository Provider Specifications for HIU
 * The following are the specifications for the APIs to be implemented at the Health Repository end if an entity is only serving the role of a HIU. The specs are essentially duplicates from the Gateway and Bridge, but put together so as to make it clear to *HIUs* which set of APIs they should implement to participate in the network.     1. The APIs are organized by the flows - **identification**, **consent flow**, **data flow** and **monitoring**. They represent the APIs that are expected to be available at the HIU end by the Gateway.    2. For majority of the APIs, if Gateway has initiated a call, there are corresponding callback APIs on the Gateway. e.g for **_/consents/hiu/notify** API on HIU end, its expected that a corresponding callback API **_/consents/hiu/on-notify** on Gateway is called. Such APIs are organized under the **Gateway** label.    3. Gateway relevant APIs for HIUs are grouped under **Gateway** label. These include the APIs that HIPs are required to call on the Gateway. For example, to request a CM for consent, HIU would call **_/consent-requests/init** API on gateway.    4. **NOTE**, in some of the API documentations below, **X-HIP-ID** is mentioned in header (for example in /auth/on-init). These are the cases, when a particular API is applicable for both HIU and HIP (e.g an entity is playing the role of HRP representing both HIU and HIP). If you are only playing the role of HIP, then only X-HIU-ID header will be sent  
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConsentArtefactResponse from '../model/ConsentArtefactResponse';
import ConsentRequestInitResponse from '../model/ConsentRequestInitResponse';
import ErrorResponse from '../model/ErrorResponse';
import HIUConsentNotificationEvent from '../model/HIUConsentNotificationEvent';
import HIUConsentRequestStatus from '../model/HIUConsentRequestStatus';

/**
* ConsentFlow service.
* @module api/ConsentFlowApi
* @version 0.5
*/
export default class ConsentFlowApi {

    /**
    * Constructs a new ConsentFlowApi. 
    * @alias module:api/ConsentFlowApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v05ConsentRequestsOnInitPost operation.
     * @callback module:api/ConsentFlowApi~v05ConsentRequestsOnInitPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Response to consent request
     * Result of consent request creation for a patient. **id** represents the consentrequest id created by CM. The result must contain either **id** or the **error** caused. <br/>   Reasons for error may be   * Invalid references (e.g patient id, hiu id), purpose, hiTypes, ranges, persmission 
     * @param {String} authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge.
     * @param {String} X_HIU_ID Identifier of the health information user to which the request was intended.
     * @param {module:model/ConsentRequestInitResponse} consentRequestInitResponse 
     * @param {module:api/ConsentFlowApi~v05ConsentRequestsOnInitPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05ConsentRequestsOnInitPost(authorization, X_HIU_ID, consentRequestInitResponse, opts, callback) {
      opts = opts || {};
      let postBody = consentRequestInitResponse;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05ConsentRequestsOnInitPost");
      }
      // verify the required parameter 'X_HIU_ID' is set
      if (X_HIU_ID === undefined || X_HIU_ID === null) {
        throw new Error("Missing the required parameter 'X_HIU_ID' when calling v05ConsentRequestsOnInitPost");
      }
      // verify the required parameter 'consentRequestInitResponse' is set
      if (consentRequestInitResponse === undefined || consentRequestInitResponse === null) {
        throw new Error("Missing the required parameter 'consentRequestInitResponse' when calling v05ConsentRequestsOnInitPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-HIU-ID': X_HIU_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      let basePaths = ['https://dev.ndhm.gov.in/hiu'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v0.5/consent-requests/on-init', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the v05ConsentRequestsOnStatusPost operation.
     * @callback module:api/ConsentFlowApi~v05ConsentRequestsOnStatusPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Result of consent request status
     * Result of consent request done previously. Status of request can be GRANTED,  DENIED, EXPIRED. If the request was GRANTED, then  
     * @param {String} authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge.
     * @param {String} X_HIU_ID Identifier of the health information user to which the request was intended.
     * @param {module:model/HIUConsentRequestStatus} hIUConsentRequestStatus 
     * @param {module:api/ConsentFlowApi~v05ConsentRequestsOnStatusPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05ConsentRequestsOnStatusPost(authorization, X_HIU_ID, hIUConsentRequestStatus, opts, callback) {
      opts = opts || {};
      let postBody = hIUConsentRequestStatus;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05ConsentRequestsOnStatusPost");
      }
      // verify the required parameter 'X_HIU_ID' is set
      if (X_HIU_ID === undefined || X_HIU_ID === null) {
        throw new Error("Missing the required parameter 'X_HIU_ID' when calling v05ConsentRequestsOnStatusPost");
      }
      // verify the required parameter 'hIUConsentRequestStatus' is set
      if (hIUConsentRequestStatus === undefined || hIUConsentRequestStatus === null) {
        throw new Error("Missing the required parameter 'hIUConsentRequestStatus' when calling v05ConsentRequestsOnStatusPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-HIU-ID': X_HIU_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      let basePaths = ['https://dev.ndhm.gov.in/hiu'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v0.5/consent-requests/on-status', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the v05ConsentsHiuNotifyPost operation.
     * @callback module:api/ConsentFlowApi~v05ConsentsHiuNotifyPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Consent notification
     * Health information user will get notified about the consent request granted or denied, consent revoked, consent expired.  1. For consent request grant, status=GRANTED, consentRequestId=<consent-request-id>, and consentArtefacts is an array of generated consent artefact Ids. 2. For consent request expiry, status=EXPIRED, consentRequestId=<consent-request-id> 3. For consent request denied, status=DENIED, consentRequestId=<consent-request-id> 4. For consent revocation, status=REVOKED, consentArtefacts is an array of revoked consent artefact ids 
     * @param {String} authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge.
     * @param {String} X_HIU_ID Identifier of the health information user to which the request was intended.
     * @param {module:model/HIUConsentNotificationEvent} hIUConsentNotificationEvent 
     * @param {module:api/ConsentFlowApi~v05ConsentsHiuNotifyPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05ConsentsHiuNotifyPost(authorization, X_HIU_ID, hIUConsentNotificationEvent, opts, callback) {
      opts = opts || {};
      let postBody = hIUConsentNotificationEvent;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05ConsentsHiuNotifyPost");
      }
      // verify the required parameter 'X_HIU_ID' is set
      if (X_HIU_ID === undefined || X_HIU_ID === null) {
        throw new Error("Missing the required parameter 'X_HIU_ID' when calling v05ConsentsHiuNotifyPost");
      }
      // verify the required parameter 'hIUConsentNotificationEvent' is set
      if (hIUConsentNotificationEvent === undefined || hIUConsentNotificationEvent === null) {
        throw new Error("Missing the required parameter 'hIUConsentNotificationEvent' when calling v05ConsentsHiuNotifyPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-HIU-ID': X_HIU_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      let basePaths = ['https://dev.ndhm.gov.in/hiu'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v0.5/consents/hiu/notify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the v05ConsentsOnFetchPost operation.
     * @callback module:api/ConsentFlowApi~v05ConsentsOnFetchPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Result of fetch request for a consent artefact
     * Must contain either consent or error. Possible reason of errors are  1. consentId passed through /fetch is invalid 
     * @param {String} authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge.
     * @param {String} X_HIU_ID Identifier of the health information user to which the request was intended.
     * @param {module:model/ConsentArtefactResponse} consentArtefactResponse 
     * @param {module:api/ConsentFlowApi~v05ConsentsOnFetchPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05ConsentsOnFetchPost(authorization, X_HIU_ID, consentArtefactResponse, opts, callback) {
      opts = opts || {};
      let postBody = consentArtefactResponse;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05ConsentsOnFetchPost");
      }
      // verify the required parameter 'X_HIU_ID' is set
      if (X_HIU_ID === undefined || X_HIU_ID === null) {
        throw new Error("Missing the required parameter 'X_HIU_ID' when calling v05ConsentsOnFetchPost");
      }
      // verify the required parameter 'consentArtefactResponse' is set
      if (consentArtefactResponse === undefined || consentArtefactResponse === null) {
        throw new Error("Missing the required parameter 'consentArtefactResponse' when calling v05ConsentsOnFetchPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-HIU-ID': X_HIU_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      let basePaths = ['https://dev.ndhm.gov.in/hiu'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v0.5/consents/on-fetch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
