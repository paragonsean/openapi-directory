/**
 * Health Repository Provider Specifications for HIU
 * The following are the specifications for the APIs to be implemented at the Health Repository end if an entity is only serving the role of a HIU. The specs are essentially duplicates from the Gateway and Bridge, but put together so as to make it clear to *HIUs* which set of APIs they should implement to participate in the network.     1. The APIs are organized by the flows - **identification**, **consent flow**, **data flow** and **monitoring**. They represent the APIs that are expected to be available at the HIU end by the Gateway.    2. For majority of the APIs, if Gateway has initiated a call, there are corresponding callback APIs on the Gateway. e.g for **_/consents/hiu/notify** API on HIU end, its expected that a corresponding callback API **_/consents/hiu/on-notify** on Gateway is called. Such APIs are organized under the **Gateway** label.    3. Gateway relevant APIs for HIUs are grouped under **Gateway** label. These include the APIs that HIPs are required to call on the Gateway. For example, to request a CM for consent, HIU would call **_/consent-requests/init** API on gateway.    4. **NOTE**, in some of the API documentations below, **X-HIP-ID** is mentioned in header (for example in /auth/on-init). These are the cases, when a particular API is applicable for both HIU and HIP (e.g an entity is playing the role of HRP representing both HIU and HIP). If you are only playing the role of HIP, then only X-HIU-ID header will be sent  
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import PatientAuthConfirmResponse from '../model/PatientAuthConfirmResponse';
import PatientAuthInitResponse from '../model/PatientAuthInitResponse';
import PatientAuthModeQueryResponse from '../model/PatientAuthModeQueryResponse';
import PatientAuthNotification from '../model/PatientAuthNotification';

/**
* UserAuth service.
* @module api/UserAuthApi
* @version 0.5
*/
export default class UserAuthApi {

    /**
    * Constructs a new UserAuthApi. 
    * @alias module:api/UserAuthApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v05UsersAuthNotifyPost operation.
     * @callback module:api/UserAuthApi~v05UsersAuthNotifyPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * notification API in case of DIRECT mode of authentication by the CM
     * This API is called by CM to confirm authentication of users. The transactionId returned is same as that passed in /auth/on-init. The \"auth.status\" conveys whether the request was GRANTED or DENIED.    1. **auth.accessToken** - is specific to the purpose mentioned in the /auth/init. This token needs to be used for initiating the intended action. For example for HIP initiated linking of care-contexts   2. **NOTE**, only one of **X-HIP-ID** or **X-HIU-ID** will be sent as part of header, not both.   3. The payload is conditional to the purpose of auth. If purpose specified in /auth/init is KYC or KYC_AND_LINK, then patient details are passed. **auth.accessToken** is passed only if the purpose is LINK or KYC_AND_LINK. 
     * @param {String} authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge.
     * @param {String} X_HIP_ID Identifier of the health information provider to which the request was intended.
     * @param {String} X_HIU_ID Identifier of the health information user to which the request was intended.
     * @param {module:model/PatientAuthNotification} patientAuthNotification 
     * @param {module:api/UserAuthApi~v05UsersAuthNotifyPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05UsersAuthNotifyPost(authorization, X_HIP_ID, X_HIU_ID, patientAuthNotification, callback) {
      let postBody = patientAuthNotification;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05UsersAuthNotifyPost");
      }
      // verify the required parameter 'X_HIP_ID' is set
      if (X_HIP_ID === undefined || X_HIP_ID === null) {
        throw new Error("Missing the required parameter 'X_HIP_ID' when calling v05UsersAuthNotifyPost");
      }
      // verify the required parameter 'X_HIU_ID' is set
      if (X_HIU_ID === undefined || X_HIU_ID === null) {
        throw new Error("Missing the required parameter 'X_HIU_ID' when calling v05UsersAuthNotifyPost");
      }
      // verify the required parameter 'patientAuthNotification' is set
      if (patientAuthNotification === undefined || patientAuthNotification === null) {
        throw new Error("Missing the required parameter 'patientAuthNotification' when calling v05UsersAuthNotifyPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-HIP-ID': X_HIP_ID,
        'X-HIU-ID': X_HIU_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/users/auth/notify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05UsersAuthOnConfirmPost operation.
     * @callback module:api/UserAuthApi~v05UsersAuthOnConfirmPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * callback API for /auth/confirm (in case of MEDIATED auth) to confirm user authentication or not
     * This API is called by CM to confirm authentication of users.    1. **auth.accessToken** - is specific to the purpose mentioned in the /auth/init. This token needs to be used for initiating the intended action. For example for HIP initiated linking of care-contexts   2. **NOTE**, only one of **X-HIP-ID** or **X-HIU-ID** will be sent as part of header, not both.      
     * @param {String} authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge.
     * @param {String} X_HIP_ID Identifier of the health information provider to which the request was intended.
     * @param {String} X_HIU_ID Identifier of the health information user to which the request was intended.
     * @param {module:model/PatientAuthConfirmResponse} patientAuthConfirmResponse 
     * @param {module:api/UserAuthApi~v05UsersAuthOnConfirmPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05UsersAuthOnConfirmPost(authorization, X_HIP_ID, X_HIU_ID, patientAuthConfirmResponse, callback) {
      let postBody = patientAuthConfirmResponse;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05UsersAuthOnConfirmPost");
      }
      // verify the required parameter 'X_HIP_ID' is set
      if (X_HIP_ID === undefined || X_HIP_ID === null) {
        throw new Error("Missing the required parameter 'X_HIP_ID' when calling v05UsersAuthOnConfirmPost");
      }
      // verify the required parameter 'X_HIU_ID' is set
      if (X_HIU_ID === undefined || X_HIU_ID === null) {
        throw new Error("Missing the required parameter 'X_HIU_ID' when calling v05UsersAuthOnConfirmPost");
      }
      // verify the required parameter 'patientAuthConfirmResponse' is set
      if (patientAuthConfirmResponse === undefined || patientAuthConfirmResponse === null) {
        throw new Error("Missing the required parameter 'patientAuthConfirmResponse' when calling v05UsersAuthOnConfirmPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-HIP-ID': X_HIP_ID,
        'X-HIU-ID': X_HIU_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/users/auth/on-confirm', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05UsersAuthOnFetchModesPost operation.
     * @callback module:api/UserAuthApi~v05UsersAuthOnFetchModesPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Identification result for a consent-manager user-id
     * If a patient is found then **auth** attribute contains the supported modes for the specified purpose.  Otherwise, error is raised for invalid requests or for non-existent id. Note in addition to the \"Authorization\" header, one of the following headers must be specified 1. **X-HIU-ID** if the requester is HIU (identified from /auth/fetch-modes requester.id) 2. **X-HIP-ID** if the requester is HIP (identified from /auth/fetch-modes requester.id) 
     * @param {String} authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge.
     * @param {String} X_HIP_ID Identifier of the health information provider to which the request was intended.
     * @param {String} X_HIU_ID Identifier of the health information user to which the request was intended.
     * @param {module:model/PatientAuthModeQueryResponse} patientAuthModeQueryResponse 
     * @param {module:api/UserAuthApi~v05UsersAuthOnFetchModesPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05UsersAuthOnFetchModesPost(authorization, X_HIP_ID, X_HIU_ID, patientAuthModeQueryResponse, callback) {
      let postBody = patientAuthModeQueryResponse;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05UsersAuthOnFetchModesPost");
      }
      // verify the required parameter 'X_HIP_ID' is set
      if (X_HIP_ID === undefined || X_HIP_ID === null) {
        throw new Error("Missing the required parameter 'X_HIP_ID' when calling v05UsersAuthOnFetchModesPost");
      }
      // verify the required parameter 'X_HIU_ID' is set
      if (X_HIU_ID === undefined || X_HIU_ID === null) {
        throw new Error("Missing the required parameter 'X_HIU_ID' when calling v05UsersAuthOnFetchModesPost");
      }
      // verify the required parameter 'patientAuthModeQueryResponse' is set
      if (patientAuthModeQueryResponse === undefined || patientAuthModeQueryResponse === null) {
        throw new Error("Missing the required parameter 'patientAuthModeQueryResponse' when calling v05UsersAuthOnFetchModesPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-HIP-ID': X_HIP_ID,
        'X-HIU-ID': X_HIU_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/users/auth/on-fetch-modes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05UsersAuthOnInitPost operation.
     * @callback module:api/UserAuthApi~v05UsersAuthOnInitPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Response to user authentication initialization from HIP
     * If the patient's id is valid, CM will return a transactionId as initialization of user auth. If the request is valid, then 'auth.mode' will convey how the authentication should be done. The authentication can be *mediated* or *direct*. For mediated authentication modes, HIP or HIU is epected to send over relevant code (OTP/token) or demographic info via subsequent API call to /auth/confirm. for direct authentication case, CM will notify requester through/users/auth/notify API.     1. **auth.mode** conveys whats the mode of authentication is, and what is expected from HIP/HIU in the subsequent /auth/confirm API call. Possible values        1. MOBILE_OTP - auth via OTP to registered mobile. Mediated.        2. AADHAAR_OTP - auth initiated with Aadhaar with OTP. Mediated.        3. DEMOGRAPHICS - auth initiated with demographic verification       4. DIRECT - for authentication directly with the patient. e.g. Mobile App, SMS. In this case, the HIP/HIU is not expected to call subsequent /auth/confirm call. CM will do direct authentication with the User (e.g. Mobile App, SMS etc) and will notify requester   2. **meta.expiry** conveys the expiry time of the token and the authentication session   3. **NOTE**, only one of **X-HIP-ID** or **X-HIU-ID** will be sent as part of header, not both.    4. **NOTE**, only KYC purpose is applicable for HIU                        The error section in the body, represents the potential errors that may have occurred. Possible reasons:   1. Patient id is invalid 
     * @param {String} authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge.
     * @param {String} X_HIP_ID Identifier of the health information provider to which the request was intended.
     * @param {String} X_HIU_ID Identifier of the health information user to which the request was intended.
     * @param {module:model/PatientAuthInitResponse} patientAuthInitResponse 
     * @param {module:api/UserAuthApi~v05UsersAuthOnInitPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05UsersAuthOnInitPost(authorization, X_HIP_ID, X_HIU_ID, patientAuthInitResponse, callback) {
      let postBody = patientAuthInitResponse;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05UsersAuthOnInitPost");
      }
      // verify the required parameter 'X_HIP_ID' is set
      if (X_HIP_ID === undefined || X_HIP_ID === null) {
        throw new Error("Missing the required parameter 'X_HIP_ID' when calling v05UsersAuthOnInitPost");
      }
      // verify the required parameter 'X_HIU_ID' is set
      if (X_HIU_ID === undefined || X_HIU_ID === null) {
        throw new Error("Missing the required parameter 'X_HIU_ID' when calling v05UsersAuthOnInitPost");
      }
      // verify the required parameter 'patientAuthInitResponse' is set
      if (patientAuthInitResponse === undefined || patientAuthInitResponse === null) {
        throw new Error("Missing the required parameter 'patientAuthInitResponse' when calling v05UsersAuthOnInitPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-HIP-ID': X_HIP_ID,
        'X-HIU-ID': X_HIU_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/users/auth/on-init', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
