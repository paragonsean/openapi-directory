/**
 * Health Repository Provider Specifications for HIU
 * The following are the specifications for the APIs to be implemented at the Health Repository end if an entity is only serving the role of a HIU. The specs are essentially duplicates from the Gateway and Bridge, but put together so as to make it clear to *HIUs* which set of APIs they should implement to participate in the network.     1. The APIs are organized by the flows - **identification**, **consent flow**, **data flow** and **monitoring**. They represent the APIs that are expected to be available at the HIU end by the Gateway.    2. For majority of the APIs, if Gateway has initiated a call, there are corresponding callback APIs on the Gateway. e.g for **_/consents/hiu/notify** API on HIU end, its expected that a corresponding callback API **_/consents/hiu/on-notify** on Gateway is called. Such APIs are organized under the **Gateway** label.    3. Gateway relevant APIs for HIUs are grouped under **Gateway** label. These include the APIs that HIPs are required to call on the Gateway. For example, to request a CM for consent, HIU would call **_/consent-requests/init** API on gateway.    4. **NOTE**, in some of the API documentations below, **X-HIP-ID** is mentioned in header (for example in /auth/on-init). These are the cases, when a particular API is applicable for both HIU and HIP (e.g an entity is playing the role of HRP representing both HIU and HIP). If you are only playing the role of HIP, then only X-HIU-ID header will be sent  
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Certs from '../model/Certs';
import ConsentFetchRequest from '../model/ConsentFetchRequest';
import ConsentRequest from '../model/ConsentRequest';
import ConsentRequestStatusRequest from '../model/ConsentRequestStatusRequest';
import ErrorResponse from '../model/ErrorResponse';
import HIRequest from '../model/HIRequest';
import HIUConsentNotificationResponse from '../model/HIUConsentNotificationResponse';
import HIUSubscriptionNotificationAcknowledgment from '../model/HIUSubscriptionNotificationAcknowledgment';
import HIUSubscriptionRequestNotificationAcknowledgement from '../model/HIUSubscriptionRequestNotificationAcknowledgement';
import HealthInformationNotification from '../model/HealthInformationNotification';
import OpenIdConfiguration from '../model/OpenIdConfiguration';
import PatientAuthConfirmRequest from '../model/PatientAuthConfirmRequest';
import PatientAuthInitRequest from '../model/PatientAuthInitRequest';
import PatientAuthModeQueryRequest from '../model/PatientAuthModeQueryRequest';
import PatientAuthNotificationAcknowledgement from '../model/PatientAuthNotificationAcknowledgement';
import PatientIdentificationRequest from '../model/PatientIdentificationRequest';
import SessionRequest from '../model/SessionRequest';
import SessionResponse from '../model/SessionResponse';
import SubscriptionRequest from '../model/SubscriptionRequest';

/**
* Gateway service.
* @module api/GatewayApi
* @version 0.5
*/
export default class GatewayApi {

    /**
    * Constructs a new GatewayApi. 
    * @alias module:api/GatewayApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v05CertsGet operation.
     * @callback module:api/GatewayApi~v05CertsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Certs} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get certs for JWT verification
     * @param {module:api/GatewayApi~v05CertsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Certs}
     */
    v05CertsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Certs;
      return this.apiClient.callApi(
        '/v0.5/certs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05ConsentRequestsInitPost operation.
     * @callback module:api/GatewayApi~v05ConsentRequestsInitPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create consent request
     * Creates a consent request to get data about a patient by HIU user.
     * @param {String} authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge.
     * @param {String} X_CM_ID Suffix of the consent manager to which the request was intended.
     * @param {module:model/ConsentRequest} consentRequest 
     * @param {module:api/GatewayApi~v05ConsentRequestsInitPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05ConsentRequestsInitPost(authorization, X_CM_ID, consentRequest, callback) {
      let postBody = consentRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05ConsentRequestsInitPost");
      }
      // verify the required parameter 'X_CM_ID' is set
      if (X_CM_ID === undefined || X_CM_ID === null) {
        throw new Error("Missing the required parameter 'X_CM_ID' when calling v05ConsentRequestsInitPost");
      }
      // verify the required parameter 'consentRequest' is set
      if (consentRequest === undefined || consentRequest === null) {
        throw new Error("Missing the required parameter 'consentRequest' when calling v05ConsentRequestsInitPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-CM-ID': X_CM_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/consent-requests/init', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05ConsentRequestsStatusPost operation.
     * @callback module:api/GatewayApi~v05ConsentRequestsStatusPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get consent request status
     * Get status of consent request done previously
     * @param {String} authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge.
     * @param {String} X_CM_ID Suffix of the consent manager to which the request was intended.
     * @param {module:model/ConsentRequestStatusRequest} consentRequestStatusRequest 
     * @param {module:api/GatewayApi~v05ConsentRequestsStatusPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05ConsentRequestsStatusPost(authorization, X_CM_ID, consentRequestStatusRequest, callback) {
      let postBody = consentRequestStatusRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05ConsentRequestsStatusPost");
      }
      // verify the required parameter 'X_CM_ID' is set
      if (X_CM_ID === undefined || X_CM_ID === null) {
        throw new Error("Missing the required parameter 'X_CM_ID' when calling v05ConsentRequestsStatusPost");
      }
      // verify the required parameter 'consentRequestStatusRequest' is set
      if (consentRequestStatusRequest === undefined || consentRequestStatusRequest === null) {
        throw new Error("Missing the required parameter 'consentRequestStatusRequest' when calling v05ConsentRequestsStatusPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-CM-ID': X_CM_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/consent-requests/status', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05ConsentsFetchPost operation.
     * @callback module:api/GatewayApi~v05ConsentsFetchPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get consent artefact
     * @param {String} authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge.
     * @param {String} X_CM_ID Suffix of the consent manager to which the request was intended.
     * @param {module:model/ConsentFetchRequest} consentFetchRequest 
     * @param {module:api/GatewayApi~v05ConsentsFetchPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05ConsentsFetchPost(authorization, X_CM_ID, consentFetchRequest, callback) {
      let postBody = consentFetchRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05ConsentsFetchPost");
      }
      // verify the required parameter 'X_CM_ID' is set
      if (X_CM_ID === undefined || X_CM_ID === null) {
        throw new Error("Missing the required parameter 'X_CM_ID' when calling v05ConsentsFetchPost");
      }
      // verify the required parameter 'consentFetchRequest' is set
      if (consentFetchRequest === undefined || consentFetchRequest === null) {
        throw new Error("Missing the required parameter 'consentFetchRequest' when calling v05ConsentsFetchPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-CM-ID': X_CM_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/consents/fetch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05ConsentsHiuOnNotifyPost operation.
     * @callback module:api/GatewayApi~v05ConsentsHiuOnNotifyPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Consent notification
     * This API is called by HIU as acknowledgement to consent notifications, specifically for cases when consent is REVOKED or EXPIRED. 
     * @param {String} authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge.
     * @param {String} X_CM_ID Suffix of the consent manager to which the request was intended.
     * @param {module:model/HIUConsentNotificationResponse} hIUConsentNotificationResponse 
     * @param {module:api/GatewayApi~v05ConsentsHiuOnNotifyPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05ConsentsHiuOnNotifyPost(authorization, X_CM_ID, hIUConsentNotificationResponse, callback) {
      let postBody = hIUConsentNotificationResponse;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05ConsentsHiuOnNotifyPost");
      }
      // verify the required parameter 'X_CM_ID' is set
      if (X_CM_ID === undefined || X_CM_ID === null) {
        throw new Error("Missing the required parameter 'X_CM_ID' when calling v05ConsentsHiuOnNotifyPost");
      }
      // verify the required parameter 'hIUConsentNotificationResponse' is set
      if (hIUConsentNotificationResponse === undefined || hIUConsentNotificationResponse === null) {
        throw new Error("Missing the required parameter 'hIUConsentNotificationResponse' when calling v05ConsentsHiuOnNotifyPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-CM-ID': X_CM_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/consents/hiu/on-notify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05HealthInformationCmRequestPost operation.
     * @callback module:api/GatewayApi~v05HealthInformationCmRequestPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Health information data request
     * Request for Health information against a consent id. CM would generate a transactionId against each consent and pass it as trnasaction context / correlation id to the HIP and also return the same to HIU via /on-request.  
     * @param {String} authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge.
     * @param {String} X_CM_ID Suffix of the consent manager to which the request was intended.
     * @param {module:model/HIRequest} hIRequest 
     * @param {module:api/GatewayApi~v05HealthInformationCmRequestPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05HealthInformationCmRequestPost(authorization, X_CM_ID, hIRequest, callback) {
      let postBody = hIRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05HealthInformationCmRequestPost");
      }
      // verify the required parameter 'X_CM_ID' is set
      if (X_CM_ID === undefined || X_CM_ID === null) {
        throw new Error("Missing the required parameter 'X_CM_ID' when calling v05HealthInformationCmRequestPost");
      }
      // verify the required parameter 'hIRequest' is set
      if (hIRequest === undefined || hIRequest === null) {
        throw new Error("Missing the required parameter 'hIRequest' when calling v05HealthInformationCmRequestPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-CM-ID': X_CM_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/health-information/cm/request', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05HealthInformationNotifyPost operation.
     * @callback module:api/GatewayApi~v05HealthInformationNotifyPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Notifications corresponding to events during data flow
     * API called by HIU and HIP during data-transfer. 1. HIP on transfer of data would send **sessionStatus** - one of [TRANSFERRED, FAILED] 2. HIP would also send **hiStatus** for each *careContextReference* - on of [DELIVERED, ERRORED] 3. HIU on receipt of data would send **sessionStatus** - one of [TRANSFERRED, FAILED]. For example, FAILED when if data was not sent or if invalid data was sent 4. HIU would also send **hiStatus** for each *careContextReference* - one of [OK, ERRORED] 
     * @param {String} authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge.
     * @param {String} X_CM_ID Suffix of the consent manager to which the request was intended.
     * @param {module:model/HealthInformationNotification} healthInformationNotification 
     * @param {module:api/GatewayApi~v05HealthInformationNotifyPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05HealthInformationNotifyPost(authorization, X_CM_ID, healthInformationNotification, callback) {
      let postBody = healthInformationNotification;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05HealthInformationNotifyPost");
      }
      // verify the required parameter 'X_CM_ID' is set
      if (X_CM_ID === undefined || X_CM_ID === null) {
        throw new Error("Missing the required parameter 'X_CM_ID' when calling v05HealthInformationNotifyPost");
      }
      // verify the required parameter 'healthInformationNotification' is set
      if (healthInformationNotification === undefined || healthInformationNotification === null) {
        throw new Error("Missing the required parameter 'healthInformationNotification' when calling v05HealthInformationNotifyPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-CM-ID': X_CM_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/health-information/notify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05PatientsFindPost operation.
     * @callback module:api/GatewayApi~v05PatientsFindPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Identify a patient by her consent-manager user-id
     * This API is meant for identify to patient given her consent-manager-user-id 
     * @param {String} authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge.
     * @param {String} X_CM_ID Suffix of the consent manager to which the request was intended.
     * @param {module:model/PatientIdentificationRequest} patientIdentificationRequest 
     * @param {module:api/GatewayApi~v05PatientsFindPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05PatientsFindPost(authorization, X_CM_ID, patientIdentificationRequest, callback) {
      let postBody = patientIdentificationRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05PatientsFindPost");
      }
      // verify the required parameter 'X_CM_ID' is set
      if (X_CM_ID === undefined || X_CM_ID === null) {
        throw new Error("Missing the required parameter 'X_CM_ID' when calling v05PatientsFindPost");
      }
      // verify the required parameter 'patientIdentificationRequest' is set
      if (patientIdentificationRequest === undefined || patientIdentificationRequest === null) {
        throw new Error("Missing the required parameter 'patientIdentificationRequest' when calling v05PatientsFindPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-CM-ID': X_CM_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/patients/find', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05SessionsPost operation.
     * @callback module:api/GatewayApi~v05SessionsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SessionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get access token
     * @param {module:model/SessionRequest} sessionRequest 
     * @param {module:api/GatewayApi~v05SessionsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SessionResponse}
     */
    v05SessionsPost(sessionRequest, callback) {
      let postBody = sessionRequest;
      // verify the required parameter 'sessionRequest' is set
      if (sessionRequest === undefined || sessionRequest === null) {
        throw new Error("Missing the required parameter 'sessionRequest' when calling v05SessionsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = SessionResponse;
      return this.apiClient.callApi(
        '/v0.5/sessions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05SubscriptionRequestsCmInitPost operation.
     * @callback module:api/GatewayApi~v05SubscriptionRequestsCmInitPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request for subscription
     * creates a request for subscription. The subscription categories can be for care-contexts linkages or availability of data against existing care-contexts. Note that the requester must have HIU role
     * @param {String} authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge.
     * @param {String} X_CM_ID Suffix of the consent manager to which the request was intended.
     * @param {module:model/SubscriptionRequest} subscriptionRequest 
     * @param {module:api/GatewayApi~v05SubscriptionRequestsCmInitPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05SubscriptionRequestsCmInitPost(authorization, X_CM_ID, subscriptionRequest, callback) {
      let postBody = subscriptionRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05SubscriptionRequestsCmInitPost");
      }
      // verify the required parameter 'X_CM_ID' is set
      if (X_CM_ID === undefined || X_CM_ID === null) {
        throw new Error("Missing the required parameter 'X_CM_ID' when calling v05SubscriptionRequestsCmInitPost");
      }
      // verify the required parameter 'subscriptionRequest' is set
      if (subscriptionRequest === undefined || subscriptionRequest === null) {
        throw new Error("Missing the required parameter 'subscriptionRequest' when calling v05SubscriptionRequestsCmInitPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-CM-ID': X_CM_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/subscription-requests/cm/init', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05SubscriptionRequestsHiuOnNotifyPost operation.
     * @callback module:api/GatewayApi~v05SubscriptionRequestsHiuOnNotifyPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Callback API for /subscription-requests/hiu/notify to acknowledge receipt of notification.
     * This API is called by HIU as acknowledgement to subscription request relevant notifications.  
     * @param {String} authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge.
     * @param {String} X_CM_ID Suffix of the consent manager to which the request was intended.
     * @param {module:model/HIUSubscriptionRequestNotificationAcknowledgement} hIUSubscriptionRequestNotificationAcknowledgement 
     * @param {module:api/GatewayApi~v05SubscriptionRequestsHiuOnNotifyPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05SubscriptionRequestsHiuOnNotifyPost(authorization, X_CM_ID, hIUSubscriptionRequestNotificationAcknowledgement, callback) {
      let postBody = hIUSubscriptionRequestNotificationAcknowledgement;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05SubscriptionRequestsHiuOnNotifyPost");
      }
      // verify the required parameter 'X_CM_ID' is set
      if (X_CM_ID === undefined || X_CM_ID === null) {
        throw new Error("Missing the required parameter 'X_CM_ID' when calling v05SubscriptionRequestsHiuOnNotifyPost");
      }
      // verify the required parameter 'hIUSubscriptionRequestNotificationAcknowledgement' is set
      if (hIUSubscriptionRequestNotificationAcknowledgement === undefined || hIUSubscriptionRequestNotificationAcknowledgement === null) {
        throw new Error("Missing the required parameter 'hIUSubscriptionRequestNotificationAcknowledgement' when calling v05SubscriptionRequestsHiuOnNotifyPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-CM-ID': X_CM_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/subscription-requests/hiu/on-notify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05SubscriptionsHiuOnNotifyPost operation.
     * @callback module:api/GatewayApi~v05SubscriptionsHiuOnNotifyPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Callback API for /subscriptions/hiu/notify to acknowledge receipt of notification.
     * This API is called by HIU as acknowledgement to consent notifications, specifically for cases when consent is REVOKED or EXPIRED. 
     * @param {String} authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge.
     * @param {String} X_CM_ID Suffix of the consent manager to which the request was intended.
     * @param {module:model/HIUSubscriptionNotificationAcknowledgment} hIUSubscriptionNotificationAcknowledgment 
     * @param {module:api/GatewayApi~v05SubscriptionsHiuOnNotifyPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05SubscriptionsHiuOnNotifyPost(authorization, X_CM_ID, hIUSubscriptionNotificationAcknowledgment, callback) {
      let postBody = hIUSubscriptionNotificationAcknowledgment;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05SubscriptionsHiuOnNotifyPost");
      }
      // verify the required parameter 'X_CM_ID' is set
      if (X_CM_ID === undefined || X_CM_ID === null) {
        throw new Error("Missing the required parameter 'X_CM_ID' when calling v05SubscriptionsHiuOnNotifyPost");
      }
      // verify the required parameter 'hIUSubscriptionNotificationAcknowledgment' is set
      if (hIUSubscriptionNotificationAcknowledgment === undefined || hIUSubscriptionNotificationAcknowledgment === null) {
        throw new Error("Missing the required parameter 'hIUSubscriptionNotificationAcknowledgment' when calling v05SubscriptionsHiuOnNotifyPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-CM-ID': X_CM_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/subscriptions/hiu/on-notify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05UsersAuthConfirmPost operation.
     * @callback module:api/GatewayApi~v05UsersAuthConfirmPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Confirmation request sending token, otp or other authentication details from HIP/HIU for confirmation
     * This API is called by HIP/HIUs to confirm authentication of users. The transactionId returned by the previous callback API /users/auth/on-init must be sent. If Authentication is successful the callback API will send an \"access token\" for subsequent purpose specific API calls. Note only **credential.authCode** or **credential.demographic** should be sent   1. demographic details are only required for  demographic auth as of now.    2. demographic details are required only in MEDIATED cases and if the **auth.mode** so demands. e.g. if **auth.mode** is DEMOGRAPHICS. Usually for demographic authentication, the name, gender and DOB must be exactly as specified in User Account.   3. demographic.identifier is optional, however maybe required if authentication so mandates.    4. credential.authCode is required for other MEDIATED authentication like MOBILE_OTP, AADHAAR_OTP.  
     * @param {String} authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge.
     * @param {String} X_CM_ID Suffix of the consent manager to which the request was intended.
     * @param {module:model/PatientAuthConfirmRequest} patientAuthConfirmRequest 
     * @param {module:api/GatewayApi~v05UsersAuthConfirmPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05UsersAuthConfirmPost(authorization, X_CM_ID, patientAuthConfirmRequest, callback) {
      let postBody = patientAuthConfirmRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05UsersAuthConfirmPost");
      }
      // verify the required parameter 'X_CM_ID' is set
      if (X_CM_ID === undefined || X_CM_ID === null) {
        throw new Error("Missing the required parameter 'X_CM_ID' when calling v05UsersAuthConfirmPost");
      }
      // verify the required parameter 'patientAuthConfirmRequest' is set
      if (patientAuthConfirmRequest === undefined || patientAuthConfirmRequest === null) {
        throw new Error("Missing the required parameter 'patientAuthConfirmRequest' when calling v05UsersAuthConfirmPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-CM-ID': X_CM_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/users/auth/confirm', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05UsersAuthFetchModesPost operation.
     * @callback module:api/GatewayApi~v05UsersAuthFetchModesPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a patient's authentication modes relevant to specified purpose
     * This API is meant for identify supported authentication modes for a patient given a specific purpose 
     * @param {String} authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge.
     * @param {String} X_CM_ID Suffix of the consent manager to which the request was intended.
     * @param {module:model/PatientAuthModeQueryRequest} patientAuthModeQueryRequest 
     * @param {module:api/GatewayApi~v05UsersAuthFetchModesPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05UsersAuthFetchModesPost(authorization, X_CM_ID, patientAuthModeQueryRequest, callback) {
      let postBody = patientAuthModeQueryRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05UsersAuthFetchModesPost");
      }
      // verify the required parameter 'X_CM_ID' is set
      if (X_CM_ID === undefined || X_CM_ID === null) {
        throw new Error("Missing the required parameter 'X_CM_ID' when calling v05UsersAuthFetchModesPost");
      }
      // verify the required parameter 'patientAuthModeQueryRequest' is set
      if (patientAuthModeQueryRequest === undefined || patientAuthModeQueryRequest === null) {
        throw new Error("Missing the required parameter 'patientAuthModeQueryRequest' when calling v05UsersAuthFetchModesPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-CM-ID': X_CM_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/users/auth/fetch-modes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05UsersAuthInitPost operation.
     * @callback module:api/GatewayApi~v05UsersAuthInitPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initialize authentication from HIP
     * This API is called by HIPs to initiate authentication of users. A transactionId is retuned by the corresponding callback API for confirmation of user auth.   1. **NOTE**, only **KYC** purpose is applicable for HIU. Hence HIU should only sent KYC in **query.authMode** in the request 
     * @param {String} authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge.
     * @param {String} X_CM_ID Suffix of the consent manager to which the request was intended.
     * @param {module:model/PatientAuthInitRequest} patientAuthInitRequest 
     * @param {module:api/GatewayApi~v05UsersAuthInitPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05UsersAuthInitPost(authorization, X_CM_ID, patientAuthInitRequest, callback) {
      let postBody = patientAuthInitRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05UsersAuthInitPost");
      }
      // verify the required parameter 'X_CM_ID' is set
      if (X_CM_ID === undefined || X_CM_ID === null) {
        throw new Error("Missing the required parameter 'X_CM_ID' when calling v05UsersAuthInitPost");
      }
      // verify the required parameter 'patientAuthInitRequest' is set
      if (patientAuthInitRequest === undefined || patientAuthInitRequest === null) {
        throw new Error("Missing the required parameter 'patientAuthInitRequest' when calling v05UsersAuthInitPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-CM-ID': X_CM_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/users/auth/init', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05UsersAuthOnNotifyPost operation.
     * @callback module:api/GatewayApi~v05UsersAuthOnNotifyPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * callback API by HIU/HIPs as acknowledgement of auth notification
     * This API is called by HIU/HIPs to confirm acknowledgement for receipt of auth notification is case of DIRECT authentication.  
     * @param {String} authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge.
     * @param {String} X_CM_ID Suffix of the consent manager to which the request was intended.
     * @param {module:model/PatientAuthNotificationAcknowledgement} patientAuthNotificationAcknowledgement 
     * @param {module:api/GatewayApi~v05UsersAuthOnNotifyPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05UsersAuthOnNotifyPost(authorization, X_CM_ID, patientAuthNotificationAcknowledgement, callback) {
      let postBody = patientAuthNotificationAcknowledgement;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05UsersAuthOnNotifyPost");
      }
      // verify the required parameter 'X_CM_ID' is set
      if (X_CM_ID === undefined || X_CM_ID === null) {
        throw new Error("Missing the required parameter 'X_CM_ID' when calling v05UsersAuthOnNotifyPost");
      }
      // verify the required parameter 'patientAuthNotificationAcknowledgement' is set
      if (patientAuthNotificationAcknowledgement === undefined || patientAuthNotificationAcknowledgement === null) {
        throw new Error("Missing the required parameter 'patientAuthNotificationAcknowledgement' when calling v05UsersAuthOnNotifyPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-CM-ID': X_CM_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/users/auth/on-notify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05WellKnownOpenidConfigurationGet operation.
     * @callback module:api/GatewayApi~v05WellKnownOpenidConfigurationGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OpenIdConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get openid configuration
     * @param {module:api/GatewayApi~v05WellKnownOpenidConfigurationGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OpenIdConfiguration}
     */
    v05WellKnownOpenidConfigurationGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = OpenIdConfiguration;
      return this.apiClient.callApi(
        '/v0.5/.well-known/openid-configuration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
