/**
 * Health Repository Provider Specifications for HIU
 * The following are the specifications for the APIs to be implemented at the Health Repository end if an entity is only serving the role of a HIU. The specs are essentially duplicates from the Gateway and Bridge, but put together so as to make it clear to *HIUs* which set of APIs they should implement to participate in the network.     1. The APIs are organized by the flows - **identification**, **consent flow**, **data flow** and **monitoring**. They represent the APIs that are expected to be available at the HIU end by the Gateway.    2. For majority of the APIs, if Gateway has initiated a call, there are corresponding callback APIs on the Gateway. e.g for **_/consents/hiu/notify** API on HIU end, its expected that a corresponding callback API **_/consents/hiu/on-notify** on Gateway is called. Such APIs are organized under the **Gateway** label.    3. Gateway relevant APIs for HIUs are grouped under **Gateway** label. These include the APIs that HIPs are required to call on the Gateway. For example, to request a CM for consent, HIU would call **_/consent-requests/init** API on gateway.    4. **NOTE**, in some of the API documentations below, **X-HIP-ID** is mentioned in header (for example in /auth/on-init). These are the cases, when a particular API is applicable for both HIU and HIP (e.g an entity is playing the role of HRP representing both HIU and HIP). If you are only playing the role of HIP, then only X-HIU-ID header will be sent  
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import HIUSubscriptionNotification from '../model/HIUSubscriptionNotification';
import HIUSubscriptionRequestReceipt from '../model/HIUSubscriptionRequestReceipt';
import SubscriptionApprovalNotification from '../model/SubscriptionApprovalNotification';

/**
* Subscriptions service.
* @module api/SubscriptionsApi
* @version 0.5
*/
export default class SubscriptionsApi {

    /**
    * Constructs a new SubscriptionsApi. 
    * @alias module:api/SubscriptionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v05SubscriptionRequestsHiuNotifyPost operation.
     * @callback module:api/SubscriptionsApi~v05SubscriptionRequestsHiuNotifyPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Notification for subscription grant/deny/revoke
     * This API is used by CM to notify a HIU to grant or deny a request for subscription, and also to notify that in case an existing subscription is revoked or expired. For notifying that a particular subscription request was GRANTED or DENIED, the **subscriptionRequestId** is passed.  
     * @param {String} authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge.
     * @param {String} X_HIU_ID Identifier of the health information user to which the request was intended.
     * @param {module:model/SubscriptionApprovalNotification} subscriptionApprovalNotification 
     * @param {module:api/SubscriptionsApi~v05SubscriptionRequestsHiuNotifyPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05SubscriptionRequestsHiuNotifyPost(authorization, X_HIU_ID, subscriptionApprovalNotification, callback) {
      let postBody = subscriptionApprovalNotification;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05SubscriptionRequestsHiuNotifyPost");
      }
      // verify the required parameter 'X_HIU_ID' is set
      if (X_HIU_ID === undefined || X_HIU_ID === null) {
        throw new Error("Missing the required parameter 'X_HIU_ID' when calling v05SubscriptionRequestsHiuNotifyPost");
      }
      // verify the required parameter 'subscriptionApprovalNotification' is set
      if (subscriptionApprovalNotification === undefined || subscriptionApprovalNotification === null) {
        throw new Error("Missing the required parameter 'subscriptionApprovalNotification' when calling v05SubscriptionRequestsHiuNotifyPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-HIU-ID': X_HIU_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/subscription-requests/hiu/notify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05SubscriptionRequestsHiuOnInitPost operation.
     * @callback module:api/SubscriptionsApi~v05SubscriptionRequestsHiuOnInitPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * callback API for the /subscription-requests/cm/init to notify a HIU on acceptance/acknowledgement of the request for subscription.
     * This callback API acknowledges the request for subscription from a HIU, and sends back a \"id\" that will be used when the patient/user approves or denies the subscription.  
     * @param {String} authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge.
     * @param {String} X_HIU_ID Identifier of the health information user to which the request was intended.
     * @param {module:model/HIUSubscriptionRequestReceipt} hIUSubscriptionRequestReceipt 
     * @param {module:api/SubscriptionsApi~v05SubscriptionRequestsHiuOnInitPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05SubscriptionRequestsHiuOnInitPost(authorization, X_HIU_ID, hIUSubscriptionRequestReceipt, callback) {
      let postBody = hIUSubscriptionRequestReceipt;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05SubscriptionRequestsHiuOnInitPost");
      }
      // verify the required parameter 'X_HIU_ID' is set
      if (X_HIU_ID === undefined || X_HIU_ID === null) {
        throw new Error("Missing the required parameter 'X_HIU_ID' when calling v05SubscriptionRequestsHiuOnInitPost");
      }
      // verify the required parameter 'hIUSubscriptionRequestReceipt' is set
      if (hIUSubscriptionRequestReceipt === undefined || hIUSubscriptionRequestReceipt === null) {
        throw new Error("Missing the required parameter 'hIUSubscriptionRequestReceipt' when calling v05SubscriptionRequestsHiuOnInitPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-HIU-ID': X_HIU_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/subscription-requests/hiu/on-init', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v05SubscriptionsHiuNotifyPost operation.
     * @callback module:api/SubscriptionsApi~v05SubscriptionsHiuNotifyPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Notification to HIU on basis of a granted subscription
     * This API is used by CM to notify a HIU for notification relevant to subscription. Notifications are sent to subscribed HIUs whenever a new care-context is linked or new data is available on an existing linked care-context.  1. if event.category = LINK, then only care-contexts are passed when new care-contexts are linked for patient.  2. If event.category = DATA, then hiTypes are passed. Care-context is passed only if the subscribed HIU has any valid consent for that care-context 
     * @param {String} authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge.
     * @param {String} X_HIU_ID Identifier of the health information user to which the request was intended.
     * @param {module:model/HIUSubscriptionNotification} hIUSubscriptionNotification 
     * @param {module:api/SubscriptionsApi~v05SubscriptionsHiuNotifyPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v05SubscriptionsHiuNotifyPost(authorization, X_HIU_ID, hIUSubscriptionNotification, callback) {
      let postBody = hIUSubscriptionNotification;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v05SubscriptionsHiuNotifyPost");
      }
      // verify the required parameter 'X_HIU_ID' is set
      if (X_HIU_ID === undefined || X_HIU_ID === null) {
        throw new Error("Missing the required parameter 'X_HIU_ID' when calling v05SubscriptionsHiuNotifyPost");
      }
      // verify the required parameter 'hIUSubscriptionNotification' is set
      if (hIUSubscriptionNotification === undefined || hIUSubscriptionNotification === null) {
        throw new Error("Missing the required parameter 'hIUSubscriptionNotification' when calling v05SubscriptionsHiuNotifyPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-HIU-ID': X_HIU_ID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.5/subscriptions/hiu/notify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
