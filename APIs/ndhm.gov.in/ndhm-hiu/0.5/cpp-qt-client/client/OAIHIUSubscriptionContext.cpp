/**
 * Health Repository Provider Specifications for HIU
 * The following are the specifications for the APIs to be implemented at the Health Repository end if an entity is only serving the role of a HIU. The specs are essentially duplicates from the Gateway and Bridge, but put together so as to make it clear to *HIUs* which set of APIs they should implement to participate in the network.     1. The APIs are organized by the flows - **identification**, **consent flow**, **data flow** and **monitoring**. They represent the APIs that are expected to be available at the HIU end by the Gateway.    2. For majority of the APIs, if Gateway has initiated a call, there are corresponding callback APIs on the Gateway. e.g for **_/consents/hiu/notify** API on HIU end, its expected that a corresponding callback API **_/consents/hiu/on-notify** on Gateway is called. Such APIs are organized under the **Gateway** label.    3. Gateway relevant APIs for HIUs are grouped under **Gateway** label. These include the APIs that HIPs are required to call on the Gateway. For example, to request a CM for consent, HIU would call **_/consent-requests/init** API on gateway.    4. **NOTE**, in some of the API documentations below, **X-HIP-ID** is mentioned in header (for example in /auth/on-init). These are the cases, when a particular API is applicable for both HIU and HIP (e.g an entity is playing the role of HRP representing both HIU and HIP). If you are only playing the role of HIP, then only X-HIU-ID header will be sent  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHIUSubscriptionContext.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHIUSubscriptionContext::OAIHIUSubscriptionContext(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHIUSubscriptionContext::OAIHIUSubscriptionContext() {
    this->initializeModel();
}

OAIHIUSubscriptionContext::~OAIHIUSubscriptionContext() {}

void OAIHIUSubscriptionContext::initializeModel() {

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_hip_isSet = false;
    m_hip_isValid = false;

    m_period_isSet = false;
    m_period_isValid = false;
}

void OAIHIUSubscriptionContext::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHIUSubscriptionContext::fromJsonObject(QJsonObject json) {

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("categories")]);
    m_categories_isSet = !json[QString("categories")].isNull() && m_categories_isValid;

    m_hip_isValid = ::OpenAPI::fromJsonValue(m_hip, json[QString("hip")]);
    m_hip_isSet = !json[QString("hip")].isNull() && m_hip_isValid;

    m_period_isValid = ::OpenAPI::fromJsonValue(m_period, json[QString("period")]);
    m_period_isSet = !json[QString("period")].isNull() && m_period_isValid;
}

QString OAIHIUSubscriptionContext::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHIUSubscriptionContext::asJsonObject() const {
    QJsonObject obj;
    if (m_categories.size() > 0) {
        obj.insert(QString("categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_hip.isSet()) {
        obj.insert(QString("hip"), ::OpenAPI::toJsonValue(m_hip));
    }
    if (m_period.isSet()) {
        obj.insert(QString("period"), ::OpenAPI::toJsonValue(m_period));
    }
    return obj;
}

QList<OAISubscriptionCategory> OAIHIUSubscriptionContext::getCategories() const {
    return m_categories;
}
void OAIHIUSubscriptionContext::setCategories(const QList<OAISubscriptionCategory> &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAIHIUSubscriptionContext::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAIHIUSubscriptionContext::is_categories_Valid() const{
    return m_categories_isValid;
}

OAIOrganizationRepresentation OAIHIUSubscriptionContext::getHip() const {
    return m_hip;
}
void OAIHIUSubscriptionContext::setHip(const OAIOrganizationRepresentation &hip) {
    m_hip = hip;
    m_hip_isSet = true;
}

bool OAIHIUSubscriptionContext::is_hip_Set() const{
    return m_hip_isSet;
}

bool OAIHIUSubscriptionContext::is_hip_Valid() const{
    return m_hip_isValid;
}

OAISubscriptionPeriod OAIHIUSubscriptionContext::getPeriod() const {
    return m_period;
}
void OAIHIUSubscriptionContext::setPeriod(const OAISubscriptionPeriod &period) {
    m_period = period;
    m_period_isSet = true;
}

bool OAIHIUSubscriptionContext::is_period_Set() const{
    return m_period_isSet;
}

bool OAIHIUSubscriptionContext::is_period_Valid() const{
    return m_period_isValid;
}

bool OAIHIUSubscriptionContext::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_hip.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_period.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHIUSubscriptionContext::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_categories_isValid && m_period_isValid && true;
}

} // namespace OpenAPI
