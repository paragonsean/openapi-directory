/**
 * Health Repository Provider Specifications for HIU
 * The following are the specifications for the APIs to be implemented at the Health Repository end if an entity is only serving the role of a HIU. The specs are essentially duplicates from the Gateway and Bridge, but put together so as to make it clear to *HIUs* which set of APIs they should implement to participate in the network.     1. The APIs are organized by the flows - **identification**, **consent flow**, **data flow** and **monitoring**. They represent the APIs that are expected to be available at the HIU end by the Gateway.    2. For majority of the APIs, if Gateway has initiated a call, there are corresponding callback APIs on the Gateway. e.g for **_/consents/hiu/notify** API on HIU end, its expected that a corresponding callback API **_/consents/hiu/on-notify** on Gateway is called. Such APIs are organized under the **Gateway** label.    3. Gateway relevant APIs for HIUs are grouped under **Gateway** label. These include the APIs that HIPs are required to call on the Gateway. For example, to request a CM for consent, HIU would call **_/consent-requests/init** API on gateway.    4. **NOTE**, in some of the API documentations below, **X-HIP-ID** is mentioned in header (for example in /auth/on-init). These are the cases, when a particular API is applicable for both HIU and HIP (e.g an entity is playing the role of HRP representing both HIU and HIP). If you are only playing the role of HIP, then only X-HIU-ID header will be sent  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIConsentArtefactResponse_consent.h
 *
 * 
 */

#ifndef OAIConsentArtefactResponse_consent_H
#define OAIConsentArtefactResponse_consent_H

#include <QJsonObject>

#include "OAIConsentArtefactResponse_consent_consentDetail.h"
#include "OAIConsentStatus.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIConsentArtefactResponse_consent_consentDetail;

class OAIConsentArtefactResponse_consent : public OAIObject {
public:
    OAIConsentArtefactResponse_consent();
    OAIConsentArtefactResponse_consent(QString json);
    ~OAIConsentArtefactResponse_consent() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIConsentArtefactResponse_consent_consentDetail getConsentDetail() const;
    void setConsentDetail(const OAIConsentArtefactResponse_consent_consentDetail &consent_detail);
    bool is_consent_detail_Set() const;
    bool is_consent_detail_Valid() const;

    QString getSignature() const;
    void setSignature(const QString &signature);
    bool is_signature_Set() const;
    bool is_signature_Valid() const;

    OAIConsentStatus getStatus() const;
    void setStatus(const OAIConsentStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIConsentArtefactResponse_consent_consentDetail m_consent_detail;
    bool m_consent_detail_isSet;
    bool m_consent_detail_isValid;

    QString m_signature;
    bool m_signature_isSet;
    bool m_signature_isValid;

    OAIConsentStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIConsentArtefactResponse_consent)

#endif // OAIConsentArtefactResponse_consent_H
