/**
 * Health Repository Provider Specifications for HIU
 * The following are the specifications for the APIs to be implemented at the Health Repository end if an entity is only serving the role of a HIU. The specs are essentially duplicates from the Gateway and Bridge, but put together so as to make it clear to *HIUs* which set of APIs they should implement to participate in the network.     1. The APIs are organized by the flows - **identification**, **consent flow**, **data flow** and **monitoring**. They represent the APIs that are expected to be available at the HIU end by the Gateway.    2. For majority of the APIs, if Gateway has initiated a call, there are corresponding callback APIs on the Gateway. e.g for **_/consents/hiu/notify** API on HIU end, its expected that a corresponding callback API **_/consents/hiu/on-notify** on Gateway is called. Such APIs are organized under the **Gateway** label.    3. Gateway relevant APIs for HIUs are grouped under **Gateway** label. These include the APIs that HIPs are required to call on the Gateway. For example, to request a CM for consent, HIU would call **_/consent-requests/init** API on gateway.    4. **NOTE**, in some of the API documentations below, **X-HIP-ID** is mentioned in header (for example in /auth/on-init). These are the cases, when a particular API is applicable for both HIU and HIP (e.g an entity is playing the role of HRP representing both HIU and HIP). If you are only playing the role of HIP, then only X-HIU-ID header will be sent  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIConsentFlowApi_H
#define OAI_OAIConsentFlowApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIConsentArtefactResponse.h"
#include "OAIConsentRequestInitResponse.h"
#include "OAIErrorResponse.h"
#include "OAIHIUConsentNotificationEvent.h"
#include "OAIHIUConsentRequestStatus.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIConsentFlowApi : public QObject {
    Q_OBJECT

public:
    OAIConsentFlowApi(const int timeOut = 0);
    ~OAIConsentFlowApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_hiu_id QString [required]
    * @param[in]  oai_consent_request_init_response OAIConsentRequestInitResponse [required]
    */
    virtual void v05ConsentRequestsOnInitPost(const QString &authorization, const QString &x_hiu_id, const OAIConsentRequestInitResponse &oai_consent_request_init_response);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_hiu_id QString [required]
    * @param[in]  oaihiu_consent_request_status OAIHIUConsentRequestStatus [required]
    */
    virtual void v05ConsentRequestsOnStatusPost(const QString &authorization, const QString &x_hiu_id, const OAIHIUConsentRequestStatus &oaihiu_consent_request_status);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_hiu_id QString [required]
    * @param[in]  oaihiu_consent_notification_event OAIHIUConsentNotificationEvent [required]
    */
    virtual void v05ConsentsHiuNotifyPost(const QString &authorization, const QString &x_hiu_id, const OAIHIUConsentNotificationEvent &oaihiu_consent_notification_event);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_hiu_id QString [required]
    * @param[in]  oai_consent_artefact_response OAIConsentArtefactResponse [required]
    */
    virtual void v05ConsentsOnFetchPost(const QString &authorization, const QString &x_hiu_id, const OAIConsentArtefactResponse &oai_consent_artefact_response);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void v05ConsentRequestsOnInitPostCallback(OAIHttpRequestWorker *worker);
    void v05ConsentRequestsOnStatusPostCallback(OAIHttpRequestWorker *worker);
    void v05ConsentsHiuNotifyPostCallback(OAIHttpRequestWorker *worker);
    void v05ConsentsOnFetchPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void v05ConsentRequestsOnInitPostSignal();
    void v05ConsentRequestsOnStatusPostSignal();
    void v05ConsentsHiuNotifyPostSignal();
    void v05ConsentsOnFetchPostSignal();


    void v05ConsentRequestsOnInitPostSignalFull(OAIHttpRequestWorker *worker);
    void v05ConsentRequestsOnStatusPostSignalFull(OAIHttpRequestWorker *worker);
    void v05ConsentsHiuNotifyPostSignalFull(OAIHttpRequestWorker *worker);
    void v05ConsentsOnFetchPostSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use v05ConsentRequestsOnInitPostSignalError() instead")
    void v05ConsentRequestsOnInitPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v05ConsentRequestsOnInitPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05ConsentRequestsOnStatusPostSignalError() instead")
    void v05ConsentRequestsOnStatusPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v05ConsentRequestsOnStatusPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05ConsentsHiuNotifyPostSignalError() instead")
    void v05ConsentsHiuNotifyPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v05ConsentsHiuNotifyPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05ConsentsOnFetchPostSignalError() instead")
    void v05ConsentsOnFetchPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v05ConsentsOnFetchPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use v05ConsentRequestsOnInitPostSignalErrorFull() instead")
    void v05ConsentRequestsOnInitPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v05ConsentRequestsOnInitPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05ConsentRequestsOnStatusPostSignalErrorFull() instead")
    void v05ConsentRequestsOnStatusPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v05ConsentRequestsOnStatusPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05ConsentsHiuNotifyPostSignalErrorFull() instead")
    void v05ConsentsHiuNotifyPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v05ConsentsHiuNotifyPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v05ConsentsOnFetchPostSignalErrorFull() instead")
    void v05ConsentsOnFetchPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v05ConsentsOnFetchPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
