/**
 * Health Repository Provider Specifications for HIU
 * The following are the specifications for the APIs to be implemented at the Health Repository end if an entity is only serving the role of a HIU. The specs are essentially duplicates from the Gateway and Bridge, but put together so as to make it clear to *HIUs* which set of APIs they should implement to participate in the network.     1. The APIs are organized by the flows - **identification**, **consent flow**, **data flow** and **monitoring**. They represent the APIs that are expected to be available at the HIU end by the Gateway.    2. For majority of the APIs, if Gateway has initiated a call, there are corresponding callback APIs on the Gateway. e.g for **_/consents/hiu/notify** API on HIU end, its expected that a corresponding callback API **_/consents/hiu/on-notify** on Gateway is called. Such APIs are organized under the **Gateway** label.    3. Gateway relevant APIs for HIUs are grouped under **Gateway** label. These include the APIs that HIPs are required to call on the Gateway. For example, to request a CM for consent, HIU would call **_/consent-requests/init** API on gateway.    4. **NOTE**, in some of the API documentations below, **X-HIP-ID** is mentioned in header (for example in /auth/on-init). These are the cases, when a particular API is applicable for both HIU and HIP (e.g an entity is playing the role of HRP representing both HIU and HIP). If you are only playing the role of HIP, then only X-HIU-ID header will be sent  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHIRequest_hiRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHIRequest_hiRequest::OAIHIRequest_hiRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHIRequest_hiRequest::OAIHIRequest_hiRequest() {
    this->initializeModel();
}

OAIHIRequest_hiRequest::~OAIHIRequest_hiRequest() {}

void OAIHIRequest_hiRequest::initializeModel() {

    m_consent_isSet = false;
    m_consent_isValid = false;

    m_data_push_url_isSet = false;
    m_data_push_url_isValid = false;

    m_date_range_isSet = false;
    m_date_range_isValid = false;

    m_key_material_isSet = false;
    m_key_material_isValid = false;
}

void OAIHIRequest_hiRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHIRequest_hiRequest::fromJsonObject(QJsonObject json) {

    m_consent_isValid = ::OpenAPI::fromJsonValue(m_consent, json[QString("consent")]);
    m_consent_isSet = !json[QString("consent")].isNull() && m_consent_isValid;

    m_data_push_url_isValid = ::OpenAPI::fromJsonValue(m_data_push_url, json[QString("dataPushUrl")]);
    m_data_push_url_isSet = !json[QString("dataPushUrl")].isNull() && m_data_push_url_isValid;

    m_date_range_isValid = ::OpenAPI::fromJsonValue(m_date_range, json[QString("dateRange")]);
    m_date_range_isSet = !json[QString("dateRange")].isNull() && m_date_range_isValid;

    m_key_material_isValid = ::OpenAPI::fromJsonValue(m_key_material, json[QString("keyMaterial")]);
    m_key_material_isSet = !json[QString("keyMaterial")].isNull() && m_key_material_isValid;
}

QString OAIHIRequest_hiRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHIRequest_hiRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_consent.isSet()) {
        obj.insert(QString("consent"), ::OpenAPI::toJsonValue(m_consent));
    }
    if (m_data_push_url_isSet) {
        obj.insert(QString("dataPushUrl"), ::OpenAPI::toJsonValue(m_data_push_url));
    }
    if (m_date_range.isSet()) {
        obj.insert(QString("dateRange"), ::OpenAPI::toJsonValue(m_date_range));
    }
    if (m_key_material.isSet()) {
        obj.insert(QString("keyMaterial"), ::OpenAPI::toJsonValue(m_key_material));
    }
    return obj;
}

OAIConsent OAIHIRequest_hiRequest::getConsent() const {
    return m_consent;
}
void OAIHIRequest_hiRequest::setConsent(const OAIConsent &consent) {
    m_consent = consent;
    m_consent_isSet = true;
}

bool OAIHIRequest_hiRequest::is_consent_Set() const{
    return m_consent_isSet;
}

bool OAIHIRequest_hiRequest::is_consent_Valid() const{
    return m_consent_isValid;
}

QString OAIHIRequest_hiRequest::getDataPushUrl() const {
    return m_data_push_url;
}
void OAIHIRequest_hiRequest::setDataPushUrl(const QString &data_push_url) {
    m_data_push_url = data_push_url;
    m_data_push_url_isSet = true;
}

bool OAIHIRequest_hiRequest::is_data_push_url_Set() const{
    return m_data_push_url_isSet;
}

bool OAIHIRequest_hiRequest::is_data_push_url_Valid() const{
    return m_data_push_url_isValid;
}

OAIDateRange OAIHIRequest_hiRequest::getDateRange() const {
    return m_date_range;
}
void OAIHIRequest_hiRequest::setDateRange(const OAIDateRange &date_range) {
    m_date_range = date_range;
    m_date_range_isSet = true;
}

bool OAIHIRequest_hiRequest::is_date_range_Set() const{
    return m_date_range_isSet;
}

bool OAIHIRequest_hiRequest::is_date_range_Valid() const{
    return m_date_range_isValid;
}

OAIKeyMaterial OAIHIRequest_hiRequest::getKeyMaterial() const {
    return m_key_material;
}
void OAIHIRequest_hiRequest::setKeyMaterial(const OAIKeyMaterial &key_material) {
    m_key_material = key_material;
    m_key_material_isSet = true;
}

bool OAIHIRequest_hiRequest::is_key_material_Set() const{
    return m_key_material_isSet;
}

bool OAIHIRequest_hiRequest::is_key_material_Valid() const{
    return m_key_material_isValid;
}

bool OAIHIRequest_hiRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_consent.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_push_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_material.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHIRequest_hiRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_consent_isValid && m_data_push_url_isValid && m_date_range_isValid && m_key_material_isValid && true;
}

} // namespace OpenAPI
