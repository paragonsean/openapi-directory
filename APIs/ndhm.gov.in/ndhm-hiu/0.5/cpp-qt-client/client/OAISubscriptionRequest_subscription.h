/**
 * Health Repository Provider Specifications for HIU
 * The following are the specifications for the APIs to be implemented at the Health Repository end if an entity is only serving the role of a HIU. The specs are essentially duplicates from the Gateway and Bridge, but put together so as to make it clear to *HIUs* which set of APIs they should implement to participate in the network.     1. The APIs are organized by the flows - **identification**, **consent flow**, **data flow** and **monitoring**. They represent the APIs that are expected to be available at the HIU end by the Gateway.    2. For majority of the APIs, if Gateway has initiated a call, there are corresponding callback APIs on the Gateway. e.g for **_/consents/hiu/notify** API on HIU end, its expected that a corresponding callback API **_/consents/hiu/on-notify** on Gateway is called. Such APIs are organized under the **Gateway** label.    3. Gateway relevant APIs for HIUs are grouped under **Gateway** label. These include the APIs that HIPs are required to call on the Gateway. For example, to request a CM for consent, HIU would call **_/consent-requests/init** API on gateway.    4. **NOTE**, in some of the API documentations below, **X-HIP-ID** is mentioned in header (for example in /auth/on-init). These are the cases, when a particular API is applicable for both HIU and HIP (e.g an entity is playing the role of HRP representing both HIU and HIP). If you are only playing the role of HIP, then only X-HIU-ID header will be sent  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISubscriptionRequest_subscription.h
 *
 * 
 */

#ifndef OAISubscriptionRequest_subscription_H
#define OAISubscriptionRequest_subscription_H

#include <QJsonObject>

#include "OAIConsentManagerPatientID.h"
#include "OAIOrganizationRepresentation.h"
#include "OAISubscriptionCategory.h"
#include "OAISubscriptionPeriod.h"
#include "OAIUsePurpose.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIOrganizationRepresentation;
class OAIConsentManagerPatientID;
class OAISubscriptionPeriod;
class OAIUsePurpose;

class OAISubscriptionRequest_subscription : public OAIObject {
public:
    OAISubscriptionRequest_subscription();
    OAISubscriptionRequest_subscription(QString json);
    ~OAISubscriptionRequest_subscription() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAISubscriptionCategory> getCategories() const;
    void setCategories(const QList<OAISubscriptionCategory> &categories);
    bool is_categories_Set() const;
    bool is_categories_Valid() const;

    QList<OAIOrganizationRepresentation> getHips() const;
    void setHips(const QList<OAIOrganizationRepresentation> &hips);
    bool is_hips_Set() const;
    bool is_hips_Valid() const;

    OAIOrganizationRepresentation getHiu() const;
    void setHiu(const OAIOrganizationRepresentation &hiu);
    bool is_hiu_Set() const;
    bool is_hiu_Valid() const;

    OAIConsentManagerPatientID getPatient() const;
    void setPatient(const OAIConsentManagerPatientID &patient);
    bool is_patient_Set() const;
    bool is_patient_Valid() const;

    OAISubscriptionPeriod getPeriod() const;
    void setPeriod(const OAISubscriptionPeriod &period);
    bool is_period_Set() const;
    bool is_period_Valid() const;

    OAIUsePurpose getPurpose() const;
    void setPurpose(const OAIUsePurpose &purpose);
    bool is_purpose_Set() const;
    bool is_purpose_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAISubscriptionCategory> m_categories;
    bool m_categories_isSet;
    bool m_categories_isValid;

    QList<OAIOrganizationRepresentation> m_hips;
    bool m_hips_isSet;
    bool m_hips_isValid;

    OAIOrganizationRepresentation m_hiu;
    bool m_hiu_isSet;
    bool m_hiu_isValid;

    OAIConsentManagerPatientID m_patient;
    bool m_patient_isSet;
    bool m_patient_isValid;

    OAISubscriptionPeriod m_period;
    bool m_period_isSet;
    bool m_period_isValid;

    OAIUsePurpose m_purpose;
    bool m_purpose_isSet;
    bool m_purpose_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISubscriptionRequest_subscription)

#endif // OAISubscriptionRequest_subscription_H
