/**
 * Health Repository Provider Specifications for HIU
 * The following are the specifications for the APIs to be implemented at the Health Repository end if an entity is only serving the role of a HIU. The specs are essentially duplicates from the Gateway and Bridge, but put together so as to make it clear to *HIUs* which set of APIs they should implement to participate in the network.     1. The APIs are organized by the flows - **identification**, **consent flow**, **data flow** and **monitoring**. They represent the APIs that are expected to be available at the HIU end by the Gateway.    2. For majority of the APIs, if Gateway has initiated a call, there are corresponding callback APIs on the Gateway. e.g for **_/consents/hiu/notify** API on HIU end, its expected that a corresponding callback API **_/consents/hiu/on-notify** on Gateway is called. Such APIs are organized under the **Gateway** label.    3. Gateway relevant APIs for HIUs are grouped under **Gateway** label. These include the APIs that HIPs are required to call on the Gateway. For example, to request a CM for consent, HIU would call **_/consent-requests/init** API on gateway.    4. **NOTE**, in some of the API documentations below, **X-HIP-ID** is mentioned in header (for example in /auth/on-init). These are the cases, when a particular API is applicable for both HIU and HIP (e.g an entity is playing the role of HRP representing both HIU and HIP). If you are only playing the role of HIP, then only X-HIU-ID header will be sent  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPermission.h
 *
 * 
 */

#ifndef OAIPermission_H
#define OAIPermission_H

#include <QJsonObject>

#include "OAIPermission_dateRange.h"
#include "OAIPermission_frequency.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPermission_dateRange;
class OAIPermission_frequency;

class OAIPermission : public OAIObject {
public:
    OAIPermission();
    OAIPermission(QString json);
    ~OAIPermission() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAccessMode() const;
    void setAccessMode(const QString &access_mode);
    bool is_access_mode_Set() const;
    bool is_access_mode_Valid() const;

    QDateTime getDataEraseAt() const;
    void setDataEraseAt(const QDateTime &data_erase_at);
    bool is_data_erase_at_Set() const;
    bool is_data_erase_at_Valid() const;

    OAIPermission_dateRange getDateRange() const;
    void setDateRange(const OAIPermission_dateRange &date_range);
    bool is_date_range_Set() const;
    bool is_date_range_Valid() const;

    OAIPermission_frequency getFrequency() const;
    void setFrequency(const OAIPermission_frequency &frequency);
    bool is_frequency_Set() const;
    bool is_frequency_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_access_mode;
    bool m_access_mode_isSet;
    bool m_access_mode_isValid;

    QDateTime m_data_erase_at;
    bool m_data_erase_at_isSet;
    bool m_data_erase_at_isValid;

    OAIPermission_dateRange m_date_range;
    bool m_date_range_isSet;
    bool m_date_range_isValid;

    OAIPermission_frequency m_frequency;
    bool m_frequency_isSet;
    bool m_frequency_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPermission)

#endif // OAIPermission_H
