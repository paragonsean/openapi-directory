/**
 * Health Repository Provider Specifications for HIU
 * The following are the specifications for the APIs to be implemented at the Health Repository end if an entity is only serving the role of a HIU. The specs are essentially duplicates from the Gateway and Bridge, but put together so as to make it clear to *HIUs* which set of APIs they should implement to participate in the network.     1. The APIs are organized by the flows - **identification**, **consent flow**, **data flow** and **monitoring**. They represent the APIs that are expected to be available at the HIU end by the Gateway.    2. For majority of the APIs, if Gateway has initiated a call, there are corresponding callback APIs on the Gateway. e.g for **_/consents/hiu/notify** API on HIU end, its expected that a corresponding callback API **_/consents/hiu/on-notify** on Gateway is called. Such APIs are organized under the **Gateway** label.    3. Gateway relevant APIs for HIUs are grouped under **Gateway** label. These include the APIs that HIPs are required to call on the Gateway. For example, to request a CM for consent, HIU would call **_/consent-requests/init** API on gateway.    4. **NOTE**, in some of the API documentations below, **X-HIP-ID** is mentioned in header (for example in /auth/on-init). These are the cases, when a particular API is applicable for both HIU and HIP (e.g an entity is playing the role of HRP representing both HIU and HIP). If you are only playing the role of HIP, then only X-HIU-ID header will be sent  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICertificateOrKeyGetSchema.h
 *
 * 
 */

#ifndef OAICertificateOrKeyGetSchema_H
#define OAICertificateOrKeyGetSchema_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICertificateOrKeyGetSchema : public OAIObject {
public:
    OAICertificateOrKeyGetSchema();
    OAICertificateOrKeyGetSchema(QString json);
    ~OAICertificateOrKeyGetSchema() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAlg() const;
    void setAlg(const QString &alg);
    bool is_alg_Set() const;
    bool is_alg_Valid() const;

    QString getE() const;
    void setE(const QString &e);
    bool is_e_Set() const;
    bool is_e_Valid() const;

    QString getKid() const;
    void setKid(const QString &kid);
    bool is_kid_Set() const;
    bool is_kid_Valid() const;

    QString getKty() const;
    void setKty(const QString &kty);
    bool is_kty_Set() const;
    bool is_kty_Valid() const;

    QString getN() const;
    void setN(const QString &n);
    bool is_n_Set() const;
    bool is_n_Valid() const;

    QString getUse() const;
    void setUse(const QString &use);
    bool is_use_Set() const;
    bool is_use_Valid() const;

    QList<QString> getX5c() const;
    void setX5c(const QList<QString> &x5c);
    bool is_x5c_Set() const;
    bool is_x5c_Valid() const;

    QString getX5t() const;
    void setX5t(const QString &x5t);
    bool is_x5t_Set() const;
    bool is_x5t_Valid() const;

    QString getX5tS256() const;
    void setX5tS256(const QString &x5t_s256);
    bool is_x5t_s256_Set() const;
    bool is_x5t_s256_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_alg;
    bool m_alg_isSet;
    bool m_alg_isValid;

    QString m_e;
    bool m_e_isSet;
    bool m_e_isValid;

    QString m_kid;
    bool m_kid_isSet;
    bool m_kid_isValid;

    QString m_kty;
    bool m_kty_isSet;
    bool m_kty_isValid;

    QString m_n;
    bool m_n_isSet;
    bool m_n_isValid;

    QString m_use;
    bool m_use_isSet;
    bool m_use_isValid;

    QList<QString> m_x5c;
    bool m_x5c_isSet;
    bool m_x5c_isValid;

    QString m_x5t;
    bool m_x5t_isSet;
    bool m_x5t_isValid;

    QString m_x5t_s256;
    bool m_x5t_s256_isSet;
    bool m_x5t_s256_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICertificateOrKeyGetSchema)

#endif // OAICertificateOrKeyGetSchema_H
