/**
 * Health Repository Provider Specifications for HIU
 * The following are the specifications for the APIs to be implemented at the Health Repository end if an entity is only serving the role of a HIU. The specs are essentially duplicates from the Gateway and Bridge, but put together so as to make it clear to *HIUs* which set of APIs they should implement to participate in the network.     1. The APIs are organized by the flows - **identification**, **consent flow**, **data flow** and **monitoring**. They represent the APIs that are expected to be available at the HIU end by the Gateway.    2. For majority of the APIs, if Gateway has initiated a call, there are corresponding callback APIs on the Gateway. e.g for **_/consents/hiu/notify** API on HIU end, its expected that a corresponding callback API **_/consents/hiu/on-notify** on Gateway is called. Such APIs are organized under the **Gateway** label.    3. Gateway relevant APIs for HIUs are grouped under **Gateway** label. These include the APIs that HIPs are required to call on the Gateway. For example, to request a CM for consent, HIU would call **_/consent-requests/init** API on gateway.    4. **NOTE**, in some of the API documentations below, **X-HIP-ID** is mentioned in header (for example in /auth/on-init). These are the cases, when a particular API is applicable for both HIU and HIP (e.g an entity is playing the role of HRP representing both HIU and HIP). If you are only playing the role of HIP, then only X-HIU-ID header will be sent  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIKeyMaterial.h
 *
 * 
 */

#ifndef OAIKeyMaterial_H
#define OAIKeyMaterial_H

#include <QJsonObject>

#include "OAIKeyObject.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIKeyObject;

class OAIKeyMaterial : public OAIObject {
public:
    OAIKeyMaterial();
    OAIKeyMaterial(QString json);
    ~OAIKeyMaterial() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCryptoAlg() const;
    void setCryptoAlg(const QString &crypto_alg);
    bool is_crypto_alg_Set() const;
    bool is_crypto_alg_Valid() const;

    QString getCurve() const;
    void setCurve(const QString &curve);
    bool is_curve_Set() const;
    bool is_curve_Valid() const;

    OAIKeyObject getDhPublicKey() const;
    void setDhPublicKey(const OAIKeyObject &dh_public_key);
    bool is_dh_public_key_Set() const;
    bool is_dh_public_key_Valid() const;

    QString getNonce() const;
    void setNonce(const QString &nonce);
    bool is_nonce_Set() const;
    bool is_nonce_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_crypto_alg;
    bool m_crypto_alg_isSet;
    bool m_crypto_alg_isValid;

    QString m_curve;
    bool m_curve_isSet;
    bool m_curve_isValid;

    OAIKeyObject m_dh_public_key;
    bool m_dh_public_key_isSet;
    bool m_dh_public_key_isValid;

    QString m_nonce;
    bool m_nonce_isSet;
    bool m_nonce_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIKeyMaterial)

#endif // OAIKeyMaterial_H
