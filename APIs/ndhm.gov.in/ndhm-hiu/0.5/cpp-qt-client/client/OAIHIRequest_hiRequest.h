/**
 * Health Repository Provider Specifications for HIU
 * The following are the specifications for the APIs to be implemented at the Health Repository end if an entity is only serving the role of a HIU. The specs are essentially duplicates from the Gateway and Bridge, but put together so as to make it clear to *HIUs* which set of APIs they should implement to participate in the network.     1. The APIs are organized by the flows - **identification**, **consent flow**, **data flow** and **monitoring**. They represent the APIs that are expected to be available at the HIU end by the Gateway.    2. For majority of the APIs, if Gateway has initiated a call, there are corresponding callback APIs on the Gateway. e.g for **_/consents/hiu/notify** API on HIU end, its expected that a corresponding callback API **_/consents/hiu/on-notify** on Gateway is called. Such APIs are organized under the **Gateway** label.    3. Gateway relevant APIs for HIUs are grouped under **Gateway** label. These include the APIs that HIPs are required to call on the Gateway. For example, to request a CM for consent, HIU would call **_/consent-requests/init** API on gateway.    4. **NOTE**, in some of the API documentations below, **X-HIP-ID** is mentioned in header (for example in /auth/on-init). These are the cases, when a particular API is applicable for both HIU and HIP (e.g an entity is playing the role of HRP representing both HIU and HIP). If you are only playing the role of HIP, then only X-HIU-ID header will be sent  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIHIRequest_hiRequest.h
 *
 * 
 */

#ifndef OAIHIRequest_hiRequest_H
#define OAIHIRequest_hiRequest_H

#include <QJsonObject>

#include "OAIConsent.h"
#include "OAIDateRange.h"
#include "OAIKeyMaterial.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIConsent;
class OAIDateRange;
class OAIKeyMaterial;

class OAIHIRequest_hiRequest : public OAIObject {
public:
    OAIHIRequest_hiRequest();
    OAIHIRequest_hiRequest(QString json);
    ~OAIHIRequest_hiRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIConsent getConsent() const;
    void setConsent(const OAIConsent &consent);
    bool is_consent_Set() const;
    bool is_consent_Valid() const;

    QString getDataPushUrl() const;
    void setDataPushUrl(const QString &data_push_url);
    bool is_data_push_url_Set() const;
    bool is_data_push_url_Valid() const;

    OAIDateRange getDateRange() const;
    void setDateRange(const OAIDateRange &date_range);
    bool is_date_range_Set() const;
    bool is_date_range_Valid() const;

    OAIKeyMaterial getKeyMaterial() const;
    void setKeyMaterial(const OAIKeyMaterial &key_material);
    bool is_key_material_Set() const;
    bool is_key_material_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIConsent m_consent;
    bool m_consent_isSet;
    bool m_consent_isValid;

    QString m_data_push_url;
    bool m_data_push_url_isSet;
    bool m_data_push_url_isValid;

    OAIDateRange m_date_range;
    bool m_date_range_isSet;
    bool m_date_range_isValid;

    OAIKeyMaterial m_key_material;
    bool m_key_material_isSet;
    bool m_key_material_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIHIRequest_hiRequest)

#endif // OAIHIRequest_hiRequest_H
