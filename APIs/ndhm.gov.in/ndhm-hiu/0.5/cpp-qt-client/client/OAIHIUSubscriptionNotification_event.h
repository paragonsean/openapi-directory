/**
 * Health Repository Provider Specifications for HIU
 * The following are the specifications for the APIs to be implemented at the Health Repository end if an entity is only serving the role of a HIU. The specs are essentially duplicates from the Gateway and Bridge, but put together so as to make it clear to *HIUs* which set of APIs they should implement to participate in the network.     1. The APIs are organized by the flows - **identification**, **consent flow**, **data flow** and **monitoring**. They represent the APIs that are expected to be available at the HIU end by the Gateway.    2. For majority of the APIs, if Gateway has initiated a call, there are corresponding callback APIs on the Gateway. e.g for **_/consents/hiu/notify** API on HIU end, its expected that a corresponding callback API **_/consents/hiu/on-notify** on Gateway is called. Such APIs are organized under the **Gateway** label.    3. Gateway relevant APIs for HIUs are grouped under **Gateway** label. These include the APIs that HIPs are required to call on the Gateway. For example, to request a CM for consent, HIU would call **_/consent-requests/init** API on gateway.    4. **NOTE**, in some of the API documentations below, **X-HIP-ID** is mentioned in header (for example in /auth/on-init). These are the cases, when a particular API is applicable for both HIU and HIP (e.g an entity is playing the role of HRP representing both HIU and HIP). If you are only playing the role of HIP, then only X-HIU-ID header will be sent  
 *
 * The version of the OpenAPI document: 0.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIHIUSubscriptionNotification_event.h
 *
 * 
 */

#ifndef OAIHIUSubscriptionNotification_event_H
#define OAIHIUSubscriptionNotification_event_H

#include <QJsonObject>

#include "OAIHIUSubscriptionEventContent.h"
#include "OAISubscriptionCategory.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIHIUSubscriptionEventContent;

class OAIHIUSubscriptionNotification_event : public OAIObject {
public:
    OAIHIUSubscriptionNotification_event();
    OAIHIUSubscriptionNotification_event(QString json);
    ~OAIHIUSubscriptionNotification_event() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAISubscriptionCategory getCategory() const;
    void setCategory(const OAISubscriptionCategory &category);
    bool is_category_Set() const;
    bool is_category_Valid() const;

    OAIHIUSubscriptionEventContent getContent() const;
    void setContent(const OAIHIUSubscriptionEventContent &content);
    bool is_content_Set() const;
    bool is_content_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QDateTime getPublished() const;
    void setPublished(const QDateTime &published);
    bool is_published_Set() const;
    bool is_published_Valid() const;

    QString getSubscriptionId() const;
    void setSubscriptionId(const QString &subscription_id);
    bool is_subscription_id_Set() const;
    bool is_subscription_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAISubscriptionCategory m_category;
    bool m_category_isSet;
    bool m_category_isValid;

    OAIHIUSubscriptionEventContent m_content;
    bool m_content_isSet;
    bool m_content_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QDateTime m_published;
    bool m_published_isSet;
    bool m_published_isValid;

    QString m_subscription_id;
    bool m_subscription_id_isSet;
    bool m_subscription_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIHIUSubscriptionNotification_event)

#endif // OAIHIUSubscriptionNotification_event_H
