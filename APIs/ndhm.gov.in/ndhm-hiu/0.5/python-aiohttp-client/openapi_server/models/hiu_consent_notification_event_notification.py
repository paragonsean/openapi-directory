# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.consent_artefact_reference import ConsentArtefactReference
from openapi_server.models.consent_status import ConsentStatus
from openapi_server import util


class HIUConsentNotificationEventNotification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, consent_artefacts: List[ConsentArtefactReference]=None, consent_request_id: str=None, status: ConsentStatus=None):
        """HIUConsentNotificationEventNotification - a model defined in OpenAPI

        :param consent_artefacts: The consent_artefacts of this HIUConsentNotificationEventNotification.
        :param consent_request_id: The consent_request_id of this HIUConsentNotificationEventNotification.
        :param status: The status of this HIUConsentNotificationEventNotification.
        """
        self.openapi_types = {
            'consent_artefacts': List[ConsentArtefactReference],
            'consent_request_id': str,
            'status': ConsentStatus
        }

        self.attribute_map = {
            'consent_artefacts': 'consentArtefacts',
            'consent_request_id': 'consentRequestId',
            'status': 'status'
        }

        self._consent_artefacts = consent_artefacts
        self._consent_request_id = consent_request_id
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HIUConsentNotificationEventNotification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HIUConsentNotificationEvent_notification of this HIUConsentNotificationEventNotification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def consent_artefacts(self):
        """Gets the consent_artefacts of this HIUConsentNotificationEventNotification.

        if the status is GRANTED or REVOKED, then the consentArtefact references (Ids) must be specified.

        :return: The consent_artefacts of this HIUConsentNotificationEventNotification.
        :rtype: List[ConsentArtefactReference]
        """
        return self._consent_artefacts

    @consent_artefacts.setter
    def consent_artefacts(self, consent_artefacts):
        """Sets the consent_artefacts of this HIUConsentNotificationEventNotification.

        if the status is GRANTED or REVOKED, then the consentArtefact references (Ids) must be specified.

        :param consent_artefacts: The consent_artefacts of this HIUConsentNotificationEventNotification.
        :type consent_artefacts: List[ConsentArtefactReference]
        """

        self._consent_artefacts = consent_artefacts

    @property
    def consent_request_id(self):
        """Gets the consent_request_id of this HIUConsentNotificationEventNotification.


        :return: The consent_request_id of this HIUConsentNotificationEventNotification.
        :rtype: str
        """
        return self._consent_request_id

    @consent_request_id.setter
    def consent_request_id(self, consent_request_id):
        """Sets the consent_request_id of this HIUConsentNotificationEventNotification.


        :param consent_request_id: The consent_request_id of this HIUConsentNotificationEventNotification.
        :type consent_request_id: str
        """
        if consent_request_id is None:
            raise ValueError("Invalid value for `consent_request_id`, must not be `None`")

        self._consent_request_id = consent_request_id

    @property
    def status(self):
        """Gets the status of this HIUConsentNotificationEventNotification.


        :return: The status of this HIUConsentNotificationEventNotification.
        :rtype: ConsentStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this HIUConsentNotificationEventNotification.


        :param status: The status of this HIUConsentNotificationEventNotification.
        :type status: ConsentStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
