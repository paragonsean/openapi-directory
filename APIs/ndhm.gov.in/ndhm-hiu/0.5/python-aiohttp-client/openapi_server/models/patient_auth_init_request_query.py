# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.authentication_mode import AuthenticationMode
from openapi_server.models.patient_auth_init_request_query_requester import PatientAuthInitRequestQueryRequester
from openapi_server.models.patient_auth_purpose import PatientAuthPurpose
from openapi_server import util


class PatientAuthInitRequestQuery(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auth_mode: AuthenticationMode=None, id: str=None, purpose: PatientAuthPurpose=None, requester: PatientAuthInitRequestQueryRequester=None):
        """PatientAuthInitRequestQuery - a model defined in OpenAPI

        :param auth_mode: The auth_mode of this PatientAuthInitRequestQuery.
        :param id: The id of this PatientAuthInitRequestQuery.
        :param purpose: The purpose of this PatientAuthInitRequestQuery.
        :param requester: The requester of this PatientAuthInitRequestQuery.
        """
        self.openapi_types = {
            'auth_mode': AuthenticationMode,
            'id': str,
            'purpose': PatientAuthPurpose,
            'requester': PatientAuthInitRequestQueryRequester
        }

        self.attribute_map = {
            'auth_mode': 'authMode',
            'id': 'id',
            'purpose': 'purpose',
            'requester': 'requester'
        }

        self._auth_mode = auth_mode
        self._id = id
        self._purpose = purpose
        self._requester = requester

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatientAuthInitRequestQuery':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatientAuthInitRequest_query of this PatientAuthInitRequestQuery.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auth_mode(self):
        """Gets the auth_mode of this PatientAuthInitRequestQuery.


        :return: The auth_mode of this PatientAuthInitRequestQuery.
        :rtype: AuthenticationMode
        """
        return self._auth_mode

    @auth_mode.setter
    def auth_mode(self, auth_mode):
        """Sets the auth_mode of this PatientAuthInitRequestQuery.


        :param auth_mode: The auth_mode of this PatientAuthInitRequestQuery.
        :type auth_mode: AuthenticationMode
        """

        self._auth_mode = auth_mode

    @property
    def id(self):
        """Gets the id of this PatientAuthInitRequestQuery.

        id  of the patient understood by the CM

        :return: The id of this PatientAuthInitRequestQuery.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PatientAuthInitRequestQuery.

        id  of the patient understood by the CM

        :param id: The id of this PatientAuthInitRequestQuery.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def purpose(self):
        """Gets the purpose of this PatientAuthInitRequestQuery.


        :return: The purpose of this PatientAuthInitRequestQuery.
        :rtype: PatientAuthPurpose
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """Sets the purpose of this PatientAuthInitRequestQuery.


        :param purpose: The purpose of this PatientAuthInitRequestQuery.
        :type purpose: PatientAuthPurpose
        """
        if purpose is None:
            raise ValueError("Invalid value for `purpose`, must not be `None`")

        self._purpose = purpose

    @property
    def requester(self):
        """Gets the requester of this PatientAuthInitRequestQuery.


        :return: The requester of this PatientAuthInitRequestQuery.
        :rtype: PatientAuthInitRequestQueryRequester
        """
        return self._requester

    @requester.setter
    def requester(self, requester):
        """Sets the requester of this PatientAuthInitRequestQuery.


        :param requester: The requester of this PatientAuthInitRequestQuery.
        :type requester: PatientAuthInitRequestQueryRequester
        """
        if requester is None:
            raise ValueError("Invalid value for `requester`, must not be `None`")

        self._requester = requester
