# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UsePurpose(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, ref_uri: str=None, text: str=None):
        """UsePurpose - a model defined in OpenAPI

        :param code: The code of this UsePurpose.
        :param ref_uri: The ref_uri of this UsePurpose.
        :param text: The text of this UsePurpose.
        """
        self.openapi_types = {
            'code': str,
            'ref_uri': str,
            'text': str
        }

        self.attribute_map = {
            'code': 'code',
            'ref_uri': 'refUri',
            'text': 'text'
        }

        self._code = code
        self._ref_uri = ref_uri
        self._text = text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UsePurpose':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UsePurpose of this UsePurpose.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this UsePurpose.

        From the fixed set, documented at refUri

        :return: The code of this UsePurpose.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this UsePurpose.

        From the fixed set, documented at refUri

        :param code: The code of this UsePurpose.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def ref_uri(self):
        """Gets the ref_uri of this UsePurpose.


        :return: The ref_uri of this UsePurpose.
        :rtype: str
        """
        return self._ref_uri

    @ref_uri.setter
    def ref_uri(self, ref_uri):
        """Sets the ref_uri of this UsePurpose.


        :param ref_uri: The ref_uri of this UsePurpose.
        :type ref_uri: str
        """

        self._ref_uri = ref_uri

    @property
    def text(self):
        """Gets the text of this UsePurpose.


        :return: The text of this UsePurpose.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this UsePurpose.


        :param text: The text of this UsePurpose.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")

        self._text = text
