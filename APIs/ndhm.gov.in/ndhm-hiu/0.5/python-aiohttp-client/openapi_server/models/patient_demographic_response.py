# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.identifier import Identifier
from openapi_server.models.patient_address import PatientAddress
from openapi_server.models.patient_gender import PatientGender
from openapi_server import util


class PatientDemographicResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: PatientAddress=None, gender: PatientGender=None, id: str=None, identifiers: List[Identifier]=None, name: str=None, year_of_birth: int=None):
        """PatientDemographicResponse - a model defined in OpenAPI

        :param address: The address of this PatientDemographicResponse.
        :param gender: The gender of this PatientDemographicResponse.
        :param id: The id of this PatientDemographicResponse.
        :param identifiers: The identifiers of this PatientDemographicResponse.
        :param name: The name of this PatientDemographicResponse.
        :param year_of_birth: The year_of_birth of this PatientDemographicResponse.
        """
        self.openapi_types = {
            'address': PatientAddress,
            'gender': PatientGender,
            'id': str,
            'identifiers': List[Identifier],
            'name': str,
            'year_of_birth': int
        }

        self.attribute_map = {
            'address': 'address',
            'gender': 'gender',
            'id': 'id',
            'identifiers': 'identifiers',
            'name': 'name',
            'year_of_birth': 'yearOfBirth'
        }

        self._address = address
        self._gender = gender
        self._id = id
        self._identifiers = identifiers
        self._name = name
        self._year_of_birth = year_of_birth

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatientDemographicResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatientDemographicResponse of this PatientDemographicResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this PatientDemographicResponse.


        :return: The address of this PatientDemographicResponse.
        :rtype: PatientAddress
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this PatientDemographicResponse.


        :param address: The address of this PatientDemographicResponse.
        :type address: PatientAddress
        """

        self._address = address

    @property
    def gender(self):
        """Gets the gender of this PatientDemographicResponse.


        :return: The gender of this PatientDemographicResponse.
        :rtype: PatientGender
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this PatientDemographicResponse.


        :param gender: The gender of this PatientDemographicResponse.
        :type gender: PatientGender
        """
        if gender is None:
            raise ValueError("Invalid value for `gender`, must not be `None`")

        self._gender = gender

    @property
    def id(self):
        """Gets the id of this PatientDemographicResponse.

        PHR Identifier of patient at consent manager

        :return: The id of this PatientDemographicResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PatientDemographicResponse.

        PHR Identifier of patient at consent manager

        :param id: The id of this PatientDemographicResponse.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def identifiers(self):
        """Gets the identifiers of this PatientDemographicResponse.


        :return: The identifiers of this PatientDemographicResponse.
        :rtype: List[Identifier]
        """
        return self._identifiers

    @identifiers.setter
    def identifiers(self, identifiers):
        """Sets the identifiers of this PatientDemographicResponse.


        :param identifiers: The identifiers of this PatientDemographicResponse.
        :type identifiers: List[Identifier]
        """

        self._identifiers = identifiers

    @property
    def name(self):
        """Gets the name of this PatientDemographicResponse.


        :return: The name of this PatientDemographicResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PatientDemographicResponse.


        :param name: The name of this PatientDemographicResponse.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def year_of_birth(self):
        """Gets the year_of_birth of this PatientDemographicResponse.


        :return: The year_of_birth of this PatientDemographicResponse.
        :rtype: int
        """
        return self._year_of_birth

    @year_of_birth.setter
    def year_of_birth(self, year_of_birth):
        """Sets the year_of_birth of this PatientDemographicResponse.


        :param year_of_birth: The year_of_birth of this PatientDemographicResponse.
        :type year_of_birth: int
        """
        if year_of_birth is None:
            raise ValueError("Invalid value for `year_of_birth`, must not be `None`")

        self._year_of_birth = year_of_birth
