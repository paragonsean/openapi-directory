# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.permission_date_range import PermissionDateRange
from openapi_server.models.permission_frequency import PermissionFrequency
from openapi_server import util


class Permission(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_mode: str=None, data_erase_at: datetime=None, date_range: PermissionDateRange=None, frequency: PermissionFrequency=None):
        """Permission - a model defined in OpenAPI

        :param access_mode: The access_mode of this Permission.
        :param data_erase_at: The data_erase_at of this Permission.
        :param date_range: The date_range of this Permission.
        :param frequency: The frequency of this Permission.
        """
        self.openapi_types = {
            'access_mode': str,
            'data_erase_at': datetime,
            'date_range': PermissionDateRange,
            'frequency': PermissionFrequency
        }

        self.attribute_map = {
            'access_mode': 'accessMode',
            'data_erase_at': 'dataEraseAt',
            'date_range': 'dateRange',
            'frequency': 'frequency'
        }

        self._access_mode = access_mode
        self._data_erase_at = data_erase_at
        self._date_range = date_range
        self._frequency = frequency

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Permission':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Permission of this Permission.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_mode(self):
        """Gets the access_mode of this Permission.


        :return: The access_mode of this Permission.
        :rtype: str
        """
        return self._access_mode

    @access_mode.setter
    def access_mode(self, access_mode):
        """Sets the access_mode of this Permission.


        :param access_mode: The access_mode of this Permission.
        :type access_mode: str
        """
        allowed_values = ["VIEW", "STORE", "QUERY", "STREAM"]  # noqa: E501
        if access_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `access_mode` ({0}), must be one of {1}"
                .format(access_mode, allowed_values)
            )

        self._access_mode = access_mode

    @property
    def data_erase_at(self):
        """Gets the data_erase_at of this Permission.


        :return: The data_erase_at of this Permission.
        :rtype: datetime
        """
        return self._data_erase_at

    @data_erase_at.setter
    def data_erase_at(self, data_erase_at):
        """Sets the data_erase_at of this Permission.


        :param data_erase_at: The data_erase_at of this Permission.
        :type data_erase_at: datetime
        """
        if data_erase_at is None:
            raise ValueError("Invalid value for `data_erase_at`, must not be `None`")

        self._data_erase_at = data_erase_at

    @property
    def date_range(self):
        """Gets the date_range of this Permission.


        :return: The date_range of this Permission.
        :rtype: PermissionDateRange
        """
        return self._date_range

    @date_range.setter
    def date_range(self, date_range):
        """Sets the date_range of this Permission.


        :param date_range: The date_range of this Permission.
        :type date_range: PermissionDateRange
        """
        if date_range is None:
            raise ValueError("Invalid value for `date_range`, must not be `None`")

        self._date_range = date_range

    @property
    def frequency(self):
        """Gets the frequency of this Permission.


        :return: The frequency of this Permission.
        :rtype: PermissionFrequency
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this Permission.


        :param frequency: The frequency of this Permission.
        :type frequency: PermissionFrequency
        """
        if frequency is None:
            raise ValueError("Invalid value for `frequency`, must not be `None`")

        self._frequency = frequency
