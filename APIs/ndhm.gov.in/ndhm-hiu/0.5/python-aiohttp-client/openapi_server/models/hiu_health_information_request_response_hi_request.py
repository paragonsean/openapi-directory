# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HIUHealthInformationRequestResponseHiRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, session_status: str=None, transaction_id: str=None):
        """HIUHealthInformationRequestResponseHiRequest - a model defined in OpenAPI

        :param session_status: The session_status of this HIUHealthInformationRequestResponseHiRequest.
        :param transaction_id: The transaction_id of this HIUHealthInformationRequestResponseHiRequest.
        """
        self.openapi_types = {
            'session_status': str,
            'transaction_id': str
        }

        self.attribute_map = {
            'session_status': 'sessionStatus',
            'transaction_id': 'transactionId'
        }

        self._session_status = session_status
        self._transaction_id = transaction_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HIUHealthInformationRequestResponseHiRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HIUHealthInformationRequestResponse_hiRequest of this HIUHealthInformationRequestResponseHiRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def session_status(self):
        """Gets the session_status of this HIUHealthInformationRequestResponseHiRequest.


        :return: The session_status of this HIUHealthInformationRequestResponseHiRequest.
        :rtype: str
        """
        return self._session_status

    @session_status.setter
    def session_status(self, session_status):
        """Sets the session_status of this HIUHealthInformationRequestResponseHiRequest.


        :param session_status: The session_status of this HIUHealthInformationRequestResponseHiRequest.
        :type session_status: str
        """
        allowed_values = ["REQUESTED", "ACKNOWLEDGED"]  # noqa: E501
        if session_status not in allowed_values:
            raise ValueError(
                "Invalid value for `session_status` ({0}), must be one of {1}"
                .format(session_status, allowed_values)
            )

        self._session_status = session_status

    @property
    def transaction_id(self):
        """Gets the transaction_id of this HIUHealthInformationRequestResponseHiRequest.


        :return: The transaction_id of this HIUHealthInformationRequestResponseHiRequest.
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this HIUHealthInformationRequestResponseHiRequest.


        :param transaction_id: The transaction_id of this HIUHealthInformationRequestResponseHiRequest.
        :type transaction_id: str
        """
        if transaction_id is None:
            raise ValueError("Invalid value for `transaction_id`, must not be `None`")

        self._transaction_id = transaction_id
