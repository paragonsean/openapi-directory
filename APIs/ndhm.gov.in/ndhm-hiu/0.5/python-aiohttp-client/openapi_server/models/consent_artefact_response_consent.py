# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.consent_artefact_response_consent_consent_detail import ConsentArtefactResponseConsentConsentDetail
from openapi_server.models.consent_status import ConsentStatus
from openapi_server import util


class ConsentArtefactResponseConsent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, consent_detail: ConsentArtefactResponseConsentConsentDetail=None, signature: str=None, status: ConsentStatus=None):
        """ConsentArtefactResponseConsent - a model defined in OpenAPI

        :param consent_detail: The consent_detail of this ConsentArtefactResponseConsent.
        :param signature: The signature of this ConsentArtefactResponseConsent.
        :param status: The status of this ConsentArtefactResponseConsent.
        """
        self.openapi_types = {
            'consent_detail': ConsentArtefactResponseConsentConsentDetail,
            'signature': str,
            'status': ConsentStatus
        }

        self.attribute_map = {
            'consent_detail': 'consentDetail',
            'signature': 'signature',
            'status': 'status'
        }

        self._consent_detail = consent_detail
        self._signature = signature
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConsentArtefactResponseConsent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConsentArtefactResponse_consent of this ConsentArtefactResponseConsent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def consent_detail(self):
        """Gets the consent_detail of this ConsentArtefactResponseConsent.


        :return: The consent_detail of this ConsentArtefactResponseConsent.
        :rtype: ConsentArtefactResponseConsentConsentDetail
        """
        return self._consent_detail

    @consent_detail.setter
    def consent_detail(self, consent_detail):
        """Sets the consent_detail of this ConsentArtefactResponseConsent.


        :param consent_detail: The consent_detail of this ConsentArtefactResponseConsent.
        :type consent_detail: ConsentArtefactResponseConsentConsentDetail
        """
        if consent_detail is None:
            raise ValueError("Invalid value for `consent_detail`, must not be `None`")

        self._consent_detail = consent_detail

    @property
    def signature(self):
        """Gets the signature of this ConsentArtefactResponseConsent.


        :return: The signature of this ConsentArtefactResponseConsent.
        :rtype: str
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this ConsentArtefactResponseConsent.


        :param signature: The signature of this ConsentArtefactResponseConsent.
        :type signature: str
        """
        if signature is None:
            raise ValueError("Invalid value for `signature`, must not be `None`")

        self._signature = signature

    @property
    def status(self):
        """Gets the status of this ConsentArtefactResponseConsent.


        :return: The status of this ConsentArtefactResponseConsent.
        :rtype: ConsentStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ConsentArtefactResponseConsent.


        :param status: The status of this ConsentArtefactResponseConsent.
        :type status: ConsentStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
