# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.organization_representation import OrganizationRepresentation
from openapi_server.models.subscription_category import SubscriptionCategory
from openapi_server.models.subscription_period import SubscriptionPeriod
from openapi_server import util


class HIUSubscriptionContext(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, categories: List[SubscriptionCategory]=None, hip: OrganizationRepresentation=None, period: SubscriptionPeriod=None):
        """HIUSubscriptionContext - a model defined in OpenAPI

        :param categories: The categories of this HIUSubscriptionContext.
        :param hip: The hip of this HIUSubscriptionContext.
        :param period: The period of this HIUSubscriptionContext.
        """
        self.openapi_types = {
            'categories': List[SubscriptionCategory],
            'hip': OrganizationRepresentation,
            'period': SubscriptionPeriod
        }

        self.attribute_map = {
            'categories': 'categories',
            'hip': 'hip',
            'period': 'period'
        }

        self._categories = categories
        self._hip = hip
        self._period = period

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HIUSubscriptionContext':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HIUSubscriptionContext of this HIUSubscriptionContext.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def categories(self):
        """Gets the categories of this HIUSubscriptionContext.


        :return: The categories of this HIUSubscriptionContext.
        :rtype: List[SubscriptionCategory]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this HIUSubscriptionContext.


        :param categories: The categories of this HIUSubscriptionContext.
        :type categories: List[SubscriptionCategory]
        """
        if categories is None:
            raise ValueError("Invalid value for `categories`, must not be `None`")

        self._categories = categories

    @property
    def hip(self):
        """Gets the hip of this HIUSubscriptionContext.


        :return: The hip of this HIUSubscriptionContext.
        :rtype: OrganizationRepresentation
        """
        return self._hip

    @hip.setter
    def hip(self, hip):
        """Sets the hip of this HIUSubscriptionContext.


        :param hip: The hip of this HIUSubscriptionContext.
        :type hip: OrganizationRepresentation
        """

        self._hip = hip

    @property
    def period(self):
        """Gets the period of this HIUSubscriptionContext.


        :return: The period of this HIUSubscriptionContext.
        :rtype: SubscriptionPeriod
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this HIUSubscriptionContext.


        :param period: The period of this HIUSubscriptionContext.
        :type period: SubscriptionPeriod
        """
        if period is None:
            raise ValueError("Invalid value for `period`, must not be `None`")

        self._period = period
