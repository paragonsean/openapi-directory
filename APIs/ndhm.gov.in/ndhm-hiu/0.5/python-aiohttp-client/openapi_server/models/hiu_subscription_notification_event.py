# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.hiu_subscription_event_content import HIUSubscriptionEventContent
from openapi_server.models.subscription_category import SubscriptionCategory
from openapi_server import util


class HIUSubscriptionNotificationEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: SubscriptionCategory=None, content: HIUSubscriptionEventContent=None, id: str=None, published: datetime=None, subscription_id: str=None):
        """HIUSubscriptionNotificationEvent - a model defined in OpenAPI

        :param category: The category of this HIUSubscriptionNotificationEvent.
        :param content: The content of this HIUSubscriptionNotificationEvent.
        :param id: The id of this HIUSubscriptionNotificationEvent.
        :param published: The published of this HIUSubscriptionNotificationEvent.
        :param subscription_id: The subscription_id of this HIUSubscriptionNotificationEvent.
        """
        self.openapi_types = {
            'category': SubscriptionCategory,
            'content': HIUSubscriptionEventContent,
            'id': str,
            'published': datetime,
            'subscription_id': str
        }

        self.attribute_map = {
            'category': 'category',
            'content': 'content',
            'id': 'id',
            'published': 'published',
            'subscription_id': 'subscriptionId'
        }

        self._category = category
        self._content = content
        self._id = id
        self._published = published
        self._subscription_id = subscription_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HIUSubscriptionNotificationEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HIUSubscriptionNotification_event of this HIUSubscriptionNotificationEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this HIUSubscriptionNotificationEvent.


        :return: The category of this HIUSubscriptionNotificationEvent.
        :rtype: SubscriptionCategory
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this HIUSubscriptionNotificationEvent.


        :param category: The category of this HIUSubscriptionNotificationEvent.
        :type category: SubscriptionCategory
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")

        self._category = category

    @property
    def content(self):
        """Gets the content of this HIUSubscriptionNotificationEvent.


        :return: The content of this HIUSubscriptionNotificationEvent.
        :rtype: HIUSubscriptionEventContent
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this HIUSubscriptionNotificationEvent.


        :param content: The content of this HIUSubscriptionNotificationEvent.
        :type content: HIUSubscriptionEventContent
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")

        self._content = content

    @property
    def id(self):
        """Gets the id of this HIUSubscriptionNotificationEvent.


        :return: The id of this HIUSubscriptionNotificationEvent.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HIUSubscriptionNotificationEvent.


        :param id: The id of this HIUSubscriptionNotificationEvent.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def published(self):
        """Gets the published of this HIUSubscriptionNotificationEvent.

        Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ

        :return: The published of this HIUSubscriptionNotificationEvent.
        :rtype: datetime
        """
        return self._published

    @published.setter
    def published(self, published):
        """Sets the published of this HIUSubscriptionNotificationEvent.

        Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ

        :param published: The published of this HIUSubscriptionNotificationEvent.
        :type published: datetime
        """
        if published is None:
            raise ValueError("Invalid value for `published`, must not be `None`")

        self._published = published

    @property
    def subscription_id(self):
        """Gets the subscription_id of this HIUSubscriptionNotificationEvent.


        :return: The subscription_id of this HIUSubscriptionNotificationEvent.
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this HIUSubscriptionNotificationEvent.


        :param subscription_id: The subscription_id of this HIUSubscriptionNotificationEvent.
        :type subscription_id: str
        """
        if subscription_id is None:
            raise ValueError("Invalid value for `subscription_id`, must not be `None`")

        self._subscription_id = subscription_id
