# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.access_token_validity import AccessTokenValidity
from openapi_server.models.patient_demographic_response import PatientDemographicResponse
from openapi_server import util


class PatientAuthNotificationAuth(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_token: str=None, patient: PatientDemographicResponse=None, status: str=None, transaction_id: str=None, validity: AccessTokenValidity=None):
        """PatientAuthNotificationAuth - a model defined in OpenAPI

        :param access_token: The access_token of this PatientAuthNotificationAuth.
        :param patient: The patient of this PatientAuthNotificationAuth.
        :param status: The status of this PatientAuthNotificationAuth.
        :param transaction_id: The transaction_id of this PatientAuthNotificationAuth.
        :param validity: The validity of this PatientAuthNotificationAuth.
        """
        self.openapi_types = {
            'access_token': str,
            'patient': PatientDemographicResponse,
            'status': str,
            'transaction_id': str,
            'validity': AccessTokenValidity
        }

        self.attribute_map = {
            'access_token': 'accessToken',
            'patient': 'patient',
            'status': 'status',
            'transaction_id': 'transactionId',
            'validity': 'validity'
        }

        self._access_token = access_token
        self._patient = patient
        self._status = status
        self._transaction_id = transaction_id
        self._validity = validity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatientAuthNotificationAuth':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatientAuthNotification_auth of this PatientAuthNotificationAuth.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_token(self):
        """Gets the access_token of this PatientAuthNotificationAuth.

        access token for initialization of subsequent action.

        :return: The access_token of this PatientAuthNotificationAuth.
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this PatientAuthNotificationAuth.

        access token for initialization of subsequent action.

        :param access_token: The access_token of this PatientAuthNotificationAuth.
        :type access_token: str
        """

        self._access_token = access_token

    @property
    def patient(self):
        """Gets the patient of this PatientAuthNotificationAuth.


        :return: The patient of this PatientAuthNotificationAuth.
        :rtype: PatientDemographicResponse
        """
        return self._patient

    @patient.setter
    def patient(self, patient):
        """Sets the patient of this PatientAuthNotificationAuth.


        :param patient: The patient of this PatientAuthNotificationAuth.
        :type patient: PatientDemographicResponse
        """

        self._patient = patient

    @property
    def status(self):
        """Gets the status of this PatientAuthNotificationAuth.


        :return: The status of this PatientAuthNotificationAuth.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PatientAuthNotificationAuth.


        :param status: The status of this PatientAuthNotificationAuth.
        :type status: str
        """
        allowed_values = ["GRANTED", "DENIED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def transaction_id(self):
        """Gets the transaction_id of this PatientAuthNotificationAuth.

        transaction id for auth session

        :return: The transaction_id of this PatientAuthNotificationAuth.
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this PatientAuthNotificationAuth.

        transaction id for auth session

        :param transaction_id: The transaction_id of this PatientAuthNotificationAuth.
        :type transaction_id: str
        """
        if transaction_id is None:
            raise ValueError("Invalid value for `transaction_id`, must not be `None`")

        self._transaction_id = transaction_id

    @property
    def validity(self):
        """Gets the validity of this PatientAuthNotificationAuth.


        :return: The validity of this PatientAuthNotificationAuth.
        :rtype: AccessTokenValidity
        """
        return self._validity

    @validity.setter
    def validity(self, validity):
        """Sets the validity of this PatientAuthNotificationAuth.


        :param validity: The validity of this PatientAuthNotificationAuth.
        :type validity: AccessTokenValidity
        """

        self._validity = validity
