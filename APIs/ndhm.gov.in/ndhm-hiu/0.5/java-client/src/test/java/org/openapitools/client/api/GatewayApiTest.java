/*
 * Health Repository Provider Specifications for HIU
 * The following are the specifications for the APIs to be implemented at the Health Repository end if an entity is only serving the role of a HIU. The specs are essentially duplicates from the Gateway and Bridge, but put together so as to make it clear to *HIUs* which set of APIs they should implement to participate in the network.     1. The APIs are organized by the flows - **identification**, **consent flow**, **data flow** and **monitoring**. They represent the APIs that are expected to be available at the HIU end by the Gateway.    2. For majority of the APIs, if Gateway has initiated a call, there are corresponding callback APIs on the Gateway. e.g for **_/consents/hiu/notify** API on HIU end, its expected that a corresponding callback API **_/consents/hiu/on-notify** on Gateway is called. Such APIs are organized under the **Gateway** label.    3. Gateway relevant APIs for HIUs are grouped under **Gateway** label. These include the APIs that HIPs are required to call on the Gateway. For example, to request a CM for consent, HIU would call **_/consent-requests/init** API on gateway.    4. **NOTE**, in some of the API documentations below, **X-HIP-ID** is mentioned in header (for example in /auth/on-init). These are the cases, when a particular API is applicable for both HIU and HIP (e.g an entity is playing the role of HRP representing both HIU and HIP). If you are only playing the role of HIP, then only X-HIU-ID header will be sent  
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Certs;
import org.openapitools.client.model.ConsentFetchRequest;
import org.openapitools.client.model.ConsentRequest;
import org.openapitools.client.model.ConsentRequestStatusRequest;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.HIRequest;
import org.openapitools.client.model.HIUConsentNotificationResponse;
import org.openapitools.client.model.HIUSubscriptionNotificationAcknowledgment;
import org.openapitools.client.model.HIUSubscriptionRequestNotificationAcknowledgement;
import org.openapitools.client.model.HealthInformationNotification;
import org.openapitools.client.model.OpenIdConfiguration;
import org.openapitools.client.model.PatientAuthConfirmRequest;
import org.openapitools.client.model.PatientAuthInitRequest;
import org.openapitools.client.model.PatientAuthModeQueryRequest;
import org.openapitools.client.model.PatientAuthNotificationAcknowledgement;
import org.openapitools.client.model.PatientIdentificationRequest;
import org.openapitools.client.model.SessionRequest;
import org.openapitools.client.model.SessionResponse;
import org.openapitools.client.model.SubscriptionRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for GatewayApi
 */
@Disabled
public class GatewayApiTest {

    private final GatewayApi api = new GatewayApi();

    /**
     * Get certs for JWT verification
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v05CertsGetTest() throws ApiException {
        Certs response = api.v05CertsGet();
        // TODO: test validations
    }

    /**
     * Create consent request
     *
     * Creates a consent request to get data about a patient by HIU user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v05ConsentRequestsInitPostTest() throws ApiException {
        String authorization = null;
        String X_CM_ID = null;
        ConsentRequest consentRequest = null;
        api.v05ConsentRequestsInitPost(authorization, X_CM_ID, consentRequest);
        // TODO: test validations
    }

    /**
     * Get consent request status
     *
     * Get status of consent request done previously
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v05ConsentRequestsStatusPostTest() throws ApiException {
        String authorization = null;
        String X_CM_ID = null;
        ConsentRequestStatusRequest consentRequestStatusRequest = null;
        api.v05ConsentRequestsStatusPost(authorization, X_CM_ID, consentRequestStatusRequest);
        // TODO: test validations
    }

    /**
     * Get consent artefact
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v05ConsentsFetchPostTest() throws ApiException {
        String authorization = null;
        String X_CM_ID = null;
        ConsentFetchRequest consentFetchRequest = null;
        api.v05ConsentsFetchPost(authorization, X_CM_ID, consentFetchRequest);
        // TODO: test validations
    }

    /**
     * Consent notification
     *
     * This API is called by HIU as acknowledgement to consent notifications, specifically for cases when consent is REVOKED or EXPIRED. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v05ConsentsHiuOnNotifyPostTest() throws ApiException {
        String authorization = null;
        String X_CM_ID = null;
        HIUConsentNotificationResponse hiUConsentNotificationResponse = null;
        api.v05ConsentsHiuOnNotifyPost(authorization, X_CM_ID, hiUConsentNotificationResponse);
        // TODO: test validations
    }

    /**
     * Health information data request
     *
     * Request for Health information against a consent id. CM would generate a transactionId against each consent and pass it as trnasaction context / correlation id to the HIP and also return the same to HIU via /on-request.  
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v05HealthInformationCmRequestPostTest() throws ApiException {
        String authorization = null;
        String X_CM_ID = null;
        HIRequest hiRequest = null;
        api.v05HealthInformationCmRequestPost(authorization, X_CM_ID, hiRequest);
        // TODO: test validations
    }

    /**
     * Notifications corresponding to events during data flow
     *
     * API called by HIU and HIP during data-transfer. 1. HIP on transfer of data would send **sessionStatus** - one of [TRANSFERRED, FAILED] 2. HIP would also send **hiStatus** for each *careContextReference* - on of [DELIVERED, ERRORED] 3. HIU on receipt of data would send **sessionStatus** - one of [TRANSFERRED, FAILED]. For example, FAILED when if data was not sent or if invalid data was sent 4. HIU would also send **hiStatus** for each *careContextReference* - one of [OK, ERRORED] 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v05HealthInformationNotifyPostTest() throws ApiException {
        String authorization = null;
        String X_CM_ID = null;
        HealthInformationNotification healthInformationNotification = null;
        api.v05HealthInformationNotifyPost(authorization, X_CM_ID, healthInformationNotification);
        // TODO: test validations
    }

    /**
     * Identify a patient by her consent-manager user-id
     *
     * This API is meant for identify to patient given her consent-manager-user-id 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v05PatientsFindPostTest() throws ApiException {
        String authorization = null;
        String X_CM_ID = null;
        PatientIdentificationRequest patientIdentificationRequest = null;
        api.v05PatientsFindPost(authorization, X_CM_ID, patientIdentificationRequest);
        // TODO: test validations
    }

    /**
     * Get access token
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v05SessionsPostTest() throws ApiException {
        SessionRequest sessionRequest = null;
        SessionResponse response = api.v05SessionsPost(sessionRequest);
        // TODO: test validations
    }

    /**
     * Request for subscription
     *
     * creates a request for subscription. The subscription categories can be for care-contexts linkages or availability of data against existing care-contexts. Note that the requester must have HIU role
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v05SubscriptionRequestsCmInitPostTest() throws ApiException {
        String authorization = null;
        String X_CM_ID = null;
        SubscriptionRequest subscriptionRequest = null;
        api.v05SubscriptionRequestsCmInitPost(authorization, X_CM_ID, subscriptionRequest);
        // TODO: test validations
    }

    /**
     * Callback API for /subscription-requests/hiu/notify to acknowledge receipt of notification.
     *
     * This API is called by HIU as acknowledgement to subscription request relevant notifications.  
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v05SubscriptionRequestsHiuOnNotifyPostTest() throws ApiException {
        String authorization = null;
        String X_CM_ID = null;
        HIUSubscriptionRequestNotificationAcknowledgement hiUSubscriptionRequestNotificationAcknowledgement = null;
        api.v05SubscriptionRequestsHiuOnNotifyPost(authorization, X_CM_ID, hiUSubscriptionRequestNotificationAcknowledgement);
        // TODO: test validations
    }

    /**
     * Callback API for /subscriptions/hiu/notify to acknowledge receipt of notification.
     *
     * This API is called by HIU as acknowledgement to consent notifications, specifically for cases when consent is REVOKED or EXPIRED. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v05SubscriptionsHiuOnNotifyPostTest() throws ApiException {
        String authorization = null;
        String X_CM_ID = null;
        HIUSubscriptionNotificationAcknowledgment hiUSubscriptionNotificationAcknowledgment = null;
        api.v05SubscriptionsHiuOnNotifyPost(authorization, X_CM_ID, hiUSubscriptionNotificationAcknowledgment);
        // TODO: test validations
    }

    /**
     * Confirmation request sending token, otp or other authentication details from HIP/HIU for confirmation
     *
     * This API is called by HIP/HIUs to confirm authentication of users. The transactionId returned by the previous callback API /users/auth/on-init must be sent. If Authentication is successful the callback API will send an \&quot;access token\&quot; for subsequent purpose specific API calls. Note only **credential.authCode** or **credential.demographic** should be sent   1. demographic details are only required for  demographic auth as of now.    2. demographic details are required only in MEDIATED cases and if the **auth.mode** so demands. e.g. if **auth.mode** is DEMOGRAPHICS. Usually for demographic authentication, the name, gender and DOB must be exactly as specified in User Account.   3. demographic.identifier is optional, however maybe required if authentication so mandates.    4. credential.authCode is required for other MEDIATED authentication like MOBILE_OTP, AADHAAR_OTP.  
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v05UsersAuthConfirmPostTest() throws ApiException {
        String authorization = null;
        String X_CM_ID = null;
        PatientAuthConfirmRequest patientAuthConfirmRequest = null;
        api.v05UsersAuthConfirmPost(authorization, X_CM_ID, patientAuthConfirmRequest);
        // TODO: test validations
    }

    /**
     * Get a patient&#39;s authentication modes relevant to specified purpose
     *
     * This API is meant for identify supported authentication modes for a patient given a specific purpose 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v05UsersAuthFetchModesPostTest() throws ApiException {
        String authorization = null;
        String X_CM_ID = null;
        PatientAuthModeQueryRequest patientAuthModeQueryRequest = null;
        api.v05UsersAuthFetchModesPost(authorization, X_CM_ID, patientAuthModeQueryRequest);
        // TODO: test validations
    }

    /**
     * Initialize authentication from HIP
     *
     * This API is called by HIPs to initiate authentication of users. A transactionId is retuned by the corresponding callback API for confirmation of user auth.   1. **NOTE**, only **KYC** purpose is applicable for HIU. Hence HIU should only sent KYC in **query.authMode** in the request 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v05UsersAuthInitPostTest() throws ApiException {
        String authorization = null;
        String X_CM_ID = null;
        PatientAuthInitRequest patientAuthInitRequest = null;
        api.v05UsersAuthInitPost(authorization, X_CM_ID, patientAuthInitRequest);
        // TODO: test validations
    }

    /**
     * callback API by HIU/HIPs as acknowledgement of auth notification
     *
     * This API is called by HIU/HIPs to confirm acknowledgement for receipt of auth notification is case of DIRECT authentication.  
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v05UsersAuthOnNotifyPostTest() throws ApiException {
        String authorization = null;
        String X_CM_ID = null;
        PatientAuthNotificationAcknowledgement patientAuthNotificationAcknowledgement = null;
        api.v05UsersAuthOnNotifyPost(authorization, X_CM_ID, patientAuthNotificationAcknowledgement);
        // TODO: test validations
    }

    /**
     * Get openid configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v05WellKnownOpenidConfigurationGetTest() throws ApiException {
        OpenIdConfiguration response = api.v05WellKnownOpenidConfigurationGet();
        // TODO: test validations
    }

}
