/*
 * Health Repository Provider Specifications for HIU
 * The following are the specifications for the APIs to be implemented at the Health Repository end if an entity is only serving the role of a HIU. The specs are essentially duplicates from the Gateway and Bridge, but put together so as to make it clear to *HIUs* which set of APIs they should implement to participate in the network.     1. The APIs are organized by the flows - **identification**, **consent flow**, **data flow** and **monitoring**. They represent the APIs that are expected to be available at the HIU end by the Gateway.    2. For majority of the APIs, if Gateway has initiated a call, there are corresponding callback APIs on the Gateway. e.g for **_/consents/hiu/notify** API on HIU end, its expected that a corresponding callback API **_/consents/hiu/on-notify** on Gateway is called. Such APIs are organized under the **Gateway** label.    3. Gateway relevant APIs for HIUs are grouped under **Gateway** label. These include the APIs that HIPs are required to call on the Gateway. For example, to request a CM for consent, HIU would call **_/consent-requests/init** API on gateway.    4. **NOTE**, in some of the API documentations below, **X-HIP-ID** is mentioned in header (for example in /auth/on-init). These are the cases, when a particular API is applicable for both HIU and HIP (e.g an entity is playing the role of HRP representing both HIU and HIP). If you are only playing the role of HIP, then only X-HIU-ID header will be sent  
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ConsentArtefactResponse;
import org.openapitools.client.model.ConsentRequestInitResponse;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.HIUConsentNotificationEvent;
import org.openapitools.client.model.HIUConsentRequestStatus;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ConsentFlowApi
 */
@Disabled
public class ConsentFlowApiTest {

    private final ConsentFlowApi api = new ConsentFlowApi();

    /**
     * Response to consent request
     *
     * Result of consent request creation for a patient. **id** represents the consentrequest id created by CM. The result must contain either **id** or the **error** caused. &lt;br/&gt;   Reasons for error may be   * Invalid references (e.g patient id, hiu id), purpose, hiTypes, ranges, persmission 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v05ConsentRequestsOnInitPostTest() throws ApiException {
        String authorization = null;
        String X_HIU_ID = null;
        ConsentRequestInitResponse consentRequestInitResponse = null;
        api.v05ConsentRequestsOnInitPost(authorization, X_HIU_ID, consentRequestInitResponse);
        // TODO: test validations
    }

    /**
     * Result of consent request status
     *
     * Result of consent request done previously. Status of request can be GRANTED,  DENIED, EXPIRED. If the request was GRANTED, then  
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v05ConsentRequestsOnStatusPostTest() throws ApiException {
        String authorization = null;
        String X_HIU_ID = null;
        HIUConsentRequestStatus hiUConsentRequestStatus = null;
        api.v05ConsentRequestsOnStatusPost(authorization, X_HIU_ID, hiUConsentRequestStatus);
        // TODO: test validations
    }

    /**
     * Consent notification
     *
     * Health information user will get notified about the consent request granted or denied, consent revoked, consent expired.  1. For consent request grant, status&#x3D;GRANTED, consentRequestId&#x3D;&lt;consent-request-id&gt;, and consentArtefacts is an array of generated consent artefact Ids. 2. For consent request expiry, status&#x3D;EXPIRED, consentRequestId&#x3D;&lt;consent-request-id&gt; 3. For consent request denied, status&#x3D;DENIED, consentRequestId&#x3D;&lt;consent-request-id&gt; 4. For consent revocation, status&#x3D;REVOKED, consentArtefacts is an array of revoked consent artefact ids 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v05ConsentsHiuNotifyPostTest() throws ApiException {
        String authorization = null;
        String X_HIU_ID = null;
        HIUConsentNotificationEvent hiUConsentNotificationEvent = null;
        api.v05ConsentsHiuNotifyPost(authorization, X_HIU_ID, hiUConsentNotificationEvent);
        // TODO: test validations
    }

    /**
     * Result of fetch request for a consent artefact
     *
     * Must contain either consent or error. Possible reason of errors are  1. consentId passed through /fetch is invalid 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v05ConsentsOnFetchPostTest() throws ApiException {
        String authorization = null;
        String X_HIU_ID = null;
        ConsentArtefactResponse consentArtefactResponse = null;
        api.v05ConsentsOnFetchPost(authorization, X_HIU_ID, consentArtefactResponse);
        // TODO: test validations
    }

}
