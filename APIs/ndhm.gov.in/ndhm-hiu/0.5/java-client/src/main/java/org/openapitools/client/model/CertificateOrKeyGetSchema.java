/*
 * Health Repository Provider Specifications for HIU
 * The following are the specifications for the APIs to be implemented at the Health Repository end if an entity is only serving the role of a HIU. The specs are essentially duplicates from the Gateway and Bridge, but put together so as to make it clear to *HIUs* which set of APIs they should implement to participate in the network.     1. The APIs are organized by the flows - **identification**, **consent flow**, **data flow** and **monitoring**. They represent the APIs that are expected to be available at the HIU end by the Gateway.    2. For majority of the APIs, if Gateway has initiated a call, there are corresponding callback APIs on the Gateway. e.g for **_/consents/hiu/notify** API on HIU end, its expected that a corresponding callback API **_/consents/hiu/on-notify** on Gateway is called. Such APIs are organized under the **Gateway** label.    3. Gateway relevant APIs for HIUs are grouped under **Gateway** label. These include the APIs that HIPs are required to call on the Gateway. For example, to request a CM for consent, HIU would call **_/consent-requests/init** API on gateway.    4. **NOTE**, in some of the API documentations below, **X-HIP-ID** is mentioned in header (for example in /auth/on-init). These are the cases, when a particular API is applicable for both HIU and HIP (e.g an entity is playing the role of HRP representing both HIU and HIP). If you are only playing the role of HIP, then only X-HIU-ID header will be sent  
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CertificateOrKeyGetSchema
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:36.866529-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CertificateOrKeyGetSchema {
  public static final String SERIALIZED_NAME_ALG = "alg";
  @SerializedName(SERIALIZED_NAME_ALG)
  private String alg;

  public static final String SERIALIZED_NAME_E = "e";
  @SerializedName(SERIALIZED_NAME_E)
  private String e;

  public static final String SERIALIZED_NAME_KID = "kid";
  @SerializedName(SERIALIZED_NAME_KID)
  private String kid;

  public static final String SERIALIZED_NAME_KTY = "kty";
  @SerializedName(SERIALIZED_NAME_KTY)
  private String kty;

  public static final String SERIALIZED_NAME_N = "n";
  @SerializedName(SERIALIZED_NAME_N)
  private String n;

  public static final String SERIALIZED_NAME_USE = "use";
  @SerializedName(SERIALIZED_NAME_USE)
  private String use;

  public static final String SERIALIZED_NAME_X5C = "x5c";
  @SerializedName(SERIALIZED_NAME_X5C)
  private List<String> x5c = new ArrayList<>();

  public static final String SERIALIZED_NAME_X5T = "x5t";
  @SerializedName(SERIALIZED_NAME_X5T)
  private String x5t;

  public static final String SERIALIZED_NAME_X5T_HASH_S256 = "x5t#S256";
  @SerializedName(SERIALIZED_NAME_X5T_HASH_S256)
  private String x5tHashS256;

  public CertificateOrKeyGetSchema() {
  }

  public CertificateOrKeyGetSchema alg(String alg) {
    this.alg = alg;
    return this;
  }

  /**
   * Get alg
   * @return alg
   */
  @javax.annotation.Nullable
  public String getAlg() {
    return alg;
  }

  public void setAlg(String alg) {
    this.alg = alg;
  }


  public CertificateOrKeyGetSchema e(String e) {
    this.e = e;
    return this;
  }

  /**
   * Get e
   * @return e
   */
  @javax.annotation.Nullable
  public String getE() {
    return e;
  }

  public void setE(String e) {
    this.e = e;
  }


  public CertificateOrKeyGetSchema kid(String kid) {
    this.kid = kid;
    return this;
  }

  /**
   * Get kid
   * @return kid
   */
  @javax.annotation.Nullable
  public String getKid() {
    return kid;
  }

  public void setKid(String kid) {
    this.kid = kid;
  }


  public CertificateOrKeyGetSchema kty(String kty) {
    this.kty = kty;
    return this;
  }

  /**
   * Get kty
   * @return kty
   */
  @javax.annotation.Nullable
  public String getKty() {
    return kty;
  }

  public void setKty(String kty) {
    this.kty = kty;
  }


  public CertificateOrKeyGetSchema n(String n) {
    this.n = n;
    return this;
  }

  /**
   * Get n
   * @return n
   */
  @javax.annotation.Nullable
  public String getN() {
    return n;
  }

  public void setN(String n) {
    this.n = n;
  }


  public CertificateOrKeyGetSchema use(String use) {
    this.use = use;
    return this;
  }

  /**
   * Get use
   * @return use
   */
  @javax.annotation.Nullable
  public String getUse() {
    return use;
  }

  public void setUse(String use) {
    this.use = use;
  }


  public CertificateOrKeyGetSchema x5c(List<String> x5c) {
    this.x5c = x5c;
    return this;
  }

  public CertificateOrKeyGetSchema addX5cItem(String x5cItem) {
    if (this.x5c == null) {
      this.x5c = new ArrayList<>();
    }
    this.x5c.add(x5cItem);
    return this;
  }

  /**
   * Get x5c
   * @return x5c
   */
  @javax.annotation.Nullable
  public List<String> getX5c() {
    return x5c;
  }

  public void setX5c(List<String> x5c) {
    this.x5c = x5c;
  }


  public CertificateOrKeyGetSchema x5t(String x5t) {
    this.x5t = x5t;
    return this;
  }

  /**
   * Get x5t
   * @return x5t
   */
  @javax.annotation.Nullable
  public String getX5t() {
    return x5t;
  }

  public void setX5t(String x5t) {
    this.x5t = x5t;
  }


  public CertificateOrKeyGetSchema x5tHashS256(String x5tHashS256) {
    this.x5tHashS256 = x5tHashS256;
    return this;
  }

  /**
   * Get x5tHashS256
   * @return x5tHashS256
   */
  @javax.annotation.Nullable
  public String getX5tHashS256() {
    return x5tHashS256;
  }

  public void setX5tHashS256(String x5tHashS256) {
    this.x5tHashS256 = x5tHashS256;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CertificateOrKeyGetSchema certificateOrKeyGetSchema = (CertificateOrKeyGetSchema) o;
    return Objects.equals(this.alg, certificateOrKeyGetSchema.alg) &&
        Objects.equals(this.e, certificateOrKeyGetSchema.e) &&
        Objects.equals(this.kid, certificateOrKeyGetSchema.kid) &&
        Objects.equals(this.kty, certificateOrKeyGetSchema.kty) &&
        Objects.equals(this.n, certificateOrKeyGetSchema.n) &&
        Objects.equals(this.use, certificateOrKeyGetSchema.use) &&
        Objects.equals(this.x5c, certificateOrKeyGetSchema.x5c) &&
        Objects.equals(this.x5t, certificateOrKeyGetSchema.x5t) &&
        Objects.equals(this.x5tHashS256, certificateOrKeyGetSchema.x5tHashS256);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alg, e, kid, kty, n, use, x5c, x5t, x5tHashS256);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CertificateOrKeyGetSchema {\n");
    sb.append("    alg: ").append(toIndentedString(alg)).append("\n");
    sb.append("    e: ").append(toIndentedString(e)).append("\n");
    sb.append("    kid: ").append(toIndentedString(kid)).append("\n");
    sb.append("    kty: ").append(toIndentedString(kty)).append("\n");
    sb.append("    n: ").append(toIndentedString(n)).append("\n");
    sb.append("    use: ").append(toIndentedString(use)).append("\n");
    sb.append("    x5c: ").append(toIndentedString(x5c)).append("\n");
    sb.append("    x5t: ").append(toIndentedString(x5t)).append("\n");
    sb.append("    x5tHashS256: ").append(toIndentedString(x5tHashS256)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alg");
    openapiFields.add("e");
    openapiFields.add("kid");
    openapiFields.add("kty");
    openapiFields.add("n");
    openapiFields.add("use");
    openapiFields.add("x5c");
    openapiFields.add("x5t");
    openapiFields.add("x5t#S256");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CertificateOrKeyGetSchema
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CertificateOrKeyGetSchema.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CertificateOrKeyGetSchema is not found in the empty JSON string", CertificateOrKeyGetSchema.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CertificateOrKeyGetSchema.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CertificateOrKeyGetSchema` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("alg") != null && !jsonObj.get("alg").isJsonNull()) && !jsonObj.get("alg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alg").toString()));
      }
      if ((jsonObj.get("e") != null && !jsonObj.get("e").isJsonNull()) && !jsonObj.get("e").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `e` to be a primitive type in the JSON string but got `%s`", jsonObj.get("e").toString()));
      }
      if ((jsonObj.get("kid") != null && !jsonObj.get("kid").isJsonNull()) && !jsonObj.get("kid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kid").toString()));
      }
      if ((jsonObj.get("kty") != null && !jsonObj.get("kty").isJsonNull()) && !jsonObj.get("kty").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kty` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kty").toString()));
      }
      if ((jsonObj.get("n") != null && !jsonObj.get("n").isJsonNull()) && !jsonObj.get("n").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `n` to be a primitive type in the JSON string but got `%s`", jsonObj.get("n").toString()));
      }
      if ((jsonObj.get("use") != null && !jsonObj.get("use").isJsonNull()) && !jsonObj.get("use").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `use` to be a primitive type in the JSON string but got `%s`", jsonObj.get("use").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("x5c") != null && !jsonObj.get("x5c").isJsonNull() && !jsonObj.get("x5c").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `x5c` to be an array in the JSON string but got `%s`", jsonObj.get("x5c").toString()));
      }
      if ((jsonObj.get("x5t") != null && !jsonObj.get("x5t").isJsonNull()) && !jsonObj.get("x5t").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `x5t` to be a primitive type in the JSON string but got `%s`", jsonObj.get("x5t").toString()));
      }
      if ((jsonObj.get("x5t#S256") != null && !jsonObj.get("x5t#S256").isJsonNull()) && !jsonObj.get("x5t#S256").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `x5t#S256` to be a primitive type in the JSON string but got `%s`", jsonObj.get("x5t#S256").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CertificateOrKeyGetSchema.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CertificateOrKeyGetSchema' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CertificateOrKeyGetSchema> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CertificateOrKeyGetSchema.class));

       return (TypeAdapter<T>) new TypeAdapter<CertificateOrKeyGetSchema>() {
           @Override
           public void write(JsonWriter out, CertificateOrKeyGetSchema value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CertificateOrKeyGetSchema read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CertificateOrKeyGetSchema given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CertificateOrKeyGetSchema
   * @throws IOException if the JSON string is invalid with respect to CertificateOrKeyGetSchema
   */
  public static CertificateOrKeyGetSchema fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CertificateOrKeyGetSchema.class);
  }

  /**
   * Convert an instance of CertificateOrKeyGetSchema to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

