/*
 * Health Repository Provider Specifications for HIU
 * The following are the specifications for the APIs to be implemented at the Health Repository end if an entity is only serving the role of a HIU. The specs are essentially duplicates from the Gateway and Bridge, but put together so as to make it clear to *HIUs* which set of APIs they should implement to participate in the network.     1. The APIs are organized by the flows - **identification**, **consent flow**, **data flow** and **monitoring**. They represent the APIs that are expected to be available at the HIU end by the Gateway.    2. For majority of the APIs, if Gateway has initiated a call, there are corresponding callback APIs on the Gateway. e.g for **_/consents/hiu/notify** API on HIU end, its expected that a corresponding callback API **_/consents/hiu/on-notify** on Gateway is called. Such APIs are organized under the **Gateway** label.    3. Gateway relevant APIs for HIUs are grouped under **Gateway** label. These include the APIs that HIPs are required to call on the Gateway. For example, to request a CM for consent, HIU would call **_/consent-requests/init** API on gateway.    4. **NOTE**, in some of the API documentations below, **X-HIP-ID** is mentioned in header (for example in /auth/on-init). These are the cases, when a particular API is applicable for both HIU and HIP (e.g an entity is playing the role of HRP representing both HIU and HIP). If you are only playing the role of HIP, then only X-HIU-ID header will be sent  
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.EntryContent;
import org.openapitools.client.model.EntryLink;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:36.866529-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataNotificationEntriesInner extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(DataNotificationEntriesInner.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!DataNotificationEntriesInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'DataNotificationEntriesInner' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<EntryContent> adapterEntryContent = gson.getDelegateAdapter(this, TypeToken.get(EntryContent.class));
            final TypeAdapter<EntryLink> adapterEntryLink = gson.getDelegateAdapter(this, TypeToken.get(EntryLink.class));

            return (TypeAdapter<T>) new TypeAdapter<DataNotificationEntriesInner>() {
                @Override
                public void write(JsonWriter out, DataNotificationEntriesInner value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `EntryContent`
                    if (value.getActualInstance() instanceof EntryContent) {
                        JsonElement element = adapterEntryContent.toJsonTree((EntryContent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `EntryLink`
                    if (value.getActualInstance() instanceof EntryLink) {
                        JsonElement element = adapterEntryLink.toJsonTree((EntryLink)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match anyOf schemas: EntryContent, EntryLink");
                }

                @Override
                public DataNotificationEntriesInner read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize EntryContent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        EntryContent.validateJsonElement(jsonElement);
                        actualAdapter = adapterEntryContent;
                        DataNotificationEntriesInner ret = new DataNotificationEntriesInner();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for EntryContent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'EntryContent'", e);
                    }
                    // deserialize EntryLink
                    try {
                        // validate the JSON object to see if any exception is thrown
                        EntryLink.validateJsonElement(jsonElement);
                        actualAdapter = adapterEntryLink;
                        DataNotificationEntriesInner ret = new DataNotificationEntriesInner();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for EntryLink failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'EntryLink'", e);
                    }

                    throw new IOException(String.format("Failed deserialization for DataNotificationEntriesInner: no class matches result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in anyOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public DataNotificationEntriesInner() {
        super("anyOf", Boolean.FALSE);
    }

    public DataNotificationEntriesInner(Object o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("EntryContent", EntryContent.class);
        schemas.put("EntryLink", EntryLink.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return DataNotificationEntriesInner.schemas;
    }

    /**
     * Set the instance that matches the anyOf child schema, check
     * the instance parameter is valid against the anyOf child schemas:
     * EntryContent, EntryLink
     *
     * It could be an instance of the 'anyOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof EntryContent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EntryLink) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be EntryContent, EntryLink");
    }

    /**
     * Get the actual instance, which can be the following:
     * EntryContent, EntryLink
     *
     * @return The actual instance (EntryContent, EntryLink)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `EntryContent`. If the actual instance is not `EntryContent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EntryContent`
     * @throws ClassCastException if the instance is not `EntryContent`
     */
    public EntryContent getEntryContent() throws ClassCastException {
        return (EntryContent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EntryLink`. If the actual instance is not `EntryLink`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EntryLink`
     * @throws ClassCastException if the instance is not `EntryLink`
     */
    public EntryLink getEntryLink() throws ClassCastException {
        return (EntryLink)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to DataNotificationEntriesInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate anyOf schemas one by one
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with EntryContent
        try {
            EntryContent.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for EntryContent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with EntryLink
        try {
            EntryLink.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for EntryLink failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        throw new IOException(String.format("The JSON string is invalid for DataNotificationEntriesInner with anyOf schemas: EntryContent, EntryLink. no class match the result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
    }

    /**
     * Create an instance of DataNotificationEntriesInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of DataNotificationEntriesInner
     * @throws IOException if the JSON string is invalid with respect to DataNotificationEntriesInner
     */
    public static DataNotificationEntriesInner fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, DataNotificationEntriesInner.class);
    }

    /**
     * Convert an instance of DataNotificationEntriesInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

