/*
 * Health Repository Provider Specifications for HIU
 * The following are the specifications for the APIs to be implemented at the Health Repository end if an entity is only serving the role of a HIU. The specs are essentially duplicates from the Gateway and Bridge, but put together so as to make it clear to *HIUs* which set of APIs they should implement to participate in the network.     1. The APIs are organized by the flows - **identification**, **consent flow**, **data flow** and **monitoring**. They represent the APIs that are expected to be available at the HIU end by the Gateway.    2. For majority of the APIs, if Gateway has initiated a call, there are corresponding callback APIs on the Gateway. e.g for **_/consents/hiu/notify** API on HIU end, its expected that a corresponding callback API **_/consents/hiu/on-notify** on Gateway is called. Such APIs are organized under the **Gateway** label.    3. Gateway relevant APIs for HIUs are grouped under **Gateway** label. These include the APIs that HIPs are required to call on the Gateway. For example, to request a CM for consent, HIU would call **_/consent-requests/init** API on gateway.    4. **NOTE**, in some of the API documentations below, **X-HIP-ID** is mentioned in header (for example in /auth/on-init). These are the cases, when a particular API is applicable for both HIU and HIP (e.g an entity is playing the role of HRP representing both HIU and HIP). If you are only playing the role of HIP, then only X-HIU-ID header will be sent  
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.HIUSubscriptionNotification;
import org.openapitools.client.model.HIUSubscriptionRequestReceipt;
import org.openapitools.client.model.SubscriptionApprovalNotification;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SubscriptionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SubscriptionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SubscriptionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v05SubscriptionRequestsHiuNotifyPost
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended. (required)
     * @param subscriptionApprovalNotification  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Invalid data sent    * Required attributes not mentioned  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Expired/Invalid token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05SubscriptionRequestsHiuNotifyPostCall(String authorization, String X_HIU_ID, SubscriptionApprovalNotification subscriptionApprovalNotification, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = subscriptionApprovalNotification;

        // create path and map variables
        String localVarPath = "/v0.5/subscription-requests/hiu/notify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (X_HIU_ID != null) {
            localVarHeaderParams.put("X-HIU-ID", localVarApiClient.parameterToString(X_HIU_ID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v05SubscriptionRequestsHiuNotifyPostValidateBeforeCall(String authorization, String X_HIU_ID, SubscriptionApprovalNotification subscriptionApprovalNotification, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v05SubscriptionRequestsHiuNotifyPost(Async)");
        }

        // verify the required parameter 'X_HIU_ID' is set
        if (X_HIU_ID == null) {
            throw new ApiException("Missing the required parameter 'X_HIU_ID' when calling v05SubscriptionRequestsHiuNotifyPost(Async)");
        }

        // verify the required parameter 'subscriptionApprovalNotification' is set
        if (subscriptionApprovalNotification == null) {
            throw new ApiException("Missing the required parameter 'subscriptionApprovalNotification' when calling v05SubscriptionRequestsHiuNotifyPost(Async)");
        }

        return v05SubscriptionRequestsHiuNotifyPostCall(authorization, X_HIU_ID, subscriptionApprovalNotification, _callback);

    }

    /**
     * Notification for subscription grant/deny/revoke
     * This API is used by CM to notify a HIU to grant or deny a request for subscription, and also to notify that in case an existing subscription is revoked or expired. For notifying that a particular subscription request was GRANTED or DENIED, the **subscriptionRequestId** is passed.  
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended. (required)
     * @param subscriptionApprovalNotification  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Invalid data sent    * Required attributes not mentioned  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Expired/Invalid token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public void v05SubscriptionRequestsHiuNotifyPost(String authorization, String X_HIU_ID, SubscriptionApprovalNotification subscriptionApprovalNotification) throws ApiException {
        v05SubscriptionRequestsHiuNotifyPostWithHttpInfo(authorization, X_HIU_ID, subscriptionApprovalNotification);
    }

    /**
     * Notification for subscription grant/deny/revoke
     * This API is used by CM to notify a HIU to grant or deny a request for subscription, and also to notify that in case an existing subscription is revoked or expired. For notifying that a particular subscription request was GRANTED or DENIED, the **subscriptionRequestId** is passed.  
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended. (required)
     * @param subscriptionApprovalNotification  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Invalid data sent    * Required attributes not mentioned  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Expired/Invalid token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v05SubscriptionRequestsHiuNotifyPostWithHttpInfo(String authorization, String X_HIU_ID, SubscriptionApprovalNotification subscriptionApprovalNotification) throws ApiException {
        okhttp3.Call localVarCall = v05SubscriptionRequestsHiuNotifyPostValidateBeforeCall(authorization, X_HIU_ID, subscriptionApprovalNotification, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Notification for subscription grant/deny/revoke (asynchronously)
     * This API is used by CM to notify a HIU to grant or deny a request for subscription, and also to notify that in case an existing subscription is revoked or expired. For notifying that a particular subscription request was GRANTED or DENIED, the **subscriptionRequestId** is passed.  
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended. (required)
     * @param subscriptionApprovalNotification  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Invalid data sent    * Required attributes not mentioned  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Expired/Invalid token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05SubscriptionRequestsHiuNotifyPostAsync(String authorization, String X_HIU_ID, SubscriptionApprovalNotification subscriptionApprovalNotification, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v05SubscriptionRequestsHiuNotifyPostValidateBeforeCall(authorization, X_HIU_ID, subscriptionApprovalNotification, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v05SubscriptionRequestsHiuOnInitPost
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended. (required)
     * @param hiUSubscriptionRequestReceipt  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Invalid/Expired/Empty token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream services are down  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05SubscriptionRequestsHiuOnInitPostCall(String authorization, String X_HIU_ID, HIUSubscriptionRequestReceipt hiUSubscriptionRequestReceipt, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = hiUSubscriptionRequestReceipt;

        // create path and map variables
        String localVarPath = "/v0.5/subscription-requests/hiu/on-init";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (X_HIU_ID != null) {
            localVarHeaderParams.put("X-HIU-ID", localVarApiClient.parameterToString(X_HIU_ID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v05SubscriptionRequestsHiuOnInitPostValidateBeforeCall(String authorization, String X_HIU_ID, HIUSubscriptionRequestReceipt hiUSubscriptionRequestReceipt, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v05SubscriptionRequestsHiuOnInitPost(Async)");
        }

        // verify the required parameter 'X_HIU_ID' is set
        if (X_HIU_ID == null) {
            throw new ApiException("Missing the required parameter 'X_HIU_ID' when calling v05SubscriptionRequestsHiuOnInitPost(Async)");
        }

        // verify the required parameter 'hiUSubscriptionRequestReceipt' is set
        if (hiUSubscriptionRequestReceipt == null) {
            throw new ApiException("Missing the required parameter 'hiUSubscriptionRequestReceipt' when calling v05SubscriptionRequestsHiuOnInitPost(Async)");
        }

        return v05SubscriptionRequestsHiuOnInitPostCall(authorization, X_HIU_ID, hiUSubscriptionRequestReceipt, _callback);

    }

    /**
     * callback API for the /subscription-requests/cm/init to notify a HIU on acceptance/acknowledgement of the request for subscription.
     * This callback API acknowledges the request for subscription from a HIU, and sends back a \&quot;id\&quot; that will be used when the patient/user approves or denies the subscription.  
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended. (required)
     * @param hiUSubscriptionRequestReceipt  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Invalid/Expired/Empty token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream services are down  </td><td>  -  </td></tr>
     </table>
     */
    public void v05SubscriptionRequestsHiuOnInitPost(String authorization, String X_HIU_ID, HIUSubscriptionRequestReceipt hiUSubscriptionRequestReceipt) throws ApiException {
        v05SubscriptionRequestsHiuOnInitPostWithHttpInfo(authorization, X_HIU_ID, hiUSubscriptionRequestReceipt);
    }

    /**
     * callback API for the /subscription-requests/cm/init to notify a HIU on acceptance/acknowledgement of the request for subscription.
     * This callback API acknowledges the request for subscription from a HIU, and sends back a \&quot;id\&quot; that will be used when the patient/user approves or denies the subscription.  
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended. (required)
     * @param hiUSubscriptionRequestReceipt  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Invalid/Expired/Empty token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream services are down  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v05SubscriptionRequestsHiuOnInitPostWithHttpInfo(String authorization, String X_HIU_ID, HIUSubscriptionRequestReceipt hiUSubscriptionRequestReceipt) throws ApiException {
        okhttp3.Call localVarCall = v05SubscriptionRequestsHiuOnInitPostValidateBeforeCall(authorization, X_HIU_ID, hiUSubscriptionRequestReceipt, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * callback API for the /subscription-requests/cm/init to notify a HIU on acceptance/acknowledgement of the request for subscription. (asynchronously)
     * This callback API acknowledges the request for subscription from a HIU, and sends back a \&quot;id\&quot; that will be used when the patient/user approves or denies the subscription.  
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended. (required)
     * @param hiUSubscriptionRequestReceipt  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Invalid/Expired/Empty token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream services are down  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05SubscriptionRequestsHiuOnInitPostAsync(String authorization, String X_HIU_ID, HIUSubscriptionRequestReceipt hiUSubscriptionRequestReceipt, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v05SubscriptionRequestsHiuOnInitPostValidateBeforeCall(authorization, X_HIU_ID, hiUSubscriptionRequestReceipt, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v05SubscriptionsHiuNotifyPost
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended. (required)
     * @param hiUSubscriptionNotification  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Invalid data sent    * Required attributes not mentioned  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Expired/Invalid token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05SubscriptionsHiuNotifyPostCall(String authorization, String X_HIU_ID, HIUSubscriptionNotification hiUSubscriptionNotification, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = hiUSubscriptionNotification;

        // create path and map variables
        String localVarPath = "/v0.5/subscriptions/hiu/notify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (X_HIU_ID != null) {
            localVarHeaderParams.put("X-HIU-ID", localVarApiClient.parameterToString(X_HIU_ID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v05SubscriptionsHiuNotifyPostValidateBeforeCall(String authorization, String X_HIU_ID, HIUSubscriptionNotification hiUSubscriptionNotification, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v05SubscriptionsHiuNotifyPost(Async)");
        }

        // verify the required parameter 'X_HIU_ID' is set
        if (X_HIU_ID == null) {
            throw new ApiException("Missing the required parameter 'X_HIU_ID' when calling v05SubscriptionsHiuNotifyPost(Async)");
        }

        // verify the required parameter 'hiUSubscriptionNotification' is set
        if (hiUSubscriptionNotification == null) {
            throw new ApiException("Missing the required parameter 'hiUSubscriptionNotification' when calling v05SubscriptionsHiuNotifyPost(Async)");
        }

        return v05SubscriptionsHiuNotifyPostCall(authorization, X_HIU_ID, hiUSubscriptionNotification, _callback);

    }

    /**
     * Notification to HIU on basis of a granted subscription
     * This API is used by CM to notify a HIU for notification relevant to subscription. Notifications are sent to subscribed HIUs whenever a new care-context is linked or new data is available on an existing linked care-context.  1. if event.category &#x3D; LINK, then only care-contexts are passed when new care-contexts are linked for patient.  2. If event.category &#x3D; DATA, then hiTypes are passed. Care-context is passed only if the subscribed HIU has any valid consent for that care-context 
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended. (required)
     * @param hiUSubscriptionNotification  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Invalid data sent    * Required attributes not mentioned  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Expired/Invalid token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public void v05SubscriptionsHiuNotifyPost(String authorization, String X_HIU_ID, HIUSubscriptionNotification hiUSubscriptionNotification) throws ApiException {
        v05SubscriptionsHiuNotifyPostWithHttpInfo(authorization, X_HIU_ID, hiUSubscriptionNotification);
    }

    /**
     * Notification to HIU on basis of a granted subscription
     * This API is used by CM to notify a HIU for notification relevant to subscription. Notifications are sent to subscribed HIUs whenever a new care-context is linked or new data is available on an existing linked care-context.  1. if event.category &#x3D; LINK, then only care-contexts are passed when new care-contexts are linked for patient.  2. If event.category &#x3D; DATA, then hiTypes are passed. Care-context is passed only if the subscribed HIU has any valid consent for that care-context 
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended. (required)
     * @param hiUSubscriptionNotification  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Invalid data sent    * Required attributes not mentioned  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Expired/Invalid token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v05SubscriptionsHiuNotifyPostWithHttpInfo(String authorization, String X_HIU_ID, HIUSubscriptionNotification hiUSubscriptionNotification) throws ApiException {
        okhttp3.Call localVarCall = v05SubscriptionsHiuNotifyPostValidateBeforeCall(authorization, X_HIU_ID, hiUSubscriptionNotification, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Notification to HIU on basis of a granted subscription (asynchronously)
     * This API is used by CM to notify a HIU for notification relevant to subscription. Notifications are sent to subscribed HIUs whenever a new care-context is linked or new data is available on an existing linked care-context.  1. if event.category &#x3D; LINK, then only care-contexts are passed when new care-contexts are linked for patient.  2. If event.category &#x3D; DATA, then hiTypes are passed. Care-context is passed only if the subscribed HIU has any valid consent for that care-context 
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended. (required)
     * @param hiUSubscriptionNotification  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Invalid data sent    * Required attributes not mentioned  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Expired/Invalid token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05SubscriptionsHiuNotifyPostAsync(String authorization, String X_HIU_ID, HIUSubscriptionNotification hiUSubscriptionNotification, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v05SubscriptionsHiuNotifyPostValidateBeforeCall(authorization, X_HIU_ID, hiUSubscriptionNotification, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
