/*
 * Health Repository Provider Specifications for HIU
 * The following are the specifications for the APIs to be implemented at the Health Repository end if an entity is only serving the role of a HIU. The specs are essentially duplicates from the Gateway and Bridge, but put together so as to make it clear to *HIUs* which set of APIs they should implement to participate in the network.     1. The APIs are organized by the flows - **identification**, **consent flow**, **data flow** and **monitoring**. They represent the APIs that are expected to be available at the HIU end by the Gateway.    2. For majority of the APIs, if Gateway has initiated a call, there are corresponding callback APIs on the Gateway. e.g for **_/consents/hiu/notify** API on HIU end, its expected that a corresponding callback API **_/consents/hiu/on-notify** on Gateway is called. Such APIs are organized under the **Gateway** label.    3. Gateway relevant APIs for HIUs are grouped under **Gateway** label. These include the APIs that HIPs are required to call on the Gateway. For example, to request a CM for consent, HIU would call **_/consent-requests/init** API on gateway.    4. **NOTE**, in some of the API documentations below, **X-HIP-ID** is mentioned in header (for example in /auth/on-init). These are the cases, when a particular API is applicable for both HIU and HIP (e.g an entity is playing the role of HRP representing both HIU and HIP). If you are only playing the role of HIP, then only X-HIU-ID header will be sent  
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DataNotification;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.HIUHealthInformationRequestResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DataFlowApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DataFlowApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DataFlowApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v05HealthInformationHiuOnRequestPost
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended. (required)
     * @param hiUHealthInformationRequestResponse  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Bad request  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Token is invalid or Link has expired  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05HealthInformationHiuOnRequestPostCall(String authorization, String X_HIU_ID, HIUHealthInformationRequestResponse hiUHealthInformationRequestResponse, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://dev.ndhm.gov.in/hiu" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = hiUHealthInformationRequestResponse;

        // create path and map variables
        String localVarPath = "/v0.5/health-information/hiu/on-request";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (X_HIU_ID != null) {
            localVarHeaderParams.put("X-HIU-ID", localVarApiClient.parameterToString(X_HIU_ID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v05HealthInformationHiuOnRequestPostValidateBeforeCall(String authorization, String X_HIU_ID, HIUHealthInformationRequestResponse hiUHealthInformationRequestResponse, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v05HealthInformationHiuOnRequestPost(Async)");
        }

        // verify the required parameter 'X_HIU_ID' is set
        if (X_HIU_ID == null) {
            throw new ApiException("Missing the required parameter 'X_HIU_ID' when calling v05HealthInformationHiuOnRequestPost(Async)");
        }

        // verify the required parameter 'hiUHealthInformationRequestResponse' is set
        if (hiUHealthInformationRequestResponse == null) {
            throw new ApiException("Missing the required parameter 'hiUHealthInformationRequestResponse' when calling v05HealthInformationHiuOnRequestPost(Async)");
        }

        return v05HealthInformationHiuOnRequestPostCall(authorization, X_HIU_ID, hiUHealthInformationRequestResponse, _callback);

    }

    /**
     * Health information data request
     * Callback API for acknowledgement of Health information request made by HIU. Gateway calls this API when request has validated for the specified  consent id. Either the **hiRequest** or **error** would be specified. If the health info request was valid, then the ***hiRequest.transactionId*** specifies the transaction context against which HIP would send over the data.  Possible cases of errors are   1. **Invalid consent artefact id**   2. **Consent has expired**   3. **Date ranges are invalid** 
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended. (required)
     * @param hiUHealthInformationRequestResponse  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Bad request  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Token is invalid or Link has expired  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public void v05HealthInformationHiuOnRequestPost(String authorization, String X_HIU_ID, HIUHealthInformationRequestResponse hiUHealthInformationRequestResponse) throws ApiException {
        v05HealthInformationHiuOnRequestPostWithHttpInfo(authorization, X_HIU_ID, hiUHealthInformationRequestResponse);
    }

    /**
     * Health information data request
     * Callback API for acknowledgement of Health information request made by HIU. Gateway calls this API when request has validated for the specified  consent id. Either the **hiRequest** or **error** would be specified. If the health info request was valid, then the ***hiRequest.transactionId*** specifies the transaction context against which HIP would send over the data.  Possible cases of errors are   1. **Invalid consent artefact id**   2. **Consent has expired**   3. **Date ranges are invalid** 
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended. (required)
     * @param hiUHealthInformationRequestResponse  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Bad request  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Token is invalid or Link has expired  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v05HealthInformationHiuOnRequestPostWithHttpInfo(String authorization, String X_HIU_ID, HIUHealthInformationRequestResponse hiUHealthInformationRequestResponse) throws ApiException {
        okhttp3.Call localVarCall = v05HealthInformationHiuOnRequestPostValidateBeforeCall(authorization, X_HIU_ID, hiUHealthInformationRequestResponse, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Health information data request (asynchronously)
     * Callback API for acknowledgement of Health information request made by HIU. Gateway calls this API when request has validated for the specified  consent id. Either the **hiRequest** or **error** would be specified. If the health info request was valid, then the ***hiRequest.transactionId*** specifies the transaction context against which HIP would send over the data.  Possible cases of errors are   1. **Invalid consent artefact id**   2. **Consent has expired**   3. **Date ranges are invalid** 
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended. (required)
     * @param hiUHealthInformationRequestResponse  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Bad request  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Token is invalid or Link has expired  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05HealthInformationHiuOnRequestPostAsync(String authorization, String X_HIU_ID, HIUHealthInformationRequestResponse hiUHealthInformationRequestResponse, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v05HealthInformationHiuOnRequestPostValidateBeforeCall(authorization, X_HIU_ID, hiUHealthInformationRequestResponse, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v05HealthInformationTransferPost
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param dataNotification  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Data accepted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Invalid/Expired/Empty token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream services are down  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05HealthInformationTransferPostCall(String authorization, DataNotification dataNotification, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://dev.ndhm.gov.in/hiu" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dataNotification;

        // create path and map variables
        String localVarPath = "/v0.5/health-information/transfer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v05HealthInformationTransferPostValidateBeforeCall(String authorization, DataNotification dataNotification, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v05HealthInformationTransferPost(Async)");
        }

        // verify the required parameter 'dataNotification' is set
        if (dataNotification == null) {
            throw new ApiException("Missing the required parameter 'dataNotification' when calling v05HealthInformationTransferPost(Async)");
        }

        return v05HealthInformationTransferPostCall(authorization, dataNotification, _callback);

    }

    /**
     * health information transfer API
     * **NOTE**: This API is actually the callback URL that is passed as **dataPushUrl** in the data request API - /v0.5/health-information/hip/request. This API is directly called by HIP Data Bridge and is not mediated via CM, and hence not routed through the Gateway.    1. This API should be implemented at HIU side. It maybe implemented by the Data Bridge representing the HIU.    2. Entry elements maybe ***content*** or ***link***, although for version 1, entry ***content*** is preferred.    3. Entry ***content*** (or even link reference content) must be encrypted by means of Elliptic-curve Diffie–Hellman Key Exchange, utilizing the HIU keymaterials that are passed through the data request API - /v0.5/health-information/hip/request.    4. Media contains the mimetype of content, and for v1, it is \&quot;application/fhir+json\&quot;   5. checksum is Md5 checksum of the data conent, before encryption   6. Please refer to the NDHM Sandbox documentation for the format of FHIR bundle that is passed through content  
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param dataNotification  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Data accepted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Invalid/Expired/Empty token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream services are down  </td><td>  -  </td></tr>
     </table>
     */
    public void v05HealthInformationTransferPost(String authorization, DataNotification dataNotification) throws ApiException {
        v05HealthInformationTransferPostWithHttpInfo(authorization, dataNotification);
    }

    /**
     * health information transfer API
     * **NOTE**: This API is actually the callback URL that is passed as **dataPushUrl** in the data request API - /v0.5/health-information/hip/request. This API is directly called by HIP Data Bridge and is not mediated via CM, and hence not routed through the Gateway.    1. This API should be implemented at HIU side. It maybe implemented by the Data Bridge representing the HIU.    2. Entry elements maybe ***content*** or ***link***, although for version 1, entry ***content*** is preferred.    3. Entry ***content*** (or even link reference content) must be encrypted by means of Elliptic-curve Diffie–Hellman Key Exchange, utilizing the HIU keymaterials that are passed through the data request API - /v0.5/health-information/hip/request.    4. Media contains the mimetype of content, and for v1, it is \&quot;application/fhir+json\&quot;   5. checksum is Md5 checksum of the data conent, before encryption   6. Please refer to the NDHM Sandbox documentation for the format of FHIR bundle that is passed through content  
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param dataNotification  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Data accepted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Invalid/Expired/Empty token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream services are down  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v05HealthInformationTransferPostWithHttpInfo(String authorization, DataNotification dataNotification) throws ApiException {
        okhttp3.Call localVarCall = v05HealthInformationTransferPostValidateBeforeCall(authorization, dataNotification, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * health information transfer API (asynchronously)
     * **NOTE**: This API is actually the callback URL that is passed as **dataPushUrl** in the data request API - /v0.5/health-information/hip/request. This API is directly called by HIP Data Bridge and is not mediated via CM, and hence not routed through the Gateway.    1. This API should be implemented at HIU side. It maybe implemented by the Data Bridge representing the HIU.    2. Entry elements maybe ***content*** or ***link***, although for version 1, entry ***content*** is preferred.    3. Entry ***content*** (or even link reference content) must be encrypted by means of Elliptic-curve Diffie–Hellman Key Exchange, utilizing the HIU keymaterials that are passed through the data request API - /v0.5/health-information/hip/request.    4. Media contains the mimetype of content, and for v1, it is \&quot;application/fhir+json\&quot;   5. checksum is Md5 checksum of the data conent, before encryption   6. Please refer to the NDHM Sandbox documentation for the format of FHIR bundle that is passed through content  
     * @param authorization Access token which was issued after successful login with gateway auth server, which will be sent by gateway to authenticate itself with API bridge. (required)
     * @param dataNotification  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Data accepted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Invalid/Expired/Empty token.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream services are down  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v05HealthInformationTransferPostAsync(String authorization, DataNotification dataNotification, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v05HealthInformationTransferPostValidateBeforeCall(authorization, dataNotification, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
