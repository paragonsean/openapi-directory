/*
 * Health Repository Provider Specifications for HIU
 * The following are the specifications for the APIs to be implemented at the Health Repository end if an entity is only serving the role of a HIU. The specs are essentially duplicates from the Gateway and Bridge, but put together so as to make it clear to *HIUs* which set of APIs they should implement to participate in the network.     1. The APIs are organized by the flows - **identification**, **consent flow**, **data flow** and **monitoring**. They represent the APIs that are expected to be available at the HIU end by the Gateway.    2. For majority of the APIs, if Gateway has initiated a call, there are corresponding callback APIs on the Gateway. e.g for **_/consents/hiu/notify** API on HIU end, its expected that a corresponding callback API **_/consents/hiu/on-notify** on Gateway is called. Such APIs are organized under the **Gateway** label.    3. Gateway relevant APIs for HIUs are grouped under **Gateway** label. These include the APIs that HIPs are required to call on the Gateway. For example, to request a CM for consent, HIU would call **_/consent-requests/init** API on gateway.    4. **NOTE**, in some of the API documentations below, **X-HIP-ID** is mentioned in header (for example in /auth/on-init). These are the cases, when a particular API is applicable for both HIU and HIP (e.g an entity is playing the role of HRP representing both HIU and HIP). If you are only playing the role of HIP, then only X-HIU-ID header will be sent  
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ConsentArtefactReference;
import org.openapitools.client.model.ConsentStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * HIUConsentNotificationEventNotification
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:36.866529-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HIUConsentNotificationEventNotification {
  public static final String SERIALIZED_NAME_CONSENT_ARTEFACTS = "consentArtefacts";
  @SerializedName(SERIALIZED_NAME_CONSENT_ARTEFACTS)
  private List<ConsentArtefactReference> consentArtefacts = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONSENT_REQUEST_ID = "consentRequestId";
  @SerializedName(SERIALIZED_NAME_CONSENT_REQUEST_ID)
  private String consentRequestId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ConsentStatus status;

  public HIUConsentNotificationEventNotification() {
  }

  public HIUConsentNotificationEventNotification consentArtefacts(List<ConsentArtefactReference> consentArtefacts) {
    this.consentArtefacts = consentArtefacts;
    return this;
  }

  public HIUConsentNotificationEventNotification addConsentArtefactsItem(ConsentArtefactReference consentArtefactsItem) {
    if (this.consentArtefacts == null) {
      this.consentArtefacts = new ArrayList<>();
    }
    this.consentArtefacts.add(consentArtefactsItem);
    return this;
  }

  /**
   * if the status is GRANTED or REVOKED, then the consentArtefact references (Ids) must be specified.
   * @return consentArtefacts
   */
  @javax.annotation.Nullable
  public List<ConsentArtefactReference> getConsentArtefacts() {
    return consentArtefacts;
  }

  public void setConsentArtefacts(List<ConsentArtefactReference> consentArtefacts) {
    this.consentArtefacts = consentArtefacts;
  }


  public HIUConsentNotificationEventNotification consentRequestId(String consentRequestId) {
    this.consentRequestId = consentRequestId;
    return this;
  }

  /**
   * Get consentRequestId
   * @return consentRequestId
   */
  @javax.annotation.Nonnull
  public String getConsentRequestId() {
    return consentRequestId;
  }

  public void setConsentRequestId(String consentRequestId) {
    this.consentRequestId = consentRequestId;
  }


  public HIUConsentNotificationEventNotification status(ConsentStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public ConsentStatus getStatus() {
    return status;
  }

  public void setStatus(ConsentStatus status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HIUConsentNotificationEventNotification hiUConsentNotificationEventNotification = (HIUConsentNotificationEventNotification) o;
    return Objects.equals(this.consentArtefacts, hiUConsentNotificationEventNotification.consentArtefacts) &&
        Objects.equals(this.consentRequestId, hiUConsentNotificationEventNotification.consentRequestId) &&
        Objects.equals(this.status, hiUConsentNotificationEventNotification.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(consentArtefacts, consentRequestId, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HIUConsentNotificationEventNotification {\n");
    sb.append("    consentArtefacts: ").append(toIndentedString(consentArtefacts)).append("\n");
    sb.append("    consentRequestId: ").append(toIndentedString(consentRequestId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("consentArtefacts");
    openapiFields.add("consentRequestId");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("consentRequestId");
    openapiRequiredFields.add("status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HIUConsentNotificationEventNotification
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HIUConsentNotificationEventNotification.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HIUConsentNotificationEventNotification is not found in the empty JSON string", HIUConsentNotificationEventNotification.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HIUConsentNotificationEventNotification.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HIUConsentNotificationEventNotification` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : HIUConsentNotificationEventNotification.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("consentArtefacts") != null && !jsonObj.get("consentArtefacts").isJsonNull()) {
        JsonArray jsonArrayconsentArtefacts = jsonObj.getAsJsonArray("consentArtefacts");
        if (jsonArrayconsentArtefacts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("consentArtefacts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `consentArtefacts` to be an array in the JSON string but got `%s`", jsonObj.get("consentArtefacts").toString()));
          }

          // validate the optional field `consentArtefacts` (array)
          for (int i = 0; i < jsonArrayconsentArtefacts.size(); i++) {
            ConsentArtefactReference.validateJsonElement(jsonArrayconsentArtefacts.get(i));
          };
        }
      }
      if (!jsonObj.get("consentRequestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `consentRequestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("consentRequestId").toString()));
      }
      // validate the required field `status`
      ConsentStatus.validateJsonElement(jsonObj.get("status"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HIUConsentNotificationEventNotification.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HIUConsentNotificationEventNotification' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HIUConsentNotificationEventNotification> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HIUConsentNotificationEventNotification.class));

       return (TypeAdapter<T>) new TypeAdapter<HIUConsentNotificationEventNotification>() {
           @Override
           public void write(JsonWriter out, HIUConsentNotificationEventNotification value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HIUConsentNotificationEventNotification read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HIUConsentNotificationEventNotification given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HIUConsentNotificationEventNotification
   * @throws IOException if the JSON string is invalid with respect to HIUConsentNotificationEventNotification
   */
  public static HIUConsentNotificationEventNotification fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HIUConsentNotificationEventNotification.class);
  }

  /**
   * Convert an instance of HIUConsentNotificationEventNotification to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

