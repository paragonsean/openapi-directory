# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.screenshot_payload_configs import ScreenshotPayloadConfigs
from openapi_server import util


class ScreenshotPayload(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, callback_url: str=None, configs: ScreenshotPayloadConfigs=None, defer_time: float=None, email: bool=None, mac_res: str=None, password: str=None, tunnel: bool=None, tunnel_identifier: str=None, url: str=None, username: str=None, win_res: str=None):
        """ScreenshotPayload - a model defined in OpenAPI

        :param callback_url: The callback_url of this ScreenshotPayload.
        :param configs: The configs of this ScreenshotPayload.
        :param defer_time: The defer_time of this ScreenshotPayload.
        :param email: The email of this ScreenshotPayload.
        :param mac_res: The mac_res of this ScreenshotPayload.
        :param password: The password of this ScreenshotPayload.
        :param tunnel: The tunnel of this ScreenshotPayload.
        :param tunnel_identifier: The tunnel_identifier of this ScreenshotPayload.
        :param url: The url of this ScreenshotPayload.
        :param username: The username of this ScreenshotPayload.
        :param win_res: The win_res of this ScreenshotPayload.
        """
        self.openapi_types = {
            'callback_url': str,
            'configs': ScreenshotPayloadConfigs,
            'defer_time': float,
            'email': bool,
            'mac_res': str,
            'password': str,
            'tunnel': bool,
            'tunnel_identifier': str,
            'url': str,
            'username': str,
            'win_res': str
        }

        self.attribute_map = {
            'callback_url': 'callback_url',
            'configs': 'configs',
            'defer_time': 'defer_time',
            'email': 'email',
            'mac_res': 'mac_res',
            'password': 'password',
            'tunnel': 'tunnel',
            'tunnel_identifier': 'tunnel_identifier',
            'url': 'url',
            'username': 'username',
            'win_res': 'win_res'
        }

        self._callback_url = callback_url
        self._configs = configs
        self._defer_time = defer_time
        self._email = email
        self._mac_res = mac_res
        self._password = password
        self._tunnel = tunnel
        self._tunnel_identifier = tunnel_identifier
        self._url = url
        self._username = username
        self._win_res = win_res

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScreenshotPayload':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The screenshot-payload of this ScreenshotPayload.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def callback_url(self):
        """Gets the callback_url of this ScreenshotPayload.


        :return: The callback_url of this ScreenshotPayload.
        :rtype: str
        """
        return self._callback_url

    @callback_url.setter
    def callback_url(self, callback_url):
        """Sets the callback_url of this ScreenshotPayload.


        :param callback_url: The callback_url of this ScreenshotPayload.
        :type callback_url: str
        """

        self._callback_url = callback_url

    @property
    def configs(self):
        """Gets the configs of this ScreenshotPayload.


        :return: The configs of this ScreenshotPayload.
        :rtype: ScreenshotPayloadConfigs
        """
        return self._configs

    @configs.setter
    def configs(self, configs):
        """Sets the configs of this ScreenshotPayload.


        :param configs: The configs of this ScreenshotPayload.
        :type configs: ScreenshotPayloadConfigs
        """

        self._configs = configs

    @property
    def defer_time(self):
        """Gets the defer_time of this ScreenshotPayload.


        :return: The defer_time of this ScreenshotPayload.
        :rtype: float
        """
        return self._defer_time

    @defer_time.setter
    def defer_time(self, defer_time):
        """Sets the defer_time of this ScreenshotPayload.


        :param defer_time: The defer_time of this ScreenshotPayload.
        :type defer_time: float
        """

        self._defer_time = defer_time

    @property
    def email(self):
        """Gets the email of this ScreenshotPayload.


        :return: The email of this ScreenshotPayload.
        :rtype: bool
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ScreenshotPayload.


        :param email: The email of this ScreenshotPayload.
        :type email: bool
        """

        self._email = email

    @property
    def mac_res(self):
        """Gets the mac_res of this ScreenshotPayload.


        :return: The mac_res of this ScreenshotPayload.
        :rtype: str
        """
        return self._mac_res

    @mac_res.setter
    def mac_res(self, mac_res):
        """Sets the mac_res of this ScreenshotPayload.


        :param mac_res: The mac_res of this ScreenshotPayload.
        :type mac_res: str
        """

        self._mac_res = mac_res

    @property
    def password(self):
        """Gets the password of this ScreenshotPayload.


        :return: The password of this ScreenshotPayload.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ScreenshotPayload.


        :param password: The password of this ScreenshotPayload.
        :type password: str
        """

        self._password = password

    @property
    def tunnel(self):
        """Gets the tunnel of this ScreenshotPayload.


        :return: The tunnel of this ScreenshotPayload.
        :rtype: bool
        """
        return self._tunnel

    @tunnel.setter
    def tunnel(self, tunnel):
        """Sets the tunnel of this ScreenshotPayload.


        :param tunnel: The tunnel of this ScreenshotPayload.
        :type tunnel: bool
        """

        self._tunnel = tunnel

    @property
    def tunnel_identifier(self):
        """Gets the tunnel_identifier of this ScreenshotPayload.


        :return: The tunnel_identifier of this ScreenshotPayload.
        :rtype: str
        """
        return self._tunnel_identifier

    @tunnel_identifier.setter
    def tunnel_identifier(self, tunnel_identifier):
        """Sets the tunnel_identifier of this ScreenshotPayload.


        :param tunnel_identifier: The tunnel_identifier of this ScreenshotPayload.
        :type tunnel_identifier: str
        """

        self._tunnel_identifier = tunnel_identifier

    @property
    def url(self):
        """Gets the url of this ScreenshotPayload.


        :return: The url of this ScreenshotPayload.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ScreenshotPayload.


        :param url: The url of this ScreenshotPayload.
        :type url: str
        """

        self._url = url

    @property
    def username(self):
        """Gets the username of this ScreenshotPayload.


        :return: The username of this ScreenshotPayload.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ScreenshotPayload.


        :param username: The username of this ScreenshotPayload.
        :type username: str
        """

        self._username = username

    @property
    def win_res(self):
        """Gets the win_res of this ScreenshotPayload.


        :return: The win_res of this ScreenshotPayload.
        :rtype: str
        """
        return self._win_res

    @win_res.setter
    def win_res(self, win_res):
        """Sets the win_res of this ScreenshotPayload.


        :param win_res: The win_res of this ScreenshotPayload.
        :type win_res: str
        """

        self._win_res = win_res
