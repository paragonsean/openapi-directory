# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Browsers(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, chrome: List[str]=None, firefox: List[str]=None, opera: List[str]=None):
        """Browsers - a model defined in OpenAPI

        :param chrome: The chrome of this Browsers.
        :param firefox: The firefox of this Browsers.
        :param opera: The opera of this Browsers.
        """
        self.openapi_types = {
            'chrome': List[str],
            'firefox': List[str],
            'opera': List[str]
        }

        self.attribute_map = {
            'chrome': 'chrome',
            'firefox': 'firefox',
            'opera': 'opera'
        }

        self._chrome = chrome
        self._firefox = firefox
        self._opera = opera

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Browsers':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The browsers of this Browsers.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def chrome(self):
        """Gets the chrome of this Browsers.


        :return: The chrome of this Browsers.
        :rtype: List[str]
        """
        return self._chrome

    @chrome.setter
    def chrome(self, chrome):
        """Sets the chrome of this Browsers.


        :param chrome: The chrome of this Browsers.
        :type chrome: List[str]
        """

        self._chrome = chrome

    @property
    def firefox(self):
        """Gets the firefox of this Browsers.


        :return: The firefox of this Browsers.
        :rtype: List[str]
        """
        return self._firefox

    @firefox.setter
    def firefox(self, firefox):
        """Sets the firefox of this Browsers.


        :param firefox: The firefox of this Browsers.
        :type firefox: List[str]
        """

        self._firefox = firefox

    @property
    def opera(self):
        """Gets the opera of this Browsers.


        :return: The opera of this Browsers.
        :rtype: List[str]
        """
        return self._opera

    @opera.setter
    def opera(self, opera):
        """Sets the opera of this Browsers.


        :param opera: The opera of this Browsers.
        :type opera: List[str]
        """

        self._opera = opera
