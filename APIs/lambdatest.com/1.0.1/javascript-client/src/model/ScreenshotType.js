/**
 * LambdaTest Screenshots API Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ScreenshotType model module.
 * @module model/ScreenshotType
 * @version 1.0.1
 */
class ScreenshotType {
    /**
     * Constructs a new <code>ScreenshotType</code>.
     * @alias module:model/ScreenshotType
     */
    constructor() { 
        
        ScreenshotType.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ScreenshotType</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ScreenshotType} obj Optional instance to populate.
     * @return {module:model/ScreenshotType} The populated <code>ScreenshotType</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ScreenshotType();

            if (data.hasOwnProperty('activity_id')) {
                obj['activity_id'] = ApiClient.convertToType(data['activity_id'], 'String');
            }
            if (data.hasOwnProperty('browser')) {
                obj['browser'] = ApiClient.convertToType(data['browser'], 'String');
            }
            if (data.hasOwnProperty('browser_version')) {
                obj['browser_version'] = ApiClient.convertToType(data['browser_version'], 'String');
            }
            if (data.hasOwnProperty('os')) {
                obj['os'] = ApiClient.convertToType(data['os'], 'String');
            }
            if (data.hasOwnProperty('resolution')) {
                obj['resolution'] = ApiClient.convertToType(data['resolution'], 'String');
            }
            if (data.hasOwnProperty('screenshot_url')) {
                obj['screenshot_url'] = ApiClient.convertToType(data['screenshot_url'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('thumbnail_url')) {
                obj['thumbnail_url'] = ApiClient.convertToType(data['thumbnail_url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ScreenshotType</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ScreenshotType</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['activity_id'] && !(typeof data['activity_id'] === 'string' || data['activity_id'] instanceof String)) {
            throw new Error("Expected the field `activity_id` to be a primitive type in the JSON string but got " + data['activity_id']);
        }
        // ensure the json data is a string
        if (data['browser'] && !(typeof data['browser'] === 'string' || data['browser'] instanceof String)) {
            throw new Error("Expected the field `browser` to be a primitive type in the JSON string but got " + data['browser']);
        }
        // ensure the json data is a string
        if (data['browser_version'] && !(typeof data['browser_version'] === 'string' || data['browser_version'] instanceof String)) {
            throw new Error("Expected the field `browser_version` to be a primitive type in the JSON string but got " + data['browser_version']);
        }
        // ensure the json data is a string
        if (data['os'] && !(typeof data['os'] === 'string' || data['os'] instanceof String)) {
            throw new Error("Expected the field `os` to be a primitive type in the JSON string but got " + data['os']);
        }
        // ensure the json data is a string
        if (data['resolution'] && !(typeof data['resolution'] === 'string' || data['resolution'] instanceof String)) {
            throw new Error("Expected the field `resolution` to be a primitive type in the JSON string but got " + data['resolution']);
        }
        // ensure the json data is a string
        if (data['screenshot_url'] && !(typeof data['screenshot_url'] === 'string' || data['screenshot_url'] instanceof String)) {
            throw new Error("Expected the field `screenshot_url` to be a primitive type in the JSON string but got " + data['screenshot_url']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['thumbnail_url'] && !(typeof data['thumbnail_url'] === 'string' || data['thumbnail_url'] instanceof String)) {
            throw new Error("Expected the field `thumbnail_url` to be a primitive type in the JSON string but got " + data['thumbnail_url']);
        }

        return true;
    }


}



/**
 * @member {String} activity_id
 */
ScreenshotType.prototype['activity_id'] = undefined;

/**
 * @member {String} browser
 */
ScreenshotType.prototype['browser'] = undefined;

/**
 * @member {String} browser_version
 */
ScreenshotType.prototype['browser_version'] = undefined;

/**
 * @member {String} os
 */
ScreenshotType.prototype['os'] = undefined;

/**
 * @member {String} resolution
 */
ScreenshotType.prototype['resolution'] = undefined;

/**
 * @member {String} screenshot_url
 */
ScreenshotType.prototype['screenshot_url'] = undefined;

/**
 * @member {String} status
 */
ScreenshotType.prototype['status'] = undefined;

/**
 * @member {String} thumbnail_url
 */
ScreenshotType.prototype['thumbnail_url'] = undefined;






export default ScreenshotType;

