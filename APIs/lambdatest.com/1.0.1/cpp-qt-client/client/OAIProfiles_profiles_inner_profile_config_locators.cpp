/**
 * LambdaTest Screenshots API Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProfiles_profiles_inner_profile_config_locators.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProfiles_profiles_inner_profile_config_locators::OAIProfiles_profiles_inner_profile_config_locators(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProfiles_profiles_inner_profile_config_locators::OAIProfiles_profiles_inner_profile_config_locators() {
    this->initializeModel();
}

OAIProfiles_profiles_inner_profile_config_locators::~OAIProfiles_profiles_inner_profile_config_locators() {}

void OAIProfiles_profiles_inner_profile_config_locators::initializeModel() {

    m_password_isSet = false;
    m_password_isValid = false;

    m_submit_isSet = false;
    m_submit_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIProfiles_profiles_inner_profile_config_locators::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProfiles_profiles_inner_profile_config_locators::fromJsonObject(QJsonObject json) {

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_submit_isValid = ::OpenAPI::fromJsonValue(m_submit, json[QString("submit")]);
    m_submit_isSet = !json[QString("submit")].isNull() && m_submit_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIProfiles_profiles_inner_profile_config_locators::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProfiles_profiles_inner_profile_config_locators::asJsonObject() const {
    QJsonObject obj;
    if (m_password.isSet()) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_submit.isSet()) {
        obj.insert(QString("submit"), ::OpenAPI::toJsonValue(m_submit));
    }
    if (m_username.isSet()) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

OAIProfiles_profiles_inner_profile_config_locators_password OAIProfiles_profiles_inner_profile_config_locators::getPassword() const {
    return m_password;
}
void OAIProfiles_profiles_inner_profile_config_locators::setPassword(const OAIProfiles_profiles_inner_profile_config_locators_password &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIProfiles_profiles_inner_profile_config_locators::is_password_Set() const{
    return m_password_isSet;
}

bool OAIProfiles_profiles_inner_profile_config_locators::is_password_Valid() const{
    return m_password_isValid;
}

OAIProfiles_profiles_inner_profile_config_locators_submit OAIProfiles_profiles_inner_profile_config_locators::getSubmit() const {
    return m_submit;
}
void OAIProfiles_profiles_inner_profile_config_locators::setSubmit(const OAIProfiles_profiles_inner_profile_config_locators_submit &submit) {
    m_submit = submit;
    m_submit_isSet = true;
}

bool OAIProfiles_profiles_inner_profile_config_locators::is_submit_Set() const{
    return m_submit_isSet;
}

bool OAIProfiles_profiles_inner_profile_config_locators::is_submit_Valid() const{
    return m_submit_isValid;
}

OAIProfiles_profiles_inner_profile_config_locators_username OAIProfiles_profiles_inner_profile_config_locators::getUsername() const {
    return m_username;
}
void OAIProfiles_profiles_inner_profile_config_locators::setUsername(const OAIProfiles_profiles_inner_profile_config_locators_username &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIProfiles_profiles_inner_profile_config_locators::is_username_Set() const{
    return m_username_isSet;
}

bool OAIProfiles_profiles_inner_profile_config_locators::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIProfiles_profiles_inner_profile_config_locators::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_password.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_submit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_username.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProfiles_profiles_inner_profile_config_locators::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
