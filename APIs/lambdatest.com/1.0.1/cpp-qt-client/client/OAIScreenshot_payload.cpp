/**
 * LambdaTest Screenshots API Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScreenshot_payload.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScreenshot_payload::OAIScreenshot_payload(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScreenshot_payload::OAIScreenshot_payload() {
    this->initializeModel();
}

OAIScreenshot_payload::~OAIScreenshot_payload() {}

void OAIScreenshot_payload::initializeModel() {

    m_callback_url_isSet = false;
    m_callback_url_isValid = false;

    m_configs_isSet = false;
    m_configs_isValid = false;

    m_defer_time_isSet = false;
    m_defer_time_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_mac_res_isSet = false;
    m_mac_res_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_tunnel_isSet = false;
    m_tunnel_isValid = false;

    m_tunnel_identifier_isSet = false;
    m_tunnel_identifier_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;

    m_win_res_isSet = false;
    m_win_res_isValid = false;
}

void OAIScreenshot_payload::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScreenshot_payload::fromJsonObject(QJsonObject json) {

    m_callback_url_isValid = ::OpenAPI::fromJsonValue(m_callback_url, json[QString("callback_url")]);
    m_callback_url_isSet = !json[QString("callback_url")].isNull() && m_callback_url_isValid;

    m_configs_isValid = ::OpenAPI::fromJsonValue(m_configs, json[QString("configs")]);
    m_configs_isSet = !json[QString("configs")].isNull() && m_configs_isValid;

    m_defer_time_isValid = ::OpenAPI::fromJsonValue(m_defer_time, json[QString("defer_time")]);
    m_defer_time_isSet = !json[QString("defer_time")].isNull() && m_defer_time_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_mac_res_isValid = ::OpenAPI::fromJsonValue(m_mac_res, json[QString("mac_res")]);
    m_mac_res_isSet = !json[QString("mac_res")].isNull() && m_mac_res_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_tunnel_isValid = ::OpenAPI::fromJsonValue(m_tunnel, json[QString("tunnel")]);
    m_tunnel_isSet = !json[QString("tunnel")].isNull() && m_tunnel_isValid;

    m_tunnel_identifier_isValid = ::OpenAPI::fromJsonValue(m_tunnel_identifier, json[QString("tunnel_identifier")]);
    m_tunnel_identifier_isSet = !json[QString("tunnel_identifier")].isNull() && m_tunnel_identifier_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;

    m_win_res_isValid = ::OpenAPI::fromJsonValue(m_win_res, json[QString("win_res")]);
    m_win_res_isSet = !json[QString("win_res")].isNull() && m_win_res_isValid;
}

QString OAIScreenshot_payload::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScreenshot_payload::asJsonObject() const {
    QJsonObject obj;
    if (m_callback_url_isSet) {
        obj.insert(QString("callback_url"), ::OpenAPI::toJsonValue(m_callback_url));
    }
    if (m_configs.isSet()) {
        obj.insert(QString("configs"), ::OpenAPI::toJsonValue(m_configs));
    }
    if (m_defer_time_isSet) {
        obj.insert(QString("defer_time"), ::OpenAPI::toJsonValue(m_defer_time));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_mac_res_isSet) {
        obj.insert(QString("mac_res"), ::OpenAPI::toJsonValue(m_mac_res));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_tunnel_isSet) {
        obj.insert(QString("tunnel"), ::OpenAPI::toJsonValue(m_tunnel));
    }
    if (m_tunnel_identifier_isSet) {
        obj.insert(QString("tunnel_identifier"), ::OpenAPI::toJsonValue(m_tunnel_identifier));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    if (m_win_res_isSet) {
        obj.insert(QString("win_res"), ::OpenAPI::toJsonValue(m_win_res));
    }
    return obj;
}

QString OAIScreenshot_payload::getCallbackUrl() const {
    return m_callback_url;
}
void OAIScreenshot_payload::setCallbackUrl(const QString &callback_url) {
    m_callback_url = callback_url;
    m_callback_url_isSet = true;
}

bool OAIScreenshot_payload::is_callback_url_Set() const{
    return m_callback_url_isSet;
}

bool OAIScreenshot_payload::is_callback_url_Valid() const{
    return m_callback_url_isValid;
}

OAIScreenshot_payload_configs OAIScreenshot_payload::getConfigs() const {
    return m_configs;
}
void OAIScreenshot_payload::setConfigs(const OAIScreenshot_payload_configs &configs) {
    m_configs = configs;
    m_configs_isSet = true;
}

bool OAIScreenshot_payload::is_configs_Set() const{
    return m_configs_isSet;
}

bool OAIScreenshot_payload::is_configs_Valid() const{
    return m_configs_isValid;
}

double OAIScreenshot_payload::getDeferTime() const {
    return m_defer_time;
}
void OAIScreenshot_payload::setDeferTime(const double &defer_time) {
    m_defer_time = defer_time;
    m_defer_time_isSet = true;
}

bool OAIScreenshot_payload::is_defer_time_Set() const{
    return m_defer_time_isSet;
}

bool OAIScreenshot_payload::is_defer_time_Valid() const{
    return m_defer_time_isValid;
}

bool OAIScreenshot_payload::isEmail() const {
    return m_email;
}
void OAIScreenshot_payload::setEmail(const bool &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIScreenshot_payload::is_email_Set() const{
    return m_email_isSet;
}

bool OAIScreenshot_payload::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIScreenshot_payload::getMacRes() const {
    return m_mac_res;
}
void OAIScreenshot_payload::setMacRes(const QString &mac_res) {
    m_mac_res = mac_res;
    m_mac_res_isSet = true;
}

bool OAIScreenshot_payload::is_mac_res_Set() const{
    return m_mac_res_isSet;
}

bool OAIScreenshot_payload::is_mac_res_Valid() const{
    return m_mac_res_isValid;
}

QString OAIScreenshot_payload::getPassword() const {
    return m_password;
}
void OAIScreenshot_payload::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIScreenshot_payload::is_password_Set() const{
    return m_password_isSet;
}

bool OAIScreenshot_payload::is_password_Valid() const{
    return m_password_isValid;
}

bool OAIScreenshot_payload::isTunnel() const {
    return m_tunnel;
}
void OAIScreenshot_payload::setTunnel(const bool &tunnel) {
    m_tunnel = tunnel;
    m_tunnel_isSet = true;
}

bool OAIScreenshot_payload::is_tunnel_Set() const{
    return m_tunnel_isSet;
}

bool OAIScreenshot_payload::is_tunnel_Valid() const{
    return m_tunnel_isValid;
}

QString OAIScreenshot_payload::getTunnelIdentifier() const {
    return m_tunnel_identifier;
}
void OAIScreenshot_payload::setTunnelIdentifier(const QString &tunnel_identifier) {
    m_tunnel_identifier = tunnel_identifier;
    m_tunnel_identifier_isSet = true;
}

bool OAIScreenshot_payload::is_tunnel_identifier_Set() const{
    return m_tunnel_identifier_isSet;
}

bool OAIScreenshot_payload::is_tunnel_identifier_Valid() const{
    return m_tunnel_identifier_isValid;
}

QString OAIScreenshot_payload::getUrl() const {
    return m_url;
}
void OAIScreenshot_payload::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIScreenshot_payload::is_url_Set() const{
    return m_url_isSet;
}

bool OAIScreenshot_payload::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIScreenshot_payload::getUsername() const {
    return m_username;
}
void OAIScreenshot_payload::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIScreenshot_payload::is_username_Set() const{
    return m_username_isSet;
}

bool OAIScreenshot_payload::is_username_Valid() const{
    return m_username_isValid;
}

QString OAIScreenshot_payload::getWinRes() const {
    return m_win_res;
}
void OAIScreenshot_payload::setWinRes(const QString &win_res) {
    m_win_res = win_res;
    m_win_res_isSet = true;
}

bool OAIScreenshot_payload::is_win_res_Set() const{
    return m_win_res_isSet;
}

bool OAIScreenshot_payload::is_win_res_Valid() const{
    return m_win_res_isValid;
}

bool OAIScreenshot_payload::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_callback_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_configs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_defer_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mac_res_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tunnel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tunnel_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_win_res_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScreenshot_payload::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
