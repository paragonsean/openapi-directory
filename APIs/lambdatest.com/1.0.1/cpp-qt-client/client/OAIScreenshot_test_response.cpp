/**
 * LambdaTest Screenshots API Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScreenshot_test_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScreenshot_test_response::OAIScreenshot_test_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScreenshot_test_response::OAIScreenshot_test_response() {
    this->initializeModel();
}

OAIScreenshot_test_response::~OAIScreenshot_test_response() {}

void OAIScreenshot_test_response::initializeModel() {

    m_callback_url_isSet = false;
    m_callback_url_isValid = false;

    m_defer_time_isSet = false;
    m_defer_time_isValid = false;

    m_screenshots_isSet = false;
    m_screenshots_isValid = false;

    m_test_id_isSet = false;
    m_test_id_isValid = false;

    m_test_status_isSet = false;
    m_test_status_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIScreenshot_test_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScreenshot_test_response::fromJsonObject(QJsonObject json) {

    m_callback_url_isValid = ::OpenAPI::fromJsonValue(m_callback_url, json[QString("callback_url")]);
    m_callback_url_isSet = !json[QString("callback_url")].isNull() && m_callback_url_isValid;

    m_defer_time_isValid = ::OpenAPI::fromJsonValue(m_defer_time, json[QString("defer_time")]);
    m_defer_time_isSet = !json[QString("defer_time")].isNull() && m_defer_time_isValid;

    m_screenshots_isValid = ::OpenAPI::fromJsonValue(m_screenshots, json[QString("screenshots")]);
    m_screenshots_isSet = !json[QString("screenshots")].isNull() && m_screenshots_isValid;

    m_test_id_isValid = ::OpenAPI::fromJsonValue(m_test_id, json[QString("test_id")]);
    m_test_id_isSet = !json[QString("test_id")].isNull() && m_test_id_isValid;

    m_test_status_isValid = ::OpenAPI::fromJsonValue(m_test_status, json[QString("test_status")]);
    m_test_status_isSet = !json[QString("test_status")].isNull() && m_test_status_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIScreenshot_test_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScreenshot_test_response::asJsonObject() const {
    QJsonObject obj;
    if (m_callback_url_isSet) {
        obj.insert(QString("callback_url"), ::OpenAPI::toJsonValue(m_callback_url));
    }
    if (m_defer_time_isSet) {
        obj.insert(QString("defer_time"), ::OpenAPI::toJsonValue(m_defer_time));
    }
    if (m_screenshots.size() > 0) {
        obj.insert(QString("screenshots"), ::OpenAPI::toJsonValue(m_screenshots));
    }
    if (m_test_id_isSet) {
        obj.insert(QString("test_id"), ::OpenAPI::toJsonValue(m_test_id));
    }
    if (m_test_status_isSet) {
        obj.insert(QString("test_status"), ::OpenAPI::toJsonValue(m_test_status));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIScreenshot_test_response::getCallbackUrl() const {
    return m_callback_url;
}
void OAIScreenshot_test_response::setCallbackUrl(const QString &callback_url) {
    m_callback_url = callback_url;
    m_callback_url_isSet = true;
}

bool OAIScreenshot_test_response::is_callback_url_Set() const{
    return m_callback_url_isSet;
}

bool OAIScreenshot_test_response::is_callback_url_Valid() const{
    return m_callback_url_isValid;
}

double OAIScreenshot_test_response::getDeferTime() const {
    return m_defer_time;
}
void OAIScreenshot_test_response::setDeferTime(const double &defer_time) {
    m_defer_time = defer_time;
    m_defer_time_isSet = true;
}

bool OAIScreenshot_test_response::is_defer_time_Set() const{
    return m_defer_time_isSet;
}

bool OAIScreenshot_test_response::is_defer_time_Valid() const{
    return m_defer_time_isValid;
}

QList<OAIScreenshot_type> OAIScreenshot_test_response::getScreenshots() const {
    return m_screenshots;
}
void OAIScreenshot_test_response::setScreenshots(const QList<OAIScreenshot_type> &screenshots) {
    m_screenshots = screenshots;
    m_screenshots_isSet = true;
}

bool OAIScreenshot_test_response::is_screenshots_Set() const{
    return m_screenshots_isSet;
}

bool OAIScreenshot_test_response::is_screenshots_Valid() const{
    return m_screenshots_isValid;
}

QString OAIScreenshot_test_response::getTestId() const {
    return m_test_id;
}
void OAIScreenshot_test_response::setTestId(const QString &test_id) {
    m_test_id = test_id;
    m_test_id_isSet = true;
}

bool OAIScreenshot_test_response::is_test_id_Set() const{
    return m_test_id_isSet;
}

bool OAIScreenshot_test_response::is_test_id_Valid() const{
    return m_test_id_isValid;
}

QString OAIScreenshot_test_response::getTestStatus() const {
    return m_test_status;
}
void OAIScreenshot_test_response::setTestStatus(const QString &test_status) {
    m_test_status = test_status;
    m_test_status_isSet = true;
}

bool OAIScreenshot_test_response::is_test_status_Set() const{
    return m_test_status_isSet;
}

bool OAIScreenshot_test_response::is_test_status_Valid() const{
    return m_test_status_isValid;
}

QString OAIScreenshot_test_response::getUrl() const {
    return m_url;
}
void OAIScreenshot_test_response::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIScreenshot_test_response::is_url_Set() const{
    return m_url_isSet;
}

bool OAIScreenshot_test_response::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIScreenshot_test_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_callback_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_defer_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_screenshots.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScreenshot_test_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
