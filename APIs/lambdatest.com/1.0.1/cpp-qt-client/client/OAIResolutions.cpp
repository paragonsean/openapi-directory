/**
 * LambdaTest Screenshots API Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResolutions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResolutions::OAIResolutions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResolutions::OAIResolutions() {
    this->initializeModel();
}

OAIResolutions::~OAIResolutions() {}

void OAIResolutions::initializeModel() {

    m_mac_res_isSet = false;
    m_mac_res_isValid = false;

    m_win_res_isSet = false;
    m_win_res_isValid = false;
}

void OAIResolutions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResolutions::fromJsonObject(QJsonObject json) {

    m_mac_res_isValid = ::OpenAPI::fromJsonValue(m_mac_res, json[QString("mac_res")]);
    m_mac_res_isSet = !json[QString("mac_res")].isNull() && m_mac_res_isValid;

    m_win_res_isValid = ::OpenAPI::fromJsonValue(m_win_res, json[QString("win_res")]);
    m_win_res_isSet = !json[QString("win_res")].isNull() && m_win_res_isValid;
}

QString OAIResolutions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResolutions::asJsonObject() const {
    QJsonObject obj;
    if (m_mac_res.size() > 0) {
        obj.insert(QString("mac_res"), ::OpenAPI::toJsonValue(m_mac_res));
    }
    if (m_win_res.size() > 0) {
        obj.insert(QString("win_res"), ::OpenAPI::toJsonValue(m_win_res));
    }
    return obj;
}

QList<QString> OAIResolutions::getMacRes() const {
    return m_mac_res;
}
void OAIResolutions::setMacRes(const QList<QString> &mac_res) {
    m_mac_res = mac_res;
    m_mac_res_isSet = true;
}

bool OAIResolutions::is_mac_res_Set() const{
    return m_mac_res_isSet;
}

bool OAIResolutions::is_mac_res_Valid() const{
    return m_mac_res_isValid;
}

QList<QString> OAIResolutions::getWinRes() const {
    return m_win_res;
}
void OAIResolutions::setWinRes(const QList<QString> &win_res) {
    m_win_res = win_res;
    m_win_res_isSet = true;
}

bool OAIResolutions::is_win_res_Set() const{
    return m_win_res_isSet;
}

bool OAIResolutions::is_win_res_Valid() const{
    return m_win_res_isValid;
}

bool OAIResolutions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mac_res.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_win_res.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResolutions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
