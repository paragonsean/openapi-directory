/**
 * LambdaTest Screenshots API Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScreenshot_type.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScreenshot_type::OAIScreenshot_type(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScreenshot_type::OAIScreenshot_type() {
    this->initializeModel();
}

OAIScreenshot_type::~OAIScreenshot_type() {}

void OAIScreenshot_type::initializeModel() {

    m_activity_id_isSet = false;
    m_activity_id_isValid = false;

    m_browser_isSet = false;
    m_browser_isValid = false;

    m_browser_version_isSet = false;
    m_browser_version_isValid = false;

    m_os_isSet = false;
    m_os_isValid = false;

    m_resolution_isSet = false;
    m_resolution_isValid = false;

    m_screenshot_url_isSet = false;
    m_screenshot_url_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_thumbnail_url_isSet = false;
    m_thumbnail_url_isValid = false;
}

void OAIScreenshot_type::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScreenshot_type::fromJsonObject(QJsonObject json) {

    m_activity_id_isValid = ::OpenAPI::fromJsonValue(m_activity_id, json[QString("activity_id")]);
    m_activity_id_isSet = !json[QString("activity_id")].isNull() && m_activity_id_isValid;

    m_browser_isValid = ::OpenAPI::fromJsonValue(m_browser, json[QString("browser")]);
    m_browser_isSet = !json[QString("browser")].isNull() && m_browser_isValid;

    m_browser_version_isValid = ::OpenAPI::fromJsonValue(m_browser_version, json[QString("browser_version")]);
    m_browser_version_isSet = !json[QString("browser_version")].isNull() && m_browser_version_isValid;

    m_os_isValid = ::OpenAPI::fromJsonValue(m_os, json[QString("os")]);
    m_os_isSet = !json[QString("os")].isNull() && m_os_isValid;

    m_resolution_isValid = ::OpenAPI::fromJsonValue(m_resolution, json[QString("resolution")]);
    m_resolution_isSet = !json[QString("resolution")].isNull() && m_resolution_isValid;

    m_screenshot_url_isValid = ::OpenAPI::fromJsonValue(m_screenshot_url, json[QString("screenshot_url")]);
    m_screenshot_url_isSet = !json[QString("screenshot_url")].isNull() && m_screenshot_url_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_thumbnail_url_isValid = ::OpenAPI::fromJsonValue(m_thumbnail_url, json[QString("thumbnail_url")]);
    m_thumbnail_url_isSet = !json[QString("thumbnail_url")].isNull() && m_thumbnail_url_isValid;
}

QString OAIScreenshot_type::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScreenshot_type::asJsonObject() const {
    QJsonObject obj;
    if (m_activity_id_isSet) {
        obj.insert(QString("activity_id"), ::OpenAPI::toJsonValue(m_activity_id));
    }
    if (m_browser_isSet) {
        obj.insert(QString("browser"), ::OpenAPI::toJsonValue(m_browser));
    }
    if (m_browser_version_isSet) {
        obj.insert(QString("browser_version"), ::OpenAPI::toJsonValue(m_browser_version));
    }
    if (m_os_isSet) {
        obj.insert(QString("os"), ::OpenAPI::toJsonValue(m_os));
    }
    if (m_resolution_isSet) {
        obj.insert(QString("resolution"), ::OpenAPI::toJsonValue(m_resolution));
    }
    if (m_screenshot_url_isSet) {
        obj.insert(QString("screenshot_url"), ::OpenAPI::toJsonValue(m_screenshot_url));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_thumbnail_url_isSet) {
        obj.insert(QString("thumbnail_url"), ::OpenAPI::toJsonValue(m_thumbnail_url));
    }
    return obj;
}

QString OAIScreenshot_type::getActivityId() const {
    return m_activity_id;
}
void OAIScreenshot_type::setActivityId(const QString &activity_id) {
    m_activity_id = activity_id;
    m_activity_id_isSet = true;
}

bool OAIScreenshot_type::is_activity_id_Set() const{
    return m_activity_id_isSet;
}

bool OAIScreenshot_type::is_activity_id_Valid() const{
    return m_activity_id_isValid;
}

QString OAIScreenshot_type::getBrowser() const {
    return m_browser;
}
void OAIScreenshot_type::setBrowser(const QString &browser) {
    m_browser = browser;
    m_browser_isSet = true;
}

bool OAIScreenshot_type::is_browser_Set() const{
    return m_browser_isSet;
}

bool OAIScreenshot_type::is_browser_Valid() const{
    return m_browser_isValid;
}

QString OAIScreenshot_type::getBrowserVersion() const {
    return m_browser_version;
}
void OAIScreenshot_type::setBrowserVersion(const QString &browser_version) {
    m_browser_version = browser_version;
    m_browser_version_isSet = true;
}

bool OAIScreenshot_type::is_browser_version_Set() const{
    return m_browser_version_isSet;
}

bool OAIScreenshot_type::is_browser_version_Valid() const{
    return m_browser_version_isValid;
}

QString OAIScreenshot_type::getOs() const {
    return m_os;
}
void OAIScreenshot_type::setOs(const QString &os) {
    m_os = os;
    m_os_isSet = true;
}

bool OAIScreenshot_type::is_os_Set() const{
    return m_os_isSet;
}

bool OAIScreenshot_type::is_os_Valid() const{
    return m_os_isValid;
}

QString OAIScreenshot_type::getResolution() const {
    return m_resolution;
}
void OAIScreenshot_type::setResolution(const QString &resolution) {
    m_resolution = resolution;
    m_resolution_isSet = true;
}

bool OAIScreenshot_type::is_resolution_Set() const{
    return m_resolution_isSet;
}

bool OAIScreenshot_type::is_resolution_Valid() const{
    return m_resolution_isValid;
}

QString OAIScreenshot_type::getScreenshotUrl() const {
    return m_screenshot_url;
}
void OAIScreenshot_type::setScreenshotUrl(const QString &screenshot_url) {
    m_screenshot_url = screenshot_url;
    m_screenshot_url_isSet = true;
}

bool OAIScreenshot_type::is_screenshot_url_Set() const{
    return m_screenshot_url_isSet;
}

bool OAIScreenshot_type::is_screenshot_url_Valid() const{
    return m_screenshot_url_isValid;
}

QString OAIScreenshot_type::getStatus() const {
    return m_status;
}
void OAIScreenshot_type::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIScreenshot_type::is_status_Set() const{
    return m_status_isSet;
}

bool OAIScreenshot_type::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIScreenshot_type::getThumbnailUrl() const {
    return m_thumbnail_url;
}
void OAIScreenshot_type::setThumbnailUrl(const QString &thumbnail_url) {
    m_thumbnail_url = thumbnail_url;
    m_thumbnail_url_isSet = true;
}

bool OAIScreenshot_type::is_thumbnail_url_Set() const{
    return m_thumbnail_url_isSet;
}

bool OAIScreenshot_type::is_thumbnail_url_Valid() const{
    return m_thumbnail_url_isValid;
}

bool OAIScreenshot_type::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_browser_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_browser_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolution_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_screenshot_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScreenshot_type::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
