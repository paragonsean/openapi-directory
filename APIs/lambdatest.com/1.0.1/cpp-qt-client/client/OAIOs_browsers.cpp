/**
 * LambdaTest Screenshots API Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOs_browsers.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOs_browsers::OAIOs_browsers(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOs_browsers::OAIOs_browsers() {
    this->initializeModel();
}

OAIOs_browsers::~OAIOs_browsers() {}

void OAIOs_browsers::initializeModel() {

    m_macos_mojave_isSet = false;
    m_macos_mojave_isValid = false;

    m_windows_10_isSet = false;
    m_windows_10_isValid = false;
}

void OAIOs_browsers::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOs_browsers::fromJsonObject(QJsonObject json) {

    m_macos_mojave_isValid = ::OpenAPI::fromJsonValue(m_macos_mojave, json[QString("macos mojave")]);
    m_macos_mojave_isSet = !json[QString("macos mojave")].isNull() && m_macos_mojave_isValid;

    m_windows_10_isValid = ::OpenAPI::fromJsonValue(m_windows_10, json[QString("windows 10")]);
    m_windows_10_isSet = !json[QString("windows 10")].isNull() && m_windows_10_isValid;
}

QString OAIOs_browsers::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOs_browsers::asJsonObject() const {
    QJsonObject obj;
    if (m_macos_mojave.isSet()) {
        obj.insert(QString("macos mojave"), ::OpenAPI::toJsonValue(m_macos_mojave));
    }
    if (m_windows_10.isSet()) {
        obj.insert(QString("windows 10"), ::OpenAPI::toJsonValue(m_windows_10));
    }
    return obj;
}

OAIBrowsers OAIOs_browsers::getMacosMojave() const {
    return m_macos_mojave;
}
void OAIOs_browsers::setMacosMojave(const OAIBrowsers &macos_mojave) {
    m_macos_mojave = macos_mojave;
    m_macos_mojave_isSet = true;
}

bool OAIOs_browsers::is_macos_mojave_Set() const{
    return m_macos_mojave_isSet;
}

bool OAIOs_browsers::is_macos_mojave_Valid() const{
    return m_macos_mojave_isValid;
}

OAIBrowsers OAIOs_browsers::getWindows10() const {
    return m_windows_10;
}
void OAIOs_browsers::setWindows10(const OAIBrowsers &windows_10) {
    m_windows_10 = windows_10;
    m_windows_10_isSet = true;
}

bool OAIOs_browsers::is_windows_10_Set() const{
    return m_windows_10_isSet;
}

bool OAIOs_browsers::is_windows_10_Valid() const{
    return m_windows_10_isValid;
}

bool OAIOs_browsers::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_macos_mojave.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_windows_10.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOs_browsers::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
