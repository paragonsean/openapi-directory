/**
 * LambdaTest Screenshots API Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBrowsers.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBrowsers::OAIBrowsers(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBrowsers::OAIBrowsers() {
    this->initializeModel();
}

OAIBrowsers::~OAIBrowsers() {}

void OAIBrowsers::initializeModel() {

    m_chrome_isSet = false;
    m_chrome_isValid = false;

    m_firefox_isSet = false;
    m_firefox_isValid = false;

    m_opera_isSet = false;
    m_opera_isValid = false;
}

void OAIBrowsers::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBrowsers::fromJsonObject(QJsonObject json) {

    m_chrome_isValid = ::OpenAPI::fromJsonValue(m_chrome, json[QString("chrome")]);
    m_chrome_isSet = !json[QString("chrome")].isNull() && m_chrome_isValid;

    m_firefox_isValid = ::OpenAPI::fromJsonValue(m_firefox, json[QString("firefox")]);
    m_firefox_isSet = !json[QString("firefox")].isNull() && m_firefox_isValid;

    m_opera_isValid = ::OpenAPI::fromJsonValue(m_opera, json[QString("opera")]);
    m_opera_isSet = !json[QString("opera")].isNull() && m_opera_isValid;
}

QString OAIBrowsers::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBrowsers::asJsonObject() const {
    QJsonObject obj;
    if (m_chrome.size() > 0) {
        obj.insert(QString("chrome"), ::OpenAPI::toJsonValue(m_chrome));
    }
    if (m_firefox.size() > 0) {
        obj.insert(QString("firefox"), ::OpenAPI::toJsonValue(m_firefox));
    }
    if (m_opera.size() > 0) {
        obj.insert(QString("opera"), ::OpenAPI::toJsonValue(m_opera));
    }
    return obj;
}

QList<QString> OAIBrowsers::getChrome() const {
    return m_chrome;
}
void OAIBrowsers::setChrome(const QList<QString> &chrome) {
    m_chrome = chrome;
    m_chrome_isSet = true;
}

bool OAIBrowsers::is_chrome_Set() const{
    return m_chrome_isSet;
}

bool OAIBrowsers::is_chrome_Valid() const{
    return m_chrome_isValid;
}

QList<QString> OAIBrowsers::getFirefox() const {
    return m_firefox;
}
void OAIBrowsers::setFirefox(const QList<QString> &firefox) {
    m_firefox = firefox;
    m_firefox_isSet = true;
}

bool OAIBrowsers::is_firefox_Set() const{
    return m_firefox_isSet;
}

bool OAIBrowsers::is_firefox_Valid() const{
    return m_firefox_isValid;
}

QList<QString> OAIBrowsers::getOpera() const {
    return m_opera;
}
void OAIBrowsers::setOpera(const QList<QString> &opera) {
    m_opera = opera;
    m_opera_isSet = true;
}

bool OAIBrowsers::is_opera_Set() const{
    return m_opera_isSet;
}

bool OAIBrowsers::is_opera_Valid() const{
    return m_opera_isValid;
}

bool OAIBrowsers::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_chrome.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_firefox.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_opera.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBrowsers::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
