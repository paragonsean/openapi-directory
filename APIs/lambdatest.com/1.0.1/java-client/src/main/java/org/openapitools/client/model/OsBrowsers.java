/*
 * LambdaTest Screenshots API Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Browsers;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OsBrowsers
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:59.339364-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OsBrowsers {
  public static final String SERIALIZED_NAME_MACOS_MOJAVE = "macos mojave";
  @SerializedName(SERIALIZED_NAME_MACOS_MOJAVE)
  private Browsers macosMojave;

  public static final String SERIALIZED_NAME_WINDOWS10 = "windows 10";
  @SerializedName(SERIALIZED_NAME_WINDOWS10)
  private Browsers windows10;

  public OsBrowsers() {
  }

  public OsBrowsers macosMojave(Browsers macosMojave) {
    this.macosMojave = macosMojave;
    return this;
  }

  /**
   * Get macosMojave
   * @return macosMojave
   */
  @javax.annotation.Nullable
  public Browsers getMacosMojave() {
    return macosMojave;
  }

  public void setMacosMojave(Browsers macosMojave) {
    this.macosMojave = macosMojave;
  }


  public OsBrowsers windows10(Browsers windows10) {
    this.windows10 = windows10;
    return this;
  }

  /**
   * Get windows10
   * @return windows10
   */
  @javax.annotation.Nullable
  public Browsers getWindows10() {
    return windows10;
  }

  public void setWindows10(Browsers windows10) {
    this.windows10 = windows10;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OsBrowsers osBrowsers = (OsBrowsers) o;
    return Objects.equals(this.macosMojave, osBrowsers.macosMojave) &&
        Objects.equals(this.windows10, osBrowsers.windows10);
  }

  @Override
  public int hashCode() {
    return Objects.hash(macosMojave, windows10);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OsBrowsers {\n");
    sb.append("    macosMojave: ").append(toIndentedString(macosMojave)).append("\n");
    sb.append("    windows10: ").append(toIndentedString(windows10)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("macos mojave");
    openapiFields.add("windows 10");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OsBrowsers
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OsBrowsers.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OsBrowsers is not found in the empty JSON string", OsBrowsers.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OsBrowsers.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OsBrowsers` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `macos mojave`
      if (jsonObj.get("macos mojave") != null && !jsonObj.get("macos mojave").isJsonNull()) {
        Browsers.validateJsonElement(jsonObj.get("macos mojave"));
      }
      // validate the optional field `windows 10`
      if (jsonObj.get("windows 10") != null && !jsonObj.get("windows 10").isJsonNull()) {
        Browsers.validateJsonElement(jsonObj.get("windows 10"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OsBrowsers.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OsBrowsers' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OsBrowsers> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OsBrowsers.class));

       return (TypeAdapter<T>) new TypeAdapter<OsBrowsers>() {
           @Override
           public void write(JsonWriter out, OsBrowsers value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OsBrowsers read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OsBrowsers given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OsBrowsers
   * @throws IOException if the JSON string is invalid with respect to OsBrowsers
   */
  public static OsBrowsers fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OsBrowsers.class);
  }

  /**
   * Convert an instance of OsBrowsers to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

