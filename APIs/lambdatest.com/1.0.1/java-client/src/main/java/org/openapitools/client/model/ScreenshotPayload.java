/*
 * LambdaTest Screenshots API Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.ScreenshotPayloadConfigs;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ScreenshotPayload
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:59.339364-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ScreenshotPayload {
  public static final String SERIALIZED_NAME_CALLBACK_URL = "callback_url";
  @SerializedName(SERIALIZED_NAME_CALLBACK_URL)
  private String callbackUrl;

  public static final String SERIALIZED_NAME_CONFIGS = "configs";
  @SerializedName(SERIALIZED_NAME_CONFIGS)
  private ScreenshotPayloadConfigs configs;

  public static final String SERIALIZED_NAME_DEFER_TIME = "defer_time";
  @SerializedName(SERIALIZED_NAME_DEFER_TIME)
  private BigDecimal deferTime;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private Boolean email;

  public static final String SERIALIZED_NAME_MAC_RES = "mac_res";
  @SerializedName(SERIALIZED_NAME_MAC_RES)
  private String macRes;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_TUNNEL = "tunnel";
  @SerializedName(SERIALIZED_NAME_TUNNEL)
  private Boolean tunnel;

  public static final String SERIALIZED_NAME_TUNNEL_IDENTIFIER = "tunnel_identifier";
  @SerializedName(SERIALIZED_NAME_TUNNEL_IDENTIFIER)
  private String tunnelIdentifier;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_WIN_RES = "win_res";
  @SerializedName(SERIALIZED_NAME_WIN_RES)
  private String winRes;

  public ScreenshotPayload() {
  }

  public ScreenshotPayload callbackUrl(String callbackUrl) {
    this.callbackUrl = callbackUrl;
    return this;
  }

  /**
   * Get callbackUrl
   * @return callbackUrl
   */
  @javax.annotation.Nullable
  public String getCallbackUrl() {
    return callbackUrl;
  }

  public void setCallbackUrl(String callbackUrl) {
    this.callbackUrl = callbackUrl;
  }


  public ScreenshotPayload configs(ScreenshotPayloadConfigs configs) {
    this.configs = configs;
    return this;
  }

  /**
   * Get configs
   * @return configs
   */
  @javax.annotation.Nullable
  public ScreenshotPayloadConfigs getConfigs() {
    return configs;
  }

  public void setConfigs(ScreenshotPayloadConfigs configs) {
    this.configs = configs;
  }


  public ScreenshotPayload deferTime(BigDecimal deferTime) {
    this.deferTime = deferTime;
    return this;
  }

  /**
   * Get deferTime
   * @return deferTime
   */
  @javax.annotation.Nullable
  public BigDecimal getDeferTime() {
    return deferTime;
  }

  public void setDeferTime(BigDecimal deferTime) {
    this.deferTime = deferTime;
  }


  public ScreenshotPayload email(Boolean email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nullable
  public Boolean getEmail() {
    return email;
  }

  public void setEmail(Boolean email) {
    this.email = email;
  }


  public ScreenshotPayload macRes(String macRes) {
    this.macRes = macRes;
    return this;
  }

  /**
   * Get macRes
   * @return macRes
   */
  @javax.annotation.Nullable
  public String getMacRes() {
    return macRes;
  }

  public void setMacRes(String macRes) {
    this.macRes = macRes;
  }


  public ScreenshotPayload password(String password) {
    this.password = password;
    return this;
  }

  /**
   * Get password
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public ScreenshotPayload tunnel(Boolean tunnel) {
    this.tunnel = tunnel;
    return this;
  }

  /**
   * Get tunnel
   * @return tunnel
   */
  @javax.annotation.Nullable
  public Boolean getTunnel() {
    return tunnel;
  }

  public void setTunnel(Boolean tunnel) {
    this.tunnel = tunnel;
  }


  public ScreenshotPayload tunnelIdentifier(String tunnelIdentifier) {
    this.tunnelIdentifier = tunnelIdentifier;
    return this;
  }

  /**
   * Get tunnelIdentifier
   * @return tunnelIdentifier
   */
  @javax.annotation.Nullable
  public String getTunnelIdentifier() {
    return tunnelIdentifier;
  }

  public void setTunnelIdentifier(String tunnelIdentifier) {
    this.tunnelIdentifier = tunnelIdentifier;
  }


  public ScreenshotPayload url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public ScreenshotPayload username(String username) {
    this.username = username;
    return this;
  }

  /**
   * Get username
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }


  public ScreenshotPayload winRes(String winRes) {
    this.winRes = winRes;
    return this;
  }

  /**
   * Get winRes
   * @return winRes
   */
  @javax.annotation.Nullable
  public String getWinRes() {
    return winRes;
  }

  public void setWinRes(String winRes) {
    this.winRes = winRes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScreenshotPayload screenshotPayload = (ScreenshotPayload) o;
    return Objects.equals(this.callbackUrl, screenshotPayload.callbackUrl) &&
        Objects.equals(this.configs, screenshotPayload.configs) &&
        Objects.equals(this.deferTime, screenshotPayload.deferTime) &&
        Objects.equals(this.email, screenshotPayload.email) &&
        Objects.equals(this.macRes, screenshotPayload.macRes) &&
        Objects.equals(this.password, screenshotPayload.password) &&
        Objects.equals(this.tunnel, screenshotPayload.tunnel) &&
        Objects.equals(this.tunnelIdentifier, screenshotPayload.tunnelIdentifier) &&
        Objects.equals(this.url, screenshotPayload.url) &&
        Objects.equals(this.username, screenshotPayload.username) &&
        Objects.equals(this.winRes, screenshotPayload.winRes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(callbackUrl, configs, deferTime, email, macRes, password, tunnel, tunnelIdentifier, url, username, winRes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScreenshotPayload {\n");
    sb.append("    callbackUrl: ").append(toIndentedString(callbackUrl)).append("\n");
    sb.append("    configs: ").append(toIndentedString(configs)).append("\n");
    sb.append("    deferTime: ").append(toIndentedString(deferTime)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    macRes: ").append(toIndentedString(macRes)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    tunnel: ").append(toIndentedString(tunnel)).append("\n");
    sb.append("    tunnelIdentifier: ").append(toIndentedString(tunnelIdentifier)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    winRes: ").append(toIndentedString(winRes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("callback_url");
    openapiFields.add("configs");
    openapiFields.add("defer_time");
    openapiFields.add("email");
    openapiFields.add("mac_res");
    openapiFields.add("password");
    openapiFields.add("tunnel");
    openapiFields.add("tunnel_identifier");
    openapiFields.add("url");
    openapiFields.add("username");
    openapiFields.add("win_res");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ScreenshotPayload
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ScreenshotPayload.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScreenshotPayload is not found in the empty JSON string", ScreenshotPayload.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ScreenshotPayload.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScreenshotPayload` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("callback_url") != null && !jsonObj.get("callback_url").isJsonNull()) && !jsonObj.get("callback_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `callback_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("callback_url").toString()));
      }
      // validate the optional field `configs`
      if (jsonObj.get("configs") != null && !jsonObj.get("configs").isJsonNull()) {
        ScreenshotPayloadConfigs.validateJsonElement(jsonObj.get("configs"));
      }
      if ((jsonObj.get("mac_res") != null && !jsonObj.get("mac_res").isJsonNull()) && !jsonObj.get("mac_res").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mac_res` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mac_res").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if ((jsonObj.get("tunnel_identifier") != null && !jsonObj.get("tunnel_identifier").isJsonNull()) && !jsonObj.get("tunnel_identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tunnel_identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tunnel_identifier").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
      if ((jsonObj.get("win_res") != null && !jsonObj.get("win_res").isJsonNull()) && !jsonObj.get("win_res").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `win_res` to be a primitive type in the JSON string but got `%s`", jsonObj.get("win_res").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScreenshotPayload.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScreenshotPayload' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScreenshotPayload> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScreenshotPayload.class));

       return (TypeAdapter<T>) new TypeAdapter<ScreenshotPayload>() {
           @Override
           public void write(JsonWriter out, ScreenshotPayload value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScreenshotPayload read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ScreenshotPayload given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ScreenshotPayload
   * @throws IOException if the JSON string is invalid with respect to ScreenshotPayload
   */
  public static ScreenshotPayload fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScreenshotPayload.class);
  }

  /**
   * Convert an instance of ScreenshotPayload to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

