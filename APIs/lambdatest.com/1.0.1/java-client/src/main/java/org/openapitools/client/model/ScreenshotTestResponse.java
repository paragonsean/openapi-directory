/*
 * LambdaTest Screenshots API Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ScreenshotType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ScreenshotTestResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:59.339364-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ScreenshotTestResponse {
  public static final String SERIALIZED_NAME_CALLBACK_URL = "callback_url";
  @SerializedName(SERIALIZED_NAME_CALLBACK_URL)
  private String callbackUrl;

  public static final String SERIALIZED_NAME_DEFER_TIME = "defer_time";
  @SerializedName(SERIALIZED_NAME_DEFER_TIME)
  private BigDecimal deferTime;

  public static final String SERIALIZED_NAME_SCREENSHOTS = "screenshots";
  @SerializedName(SERIALIZED_NAME_SCREENSHOTS)
  private List<ScreenshotType> screenshots = new ArrayList<>();

  public static final String SERIALIZED_NAME_TEST_ID = "test_id";
  @SerializedName(SERIALIZED_NAME_TEST_ID)
  private String testId;

  public static final String SERIALIZED_NAME_TEST_STATUS = "test_status";
  @SerializedName(SERIALIZED_NAME_TEST_STATUS)
  private String testStatus;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public ScreenshotTestResponse() {
  }

  public ScreenshotTestResponse callbackUrl(String callbackUrl) {
    this.callbackUrl = callbackUrl;
    return this;
  }

  /**
   * Get callbackUrl
   * @return callbackUrl
   */
  @javax.annotation.Nullable
  public String getCallbackUrl() {
    return callbackUrl;
  }

  public void setCallbackUrl(String callbackUrl) {
    this.callbackUrl = callbackUrl;
  }


  public ScreenshotTestResponse deferTime(BigDecimal deferTime) {
    this.deferTime = deferTime;
    return this;
  }

  /**
   * Get deferTime
   * @return deferTime
   */
  @javax.annotation.Nullable
  public BigDecimal getDeferTime() {
    return deferTime;
  }

  public void setDeferTime(BigDecimal deferTime) {
    this.deferTime = deferTime;
  }


  public ScreenshotTestResponse screenshots(List<ScreenshotType> screenshots) {
    this.screenshots = screenshots;
    return this;
  }

  public ScreenshotTestResponse addScreenshotsItem(ScreenshotType screenshotsItem) {
    if (this.screenshots == null) {
      this.screenshots = new ArrayList<>();
    }
    this.screenshots.add(screenshotsItem);
    return this;
  }

  /**
   * Get screenshots
   * @return screenshots
   */
  @javax.annotation.Nullable
  public List<ScreenshotType> getScreenshots() {
    return screenshots;
  }

  public void setScreenshots(List<ScreenshotType> screenshots) {
    this.screenshots = screenshots;
  }


  public ScreenshotTestResponse testId(String testId) {
    this.testId = testId;
    return this;
  }

  /**
   * Get testId
   * @return testId
   */
  @javax.annotation.Nullable
  public String getTestId() {
    return testId;
  }

  public void setTestId(String testId) {
    this.testId = testId;
  }


  public ScreenshotTestResponse testStatus(String testStatus) {
    this.testStatus = testStatus;
    return this;
  }

  /**
   * Get testStatus
   * @return testStatus
   */
  @javax.annotation.Nullable
  public String getTestStatus() {
    return testStatus;
  }

  public void setTestStatus(String testStatus) {
    this.testStatus = testStatus;
  }


  public ScreenshotTestResponse url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScreenshotTestResponse screenshotTestResponse = (ScreenshotTestResponse) o;
    return Objects.equals(this.callbackUrl, screenshotTestResponse.callbackUrl) &&
        Objects.equals(this.deferTime, screenshotTestResponse.deferTime) &&
        Objects.equals(this.screenshots, screenshotTestResponse.screenshots) &&
        Objects.equals(this.testId, screenshotTestResponse.testId) &&
        Objects.equals(this.testStatus, screenshotTestResponse.testStatus) &&
        Objects.equals(this.url, screenshotTestResponse.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(callbackUrl, deferTime, screenshots, testId, testStatus, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScreenshotTestResponse {\n");
    sb.append("    callbackUrl: ").append(toIndentedString(callbackUrl)).append("\n");
    sb.append("    deferTime: ").append(toIndentedString(deferTime)).append("\n");
    sb.append("    screenshots: ").append(toIndentedString(screenshots)).append("\n");
    sb.append("    testId: ").append(toIndentedString(testId)).append("\n");
    sb.append("    testStatus: ").append(toIndentedString(testStatus)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("callback_url");
    openapiFields.add("defer_time");
    openapiFields.add("screenshots");
    openapiFields.add("test_id");
    openapiFields.add("test_status");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ScreenshotTestResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ScreenshotTestResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScreenshotTestResponse is not found in the empty JSON string", ScreenshotTestResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ScreenshotTestResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScreenshotTestResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("callback_url") != null && !jsonObj.get("callback_url").isJsonNull()) && !jsonObj.get("callback_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `callback_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("callback_url").toString()));
      }
      if (jsonObj.get("screenshots") != null && !jsonObj.get("screenshots").isJsonNull()) {
        JsonArray jsonArrayscreenshots = jsonObj.getAsJsonArray("screenshots");
        if (jsonArrayscreenshots != null) {
          // ensure the json data is an array
          if (!jsonObj.get("screenshots").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `screenshots` to be an array in the JSON string but got `%s`", jsonObj.get("screenshots").toString()));
          }

          // validate the optional field `screenshots` (array)
          for (int i = 0; i < jsonArrayscreenshots.size(); i++) {
            ScreenshotType.validateJsonElement(jsonArrayscreenshots.get(i));
          };
        }
      }
      if ((jsonObj.get("test_id") != null && !jsonObj.get("test_id").isJsonNull()) && !jsonObj.get("test_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `test_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("test_id").toString()));
      }
      if ((jsonObj.get("test_status") != null && !jsonObj.get("test_status").isJsonNull()) && !jsonObj.get("test_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `test_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("test_status").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScreenshotTestResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScreenshotTestResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScreenshotTestResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScreenshotTestResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ScreenshotTestResponse>() {
           @Override
           public void write(JsonWriter out, ScreenshotTestResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScreenshotTestResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ScreenshotTestResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ScreenshotTestResponse
   * @throws IOException if the JSON string is invalid with respect to ScreenshotTestResponse
   */
  public static ScreenshotTestResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScreenshotTestResponse.class);
  }

  /**
   * Convert an instance of ScreenshotTestResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

