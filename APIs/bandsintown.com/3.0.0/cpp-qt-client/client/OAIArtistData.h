/**
 * Bandsintown API
 * # What is the Bandsintown API? The Bandsintown API is designed for artists and enterprises representing artists.  It offers read-only access to artist info and artist events: - artist info: returns the link to the Bandsintown artist page, the link to the artist photo, the current number of trackers and more - artist events: returns the list of events including their date and time, venue name and location, ticket links, lineup, description and the link to the Bandsintown event page  Note you can specify if you only want to return upcoming events, past events, all events, or events within a given date range.  # Getting Started - In order to use the Bandsintown API, you must read and accept our Terms and Conditions below and you must have written consent from Bandsintown Inc. Any other use of the Bandsintown API is prohibited. [Contact Bandsintown](http://help.bandsintown.com/) to tell us what you plan to do and request your personal application ID. - Find out about the API methods available and the format of the API responses below. Select the method you wish to use and try it out online with the app ID provided to you. - Call our Bandsintown API with the app ID provided straight from your website or back-end platform and choose which element of the API response you wish to display. Scroll to the bottom of this page to find out about the Models used. 
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIArtistData.h
 *
 * 
 */

#ifndef OAIArtistData_H
#define OAIArtistData_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIArtistData : public OAIObject {
public:
    OAIArtistData();
    OAIArtistData(QString json);
    ~OAIArtistData() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getFacebookPageUrl() const;
    void setFacebookPageUrl(const QString &facebook_page_url);
    bool is_facebook_page_url_Set() const;
    bool is_facebook_page_url_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getImageUrl() const;
    void setImageUrl(const QString &image_url);
    bool is_image_url_Set() const;
    bool is_image_url_Valid() const;

    QString getMbid() const;
    void setMbid(const QString &mbid);
    bool is_mbid_Set() const;
    bool is_mbid_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getThumbUrl() const;
    void setThumbUrl(const QString &thumb_url);
    bool is_thumb_url_Set() const;
    bool is_thumb_url_Valid() const;

    qint32 getTrackerCount() const;
    void setTrackerCount(const qint32 &tracker_count);
    bool is_tracker_count_Set() const;
    bool is_tracker_count_Valid() const;

    qint32 getUpcomingEventCount() const;
    void setUpcomingEventCount(const qint32 &upcoming_event_count);
    bool is_upcoming_event_count_Set() const;
    bool is_upcoming_event_count_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_facebook_page_url;
    bool m_facebook_page_url_isSet;
    bool m_facebook_page_url_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_image_url;
    bool m_image_url_isSet;
    bool m_image_url_isValid;

    QString m_mbid;
    bool m_mbid_isSet;
    bool m_mbid_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_thumb_url;
    bool m_thumb_url_isSet;
    bool m_thumb_url_isValid;

    qint32 m_tracker_count;
    bool m_tracker_count_isSet;
    bool m_tracker_count_isValid;

    qint32 m_upcoming_event_count;
    bool m_upcoming_event_count_isSet;
    bool m_upcoming_event_count_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIArtistData)

#endif // OAIArtistData_H
