/**
 * Bandsintown API
 * # What is the Bandsintown API? The Bandsintown API is designed for artists and enterprises representing artists.  It offers read-only access to artist info and artist events: - artist info: returns the link to the Bandsintown artist page, the link to the artist photo, the current number of trackers and more - artist events: returns the list of events including their date and time, venue name and location, ticket links, lineup, description and the link to the Bandsintown event page  Note you can specify if you only want to return upcoming events, past events, all events, or events within a given date range.  # Getting Started - In order to use the Bandsintown API, you must read and accept our Terms and Conditions below and you must have written consent from Bandsintown Inc. Any other use of the Bandsintown API is prohibited. [Contact Bandsintown](http://help.bandsintown.com/) to tell us what you plan to do and request your personal application ID. - Find out about the API methods available and the format of the API responses below. Select the method you wish to use and try it out online with the app ID provided to you. - Call our Bandsintown API with the app ID provided straight from your website or back-end platform and choose which element of the API response you wish to display. Scroll to the bottom of this page to find out about the Models used. 
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventData::OAIEventData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventData::OAIEventData() {
    this->initializeModel();
}

OAIEventData::~OAIEventData() {}

void OAIEventData::initializeModel() {

    m_artist_id_isSet = false;
    m_artist_id_isValid = false;

    m_datetime_isSet = false;
    m_datetime_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_lineup_isSet = false;
    m_lineup_isValid = false;

    m_offers_isSet = false;
    m_offers_isValid = false;

    m_on_sale_datetime_isSet = false;
    m_on_sale_datetime_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_venue_isSet = false;
    m_venue_isValid = false;
}

void OAIEventData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventData::fromJsonObject(QJsonObject json) {

    m_artist_id_isValid = ::OpenAPI::fromJsonValue(m_artist_id, json[QString("artist_id")]);
    m_artist_id_isSet = !json[QString("artist_id")].isNull() && m_artist_id_isValid;

    m_datetime_isValid = ::OpenAPI::fromJsonValue(m_datetime, json[QString("datetime")]);
    m_datetime_isSet = !json[QString("datetime")].isNull() && m_datetime_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_lineup_isValid = ::OpenAPI::fromJsonValue(m_lineup, json[QString("lineup")]);
    m_lineup_isSet = !json[QString("lineup")].isNull() && m_lineup_isValid;

    m_offers_isValid = ::OpenAPI::fromJsonValue(m_offers, json[QString("offers")]);
    m_offers_isSet = !json[QString("offers")].isNull() && m_offers_isValid;

    m_on_sale_datetime_isValid = ::OpenAPI::fromJsonValue(m_on_sale_datetime, json[QString("on_sale_datetime")]);
    m_on_sale_datetime_isSet = !json[QString("on_sale_datetime")].isNull() && m_on_sale_datetime_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_venue_isValid = ::OpenAPI::fromJsonValue(m_venue, json[QString("venue")]);
    m_venue_isSet = !json[QString("venue")].isNull() && m_venue_isValid;
}

QString OAIEventData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventData::asJsonObject() const {
    QJsonObject obj;
    if (m_artist_id_isSet) {
        obj.insert(QString("artist_id"), ::OpenAPI::toJsonValue(m_artist_id));
    }
    if (m_datetime_isSet) {
        obj.insert(QString("datetime"), ::OpenAPI::toJsonValue(m_datetime));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_lineup.size() > 0) {
        obj.insert(QString("lineup"), ::OpenAPI::toJsonValue(m_lineup));
    }
    if (m_offers.size() > 0) {
        obj.insert(QString("offers"), ::OpenAPI::toJsonValue(m_offers));
    }
    if (m_on_sale_datetime_isSet) {
        obj.insert(QString("on_sale_datetime"), ::OpenAPI::toJsonValue(m_on_sale_datetime));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_venue.isSet()) {
        obj.insert(QString("venue"), ::OpenAPI::toJsonValue(m_venue));
    }
    return obj;
}

qint32 OAIEventData::getArtistId() const {
    return m_artist_id;
}
void OAIEventData::setArtistId(const qint32 &artist_id) {
    m_artist_id = artist_id;
    m_artist_id_isSet = true;
}

bool OAIEventData::is_artist_id_Set() const{
    return m_artist_id_isSet;
}

bool OAIEventData::is_artist_id_Valid() const{
    return m_artist_id_isValid;
}

QString OAIEventData::getDatetime() const {
    return m_datetime;
}
void OAIEventData::setDatetime(const QString &datetime) {
    m_datetime = datetime;
    m_datetime_isSet = true;
}

bool OAIEventData::is_datetime_Set() const{
    return m_datetime_isSet;
}

bool OAIEventData::is_datetime_Valid() const{
    return m_datetime_isValid;
}

QString OAIEventData::getDescription() const {
    return m_description;
}
void OAIEventData::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIEventData::is_description_Set() const{
    return m_description_isSet;
}

bool OAIEventData::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIEventData::getId() const {
    return m_id;
}
void OAIEventData::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEventData::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEventData::is_id_Valid() const{
    return m_id_isValid;
}

QList<QString> OAIEventData::getLineup() const {
    return m_lineup;
}
void OAIEventData::setLineup(const QList<QString> &lineup) {
    m_lineup = lineup;
    m_lineup_isSet = true;
}

bool OAIEventData::is_lineup_Set() const{
    return m_lineup_isSet;
}

bool OAIEventData::is_lineup_Valid() const{
    return m_lineup_isValid;
}

QList<OAIOfferData> OAIEventData::getOffers() const {
    return m_offers;
}
void OAIEventData::setOffers(const QList<OAIOfferData> &offers) {
    m_offers = offers;
    m_offers_isSet = true;
}

bool OAIEventData::is_offers_Set() const{
    return m_offers_isSet;
}

bool OAIEventData::is_offers_Valid() const{
    return m_offers_isValid;
}

QString OAIEventData::getOnSaleDatetime() const {
    return m_on_sale_datetime;
}
void OAIEventData::setOnSaleDatetime(const QString &on_sale_datetime) {
    m_on_sale_datetime = on_sale_datetime;
    m_on_sale_datetime_isSet = true;
}

bool OAIEventData::is_on_sale_datetime_Set() const{
    return m_on_sale_datetime_isSet;
}

bool OAIEventData::is_on_sale_datetime_Valid() const{
    return m_on_sale_datetime_isValid;
}

QString OAIEventData::getUrl() const {
    return m_url;
}
void OAIEventData::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIEventData::is_url_Set() const{
    return m_url_isSet;
}

bool OAIEventData::is_url_Valid() const{
    return m_url_isValid;
}

OAIVenueData OAIEventData::getVenue() const {
    return m_venue;
}
void OAIEventData::setVenue(const OAIVenueData &venue) {
    m_venue = venue;
    m_venue_isSet = true;
}

bool OAIEventData::is_venue_Set() const{
    return m_venue_isSet;
}

bool OAIEventData::is_venue_Valid() const{
    return m_venue_isValid;
}

bool OAIEventData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_artist_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_datetime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lineup.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_offers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_sale_datetime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_venue.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_artist_id_isValid && m_datetime_isValid && m_id_isValid && m_lineup_isValid && m_offers_isValid && m_on_sale_datetime_isValid && m_url_isValid && m_venue_isValid && true;
}

} // namespace OpenAPI
