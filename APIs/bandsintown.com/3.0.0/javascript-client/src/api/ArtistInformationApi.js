/**
 * Bandsintown API
 * # What is the Bandsintown API? The Bandsintown API is designed for artists and enterprises representing artists.  It offers read-only access to artist info and artist events: - artist info: returns the link to the Bandsintown artist page, the link to the artist photo, the current number of trackers and more - artist events: returns the list of events including their date and time, venue name and location, ticket links, lineup, description and the link to the Bandsintown event page  Note you can specify if you only want to return upcoming events, past events, all events, or events within a given date range.  # Getting Started - In order to use the Bandsintown API, you must read and accept our Terms and Conditions below and you must have written consent from Bandsintown Inc. Any other use of the Bandsintown API is prohibited. [Contact Bandsintown](http://help.bandsintown.com/) to tell us what you plan to do and request your personal application ID. - Find out about the API methods available and the format of the API responses below. Select the method you wish to use and try it out online with the app ID provided to you. - Call our Bandsintown API with the app ID provided straight from your website or back-end platform and choose which element of the API response you wish to display. Scroll to the bottom of this page to find out about the Models used. 
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ArtistData from '../model/ArtistData';

/**
* ArtistInformation service.
* @module api/ArtistInformationApi
* @version 3.0.0
*/
export default class ArtistInformationApi {

    /**
    * Constructs a new ArtistInformationApi. 
    * @alias module:api/ArtistInformationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the artist operation.
     * @callback module:api/ArtistInformationApi~artistCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArtistData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get artist information
     * Get artist information 
     * @param {String} artistname The name of the artist. If it contains one of the special characters below, please be sure to replace it by the corresponding code: for / use %252F, for ? use %253F, for * use %252A, and for \" use %27C
     * @param {String} appId The application ID assigned to you by Bandsintown
     * @param {module:api/ArtistInformationApi~artistCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArtistData}
     */
    artist(artistname, appId, callback) {
      let postBody = null;
      // verify the required parameter 'artistname' is set
      if (artistname === undefined || artistname === null) {
        throw new Error("Missing the required parameter 'artistname' when calling artist");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling artist");
      }

      let pathParams = {
        'artistname': artistname
      };
      let queryParams = {
        'app_id': appId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ArtistData;
      return this.apiClient.callApi(
        '/artists/{artistname}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
