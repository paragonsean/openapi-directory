/**
 * Bandsintown API
 * # What is the Bandsintown API? The Bandsintown API is designed for artists and enterprises representing artists.  It offers read-only access to artist info and artist events: - artist info: returns the link to the Bandsintown artist page, the link to the artist photo, the current number of trackers and more - artist events: returns the list of events including their date and time, venue name and location, ticket links, lineup, description and the link to the Bandsintown event page  Note you can specify if you only want to return upcoming events, past events, all events, or events within a given date range.  # Getting Started - In order to use the Bandsintown API, you must read and accept our Terms and Conditions below and you must have written consent from Bandsintown Inc. Any other use of the Bandsintown API is prohibited. [Contact Bandsintown](http://help.bandsintown.com/) to tell us what you plan to do and request your personal application ID. - Find out about the API methods available and the format of the API responses below. Select the method you wish to use and try it out online with the app ID provided to you. - Call our Bandsintown API with the app ID provided straight from your website or back-end platform and choose which element of the API response you wish to display. Scroll to the bottom of this page to find out about the Models used. 
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BandsintownApi);
  }
}(this, function(expect, BandsintownApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new BandsintownApi.ArtistData();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ArtistData', function() {
    it('should create an instance of ArtistData', function() {
      // uncomment below and update the code to test ArtistData
      //var instance = new BandsintownApi.ArtistData();
      //expect(instance).to.be.a(BandsintownApi.ArtistData);
    });

    it('should have the property facebookPageUrl (base name: "facebook_page_url")', function() {
      // uncomment below and update the code to test the property facebookPageUrl
      //var instance = new BandsintownApi.ArtistData();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new BandsintownApi.ArtistData();
      //expect(instance).to.be();
    });

    it('should have the property imageUrl (base name: "image_url")', function() {
      // uncomment below and update the code to test the property imageUrl
      //var instance = new BandsintownApi.ArtistData();
      //expect(instance).to.be();
    });

    it('should have the property mbid (base name: "mbid")', function() {
      // uncomment below and update the code to test the property mbid
      //var instance = new BandsintownApi.ArtistData();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new BandsintownApi.ArtistData();
      //expect(instance).to.be();
    });

    it('should have the property thumbUrl (base name: "thumb_url")', function() {
      // uncomment below and update the code to test the property thumbUrl
      //var instance = new BandsintownApi.ArtistData();
      //expect(instance).to.be();
    });

    it('should have the property trackerCount (base name: "tracker_count")', function() {
      // uncomment below and update the code to test the property trackerCount
      //var instance = new BandsintownApi.ArtistData();
      //expect(instance).to.be();
    });

    it('should have the property upcomingEventCount (base name: "upcoming_event_count")', function() {
      // uncomment below and update the code to test the property upcomingEventCount
      //var instance = new BandsintownApi.ArtistData();
      //expect(instance).to.be();
    });

    it('should have the property url (base name: "url")', function() {
      // uncomment below and update the code to test the property url
      //var instance = new BandsintownApi.ArtistData();
      //expect(instance).to.be();
    });

  });

}));
