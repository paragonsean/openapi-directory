# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ArtistData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, facebook_page_url: str=None, id: int=None, image_url: str=None, mbid: str=None, name: str=None, thumb_url: str=None, tracker_count: int=None, upcoming_event_count: int=None, url: str=None):
        """ArtistData - a model defined in OpenAPI

        :param facebook_page_url: The facebook_page_url of this ArtistData.
        :param id: The id of this ArtistData.
        :param image_url: The image_url of this ArtistData.
        :param mbid: The mbid of this ArtistData.
        :param name: The name of this ArtistData.
        :param thumb_url: The thumb_url of this ArtistData.
        :param tracker_count: The tracker_count of this ArtistData.
        :param upcoming_event_count: The upcoming_event_count of this ArtistData.
        :param url: The url of this ArtistData.
        """
        self.openapi_types = {
            'facebook_page_url': str,
            'id': int,
            'image_url': str,
            'mbid': str,
            'name': str,
            'thumb_url': str,
            'tracker_count': int,
            'upcoming_event_count': int,
            'url': str
        }

        self.attribute_map = {
            'facebook_page_url': 'facebook_page_url',
            'id': 'id',
            'image_url': 'image_url',
            'mbid': 'mbid',
            'name': 'name',
            'thumb_url': 'thumb_url',
            'tracker_count': 'tracker_count',
            'upcoming_event_count': 'upcoming_event_count',
            'url': 'url'
        }

        self._facebook_page_url = facebook_page_url
        self._id = id
        self._image_url = image_url
        self._mbid = mbid
        self._name = name
        self._thumb_url = thumb_url
        self._tracker_count = tracker_count
        self._upcoming_event_count = upcoming_event_count
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ArtistData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ArtistData of this ArtistData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def facebook_page_url(self):
        """Gets the facebook_page_url of this ArtistData.


        :return: The facebook_page_url of this ArtistData.
        :rtype: str
        """
        return self._facebook_page_url

    @facebook_page_url.setter
    def facebook_page_url(self, facebook_page_url):
        """Sets the facebook_page_url of this ArtistData.


        :param facebook_page_url: The facebook_page_url of this ArtistData.
        :type facebook_page_url: str
        """
        if facebook_page_url is None:
            raise ValueError("Invalid value for `facebook_page_url`, must not be `None`")

        self._facebook_page_url = facebook_page_url

    @property
    def id(self):
        """Gets the id of this ArtistData.


        :return: The id of this ArtistData.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ArtistData.


        :param id: The id of this ArtistData.
        :type id: int
        """

        self._id = id

    @property
    def image_url(self):
        """Gets the image_url of this ArtistData.


        :return: The image_url of this ArtistData.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this ArtistData.


        :param image_url: The image_url of this ArtistData.
        :type image_url: str
        """
        if image_url is None:
            raise ValueError("Invalid value for `image_url`, must not be `None`")

        self._image_url = image_url

    @property
    def mbid(self):
        """Gets the mbid of this ArtistData.


        :return: The mbid of this ArtistData.
        :rtype: str
        """
        return self._mbid

    @mbid.setter
    def mbid(self, mbid):
        """Sets the mbid of this ArtistData.


        :param mbid: The mbid of this ArtistData.
        :type mbid: str
        """
        if mbid is None:
            raise ValueError("Invalid value for `mbid`, must not be `None`")

        self._mbid = mbid

    @property
    def name(self):
        """Gets the name of this ArtistData.


        :return: The name of this ArtistData.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ArtistData.


        :param name: The name of this ArtistData.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def thumb_url(self):
        """Gets the thumb_url of this ArtistData.


        :return: The thumb_url of this ArtistData.
        :rtype: str
        """
        return self._thumb_url

    @thumb_url.setter
    def thumb_url(self, thumb_url):
        """Sets the thumb_url of this ArtistData.


        :param thumb_url: The thumb_url of this ArtistData.
        :type thumb_url: str
        """
        if thumb_url is None:
            raise ValueError("Invalid value for `thumb_url`, must not be `None`")

        self._thumb_url = thumb_url

    @property
    def tracker_count(self):
        """Gets the tracker_count of this ArtistData.


        :return: The tracker_count of this ArtistData.
        :rtype: int
        """
        return self._tracker_count

    @tracker_count.setter
    def tracker_count(self, tracker_count):
        """Sets the tracker_count of this ArtistData.


        :param tracker_count: The tracker_count of this ArtistData.
        :type tracker_count: int
        """
        if tracker_count is None:
            raise ValueError("Invalid value for `tracker_count`, must not be `None`")

        self._tracker_count = tracker_count

    @property
    def upcoming_event_count(self):
        """Gets the upcoming_event_count of this ArtistData.


        :return: The upcoming_event_count of this ArtistData.
        :rtype: int
        """
        return self._upcoming_event_count

    @upcoming_event_count.setter
    def upcoming_event_count(self, upcoming_event_count):
        """Sets the upcoming_event_count of this ArtistData.


        :param upcoming_event_count: The upcoming_event_count of this ArtistData.
        :type upcoming_event_count: int
        """
        if upcoming_event_count is None:
            raise ValueError("Invalid value for `upcoming_event_count`, must not be `None`")

        self._upcoming_event_count = upcoming_event_count

    @property
    def url(self):
        """Gets the url of this ArtistData.


        :return: The url of this ArtistData.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ArtistData.


        :param url: The url of this ArtistData.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
