# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.offer_data import OfferData
from openapi_server.models.venue_data import VenueData
from openapi_server import util


class EventData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, artist_id: int=None, datetime: str=None, description: str=None, id: int=None, lineup: List[str]=None, offers: List[OfferData]=None, on_sale_datetime: str=None, url: str=None, venue: VenueData=None):
        """EventData - a model defined in OpenAPI

        :param artist_id: The artist_id of this EventData.
        :param datetime: The datetime of this EventData.
        :param description: The description of this EventData.
        :param id: The id of this EventData.
        :param lineup: The lineup of this EventData.
        :param offers: The offers of this EventData.
        :param on_sale_datetime: The on_sale_datetime of this EventData.
        :param url: The url of this EventData.
        :param venue: The venue of this EventData.
        """
        self.openapi_types = {
            'artist_id': int,
            'datetime': str,
            'description': str,
            'id': int,
            'lineup': List[str],
            'offers': List[OfferData],
            'on_sale_datetime': str,
            'url': str,
            'venue': VenueData
        }

        self.attribute_map = {
            'artist_id': 'artist_id',
            'datetime': 'datetime',
            'description': 'description',
            'id': 'id',
            'lineup': 'lineup',
            'offers': 'offers',
            'on_sale_datetime': 'on_sale_datetime',
            'url': 'url',
            'venue': 'venue'
        }

        self._artist_id = artist_id
        self._datetime = datetime
        self._description = description
        self._id = id
        self._lineup = lineup
        self._offers = offers
        self._on_sale_datetime = on_sale_datetime
        self._url = url
        self._venue = venue

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventData of this EventData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def artist_id(self):
        """Gets the artist_id of this EventData.


        :return: The artist_id of this EventData.
        :rtype: int
        """
        return self._artist_id

    @artist_id.setter
    def artist_id(self, artist_id):
        """Sets the artist_id of this EventData.


        :param artist_id: The artist_id of this EventData.
        :type artist_id: int
        """
        if artist_id is None:
            raise ValueError("Invalid value for `artist_id`, must not be `None`")

        self._artist_id = artist_id

    @property
    def datetime(self):
        """Gets the datetime of this EventData.


        :return: The datetime of this EventData.
        :rtype: str
        """
        return self._datetime

    @datetime.setter
    def datetime(self, datetime):
        """Sets the datetime of this EventData.


        :param datetime: The datetime of this EventData.
        :type datetime: str
        """
        if datetime is None:
            raise ValueError("Invalid value for `datetime`, must not be `None`")

        self._datetime = datetime

    @property
    def description(self):
        """Gets the description of this EventData.


        :return: The description of this EventData.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EventData.


        :param description: The description of this EventData.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this EventData.


        :return: The id of this EventData.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EventData.


        :param id: The id of this EventData.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def lineup(self):
        """Gets the lineup of this EventData.


        :return: The lineup of this EventData.
        :rtype: List[str]
        """
        return self._lineup

    @lineup.setter
    def lineup(self, lineup):
        """Sets the lineup of this EventData.


        :param lineup: The lineup of this EventData.
        :type lineup: List[str]
        """
        if lineup is None:
            raise ValueError("Invalid value for `lineup`, must not be `None`")

        self._lineup = lineup

    @property
    def offers(self):
        """Gets the offers of this EventData.


        :return: The offers of this EventData.
        :rtype: List[OfferData]
        """
        return self._offers

    @offers.setter
    def offers(self, offers):
        """Sets the offers of this EventData.


        :param offers: The offers of this EventData.
        :type offers: List[OfferData]
        """
        if offers is None:
            raise ValueError("Invalid value for `offers`, must not be `None`")

        self._offers = offers

    @property
    def on_sale_datetime(self):
        """Gets the on_sale_datetime of this EventData.


        :return: The on_sale_datetime of this EventData.
        :rtype: str
        """
        return self._on_sale_datetime

    @on_sale_datetime.setter
    def on_sale_datetime(self, on_sale_datetime):
        """Sets the on_sale_datetime of this EventData.


        :param on_sale_datetime: The on_sale_datetime of this EventData.
        :type on_sale_datetime: str
        """
        if on_sale_datetime is None:
            raise ValueError("Invalid value for `on_sale_datetime`, must not be `None`")

        self._on_sale_datetime = on_sale_datetime

    @property
    def url(self):
        """Gets the url of this EventData.


        :return: The url of this EventData.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this EventData.


        :param url: The url of this EventData.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def venue(self):
        """Gets the venue of this EventData.


        :return: The venue of this EventData.
        :rtype: VenueData
        """
        return self._venue

    @venue.setter
    def venue(self, venue):
        """Sets the venue of this EventData.


        :param venue: The venue of this EventData.
        :type venue: VenueData
        """
        if venue is None:
            raise ValueError("Invalid value for `venue`, must not be `None`")

        self._venue = venue
