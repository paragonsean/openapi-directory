/*
 * Bandsintown API
 * # What is the Bandsintown API? The Bandsintown API is designed for artists and enterprises representing artists.  It offers read-only access to artist info and artist events: - artist info: returns the link to the Bandsintown artist page, the link to the artist photo, the current number of trackers and more - artist events: returns the list of events including their date and time, venue name and location, ticket links, lineup, description and the link to the Bandsintown event page  Note you can specify if you only want to return upcoming events, past events, all events, or events within a given date range.  # Getting Started - In order to use the Bandsintown API, you must read and accept our Terms and Conditions below and you must have written consent from Bandsintown Inc. Any other use of the Bandsintown API is prohibited. [Contact Bandsintown](http://help.bandsintown.com/) to tell us what you plan to do and request your personal application ID. - Find out about the API methods available and the format of the API responses below. Select the method you wish to use and try it out online with the app ID provided to you. - Call our Bandsintown API with the app ID provided straight from your website or back-end platform and choose which element of the API response you wish to display. Scroll to the bottom of this page to find out about the Models used. 
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OfferData;
import org.openapitools.client.model.VenueData;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EventData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:06:28.171832-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EventData {
  public static final String SERIALIZED_NAME_ARTIST_ID = "artist_id";
  @SerializedName(SERIALIZED_NAME_ARTIST_ID)
  private Integer artistId;

  public static final String SERIALIZED_NAME_DATETIME = "datetime";
  @SerializedName(SERIALIZED_NAME_DATETIME)
  private String datetime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_LINEUP = "lineup";
  @SerializedName(SERIALIZED_NAME_LINEUP)
  private List<String> lineup = new ArrayList<>();

  public static final String SERIALIZED_NAME_OFFERS = "offers";
  @SerializedName(SERIALIZED_NAME_OFFERS)
  private List<OfferData> offers = new ArrayList<>();

  public static final String SERIALIZED_NAME_ON_SALE_DATETIME = "on_sale_datetime";
  @SerializedName(SERIALIZED_NAME_ON_SALE_DATETIME)
  private String onSaleDatetime;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_VENUE = "venue";
  @SerializedName(SERIALIZED_NAME_VENUE)
  private VenueData venue;

  public EventData() {
  }

  public EventData artistId(Integer artistId) {
    this.artistId = artistId;
    return this;
  }

  /**
   * Get artistId
   * @return artistId
   */
  @javax.annotation.Nonnull
  public Integer getArtistId() {
    return artistId;
  }

  public void setArtistId(Integer artistId) {
    this.artistId = artistId;
  }


  public EventData datetime(String datetime) {
    this.datetime = datetime;
    return this;
  }

  /**
   * Get datetime
   * @return datetime
   */
  @javax.annotation.Nonnull
  public String getDatetime() {
    return datetime;
  }

  public void setDatetime(String datetime) {
    this.datetime = datetime;
  }


  public EventData description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public EventData id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public EventData lineup(List<String> lineup) {
    this.lineup = lineup;
    return this;
  }

  public EventData addLineupItem(String lineupItem) {
    if (this.lineup == null) {
      this.lineup = new ArrayList<>();
    }
    this.lineup.add(lineupItem);
    return this;
  }

  /**
   * Get lineup
   * @return lineup
   */
  @javax.annotation.Nonnull
  public List<String> getLineup() {
    return lineup;
  }

  public void setLineup(List<String> lineup) {
    this.lineup = lineup;
  }


  public EventData offers(List<OfferData> offers) {
    this.offers = offers;
    return this;
  }

  public EventData addOffersItem(OfferData offersItem) {
    if (this.offers == null) {
      this.offers = new ArrayList<>();
    }
    this.offers.add(offersItem);
    return this;
  }

  /**
   * Get offers
   * @return offers
   */
  @javax.annotation.Nonnull
  public List<OfferData> getOffers() {
    return offers;
  }

  public void setOffers(List<OfferData> offers) {
    this.offers = offers;
  }


  public EventData onSaleDatetime(String onSaleDatetime) {
    this.onSaleDatetime = onSaleDatetime;
    return this;
  }

  /**
   * Get onSaleDatetime
   * @return onSaleDatetime
   */
  @javax.annotation.Nonnull
  public String getOnSaleDatetime() {
    return onSaleDatetime;
  }

  public void setOnSaleDatetime(String onSaleDatetime) {
    this.onSaleDatetime = onSaleDatetime;
  }


  public EventData url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public EventData venue(VenueData venue) {
    this.venue = venue;
    return this;
  }

  /**
   * Get venue
   * @return venue
   */
  @javax.annotation.Nonnull
  public VenueData getVenue() {
    return venue;
  }

  public void setVenue(VenueData venue) {
    this.venue = venue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventData eventData = (EventData) o;
    return Objects.equals(this.artistId, eventData.artistId) &&
        Objects.equals(this.datetime, eventData.datetime) &&
        Objects.equals(this.description, eventData.description) &&
        Objects.equals(this.id, eventData.id) &&
        Objects.equals(this.lineup, eventData.lineup) &&
        Objects.equals(this.offers, eventData.offers) &&
        Objects.equals(this.onSaleDatetime, eventData.onSaleDatetime) &&
        Objects.equals(this.url, eventData.url) &&
        Objects.equals(this.venue, eventData.venue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(artistId, datetime, description, id, lineup, offers, onSaleDatetime, url, venue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventData {\n");
    sb.append("    artistId: ").append(toIndentedString(artistId)).append("\n");
    sb.append("    datetime: ").append(toIndentedString(datetime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lineup: ").append(toIndentedString(lineup)).append("\n");
    sb.append("    offers: ").append(toIndentedString(offers)).append("\n");
    sb.append("    onSaleDatetime: ").append(toIndentedString(onSaleDatetime)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    venue: ").append(toIndentedString(venue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("artist_id");
    openapiFields.add("datetime");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("lineup");
    openapiFields.add("offers");
    openapiFields.add("on_sale_datetime");
    openapiFields.add("url");
    openapiFields.add("venue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("artist_id");
    openapiRequiredFields.add("datetime");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("lineup");
    openapiRequiredFields.add("offers");
    openapiRequiredFields.add("on_sale_datetime");
    openapiRequiredFields.add("url");
    openapiRequiredFields.add("venue");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EventData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventData is not found in the empty JSON string", EventData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EventData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EventData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("artist_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `artist_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("artist_id").toString()));
      }
      if (!jsonObj.get("datetime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `datetime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("datetime").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("lineup") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("lineup").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `lineup` to be an array in the JSON string but got `%s`", jsonObj.get("lineup").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("offers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `offers` to be an array in the JSON string but got `%s`", jsonObj.get("offers").toString()));
      }

      JsonArray jsonArrayoffers = jsonObj.getAsJsonArray("offers");
      // validate the required field `offers` (array)
      for (int i = 0; i < jsonArrayoffers.size(); i++) {
        OfferData.validateJsonElement(jsonArrayoffers.get(i));
      };
      if (!jsonObj.get("on_sale_datetime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `on_sale_datetime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("on_sale_datetime").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      // validate the required field `venue`
      VenueData.validateJsonElement(jsonObj.get("venue"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventData.class));

       return (TypeAdapter<T>) new TypeAdapter<EventData>() {
           @Override
           public void write(JsonWriter out, EventData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EventData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EventData
   * @throws IOException if the JSON string is invalid with respect to EventData
   */
  public static EventData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventData.class);
  }

  /**
   * Convert an instance of EventData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

