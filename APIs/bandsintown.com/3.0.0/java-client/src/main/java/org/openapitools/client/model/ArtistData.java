/*
 * Bandsintown API
 * # What is the Bandsintown API? The Bandsintown API is designed for artists and enterprises representing artists.  It offers read-only access to artist info and artist events: - artist info: returns the link to the Bandsintown artist page, the link to the artist photo, the current number of trackers and more - artist events: returns the list of events including their date and time, venue name and location, ticket links, lineup, description and the link to the Bandsintown event page  Note you can specify if you only want to return upcoming events, past events, all events, or events within a given date range.  # Getting Started - In order to use the Bandsintown API, you must read and accept our Terms and Conditions below and you must have written consent from Bandsintown Inc. Any other use of the Bandsintown API is prohibited. [Contact Bandsintown](http://help.bandsintown.com/) to tell us what you plan to do and request your personal application ID. - Find out about the API methods available and the format of the API responses below. Select the method you wish to use and try it out online with the app ID provided to you. - Call our Bandsintown API with the app ID provided straight from your website or back-end platform and choose which element of the API response you wish to display. Scroll to the bottom of this page to find out about the Models used. 
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ArtistData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:06:28.171832-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ArtistData {
  public static final String SERIALIZED_NAME_FACEBOOK_PAGE_URL = "facebook_page_url";
  @SerializedName(SERIALIZED_NAME_FACEBOOK_PAGE_URL)
  private String facebookPageUrl;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_IMAGE_URL = "image_url";
  @SerializedName(SERIALIZED_NAME_IMAGE_URL)
  private String imageUrl;

  public static final String SERIALIZED_NAME_MBID = "mbid";
  @SerializedName(SERIALIZED_NAME_MBID)
  private String mbid;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_THUMB_URL = "thumb_url";
  @SerializedName(SERIALIZED_NAME_THUMB_URL)
  private String thumbUrl;

  public static final String SERIALIZED_NAME_TRACKER_COUNT = "tracker_count";
  @SerializedName(SERIALIZED_NAME_TRACKER_COUNT)
  private Integer trackerCount;

  public static final String SERIALIZED_NAME_UPCOMING_EVENT_COUNT = "upcoming_event_count";
  @SerializedName(SERIALIZED_NAME_UPCOMING_EVENT_COUNT)
  private Integer upcomingEventCount;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public ArtistData() {
  }

  public ArtistData facebookPageUrl(String facebookPageUrl) {
    this.facebookPageUrl = facebookPageUrl;
    return this;
  }

  /**
   * Get facebookPageUrl
   * @return facebookPageUrl
   */
  @javax.annotation.Nonnull
  public String getFacebookPageUrl() {
    return facebookPageUrl;
  }

  public void setFacebookPageUrl(String facebookPageUrl) {
    this.facebookPageUrl = facebookPageUrl;
  }


  public ArtistData id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public ArtistData imageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
    return this;
  }

  /**
   * Get imageUrl
   * @return imageUrl
   */
  @javax.annotation.Nonnull
  public String getImageUrl() {
    return imageUrl;
  }

  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }


  public ArtistData mbid(String mbid) {
    this.mbid = mbid;
    return this;
  }

  /**
   * Get mbid
   * @return mbid
   */
  @javax.annotation.Nonnull
  public String getMbid() {
    return mbid;
  }

  public void setMbid(String mbid) {
    this.mbid = mbid;
  }


  public ArtistData name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ArtistData thumbUrl(String thumbUrl) {
    this.thumbUrl = thumbUrl;
    return this;
  }

  /**
   * Get thumbUrl
   * @return thumbUrl
   */
  @javax.annotation.Nonnull
  public String getThumbUrl() {
    return thumbUrl;
  }

  public void setThumbUrl(String thumbUrl) {
    this.thumbUrl = thumbUrl;
  }


  public ArtistData trackerCount(Integer trackerCount) {
    this.trackerCount = trackerCount;
    return this;
  }

  /**
   * Get trackerCount
   * @return trackerCount
   */
  @javax.annotation.Nonnull
  public Integer getTrackerCount() {
    return trackerCount;
  }

  public void setTrackerCount(Integer trackerCount) {
    this.trackerCount = trackerCount;
  }


  public ArtistData upcomingEventCount(Integer upcomingEventCount) {
    this.upcomingEventCount = upcomingEventCount;
    return this;
  }

  /**
   * Get upcomingEventCount
   * @return upcomingEventCount
   */
  @javax.annotation.Nonnull
  public Integer getUpcomingEventCount() {
    return upcomingEventCount;
  }

  public void setUpcomingEventCount(Integer upcomingEventCount) {
    this.upcomingEventCount = upcomingEventCount;
  }


  public ArtistData url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ArtistData artistData = (ArtistData) o;
    return Objects.equals(this.facebookPageUrl, artistData.facebookPageUrl) &&
        Objects.equals(this.id, artistData.id) &&
        Objects.equals(this.imageUrl, artistData.imageUrl) &&
        Objects.equals(this.mbid, artistData.mbid) &&
        Objects.equals(this.name, artistData.name) &&
        Objects.equals(this.thumbUrl, artistData.thumbUrl) &&
        Objects.equals(this.trackerCount, artistData.trackerCount) &&
        Objects.equals(this.upcomingEventCount, artistData.upcomingEventCount) &&
        Objects.equals(this.url, artistData.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(facebookPageUrl, id, imageUrl, mbid, name, thumbUrl, trackerCount, upcomingEventCount, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ArtistData {\n");
    sb.append("    facebookPageUrl: ").append(toIndentedString(facebookPageUrl)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    mbid: ").append(toIndentedString(mbid)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    thumbUrl: ").append(toIndentedString(thumbUrl)).append("\n");
    sb.append("    trackerCount: ").append(toIndentedString(trackerCount)).append("\n");
    sb.append("    upcomingEventCount: ").append(toIndentedString(upcomingEventCount)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("facebook_page_url");
    openapiFields.add("id");
    openapiFields.add("image_url");
    openapiFields.add("mbid");
    openapiFields.add("name");
    openapiFields.add("thumb_url");
    openapiFields.add("tracker_count");
    openapiFields.add("upcoming_event_count");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("facebook_page_url");
    openapiRequiredFields.add("image_url");
    openapiRequiredFields.add("mbid");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("thumb_url");
    openapiRequiredFields.add("tracker_count");
    openapiRequiredFields.add("upcoming_event_count");
    openapiRequiredFields.add("url");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ArtistData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ArtistData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ArtistData is not found in the empty JSON string", ArtistData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ArtistData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ArtistData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ArtistData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("facebook_page_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `facebook_page_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("facebook_page_url").toString()));
      }
      if (!jsonObj.get("image_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_url").toString()));
      }
      if (!jsonObj.get("mbid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mbid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mbid").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("thumb_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thumb_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thumb_url").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ArtistData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ArtistData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ArtistData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ArtistData.class));

       return (TypeAdapter<T>) new TypeAdapter<ArtistData>() {
           @Override
           public void write(JsonWriter out, ArtistData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ArtistData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ArtistData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ArtistData
   * @throws IOException if the JSON string is invalid with respect to ArtistData
   */
  public static ArtistData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ArtistData.class);
  }

  /**
   * Convert an instance of ArtistData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

