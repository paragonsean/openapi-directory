/*
 * BulkSMS JSON REST API
 * ## Overview  The JSON REST API allows you to submit and receive [BulkSMS](https://www.bulksms.com/) messages. You can also get access to past messages and see your account profile.  The base URL to use for this service is `https://api.bulksms.com/v1`.  The base URL cannot be used on its own; you must append a path that identifies an operation and you may have to specify some path parameters as well.  [Click here](/developer/) to go to the main BulkSMS developer site.  In order to give you an idea on how the API can be used, some JSON snippets are provided below.  Have a look at the [messages section](#tag/Message) for more information.  Probably the most simple example  ``` {     \"to\": \"+27001234567\",     \"body\": \"Hello World!\" } ```   You can send unicode automatically using the `auto-unicode` query parameter.  Alternatively, you can specify `UNICODE` for the `encoding` property in the request body.  Please note: when `auto-unicode` is specified and the value of the `encoding` property is `UNICODE`, the message will always be sent as `UNICODE`.  Here is an example that sets the `encoding` explicitly  ``` {   \"to\": \"+27001234567\",   \"body\": \"Dobr치 pr치ce! Jak se m치코?\",   \"encoding\": \"UNICODE\" } ```  You can also specify a from number  ``` {     \"from\": \"+27007654321\",     \"to\": \"+27001234567\",     \"body\": \"Hello World!\" } ```  Similar to above, but repliable  ``` {     \"from\": { \"type\": \"REPLIABLE\" },     \"to\": \"+27001234567\",     \"body\": \"Hello World!\" } ```  A message to a group called Everyone  ``` {     \"to\": { \"type\": \"GROUP\", \"name\": \"Everyone\" },     \"body\": \"Hello World!\" } ```  A message to multiple recipients  ``` {     \"to\": [\"+27001234567\", \"+27002345678\", \"+27003456789\"],     \"body\": \"Happy Holidays!\" } ```  Sending more than one message in the same request  ``` [     {         \"to\": \"+27001234567\",         \"body\": \"Hello World!\"     },     {         \"to\": \"+27002345678\",         \"body\": \"Hello Universe!\"     } ] ```  **The insecure base URL `http://api.bulksms.com/v1` is deprecated** and may in future result in a `301` redirect response, or insecure requests may be rejected outright. Please use the secure (`https`) URI above.  ### HTTP Content Type  All API methods expect requests to supply a `Content-Type` header with the value `application/json`. All responses will have the `Content-Type` header set to `application/json`.  ### JSON Formatting  You are advised to format your JSON resources according to strict JSON format rules. While the API does attempt to parse strictly invalid JSON documents, doing so may lead to incorrect interpretation and unexpected results.  Good JSON libraries will produce valid JSON suitable for submission, but if you are manually generating the JSON text, be careful to follow the JSON format. This include correct escaping of control characters and double quoting of property names.  See the [JSON specification](https://tools.ietf.org/html/rfc4627) for further information.  ### Date Formatting  Dates are formatted according to ISO-8601, such as `1970-01-01T10:00:00+01:00` for 1st January 1970, 10AM UTC+1.  See the [Wikipedia ISO 8601 reference](https://en.wikipedia.org/wiki/ISO_8601) for further information.  Specifically, calendar dates are formatted with the 'extended' format `YYYY-MM-DD`. Basic format, week dates and ordinal dates are not supported. Times are also formatted in the 'extended' format `hh:mm:ss`. Hours, minutes and seconds are mandatory. Offset from UTC must be provided; this is to ensure that there is no misunderstanding regarding times provided to the API.  The format we look for is `yyyy-MM-ddThh:mm:ss[Z|[+-]hh:mm]`  Examples of valid date/times are`2011-12-31T12:00:00Z` `2011-12-31T12:00:00+02:00`  ### Entity Format Modifications  It is expected that over time some changes will be made to the request and response formats of various methods available in the API. Where possible, these will be implemented in a backwards compatible way. To make this possible you are required to ignore unknown properties. This enables the addition of information in response documents while maintaining compatibility with older clients.  ### Optional Request Entity Properties  There are many instances where requests can be made without having to specify every single property allowable in the request format. Any such optional properties are noted as such in the documentation and their default value is noted. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.MessageStatus;
import org.openapitools.client.model.MessageSubmission;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Message
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:01.416061-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Message {
  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private Object body = null;

  public static final String SERIALIZED_NAME_CREDIT_COST = "creditCost";
  @SerializedName(SERIALIZED_NAME_CREDIT_COST)
  private Float creditCost;

  /**
   * The type of the content.  See the &#x60;encoding&#x60; field for more information.
   */
  @JsonAdapter(EncodingEnum.Adapter.class)
  public enum EncodingEnum {
    TEXT("TEXT"),
    
    UNICODE("UNICODE"),
    
    BINARY("BINARY");

    private String value;

    EncodingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EncodingEnum fromValue(String value) {
      for (EncodingEnum b : EncodingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EncodingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EncodingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EncodingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EncodingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EncodingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENCODING = "encoding";
  @SerializedName(SERIALIZED_NAME_ENCODING)
  private EncodingEnum encoding;

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  private String from;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MESSAGE_CLASS = "messageClass";
  @SerializedName(SERIALIZED_NAME_MESSAGE_CLASS)
  private Integer messageClass;

  public static final String SERIALIZED_NAME_NUMBER_OF_PARTS = "numberOfParts";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_PARTS)
  private Integer numberOfParts;

  public static final String SERIALIZED_NAME_PROTOCOL_ID = "protocolId";
  @SerializedName(SERIALIZED_NAME_PROTOCOL_ID)
  private Integer protocolId;

  public static final String SERIALIZED_NAME_RELATED_SENT_MESSAGE_ID = "relatedSentMessageId";
  @SerializedName(SERIALIZED_NAME_RELATED_SENT_MESSAGE_ID)
  private String relatedSentMessageId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private MessageStatus status;

  public static final String SERIALIZED_NAME_SUBMISSION = "submission";
  @SerializedName(SERIALIZED_NAME_SUBMISSION)
  private MessageSubmission submission;

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private String to;

  /**
   * The message direction
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    SENT("SENT"),
    
    RECEIVED("RECEIVED");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_USER_SUPPLIED_ID = "userSuppliedId";
  @SerializedName(SERIALIZED_NAME_USER_SUPPLIED_ID)
  private String userSuppliedId;

  public Message() {
  }

  public Message body(Object body) {
    this.body = body;
    return this;
  }

  /**
   * The content of the message
   * @return body
   */
  @javax.annotation.Nullable
  public Object getBody() {
    return body;
  }

  public void setBody(Object body) {
    this.body = body;
  }


  public Message creditCost(Float creditCost) {
    this.creditCost = creditCost;
    return this;
  }

  /**
   * The cost of the message (in credits).   Note that this field does not have a value in the submission response.
   * @return creditCost
   */
  @javax.annotation.Nullable
  public Float getCreditCost() {
    return creditCost;
  }

  public void setCreditCost(Float creditCost) {
    this.creditCost = creditCost;
  }


  public Message encoding(EncodingEnum encoding) {
    this.encoding = encoding;
    return this;
  }

  /**
   * The type of the content.  See the &#x60;encoding&#x60; field for more information.
   * @return encoding
   */
  @javax.annotation.Nullable
  public EncodingEnum getEncoding() {
    return encoding;
  }

  public void setEncoding(EncodingEnum encoding) {
    this.encoding = encoding;
  }


  public Message from(String from) {
    this.from = from;
    return this;
  }

  /**
   * The address part of the sender id
   * @return from
   */
  @javax.annotation.Nullable
  public String getFrom() {
    return from;
  }

  public void setFrom(String from) {
    this.from = from;
  }


  public Message id(String id) {
    this.id = id;
    return this;
  }

  /**
   * A unique identifier that is assigned when the message is created.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Message messageClass(Integer messageClass) {
    this.messageClass = messageClass;
    return this;
  }

  /**
   * See the &#x60;messageClass&#x60; field for more information.
   * @return messageClass
   */
  @javax.annotation.Nullable
  public Integer getMessageClass() {
    return messageClass;
  }

  public void setMessageClass(Integer messageClass) {
    this.messageClass = messageClass;
  }


  public Message numberOfParts(Integer numberOfParts) {
    this.numberOfParts = numberOfParts;
    return this;
  }

  /**
   * The number of parts.  If this is a concatenated message, the number of parts will be more than 1.  Note that this field does not have a value in the submission response.
   * @return numberOfParts
   */
  @javax.annotation.Nullable
  public Integer getNumberOfParts() {
    return numberOfParts;
  }

  public void setNumberOfParts(Integer numberOfParts) {
    this.numberOfParts = numberOfParts;
  }


  public Message protocolId(Integer protocolId) {
    this.protocolId = protocolId;
    return this;
  }

  /**
   * See the &#x60;protocolId&#x60; field for more information.
   * @return protocolId
   */
  @javax.annotation.Nullable
  public Integer getProtocolId() {
    return protocolId;
  }

  public void setProtocolId(Integer protocolId) {
    this.protocolId = protocolId;
  }


  public Message relatedSentMessageId(String relatedSentMessageId) {
    this.relatedSentMessageId = relatedSentMessageId;
    return this;
  }

  /**
   * This field has a value only if the type is RECEIVED. With SMS messages, it is not possible to link a reply directly with a specific sent message.  However, if you specified &#x60;REPLIABLE&#x60; in the &#x60;from&#x60; property, BulkSMS will link any reply to the most recent message sent to a given phone number.  The &#x60;relatedSentMessageId&#x60; property keeps the information about this link.  You can use this property to derive an implicit conversation from a set of messages.   - If a received reply message has a &#x60;relatedSentMessageId&#x60;, you can use it to retrieve the last message that was sent before the reply was received.   - If you have the &#x60;id&#x60; of the sent message and you want all the received messages that relate to it, you can use the List Related Messages Operation. 
   * @return relatedSentMessageId
   */
  @javax.annotation.Nullable
  public String getRelatedSentMessageId() {
    return relatedSentMessageId;
  }

  public void setRelatedSentMessageId(String relatedSentMessageId) {
    this.relatedSentMessageId = relatedSentMessageId;
  }


  public Message status(MessageStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public MessageStatus getStatus() {
    return status;
  }

  public void setStatus(MessageStatus status) {
    this.status = status;
  }


  public Message submission(MessageSubmission submission) {
    this.submission = submission;
    return this;
  }

  /**
   * Get submission
   * @return submission
   */
  @javax.annotation.Nullable
  public MessageSubmission getSubmission() {
    return submission;
  }

  public void setSubmission(MessageSubmission submission) {
    this.submission = submission;
  }


  public Message to(String to) {
    this.to = to;
    return this;
  }

  /**
   * The phone number of the recipient
   * @return to
   */
  @javax.annotation.Nonnull
  public String getTo() {
    return to;
  }

  public void setTo(String to) {
    this.to = to;
  }


  public Message type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The message direction
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public Message userSuppliedId(String userSuppliedId) {
    this.userSuppliedId = userSuppliedId;
    return this;
  }

  /**
   * This is the value you supplied in the &#x60;userSuppliedId&#x60; field. Has a value only if the &#x60;type&#x60; is SENT. 
   * @return userSuppliedId
   */
  @javax.annotation.Nullable
  public String getUserSuppliedId() {
    return userSuppliedId;
  }

  public void setUserSuppliedId(String userSuppliedId) {
    this.userSuppliedId = userSuppliedId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Message message = (Message) o;
    return Objects.equals(this.body, message.body) &&
        Objects.equals(this.creditCost, message.creditCost) &&
        Objects.equals(this.encoding, message.encoding) &&
        Objects.equals(this.from, message.from) &&
        Objects.equals(this.id, message.id) &&
        Objects.equals(this.messageClass, message.messageClass) &&
        Objects.equals(this.numberOfParts, message.numberOfParts) &&
        Objects.equals(this.protocolId, message.protocolId) &&
        Objects.equals(this.relatedSentMessageId, message.relatedSentMessageId) &&
        Objects.equals(this.status, message.status) &&
        Objects.equals(this.submission, message.submission) &&
        Objects.equals(this.to, message.to) &&
        Objects.equals(this.type, message.type) &&
        Objects.equals(this.userSuppliedId, message.userSuppliedId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(body, creditCost, encoding, from, id, messageClass, numberOfParts, protocolId, relatedSentMessageId, status, submission, to, type, userSuppliedId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Message {\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    creditCost: ").append(toIndentedString(creditCost)).append("\n");
    sb.append("    encoding: ").append(toIndentedString(encoding)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    messageClass: ").append(toIndentedString(messageClass)).append("\n");
    sb.append("    numberOfParts: ").append(toIndentedString(numberOfParts)).append("\n");
    sb.append("    protocolId: ").append(toIndentedString(protocolId)).append("\n");
    sb.append("    relatedSentMessageId: ").append(toIndentedString(relatedSentMessageId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    submission: ").append(toIndentedString(submission)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    userSuppliedId: ").append(toIndentedString(userSuppliedId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("body");
    openapiFields.add("creditCost");
    openapiFields.add("encoding");
    openapiFields.add("from");
    openapiFields.add("id");
    openapiFields.add("messageClass");
    openapiFields.add("numberOfParts");
    openapiFields.add("protocolId");
    openapiFields.add("relatedSentMessageId");
    openapiFields.add("status");
    openapiFields.add("submission");
    openapiFields.add("to");
    openapiFields.add("type");
    openapiFields.add("userSuppliedId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("body");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("to");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Message
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Message.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Message is not found in the empty JSON string", Message.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Message.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Message` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Message.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("encoding") != null && !jsonObj.get("encoding").isJsonNull()) && !jsonObj.get("encoding").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encoding` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encoding").toString()));
      }
      // validate the optional field `encoding`
      if (jsonObj.get("encoding") != null && !jsonObj.get("encoding").isJsonNull()) {
        EncodingEnum.validateJsonElement(jsonObj.get("encoding"));
      }
      if ((jsonObj.get("from") != null && !jsonObj.get("from").isJsonNull()) && !jsonObj.get("from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("from").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("relatedSentMessageId") != null && !jsonObj.get("relatedSentMessageId").isJsonNull()) && !jsonObj.get("relatedSentMessageId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `relatedSentMessageId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("relatedSentMessageId").toString()));
      }
      // validate the required field `status`
      MessageStatus.validateJsonElement(jsonObj.get("status"));
      // validate the optional field `submission`
      if (jsonObj.get("submission") != null && !jsonObj.get("submission").isJsonNull()) {
        MessageSubmission.validateJsonElement(jsonObj.get("submission"));
      }
      if (!jsonObj.get("to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("to").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
      if ((jsonObj.get("userSuppliedId") != null && !jsonObj.get("userSuppliedId").isJsonNull()) && !jsonObj.get("userSuppliedId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userSuppliedId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userSuppliedId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Message.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Message' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Message> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Message.class));

       return (TypeAdapter<T>) new TypeAdapter<Message>() {
           @Override
           public void write(JsonWriter out, Message value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Message read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Message given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Message
   * @throws IOException if the JSON string is invalid with respect to Message
   */
  public static Message fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Message.class);
  }

  /**
   * Convert an instance of Message to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

