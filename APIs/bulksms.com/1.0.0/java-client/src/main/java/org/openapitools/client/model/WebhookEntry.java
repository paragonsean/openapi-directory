/*
 * BulkSMS JSON REST API
 * ## Overview  The JSON REST API allows you to submit and receive [BulkSMS](https://www.bulksms.com/) messages. You can also get access to past messages and see your account profile.  The base URL to use for this service is `https://api.bulksms.com/v1`.  The base URL cannot be used on its own; you must append a path that identifies an operation and you may have to specify some path parameters as well.  [Click here](/developer/) to go to the main BulkSMS developer site.  In order to give you an idea on how the API can be used, some JSON snippets are provided below.  Have a look at the [messages section](#tag/Message) for more information.  Probably the most simple example  ``` {     \"to\": \"+27001234567\",     \"body\": \"Hello World!\" } ```   You can send unicode automatically using the `auto-unicode` query parameter.  Alternatively, you can specify `UNICODE` for the `encoding` property in the request body.  Please note: when `auto-unicode` is specified and the value of the `encoding` property is `UNICODE`, the message will always be sent as `UNICODE`.  Here is an example that sets the `encoding` explicitly  ``` {   \"to\": \"+27001234567\",   \"body\": \"Dobr치 pr치ce! Jak se m치코?\",   \"encoding\": \"UNICODE\" } ```  You can also specify a from number  ``` {     \"from\": \"+27007654321\",     \"to\": \"+27001234567\",     \"body\": \"Hello World!\" } ```  Similar to above, but repliable  ``` {     \"from\": { \"type\": \"REPLIABLE\" },     \"to\": \"+27001234567\",     \"body\": \"Hello World!\" } ```  A message to a group called Everyone  ``` {     \"to\": { \"type\": \"GROUP\", \"name\": \"Everyone\" },     \"body\": \"Hello World!\" } ```  A message to multiple recipients  ``` {     \"to\": [\"+27001234567\", \"+27002345678\", \"+27003456789\"],     \"body\": \"Happy Holidays!\" } ```  Sending more than one message in the same request  ``` [     {         \"to\": \"+27001234567\",         \"body\": \"Hello World!\"     },     {         \"to\": \"+27002345678\",         \"body\": \"Hello Universe!\"     } ] ```  **The insecure base URL `http://api.bulksms.com/v1` is deprecated** and may in future result in a `301` redirect response, or insecure requests may be rejected outright. Please use the secure (`https`) URI above.  ### HTTP Content Type  All API methods expect requests to supply a `Content-Type` header with the value `application/json`. All responses will have the `Content-Type` header set to `application/json`.  ### JSON Formatting  You are advised to format your JSON resources according to strict JSON format rules. While the API does attempt to parse strictly invalid JSON documents, doing so may lead to incorrect interpretation and unexpected results.  Good JSON libraries will produce valid JSON suitable for submission, but if you are manually generating the JSON text, be careful to follow the JSON format. This include correct escaping of control characters and double quoting of property names.  See the [JSON specification](https://tools.ietf.org/html/rfc4627) for further information.  ### Date Formatting  Dates are formatted according to ISO-8601, such as `1970-01-01T10:00:00+01:00` for 1st January 1970, 10AM UTC+1.  See the [Wikipedia ISO 8601 reference](https://en.wikipedia.org/wiki/ISO_8601) for further information.  Specifically, calendar dates are formatted with the 'extended' format `YYYY-MM-DD`. Basic format, week dates and ordinal dates are not supported. Times are also formatted in the 'extended' format `hh:mm:ss`. Hours, minutes and seconds are mandatory. Offset from UTC must be provided; this is to ensure that there is no misunderstanding regarding times provided to the API.  The format we look for is `yyyy-MM-ddThh:mm:ss[Z|[+-]hh:mm]`  Examples of valid date/times are`2011-12-31T12:00:00Z` `2011-12-31T12:00:00+02:00`  ### Entity Format Modifications  It is expected that over time some changes will be made to the request and response formats of various methods available in the API. Where possible, these will be implemented in a backwards compatible way. To make this possible you are required to ignore unknown properties. This enables the addition of information in response documents while maintaining compatibility with older clients.  ### Optional Request Entity Properties  There are many instances where requests can be made without having to specify every single property allowable in the request format. Any such optional properties are noted as such in the documentation and their default value is noted. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WebhookEntry
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:01.416061-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WebhookEntry {
  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_CONTACT_EMAIL_ADDRESS = "contactEmailAddress";
  @SerializedName(SERIALIZED_NAME_CONTACT_EMAIL_ADDRESS)
  private String contactEmailAddress;

  /**
   * Specifies how to invoke your webhook.  If the value is &#x60;ONE&#x60; the array POSTed to your webhook will contain no more than a single message.  Use this option if your webhook logic is unable to handle more than one messages at a time.  If the value is &#x60;MANY&#x60; the array POSTed to your webhook can contain up to 10 messages.  This is the recommended option.  The number of calls made to your webhook would be less and this will speed up your total processing time. If your webhook fails for an invoke that has more than one message, each message in the array will automatically be retried one at a time.   This value defaults to &#x60;ONE&#x60; - but it is recommended that you set this property to &#x60;MANY&#x60;. 
   */
  @JsonAdapter(InvokeOptionEnum.Adapter.class)
  public enum InvokeOptionEnum {
    ONE("ONE"),
    
    MANY("MANY");

    private String value;

    InvokeOptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InvokeOptionEnum fromValue(String value) {
      for (InvokeOptionEnum b : InvokeOptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InvokeOptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InvokeOptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InvokeOptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InvokeOptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InvokeOptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INVOKE_OPTION = "invokeOption";
  @SerializedName(SERIALIZED_NAME_INVOKE_OPTION)
  private InvokeOptionEnum invokeOption;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ON_WEB_APP = "onWebApp";
  @SerializedName(SERIALIZED_NAME_ON_WEB_APP)
  private Boolean onWebApp;

  /**
   * Specifies when the webhook will be triggered.    Please note the values are case sensitive.  If the value is &#x60;SENT&#x60;, the webhook will be called when a status update becomes available for a message you sent (i.e. a mobile terminating (MT) message).  If the value is &#x60;RECEIVED&#x60;, the webhook will be called when a message is received (i.e. a mobile originating (MO) message).  Note that this field forces you to create two separate webhook entries if you want to collect all messages.  However,  you can use the same &#x60;url&#x60; for both webhooks if you want. 
   */
  @JsonAdapter(TriggerScopeEnum.Adapter.class)
  public enum TriggerScopeEnum {
    SENT("SENT"),
    
    RECEIVED("RECEIVED");

    private String value;

    TriggerScopeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TriggerScopeEnum fromValue(String value) {
      for (TriggerScopeEnum b : TriggerScopeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TriggerScopeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TriggerScopeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TriggerScopeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TriggerScopeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TriggerScopeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRIGGER_SCOPE = "triggerScope";
  @SerializedName(SERIALIZED_NAME_TRIGGER_SCOPE)
  private TriggerScopeEnum triggerScope;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public WebhookEntry() {
  }

  public WebhookEntry active(Boolean active) {
    this.active = active;
    return this;
  }

  /**
   * Indicates whether you want the webhook activated.  If the value is &#x60;true&#x60;, the webhook at the given &#x60;url&#x60; will be invoked with an empty array (&#x60;[]&#x60;) as part of the validation process. If the webhook responds with a &#x60;2xx&#x60; status code, the submission is accepted; if not the webhook is not created (or updated).  If the value is &#x60;false&#x60; the webhook will be inactive, and it will not be invoked when messages are &#x60;SENT&#x60; or &#x60;RECEIVED&#x60;.  The default value is &#x60;true&#x60;. 
   * @return active
   */
  @javax.annotation.Nullable
  public Boolean getActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }


  public WebhookEntry contactEmailAddress(String contactEmailAddress) {
    this.contactEmailAddress = contactEmailAddress;
    return this;
  }

  /**
   * The email address to which emails will be sent if there are problem with invoking the webhook.  The value must be a valid email address. If this value is &#x60;null&#x60;, no email will be sent.  It is &#x60;null&#x60; by default. 
   * @return contactEmailAddress
   */
  @javax.annotation.Nullable
  public String getContactEmailAddress() {
    return contactEmailAddress;
  }

  public void setContactEmailAddress(String contactEmailAddress) {
    this.contactEmailAddress = contactEmailAddress;
  }


  public WebhookEntry invokeOption(InvokeOptionEnum invokeOption) {
    this.invokeOption = invokeOption;
    return this;
  }

  /**
   * Specifies how to invoke your webhook.  If the value is &#x60;ONE&#x60; the array POSTed to your webhook will contain no more than a single message.  Use this option if your webhook logic is unable to handle more than one messages at a time.  If the value is &#x60;MANY&#x60; the array POSTed to your webhook can contain up to 10 messages.  This is the recommended option.  The number of calls made to your webhook would be less and this will speed up your total processing time. If your webhook fails for an invoke that has more than one message, each message in the array will automatically be retried one at a time.   This value defaults to &#x60;ONE&#x60; - but it is recommended that you set this property to &#x60;MANY&#x60;. 
   * @return invokeOption
   */
  @javax.annotation.Nullable
  public InvokeOptionEnum getInvokeOption() {
    return invokeOption;
  }

  public void setInvokeOption(InvokeOptionEnum invokeOption) {
    this.invokeOption = invokeOption;
  }


  public WebhookEntry name(String name) {
    this.name = name;
    return this;
  }

  /**
   * A text identifier for the webhook. More than one webhook cannot have the same name. 
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public WebhookEntry onWebApp(Boolean onWebApp) {
    this.onWebApp = onWebApp;
    return this;
  }

  /**
   * Indicates whether you want to show this webhook on the Web App.  Webhooks shown there can be updated by the user that use the public Web site.  The default value is &#x60;true&#x60;. 
   * @return onWebApp
   */
  @javax.annotation.Nullable
  public Boolean getOnWebApp() {
    return onWebApp;
  }

  public void setOnWebApp(Boolean onWebApp) {
    this.onWebApp = onWebApp;
  }


  public WebhookEntry triggerScope(TriggerScopeEnum triggerScope) {
    this.triggerScope = triggerScope;
    return this;
  }

  /**
   * Specifies when the webhook will be triggered.    Please note the values are case sensitive.  If the value is &#x60;SENT&#x60;, the webhook will be called when a status update becomes available for a message you sent (i.e. a mobile terminating (MT) message).  If the value is &#x60;RECEIVED&#x60;, the webhook will be called when a message is received (i.e. a mobile originating (MO) message).  Note that this field forces you to create two separate webhook entries if you want to collect all messages.  However,  you can use the same &#x60;url&#x60; for both webhooks if you want. 
   * @return triggerScope
   */
  @javax.annotation.Nonnull
  public TriggerScopeEnum getTriggerScope() {
    return triggerScope;
  }

  public void setTriggerScope(TriggerScopeEnum triggerScope) {
    this.triggerScope = triggerScope;
  }


  public WebhookEntry url(String url) {
    this.url = url;
    return this;
  }

  /**
   * The location of the webhook.  In addition to being a [valid URI](https://en.wikipedia.org/wiki/Uniform_Resource_Identifier#Syntax), the url must also start with &#x60;http&#x60; or &#x60;https&#x60;. 
   * @return url
   */
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebhookEntry webhookEntry = (WebhookEntry) o;
    return Objects.equals(this.active, webhookEntry.active) &&
        Objects.equals(this.contactEmailAddress, webhookEntry.contactEmailAddress) &&
        Objects.equals(this.invokeOption, webhookEntry.invokeOption) &&
        Objects.equals(this.name, webhookEntry.name) &&
        Objects.equals(this.onWebApp, webhookEntry.onWebApp) &&
        Objects.equals(this.triggerScope, webhookEntry.triggerScope) &&
        Objects.equals(this.url, webhookEntry.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, contactEmailAddress, invokeOption, name, onWebApp, triggerScope, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebhookEntry {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    contactEmailAddress: ").append(toIndentedString(contactEmailAddress)).append("\n");
    sb.append("    invokeOption: ").append(toIndentedString(invokeOption)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    onWebApp: ").append(toIndentedString(onWebApp)).append("\n");
    sb.append("    triggerScope: ").append(toIndentedString(triggerScope)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active");
    openapiFields.add("contactEmailAddress");
    openapiFields.add("invokeOption");
    openapiFields.add("name");
    openapiFields.add("onWebApp");
    openapiFields.add("triggerScope");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("triggerScope");
    openapiRequiredFields.add("url");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WebhookEntry
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WebhookEntry.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebhookEntry is not found in the empty JSON string", WebhookEntry.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WebhookEntry.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WebhookEntry` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WebhookEntry.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("contactEmailAddress") != null && !jsonObj.get("contactEmailAddress").isJsonNull()) && !jsonObj.get("contactEmailAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contactEmailAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contactEmailAddress").toString()));
      }
      if ((jsonObj.get("invokeOption") != null && !jsonObj.get("invokeOption").isJsonNull()) && !jsonObj.get("invokeOption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invokeOption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invokeOption").toString()));
      }
      // validate the optional field `invokeOption`
      if (jsonObj.get("invokeOption") != null && !jsonObj.get("invokeOption").isJsonNull()) {
        InvokeOptionEnum.validateJsonElement(jsonObj.get("invokeOption"));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("triggerScope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `triggerScope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("triggerScope").toString()));
      }
      // validate the required field `triggerScope`
      TriggerScopeEnum.validateJsonElement(jsonObj.get("triggerScope"));
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebhookEntry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebhookEntry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebhookEntry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebhookEntry.class));

       return (TypeAdapter<T>) new TypeAdapter<WebhookEntry>() {
           @Override
           public void write(JsonWriter out, WebhookEntry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WebhookEntry read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WebhookEntry given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WebhookEntry
   * @throws IOException if the JSON string is invalid with respect to WebhookEntry
   */
  public static WebhookEntry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebhookEntry.class);
  }

  /**
   * Convert an instance of WebhookEntry to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

