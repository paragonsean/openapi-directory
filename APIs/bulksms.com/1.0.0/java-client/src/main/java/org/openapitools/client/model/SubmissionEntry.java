/*
 * BulkSMS JSON REST API
 * ## Overview  The JSON REST API allows you to submit and receive [BulkSMS](https://www.bulksms.com/) messages. You can also get access to past messages and see your account profile.  The base URL to use for this service is `https://api.bulksms.com/v1`.  The base URL cannot be used on its own; you must append a path that identifies an operation and you may have to specify some path parameters as well.  [Click here](/developer/) to go to the main BulkSMS developer site.  In order to give you an idea on how the API can be used, some JSON snippets are provided below.  Have a look at the [messages section](#tag/Message) for more information.  Probably the most simple example  ``` {     \"to\": \"+27001234567\",     \"body\": \"Hello World!\" } ```   You can send unicode automatically using the `auto-unicode` query parameter.  Alternatively, you can specify `UNICODE` for the `encoding` property in the request body.  Please note: when `auto-unicode` is specified and the value of the `encoding` property is `UNICODE`, the message will always be sent as `UNICODE`.  Here is an example that sets the `encoding` explicitly  ``` {   \"to\": \"+27001234567\",   \"body\": \"Dobr치 pr치ce! Jak se m치코?\",   \"encoding\": \"UNICODE\" } ```  You can also specify a from number  ``` {     \"from\": \"+27007654321\",     \"to\": \"+27001234567\",     \"body\": \"Hello World!\" } ```  Similar to above, but repliable  ``` {     \"from\": { \"type\": \"REPLIABLE\" },     \"to\": \"+27001234567\",     \"body\": \"Hello World!\" } ```  A message to a group called Everyone  ``` {     \"to\": { \"type\": \"GROUP\", \"name\": \"Everyone\" },     \"body\": \"Hello World!\" } ```  A message to multiple recipients  ``` {     \"to\": [\"+27001234567\", \"+27002345678\", \"+27003456789\"],     \"body\": \"Happy Holidays!\" } ```  Sending more than one message in the same request  ``` [     {         \"to\": \"+27001234567\",         \"body\": \"Hello World!\"     },     {         \"to\": \"+27002345678\",         \"body\": \"Hello Universe!\"     } ] ```  **The insecure base URL `http://api.bulksms.com/v1` is deprecated** and may in future result in a `301` redirect response, or insecure requests may be rejected outright. Please use the secure (`https`) URI above.  ### HTTP Content Type  All API methods expect requests to supply a `Content-Type` header with the value `application/json`. All responses will have the `Content-Type` header set to `application/json`.  ### JSON Formatting  You are advised to format your JSON resources according to strict JSON format rules. While the API does attempt to parse strictly invalid JSON documents, doing so may lead to incorrect interpretation and unexpected results.  Good JSON libraries will produce valid JSON suitable for submission, but if you are manually generating the JSON text, be careful to follow the JSON format. This include correct escaping of control characters and double quoting of property names.  See the [JSON specification](https://tools.ietf.org/html/rfc4627) for further information.  ### Date Formatting  Dates are formatted according to ISO-8601, such as `1970-01-01T10:00:00+01:00` for 1st January 1970, 10AM UTC+1.  See the [Wikipedia ISO 8601 reference](https://en.wikipedia.org/wiki/ISO_8601) for further information.  Specifically, calendar dates are formatted with the 'extended' format `YYYY-MM-DD`. Basic format, week dates and ordinal dates are not supported. Times are also formatted in the 'extended' format `hh:mm:ss`. Hours, minutes and seconds are mandatory. Offset from UTC must be provided; this is to ensure that there is no misunderstanding regarding times provided to the API.  The format we look for is `yyyy-MM-ddThh:mm:ss[Z|[+-]hh:mm]`  Examples of valid date/times are`2011-12-31T12:00:00Z` `2011-12-31T12:00:00+02:00`  ### Entity Format Modifications  It is expected that over time some changes will be made to the request and response formats of various methods available in the API. Where possible, these will be implemented in a backwards compatible way. To make this possible you are required to ignore unknown properties. This enables the addition of information in response documents while maintaining compatibility with older clients.  ### Optional Request Entity Properties  There are many instances where requests can be made without having to specify every single property allowable in the request format. Any such optional properties are noted as such in the documentation and their default value is noted. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SubmissionEntryFrom;
import org.openapitools.client.model.SubmissionEntryToInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An object that you use when posting messages.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:01.416061-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SubmissionEntry {
  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private String body;

  /**
   * The type of delivery reports to request from the delivering network. The default value  is &#x60;ALL&#x60;. Please note that not all networks support delivery reports. ALL. All possible delivery reports ERRORS. Only error delivery reports NONE. No delivery reports
   */
  @JsonAdapter(DeliveryReportsEnum.Adapter.class)
  public enum DeliveryReportsEnum {
    ALL("ALL"),
    
    ERRORS("ERRORS"),
    
    NONE("NONE");

    private String value;

    DeliveryReportsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DeliveryReportsEnum fromValue(String value) {
      for (DeliveryReportsEnum b : DeliveryReportsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DeliveryReportsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeliveryReportsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeliveryReportsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DeliveryReportsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DeliveryReportsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DELIVERY_REPORTS = "deliveryReports";
  @SerializedName(SERIALIZED_NAME_DELIVERY_REPORTS)
  private DeliveryReportsEnum deliveryReports;

  /**
   * Describes the content of the message body.  Typically this is TEXT, which is the default if no value is provided.  If you need to send characters that are not covered by the [GSM 03.38](https://en.wikipedia.org/wiki/GSM_03.38) character set you will need to specify UNICODE.  If you want to send a sequence of bytes, you must use BINARY.  You can also or use the &#x60;auto-unicode&#x60; parameter of the Send Messages Operation.     If you supply the value of &#x60;TEXT&#x60; while &#x60;auto-unicode&#x60; is &#x60;true&#x60; then your message may be converted to &#x60;UNICODE&#x60;.  If you supply a value other than &#x60;TEXT&#x60; for this property while &#x60;auto-unicode&#x60; is &#x60;true&#x60; then no automatic conversion will take place. 
   */
  @JsonAdapter(EncodingEnum.Adapter.class)
  public enum EncodingEnum {
    TEXT("TEXT"),
    
    UNICODE("UNICODE"),
    
    BINARY("BINARY");

    private String value;

    EncodingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EncodingEnum fromValue(String value) {
      for (EncodingEnum b : EncodingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EncodingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EncodingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EncodingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EncodingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EncodingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENCODING = "encoding";
  @SerializedName(SERIALIZED_NAME_ENCODING)
  private EncodingEnum encoding;

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  private SubmissionEntryFrom from;

  public static final String SERIALIZED_NAME_LONG_MESSAGE_MAX_PARTS = "longMessageMaxParts";
  @SerializedName(SERIALIZED_NAME_LONG_MESSAGE_MAX_PARTS)
  private Integer longMessageMaxParts;

  /**
   * The class of the message, as specified by 춶4 of the GSM 03.38 specification.  You can provide either an integer value, or a mnemonic string.  The default value is SIM_SPECIFIC. Numeric values are | Name | Value| |------|------| | FLASH_SMS | 0      | | ME_SPECIFIC | 1    | | SIM_SPECIFIC | 2   | | TE_SPECIFIC | 3   | 
   */
  @JsonAdapter(MessageClassEnum.Adapter.class)
  public enum MessageClassEnum {
    FLASH_SMS("FLASH_SMS"),
    
    ME_SPECIFIC("ME_SPECIFIC"),
    
    SIM_SPECIFIC("SIM_SPECIFIC"),
    
    TE_SPECIFIC("TE_SPECIFIC");

    private String value;

    MessageClassEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MessageClassEnum fromValue(String value) {
      for (MessageClassEnum b : MessageClassEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MessageClassEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MessageClassEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MessageClassEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MessageClassEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MessageClassEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MESSAGE_CLASS = "messageClass";
  @SerializedName(SERIALIZED_NAME_MESSAGE_CLASS)
  private MessageClassEnum messageClass;

  /**
   * The TP-PID value from GSM 03.40[.750] 춶9.2.3.9.  You can provide either an integer value, or a mnemonic string.  If unspecified, this property defaults to &#x60;0&#x60;, representing the IMPLICIT value. Numeric values are listed below | Name | Value| |----- |------| | IMPLICIT              | 00 | | SHORT_MESSAGE_TYPE_0  | 64 | | REPLACE_MESSAGE_1     | 65 | | REPLACE_MESSAGE_2     | 66 | | REPLACE_MESSAGE_3     | 67 | | REPLACE_MESSAGE_4     | 68 | | REPLACE_MESSAGE_5     | 69 | | REPLACE_MESSAGE_6     | 70 | | REPLACE_MESSAGE_7     | 71 | | RETURN_CALL           | 95 | | ME_DOWNLOAD           | 125 | | ME_DEPERSONALIZE      | 126 | | SIM_DOWNLOAD          | 127 | 
   */
  @JsonAdapter(ProtocolIdEnum.Adapter.class)
  public enum ProtocolIdEnum {
    IMPLICIT("IMPLICIT"),
    
    SHORT_MESSAGE_TYPE_0("SHORT_MESSAGE_TYPE_0"),
    
    REPLACE_MESSAGE_1("REPLACE_MESSAGE_1"),
    
    REPLACE_MESSAGE_2("REPLACE_MESSAGE_2"),
    
    REPLACE_MESSAGE_3("REPLACE_MESSAGE_3"),
    
    REPLACE_MESSAGE_4("REPLACE_MESSAGE_4"),
    
    REPLACE_MESSAGE_5("REPLACE_MESSAGE_5"),
    
    REPLACE_MESSAGE_6("REPLACE_MESSAGE_6"),
    
    REPLACE_MESSAGE_7("REPLACE_MESSAGE_7"),
    
    RETURN_CALL("RETURN_CALL"),
    
    ME_DOWNLOAD("ME_DOWNLOAD"),
    
    ME_DEPERSONALIZE("ME_DEPERSONALIZE"),
    
    SIM_DOWNLOAD("SIM_DOWNLOAD");

    private String value;

    ProtocolIdEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProtocolIdEnum fromValue(String value) {
      for (ProtocolIdEnum b : ProtocolIdEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProtocolIdEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProtocolIdEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProtocolIdEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProtocolIdEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProtocolIdEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROTOCOL_ID = "protocolId";
  @SerializedName(SERIALIZED_NAME_PROTOCOL_ID)
  private ProtocolIdEnum protocolId;

  /**
   * Allows you to choose routing. The default is STANDARD. 
   */
  @JsonAdapter(RoutingGroupEnum.Adapter.class)
  public enum RoutingGroupEnum {
    ECONOMY("ECONOMY"),
    
    STANDARD("STANDARD"),
    
    PREMIUM("PREMIUM");

    private String value;

    RoutingGroupEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RoutingGroupEnum fromValue(String value) {
      for (RoutingGroupEnum b : RoutingGroupEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RoutingGroupEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RoutingGroupEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RoutingGroupEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RoutingGroupEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RoutingGroupEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ROUTING_GROUP = "routingGroup";
  @SerializedName(SERIALIZED_NAME_ROUTING_GROUP)
  private RoutingGroupEnum routingGroup;

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private List<SubmissionEntryToInner> to = new ArrayList<>();

  public static final String SERIALIZED_NAME_USER_SUPPLIED_ID = "userSuppliedId";
  @SerializedName(SERIALIZED_NAME_USER_SUPPLIED_ID)
  private String userSuppliedId;

  public SubmissionEntry() {
  }

  public SubmissionEntry body(String body) {
    this.body = body;
    return this;
  }

  /**
   * The message content as described in the &#x60;encoding&#x60;. If the &#x60;encoding&#x60; is BINARY, the body must contain only hexadecimal digits where one byte is represented as two digits. For example, if you want to send two bytes &#39;0x05&#39; and &#39;0x1F&#39;, the message body must contain the text &#39;051F&#39;.  The message content can also contain templates, read the [body templates section](#tag/Message) for more information. 
   * @return body
   */
  @javax.annotation.Nonnull
  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }


  public SubmissionEntry deliveryReports(DeliveryReportsEnum deliveryReports) {
    this.deliveryReports = deliveryReports;
    return this;
  }

  /**
   * The type of delivery reports to request from the delivering network. The default value  is &#x60;ALL&#x60;. Please note that not all networks support delivery reports. ALL. All possible delivery reports ERRORS. Only error delivery reports NONE. No delivery reports
   * @return deliveryReports
   */
  @javax.annotation.Nullable
  public DeliveryReportsEnum getDeliveryReports() {
    return deliveryReports;
  }

  public void setDeliveryReports(DeliveryReportsEnum deliveryReports) {
    this.deliveryReports = deliveryReports;
  }


  public SubmissionEntry encoding(EncodingEnum encoding) {
    this.encoding = encoding;
    return this;
  }

  /**
   * Describes the content of the message body.  Typically this is TEXT, which is the default if no value is provided.  If you need to send characters that are not covered by the [GSM 03.38](https://en.wikipedia.org/wiki/GSM_03.38) character set you will need to specify UNICODE.  If you want to send a sequence of bytes, you must use BINARY.  You can also or use the &#x60;auto-unicode&#x60; parameter of the Send Messages Operation.     If you supply the value of &#x60;TEXT&#x60; while &#x60;auto-unicode&#x60; is &#x60;true&#x60; then your message may be converted to &#x60;UNICODE&#x60;.  If you supply a value other than &#x60;TEXT&#x60; for this property while &#x60;auto-unicode&#x60; is &#x60;true&#x60; then no automatic conversion will take place. 
   * @return encoding
   */
  @javax.annotation.Nullable
  public EncodingEnum getEncoding() {
    return encoding;
  }

  public void setEncoding(EncodingEnum encoding) {
    this.encoding = encoding;
  }


  public SubmissionEntry from(SubmissionEntryFrom from) {
    this.from = from;
    return this;
  }

  /**
   * Get from
   * @return from
   */
  @javax.annotation.Nullable
  public SubmissionEntryFrom getFrom() {
    return from;
  }

  public void setFrom(SubmissionEntryFrom from) {
    this.from = from;
  }


  public SubmissionEntry longMessageMaxParts(Integer longMessageMaxParts) {
    this.longMessageMaxParts = longMessageMaxParts;
    return this;
  }

  /**
   * The maximum number of message parts that can be used for a [concatenated message](https://en.wikipedia.org/wiki/Concatenated_SMS). The default is &#x60;3&#x60;. 
   * @return longMessageMaxParts
   */
  @javax.annotation.Nullable
  public Integer getLongMessageMaxParts() {
    return longMessageMaxParts;
  }

  public void setLongMessageMaxParts(Integer longMessageMaxParts) {
    this.longMessageMaxParts = longMessageMaxParts;
  }


  public SubmissionEntry messageClass(MessageClassEnum messageClass) {
    this.messageClass = messageClass;
    return this;
  }

  /**
   * The class of the message, as specified by 춶4 of the GSM 03.38 specification.  You can provide either an integer value, or a mnemonic string.  The default value is SIM_SPECIFIC. Numeric values are | Name | Value| |------|------| | FLASH_SMS | 0      | | ME_SPECIFIC | 1    | | SIM_SPECIFIC | 2   | | TE_SPECIFIC | 3   | 
   * @return messageClass
   */
  @javax.annotation.Nullable
  public MessageClassEnum getMessageClass() {
    return messageClass;
  }

  public void setMessageClass(MessageClassEnum messageClass) {
    this.messageClass = messageClass;
  }


  public SubmissionEntry protocolId(ProtocolIdEnum protocolId) {
    this.protocolId = protocolId;
    return this;
  }

  /**
   * The TP-PID value from GSM 03.40[.750] 춶9.2.3.9.  You can provide either an integer value, or a mnemonic string.  If unspecified, this property defaults to &#x60;0&#x60;, representing the IMPLICIT value. Numeric values are listed below | Name | Value| |----- |------| | IMPLICIT              | 00 | | SHORT_MESSAGE_TYPE_0  | 64 | | REPLACE_MESSAGE_1     | 65 | | REPLACE_MESSAGE_2     | 66 | | REPLACE_MESSAGE_3     | 67 | | REPLACE_MESSAGE_4     | 68 | | REPLACE_MESSAGE_5     | 69 | | REPLACE_MESSAGE_6     | 70 | | REPLACE_MESSAGE_7     | 71 | | RETURN_CALL           | 95 | | ME_DOWNLOAD           | 125 | | ME_DEPERSONALIZE      | 126 | | SIM_DOWNLOAD          | 127 | 
   * @return protocolId
   */
  @javax.annotation.Nullable
  public ProtocolIdEnum getProtocolId() {
    return protocolId;
  }

  public void setProtocolId(ProtocolIdEnum protocolId) {
    this.protocolId = protocolId;
  }


  public SubmissionEntry routingGroup(RoutingGroupEnum routingGroup) {
    this.routingGroup = routingGroup;
    return this;
  }

  /**
   * Allows you to choose routing. The default is STANDARD. 
   * @return routingGroup
   */
  @javax.annotation.Nullable
  public RoutingGroupEnum getRoutingGroup() {
    return routingGroup;
  }

  public void setRoutingGroup(RoutingGroupEnum routingGroup) {
    this.routingGroup = routingGroup;
  }


  public SubmissionEntry to(List<SubmissionEntryToInner> to) {
    this.to = to;
    return this;
  }

  public SubmissionEntry addToItem(SubmissionEntryToInner toItem) {
    if (this.to == null) {
      this.to = new ArrayList<>();
    }
    this.to.add(toItem);
    return this;
  }

  /**
   * Identifies the recipients  Instead of an array of structured objects, you can also provide a single object, a simple string or an array of strings. If you supply a string, the &#x60;type&#x60; is taken as INTERNATIONAL. 
   * @return to
   */
  @javax.annotation.Nonnull
  public List<SubmissionEntryToInner> getTo() {
    return to;
  }

  public void setTo(List<SubmissionEntryToInner> to) {
    this.to = to;
  }


  public SubmissionEntry userSuppliedId(String userSuppliedId) {
    this.userSuppliedId = userSuppliedId;
    return this;
  }

  /**
   * Correlate the messages created from this submission to your data.  The value can contain no more than 20 characters. 
   * @return userSuppliedId
   */
  @javax.annotation.Nullable
  public String getUserSuppliedId() {
    return userSuppliedId;
  }

  public void setUserSuppliedId(String userSuppliedId) {
    this.userSuppliedId = userSuppliedId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubmissionEntry submissionEntry = (SubmissionEntry) o;
    return Objects.equals(this.body, submissionEntry.body) &&
        Objects.equals(this.deliveryReports, submissionEntry.deliveryReports) &&
        Objects.equals(this.encoding, submissionEntry.encoding) &&
        Objects.equals(this.from, submissionEntry.from) &&
        Objects.equals(this.longMessageMaxParts, submissionEntry.longMessageMaxParts) &&
        Objects.equals(this.messageClass, submissionEntry.messageClass) &&
        Objects.equals(this.protocolId, submissionEntry.protocolId) &&
        Objects.equals(this.routingGroup, submissionEntry.routingGroup) &&
        Objects.equals(this.to, submissionEntry.to) &&
        Objects.equals(this.userSuppliedId, submissionEntry.userSuppliedId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(body, deliveryReports, encoding, from, longMessageMaxParts, messageClass, protocolId, routingGroup, to, userSuppliedId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubmissionEntry {\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    deliveryReports: ").append(toIndentedString(deliveryReports)).append("\n");
    sb.append("    encoding: ").append(toIndentedString(encoding)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    longMessageMaxParts: ").append(toIndentedString(longMessageMaxParts)).append("\n");
    sb.append("    messageClass: ").append(toIndentedString(messageClass)).append("\n");
    sb.append("    protocolId: ").append(toIndentedString(protocolId)).append("\n");
    sb.append("    routingGroup: ").append(toIndentedString(routingGroup)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    userSuppliedId: ").append(toIndentedString(userSuppliedId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("body");
    openapiFields.add("deliveryReports");
    openapiFields.add("encoding");
    openapiFields.add("from");
    openapiFields.add("longMessageMaxParts");
    openapiFields.add("messageClass");
    openapiFields.add("protocolId");
    openapiFields.add("routingGroup");
    openapiFields.add("to");
    openapiFields.add("userSuppliedId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("body");
    openapiRequiredFields.add("to");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SubmissionEntry
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SubmissionEntry.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SubmissionEntry is not found in the empty JSON string", SubmissionEntry.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SubmissionEntry.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SubmissionEntry` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SubmissionEntry.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      if ((jsonObj.get("deliveryReports") != null && !jsonObj.get("deliveryReports").isJsonNull()) && !jsonObj.get("deliveryReports").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deliveryReports` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deliveryReports").toString()));
      }
      // validate the optional field `deliveryReports`
      if (jsonObj.get("deliveryReports") != null && !jsonObj.get("deliveryReports").isJsonNull()) {
        DeliveryReportsEnum.validateJsonElement(jsonObj.get("deliveryReports"));
      }
      if ((jsonObj.get("encoding") != null && !jsonObj.get("encoding").isJsonNull()) && !jsonObj.get("encoding").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encoding` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encoding").toString()));
      }
      // validate the optional field `encoding`
      if (jsonObj.get("encoding") != null && !jsonObj.get("encoding").isJsonNull()) {
        EncodingEnum.validateJsonElement(jsonObj.get("encoding"));
      }
      // validate the optional field `from`
      if (jsonObj.get("from") != null && !jsonObj.get("from").isJsonNull()) {
        SubmissionEntryFrom.validateJsonElement(jsonObj.get("from"));
      }
      if ((jsonObj.get("messageClass") != null && !jsonObj.get("messageClass").isJsonNull()) && !jsonObj.get("messageClass").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageClass` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageClass").toString()));
      }
      // validate the optional field `messageClass`
      if (jsonObj.get("messageClass") != null && !jsonObj.get("messageClass").isJsonNull()) {
        MessageClassEnum.validateJsonElement(jsonObj.get("messageClass"));
      }
      if ((jsonObj.get("protocolId") != null && !jsonObj.get("protocolId").isJsonNull()) && !jsonObj.get("protocolId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocolId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocolId").toString()));
      }
      // validate the optional field `protocolId`
      if (jsonObj.get("protocolId") != null && !jsonObj.get("protocolId").isJsonNull()) {
        ProtocolIdEnum.validateJsonElement(jsonObj.get("protocolId"));
      }
      if ((jsonObj.get("routingGroup") != null && !jsonObj.get("routingGroup").isJsonNull()) && !jsonObj.get("routingGroup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routingGroup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routingGroup").toString()));
      }
      // validate the optional field `routingGroup`
      if (jsonObj.get("routingGroup") != null && !jsonObj.get("routingGroup").isJsonNull()) {
        RoutingGroupEnum.validateJsonElement(jsonObj.get("routingGroup"));
      }
      // ensure the json data is an array
      if (!jsonObj.get("to").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `to` to be an array in the JSON string but got `%s`", jsonObj.get("to").toString()));
      }

      JsonArray jsonArrayto = jsonObj.getAsJsonArray("to");
      // validate the required field `to` (array)
      for (int i = 0; i < jsonArrayto.size(); i++) {
        SubmissionEntryToInner.validateJsonElement(jsonArrayto.get(i));
      };
      if ((jsonObj.get("userSuppliedId") != null && !jsonObj.get("userSuppliedId").isJsonNull()) && !jsonObj.get("userSuppliedId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userSuppliedId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userSuppliedId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SubmissionEntry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SubmissionEntry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SubmissionEntry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SubmissionEntry.class));

       return (TypeAdapter<T>) new TypeAdapter<SubmissionEntry>() {
           @Override
           public void write(JsonWriter out, SubmissionEntry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SubmissionEntry read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SubmissionEntry given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SubmissionEntry
   * @throws IOException if the JSON string is invalid with respect to SubmissionEntry
   */
  public static SubmissionEntry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SubmissionEntry.class);
  }

  /**
   * Convert an instance of SubmissionEntry to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

