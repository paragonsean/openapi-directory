# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SubmissionEntryFrom(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, type: str=None):
        """SubmissionEntryFrom - a model defined in OpenAPI

        :param address: The address of this SubmissionEntryFrom.
        :param type: The type of this SubmissionEntryFrom.
        """
        self.openapi_types = {
            'address': str,
            'type': str
        }

        self.attribute_map = {
            'address': 'address',
            'type': 'type'
        }

        self._address = address
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubmissionEntryFrom':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubmissionEntry_from of this SubmissionEntryFrom.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this SubmissionEntryFrom.

        The address of the sender id.  The validation for this field depends on the value of the `type`. INTERNATIONAL can start with `+`. It has a maximum length of 15 digits, and has to be longer than 6 digits. ALPHANUMERIC has a maximum length of 11 characters. SHORTCODE has a maximum length of 6 digits. REPLIABLE should not specify a value here. 

        :return: The address of this SubmissionEntryFrom.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this SubmissionEntryFrom.

        The address of the sender id.  The validation for this field depends on the value of the `type`. INTERNATIONAL can start with `+`. It has a maximum length of 15 digits, and has to be longer than 6 digits. ALPHANUMERIC has a maximum length of 11 characters. SHORTCODE has a maximum length of 6 digits. REPLIABLE should not specify a value here. 

        :param address: The address of this SubmissionEntryFrom.
        :type address: str
        """

        self._address = address

    @property
    def type(self):
        """Gets the type of this SubmissionEntryFrom.

        The type of the sender id.  If you want BulkSMS to collect replies to this message on your behalf, specify the type as REPLIABLE.  If the recipient is in a country where BulkSMS does not have a local reply number, the reply may incur costs that are more expensive than sending a local SMS in that country. If you operate a service from a shortcode in a locale that allows messaging from such a shortcode, you can specify SHORTCODE for the type. 

        :return: The type of this SubmissionEntryFrom.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SubmissionEntryFrom.

        The type of the sender id.  If you want BulkSMS to collect replies to this message on your behalf, specify the type as REPLIABLE.  If the recipient is in a country where BulkSMS does not have a local reply number, the reply may incur costs that are more expensive than sending a local SMS in that country. If you operate a service from a shortcode in a locale that allows messaging from such a shortcode, you can specify SHORTCODE for the type. 

        :param type: The type of this SubmissionEntryFrom.
        :type type: str
        """
        allowed_values = ["INTERNATIONAL", "ALPHANUMERIC", "SHORTCODE", "REPLIABLE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
