# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BlockedNumber(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: float=None, phone_number: str=None):
        """BlockedNumber - a model defined in OpenAPI

        :param id: The id of this BlockedNumber.
        :param phone_number: The phone_number of this BlockedNumber.
        """
        self.openapi_types = {
            'id': float,
            'phone_number': str
        }

        self.attribute_map = {
            'id': 'id',
            'phone_number': 'phoneNumber'
        }

        self._id = id
        self._phone_number = phone_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BlockedNumber':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BlockedNumber of this BlockedNumber.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this BlockedNumber.

        A unique identifier that is assigned when the BlockedNumber is created.

        :return: The id of this BlockedNumber.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BlockedNumber.

        A unique identifier that is assigned when the BlockedNumber is created.

        :param id: The id of this BlockedNumber.
        :type id: float
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def phone_number(self):
        """Gets the phone_number of this BlockedNumber.

        A phone number in E.164 format

        :return: The phone_number of this BlockedNumber.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this BlockedNumber.

        A phone number in E.164 format

        :param phone_number: The phone_number of this BlockedNumber.
        :type phone_number: str
        """
        if phone_number is None:
            raise ValueError("Invalid value for `phone_number`, must not be `None`")

        self._phone_number = phone_number
