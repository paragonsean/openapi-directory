# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TransferEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comment_on_from: str=None, comment_on_to: str=None, credits: float=None, to_user_id: float=None, to_username: str=None):
        """TransferEntry - a model defined in OpenAPI

        :param comment_on_from: The comment_on_from of this TransferEntry.
        :param comment_on_to: The comment_on_to of this TransferEntry.
        :param credits: The credits of this TransferEntry.
        :param to_user_id: The to_user_id of this TransferEntry.
        :param to_username: The to_username of this TransferEntry.
        """
        self.openapi_types = {
            'comment_on_from': str,
            'comment_on_to': str,
            'credits': float,
            'to_user_id': float,
            'to_username': str
        }

        self.attribute_map = {
            'comment_on_from': 'commentOnFrom',
            'comment_on_to': 'commentOnTo',
            'credits': 'credits',
            'to_user_id': 'toUserId',
            'to_username': 'toUsername'
        }

        self._comment_on_from = comment_on_from
        self._comment_on_to = comment_on_to
        self._credits = credits
        self._to_user_id = to_user_id
        self._to_username = to_username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransferEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransferEntry of this TransferEntry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comment_on_from(self):
        """Gets the comment_on_from of this TransferEntry.

        An optional note that will be shown on the credit history of your account. The maximum length of the comment is 100. 

        :return: The comment_on_from of this TransferEntry.
        :rtype: str
        """
        return self._comment_on_from

    @comment_on_from.setter
    def comment_on_from(self, comment_on_from):
        """Sets the comment_on_from of this TransferEntry.

        An optional note that will be shown on the credit history of your account. The maximum length of the comment is 100. 

        :param comment_on_from: The comment_on_from of this TransferEntry.
        :type comment_on_from: str
        """

        self._comment_on_from = comment_on_from

    @property
    def comment_on_to(self):
        """Gets the comment_on_to of this TransferEntry.

        An optional note that will be shown on the credit history of the recipient's account. The maximum length of the comment is 100. 

        :return: The comment_on_to of this TransferEntry.
        :rtype: str
        """
        return self._comment_on_to

    @comment_on_to.setter
    def comment_on_to(self, comment_on_to):
        """Sets the comment_on_to of this TransferEntry.

        An optional note that will be shown on the credit history of the recipient's account. The maximum length of the comment is 100. 

        :param comment_on_to: The comment_on_to of this TransferEntry.
        :type comment_on_to: str
        """

        self._comment_on_to = comment_on_to

    @property
    def credits(self):
        """Gets the credits of this TransferEntry.

        The amount of credits to transfer. 

        :return: The credits of this TransferEntry.
        :rtype: float
        """
        return self._credits

    @credits.setter
    def credits(self, credits):
        """Sets the credits of this TransferEntry.

        The amount of credits to transfer. 

        :param credits: The credits of this TransferEntry.
        :type credits: float
        """
        if credits is None:
            raise ValueError("Invalid value for `credits`, must not be `None`")

        self._credits = credits

    @property
    def to_user_id(self):
        """Gets the to_user_id of this TransferEntry.

        The numeric user ID of the account that will receive the credits. The ID must match the username. 

        :return: The to_user_id of this TransferEntry.
        :rtype: float
        """
        return self._to_user_id

    @to_user_id.setter
    def to_user_id(self, to_user_id):
        """Sets the to_user_id of this TransferEntry.

        The numeric user ID of the account that will receive the credits. The ID must match the username. 

        :param to_user_id: The to_user_id of this TransferEntry.
        :type to_user_id: float
        """
        if to_user_id is None:
            raise ValueError("Invalid value for `to_user_id`, must not be `None`")

        self._to_user_id = to_user_id

    @property
    def to_username(self):
        """Gets the to_username of this TransferEntry.

        The username of the account that will receive the credits. 

        :return: The to_username of this TransferEntry.
        :rtype: str
        """
        return self._to_username

    @to_username.setter
    def to_username(self, to_username):
        """Sets the to_username of this TransferEntry.

        The username of the account that will receive the credits. 

        :param to_username: The to_username of this TransferEntry.
        :type to_username: str
        """
        if to_username is None:
            raise ValueError("Invalid value for `to_username`, must not be `None`")

        self._to_username = to_username
