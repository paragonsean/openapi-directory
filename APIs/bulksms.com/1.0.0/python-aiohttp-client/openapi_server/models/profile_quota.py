# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProfileQuota(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, remaining: int=None, size: int=None):
        """ProfileQuota - a model defined in OpenAPI

        :param remaining: The remaining of this ProfileQuota.
        :param size: The size of this ProfileQuota.
        """
        self.openapi_types = {
            'remaining': int,
            'size': int
        }

        self.attribute_map = {
            'remaining': 'remaining',
            'size': 'size'
        }

        self._remaining = remaining
        self._size = size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProfileQuota':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Profile_quota of this ProfileQuota.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def remaining(self):
        """Gets the remaining of this ProfileQuota.

        The number of messages you can still send today.

        :return: The remaining of this ProfileQuota.
        :rtype: int
        """
        return self._remaining

    @remaining.setter
    def remaining(self, remaining):
        """Sets the remaining of this ProfileQuota.

        The number of messages you can still send today.

        :param remaining: The remaining of this ProfileQuota.
        :type remaining: int
        """
        if remaining is None:
            raise ValueError("Invalid value for `remaining`, must not be `None`")

        self._remaining = remaining

    @property
    def size(self):
        """Gets the size of this ProfileQuota.

        The setting that limits the number of messages you can send in a day.

        :return: The size of this ProfileQuota.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ProfileQuota.

        The setting that limits the number of messages you can send in a day.

        :param size: The size of this ProfileQuota.
        :type size: int
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")

        self._size = size
