# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WebhookEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, contact_email_address: str=None, invoke_option: str=None, name: str=None, on_web_app: bool=None, trigger_scope: str=None, url: str=None):
        """WebhookEntry - a model defined in OpenAPI

        :param active: The active of this WebhookEntry.
        :param contact_email_address: The contact_email_address of this WebhookEntry.
        :param invoke_option: The invoke_option of this WebhookEntry.
        :param name: The name of this WebhookEntry.
        :param on_web_app: The on_web_app of this WebhookEntry.
        :param trigger_scope: The trigger_scope of this WebhookEntry.
        :param url: The url of this WebhookEntry.
        """
        self.openapi_types = {
            'active': bool,
            'contact_email_address': str,
            'invoke_option': str,
            'name': str,
            'on_web_app': bool,
            'trigger_scope': str,
            'url': str
        }

        self.attribute_map = {
            'active': 'active',
            'contact_email_address': 'contactEmailAddress',
            'invoke_option': 'invokeOption',
            'name': 'name',
            'on_web_app': 'onWebApp',
            'trigger_scope': 'triggerScope',
            'url': 'url'
        }

        self._active = active
        self._contact_email_address = contact_email_address
        self._invoke_option = invoke_option
        self._name = name
        self._on_web_app = on_web_app
        self._trigger_scope = trigger_scope
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WebhookEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WebhookEntry of this WebhookEntry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this WebhookEntry.

        Indicates whether you want the webhook activated.  If the value is `true`, the webhook at the given `url` will be invoked with an empty array (`[]`) as part of the validation process. If the webhook responds with a `2xx` status code, the submission is accepted; if not the webhook is not created (or updated).  If the value is `false` the webhook will be inactive, and it will not be invoked when messages are `SENT` or `RECEIVED`.  The default value is `true`. 

        :return: The active of this WebhookEntry.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this WebhookEntry.

        Indicates whether you want the webhook activated.  If the value is `true`, the webhook at the given `url` will be invoked with an empty array (`[]`) as part of the validation process. If the webhook responds with a `2xx` status code, the submission is accepted; if not the webhook is not created (or updated).  If the value is `false` the webhook will be inactive, and it will not be invoked when messages are `SENT` or `RECEIVED`.  The default value is `true`. 

        :param active: The active of this WebhookEntry.
        :type active: bool
        """

        self._active = active

    @property
    def contact_email_address(self):
        """Gets the contact_email_address of this WebhookEntry.

        The email address to which emails will be sent if there are problem with invoking the webhook.  The value must be a valid email address. If this value is `null`, no email will be sent.  It is `null` by default. 

        :return: The contact_email_address of this WebhookEntry.
        :rtype: str
        """
        return self._contact_email_address

    @contact_email_address.setter
    def contact_email_address(self, contact_email_address):
        """Sets the contact_email_address of this WebhookEntry.

        The email address to which emails will be sent if there are problem with invoking the webhook.  The value must be a valid email address. If this value is `null`, no email will be sent.  It is `null` by default. 

        :param contact_email_address: The contact_email_address of this WebhookEntry.
        :type contact_email_address: str
        """

        self._contact_email_address = contact_email_address

    @property
    def invoke_option(self):
        """Gets the invoke_option of this WebhookEntry.

        Specifies how to invoke your webhook.  If the value is `ONE` the array POSTed to your webhook will contain no more than a single message.  Use this option if your webhook logic is unable to handle more than one messages at a time.  If the value is `MANY` the array POSTed to your webhook can contain up to 10 messages.  This is the recommended option.  The number of calls made to your webhook would be less and this will speed up your total processing time. If your webhook fails for an invoke that has more than one message, each message in the array will automatically be retried one at a time.   This value defaults to `ONE` - but it is recommended that you set this property to `MANY`. 

        :return: The invoke_option of this WebhookEntry.
        :rtype: str
        """
        return self._invoke_option

    @invoke_option.setter
    def invoke_option(self, invoke_option):
        """Sets the invoke_option of this WebhookEntry.

        Specifies how to invoke your webhook.  If the value is `ONE` the array POSTed to your webhook will contain no more than a single message.  Use this option if your webhook logic is unable to handle more than one messages at a time.  If the value is `MANY` the array POSTed to your webhook can contain up to 10 messages.  This is the recommended option.  The number of calls made to your webhook would be less and this will speed up your total processing time. If your webhook fails for an invoke that has more than one message, each message in the array will automatically be retried one at a time.   This value defaults to `ONE` - but it is recommended that you set this property to `MANY`. 

        :param invoke_option: The invoke_option of this WebhookEntry.
        :type invoke_option: str
        """
        allowed_values = ["ONE", "MANY"]  # noqa: E501
        if invoke_option not in allowed_values:
            raise ValueError(
                "Invalid value for `invoke_option` ({0}), must be one of {1}"
                .format(invoke_option, allowed_values)
            )

        self._invoke_option = invoke_option

    @property
    def name(self):
        """Gets the name of this WebhookEntry.

        A text identifier for the webhook. More than one webhook cannot have the same name. 

        :return: The name of this WebhookEntry.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WebhookEntry.

        A text identifier for the webhook. More than one webhook cannot have the same name. 

        :param name: The name of this WebhookEntry.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def on_web_app(self):
        """Gets the on_web_app of this WebhookEntry.

        Indicates whether you want to show this webhook on the Web App.  Webhooks shown there can be updated by the user that use the public Web site.  The default value is `true`. 

        :return: The on_web_app of this WebhookEntry.
        :rtype: bool
        """
        return self._on_web_app

    @on_web_app.setter
    def on_web_app(self, on_web_app):
        """Sets the on_web_app of this WebhookEntry.

        Indicates whether you want to show this webhook on the Web App.  Webhooks shown there can be updated by the user that use the public Web site.  The default value is `true`. 

        :param on_web_app: The on_web_app of this WebhookEntry.
        :type on_web_app: bool
        """

        self._on_web_app = on_web_app

    @property
    def trigger_scope(self):
        """Gets the trigger_scope of this WebhookEntry.

        Specifies when the webhook will be triggered.    Please note the values are case sensitive.  If the value is `SENT`, the webhook will be called when a status update becomes available for a message you sent (i.e. a mobile terminating (MT) message).  If the value is `RECEIVED`, the webhook will be called when a message is received (i.e. a mobile originating (MO) message).  Note that this field forces you to create two separate webhook entries if you want to collect all messages.  However,  you can use the same `url` for both webhooks if you want. 

        :return: The trigger_scope of this WebhookEntry.
        :rtype: str
        """
        return self._trigger_scope

    @trigger_scope.setter
    def trigger_scope(self, trigger_scope):
        """Sets the trigger_scope of this WebhookEntry.

        Specifies when the webhook will be triggered.    Please note the values are case sensitive.  If the value is `SENT`, the webhook will be called when a status update becomes available for a message you sent (i.e. a mobile terminating (MT) message).  If the value is `RECEIVED`, the webhook will be called when a message is received (i.e. a mobile originating (MO) message).  Note that this field forces you to create two separate webhook entries if you want to collect all messages.  However,  you can use the same `url` for both webhooks if you want. 

        :param trigger_scope: The trigger_scope of this WebhookEntry.
        :type trigger_scope: str
        """
        allowed_values = ["SENT", "RECEIVED"]  # noqa: E501
        if trigger_scope not in allowed_values:
            raise ValueError(
                "Invalid value for `trigger_scope` ({0}), must be one of {1}"
                .format(trigger_scope, allowed_values)
            )

        self._trigger_scope = trigger_scope

    @property
    def url(self):
        """Gets the url of this WebhookEntry.

        The location of the webhook.  In addition to being a [valid URI](https://en.wikipedia.org/wiki/Uniform_Resource_Identifier#Syntax), the url must also start with `http` or `https`. 

        :return: The url of this WebhookEntry.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this WebhookEntry.

        The location of the webhook.  In addition to being a [valid URI](https://en.wikipedia.org/wiki/Uniform_Resource_Identifier#Syntax), the url must also start with `http` or `https`. 

        :param url: The url of this WebhookEntry.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
