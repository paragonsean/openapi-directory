# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MessageStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, subtype: str=None, type: str=None):
        """MessageStatus - a model defined in OpenAPI

        :param id: The id of this MessageStatus.
        :param subtype: The subtype of this MessageStatus.
        :param type: The type of this MessageStatus.
        """
        self.openapi_types = {
            'id': str,
            'subtype': str,
            'type': str
        }

        self.attribute_map = {
            'id': 'id',
            'subtype': 'subtype',
            'type': 'type'
        }

        self._id = id
        self._subtype = subtype
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MessageStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Message_status of this MessageStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this MessageStatus.

        A concatenated value A.B where A is the `status.type` and B is the `status.subtype`.   It there is no value for `subtype` then B takes string value `\"null\"` (e.g. `\"SENT.null\"`).    

        :return: The id of this MessageStatus.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MessageStatus.

        A concatenated value A.B where A is the `status.type` and B is the `status.subtype`.   It there is no value for `subtype` then B takes string value `\"null\"` (e.g. `\"SENT.null\"`).    

        :param id: The id of this MessageStatus.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def subtype(self):
        """Gets the subtype of this MessageStatus.

        Has a value only if the `type` is FAILED.  EXPIRED  Delivery failed because message expired before delivery was possible.  HANDSET_ERROR  Delivery failed because of a problem related to the phone (e.g. message storage area full).  BLOCKED  Your account has been blocked from sending to this phone (e.g. recipient replied STOP to block communication).  NOT_SENT  Message delivery was not attempted (e.g. because we were not able to find a route for the supplied phone number). 

        :return: The subtype of this MessageStatus.
        :rtype: str
        """
        return self._subtype

    @subtype.setter
    def subtype(self, subtype):
        """Sets the subtype of this MessageStatus.

        Has a value only if the `type` is FAILED.  EXPIRED  Delivery failed because message expired before delivery was possible.  HANDSET_ERROR  Delivery failed because of a problem related to the phone (e.g. message storage area full).  BLOCKED  Your account has been blocked from sending to this phone (e.g. recipient replied STOP to block communication).  NOT_SENT  Message delivery was not attempted (e.g. because we were not able to find a route for the supplied phone number). 

        :param subtype: The subtype of this MessageStatus.
        :type subtype: str
        """
        allowed_values = ["EXPIRED", "HANDSET_ERROR", "BLOCKED", "NOT_SENT"]  # noqa: E501
        if subtype not in allowed_values:
            raise ValueError(
                "Invalid value for `subtype` ({0}), must be one of {1}"
                .format(subtype, allowed_values)
            )

        self._subtype = subtype

    @property
    def type(self):
        """Gets the type of this MessageStatus.

         ACCEPTED  Message accepted for delivery. Only returned for initial message submissions.  SCHEDULED  Message accepted for delivery at a later date. Only returned for initial message  submissions.  SENT  Message has been relayed away from our systems.  DELIVERED  Successfully delivered to phone.  UNKNOWN  Message is in an unknown state.  FAILED  Delivery failed. 

        :return: The type of this MessageStatus.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MessageStatus.

         ACCEPTED  Message accepted for delivery. Only returned for initial message submissions.  SCHEDULED  Message accepted for delivery at a later date. Only returned for initial message  submissions.  SENT  Message has been relayed away from our systems.  DELIVERED  Successfully delivered to phone.  UNKNOWN  Message is in an unknown state.  FAILED  Delivery failed. 

        :param type: The type of this MessageStatus.
        :type type: str
        """
        allowed_values = ["ACCEPTED", "SCHEDULED", "SENT", "DELIVERED", "UNKNOWN", "FAILED"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
