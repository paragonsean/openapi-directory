# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProfileOriginAddresses(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed: List[str]=None, is_full_control_allowed: bool=None):
        """ProfileOriginAddresses - a model defined in OpenAPI

        :param allowed: The allowed of this ProfileOriginAddresses.
        :param is_full_control_allowed: The is_full_control_allowed of this ProfileOriginAddresses.
        """
        self.openapi_types = {
            'allowed': List[str],
            'is_full_control_allowed': bool
        }

        self.attribute_map = {
            'allowed': 'allowed',
            'is_full_control_allowed': 'isFullControlAllowed'
        }

        self._allowed = allowed
        self._is_full_control_allowed = is_full_control_allowed

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProfileOriginAddresses':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Profile_originAddresses of this ProfileOriginAddresses.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed(self):
        """Gets the allowed of this ProfileOriginAddresses.


        :return: The allowed of this ProfileOriginAddresses.
        :rtype: List[str]
        """
        return self._allowed

    @allowed.setter
    def allowed(self, allowed):
        """Sets the allowed of this ProfileOriginAddresses.


        :param allowed: The allowed of this ProfileOriginAddresses.
        :type allowed: List[str]
        """

        self._allowed = allowed

    @property
    def is_full_control_allowed(self):
        """Gets the is_full_control_allowed of this ProfileOriginAddresses.


        :return: The is_full_control_allowed of this ProfileOriginAddresses.
        :rtype: bool
        """
        return self._is_full_control_allowed

    @is_full_control_allowed.setter
    def is_full_control_allowed(self, is_full_control_allowed):
        """Sets the is_full_control_allowed of this ProfileOriginAddresses.


        :param is_full_control_allowed: The is_full_control_allowed of this ProfileOriginAddresses.
        :type is_full_control_allowed: bool
        """

        self._is_full_control_allowed = is_full_control_allowed
