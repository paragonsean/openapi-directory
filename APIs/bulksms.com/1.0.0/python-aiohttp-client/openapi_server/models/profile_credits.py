# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProfileCredits(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, balance: float=None, is_transfer_allowed: bool=None, limit: int=None):
        """ProfileCredits - a model defined in OpenAPI

        :param balance: The balance of this ProfileCredits.
        :param is_transfer_allowed: The is_transfer_allowed of this ProfileCredits.
        :param limit: The limit of this ProfileCredits.
        """
        self.openapi_types = {
            'balance': float,
            'is_transfer_allowed': bool,
            'limit': int
        }

        self.attribute_map = {
            'balance': 'balance',
            'is_transfer_allowed': 'isTransferAllowed',
            'limit': 'limit'
        }

        self._balance = balance
        self._is_transfer_allowed = is_transfer_allowed
        self._limit = limit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProfileCredits':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Profile_credits of this ProfileCredits.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def balance(self):
        """Gets the balance of this ProfileCredits.


        :return: The balance of this ProfileCredits.
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this ProfileCredits.


        :param balance: The balance of this ProfileCredits.
        :type balance: float
        """

        self._balance = balance

    @property
    def is_transfer_allowed(self):
        """Gets the is_transfer_allowed of this ProfileCredits.


        :return: The is_transfer_allowed of this ProfileCredits.
        :rtype: bool
        """
        return self._is_transfer_allowed

    @is_transfer_allowed.setter
    def is_transfer_allowed(self, is_transfer_allowed):
        """Sets the is_transfer_allowed of this ProfileCredits.


        :param is_transfer_allowed: The is_transfer_allowed of this ProfileCredits.
        :type is_transfer_allowed: bool
        """

        self._is_transfer_allowed = is_transfer_allowed

    @property
    def limit(self):
        """Gets the limit of this ProfileCredits.


        :return: The limit of this ProfileCredits.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this ProfileCredits.


        :param limit: The limit of this ProfileCredits.
        :type limit: int
        """

        self._limit = limit
