# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.profile_commerce import ProfileCommerce
from openapi_server.models.profile_company import ProfileCompany
from openapi_server.models.profile_credits import ProfileCredits
from openapi_server.models.profile_origin_addresses import ProfileOriginAddresses
from openapi_server.models.profile_quota import ProfileQuota
from openapi_server import util


class Profile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, commerce: ProfileCommerce=None, company: ProfileCompany=None, created: datetime=None, credits: ProfileCredits=None, id: str=None, origin_addresses: ProfileOriginAddresses=None, quota: ProfileQuota=None, username: str=None):
        """Profile - a model defined in OpenAPI

        :param commerce: The commerce of this Profile.
        :param company: The company of this Profile.
        :param created: The created of this Profile.
        :param credits: The credits of this Profile.
        :param id: The id of this Profile.
        :param origin_addresses: The origin_addresses of this Profile.
        :param quota: The quota of this Profile.
        :param username: The username of this Profile.
        """
        self.openapi_types = {
            'commerce': ProfileCommerce,
            'company': ProfileCompany,
            'created': datetime,
            'credits': ProfileCredits,
            'id': str,
            'origin_addresses': ProfileOriginAddresses,
            'quota': ProfileQuota,
            'username': str
        }

        self.attribute_map = {
            'commerce': 'commerce',
            'company': 'company',
            'created': 'created',
            'credits': 'credits',
            'id': 'id',
            'origin_addresses': 'originAddresses',
            'quota': 'quota',
            'username': 'username'
        }

        self._commerce = commerce
        self._company = company
        self._created = created
        self._credits = credits
        self._id = id
        self._origin_addresses = origin_addresses
        self._quota = quota
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Profile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Profile of this Profile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def commerce(self):
        """Gets the commerce of this Profile.


        :return: The commerce of this Profile.
        :rtype: ProfileCommerce
        """
        return self._commerce

    @commerce.setter
    def commerce(self, commerce):
        """Sets the commerce of this Profile.


        :param commerce: The commerce of this Profile.
        :type commerce: ProfileCommerce
        """

        self._commerce = commerce

    @property
    def company(self):
        """Gets the company of this Profile.


        :return: The company of this Profile.
        :rtype: ProfileCompany
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this Profile.


        :param company: The company of this Profile.
        :type company: ProfileCompany
        """

        self._company = company

    @property
    def created(self):
        """Gets the created of this Profile.


        :return: The created of this Profile.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Profile.


        :param created: The created of this Profile.
        :type created: datetime
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")

        self._created = created

    @property
    def credits(self):
        """Gets the credits of this Profile.


        :return: The credits of this Profile.
        :rtype: ProfileCredits
        """
        return self._credits

    @credits.setter
    def credits(self, credits):
        """Sets the credits of this Profile.


        :param credits: The credits of this Profile.
        :type credits: ProfileCredits
        """
        if credits is None:
            raise ValueError("Invalid value for `credits`, must not be `None`")

        self._credits = credits

    @property
    def id(self):
        """Gets the id of this Profile.


        :return: The id of this Profile.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Profile.


        :param id: The id of this Profile.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def origin_addresses(self):
        """Gets the origin_addresses of this Profile.


        :return: The origin_addresses of this Profile.
        :rtype: ProfileOriginAddresses
        """
        return self._origin_addresses

    @origin_addresses.setter
    def origin_addresses(self, origin_addresses):
        """Sets the origin_addresses of this Profile.


        :param origin_addresses: The origin_addresses of this Profile.
        :type origin_addresses: ProfileOriginAddresses
        """

        self._origin_addresses = origin_addresses

    @property
    def quota(self):
        """Gets the quota of this Profile.


        :return: The quota of this Profile.
        :rtype: ProfileQuota
        """
        return self._quota

    @quota.setter
    def quota(self, quota):
        """Sets the quota of this Profile.


        :param quota: The quota of this Profile.
        :type quota: ProfileQuota
        """
        if quota is None:
            raise ValueError("Invalid value for `quota`, must not be `None`")

        self._quota = quota

    @property
    def username(self):
        """Gets the username of this Profile.


        :return: The username of this Profile.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this Profile.


        :param username: The username of this Profile.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")

        self._username = username
