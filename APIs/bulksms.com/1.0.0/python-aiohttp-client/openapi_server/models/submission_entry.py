# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.submission_entry_from import SubmissionEntryFrom
from openapi_server.models.submission_entry_to_inner import SubmissionEntryToInner
from openapi_server import util


class SubmissionEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body: str=None, delivery_reports: str=None, encoding: str=None, _from: SubmissionEntryFrom=None, long_message_max_parts: int=None, message_class: str=None, protocol_id: str=None, routing_group: str=None, to: List[SubmissionEntryToInner]=None, user_supplied_id: str=None):
        """SubmissionEntry - a model defined in OpenAPI

        :param body: The body of this SubmissionEntry.
        :param delivery_reports: The delivery_reports of this SubmissionEntry.
        :param encoding: The encoding of this SubmissionEntry.
        :param _from: The _from of this SubmissionEntry.
        :param long_message_max_parts: The long_message_max_parts of this SubmissionEntry.
        :param message_class: The message_class of this SubmissionEntry.
        :param protocol_id: The protocol_id of this SubmissionEntry.
        :param routing_group: The routing_group of this SubmissionEntry.
        :param to: The to of this SubmissionEntry.
        :param user_supplied_id: The user_supplied_id of this SubmissionEntry.
        """
        self.openapi_types = {
            'body': str,
            'delivery_reports': str,
            'encoding': str,
            '_from': SubmissionEntryFrom,
            'long_message_max_parts': int,
            'message_class': str,
            'protocol_id': str,
            'routing_group': str,
            'to': List[SubmissionEntryToInner],
            'user_supplied_id': str
        }

        self.attribute_map = {
            'body': 'body',
            'delivery_reports': 'deliveryReports',
            'encoding': 'encoding',
            '_from': 'from',
            'long_message_max_parts': 'longMessageMaxParts',
            'message_class': 'messageClass',
            'protocol_id': 'protocolId',
            'routing_group': 'routingGroup',
            'to': 'to',
            'user_supplied_id': 'userSuppliedId'
        }

        self._body = body
        self._delivery_reports = delivery_reports
        self._encoding = encoding
        self.__from = _from
        self._long_message_max_parts = long_message_max_parts
        self._message_class = message_class
        self._protocol_id = protocol_id
        self._routing_group = routing_group
        self._to = to
        self._user_supplied_id = user_supplied_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubmissionEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubmissionEntry of this SubmissionEntry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body(self):
        """Gets the body of this SubmissionEntry.

        The message content as described in the `encoding`. If the `encoding` is BINARY, the body must contain only hexadecimal digits where one byte is represented as two digits. For example, if you want to send two bytes '0x05' and '0x1F', the message body must contain the text '051F'.  The message content can also contain templates, read the [body templates section](#tag/Message) for more information. 

        :return: The body of this SubmissionEntry.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this SubmissionEntry.

        The message content as described in the `encoding`. If the `encoding` is BINARY, the body must contain only hexadecimal digits where one byte is represented as two digits. For example, if you want to send two bytes '0x05' and '0x1F', the message body must contain the text '051F'.  The message content can also contain templates, read the [body templates section](#tag/Message) for more information. 

        :param body: The body of this SubmissionEntry.
        :type body: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")

        self._body = body

    @property
    def delivery_reports(self):
        """Gets the delivery_reports of this SubmissionEntry.

        The type of delivery reports to request from the delivering network. The default value  is `ALL`. Please note that not all networks support delivery reports. ALL. All possible delivery reports ERRORS. Only error delivery reports NONE. No delivery reports

        :return: The delivery_reports of this SubmissionEntry.
        :rtype: str
        """
        return self._delivery_reports

    @delivery_reports.setter
    def delivery_reports(self, delivery_reports):
        """Sets the delivery_reports of this SubmissionEntry.

        The type of delivery reports to request from the delivering network. The default value  is `ALL`. Please note that not all networks support delivery reports. ALL. All possible delivery reports ERRORS. Only error delivery reports NONE. No delivery reports

        :param delivery_reports: The delivery_reports of this SubmissionEntry.
        :type delivery_reports: str
        """
        allowed_values = ["ALL", "ERRORS", "NONE"]  # noqa: E501
        if delivery_reports not in allowed_values:
            raise ValueError(
                "Invalid value for `delivery_reports` ({0}), must be one of {1}"
                .format(delivery_reports, allowed_values)
            )

        self._delivery_reports = delivery_reports

    @property
    def encoding(self):
        """Gets the encoding of this SubmissionEntry.

        Describes the content of the message body.  Typically this is TEXT, which is the default if no value is provided.  If you need to send characters that are not covered by the [GSM 03.38](https://en.wikipedia.org/wiki/GSM_03.38) character set you will need to specify UNICODE.  If you want to send a sequence of bytes, you must use BINARY.  You can also or use the `auto-unicode` parameter of the Send Messages Operation.     If you supply the value of `TEXT` while `auto-unicode` is `true` then your message may be converted to `UNICODE`.  If you supply a value other than `TEXT` for this property while `auto-unicode` is `true` then no automatic conversion will take place. 

        :return: The encoding of this SubmissionEntry.
        :rtype: str
        """
        return self._encoding

    @encoding.setter
    def encoding(self, encoding):
        """Sets the encoding of this SubmissionEntry.

        Describes the content of the message body.  Typically this is TEXT, which is the default if no value is provided.  If you need to send characters that are not covered by the [GSM 03.38](https://en.wikipedia.org/wiki/GSM_03.38) character set you will need to specify UNICODE.  If you want to send a sequence of bytes, you must use BINARY.  You can also or use the `auto-unicode` parameter of the Send Messages Operation.     If you supply the value of `TEXT` while `auto-unicode` is `true` then your message may be converted to `UNICODE`.  If you supply a value other than `TEXT` for this property while `auto-unicode` is `true` then no automatic conversion will take place. 

        :param encoding: The encoding of this SubmissionEntry.
        :type encoding: str
        """
        allowed_values = ["TEXT", "UNICODE", "BINARY"]  # noqa: E501
        if encoding not in allowed_values:
            raise ValueError(
                "Invalid value for `encoding` ({0}), must be one of {1}"
                .format(encoding, allowed_values)
            )

        self._encoding = encoding

    @property
    def _from(self):
        """Gets the _from of this SubmissionEntry.


        :return: The _from of this SubmissionEntry.
        :rtype: SubmissionEntryFrom
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this SubmissionEntry.


        :param _from: The _from of this SubmissionEntry.
        :type _from: SubmissionEntryFrom
        """

        self.__from = _from

    @property
    def long_message_max_parts(self):
        """Gets the long_message_max_parts of this SubmissionEntry.

        The maximum number of message parts that can be used for a [concatenated message](https://en.wikipedia.org/wiki/Concatenated_SMS). The default is `3`. 

        :return: The long_message_max_parts of this SubmissionEntry.
        :rtype: int
        """
        return self._long_message_max_parts

    @long_message_max_parts.setter
    def long_message_max_parts(self, long_message_max_parts):
        """Sets the long_message_max_parts of this SubmissionEntry.

        The maximum number of message parts that can be used for a [concatenated message](https://en.wikipedia.org/wiki/Concatenated_SMS). The default is `3`. 

        :param long_message_max_parts: The long_message_max_parts of this SubmissionEntry.
        :type long_message_max_parts: int
        """

        self._long_message_max_parts = long_message_max_parts

    @property
    def message_class(self):
        """Gets the message_class of this SubmissionEntry.

        The class of the message, as specified by ยง4 of the GSM 03.38 specification.  You can provide either an integer value, or a mnemonic string.  The default value is SIM_SPECIFIC. Numeric values are | Name | Value| |------|------| | FLASH_SMS | 0      | | ME_SPECIFIC | 1    | | SIM_SPECIFIC | 2   | | TE_SPECIFIC | 3   | 

        :return: The message_class of this SubmissionEntry.
        :rtype: str
        """
        return self._message_class

    @message_class.setter
    def message_class(self, message_class):
        """Sets the message_class of this SubmissionEntry.

        The class of the message, as specified by ยง4 of the GSM 03.38 specification.  You can provide either an integer value, or a mnemonic string.  The default value is SIM_SPECIFIC. Numeric values are | Name | Value| |------|------| | FLASH_SMS | 0      | | ME_SPECIFIC | 1    | | SIM_SPECIFIC | 2   | | TE_SPECIFIC | 3   | 

        :param message_class: The message_class of this SubmissionEntry.
        :type message_class: str
        """
        allowed_values = ["FLASH_SMS", "ME_SPECIFIC", "SIM_SPECIFIC", "TE_SPECIFIC"]  # noqa: E501
        if message_class not in allowed_values:
            raise ValueError(
                "Invalid value for `message_class` ({0}), must be one of {1}"
                .format(message_class, allowed_values)
            )

        self._message_class = message_class

    @property
    def protocol_id(self):
        """Gets the protocol_id of this SubmissionEntry.

        The TP-PID value from GSM 03.40[.750] ยง9.2.3.9.  You can provide either an integer value, or a mnemonic string.  If unspecified, this property defaults to `0`, representing the IMPLICIT value. Numeric values are listed below | Name | Value| |----- |------| | IMPLICIT              | 00 | | SHORT_MESSAGE_TYPE_0  | 64 | | REPLACE_MESSAGE_1     | 65 | | REPLACE_MESSAGE_2     | 66 | | REPLACE_MESSAGE_3     | 67 | | REPLACE_MESSAGE_4     | 68 | | REPLACE_MESSAGE_5     | 69 | | REPLACE_MESSAGE_6     | 70 | | REPLACE_MESSAGE_7     | 71 | | RETURN_CALL           | 95 | | ME_DOWNLOAD           | 125 | | ME_DEPERSONALIZE      | 126 | | SIM_DOWNLOAD          | 127 | 

        :return: The protocol_id of this SubmissionEntry.
        :rtype: str
        """
        return self._protocol_id

    @protocol_id.setter
    def protocol_id(self, protocol_id):
        """Sets the protocol_id of this SubmissionEntry.

        The TP-PID value from GSM 03.40[.750] ยง9.2.3.9.  You can provide either an integer value, or a mnemonic string.  If unspecified, this property defaults to `0`, representing the IMPLICIT value. Numeric values are listed below | Name | Value| |----- |------| | IMPLICIT              | 00 | | SHORT_MESSAGE_TYPE_0  | 64 | | REPLACE_MESSAGE_1     | 65 | | REPLACE_MESSAGE_2     | 66 | | REPLACE_MESSAGE_3     | 67 | | REPLACE_MESSAGE_4     | 68 | | REPLACE_MESSAGE_5     | 69 | | REPLACE_MESSAGE_6     | 70 | | REPLACE_MESSAGE_7     | 71 | | RETURN_CALL           | 95 | | ME_DOWNLOAD           | 125 | | ME_DEPERSONALIZE      | 126 | | SIM_DOWNLOAD          | 127 | 

        :param protocol_id: The protocol_id of this SubmissionEntry.
        :type protocol_id: str
        """
        allowed_values = ["IMPLICIT", "SHORT_MESSAGE_TYPE_0", "REPLACE_MESSAGE_1", "REPLACE_MESSAGE_2", "REPLACE_MESSAGE_3", "REPLACE_MESSAGE_4", "REPLACE_MESSAGE_5", "REPLACE_MESSAGE_6", "REPLACE_MESSAGE_7", "RETURN_CALL", "ME_DOWNLOAD", "ME_DEPERSONALIZE", "SIM_DOWNLOAD"]  # noqa: E501
        if protocol_id not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol_id` ({0}), must be one of {1}"
                .format(protocol_id, allowed_values)
            )

        self._protocol_id = protocol_id

    @property
    def routing_group(self):
        """Gets the routing_group of this SubmissionEntry.

        Allows you to choose routing. The default is STANDARD. 

        :return: The routing_group of this SubmissionEntry.
        :rtype: str
        """
        return self._routing_group

    @routing_group.setter
    def routing_group(self, routing_group):
        """Sets the routing_group of this SubmissionEntry.

        Allows you to choose routing. The default is STANDARD. 

        :param routing_group: The routing_group of this SubmissionEntry.
        :type routing_group: str
        """
        allowed_values = ["ECONOMY", "STANDARD", "PREMIUM"]  # noqa: E501
        if routing_group not in allowed_values:
            raise ValueError(
                "Invalid value for `routing_group` ({0}), must be one of {1}"
                .format(routing_group, allowed_values)
            )

        self._routing_group = routing_group

    @property
    def to(self):
        """Gets the to of this SubmissionEntry.

        Identifies the recipients  Instead of an array of structured objects, you can also provide a single object, a simple string or an array of strings. If you supply a string, the `type` is taken as INTERNATIONAL. 

        :return: The to of this SubmissionEntry.
        :rtype: List[SubmissionEntryToInner]
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this SubmissionEntry.

        Identifies the recipients  Instead of an array of structured objects, you can also provide a single object, a simple string or an array of strings. If you supply a string, the `type` is taken as INTERNATIONAL. 

        :param to: The to of this SubmissionEntry.
        :type to: List[SubmissionEntryToInner]
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")

        self._to = to

    @property
    def user_supplied_id(self):
        """Gets the user_supplied_id of this SubmissionEntry.

        Correlate the messages created from this submission to your data.  The value can contain no more than 20 characters. 

        :return: The user_supplied_id of this SubmissionEntry.
        :rtype: str
        """
        return self._user_supplied_id

    @user_supplied_id.setter
    def user_supplied_id(self, user_supplied_id):
        """Sets the user_supplied_id of this SubmissionEntry.

        Correlate the messages created from this submission to your data.  The value can contain no more than 20 characters. 

        :param user_supplied_id: The user_supplied_id of this SubmissionEntry.
        :type user_supplied_id: str
        """

        self._user_supplied_id = user_supplied_id
