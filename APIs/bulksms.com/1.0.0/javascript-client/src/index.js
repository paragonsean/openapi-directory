/**
 * BulkSMS JSON REST API
 * ## Overview  The JSON REST API allows you to submit and receive [BulkSMS](https://www.bulksms.com/) messages. You can also get access to past messages and see your account profile.  The base URL to use for this service is `https://api.bulksms.com/v1`.  The base URL cannot be used on its own; you must append a path that identifies an operation and you may have to specify some path parameters as well.  [Click here](/developer/) to go to the main BulkSMS developer site.  In order to give you an idea on how the API can be used, some JSON snippets are provided below.  Have a look at the [messages section](#tag/Message) for more information.  Probably the most simple example  ``` {     \"to\": \"+27001234567\",     \"body\": \"Hello World!\" } ```   You can send unicode automatically using the `auto-unicode` query parameter.  Alternatively, you can specify `UNICODE` for the `encoding` property in the request body.  Please note: when `auto-unicode` is specified and the value of the `encoding` property is `UNICODE`, the message will always be sent as `UNICODE`.  Here is an example that sets the `encoding` explicitly  ``` {   \"to\": \"+27001234567\",   \"body\": \"Dobrá práce! Jak se máš?\",   \"encoding\": \"UNICODE\" } ```  You can also specify a from number  ``` {     \"from\": \"+27007654321\",     \"to\": \"+27001234567\",     \"body\": \"Hello World!\" } ```  Similar to above, but repliable  ``` {     \"from\": { \"type\": \"REPLIABLE\" },     \"to\": \"+27001234567\",     \"body\": \"Hello World!\" } ```  A message to a group called Everyone  ``` {     \"to\": { \"type\": \"GROUP\", \"name\": \"Everyone\" },     \"body\": \"Hello World!\" } ```  A message to multiple recipients  ``` {     \"to\": [\"+27001234567\", \"+27002345678\", \"+27003456789\"],     \"body\": \"Happy Holidays!\" } ```  Sending more than one message in the same request  ``` [     {         \"to\": \"+27001234567\",         \"body\": \"Hello World!\"     },     {         \"to\": \"+27002345678\",         \"body\": \"Hello Universe!\"     } ] ```  **The insecure base URL `http://api.bulksms.com/v1` is deprecated** and may in future result in a `301` redirect response, or insecure requests may be rejected outright. Please use the secure (`https`) URI above.  ### HTTP Content Type  All API methods expect requests to supply a `Content-Type` header with the value `application/json`. All responses will have the `Content-Type` header set to `application/json`.  ### JSON Formatting  You are advised to format your JSON resources according to strict JSON format rules. While the API does attempt to parse strictly invalid JSON documents, doing so may lead to incorrect interpretation and unexpected results.  Good JSON libraries will produce valid JSON suitable for submission, but if you are manually generating the JSON text, be careful to follow the JSON format. This include correct escaping of control characters and double quoting of property names.  See the [JSON specification](https://tools.ietf.org/html/rfc4627) for further information.  ### Date Formatting  Dates are formatted according to ISO-8601, such as `1970-01-01T10:00:00+01:00` for 1st January 1970, 10AM UTC+1.  See the [Wikipedia ISO 8601 reference](https://en.wikipedia.org/wiki/ISO_8601) for further information.  Specifically, calendar dates are formatted with the 'extended' format `YYYY-MM-DD`. Basic format, week dates and ordinal dates are not supported. Times are also formatted in the 'extended' format `hh:mm:ss`. Hours, minutes and seconds are mandatory. Offset from UTC must be provided; this is to ensure that there is no misunderstanding regarding times provided to the API.  The format we look for is `yyyy-MM-ddThh:mm:ss[Z|[+-]hh:mm]`  Examples of valid date/times are`2011-12-31T12:00:00Z` `2011-12-31T12:00:00+02:00`  ### Entity Format Modifications  It is expected that over time some changes will be made to the request and response formats of various methods available in the API. Where possible, these will be implemented in a backwards compatible way. To make this possible you are required to ignore unknown properties. This enables the addition of information in response documents while maintaining compatibility with older clients.  ### Optional Request Entity Properties  There are many instances where requests can be made without having to specify every single property allowable in the request format. Any such optional properties are noted as such in the documentation and their default value is noted. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import BlockedNumber from './model/BlockedNumber';
import Error from './model/Error';
import Message from './model/Message';
import MessageStatus from './model/MessageStatus';
import MessageSubmission from './model/MessageSubmission';
import PreSignInfo from './model/PreSignInfo';
import PreSignInfoFieldsInner from './model/PreSignInfoFieldsInner';
import PreSignRequest from './model/PreSignRequest';
import Profile from './model/Profile';
import ProfileCommerce from './model/ProfileCommerce';
import ProfileCommerceAddress from './model/ProfileCommerceAddress';
import ProfileCompany from './model/ProfileCompany';
import ProfileCredits from './model/ProfileCredits';
import ProfileOriginAddresses from './model/ProfileOriginAddresses';
import ProfileQuota from './model/ProfileQuota';
import SubmissionEntry from './model/SubmissionEntry';
import SubmissionEntryFrom from './model/SubmissionEntryFrom';
import SubmissionEntryToInner from './model/SubmissionEntryToInner';
import TransferEntry from './model/TransferEntry';
import Webhook from './model/Webhook';
import WebhookEntry from './model/WebhookEntry';
import AttachmentsApi from './api/AttachmentsApi';
import BlockedNumbersApi from './api/BlockedNumbersApi';
import CreditsApi from './api/CreditsApi';
import MessageApi from './api/MessageApi';
import ProfileApi from './api/ProfileApi';
import WebhooksApi from './api/WebhooksApi';


/**
* ## Overview  The JSON REST API allows you to submit and receive [BulkSMS](https://www.bulksms.com/) messages. You can also get access to past messages and see your account profile.  The base URL to use for this service is &#x60;https://api.bulksms.com/v1&#x60;.  The base URL cannot be used on its own; you must append a path that identifies an operation and you may have to specify some path parameters as well.  [Click here](/developer/) to go to the main BulkSMS developer site.  In order to give you an idea on how the API can be used, some JSON snippets are provided below.  Have a look at the [messages section](#tag/Message) for more information.  Probably the most simple example  &#x60;&#x60;&#x60; {     \&quot;to\&quot;: \&quot;+27001234567\&quot;,     \&quot;body\&quot;: \&quot;Hello World!\&quot; } &#x60;&#x60;&#x60;   You can send unicode automatically using the &#x60;auto-unicode&#x60; query parameter.  Alternatively, you can specify &#x60;UNICODE&#x60; for the &#x60;encoding&#x60; property in the request body.  Please note: when &#x60;auto-unicode&#x60; is specified and the value of the &#x60;encoding&#x60; property is &#x60;UNICODE&#x60;, the message will always be sent as &#x60;UNICODE&#x60;.  Here is an example that sets the &#x60;encoding&#x60; explicitly  &#x60;&#x60;&#x60; {   \&quot;to\&quot;: \&quot;+27001234567\&quot;,   \&quot;body\&quot;: \&quot;Dobrá práce! Jak se máš?\&quot;,   \&quot;encoding\&quot;: \&quot;UNICODE\&quot; } &#x60;&#x60;&#x60;  You can also specify a from number  &#x60;&#x60;&#x60; {     \&quot;from\&quot;: \&quot;+27007654321\&quot;,     \&quot;to\&quot;: \&quot;+27001234567\&quot;,     \&quot;body\&quot;: \&quot;Hello World!\&quot; } &#x60;&#x60;&#x60;  Similar to above, but repliable  &#x60;&#x60;&#x60; {     \&quot;from\&quot;: { \&quot;type\&quot;: \&quot;REPLIABLE\&quot; },     \&quot;to\&quot;: \&quot;+27001234567\&quot;,     \&quot;body\&quot;: \&quot;Hello World!\&quot; } &#x60;&#x60;&#x60;  A message to a group called Everyone  &#x60;&#x60;&#x60; {     \&quot;to\&quot;: { \&quot;type\&quot;: \&quot;GROUP\&quot;, \&quot;name\&quot;: \&quot;Everyone\&quot; },     \&quot;body\&quot;: \&quot;Hello World!\&quot; } &#x60;&#x60;&#x60;  A message to multiple recipients  &#x60;&#x60;&#x60; {     \&quot;to\&quot;: [\&quot;+27001234567\&quot;, \&quot;+27002345678\&quot;, \&quot;+27003456789\&quot;],     \&quot;body\&quot;: \&quot;Happy Holidays!\&quot; } &#x60;&#x60;&#x60;  Sending more than one message in the same request  &#x60;&#x60;&#x60; [     {         \&quot;to\&quot;: \&quot;+27001234567\&quot;,         \&quot;body\&quot;: \&quot;Hello World!\&quot;     },     {         \&quot;to\&quot;: \&quot;+27002345678\&quot;,         \&quot;body\&quot;: \&quot;Hello Universe!\&quot;     } ] &#x60;&#x60;&#x60;  **The insecure base URL &#x60;http://api.bulksms.com/v1&#x60; is deprecated** and may in future result in a &#x60;301&#x60; redirect response, or insecure requests may be rejected outright. Please use the secure (&#x60;https&#x60;) URI above.  ### HTTP Content Type  All API methods expect requests to supply a &#x60;Content-Type&#x60; header with the value &#x60;application/json&#x60;. All responses will have the &#x60;Content-Type&#x60; header set to &#x60;application/json&#x60;.  ### JSON Formatting  You are advised to format your JSON resources according to strict JSON format rules. While the API does attempt to parse strictly invalid JSON documents, doing so may lead to incorrect interpretation and unexpected results.  Good JSON libraries will produce valid JSON suitable for submission, but if you are manually generating the JSON text, be careful to follow the JSON format. This include correct escaping of control characters and double quoting of property names.  See the [JSON specification](https://tools.ietf.org/html/rfc4627) for further information.  ### Date Formatting  Dates are formatted according to ISO-8601, such as &#x60;1970-01-01T10:00:00+01:00&#x60; for 1st January 1970, 10AM UTC+1.  See the [Wikipedia ISO 8601 reference](https://en.wikipedia.org/wiki/ISO_8601) for further information.  Specifically, calendar dates are formatted with the &#39;extended&#39; format &#x60;YYYY-MM-DD&#x60;. Basic format, week dates and ordinal dates are not supported. Times are also formatted in the &#39;extended&#39; format &#x60;hh:mm:ss&#x60;. Hours, minutes and seconds are mandatory. Offset from UTC must be provided; this is to ensure that there is no misunderstanding regarding times provided to the API.  The format we look for is &#x60;yyyy-MM-ddThh:mm:ss[Z|[+-]hh:mm]&#x60;  Examples of valid date/times are&#x60;2011-12-31T12:00:00Z&#x60; &#x60;2011-12-31T12:00:00+02:00&#x60;  ### Entity Format Modifications  It is expected that over time some changes will be made to the request and response formats of various methods available in the API. Where possible, these will be implemented in a backwards compatible way. To make this possible you are required to ignore unknown properties. This enables the addition of information in response documents while maintaining compatibility with older clients.  ### Optional Request Entity Properties  There are many instances where requests can be made without having to specify every single property allowable in the request format. Any such optional properties are noted as such in the documentation and their default value is noted. .<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var BulkSmsJsonRestApi = require('index'); // See note below*.
* var xxxSvc = new BulkSmsJsonRestApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new BulkSmsJsonRestApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new BulkSmsJsonRestApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new BulkSmsJsonRestApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.0.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The BlockedNumber model constructor.
     * @property {module:model/BlockedNumber}
     */
    BlockedNumber,

    /**
     * The Error model constructor.
     * @property {module:model/Error}
     */
    Error,

    /**
     * The Message model constructor.
     * @property {module:model/Message}
     */
    Message,

    /**
     * The MessageStatus model constructor.
     * @property {module:model/MessageStatus}
     */
    MessageStatus,

    /**
     * The MessageSubmission model constructor.
     * @property {module:model/MessageSubmission}
     */
    MessageSubmission,

    /**
     * The PreSignInfo model constructor.
     * @property {module:model/PreSignInfo}
     */
    PreSignInfo,

    /**
     * The PreSignInfoFieldsInner model constructor.
     * @property {module:model/PreSignInfoFieldsInner}
     */
    PreSignInfoFieldsInner,

    /**
     * The PreSignRequest model constructor.
     * @property {module:model/PreSignRequest}
     */
    PreSignRequest,

    /**
     * The Profile model constructor.
     * @property {module:model/Profile}
     */
    Profile,

    /**
     * The ProfileCommerce model constructor.
     * @property {module:model/ProfileCommerce}
     */
    ProfileCommerce,

    /**
     * The ProfileCommerceAddress model constructor.
     * @property {module:model/ProfileCommerceAddress}
     */
    ProfileCommerceAddress,

    /**
     * The ProfileCompany model constructor.
     * @property {module:model/ProfileCompany}
     */
    ProfileCompany,

    /**
     * The ProfileCredits model constructor.
     * @property {module:model/ProfileCredits}
     */
    ProfileCredits,

    /**
     * The ProfileOriginAddresses model constructor.
     * @property {module:model/ProfileOriginAddresses}
     */
    ProfileOriginAddresses,

    /**
     * The ProfileQuota model constructor.
     * @property {module:model/ProfileQuota}
     */
    ProfileQuota,

    /**
     * The SubmissionEntry model constructor.
     * @property {module:model/SubmissionEntry}
     */
    SubmissionEntry,

    /**
     * The SubmissionEntryFrom model constructor.
     * @property {module:model/SubmissionEntryFrom}
     */
    SubmissionEntryFrom,

    /**
     * The SubmissionEntryToInner model constructor.
     * @property {module:model/SubmissionEntryToInner}
     */
    SubmissionEntryToInner,

    /**
     * The TransferEntry model constructor.
     * @property {module:model/TransferEntry}
     */
    TransferEntry,

    /**
     * The Webhook model constructor.
     * @property {module:model/Webhook}
     */
    Webhook,

    /**
     * The WebhookEntry model constructor.
     * @property {module:model/WebhookEntry}
     */
    WebhookEntry,

    /**
    * The AttachmentsApi service constructor.
    * @property {module:api/AttachmentsApi}
    */
    AttachmentsApi,

    /**
    * The BlockedNumbersApi service constructor.
    * @property {module:api/BlockedNumbersApi}
    */
    BlockedNumbersApi,

    /**
    * The CreditsApi service constructor.
    * @property {module:api/CreditsApi}
    */
    CreditsApi,

    /**
    * The MessageApi service constructor.
    * @property {module:api/MessageApi}
    */
    MessageApi,

    /**
    * The ProfileApi service constructor.
    * @property {module:api/ProfileApi}
    */
    ProfileApi,

    /**
    * The WebhooksApi service constructor.
    * @property {module:api/WebhooksApi}
    */
    WebhooksApi
};
