/**
 * BulkSMS JSON REST API
 * ## Overview  The JSON REST API allows you to submit and receive [BulkSMS](https://www.bulksms.com/) messages. You can also get access to past messages and see your account profile.  The base URL to use for this service is `https://api.bulksms.com/v1`.  The base URL cannot be used on its own; you must append a path that identifies an operation and you may have to specify some path parameters as well.  [Click here](/developer/) to go to the main BulkSMS developer site.  In order to give you an idea on how the API can be used, some JSON snippets are provided below.  Have a look at the [messages section](#tag/Message) for more information.  Probably the most simple example  ``` {     \"to\": \"+27001234567\",     \"body\": \"Hello World!\" } ```   You can send unicode automatically using the `auto-unicode` query parameter.  Alternatively, you can specify `UNICODE` for the `encoding` property in the request body.  Please note: when `auto-unicode` is specified and the value of the `encoding` property is `UNICODE`, the message will always be sent as `UNICODE`.  Here is an example that sets the `encoding` explicitly  ``` {   \"to\": \"+27001234567\",   \"body\": \"Dobr치 pr치ce! Jak se m치코?\",   \"encoding\": \"UNICODE\" } ```  You can also specify a from number  ``` {     \"from\": \"+27007654321\",     \"to\": \"+27001234567\",     \"body\": \"Hello World!\" } ```  Similar to above, but repliable  ``` {     \"from\": { \"type\": \"REPLIABLE\" },     \"to\": \"+27001234567\",     \"body\": \"Hello World!\" } ```  A message to a group called Everyone  ``` {     \"to\": { \"type\": \"GROUP\", \"name\": \"Everyone\" },     \"body\": \"Hello World!\" } ```  A message to multiple recipients  ``` {     \"to\": [\"+27001234567\", \"+27002345678\", \"+27003456789\"],     \"body\": \"Happy Holidays!\" } ```  Sending more than one message in the same request  ``` [     {         \"to\": \"+27001234567\",         \"body\": \"Hello World!\"     },     {         \"to\": \"+27002345678\",         \"body\": \"Hello Universe!\"     } ] ```  **The insecure base URL `http://api.bulksms.com/v1` is deprecated** and may in future result in a `301` redirect response, or insecure requests may be rejected outright. Please use the secure (`https`) URI above.  ### HTTP Content Type  All API methods expect requests to supply a `Content-Type` header with the value `application/json`. All responses will have the `Content-Type` header set to `application/json`.  ### JSON Formatting  You are advised to format your JSON resources according to strict JSON format rules. While the API does attempt to parse strictly invalid JSON documents, doing so may lead to incorrect interpretation and unexpected results.  Good JSON libraries will produce valid JSON suitable for submission, but if you are manually generating the JSON text, be careful to follow the JSON format. This include correct escaping of control characters and double quoting of property names.  See the [JSON specification](https://tools.ietf.org/html/rfc4627) for further information.  ### Date Formatting  Dates are formatted according to ISO-8601, such as `1970-01-01T10:00:00+01:00` for 1st January 1970, 10AM UTC+1.  See the [Wikipedia ISO 8601 reference](https://en.wikipedia.org/wiki/ISO_8601) for further information.  Specifically, calendar dates are formatted with the 'extended' format `YYYY-MM-DD`. Basic format, week dates and ordinal dates are not supported. Times are also formatted in the 'extended' format `hh:mm:ss`. Hours, minutes and seconds are mandatory. Offset from UTC must be provided; this is to ensure that there is no misunderstanding regarding times provided to the API.  The format we look for is `yyyy-MM-ddThh:mm:ss[Z|[+-]hh:mm]`  Examples of valid date/times are`2011-12-31T12:00:00Z` `2011-12-31T12:00:00+02:00`  ### Entity Format Modifications  It is expected that over time some changes will be made to the request and response formats of various methods available in the API. Where possible, these will be implemented in a backwards compatible way. To make this possible you are required to ignore unknown properties. This enables the addition of information in response documents while maintaining compatibility with older clients.  ### Optional Request Entity Properties  There are many instances where requests can be made without having to specify every single property allowable in the request format. Any such optional properties are noted as such in the documentation and their default value is noted. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SubmissionEntryFrom from './SubmissionEntryFrom';
import SubmissionEntryToInner from './SubmissionEntryToInner';

/**
 * The SubmissionEntry model module.
 * @module model/SubmissionEntry
 * @version 1.0.0
 */
class SubmissionEntry {
    /**
     * Constructs a new <code>SubmissionEntry</code>.
     * An object that you use when posting messages.
     * @alias module:model/SubmissionEntry
     * @param body {String} The message content as described in the `encoding`. If the `encoding` is BINARY, the body must contain only hexadecimal digits where one byte is represented as two digits. For example, if you want to send two bytes '0x05' and '0x1F', the message body must contain the text '051F'.  The message content can also contain templates, read the [body templates section](#tag/Message) for more information. 
     * @param to {Array.<module:model/SubmissionEntryToInner>} Identifies the recipients  Instead of an array of structured objects, you can also provide a single object, a simple string or an array of strings. If you supply a string, the `type` is taken as INTERNATIONAL. 
     */
    constructor(body, to) { 
        
        SubmissionEntry.initialize(this, body, to);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, body, to) { 
        obj['body'] = body;
        obj['to'] = to;
    }

    /**
     * Constructs a <code>SubmissionEntry</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SubmissionEntry} obj Optional instance to populate.
     * @return {module:model/SubmissionEntry} The populated <code>SubmissionEntry</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SubmissionEntry();

            if (data.hasOwnProperty('body')) {
                obj['body'] = ApiClient.convertToType(data['body'], 'String');
            }
            if (data.hasOwnProperty('deliveryReports')) {
                obj['deliveryReports'] = ApiClient.convertToType(data['deliveryReports'], 'String');
            }
            if (data.hasOwnProperty('encoding')) {
                obj['encoding'] = ApiClient.convertToType(data['encoding'], 'String');
            }
            if (data.hasOwnProperty('from')) {
                obj['from'] = SubmissionEntryFrom.constructFromObject(data['from']);
            }
            if (data.hasOwnProperty('longMessageMaxParts')) {
                obj['longMessageMaxParts'] = ApiClient.convertToType(data['longMessageMaxParts'], 'Number');
            }
            if (data.hasOwnProperty('messageClass')) {
                obj['messageClass'] = ApiClient.convertToType(data['messageClass'], 'String');
            }
            if (data.hasOwnProperty('protocolId')) {
                obj['protocolId'] = ApiClient.convertToType(data['protocolId'], 'String');
            }
            if (data.hasOwnProperty('routingGroup')) {
                obj['routingGroup'] = ApiClient.convertToType(data['routingGroup'], 'String');
            }
            if (data.hasOwnProperty('to')) {
                obj['to'] = ApiClient.convertToType(data['to'], [SubmissionEntryToInner]);
            }
            if (data.hasOwnProperty('userSuppliedId')) {
                obj['userSuppliedId'] = ApiClient.convertToType(data['userSuppliedId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SubmissionEntry</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SubmissionEntry</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SubmissionEntry.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['body'] && !(typeof data['body'] === 'string' || data['body'] instanceof String)) {
            throw new Error("Expected the field `body` to be a primitive type in the JSON string but got " + data['body']);
        }
        // ensure the json data is a string
        if (data['deliveryReports'] && !(typeof data['deliveryReports'] === 'string' || data['deliveryReports'] instanceof String)) {
            throw new Error("Expected the field `deliveryReports` to be a primitive type in the JSON string but got " + data['deliveryReports']);
        }
        // ensure the json data is a string
        if (data['encoding'] && !(typeof data['encoding'] === 'string' || data['encoding'] instanceof String)) {
            throw new Error("Expected the field `encoding` to be a primitive type in the JSON string but got " + data['encoding']);
        }
        // validate the optional field `from`
        if (data['from']) { // data not null
          SubmissionEntryFrom.validateJSON(data['from']);
        }
        // ensure the json data is a string
        if (data['messageClass'] && !(typeof data['messageClass'] === 'string' || data['messageClass'] instanceof String)) {
            throw new Error("Expected the field `messageClass` to be a primitive type in the JSON string but got " + data['messageClass']);
        }
        // ensure the json data is a string
        if (data['protocolId'] && !(typeof data['protocolId'] === 'string' || data['protocolId'] instanceof String)) {
            throw new Error("Expected the field `protocolId` to be a primitive type in the JSON string but got " + data['protocolId']);
        }
        // ensure the json data is a string
        if (data['routingGroup'] && !(typeof data['routingGroup'] === 'string' || data['routingGroup'] instanceof String)) {
            throw new Error("Expected the field `routingGroup` to be a primitive type in the JSON string but got " + data['routingGroup']);
        }
        if (data['to']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['to'])) {
                throw new Error("Expected the field `to` to be an array in the JSON data but got " + data['to']);
            }
            // validate the optional field `to` (array)
            for (const item of data['to']) {
                SubmissionEntryToInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['userSuppliedId'] && !(typeof data['userSuppliedId'] === 'string' || data['userSuppliedId'] instanceof String)) {
            throw new Error("Expected the field `userSuppliedId` to be a primitive type in the JSON string but got " + data['userSuppliedId']);
        }

        return true;
    }


}

SubmissionEntry.RequiredProperties = ["body", "to"];

/**
 * The message content as described in the `encoding`. If the `encoding` is BINARY, the body must contain only hexadecimal digits where one byte is represented as two digits. For example, if you want to send two bytes '0x05' and '0x1F', the message body must contain the text '051F'.  The message content can also contain templates, read the [body templates section](#tag/Message) for more information. 
 * @member {String} body
 */
SubmissionEntry.prototype['body'] = undefined;

/**
 * The type of delivery reports to request from the delivering network. The default value  is `ALL`. Please note that not all networks support delivery reports. ALL. All possible delivery reports ERRORS. Only error delivery reports NONE. No delivery reports
 * @member {module:model/SubmissionEntry.DeliveryReportsEnum} deliveryReports
 */
SubmissionEntry.prototype['deliveryReports'] = undefined;

/**
 * Describes the content of the message body.  Typically this is TEXT, which is the default if no value is provided.  If you need to send characters that are not covered by the [GSM 03.38](https://en.wikipedia.org/wiki/GSM_03.38) character set you will need to specify UNICODE.  If you want to send a sequence of bytes, you must use BINARY.  You can also or use the `auto-unicode` parameter of the Send Messages Operation.     If you supply the value of `TEXT` while `auto-unicode` is `true` then your message may be converted to `UNICODE`.  If you supply a value other than `TEXT` for this property while `auto-unicode` is `true` then no automatic conversion will take place. 
 * @member {module:model/SubmissionEntry.EncodingEnum} encoding
 */
SubmissionEntry.prototype['encoding'] = undefined;

/**
 * @member {module:model/SubmissionEntryFrom} from
 */
SubmissionEntry.prototype['from'] = undefined;

/**
 * The maximum number of message parts that can be used for a [concatenated message](https://en.wikipedia.org/wiki/Concatenated_SMS). The default is `3`. 
 * @member {Number} longMessageMaxParts
 */
SubmissionEntry.prototype['longMessageMaxParts'] = undefined;

/**
 * The class of the message, as specified by 춶4 of the GSM 03.38 specification.  You can provide either an integer value, or a mnemonic string.  The default value is SIM_SPECIFIC. Numeric values are | Name | Value| |------|------| | FLASH_SMS | 0      | | ME_SPECIFIC | 1    | | SIM_SPECIFIC | 2   | | TE_SPECIFIC | 3   | 
 * @member {module:model/SubmissionEntry.MessageClassEnum} messageClass
 */
SubmissionEntry.prototype['messageClass'] = undefined;

/**
 * The TP-PID value from GSM 03.40[.750] 춶9.2.3.9.  You can provide either an integer value, or a mnemonic string.  If unspecified, this property defaults to `0`, representing the IMPLICIT value. Numeric values are listed below | Name | Value| |----- |------| | IMPLICIT              | 00 | | SHORT_MESSAGE_TYPE_0  | 64 | | REPLACE_MESSAGE_1     | 65 | | REPLACE_MESSAGE_2     | 66 | | REPLACE_MESSAGE_3     | 67 | | REPLACE_MESSAGE_4     | 68 | | REPLACE_MESSAGE_5     | 69 | | REPLACE_MESSAGE_6     | 70 | | REPLACE_MESSAGE_7     | 71 | | RETURN_CALL           | 95 | | ME_DOWNLOAD           | 125 | | ME_DEPERSONALIZE      | 126 | | SIM_DOWNLOAD          | 127 | 
 * @member {module:model/SubmissionEntry.ProtocolIdEnum} protocolId
 */
SubmissionEntry.prototype['protocolId'] = undefined;

/**
 * Allows you to choose routing. The default is STANDARD. 
 * @member {module:model/SubmissionEntry.RoutingGroupEnum} routingGroup
 */
SubmissionEntry.prototype['routingGroup'] = undefined;

/**
 * Identifies the recipients  Instead of an array of structured objects, you can also provide a single object, a simple string or an array of strings. If you supply a string, the `type` is taken as INTERNATIONAL. 
 * @member {Array.<module:model/SubmissionEntryToInner>} to
 */
SubmissionEntry.prototype['to'] = undefined;

/**
 * Correlate the messages created from this submission to your data.  The value can contain no more than 20 characters. 
 * @member {String} userSuppliedId
 */
SubmissionEntry.prototype['userSuppliedId'] = undefined;





/**
 * Allowed values for the <code>deliveryReports</code> property.
 * @enum {String}
 * @readonly
 */
SubmissionEntry['DeliveryReportsEnum'] = {

    /**
     * value: "ALL"
     * @const
     */
    "ALL": "ALL",

    /**
     * value: "ERRORS"
     * @const
     */
    "ERRORS": "ERRORS",

    /**
     * value: "NONE"
     * @const
     */
    "NONE": "NONE"
};


/**
 * Allowed values for the <code>encoding</code> property.
 * @enum {String}
 * @readonly
 */
SubmissionEntry['EncodingEnum'] = {

    /**
     * value: "TEXT"
     * @const
     */
    "TEXT": "TEXT",

    /**
     * value: "UNICODE"
     * @const
     */
    "UNICODE": "UNICODE",

    /**
     * value: "BINARY"
     * @const
     */
    "BINARY": "BINARY"
};


/**
 * Allowed values for the <code>messageClass</code> property.
 * @enum {String}
 * @readonly
 */
SubmissionEntry['MessageClassEnum'] = {

    /**
     * value: "FLASH_SMS"
     * @const
     */
    "FLASH_SMS": "FLASH_SMS",

    /**
     * value: "ME_SPECIFIC"
     * @const
     */
    "ME_SPECIFIC": "ME_SPECIFIC",

    /**
     * value: "SIM_SPECIFIC"
     * @const
     */
    "SIM_SPECIFIC": "SIM_SPECIFIC",

    /**
     * value: "TE_SPECIFIC"
     * @const
     */
    "TE_SPECIFIC": "TE_SPECIFIC"
};


/**
 * Allowed values for the <code>protocolId</code> property.
 * @enum {String}
 * @readonly
 */
SubmissionEntry['ProtocolIdEnum'] = {

    /**
     * value: "IMPLICIT"
     * @const
     */
    "IMPLICIT": "IMPLICIT",

    /**
     * value: "SHORT_MESSAGE_TYPE_0"
     * @const
     */
    "SHORT_MESSAGE_TYPE_0": "SHORT_MESSAGE_TYPE_0",

    /**
     * value: "REPLACE_MESSAGE_1"
     * @const
     */
    "REPLACE_MESSAGE_1": "REPLACE_MESSAGE_1",

    /**
     * value: "REPLACE_MESSAGE_2"
     * @const
     */
    "REPLACE_MESSAGE_2": "REPLACE_MESSAGE_2",

    /**
     * value: "REPLACE_MESSAGE_3"
     * @const
     */
    "REPLACE_MESSAGE_3": "REPLACE_MESSAGE_3",

    /**
     * value: "REPLACE_MESSAGE_4"
     * @const
     */
    "REPLACE_MESSAGE_4": "REPLACE_MESSAGE_4",

    /**
     * value: "REPLACE_MESSAGE_5"
     * @const
     */
    "REPLACE_MESSAGE_5": "REPLACE_MESSAGE_5",

    /**
     * value: "REPLACE_MESSAGE_6"
     * @const
     */
    "REPLACE_MESSAGE_6": "REPLACE_MESSAGE_6",

    /**
     * value: "REPLACE_MESSAGE_7"
     * @const
     */
    "REPLACE_MESSAGE_7": "REPLACE_MESSAGE_7",

    /**
     * value: "RETURN_CALL"
     * @const
     */
    "RETURN_CALL": "RETURN_CALL",

    /**
     * value: "ME_DOWNLOAD"
     * @const
     */
    "ME_DOWNLOAD": "ME_DOWNLOAD",

    /**
     * value: "ME_DEPERSONALIZE"
     * @const
     */
    "ME_DEPERSONALIZE": "ME_DEPERSONALIZE",

    /**
     * value: "SIM_DOWNLOAD"
     * @const
     */
    "SIM_DOWNLOAD": "SIM_DOWNLOAD"
};


/**
 * Allowed values for the <code>routingGroup</code> property.
 * @enum {String}
 * @readonly
 */
SubmissionEntry['RoutingGroupEnum'] = {

    /**
     * value: "ECONOMY"
     * @const
     */
    "ECONOMY": "ECONOMY",

    /**
     * value: "STANDARD"
     * @const
     */
    "STANDARD": "STANDARD",

    /**
     * value: "PREMIUM"
     * @const
     */
    "PREMIUM": "PREMIUM"
};



export default SubmissionEntry;

