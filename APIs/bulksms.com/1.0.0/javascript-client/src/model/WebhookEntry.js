/**
 * BulkSMS JSON REST API
 * ## Overview  The JSON REST API allows you to submit and receive [BulkSMS](https://www.bulksms.com/) messages. You can also get access to past messages and see your account profile.  The base URL to use for this service is `https://api.bulksms.com/v1`.  The base URL cannot be used on its own; you must append a path that identifies an operation and you may have to specify some path parameters as well.  [Click here](/developer/) to go to the main BulkSMS developer site.  In order to give you an idea on how the API can be used, some JSON snippets are provided below.  Have a look at the [messages section](#tag/Message) for more information.  Probably the most simple example  ``` {     \"to\": \"+27001234567\",     \"body\": \"Hello World!\" } ```   You can send unicode automatically using the `auto-unicode` query parameter.  Alternatively, you can specify `UNICODE` for the `encoding` property in the request body.  Please note: when `auto-unicode` is specified and the value of the `encoding` property is `UNICODE`, the message will always be sent as `UNICODE`.  Here is an example that sets the `encoding` explicitly  ``` {   \"to\": \"+27001234567\",   \"body\": \"Dobr치 pr치ce! Jak se m치코?\",   \"encoding\": \"UNICODE\" } ```  You can also specify a from number  ``` {     \"from\": \"+27007654321\",     \"to\": \"+27001234567\",     \"body\": \"Hello World!\" } ```  Similar to above, but repliable  ``` {     \"from\": { \"type\": \"REPLIABLE\" },     \"to\": \"+27001234567\",     \"body\": \"Hello World!\" } ```  A message to a group called Everyone  ``` {     \"to\": { \"type\": \"GROUP\", \"name\": \"Everyone\" },     \"body\": \"Hello World!\" } ```  A message to multiple recipients  ``` {     \"to\": [\"+27001234567\", \"+27002345678\", \"+27003456789\"],     \"body\": \"Happy Holidays!\" } ```  Sending more than one message in the same request  ``` [     {         \"to\": \"+27001234567\",         \"body\": \"Hello World!\"     },     {         \"to\": \"+27002345678\",         \"body\": \"Hello Universe!\"     } ] ```  **The insecure base URL `http://api.bulksms.com/v1` is deprecated** and may in future result in a `301` redirect response, or insecure requests may be rejected outright. Please use the secure (`https`) URI above.  ### HTTP Content Type  All API methods expect requests to supply a `Content-Type` header with the value `application/json`. All responses will have the `Content-Type` header set to `application/json`.  ### JSON Formatting  You are advised to format your JSON resources according to strict JSON format rules. While the API does attempt to parse strictly invalid JSON documents, doing so may lead to incorrect interpretation and unexpected results.  Good JSON libraries will produce valid JSON suitable for submission, but if you are manually generating the JSON text, be careful to follow the JSON format. This include correct escaping of control characters and double quoting of property names.  See the [JSON specification](https://tools.ietf.org/html/rfc4627) for further information.  ### Date Formatting  Dates are formatted according to ISO-8601, such as `1970-01-01T10:00:00+01:00` for 1st January 1970, 10AM UTC+1.  See the [Wikipedia ISO 8601 reference](https://en.wikipedia.org/wiki/ISO_8601) for further information.  Specifically, calendar dates are formatted with the 'extended' format `YYYY-MM-DD`. Basic format, week dates and ordinal dates are not supported. Times are also formatted in the 'extended' format `hh:mm:ss`. Hours, minutes and seconds are mandatory. Offset from UTC must be provided; this is to ensure that there is no misunderstanding regarding times provided to the API.  The format we look for is `yyyy-MM-ddThh:mm:ss[Z|[+-]hh:mm]`  Examples of valid date/times are`2011-12-31T12:00:00Z` `2011-12-31T12:00:00+02:00`  ### Entity Format Modifications  It is expected that over time some changes will be made to the request and response formats of various methods available in the API. Where possible, these will be implemented in a backwards compatible way. To make this possible you are required to ignore unknown properties. This enables the addition of information in response documents while maintaining compatibility with older clients.  ### Optional Request Entity Properties  There are many instances where requests can be made without having to specify every single property allowable in the request format. Any such optional properties are noted as such in the documentation and their default value is noted. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The WebhookEntry model module.
 * @module model/WebhookEntry
 * @version 1.0.0
 */
class WebhookEntry {
    /**
     * Constructs a new <code>WebhookEntry</code>.
     * @alias module:model/WebhookEntry
     * @param name {String} A text identifier for the webhook. More than one webhook cannot have the same name. 
     * @param triggerScope {module:model/WebhookEntry.TriggerScopeEnum} Specifies when the webhook will be triggered.    Please note the values are case sensitive.  If the value is `SENT`, the webhook will be called when a status update becomes available for a message you sent (i.e. a mobile terminating (MT) message).  If the value is `RECEIVED`, the webhook will be called when a message is received (i.e. a mobile originating (MO) message).  Note that this field forces you to create two separate webhook entries if you want to collect all messages.  However,  you can use the same `url` for both webhooks if you want. 
     * @param url {String} The location of the webhook.  In addition to being a [valid URI](https://en.wikipedia.org/wiki/Uniform_Resource_Identifier#Syntax), the url must also start with `http` or `https`. 
     */
    constructor(name, triggerScope, url) { 
        
        WebhookEntry.initialize(this, name, triggerScope, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, triggerScope, url) { 
        obj['name'] = name;
        obj['triggerScope'] = triggerScope;
        obj['url'] = url;
    }

    /**
     * Constructs a <code>WebhookEntry</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WebhookEntry} obj Optional instance to populate.
     * @return {module:model/WebhookEntry} The populated <code>WebhookEntry</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WebhookEntry();

            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('contactEmailAddress')) {
                obj['contactEmailAddress'] = ApiClient.convertToType(data['contactEmailAddress'], 'String');
            }
            if (data.hasOwnProperty('invokeOption')) {
                obj['invokeOption'] = ApiClient.convertToType(data['invokeOption'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('onWebApp')) {
                obj['onWebApp'] = ApiClient.convertToType(data['onWebApp'], 'Boolean');
            }
            if (data.hasOwnProperty('triggerScope')) {
                obj['triggerScope'] = ApiClient.convertToType(data['triggerScope'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WebhookEntry</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WebhookEntry</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WebhookEntry.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['contactEmailAddress'] && !(typeof data['contactEmailAddress'] === 'string' || data['contactEmailAddress'] instanceof String)) {
            throw new Error("Expected the field `contactEmailAddress` to be a primitive type in the JSON string but got " + data['contactEmailAddress']);
        }
        // ensure the json data is a string
        if (data['invokeOption'] && !(typeof data['invokeOption'] === 'string' || data['invokeOption'] instanceof String)) {
            throw new Error("Expected the field `invokeOption` to be a primitive type in the JSON string but got " + data['invokeOption']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['triggerScope'] && !(typeof data['triggerScope'] === 'string' || data['triggerScope'] instanceof String)) {
            throw new Error("Expected the field `triggerScope` to be a primitive type in the JSON string but got " + data['triggerScope']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

WebhookEntry.RequiredProperties = ["name", "triggerScope", "url"];

/**
 * Indicates whether you want the webhook activated.  If the value is `true`, the webhook at the given `url` will be invoked with an empty array (`[]`) as part of the validation process. If the webhook responds with a `2xx` status code, the submission is accepted; if not the webhook is not created (or updated).  If the value is `false` the webhook will be inactive, and it will not be invoked when messages are `SENT` or `RECEIVED`.  The default value is `true`. 
 * @member {Boolean} active
 */
WebhookEntry.prototype['active'] = undefined;

/**
 * The email address to which emails will be sent if there are problem with invoking the webhook.  The value must be a valid email address. If this value is `null`, no email will be sent.  It is `null` by default. 
 * @member {String} contactEmailAddress
 */
WebhookEntry.prototype['contactEmailAddress'] = undefined;

/**
 * Specifies how to invoke your webhook.  If the value is `ONE` the array POSTed to your webhook will contain no more than a single message.  Use this option if your webhook logic is unable to handle more than one messages at a time.  If the value is `MANY` the array POSTed to your webhook can contain up to 10 messages.  This is the recommended option.  The number of calls made to your webhook would be less and this will speed up your total processing time. If your webhook fails for an invoke that has more than one message, each message in the array will automatically be retried one at a time.   This value defaults to `ONE` - but it is recommended that you set this property to `MANY`. 
 * @member {module:model/WebhookEntry.InvokeOptionEnum} invokeOption
 */
WebhookEntry.prototype['invokeOption'] = undefined;

/**
 * A text identifier for the webhook. More than one webhook cannot have the same name. 
 * @member {String} name
 */
WebhookEntry.prototype['name'] = undefined;

/**
 * Indicates whether you want to show this webhook on the Web App.  Webhooks shown there can be updated by the user that use the public Web site.  The default value is `true`. 
 * @member {Boolean} onWebApp
 */
WebhookEntry.prototype['onWebApp'] = undefined;

/**
 * Specifies when the webhook will be triggered.    Please note the values are case sensitive.  If the value is `SENT`, the webhook will be called when a status update becomes available for a message you sent (i.e. a mobile terminating (MT) message).  If the value is `RECEIVED`, the webhook will be called when a message is received (i.e. a mobile originating (MO) message).  Note that this field forces you to create two separate webhook entries if you want to collect all messages.  However,  you can use the same `url` for both webhooks if you want. 
 * @member {module:model/WebhookEntry.TriggerScopeEnum} triggerScope
 */
WebhookEntry.prototype['triggerScope'] = undefined;

/**
 * The location of the webhook.  In addition to being a [valid URI](https://en.wikipedia.org/wiki/Uniform_Resource_Identifier#Syntax), the url must also start with `http` or `https`. 
 * @member {String} url
 */
WebhookEntry.prototype['url'] = undefined;





/**
 * Allowed values for the <code>invokeOption</code> property.
 * @enum {String}
 * @readonly
 */
WebhookEntry['InvokeOptionEnum'] = {

    /**
     * value: "ONE"
     * @const
     */
    "ONE": "ONE",

    /**
     * value: "MANY"
     * @const
     */
    "MANY": "MANY"
};


/**
 * Allowed values for the <code>triggerScope</code> property.
 * @enum {String}
 * @readonly
 */
WebhookEntry['TriggerScopeEnum'] = {

    /**
     * value: "SENT"
     * @const
     */
    "SENT": "SENT",

    /**
     * value: "RECEIVED"
     * @const
     */
    "RECEIVED": "RECEIVED"
};



export default WebhookEntry;

