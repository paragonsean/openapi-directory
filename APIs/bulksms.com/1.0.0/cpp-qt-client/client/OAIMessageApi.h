/**
 * BulkSMS JSON REST API
 * ## Overview  The JSON REST API allows you to submit and receive [BulkSMS](https://www.bulksms.com/) messages. You can also get access to past messages and see your account profile.  The base URL to use for this service is `https://api.bulksms.com/v1`.  The base URL cannot be used on its own; you must append a path that identifies an operation and you may have to specify some path parameters as well.  [Click here](/developer/) to go to the main BulkSMS developer site.  In order to give you an idea on how the API can be used, some JSON snippets are provided below.  Have a look at the [messages section](#tag/Message) for more information.  Probably the most simple example  ``` {     \"to\": \"+27001234567\",     \"body\": \"Hello World!\" } ```   You can send unicode automatically using the `auto-unicode` query parameter.  Alternatively, you can specify `UNICODE` for the `encoding` property in the request body.  Please note: when `auto-unicode` is specified and the value of the `encoding` property is `UNICODE`, the message will always be sent as `UNICODE`.  Here is an example that sets the `encoding` explicitly  ``` {   \"to\": \"+27001234567\",   \"body\": \"Dobr치 pr치ce! Jak se m치코?\",   \"encoding\": \"UNICODE\" } ```  You can also specify a from number  ``` {     \"from\": \"+27007654321\",     \"to\": \"+27001234567\",     \"body\": \"Hello World!\" } ```  Similar to above, but repliable  ``` {     \"from\": { \"type\": \"REPLIABLE\" },     \"to\": \"+27001234567\",     \"body\": \"Hello World!\" } ```  A message to a group called Everyone  ``` {     \"to\": { \"type\": \"GROUP\", \"name\": \"Everyone\" },     \"body\": \"Hello World!\" } ```  A message to multiple recipients  ``` {     \"to\": [\"+27001234567\", \"+27002345678\", \"+27003456789\"],     \"body\": \"Happy Holidays!\" } ```  Sending more than one message in the same request  ``` [     {         \"to\": \"+27001234567\",         \"body\": \"Hello World!\"     },     {         \"to\": \"+27002345678\",         \"body\": \"Hello Universe!\"     } ] ```  **The insecure base URL `http://api.bulksms.com/v1` is deprecated** and may in future result in a `301` redirect response, or insecure requests may be rejected outright. Please use the secure (`https`) URI above.  ### HTTP Content Type  All API methods expect requests to supply a `Content-Type` header with the value `application/json`. All responses will have the `Content-Type` header set to `application/json`.  ### JSON Formatting  You are advised to format your JSON resources according to strict JSON format rules. While the API does attempt to parse strictly invalid JSON documents, doing so may lead to incorrect interpretation and unexpected results.  Good JSON libraries will produce valid JSON suitable for submission, but if you are manually generating the JSON text, be careful to follow the JSON format. This include correct escaping of control characters and double quoting of property names.  See the [JSON specification](https://tools.ietf.org/html/rfc4627) for further information.  ### Date Formatting  Dates are formatted according to ISO-8601, such as `1970-01-01T10:00:00+01:00` for 1st January 1970, 10AM UTC+1.  See the [Wikipedia ISO 8601 reference](https://en.wikipedia.org/wiki/ISO_8601) for further information.  Specifically, calendar dates are formatted with the 'extended' format `YYYY-MM-DD`. Basic format, week dates and ordinal dates are not supported. Times are also formatted in the 'extended' format `hh:mm:ss`. Hours, minutes and seconds are mandatory. Offset from UTC must be provided; this is to ensure that there is no misunderstanding regarding times provided to the API.  The format we look for is `yyyy-MM-ddThh:mm:ss[Z|[+-]hh:mm]`  Examples of valid date/times are`2011-12-31T12:00:00Z` `2011-12-31T12:00:00+02:00`  ### Entity Format Modifications  It is expected that over time some changes will be made to the request and response formats of various methods available in the API. Where possible, these will be implemented in a backwards compatible way. To make this possible you are required to ignore unknown properties. This enables the addition of information in response documents while maintaining compatibility with older clients.  ### Optional Request Entity Properties  There are many instances where requests can be made without having to specify every single property allowable in the request format. Any such optional properties are noted as such in the documentation and their default value is noted. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMessageApi_H
#define OAI_OAIMessageApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAIMessage.h"
#include "OAISubmissionEntry.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMessageApi : public QObject {
    Q_OBJECT

public:
    OAIMessageApi(const int timeOut = 0);
    ~OAIMessageApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  limit double [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  sort_order QString [optional]
    */
    virtual void messagesGet(const ::OpenAPI::OptionalParam<double> &limit = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void messagesIdGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void messagesIdRelatedReceivedMessagesGet(const QString &id);

    /**
    * @param[in]  oai_submission_entry QList<OAISubmissionEntry> [required]
    * @param[in]  deduplication_id qint32 [optional]
    * @param[in]  auto_unicode bool [optional]
    * @param[in]  schedule_date QDateTime [optional]
    * @param[in]  schedule_description QString [optional]
    */
    virtual void messagesPost(const QList<OAISubmissionEntry> &oai_submission_entry, const ::OpenAPI::OptionalParam<qint32> &deduplication_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &auto_unicode = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDateTime> &schedule_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &schedule_description = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  to QString [required]
    * @param[in]  body QString [required]
    * @param[in]  deduplication_id qint32 [optional]
    */
    virtual void messagesSendGet(const QString &to, const QString &body, const ::OpenAPI::OptionalParam<qint32> &deduplication_id = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void messagesGetCallback(OAIHttpRequestWorker *worker);
    void messagesIdGetCallback(OAIHttpRequestWorker *worker);
    void messagesIdRelatedReceivedMessagesGetCallback(OAIHttpRequestWorker *worker);
    void messagesPostCallback(OAIHttpRequestWorker *worker);
    void messagesSendGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void messagesGetSignal(QList<OAIMessage> summary);
    void messagesIdGetSignal(OAIMessage summary);
    void messagesIdRelatedReceivedMessagesGetSignal(QList<OAIMessage> summary);
    void messagesPostSignal(QList<OAIMessage> summary);
    void messagesSendGetSignal(QList<OAIMessage> summary);


    void messagesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIMessage> summary);
    void messagesIdGetSignalFull(OAIHttpRequestWorker *worker, OAIMessage summary);
    void messagesIdRelatedReceivedMessagesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIMessage> summary);
    void messagesPostSignalFull(OAIHttpRequestWorker *worker, QList<OAIMessage> summary);
    void messagesSendGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIMessage> summary);

    Q_DECL_DEPRECATED_X("Use messagesGetSignalError() instead")
    void messagesGetSignalE(QList<OAIMessage> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void messagesGetSignalError(QList<OAIMessage> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messagesIdGetSignalError() instead")
    void messagesIdGetSignalE(OAIMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void messagesIdGetSignalError(OAIMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messagesIdRelatedReceivedMessagesGetSignalError() instead")
    void messagesIdRelatedReceivedMessagesGetSignalE(QList<OAIMessage> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void messagesIdRelatedReceivedMessagesGetSignalError(QList<OAIMessage> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messagesPostSignalError() instead")
    void messagesPostSignalE(QList<OAIMessage> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void messagesPostSignalError(QList<OAIMessage> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messagesSendGetSignalError() instead")
    void messagesSendGetSignalE(QList<OAIMessage> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void messagesSendGetSignalError(QList<OAIMessage> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use messagesGetSignalErrorFull() instead")
    void messagesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void messagesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messagesIdGetSignalErrorFull() instead")
    void messagesIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void messagesIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messagesIdRelatedReceivedMessagesGetSignalErrorFull() instead")
    void messagesIdRelatedReceivedMessagesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void messagesIdRelatedReceivedMessagesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messagesPostSignalErrorFull() instead")
    void messagesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void messagesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messagesSendGetSignalErrorFull() instead")
    void messagesSendGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void messagesSendGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
