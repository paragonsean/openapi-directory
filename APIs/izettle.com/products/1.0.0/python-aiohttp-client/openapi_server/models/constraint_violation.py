# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConstraintViolation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, constraint_type: str=None, developer_message: str=None, expected: str=None, property_name: str=None, value: str=None):
        """ConstraintViolation - a model defined in OpenAPI

        :param constraint_type: The constraint_type of this ConstraintViolation.
        :param developer_message: The developer_message of this ConstraintViolation.
        :param expected: The expected of this ConstraintViolation.
        :param property_name: The property_name of this ConstraintViolation.
        :param value: The value of this ConstraintViolation.
        """
        self.openapi_types = {
            'constraint_type': str,
            'developer_message': str,
            'expected': str,
            'property_name': str,
            'value': str
        }

        self.attribute_map = {
            'constraint_type': 'constraintType',
            'developer_message': 'developerMessage',
            'expected': 'expected',
            'property_name': 'propertyName',
            'value': 'value'
        }

        self._constraint_type = constraint_type
        self._developer_message = developer_message
        self._expected = expected
        self._property_name = property_name
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConstraintViolation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConstraintViolation of this ConstraintViolation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def constraint_type(self):
        """Gets the constraint_type of this ConstraintViolation.


        :return: The constraint_type of this ConstraintViolation.
        :rtype: str
        """
        return self._constraint_type

    @constraint_type.setter
    def constraint_type(self, constraint_type):
        """Sets the constraint_type of this ConstraintViolation.


        :param constraint_type: The constraint_type of this ConstraintViolation.
        :type constraint_type: str
        """
        allowed_values = ["MUST_BE_FALSE", "MUST_BE_TRUE", "MUST_BE_LESS_THAN", "MUST_BE_GREATER_THAN", "DIGIT_OUT_OF_BOUNDS", "DATE_MUST_BE_IN_THE_FUTURE", "MUST_BE_LESS_OR_EQUAL_THAN", "MUST_BE_GREATER_OR_EQUAL_TO", "MUST_NOT_BE_NULL", "MUST_BE_NULL", "DATE_MUST_BE_IN_THE_PAST", "MUST_MATCH_PATTERN", "INVALID_SIZE", "INVALID_EMAIL", "MUST_NOT_BE_EMPTY", "INVALID_RANGE", "UNKNOWN"]  # noqa: E501
        if constraint_type not in allowed_values:
            raise ValueError(
                "Invalid value for `constraint_type` ({0}), must be one of {1}"
                .format(constraint_type, allowed_values)
            )

        self._constraint_type = constraint_type

    @property
    def developer_message(self):
        """Gets the developer_message of this ConstraintViolation.


        :return: The developer_message of this ConstraintViolation.
        :rtype: str
        """
        return self._developer_message

    @developer_message.setter
    def developer_message(self, developer_message):
        """Sets the developer_message of this ConstraintViolation.


        :param developer_message: The developer_message of this ConstraintViolation.
        :type developer_message: str
        """

        self._developer_message = developer_message

    @property
    def expected(self):
        """Gets the expected of this ConstraintViolation.


        :return: The expected of this ConstraintViolation.
        :rtype: str
        """
        return self._expected

    @expected.setter
    def expected(self, expected):
        """Sets the expected of this ConstraintViolation.


        :param expected: The expected of this ConstraintViolation.
        :type expected: str
        """

        self._expected = expected

    @property
    def property_name(self):
        """Gets the property_name of this ConstraintViolation.


        :return: The property_name of this ConstraintViolation.
        :rtype: str
        """
        return self._property_name

    @property_name.setter
    def property_name(self, property_name):
        """Sets the property_name of this ConstraintViolation.


        :param property_name: The property_name of this ConstraintViolation.
        :type property_name: str
        """

        self._property_name = property_name

    @property
    def value(self):
        """Gets the value of this ConstraintViolation.


        :return: The value of this ConstraintViolation.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ConstraintViolation.


        :param value: The value of this ConstraintViolation.
        :type value: str
        """

        self._value = value
