# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.weight import Weight
from openapi_server import util


class Shipping(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, shipping_pricing_model: str=None, weight: Weight=None, weight_in_grams: int=None):
        """Shipping - a model defined in OpenAPI

        :param shipping_pricing_model: The shipping_pricing_model of this Shipping.
        :param weight: The weight of this Shipping.
        :param weight_in_grams: The weight_in_grams of this Shipping.
        """
        self.openapi_types = {
            'shipping_pricing_model': str,
            'weight': Weight,
            'weight_in_grams': int
        }

        self.attribute_map = {
            'shipping_pricing_model': 'shippingPricingModel',
            'weight': 'weight',
            'weight_in_grams': 'weightInGrams'
        }

        self._shipping_pricing_model = shipping_pricing_model
        self._weight = weight
        self._weight_in_grams = weight_in_grams

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Shipping':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Shipping of this Shipping.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def shipping_pricing_model(self):
        """Gets the shipping_pricing_model of this Shipping.


        :return: The shipping_pricing_model of this Shipping.
        :rtype: str
        """
        return self._shipping_pricing_model

    @shipping_pricing_model.setter
    def shipping_pricing_model(self, shipping_pricing_model):
        """Sets the shipping_pricing_model of this Shipping.


        :param shipping_pricing_model: The shipping_pricing_model of this Shipping.
        :type shipping_pricing_model: str
        """
        allowed_values = ["FREE", "STANDARD"]  # noqa: E501
        if shipping_pricing_model not in allowed_values:
            raise ValueError(
                "Invalid value for `shipping_pricing_model` ({0}), must be one of {1}"
                .format(shipping_pricing_model, allowed_values)
            )

        self._shipping_pricing_model = shipping_pricing_model

    @property
    def weight(self):
        """Gets the weight of this Shipping.


        :return: The weight of this Shipping.
        :rtype: Weight
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this Shipping.


        :param weight: The weight of this Shipping.
        :type weight: Weight
        """

        self._weight = weight

    @property
    def weight_in_grams(self):
        """Gets the weight_in_grams of this Shipping.


        :return: The weight_in_grams of this Shipping.
        :rtype: int
        """
        return self._weight_in_grams

    @weight_in_grams.setter
    def weight_in_grams(self, weight_in_grams):
        """Sets the weight_in_grams of this Shipping.


        :param weight_in_grams: The weight_in_grams of this Shipping.
        :type weight_in_grams: int
        """
        if weight_in_grams is not None and weight_in_grams > 2147483647:
            raise ValueError("Invalid value for `weight_in_grams`, must be a value less than or equal to `2147483647`")
        if weight_in_grams is not None and weight_in_grams < 0:
            raise ValueError("Invalid value for `weight_in_grams`, must be a value greater than or equal to `0`")

        self._weight_in_grams = weight_in_grams
