# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ImportResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: datetime=None, error_message: str=None, finished: datetime=None, items: int=None, state: str=None, uuid: str=None):
        """ImportResponse - a model defined in OpenAPI

        :param created: The created of this ImportResponse.
        :param error_message: The error_message of this ImportResponse.
        :param finished: The finished of this ImportResponse.
        :param items: The items of this ImportResponse.
        :param state: The state of this ImportResponse.
        :param uuid: The uuid of this ImportResponse.
        """
        self.openapi_types = {
            'created': datetime,
            'error_message': str,
            'finished': datetime,
            'items': int,
            'state': str,
            'uuid': str
        }

        self.attribute_map = {
            'created': 'created',
            'error_message': 'errorMessage',
            'finished': 'finished',
            'items': 'items',
            'state': 'state',
            'uuid': 'uuid'
        }

        self._created = created
        self._error_message = error_message
        self._finished = finished
        self._items = items
        self._state = state
        self._uuid = uuid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImportResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImportResponse of this ImportResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this ImportResponse.


        :return: The created of this ImportResponse.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ImportResponse.


        :param created: The created of this ImportResponse.
        :type created: datetime
        """

        self._created = created

    @property
    def error_message(self):
        """Gets the error_message of this ImportResponse.


        :return: The error_message of this ImportResponse.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this ImportResponse.


        :param error_message: The error_message of this ImportResponse.
        :type error_message: str
        """

        self._error_message = error_message

    @property
    def finished(self):
        """Gets the finished of this ImportResponse.


        :return: The finished of this ImportResponse.
        :rtype: datetime
        """
        return self._finished

    @finished.setter
    def finished(self, finished):
        """Sets the finished of this ImportResponse.


        :param finished: The finished of this ImportResponse.
        :type finished: datetime
        """

        self._finished = finished

    @property
    def items(self):
        """Gets the items of this ImportResponse.


        :return: The items of this ImportResponse.
        :rtype: int
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this ImportResponse.


        :param items: The items of this ImportResponse.
        :type items: int
        """

        self._items = items

    @property
    def state(self):
        """Gets the state of this ImportResponse.


        :return: The state of this ImportResponse.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ImportResponse.


        :param state: The state of this ImportResponse.
        :type state: str
        """
        allowed_values = ["IMPORTING", "FINISHED_SUCCESS", "FINISHED_FAILED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def uuid(self):
        """Gets the uuid of this ImportResponse.


        :return: The uuid of this ImportResponse.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this ImportResponse.


        :param uuid: The uuid of this ImportResponse.
        :type uuid: str
        """

        self._uuid = uuid
