# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.category_dto import CategoryDTO
from openapi_server.models.metadata_dto import MetadataDTO
from openapi_server.models.online_properties import OnlineProperties
from openapi_server.models.presentation_dto import PresentationDTO
from openapi_server.models.variant_dto import VariantDTO
from openapi_server.models.variant_option_definitions import VariantOptionDefinitions
from openapi_server import util


class FullProductUpdateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, categories: list[str]=None, category: CategoryDTO=None, description: str=None, external_reference: str=None, image_lookup_keys: list[str]=None, metadata: MetadataDTO=None, name: str=None, online: OnlineProperties=None, presentation: PresentationDTO=None, tax_code: str=None, tax_exempt: bool=None, tax_rates: list[str]=None, unit_name: str=None, uuid: str=None, variant_option_definitions: VariantOptionDefinitions=None, variants: List[VariantDTO]=None, vat_percentage: float=None):
        """FullProductUpdateRequest - a model defined in OpenAPI

        :param categories: The categories of this FullProductUpdateRequest.
        :param category: The category of this FullProductUpdateRequest.
        :param description: The description of this FullProductUpdateRequest.
        :param external_reference: The external_reference of this FullProductUpdateRequest.
        :param image_lookup_keys: The image_lookup_keys of this FullProductUpdateRequest.
        :param metadata: The metadata of this FullProductUpdateRequest.
        :param name: The name of this FullProductUpdateRequest.
        :param online: The online of this FullProductUpdateRequest.
        :param presentation: The presentation of this FullProductUpdateRequest.
        :param tax_code: The tax_code of this FullProductUpdateRequest.
        :param tax_exempt: The tax_exempt of this FullProductUpdateRequest.
        :param tax_rates: The tax_rates of this FullProductUpdateRequest.
        :param unit_name: The unit_name of this FullProductUpdateRequest.
        :param uuid: The uuid of this FullProductUpdateRequest.
        :param variant_option_definitions: The variant_option_definitions of this FullProductUpdateRequest.
        :param variants: The variants of this FullProductUpdateRequest.
        :param vat_percentage: The vat_percentage of this FullProductUpdateRequest.
        """
        self.openapi_types = {
            'categories': list[str],
            'category': CategoryDTO,
            'description': str,
            'external_reference': str,
            'image_lookup_keys': list[str],
            'metadata': MetadataDTO,
            'name': str,
            'online': OnlineProperties,
            'presentation': PresentationDTO,
            'tax_code': str,
            'tax_exempt': bool,
            'tax_rates': list[str],
            'unit_name': str,
            'uuid': str,
            'variant_option_definitions': VariantOptionDefinitions,
            'variants': List[VariantDTO],
            'vat_percentage': float
        }

        self.attribute_map = {
            'categories': 'categories',
            'category': 'category',
            'description': 'description',
            'external_reference': 'externalReference',
            'image_lookup_keys': 'imageLookupKeys',
            'metadata': 'metadata',
            'name': 'name',
            'online': 'online',
            'presentation': 'presentation',
            'tax_code': 'taxCode',
            'tax_exempt': 'taxExempt',
            'tax_rates': 'taxRates',
            'unit_name': 'unitName',
            'uuid': 'uuid',
            'variant_option_definitions': 'variantOptionDefinitions',
            'variants': 'variants',
            'vat_percentage': 'vatPercentage'
        }

        self._categories = categories
        self._category = category
        self._description = description
        self._external_reference = external_reference
        self._image_lookup_keys = image_lookup_keys
        self._metadata = metadata
        self._name = name
        self._online = online
        self._presentation = presentation
        self._tax_code = tax_code
        self._tax_exempt = tax_exempt
        self._tax_rates = tax_rates
        self._unit_name = unit_name
        self._uuid = uuid
        self._variant_option_definitions = variant_option_definitions
        self._variants = variants
        self._vat_percentage = vat_percentage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FullProductUpdateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FullProductUpdateRequest of this FullProductUpdateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def categories(self):
        """Gets the categories of this FullProductUpdateRequest.


        :return: The categories of this FullProductUpdateRequest.
        :rtype: list[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this FullProductUpdateRequest.


        :param categories: The categories of this FullProductUpdateRequest.
        :type categories: list[str]
        """
        if categories is not None and len(categories) > 1:
            raise ValueError("Invalid value for `categories`, number of items must be less than or equal to `1`")
        if categories is not None and len(categories) < 0:
            raise ValueError("Invalid value for `categories`, number of items must be greater than or equal to `0`")

        self._categories = categories

    @property
    def category(self):
        """Gets the category of this FullProductUpdateRequest.


        :return: The category of this FullProductUpdateRequest.
        :rtype: CategoryDTO
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this FullProductUpdateRequest.


        :param category: The category of this FullProductUpdateRequest.
        :type category: CategoryDTO
        """

        self._category = category

    @property
    def description(self):
        """Gets the description of this FullProductUpdateRequest.


        :return: The description of this FullProductUpdateRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FullProductUpdateRequest.


        :param description: The description of this FullProductUpdateRequest.
        :type description: str
        """
        if description is not None and len(description) > 1024:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1024`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    @property
    def external_reference(self):
        """Gets the external_reference of this FullProductUpdateRequest.


        :return: The external_reference of this FullProductUpdateRequest.
        :rtype: str
        """
        return self._external_reference

    @external_reference.setter
    def external_reference(self, external_reference):
        """Sets the external_reference of this FullProductUpdateRequest.


        :param external_reference: The external_reference of this FullProductUpdateRequest.
        :type external_reference: str
        """

        self._external_reference = external_reference

    @property
    def image_lookup_keys(self):
        """Gets the image_lookup_keys of this FullProductUpdateRequest.


        :return: The image_lookup_keys of this FullProductUpdateRequest.
        :rtype: list[str]
        """
        return self._image_lookup_keys

    @image_lookup_keys.setter
    def image_lookup_keys(self, image_lookup_keys):
        """Sets the image_lookup_keys of this FullProductUpdateRequest.


        :param image_lookup_keys: The image_lookup_keys of this FullProductUpdateRequest.
        :type image_lookup_keys: list[str]
        """

        self._image_lookup_keys = image_lookup_keys

    @property
    def metadata(self):
        """Gets the metadata of this FullProductUpdateRequest.


        :return: The metadata of this FullProductUpdateRequest.
        :rtype: MetadataDTO
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this FullProductUpdateRequest.


        :param metadata: The metadata of this FullProductUpdateRequest.
        :type metadata: MetadataDTO
        """

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this FullProductUpdateRequest.


        :return: The name of this FullProductUpdateRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FullProductUpdateRequest.


        :param name: The name of this FullProductUpdateRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 256:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `256`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def online(self):
        """Gets the online of this FullProductUpdateRequest.


        :return: The online of this FullProductUpdateRequest.
        :rtype: OnlineProperties
        """
        return self._online

    @online.setter
    def online(self, online):
        """Sets the online of this FullProductUpdateRequest.


        :param online: The online of this FullProductUpdateRequest.
        :type online: OnlineProperties
        """

        self._online = online

    @property
    def presentation(self):
        """Gets the presentation of this FullProductUpdateRequest.


        :return: The presentation of this FullProductUpdateRequest.
        :rtype: PresentationDTO
        """
        return self._presentation

    @presentation.setter
    def presentation(self, presentation):
        """Sets the presentation of this FullProductUpdateRequest.


        :param presentation: The presentation of this FullProductUpdateRequest.
        :type presentation: PresentationDTO
        """

        self._presentation = presentation

    @property
    def tax_code(self):
        """Gets the tax_code of this FullProductUpdateRequest.


        :return: The tax_code of this FullProductUpdateRequest.
        :rtype: str
        """
        return self._tax_code

    @tax_code.setter
    def tax_code(self, tax_code):
        """Sets the tax_code of this FullProductUpdateRequest.


        :param tax_code: The tax_code of this FullProductUpdateRequest.
        :type tax_code: str
        """

        self._tax_code = tax_code

    @property
    def tax_exempt(self):
        """Gets the tax_exempt of this FullProductUpdateRequest.


        :return: The tax_exempt of this FullProductUpdateRequest.
        :rtype: bool
        """
        return self._tax_exempt

    @tax_exempt.setter
    def tax_exempt(self, tax_exempt):
        """Sets the tax_exempt of this FullProductUpdateRequest.


        :param tax_exempt: The tax_exempt of this FullProductUpdateRequest.
        :type tax_exempt: bool
        """

        self._tax_exempt = tax_exempt

    @property
    def tax_rates(self):
        """Gets the tax_rates of this FullProductUpdateRequest.


        :return: The tax_rates of this FullProductUpdateRequest.
        :rtype: list[str]
        """
        return self._tax_rates

    @tax_rates.setter
    def tax_rates(self, tax_rates):
        """Sets the tax_rates of this FullProductUpdateRequest.


        :param tax_rates: The tax_rates of this FullProductUpdateRequest.
        :type tax_rates: list[str]
        """

        self._tax_rates = tax_rates

    @property
    def unit_name(self):
        """Gets the unit_name of this FullProductUpdateRequest.


        :return: The unit_name of this FullProductUpdateRequest.
        :rtype: str
        """
        return self._unit_name

    @unit_name.setter
    def unit_name(self, unit_name):
        """Sets the unit_name of this FullProductUpdateRequest.


        :param unit_name: The unit_name of this FullProductUpdateRequest.
        :type unit_name: str
        """

        self._unit_name = unit_name

    @property
    def uuid(self):
        """Gets the uuid of this FullProductUpdateRequest.


        :return: The uuid of this FullProductUpdateRequest.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this FullProductUpdateRequest.


        :param uuid: The uuid of this FullProductUpdateRequest.
        :type uuid: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")

        self._uuid = uuid

    @property
    def variant_option_definitions(self):
        """Gets the variant_option_definitions of this FullProductUpdateRequest.


        :return: The variant_option_definitions of this FullProductUpdateRequest.
        :rtype: VariantOptionDefinitions
        """
        return self._variant_option_definitions

    @variant_option_definitions.setter
    def variant_option_definitions(self, variant_option_definitions):
        """Sets the variant_option_definitions of this FullProductUpdateRequest.


        :param variant_option_definitions: The variant_option_definitions of this FullProductUpdateRequest.
        :type variant_option_definitions: VariantOptionDefinitions
        """

        self._variant_option_definitions = variant_option_definitions

    @property
    def variants(self):
        """Gets the variants of this FullProductUpdateRequest.


        :return: The variants of this FullProductUpdateRequest.
        :rtype: List[VariantDTO]
        """
        return self._variants

    @variants.setter
    def variants(self, variants):
        """Sets the variants of this FullProductUpdateRequest.


        :param variants: The variants of this FullProductUpdateRequest.
        :type variants: List[VariantDTO]
        """

        self._variants = variants

    @property
    def vat_percentage(self):
        """Gets the vat_percentage of this FullProductUpdateRequest.


        :return: The vat_percentage of this FullProductUpdateRequest.
        :rtype: float
        """
        return self._vat_percentage

    @vat_percentage.setter
    def vat_percentage(self, vat_percentage):
        """Sets the vat_percentage of this FullProductUpdateRequest.


        :param vat_percentage: The vat_percentage of this FullProductUpdateRequest.
        :type vat_percentage: float
        """
        if vat_percentage is not None and vat_percentage > 100:
            raise ValueError("Invalid value for `vat_percentage`, must be a value less than or equal to `100`")
        if vat_percentage is not None and vat_percentage < 0:
            raise ValueError("Invalid value for `vat_percentage`, must be a value greater than or equal to `0`")

        self._vat_percentage = vat_percentage
