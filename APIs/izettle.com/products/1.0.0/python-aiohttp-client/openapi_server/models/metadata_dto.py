# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.source_dto import SourceDTO
from openapi_server import util


class MetadataDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, in_pos: bool=None, source: SourceDTO=None):
        """MetadataDTO - a model defined in OpenAPI

        :param in_pos: The in_pos of this MetadataDTO.
        :param source: The source of this MetadataDTO.
        """
        self.openapi_types = {
            'in_pos': bool,
            'source': SourceDTO
        }

        self.attribute_map = {
            'in_pos': 'inPos',
            'source': 'source'
        }

        self._in_pos = in_pos
        self._source = source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MetadataDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MetadataDTO of this MetadataDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def in_pos(self):
        """Gets the in_pos of this MetadataDTO.


        :return: The in_pos of this MetadataDTO.
        :rtype: bool
        """
        return self._in_pos

    @in_pos.setter
    def in_pos(self, in_pos):
        """Sets the in_pos of this MetadataDTO.


        :param in_pos: The in_pos of this MetadataDTO.
        :type in_pos: bool
        """
        if in_pos is None:
            raise ValueError("Invalid value for `in_pos`, must not be `None`")

        self._in_pos = in_pos

    @property
    def source(self):
        """Gets the source of this MetadataDTO.


        :return: The source of this MetadataDTO.
        :rtype: SourceDTO
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this MetadataDTO.


        :param source: The source of this MetadataDTO.
        :type source: SourceDTO
        """

        self._source = source
