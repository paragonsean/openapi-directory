# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Weight(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, unit: str=None, weight: float=None):
        """Weight - a model defined in OpenAPI

        :param unit: The unit of this Weight.
        :param weight: The weight of this Weight.
        """
        self.openapi_types = {
            'unit': str,
            'weight': float
        }

        self.attribute_map = {
            'unit': 'unit',
            'weight': 'weight'
        }

        self._unit = unit
        self._weight = weight

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Weight':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Weight of this Weight.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def unit(self):
        """Gets the unit of this Weight.


        :return: The unit of this Weight.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this Weight.


        :param unit: The unit of this Weight.
        :type unit: str
        """
        allowed_values = ["kg", "g", "oz", "lb"]  # noqa: E501
        if unit not in allowed_values:
            raise ValueError(
                "Invalid value for `unit` ({0}), must be one of {1}"
                .format(unit, allowed_values)
            )

        self._unit = unit

    @property
    def weight(self):
        """Gets the weight of this Weight.


        :return: The weight of this Weight.
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this Weight.


        :param weight: The weight of this Weight.
        :type weight: float
        """
        if weight is None:
            raise ValueError("Invalid value for `weight`, must not be `None`")
        if weight is not None and weight < 0:
            raise ValueError("Invalid value for `weight`, must be a value greater than or equal to `0`")

        self._weight = weight
