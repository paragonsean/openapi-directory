# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SearchEngineOptimization(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, meta_description: str=None, slug: str=None, title: str=None):
        """SearchEngineOptimization - a model defined in OpenAPI

        :param meta_description: The meta_description of this SearchEngineOptimization.
        :param slug: The slug of this SearchEngineOptimization.
        :param title: The title of this SearchEngineOptimization.
        """
        self.openapi_types = {
            'meta_description': str,
            'slug': str,
            'title': str
        }

        self.attribute_map = {
            'meta_description': 'metaDescription',
            'slug': 'slug',
            'title': 'title'
        }

        self._meta_description = meta_description
        self._slug = slug
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchEngineOptimization':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchEngineOptimization of this SearchEngineOptimization.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def meta_description(self):
        """Gets the meta_description of this SearchEngineOptimization.


        :return: The meta_description of this SearchEngineOptimization.
        :rtype: str
        """
        return self._meta_description

    @meta_description.setter
    def meta_description(self, meta_description):
        """Sets the meta_description of this SearchEngineOptimization.


        :param meta_description: The meta_description of this SearchEngineOptimization.
        :type meta_description: str
        """
        if meta_description is not None and len(meta_description) > 320:
            raise ValueError("Invalid value for `meta_description`, length must be less than or equal to `320`")
        if meta_description is not None and len(meta_description) < 0:
            raise ValueError("Invalid value for `meta_description`, length must be greater than or equal to `0`")

        self._meta_description = meta_description

    @property
    def slug(self):
        """Gets the slug of this SearchEngineOptimization.


        :return: The slug of this SearchEngineOptimization.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this SearchEngineOptimization.


        :param slug: The slug of this SearchEngineOptimization.
        :type slug: str
        """
        if slug is not None and len(slug) > 256:
            raise ValueError("Invalid value for `slug`, length must be less than or equal to `256`")
        if slug is not None and len(slug) < 1:
            raise ValueError("Invalid value for `slug`, length must be greater than or equal to `1`")

        self._slug = slug

    @property
    def title(self):
        """Gets the title of this SearchEngineOptimization.


        :return: The title of this SearchEngineOptimization.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this SearchEngineOptimization.


        :param title: The title of this SearchEngineOptimization.
        :type title: str
        """
        if title is not None and len(title) > 256:
            raise ValueError("Invalid value for `title`, length must be less than or equal to `256`")
        if title is not None and len(title) < 0:
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `0`")

        self._title = title
