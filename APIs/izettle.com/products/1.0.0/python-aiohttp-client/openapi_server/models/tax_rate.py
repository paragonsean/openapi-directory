# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TaxRate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default: bool=None, label: str=None, percentage: float=None, uuid: str=None):
        """TaxRate - a model defined in OpenAPI

        :param default: The default of this TaxRate.
        :param label: The label of this TaxRate.
        :param percentage: The percentage of this TaxRate.
        :param uuid: The uuid of this TaxRate.
        """
        self.openapi_types = {
            'default': bool,
            'label': str,
            'percentage': float,
            'uuid': str
        }

        self.attribute_map = {
            'default': 'default',
            'label': 'label',
            'percentage': 'percentage',
            'uuid': 'uuid'
        }

        self._default = default
        self._label = label
        self._percentage = percentage
        self._uuid = uuid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaxRate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TaxRate of this TaxRate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default(self):
        """Gets the default of this TaxRate.


        :return: The default of this TaxRate.
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this TaxRate.


        :param default: The default of this TaxRate.
        :type default: bool
        """

        self._default = default

    @property
    def label(self):
        """Gets the label of this TaxRate.


        :return: The label of this TaxRate.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this TaxRate.


        :param label: The label of this TaxRate.
        :type label: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")
        if label is not None and len(label) > 512:
            raise ValueError("Invalid value for `label`, length must be less than or equal to `512`")
        if label is not None and len(label) < 0:
            raise ValueError("Invalid value for `label`, length must be greater than or equal to `0`")

        self._label = label

    @property
    def percentage(self):
        """Gets the percentage of this TaxRate.


        :return: The percentage of this TaxRate.
        :rtype: float
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this TaxRate.


        :param percentage: The percentage of this TaxRate.
        :type percentage: float
        """
        if percentage is not None and percentage > 100:
            raise ValueError("Invalid value for `percentage`, must be a value less than or equal to `100`")

        self._percentage = percentage

    @property
    def uuid(self):
        """Gets the uuid of this TaxRate.


        :return: The uuid of this TaxRate.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this TaxRate.


        :param uuid: The uuid of this TaxRate.
        :type uuid: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")

        self._uuid = uuid
