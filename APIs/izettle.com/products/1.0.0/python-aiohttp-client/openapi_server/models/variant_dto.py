# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.presentation_dto import PresentationDTO
from openapi_server.models.price import Price
from openapi_server.models.variant_option import VariantOption
from openapi_server import util


class VariantDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, barcode: str=None, cost_price: Price=None, description: str=None, name: str=None, options: List[VariantOption]=None, presentation: PresentationDTO=None, price: Price=None, sku: str=None, uuid: str=None, vat_percentage: float=None):
        """VariantDTO - a model defined in OpenAPI

        :param barcode: The barcode of this VariantDTO.
        :param cost_price: The cost_price of this VariantDTO.
        :param description: The description of this VariantDTO.
        :param name: The name of this VariantDTO.
        :param options: The options of this VariantDTO.
        :param presentation: The presentation of this VariantDTO.
        :param price: The price of this VariantDTO.
        :param sku: The sku of this VariantDTO.
        :param uuid: The uuid of this VariantDTO.
        :param vat_percentage: The vat_percentage of this VariantDTO.
        """
        self.openapi_types = {
            'barcode': str,
            'cost_price': Price,
            'description': str,
            'name': str,
            'options': List[VariantOption],
            'presentation': PresentationDTO,
            'price': Price,
            'sku': str,
            'uuid': str,
            'vat_percentage': float
        }

        self.attribute_map = {
            'barcode': 'barcode',
            'cost_price': 'costPrice',
            'description': 'description',
            'name': 'name',
            'options': 'options',
            'presentation': 'presentation',
            'price': 'price',
            'sku': 'sku',
            'uuid': 'uuid',
            'vat_percentage': 'vatPercentage'
        }

        self._barcode = barcode
        self._cost_price = cost_price
        self._description = description
        self._name = name
        self._options = options
        self._presentation = presentation
        self._price = price
        self._sku = sku
        self._uuid = uuid
        self._vat_percentage = vat_percentage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VariantDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VariantDTO of this VariantDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def barcode(self):
        """Gets the barcode of this VariantDTO.


        :return: The barcode of this VariantDTO.
        :rtype: str
        """
        return self._barcode

    @barcode.setter
    def barcode(self, barcode):
        """Sets the barcode of this VariantDTO.


        :param barcode: The barcode of this VariantDTO.
        :type barcode: str
        """
        if barcode is not None and len(barcode) > 128:
            raise ValueError("Invalid value for `barcode`, length must be less than or equal to `128`")
        if barcode is not None and len(barcode) < 0:
            raise ValueError("Invalid value for `barcode`, length must be greater than or equal to `0`")

        self._barcode = barcode

    @property
    def cost_price(self):
        """Gets the cost_price of this VariantDTO.


        :return: The cost_price of this VariantDTO.
        :rtype: Price
        """
        return self._cost_price

    @cost_price.setter
    def cost_price(self, cost_price):
        """Sets the cost_price of this VariantDTO.


        :param cost_price: The cost_price of this VariantDTO.
        :type cost_price: Price
        """

        self._cost_price = cost_price

    @property
    def description(self):
        """Gets the description of this VariantDTO.


        :return: The description of this VariantDTO.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VariantDTO.


        :param description: The description of this VariantDTO.
        :type description: str
        """
        if description is not None and len(description) > 1024:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1024`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    @property
    def name(self):
        """Gets the name of this VariantDTO.


        :return: The name of this VariantDTO.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VariantDTO.


        :param name: The name of this VariantDTO.
        :type name: str
        """
        if name is not None and len(name) > 256:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `256`")
        if name is not None and len(name) < 0:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")

        self._name = name

    @property
    def options(self):
        """Gets the options of this VariantDTO.


        :return: The options of this VariantDTO.
        :rtype: List[VariantOption]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this VariantDTO.


        :param options: The options of this VariantDTO.
        :type options: List[VariantOption]
        """
        if options is not None and len(options) > 99:
            raise ValueError("Invalid value for `options`, number of items must be less than or equal to `99`")
        if options is not None and len(options) < 1:
            raise ValueError("Invalid value for `options`, number of items must be greater than or equal to `1`")

        self._options = options

    @property
    def presentation(self):
        """Gets the presentation of this VariantDTO.


        :return: The presentation of this VariantDTO.
        :rtype: PresentationDTO
        """
        return self._presentation

    @presentation.setter
    def presentation(self, presentation):
        """Sets the presentation of this VariantDTO.


        :param presentation: The presentation of this VariantDTO.
        :type presentation: PresentationDTO
        """

        self._presentation = presentation

    @property
    def price(self):
        """Gets the price of this VariantDTO.


        :return: The price of this VariantDTO.
        :rtype: Price
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this VariantDTO.


        :param price: The price of this VariantDTO.
        :type price: Price
        """

        self._price = price

    @property
    def sku(self):
        """Gets the sku of this VariantDTO.


        :return: The sku of this VariantDTO.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this VariantDTO.


        :param sku: The sku of this VariantDTO.
        :type sku: str
        """
        if sku is not None and len(sku) > 64:
            raise ValueError("Invalid value for `sku`, length must be less than or equal to `64`")
        if sku is not None and len(sku) < 0:
            raise ValueError("Invalid value for `sku`, length must be greater than or equal to `0`")

        self._sku = sku

    @property
    def uuid(self):
        """Gets the uuid of this VariantDTO.


        :return: The uuid of this VariantDTO.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this VariantDTO.


        :param uuid: The uuid of this VariantDTO.
        :type uuid: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")

        self._uuid = uuid

    @property
    def vat_percentage(self):
        """Gets the vat_percentage of this VariantDTO.


        :return: The vat_percentage of this VariantDTO.
        :rtype: float
        """
        return self._vat_percentage

    @vat_percentage.setter
    def vat_percentage(self, vat_percentage):
        """Sets the vat_percentage of this VariantDTO.


        :param vat_percentage: The vat_percentage of this VariantDTO.
        :type vat_percentage: float
        """
        if vat_percentage is not None and vat_percentage > 100:
            raise ValueError("Invalid value for `vat_percentage`, must be a value less than or equal to `100`")
        if vat_percentage is not None and vat_percentage < 0:
            raise ValueError("Invalid value for `vat_percentage`, must be a value greater than or equal to `0`")

        self._vat_percentage = vat_percentage
