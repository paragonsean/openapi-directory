# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TaxSettingsUpdateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, taxation_mode: str=None):
        """TaxSettingsUpdateRequest - a model defined in OpenAPI

        :param taxation_mode: The taxation_mode of this TaxSettingsUpdateRequest.
        """
        self.openapi_types = {
            'taxation_mode': str
        }

        self.attribute_map = {
            'taxation_mode': 'taxationMode'
        }

        self._taxation_mode = taxation_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaxSettingsUpdateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TaxSettingsUpdateRequest of this TaxSettingsUpdateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def taxation_mode(self):
        """Gets the taxation_mode of this TaxSettingsUpdateRequest.


        :return: The taxation_mode of this TaxSettingsUpdateRequest.
        :rtype: str
        """
        return self._taxation_mode

    @taxation_mode.setter
    def taxation_mode(self, taxation_mode):
        """Sets the taxation_mode of this TaxSettingsUpdateRequest.


        :param taxation_mode: The taxation_mode of this TaxSettingsUpdateRequest.
        :type taxation_mode: str
        """
        allowed_values = ["EXCLUSIVE", "INCLUSIVE"]  # noqa: E501
        if taxation_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `taxation_mode` ({0}), must be one of {1}"
                .format(taxation_mode, allowed_values)
            )

        self._taxation_mode = taxation_mode
