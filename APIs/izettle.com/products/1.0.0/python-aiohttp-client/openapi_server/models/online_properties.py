# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.presentation import Presentation
from openapi_server.models.search_engine_optimization import SearchEngineOptimization
from openapi_server.models.shipping import Shipping
from openapi_server import util


class OnlineProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, presentation: Presentation=None, seo: SearchEngineOptimization=None, shipping: Shipping=None, status: str=None, title: str=None):
        """OnlineProperties - a model defined in OpenAPI

        :param description: The description of this OnlineProperties.
        :param presentation: The presentation of this OnlineProperties.
        :param seo: The seo of this OnlineProperties.
        :param shipping: The shipping of this OnlineProperties.
        :param status: The status of this OnlineProperties.
        :param title: The title of this OnlineProperties.
        """
        self.openapi_types = {
            'description': str,
            'presentation': Presentation,
            'seo': SearchEngineOptimization,
            'shipping': Shipping,
            'status': str,
            'title': str
        }

        self.attribute_map = {
            'description': 'description',
            'presentation': 'presentation',
            'seo': 'seo',
            'shipping': 'shipping',
            'status': 'status',
            'title': 'title'
        }

        self._description = description
        self._presentation = presentation
        self._seo = seo
        self._shipping = shipping
        self._status = status
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OnlineProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OnlineProperties of this OnlineProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this OnlineProperties.


        :return: The description of this OnlineProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this OnlineProperties.


        :param description: The description of this OnlineProperties.
        :type description: str
        """
        if description is not None and len(description) > 3500:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `3500`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    @property
    def presentation(self):
        """Gets the presentation of this OnlineProperties.


        :return: The presentation of this OnlineProperties.
        :rtype: Presentation
        """
        return self._presentation

    @presentation.setter
    def presentation(self, presentation):
        """Sets the presentation of this OnlineProperties.


        :param presentation: The presentation of this OnlineProperties.
        :type presentation: Presentation
        """

        self._presentation = presentation

    @property
    def seo(self):
        """Gets the seo of this OnlineProperties.


        :return: The seo of this OnlineProperties.
        :rtype: SearchEngineOptimization
        """
        return self._seo

    @seo.setter
    def seo(self, seo):
        """Sets the seo of this OnlineProperties.


        :param seo: The seo of this OnlineProperties.
        :type seo: SearchEngineOptimization
        """

        self._seo = seo

    @property
    def shipping(self):
        """Gets the shipping of this OnlineProperties.


        :return: The shipping of this OnlineProperties.
        :rtype: Shipping
        """
        return self._shipping

    @shipping.setter
    def shipping(self, shipping):
        """Sets the shipping of this OnlineProperties.


        :param shipping: The shipping of this OnlineProperties.
        :type shipping: Shipping
        """

        self._shipping = shipping

    @property
    def status(self):
        """Gets the status of this OnlineProperties.


        :return: The status of this OnlineProperties.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OnlineProperties.


        :param status: The status of this OnlineProperties.
        :type status: str
        """
        allowed_values = ["ACTIVE", "HIDDEN"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def title(self):
        """Gets the title of this OnlineProperties.


        :return: The title of this OnlineProperties.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this OnlineProperties.


        :param title: The title of this OnlineProperties.
        :type title: str
        """
        if title is not None and len(title) > 256:
            raise ValueError("Invalid value for `title`, length must be less than or equal to `256`")
        if title is not None and len(title) < 0:
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `0`")

        self._title = title
