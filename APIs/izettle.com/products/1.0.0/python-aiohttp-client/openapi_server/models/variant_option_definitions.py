# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.variant_option_definition import VariantOptionDefinition
from openapi_server import util


class VariantOptionDefinitions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, definitions: List[VariantOptionDefinition]=None):
        """VariantOptionDefinitions - a model defined in OpenAPI

        :param definitions: The definitions of this VariantOptionDefinitions.
        """
        self.openapi_types = {
            'definitions': List[VariantOptionDefinition]
        }

        self.attribute_map = {
            'definitions': 'definitions'
        }

        self._definitions = definitions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VariantOptionDefinitions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VariantOptionDefinitions of this VariantOptionDefinitions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def definitions(self):
        """Gets the definitions of this VariantOptionDefinitions.


        :return: The definitions of this VariantOptionDefinitions.
        :rtype: List[VariantOptionDefinition]
        """
        return self._definitions

    @definitions.setter
    def definitions(self, definitions):
        """Sets the definitions of this VariantOptionDefinitions.


        :param definitions: The definitions of this VariantOptionDefinitions.
        :type definitions: List[VariantOptionDefinition]
        """
        if definitions is None:
            raise ValueError("Invalid value for `definitions`, must not be `None`")
        if definitions is not None and len(definitions) > 3:
            raise ValueError("Invalid value for `definitions`, number of items must be less than or equal to `3`")
        if definitions is not None and len(definitions) < 1:
            raise ValueError("Invalid value for `definitions`, number of items must be greater than or equal to `1`")

        self._definitions = definitions
