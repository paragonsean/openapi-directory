# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.price import Price
from openapi_server import util


class DiscountResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: Price=None, created: datetime=None, description: str=None, etag: str=None, external_reference: str=None, image_lookup_keys: list[str]=None, name: str=None, percentage: float=None, updated: datetime=None, updated_by: str=None, uuid: str=None):
        """DiscountResponse - a model defined in OpenAPI

        :param amount: The amount of this DiscountResponse.
        :param created: The created of this DiscountResponse.
        :param description: The description of this DiscountResponse.
        :param etag: The etag of this DiscountResponse.
        :param external_reference: The external_reference of this DiscountResponse.
        :param image_lookup_keys: The image_lookup_keys of this DiscountResponse.
        :param name: The name of this DiscountResponse.
        :param percentage: The percentage of this DiscountResponse.
        :param updated: The updated of this DiscountResponse.
        :param updated_by: The updated_by of this DiscountResponse.
        :param uuid: The uuid of this DiscountResponse.
        """
        self.openapi_types = {
            'amount': Price,
            'created': datetime,
            'description': str,
            'etag': str,
            'external_reference': str,
            'image_lookup_keys': list[str],
            'name': str,
            'percentage': float,
            'updated': datetime,
            'updated_by': str,
            'uuid': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'created': 'created',
            'description': 'description',
            'etag': 'etag',
            'external_reference': 'externalReference',
            'image_lookup_keys': 'imageLookupKeys',
            'name': 'name',
            'percentage': 'percentage',
            'updated': 'updated',
            'updated_by': 'updatedBy',
            'uuid': 'uuid'
        }

        self._amount = amount
        self._created = created
        self._description = description
        self._etag = etag
        self._external_reference = external_reference
        self._image_lookup_keys = image_lookup_keys
        self._name = name
        self._percentage = percentage
        self._updated = updated
        self._updated_by = updated_by
        self._uuid = uuid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DiscountResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DiscountResponse of this DiscountResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this DiscountResponse.


        :return: The amount of this DiscountResponse.
        :rtype: Price
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this DiscountResponse.


        :param amount: The amount of this DiscountResponse.
        :type amount: Price
        """

        self._amount = amount

    @property
    def created(self):
        """Gets the created of this DiscountResponse.


        :return: The created of this DiscountResponse.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this DiscountResponse.


        :param created: The created of this DiscountResponse.
        :type created: datetime
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")

        self._created = created

    @property
    def description(self):
        """Gets the description of this DiscountResponse.


        :return: The description of this DiscountResponse.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DiscountResponse.


        :param description: The description of this DiscountResponse.
        :type description: str
        """

        self._description = description

    @property
    def etag(self):
        """Gets the etag of this DiscountResponse.


        :return: The etag of this DiscountResponse.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this DiscountResponse.


        :param etag: The etag of this DiscountResponse.
        :type etag: str
        """
        if etag is None:
            raise ValueError("Invalid value for `etag`, must not be `None`")

        self._etag = etag

    @property
    def external_reference(self):
        """Gets the external_reference of this DiscountResponse.


        :return: The external_reference of this DiscountResponse.
        :rtype: str
        """
        return self._external_reference

    @external_reference.setter
    def external_reference(self, external_reference):
        """Sets the external_reference of this DiscountResponse.


        :param external_reference: The external_reference of this DiscountResponse.
        :type external_reference: str
        """

        self._external_reference = external_reference

    @property
    def image_lookup_keys(self):
        """Gets the image_lookup_keys of this DiscountResponse.


        :return: The image_lookup_keys of this DiscountResponse.
        :rtype: list[str]
        """
        return self._image_lookup_keys

    @image_lookup_keys.setter
    def image_lookup_keys(self, image_lookup_keys):
        """Sets the image_lookup_keys of this DiscountResponse.


        :param image_lookup_keys: The image_lookup_keys of this DiscountResponse.
        :type image_lookup_keys: list[str]
        """

        self._image_lookup_keys = image_lookup_keys

    @property
    def name(self):
        """Gets the name of this DiscountResponse.


        :return: The name of this DiscountResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DiscountResponse.


        :param name: The name of this DiscountResponse.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def percentage(self):
        """Gets the percentage of this DiscountResponse.


        :return: The percentage of this DiscountResponse.
        :rtype: float
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this DiscountResponse.


        :param percentage: The percentage of this DiscountResponse.
        :type percentage: float
        """

        self._percentage = percentage

    @property
    def updated(self):
        """Gets the updated of this DiscountResponse.


        :return: The updated of this DiscountResponse.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this DiscountResponse.


        :param updated: The updated of this DiscountResponse.
        :type updated: datetime
        """
        if updated is None:
            raise ValueError("Invalid value for `updated`, must not be `None`")

        self._updated = updated

    @property
    def updated_by(self):
        """Gets the updated_by of this DiscountResponse.


        :return: The updated_by of this DiscountResponse.
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this DiscountResponse.


        :param updated_by: The updated_by of this DiscountResponse.
        :type updated_by: str
        """

        self._updated_by = updated_by

    @property
    def uuid(self):
        """Gets the uuid of this DiscountResponse.


        :return: The uuid of this DiscountResponse.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this DiscountResponse.


        :param uuid: The uuid of this DiscountResponse.
        :type uuid: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")

        self._uuid = uuid
