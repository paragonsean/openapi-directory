# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateSlugRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, product_name: str=None):
        """CreateSlugRequest - a model defined in OpenAPI

        :param product_name: The product_name of this CreateSlugRequest.
        """
        self.openapi_types = {
            'product_name': str
        }

        self.attribute_map = {
            'product_name': 'productName'
        }

        self._product_name = product_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateSlugRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateSlugRequest of this CreateSlugRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def product_name(self):
        """Gets the product_name of this CreateSlugRequest.


        :return: The product_name of this CreateSlugRequest.
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this CreateSlugRequest.


        :param product_name: The product_name of this CreateSlugRequest.
        :type product_name: str
        """
        if product_name is None:
            raise ValueError("Invalid value for `product_name`, must not be `None`")
        if product_name is not None and len(product_name) > 256:
            raise ValueError("Invalid value for `product_name`, length must be less than or equal to `256`")
        if product_name is not None and len(product_name) < 1:
            raise ValueError("Invalid value for `product_name`, length must be greater than or equal to `1`")

        self._product_name = product_name
