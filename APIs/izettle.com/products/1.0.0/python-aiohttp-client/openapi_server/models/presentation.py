# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Presentation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_image_urls: List[str]=None, display_image_url: str=None, media_urls: List[str]=None):
        """Presentation - a model defined in OpenAPI

        :param additional_image_urls: The additional_image_urls of this Presentation.
        :param display_image_url: The display_image_url of this Presentation.
        :param media_urls: The media_urls of this Presentation.
        """
        self.openapi_types = {
            'additional_image_urls': List[str],
            'display_image_url': str,
            'media_urls': List[str]
        }

        self.attribute_map = {
            'additional_image_urls': 'additionalImageUrls',
            'display_image_url': 'displayImageUrl',
            'media_urls': 'mediaUrls'
        }

        self._additional_image_urls = additional_image_urls
        self._display_image_url = display_image_url
        self._media_urls = media_urls

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Presentation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Presentation of this Presentation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_image_urls(self):
        """Gets the additional_image_urls of this Presentation.


        :return: The additional_image_urls of this Presentation.
        :rtype: List[str]
        """
        return self._additional_image_urls

    @additional_image_urls.setter
    def additional_image_urls(self, additional_image_urls):
        """Sets the additional_image_urls of this Presentation.


        :param additional_image_urls: The additional_image_urls of this Presentation.
        :type additional_image_urls: List[str]
        """
        if additional_image_urls is not None and len(additional_image_urls) > 25:
            raise ValueError("Invalid value for `additional_image_urls`, number of items must be less than or equal to `25`")
        if additional_image_urls is not None and len(additional_image_urls) < 0:
            raise ValueError("Invalid value for `additional_image_urls`, number of items must be greater than or equal to `0`")

        self._additional_image_urls = additional_image_urls

    @property
    def display_image_url(self):
        """Gets the display_image_url of this Presentation.


        :return: The display_image_url of this Presentation.
        :rtype: str
        """
        return self._display_image_url

    @display_image_url.setter
    def display_image_url(self, display_image_url):
        """Sets the display_image_url of this Presentation.


        :param display_image_url: The display_image_url of this Presentation.
        :type display_image_url: str
        """

        self._display_image_url = display_image_url

    @property
    def media_urls(self):
        """Gets the media_urls of this Presentation.


        :return: The media_urls of this Presentation.
        :rtype: List[str]
        """
        return self._media_urls

    @media_urls.setter
    def media_urls(self, media_urls):
        """Sets the media_urls of this Presentation.


        :param media_urls: The media_urls of this Presentation.
        :type media_urls: List[str]
        """
        if media_urls is not None and len(media_urls) > 8:
            raise ValueError("Invalid value for `media_urls`, number of items must be less than or equal to `8`")
        if media_urls is not None and len(media_urls) < 0:
            raise ValueError("Invalid value for `media_urls`, number of items must be greater than or equal to `0`")

        self._media_urls = media_urls
