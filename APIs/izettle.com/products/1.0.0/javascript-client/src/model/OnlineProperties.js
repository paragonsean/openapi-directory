/**
 * Product Library API
 * The Product Library API is used for managing merchant's product information and product images.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Presentation from './Presentation';
import SearchEngineOptimization from './SearchEngineOptimization';
import Shipping from './Shipping';

/**
 * The OnlineProperties model module.
 * @module model/OnlineProperties
 * @version 1.0.0
 */
class OnlineProperties {
    /**
     * Constructs a new <code>OnlineProperties</code>.
     * @alias module:model/OnlineProperties
     * @param status {module:model/OnlineProperties.StatusEnum} 
     */
    constructor(status) { 
        
        OnlineProperties.initialize(this, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, status) { 
        obj['status'] = status;
    }

    /**
     * Constructs a <code>OnlineProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OnlineProperties} obj Optional instance to populate.
     * @return {module:model/OnlineProperties} The populated <code>OnlineProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OnlineProperties();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('presentation')) {
                obj['presentation'] = Presentation.constructFromObject(data['presentation']);
            }
            if (data.hasOwnProperty('seo')) {
                obj['seo'] = SearchEngineOptimization.constructFromObject(data['seo']);
            }
            if (data.hasOwnProperty('shipping')) {
                obj['shipping'] = Shipping.constructFromObject(data['shipping']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OnlineProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OnlineProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OnlineProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `presentation`
        if (data['presentation']) { // data not null
          Presentation.validateJSON(data['presentation']);
        }
        // validate the optional field `seo`
        if (data['seo']) { // data not null
          SearchEngineOptimization.validateJSON(data['seo']);
        }
        // validate the optional field `shipping`
        if (data['shipping']) { // data not null
          Shipping.validateJSON(data['shipping']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}

OnlineProperties.RequiredProperties = ["status"];

/**
 * @member {String} description
 */
OnlineProperties.prototype['description'] = undefined;

/**
 * @member {module:model/Presentation} presentation
 */
OnlineProperties.prototype['presentation'] = undefined;

/**
 * @member {module:model/SearchEngineOptimization} seo
 */
OnlineProperties.prototype['seo'] = undefined;

/**
 * @member {module:model/Shipping} shipping
 */
OnlineProperties.prototype['shipping'] = undefined;

/**
 * @member {module:model/OnlineProperties.StatusEnum} status
 */
OnlineProperties.prototype['status'] = undefined;

/**
 * @member {String} title
 */
OnlineProperties.prototype['title'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
OnlineProperties['StatusEnum'] = {

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "HIDDEN"
     * @const
     */
    "HIDDEN": "HIDDEN"
};



export default OnlineProperties;

