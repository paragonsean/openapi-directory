/**
 * Product Library API
 * The Product Library API is used for managing merchant's product information and product images.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PresentationDTO from './PresentationDTO';
import Price from './Price';
import VariantOption from './VariantOption';

/**
 * The VariantDTO model module.
 * @module model/VariantDTO
 * @version 1.0.0
 */
class VariantDTO {
    /**
     * Constructs a new <code>VariantDTO</code>.
     * @alias module:model/VariantDTO
     * @param uuid {String} 
     */
    constructor(uuid) { 
        
        VariantDTO.initialize(this, uuid);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, uuid) { 
        obj['uuid'] = uuid;
    }

    /**
     * Constructs a <code>VariantDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VariantDTO} obj Optional instance to populate.
     * @return {module:model/VariantDTO} The populated <code>VariantDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VariantDTO();

            if (data.hasOwnProperty('barcode')) {
                obj['barcode'] = ApiClient.convertToType(data['barcode'], 'String');
            }
            if (data.hasOwnProperty('costPrice')) {
                obj['costPrice'] = Price.constructFromObject(data['costPrice']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('options')) {
                obj['options'] = ApiClient.convertToType(data['options'], [VariantOption]);
            }
            if (data.hasOwnProperty('presentation')) {
                obj['presentation'] = PresentationDTO.constructFromObject(data['presentation']);
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = Price.constructFromObject(data['price']);
            }
            if (data.hasOwnProperty('sku')) {
                obj['sku'] = ApiClient.convertToType(data['sku'], 'String');
            }
            if (data.hasOwnProperty('uuid')) {
                obj['uuid'] = ApiClient.convertToType(data['uuid'], 'String');
            }
            if (data.hasOwnProperty('vatPercentage')) {
                obj['vatPercentage'] = ApiClient.convertToType(data['vatPercentage'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VariantDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VariantDTO</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of VariantDTO.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['barcode'] && !(typeof data['barcode'] === 'string' || data['barcode'] instanceof String)) {
            throw new Error("Expected the field `barcode` to be a primitive type in the JSON string but got " + data['barcode']);
        }
        // validate the optional field `costPrice`
        if (data['costPrice']) { // data not null
          Price.validateJSON(data['costPrice']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['options']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['options'])) {
                throw new Error("Expected the field `options` to be an array in the JSON data but got " + data['options']);
            }
            // validate the optional field `options` (array)
            for (const item of data['options']) {
                VariantOption.validateJSON(item);
            };
        }
        // validate the optional field `presentation`
        if (data['presentation']) { // data not null
          PresentationDTO.validateJSON(data['presentation']);
        }
        // validate the optional field `price`
        if (data['price']) { // data not null
          Price.validateJSON(data['price']);
        }
        // ensure the json data is a string
        if (data['sku'] && !(typeof data['sku'] === 'string' || data['sku'] instanceof String)) {
            throw new Error("Expected the field `sku` to be a primitive type in the JSON string but got " + data['sku']);
        }
        // ensure the json data is a string
        if (data['uuid'] && !(typeof data['uuid'] === 'string' || data['uuid'] instanceof String)) {
            throw new Error("Expected the field `uuid` to be a primitive type in the JSON string but got " + data['uuid']);
        }

        return true;
    }


}

VariantDTO.RequiredProperties = ["uuid"];

/**
 * @member {String} barcode
 */
VariantDTO.prototype['barcode'] = undefined;

/**
 * @member {module:model/Price} costPrice
 */
VariantDTO.prototype['costPrice'] = undefined;

/**
 * @member {String} description
 */
VariantDTO.prototype['description'] = undefined;

/**
 * @member {String} name
 */
VariantDTO.prototype['name'] = undefined;

/**
 * @member {Array.<module:model/VariantOption>} options
 */
VariantDTO.prototype['options'] = undefined;

/**
 * @member {module:model/PresentationDTO} presentation
 */
VariantDTO.prototype['presentation'] = undefined;

/**
 * @member {module:model/Price} price
 */
VariantDTO.prototype['price'] = undefined;

/**
 * @member {String} sku
 */
VariantDTO.prototype['sku'] = undefined;

/**
 * @member {String} uuid
 */
VariantDTO.prototype['uuid'] = undefined;

/**
 * @member {Number} vatPercentage
 */
VariantDTO.prototype['vatPercentage'] = undefined;






export default VariantDTO;

