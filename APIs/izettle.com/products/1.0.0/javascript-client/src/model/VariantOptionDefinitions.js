/**
 * Product Library API
 * The Product Library API is used for managing merchant's product information and product images.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import VariantOptionDefinition from './VariantOptionDefinition';

/**
 * The VariantOptionDefinitions model module.
 * @module model/VariantOptionDefinitions
 * @version 1.0.0
 */
class VariantOptionDefinitions {
    /**
     * Constructs a new <code>VariantOptionDefinitions</code>.
     * @alias module:model/VariantOptionDefinitions
     * @param definitions {Array.<module:model/VariantOptionDefinition>} 
     */
    constructor(definitions) { 
        
        VariantOptionDefinitions.initialize(this, definitions);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, definitions) { 
        obj['definitions'] = definitions;
    }

    /**
     * Constructs a <code>VariantOptionDefinitions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VariantOptionDefinitions} obj Optional instance to populate.
     * @return {module:model/VariantOptionDefinitions} The populated <code>VariantOptionDefinitions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VariantOptionDefinitions();

            if (data.hasOwnProperty('definitions')) {
                obj['definitions'] = ApiClient.convertToType(data['definitions'], [VariantOptionDefinition]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VariantOptionDefinitions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VariantOptionDefinitions</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of VariantOptionDefinitions.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['definitions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['definitions'])) {
                throw new Error("Expected the field `definitions` to be an array in the JSON data but got " + data['definitions']);
            }
            // validate the optional field `definitions` (array)
            for (const item of data['definitions']) {
                VariantOptionDefinition.validateJSON(item);
            };
        }

        return true;
    }


}

VariantOptionDefinitions.RequiredProperties = ["definitions"];

/**
 * @member {Array.<module:model/VariantOptionDefinition>} definitions
 */
VariantOptionDefinitions.prototype['definitions'] = undefined;






export default VariantOptionDefinitions;

