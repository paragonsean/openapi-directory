/**
 * Product Library API
 * The Product Library API is used for managing merchant's product information and product images.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SourceDTO from './SourceDTO';

/**
 * The MetadataDTO model module.
 * @module model/MetadataDTO
 * @version 1.0.0
 */
class MetadataDTO {
    /**
     * Constructs a new <code>MetadataDTO</code>.
     * @alias module:model/MetadataDTO
     * @param inPos {Boolean} 
     */
    constructor(inPos) { 
        
        MetadataDTO.initialize(this, inPos);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, inPos) { 
        obj['inPos'] = inPos;
    }

    /**
     * Constructs a <code>MetadataDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MetadataDTO} obj Optional instance to populate.
     * @return {module:model/MetadataDTO} The populated <code>MetadataDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MetadataDTO();

            if (data.hasOwnProperty('inPos')) {
                obj['inPos'] = ApiClient.convertToType(data['inPos'], 'Boolean');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = SourceDTO.constructFromObject(data['source']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MetadataDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MetadataDTO</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MetadataDTO.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `source`
        if (data['source']) { // data not null
          SourceDTO.validateJSON(data['source']);
        }

        return true;
    }


}

MetadataDTO.RequiredProperties = ["inPos"];

/**
 * @member {Boolean} inPos
 */
MetadataDTO.prototype['inPos'] = undefined;

/**
 * @member {module:model/SourceDTO} source
 */
MetadataDTO.prototype['source'] = undefined;






export default MetadataDTO;

