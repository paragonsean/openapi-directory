/**
 * Product Library API
 * The Product Library API is used for managing merchant's product information and product images.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TaxSettingsResponse model module.
 * @module model/TaxSettingsResponse
 * @version 1.0.0
 */
class TaxSettingsResponse {
    /**
     * Constructs a new <code>TaxSettingsResponse</code>.
     * @alias module:model/TaxSettingsResponse
     */
    constructor() { 
        
        TaxSettingsResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TaxSettingsResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TaxSettingsResponse} obj Optional instance to populate.
     * @return {module:model/TaxSettingsResponse} The populated <code>TaxSettingsResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TaxSettingsResponse();

            if (data.hasOwnProperty('organizationUuid')) {
                obj['organizationUuid'] = ApiClient.convertToType(data['organizationUuid'], 'String');
            }
            if (data.hasOwnProperty('taxationMode')) {
                obj['taxationMode'] = ApiClient.convertToType(data['taxationMode'], 'String');
            }
            if (data.hasOwnProperty('taxationType')) {
                obj['taxationType'] = ApiClient.convertToType(data['taxationType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TaxSettingsResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TaxSettingsResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['organizationUuid'] && !(typeof data['organizationUuid'] === 'string' || data['organizationUuid'] instanceof String)) {
            throw new Error("Expected the field `organizationUuid` to be a primitive type in the JSON string but got " + data['organizationUuid']);
        }
        // ensure the json data is a string
        if (data['taxationMode'] && !(typeof data['taxationMode'] === 'string' || data['taxationMode'] instanceof String)) {
            throw new Error("Expected the field `taxationMode` to be a primitive type in the JSON string but got " + data['taxationMode']);
        }
        // ensure the json data is a string
        if (data['taxationType'] && !(typeof data['taxationType'] === 'string' || data['taxationType'] instanceof String)) {
            throw new Error("Expected the field `taxationType` to be a primitive type in the JSON string but got " + data['taxationType']);
        }

        return true;
    }


}



/**
 * @member {String} organizationUuid
 */
TaxSettingsResponse.prototype['organizationUuid'] = undefined;

/**
 * @member {module:model/TaxSettingsResponse.TaxationModeEnum} taxationMode
 */
TaxSettingsResponse.prototype['taxationMode'] = undefined;

/**
 * @member {module:model/TaxSettingsResponse.TaxationTypeEnum} taxationType
 */
TaxSettingsResponse.prototype['taxationType'] = undefined;





/**
 * Allowed values for the <code>taxationMode</code> property.
 * @enum {String}
 * @readonly
 */
TaxSettingsResponse['TaxationModeEnum'] = {

    /**
     * value: "EXCLUSIVE"
     * @const
     */
    "EXCLUSIVE": "EXCLUSIVE",

    /**
     * value: "INCLUSIVE"
     * @const
     */
    "INCLUSIVE": "INCLUSIVE"
};


/**
 * Allowed values for the <code>taxationType</code> property.
 * @enum {String}
 * @readonly
 */
TaxSettingsResponse['TaxationTypeEnum'] = {

    /**
     * value: "NONE"
     * @const
     */
    "NONE": "NONE",

    /**
     * value: "SALES_TAX"
     * @const
     */
    "SALES_TAX": "SALES_TAX",

    /**
     * value: "VAT"
     * @const
     */
    "VAT": "VAT"
};



export default TaxSettingsResponse;

