/**
 * Product Library API
 * The Product Library API is used for managing merchant's product information and product images.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Price from './Price';

/**
 * The DiscountResponse model module.
 * @module model/DiscountResponse
 * @version 1.0.0
 */
class DiscountResponse {
    /**
     * Constructs a new <code>DiscountResponse</code>.
     * @alias module:model/DiscountResponse
     * @param created {Date} 
     * @param etag {String} 
     * @param name {String} 
     * @param updated {Date} 
     * @param uuid {String} 
     */
    constructor(created, etag, name, updated, uuid) { 
        
        DiscountResponse.initialize(this, created, etag, name, updated, uuid);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, created, etag, name, updated, uuid) { 
        obj['created'] = created;
        obj['etag'] = etag;
        obj['name'] = name;
        obj['updated'] = updated;
        obj['uuid'] = uuid;
    }

    /**
     * Constructs a <code>DiscountResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DiscountResponse} obj Optional instance to populate.
     * @return {module:model/DiscountResponse} The populated <code>DiscountResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DiscountResponse();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = Price.constructFromObject(data['amount']);
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('externalReference')) {
                obj['externalReference'] = ApiClient.convertToType(data['externalReference'], 'String');
            }
            if (data.hasOwnProperty('imageLookupKeys')) {
                obj['imageLookupKeys'] = ApiClient.convertToType(data['imageLookupKeys'], ['String']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('percentage')) {
                obj['percentage'] = ApiClient.convertToType(data['percentage'], 'Number');
            }
            if (data.hasOwnProperty('updated')) {
                obj['updated'] = ApiClient.convertToType(data['updated'], 'Date');
            }
            if (data.hasOwnProperty('updatedBy')) {
                obj['updatedBy'] = ApiClient.convertToType(data['updatedBy'], 'String');
            }
            if (data.hasOwnProperty('uuid')) {
                obj['uuid'] = ApiClient.convertToType(data['uuid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DiscountResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DiscountResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DiscountResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `amount`
        if (data['amount']) { // data not null
          Price.validateJSON(data['amount']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is a string
        if (data['externalReference'] && !(typeof data['externalReference'] === 'string' || data['externalReference'] instanceof String)) {
            throw new Error("Expected the field `externalReference` to be a primitive type in the JSON string but got " + data['externalReference']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['imageLookupKeys'])) {
            throw new Error("Expected the field `imageLookupKeys` to be an array in the JSON data but got " + data['imageLookupKeys']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['updatedBy'] && !(typeof data['updatedBy'] === 'string' || data['updatedBy'] instanceof String)) {
            throw new Error("Expected the field `updatedBy` to be a primitive type in the JSON string but got " + data['updatedBy']);
        }
        // ensure the json data is a string
        if (data['uuid'] && !(typeof data['uuid'] === 'string' || data['uuid'] instanceof String)) {
            throw new Error("Expected the field `uuid` to be a primitive type in the JSON string but got " + data['uuid']);
        }

        return true;
    }


}

DiscountResponse.RequiredProperties = ["created", "etag", "name", "updated", "uuid"];

/**
 * @member {module:model/Price} amount
 */
DiscountResponse.prototype['amount'] = undefined;

/**
 * @member {Date} created
 */
DiscountResponse.prototype['created'] = undefined;

/**
 * @member {String} description
 */
DiscountResponse.prototype['description'] = undefined;

/**
 * @member {String} etag
 */
DiscountResponse.prototype['etag'] = undefined;

/**
 * @member {String} externalReference
 */
DiscountResponse.prototype['externalReference'] = undefined;

/**
 * @member {Array.<String>} imageLookupKeys
 */
DiscountResponse.prototype['imageLookupKeys'] = undefined;

/**
 * @member {String} name
 */
DiscountResponse.prototype['name'] = undefined;

/**
 * @member {Number} percentage
 */
DiscountResponse.prototype['percentage'] = undefined;

/**
 * @member {Date} updated
 */
DiscountResponse.prototype['updated'] = undefined;

/**
 * @member {String} updatedBy
 */
DiscountResponse.prototype['updatedBy'] = undefined;

/**
 * @member {String} uuid
 */
DiscountResponse.prototype['uuid'] = undefined;






export default DiscountResponse;

