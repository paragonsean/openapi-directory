/**
 * Product Library API
 * The Product Library API is used for managing merchant's product information and product images.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CategoryDTO from './CategoryDTO';
import MetadataDTO from './MetadataDTO';
import OnlineProperties from './OnlineProperties';
import PresentationDTO from './PresentationDTO';
import VariantDTO from './VariantDTO';
import VariantOptionDefinitions from './VariantOptionDefinitions';

/**
 * The ProductCreateRequest model module.
 * @module model/ProductCreateRequest
 * @version 1.0.0
 */
class ProductCreateRequest {
    /**
     * Constructs a new <code>ProductCreateRequest</code>.
     * @alias module:model/ProductCreateRequest
     * @param name {String} 
     * @param uuid {String} 
     */
    constructor(name, uuid) { 
        
        ProductCreateRequest.initialize(this, name, uuid);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, uuid) { 
        obj['name'] = name;
        obj['uuid'] = uuid;
    }

    /**
     * Constructs a <code>ProductCreateRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProductCreateRequest} obj Optional instance to populate.
     * @return {module:model/ProductCreateRequest} The populated <code>ProductCreateRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProductCreateRequest();

            if (data.hasOwnProperty('categories')) {
                obj['categories'] = ApiClient.convertToType(data['categories'], ['String']);
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = CategoryDTO.constructFromObject(data['category']);
            }
            if (data.hasOwnProperty('createWithDefaultTax')) {
                obj['createWithDefaultTax'] = ApiClient.convertToType(data['createWithDefaultTax'], 'Boolean');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('externalReference')) {
                obj['externalReference'] = ApiClient.convertToType(data['externalReference'], 'String');
            }
            if (data.hasOwnProperty('imageLookupKeys')) {
                obj['imageLookupKeys'] = ApiClient.convertToType(data['imageLookupKeys'], ['String']);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = MetadataDTO.constructFromObject(data['metadata']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('online')) {
                obj['online'] = OnlineProperties.constructFromObject(data['online']);
            }
            if (data.hasOwnProperty('presentation')) {
                obj['presentation'] = PresentationDTO.constructFromObject(data['presentation']);
            }
            if (data.hasOwnProperty('taxCode')) {
                obj['taxCode'] = ApiClient.convertToType(data['taxCode'], 'String');
            }
            if (data.hasOwnProperty('taxExempt')) {
                obj['taxExempt'] = ApiClient.convertToType(data['taxExempt'], 'Boolean');
            }
            if (data.hasOwnProperty('taxRates')) {
                obj['taxRates'] = ApiClient.convertToType(data['taxRates'], ['String']);
            }
            if (data.hasOwnProperty('unitName')) {
                obj['unitName'] = ApiClient.convertToType(data['unitName'], 'String');
            }
            if (data.hasOwnProperty('uuid')) {
                obj['uuid'] = ApiClient.convertToType(data['uuid'], 'String');
            }
            if (data.hasOwnProperty('variantOptionDefinitions')) {
                obj['variantOptionDefinitions'] = VariantOptionDefinitions.constructFromObject(data['variantOptionDefinitions']);
            }
            if (data.hasOwnProperty('variants')) {
                obj['variants'] = ApiClient.convertToType(data['variants'], [VariantDTO]);
            }
            if (data.hasOwnProperty('vatPercentage')) {
                obj['vatPercentage'] = ApiClient.convertToType(data['vatPercentage'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProductCreateRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProductCreateRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ProductCreateRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['categories'])) {
            throw new Error("Expected the field `categories` to be an array in the JSON data but got " + data['categories']);
        }
        // validate the optional field `category`
        if (data['category']) { // data not null
          CategoryDTO.validateJSON(data['category']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['externalReference'] && !(typeof data['externalReference'] === 'string' || data['externalReference'] instanceof String)) {
            throw new Error("Expected the field `externalReference` to be a primitive type in the JSON string but got " + data['externalReference']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['imageLookupKeys'])) {
            throw new Error("Expected the field `imageLookupKeys` to be an array in the JSON data but got " + data['imageLookupKeys']);
        }
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          MetadataDTO.validateJSON(data['metadata']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `online`
        if (data['online']) { // data not null
          OnlineProperties.validateJSON(data['online']);
        }
        // validate the optional field `presentation`
        if (data['presentation']) { // data not null
          PresentationDTO.validateJSON(data['presentation']);
        }
        // ensure the json data is a string
        if (data['taxCode'] && !(typeof data['taxCode'] === 'string' || data['taxCode'] instanceof String)) {
            throw new Error("Expected the field `taxCode` to be a primitive type in the JSON string but got " + data['taxCode']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['taxRates'])) {
            throw new Error("Expected the field `taxRates` to be an array in the JSON data but got " + data['taxRates']);
        }
        // ensure the json data is a string
        if (data['unitName'] && !(typeof data['unitName'] === 'string' || data['unitName'] instanceof String)) {
            throw new Error("Expected the field `unitName` to be a primitive type in the JSON string but got " + data['unitName']);
        }
        // ensure the json data is a string
        if (data['uuid'] && !(typeof data['uuid'] === 'string' || data['uuid'] instanceof String)) {
            throw new Error("Expected the field `uuid` to be a primitive type in the JSON string but got " + data['uuid']);
        }
        // validate the optional field `variantOptionDefinitions`
        if (data['variantOptionDefinitions']) { // data not null
          VariantOptionDefinitions.validateJSON(data['variantOptionDefinitions']);
        }
        if (data['variants']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['variants'])) {
                throw new Error("Expected the field `variants` to be an array in the JSON data but got " + data['variants']);
            }
            // validate the optional field `variants` (array)
            for (const item of data['variants']) {
                VariantDTO.validateJSON(item);
            };
        }

        return true;
    }


}

ProductCreateRequest.RequiredProperties = ["name", "uuid"];

/**
 * @member {Array.<String>} categories
 */
ProductCreateRequest.prototype['categories'] = undefined;

/**
 * @member {module:model/CategoryDTO} category
 */
ProductCreateRequest.prototype['category'] = undefined;

/**
 * @member {Boolean} createWithDefaultTax
 */
ProductCreateRequest.prototype['createWithDefaultTax'] = undefined;

/**
 * @member {String} description
 */
ProductCreateRequest.prototype['description'] = undefined;

/**
 * @member {String} externalReference
 */
ProductCreateRequest.prototype['externalReference'] = undefined;

/**
 * @member {Array.<String>} imageLookupKeys
 */
ProductCreateRequest.prototype['imageLookupKeys'] = undefined;

/**
 * @member {module:model/MetadataDTO} metadata
 */
ProductCreateRequest.prototype['metadata'] = undefined;

/**
 * @member {String} name
 */
ProductCreateRequest.prototype['name'] = undefined;

/**
 * @member {module:model/OnlineProperties} online
 */
ProductCreateRequest.prototype['online'] = undefined;

/**
 * @member {module:model/PresentationDTO} presentation
 */
ProductCreateRequest.prototype['presentation'] = undefined;

/**
 * @member {String} taxCode
 */
ProductCreateRequest.prototype['taxCode'] = undefined;

/**
 * @member {Boolean} taxExempt
 */
ProductCreateRequest.prototype['taxExempt'] = undefined;

/**
 * @member {Array.<String>} taxRates
 */
ProductCreateRequest.prototype['taxRates'] = undefined;

/**
 * @member {String} unitName
 */
ProductCreateRequest.prototype['unitName'] = undefined;

/**
 * @member {String} uuid
 */
ProductCreateRequest.prototype['uuid'] = undefined;

/**
 * @member {module:model/VariantOptionDefinitions} variantOptionDefinitions
 */
ProductCreateRequest.prototype['variantOptionDefinitions'] = undefined;

/**
 * @member {Array.<module:model/VariantDTO>} variants
 */
ProductCreateRequest.prototype['variants'] = undefined;

/**
 * @member {Number} vatPercentage
 */
ProductCreateRequest.prototype['vatPercentage'] = undefined;






export default ProductCreateRequest;

