/**
 * Product Library API
 * The Product Library API is used for managing merchant's product information and product images.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Weight from './Weight';

/**
 * The Shipping model module.
 * @module model/Shipping
 * @version 1.0.0
 */
class Shipping {
    /**
     * Constructs a new <code>Shipping</code>.
     * @alias module:model/Shipping
     */
    constructor() { 
        
        Shipping.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Shipping</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Shipping} obj Optional instance to populate.
     * @return {module:model/Shipping} The populated <code>Shipping</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Shipping();

            if (data.hasOwnProperty('shippingPricingModel')) {
                obj['shippingPricingModel'] = ApiClient.convertToType(data['shippingPricingModel'], 'String');
            }
            if (data.hasOwnProperty('weight')) {
                obj['weight'] = Weight.constructFromObject(data['weight']);
            }
            if (data.hasOwnProperty('weightInGrams')) {
                obj['weightInGrams'] = ApiClient.convertToType(data['weightInGrams'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Shipping</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Shipping</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['shippingPricingModel'] && !(typeof data['shippingPricingModel'] === 'string' || data['shippingPricingModel'] instanceof String)) {
            throw new Error("Expected the field `shippingPricingModel` to be a primitive type in the JSON string but got " + data['shippingPricingModel']);
        }
        // validate the optional field `weight`
        if (data['weight']) { // data not null
          Weight.validateJSON(data['weight']);
        }

        return true;
    }


}



/**
 * @member {module:model/Shipping.ShippingPricingModelEnum} shippingPricingModel
 */
Shipping.prototype['shippingPricingModel'] = undefined;

/**
 * @member {module:model/Weight} weight
 */
Shipping.prototype['weight'] = undefined;

/**
 * @member {Number} weightInGrams
 */
Shipping.prototype['weightInGrams'] = undefined;





/**
 * Allowed values for the <code>shippingPricingModel</code> property.
 * @enum {String}
 * @readonly
 */
Shipping['ShippingPricingModelEnum'] = {

    /**
     * value: "FREE"
     * @const
     */
    "FREE": "FREE",

    /**
     * value: "STANDARD"
     * @const
     */
    "STANDARD": "STANDARD"
};



export default Shipping;

