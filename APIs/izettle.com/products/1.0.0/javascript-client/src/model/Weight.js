/**
 * Product Library API
 * The Product Library API is used for managing merchant's product information and product images.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Weight model module.
 * @module model/Weight
 * @version 1.0.0
 */
class Weight {
    /**
     * Constructs a new <code>Weight</code>.
     * @alias module:model/Weight
     * @param unit {module:model/Weight.UnitEnum} 
     * @param weight {Number} 
     */
    constructor(unit, weight) { 
        
        Weight.initialize(this, unit, weight);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, unit, weight) { 
        obj['unit'] = unit;
        obj['weight'] = weight;
    }

    /**
     * Constructs a <code>Weight</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Weight} obj Optional instance to populate.
     * @return {module:model/Weight} The populated <code>Weight</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Weight();

            if (data.hasOwnProperty('unit')) {
                obj['unit'] = ApiClient.convertToType(data['unit'], 'String');
            }
            if (data.hasOwnProperty('weight')) {
                obj['weight'] = ApiClient.convertToType(data['weight'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Weight</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Weight</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Weight.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['unit'] && !(typeof data['unit'] === 'string' || data['unit'] instanceof String)) {
            throw new Error("Expected the field `unit` to be a primitive type in the JSON string but got " + data['unit']);
        }

        return true;
    }


}

Weight.RequiredProperties = ["unit", "weight"];

/**
 * @member {module:model/Weight.UnitEnum} unit
 */
Weight.prototype['unit'] = undefined;

/**
 * @member {Number} weight
 */
Weight.prototype['weight'] = undefined;





/**
 * Allowed values for the <code>unit</code> property.
 * @enum {String}
 * @readonly
 */
Weight['UnitEnum'] = {

    /**
     * value: "kg"
     * @const
     */
    "kg": "kg",

    /**
     * value: "g"
     * @const
     */
    "g": "g",

    /**
     * value: "oz"
     * @const
     */
    "oz": "oz",

    /**
     * value: "lb"
     * @const
     */
    "lb": "lb"
};



export default Weight;

