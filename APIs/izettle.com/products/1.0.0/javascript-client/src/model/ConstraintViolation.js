/**
 * Product Library API
 * The Product Library API is used for managing merchant's product information and product images.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ConstraintViolation model module.
 * @module model/ConstraintViolation
 * @version 1.0.0
 */
class ConstraintViolation {
    /**
     * Constructs a new <code>ConstraintViolation</code>.
     * @alias module:model/ConstraintViolation
     */
    constructor() { 
        
        ConstraintViolation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConstraintViolation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConstraintViolation} obj Optional instance to populate.
     * @return {module:model/ConstraintViolation} The populated <code>ConstraintViolation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConstraintViolation();

            if (data.hasOwnProperty('constraintType')) {
                obj['constraintType'] = ApiClient.convertToType(data['constraintType'], 'String');
            }
            if (data.hasOwnProperty('developerMessage')) {
                obj['developerMessage'] = ApiClient.convertToType(data['developerMessage'], 'String');
            }
            if (data.hasOwnProperty('expected')) {
                obj['expected'] = ApiClient.convertToType(data['expected'], 'String');
            }
            if (data.hasOwnProperty('propertyName')) {
                obj['propertyName'] = ApiClient.convertToType(data['propertyName'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConstraintViolation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConstraintViolation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['constraintType'] && !(typeof data['constraintType'] === 'string' || data['constraintType'] instanceof String)) {
            throw new Error("Expected the field `constraintType` to be a primitive type in the JSON string but got " + data['constraintType']);
        }
        // ensure the json data is a string
        if (data['developerMessage'] && !(typeof data['developerMessage'] === 'string' || data['developerMessage'] instanceof String)) {
            throw new Error("Expected the field `developerMessage` to be a primitive type in the JSON string but got " + data['developerMessage']);
        }
        // ensure the json data is a string
        if (data['expected'] && !(typeof data['expected'] === 'string' || data['expected'] instanceof String)) {
            throw new Error("Expected the field `expected` to be a primitive type in the JSON string but got " + data['expected']);
        }
        // ensure the json data is a string
        if (data['propertyName'] && !(typeof data['propertyName'] === 'string' || data['propertyName'] instanceof String)) {
            throw new Error("Expected the field `propertyName` to be a primitive type in the JSON string but got " + data['propertyName']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}



/**
 * @member {module:model/ConstraintViolation.ConstraintTypeEnum} constraintType
 */
ConstraintViolation.prototype['constraintType'] = undefined;

/**
 * @member {String} developerMessage
 */
ConstraintViolation.prototype['developerMessage'] = undefined;

/**
 * @member {String} expected
 */
ConstraintViolation.prototype['expected'] = undefined;

/**
 * @member {String} propertyName
 */
ConstraintViolation.prototype['propertyName'] = undefined;

/**
 * @member {String} value
 */
ConstraintViolation.prototype['value'] = undefined;





/**
 * Allowed values for the <code>constraintType</code> property.
 * @enum {String}
 * @readonly
 */
ConstraintViolation['ConstraintTypeEnum'] = {

    /**
     * value: "MUST_BE_FALSE"
     * @const
     */
    "MUST_BE_FALSE": "MUST_BE_FALSE",

    /**
     * value: "MUST_BE_TRUE"
     * @const
     */
    "MUST_BE_TRUE": "MUST_BE_TRUE",

    /**
     * value: "MUST_BE_LESS_THAN"
     * @const
     */
    "MUST_BE_LESS_THAN": "MUST_BE_LESS_THAN",

    /**
     * value: "MUST_BE_GREATER_THAN"
     * @const
     */
    "MUST_BE_GREATER_THAN": "MUST_BE_GREATER_THAN",

    /**
     * value: "DIGIT_OUT_OF_BOUNDS"
     * @const
     */
    "DIGIT_OUT_OF_BOUNDS": "DIGIT_OUT_OF_BOUNDS",

    /**
     * value: "DATE_MUST_BE_IN_THE_FUTURE"
     * @const
     */
    "DATE_MUST_BE_IN_THE_FUTURE": "DATE_MUST_BE_IN_THE_FUTURE",

    /**
     * value: "MUST_BE_LESS_OR_EQUAL_THAN"
     * @const
     */
    "MUST_BE_LESS_OR_EQUAL_THAN": "MUST_BE_LESS_OR_EQUAL_THAN",

    /**
     * value: "MUST_BE_GREATER_OR_EQUAL_TO"
     * @const
     */
    "MUST_BE_GREATER_OR_EQUAL_TO": "MUST_BE_GREATER_OR_EQUAL_TO",

    /**
     * value: "MUST_NOT_BE_NULL"
     * @const
     */
    "MUST_NOT_BE_NULL": "MUST_NOT_BE_NULL",

    /**
     * value: "MUST_BE_NULL"
     * @const
     */
    "MUST_BE_NULL": "MUST_BE_NULL",

    /**
     * value: "DATE_MUST_BE_IN_THE_PAST"
     * @const
     */
    "DATE_MUST_BE_IN_THE_PAST": "DATE_MUST_BE_IN_THE_PAST",

    /**
     * value: "MUST_MATCH_PATTERN"
     * @const
     */
    "MUST_MATCH_PATTERN": "MUST_MATCH_PATTERN",

    /**
     * value: "INVALID_SIZE"
     * @const
     */
    "INVALID_SIZE": "INVALID_SIZE",

    /**
     * value: "INVALID_EMAIL"
     * @const
     */
    "INVALID_EMAIL": "INVALID_EMAIL",

    /**
     * value: "MUST_NOT_BE_EMPTY"
     * @const
     */
    "MUST_NOT_BE_EMPTY": "MUST_NOT_BE_EMPTY",

    /**
     * value: "INVALID_RANGE"
     * @const
     */
    "INVALID_RANGE": "INVALID_RANGE",

    /**
     * value: "UNKNOWN"
     * @const
     */
    "UNKNOWN": "UNKNOWN"
};



export default ConstraintViolation;

