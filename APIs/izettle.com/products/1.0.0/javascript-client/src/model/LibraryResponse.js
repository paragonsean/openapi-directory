/**
 * Product Library API
 * The Product Library API is used for managing merchant's product information and product images.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DiscountResponse from './DiscountResponse';
import ProductResponse from './ProductResponse';

/**
 * The LibraryResponse model module.
 * @module model/LibraryResponse
 * @version 1.0.0
 */
class LibraryResponse {
    /**
     * Constructs a new <code>LibraryResponse</code>.
     * @alias module:model/LibraryResponse
     */
    constructor() { 
        
        LibraryResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LibraryResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LibraryResponse} obj Optional instance to populate.
     * @return {module:model/LibraryResponse} The populated <code>LibraryResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LibraryResponse();

            if (data.hasOwnProperty('deletedDiscounts')) {
                obj['deletedDiscounts'] = ApiClient.convertToType(data['deletedDiscounts'], ['String']);
            }
            if (data.hasOwnProperty('deletedProducts')) {
                obj['deletedProducts'] = ApiClient.convertToType(data['deletedProducts'], ['String']);
            }
            if (data.hasOwnProperty('discounts')) {
                obj['discounts'] = ApiClient.convertToType(data['discounts'], [DiscountResponse]);
            }
            if (data.hasOwnProperty('fromEventLogUuid')) {
                obj['fromEventLogUuid'] = ApiClient.convertToType(data['fromEventLogUuid'], 'String');
            }
            if (data.hasOwnProperty('products')) {
                obj['products'] = ApiClient.convertToType(data['products'], [ProductResponse]);
            }
            if (data.hasOwnProperty('untilEventLogUuid')) {
                obj['untilEventLogUuid'] = ApiClient.convertToType(data['untilEventLogUuid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LibraryResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LibraryResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['deletedDiscounts'])) {
            throw new Error("Expected the field `deletedDiscounts` to be an array in the JSON data but got " + data['deletedDiscounts']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['deletedProducts'])) {
            throw new Error("Expected the field `deletedProducts` to be an array in the JSON data but got " + data['deletedProducts']);
        }
        if (data['discounts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['discounts'])) {
                throw new Error("Expected the field `discounts` to be an array in the JSON data but got " + data['discounts']);
            }
            // validate the optional field `discounts` (array)
            for (const item of data['discounts']) {
                DiscountResponse.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['fromEventLogUuid'] && !(typeof data['fromEventLogUuid'] === 'string' || data['fromEventLogUuid'] instanceof String)) {
            throw new Error("Expected the field `fromEventLogUuid` to be a primitive type in the JSON string but got " + data['fromEventLogUuid']);
        }
        if (data['products']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['products'])) {
                throw new Error("Expected the field `products` to be an array in the JSON data but got " + data['products']);
            }
            // validate the optional field `products` (array)
            for (const item of data['products']) {
                ProductResponse.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['untilEventLogUuid'] && !(typeof data['untilEventLogUuid'] === 'string' || data['untilEventLogUuid'] instanceof String)) {
            throw new Error("Expected the field `untilEventLogUuid` to be a primitive type in the JSON string but got " + data['untilEventLogUuid']);
        }

        return true;
    }


}



/**
 * @member {Array.<String>} deletedDiscounts
 */
LibraryResponse.prototype['deletedDiscounts'] = undefined;

/**
 * @member {Array.<String>} deletedProducts
 */
LibraryResponse.prototype['deletedProducts'] = undefined;

/**
 * @member {Array.<module:model/DiscountResponse>} discounts
 */
LibraryResponse.prototype['discounts'] = undefined;

/**
 * @member {String} fromEventLogUuid
 */
LibraryResponse.prototype['fromEventLogUuid'] = undefined;

/**
 * @member {Array.<module:model/ProductResponse>} products
 */
LibraryResponse.prototype['products'] = undefined;

/**
 * @member {String} untilEventLogUuid
 */
LibraryResponse.prototype['untilEventLogUuid'] = undefined;






export default LibraryResponse;

