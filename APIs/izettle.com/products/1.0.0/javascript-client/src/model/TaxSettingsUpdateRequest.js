/**
 * Product Library API
 * The Product Library API is used for managing merchant's product information and product images.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TaxSettingsUpdateRequest model module.
 * @module model/TaxSettingsUpdateRequest
 * @version 1.0.0
 */
class TaxSettingsUpdateRequest {
    /**
     * Constructs a new <code>TaxSettingsUpdateRequest</code>.
     * @alias module:model/TaxSettingsUpdateRequest
     * @param taxationMode {module:model/TaxSettingsUpdateRequest.TaxationModeEnum} 
     */
    constructor(taxationMode) { 
        
        TaxSettingsUpdateRequest.initialize(this, taxationMode);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, taxationMode) { 
        obj['taxationMode'] = taxationMode;
    }

    /**
     * Constructs a <code>TaxSettingsUpdateRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TaxSettingsUpdateRequest} obj Optional instance to populate.
     * @return {module:model/TaxSettingsUpdateRequest} The populated <code>TaxSettingsUpdateRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TaxSettingsUpdateRequest();

            if (data.hasOwnProperty('taxationMode')) {
                obj['taxationMode'] = ApiClient.convertToType(data['taxationMode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TaxSettingsUpdateRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TaxSettingsUpdateRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TaxSettingsUpdateRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['taxationMode'] && !(typeof data['taxationMode'] === 'string' || data['taxationMode'] instanceof String)) {
            throw new Error("Expected the field `taxationMode` to be a primitive type in the JSON string but got " + data['taxationMode']);
        }

        return true;
    }


}

TaxSettingsUpdateRequest.RequiredProperties = ["taxationMode"];

/**
 * @member {module:model/TaxSettingsUpdateRequest.TaxationModeEnum} taxationMode
 */
TaxSettingsUpdateRequest.prototype['taxationMode'] = undefined;





/**
 * Allowed values for the <code>taxationMode</code> property.
 * @enum {String}
 * @readonly
 */
TaxSettingsUpdateRequest['TaxationModeEnum'] = {

    /**
     * value: "EXCLUSIVE"
     * @const
     */
    "EXCLUSIVE": "EXCLUSIVE",

    /**
     * value: "INCLUSIVE"
     * @const
     */
    "INCLUSIVE": "INCLUSIVE"
};



export default TaxSettingsUpdateRequest;

