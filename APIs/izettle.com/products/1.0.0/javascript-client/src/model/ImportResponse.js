/**
 * Product Library API
 * The Product Library API is used for managing merchant's product information and product images.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ImportResponse model module.
 * @module model/ImportResponse
 * @version 1.0.0
 */
class ImportResponse {
    /**
     * Constructs a new <code>ImportResponse</code>.
     * @alias module:model/ImportResponse
     */
    constructor() { 
        
        ImportResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ImportResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImportResponse} obj Optional instance to populate.
     * @return {module:model/ImportResponse} The populated <code>ImportResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImportResponse();

            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('errorMessage')) {
                obj['errorMessage'] = ApiClient.convertToType(data['errorMessage'], 'String');
            }
            if (data.hasOwnProperty('finished')) {
                obj['finished'] = ApiClient.convertToType(data['finished'], 'Date');
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], 'Number');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('uuid')) {
                obj['uuid'] = ApiClient.convertToType(data['uuid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImportResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImportResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['errorMessage'] && !(typeof data['errorMessage'] === 'string' || data['errorMessage'] instanceof String)) {
            throw new Error("Expected the field `errorMessage` to be a primitive type in the JSON string but got " + data['errorMessage']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['uuid'] && !(typeof data['uuid'] === 'string' || data['uuid'] instanceof String)) {
            throw new Error("Expected the field `uuid` to be a primitive type in the JSON string but got " + data['uuid']);
        }

        return true;
    }


}



/**
 * @member {Date} created
 */
ImportResponse.prototype['created'] = undefined;

/**
 * @member {String} errorMessage
 */
ImportResponse.prototype['errorMessage'] = undefined;

/**
 * @member {Date} finished
 */
ImportResponse.prototype['finished'] = undefined;

/**
 * @member {Number} items
 */
ImportResponse.prototype['items'] = undefined;

/**
 * @member {module:model/ImportResponse.StateEnum} state
 */
ImportResponse.prototype['state'] = undefined;

/**
 * @member {String} uuid
 */
ImportResponse.prototype['uuid'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
ImportResponse['StateEnum'] = {

    /**
     * value: "IMPORTING"
     * @const
     */
    "IMPORTING": "IMPORTING",

    /**
     * value: "FINISHED_SUCCESS"
     * @const
     */
    "FINISHED_SUCCESS": "FINISHED_SUCCESS",

    /**
     * value: "FINISHED_FAILED"
     * @const
     */
    "FINISHED_FAILED": "FINISHED_FAILED"
};



export default ImportResponse;

