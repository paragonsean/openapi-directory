/**
 * Product Library API
 * The Product Library API is used for managing merchant's product information and product images.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DiscountRequest from '../model/DiscountRequest';
import DiscountResponse from '../model/DiscountResponse';
import ErrorResponse from '../model/ErrorResponse';

/**
* Discounts service.
* @module api/DiscountsApi
* @version 1.0.0
*/
export default class DiscountsApi {

    /**
    * Constructs a new DiscountsApi. 
    * @alias module:api/DiscountsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createDiscount operation.
     * @callback module:api/DiscountsApi~createDiscountCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a discount
     * Creates a single discount entity. The location of the newly created discount will be available in the successful response as a HttpHeaders.LOCATION header
     * @param {String} organizationUuid 
     * @param {Object} opts Optional parameters
     * @param {module:model/DiscountRequest} [discountRequest] 
     * @param {module:api/DiscountsApi~createDiscountCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createDiscount(organizationUuid, opts, callback) {
      opts = opts || {};
      let postBody = opts['discountRequest'];
      // verify the required parameter 'organizationUuid' is set
      if (organizationUuid === undefined || organizationUuid === null) {
        throw new Error("Missing the required parameter 'organizationUuid' when calling createDiscount");
      }

      let pathParams = {
        'organizationUuid': organizationUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ZettleOauth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{organizationUuid}/discounts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDiscount operation.
     * @callback module:api/DiscountsApi~deleteDiscountCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a single discount 
     * @param {String} organizationUuid 
     * @param {String} discountUuid 
     * @param {module:api/DiscountsApi~deleteDiscountCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDiscount(organizationUuid, discountUuid, callback) {
      let postBody = null;
      // verify the required parameter 'organizationUuid' is set
      if (organizationUuid === undefined || organizationUuid === null) {
        throw new Error("Missing the required parameter 'organizationUuid' when calling deleteDiscount");
      }
      // verify the required parameter 'discountUuid' is set
      if (discountUuid === undefined || discountUuid === null) {
        throw new Error("Missing the required parameter 'discountUuid' when calling deleteDiscount");
      }

      let pathParams = {
        'organizationUuid': organizationUuid,
        'discountUuid': discountUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ZettleOauth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{organizationUuid}/discounts/{discountUuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllDiscounts operation.
     * @callback module:api/DiscountsApi~getAllDiscountsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DiscountResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all discounts
     * @param {String} organizationUuid 
     * @param {module:api/DiscountsApi~getAllDiscountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DiscountResponse>}
     */
    getAllDiscounts(organizationUuid, callback) {
      let postBody = null;
      // verify the required parameter 'organizationUuid' is set
      if (organizationUuid === undefined || organizationUuid === null) {
        throw new Error("Missing the required parameter 'organizationUuid' when calling getAllDiscounts");
      }

      let pathParams = {
        'organizationUuid': organizationUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ZettleOauth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DiscountResponse];
      return this.apiClient.callApi(
        '/organizations/{organizationUuid}/discounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDiscount operation.
     * @callback module:api/DiscountsApi~getDiscountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DiscountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a single discount
     * Get the full discount with the provided UUID. The method supports conditional GET through providing a HttpHeaders.IF_NONE_MATCH header. If the conditional prerequisite is fullfilled, the full discount is returned: otherwise a 304 not modified will be returned with an empty body.
     * @param {String} organizationUuid 
     * @param {String} discountUuid 
     * @param {Object} opts Optional parameters
     * @param {String} [ifNoneMatch] 
     * @param {module:api/DiscountsApi~getDiscountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DiscountResponse}
     */
    getDiscount(organizationUuid, discountUuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationUuid' is set
      if (organizationUuid === undefined || organizationUuid === null) {
        throw new Error("Missing the required parameter 'organizationUuid' when calling getDiscount");
      }
      // verify the required parameter 'discountUuid' is set
      if (discountUuid === undefined || discountUuid === null) {
        throw new Error("Missing the required parameter 'discountUuid' when calling getDiscount");
      }

      let pathParams = {
        'organizationUuid': organizationUuid,
        'discountUuid': discountUuid
      };
      let queryParams = {
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['ZettleOauth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DiscountResponse;
      return this.apiClient.callApi(
        '/organizations/{organizationUuid}/discounts/{discountUuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDiscount operation.
     * @callback module:api/DiscountsApi~updateDiscountCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a single discount
     * Updates a discount entity using JSON merge patch (https://tools.ietf.org/html/rfc7386). This means that only included fields will be changed: null values removes the field on the target entity, and other values updates the field. Conditional updates are supported through the HttpHeaders.IF_MATCH header. If the conditional prerequisite is fullfilled, the discount is updated: otherwise a 412 precondition failed will be returned with an empty body.
     * @param {String} organizationUuid 
     * @param {String} discountUuid 
     * @param {module:model/DiscountRequest} discountRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [ifMatch] 
     * @param {module:api/DiscountsApi~updateDiscountCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateDiscount(organizationUuid, discountUuid, discountRequest, opts, callback) {
      opts = opts || {};
      let postBody = discountRequest;
      // verify the required parameter 'organizationUuid' is set
      if (organizationUuid === undefined || organizationUuid === null) {
        throw new Error("Missing the required parameter 'organizationUuid' when calling updateDiscount");
      }
      // verify the required parameter 'discountUuid' is set
      if (discountUuid === undefined || discountUuid === null) {
        throw new Error("Missing the required parameter 'discountUuid' when calling updateDiscount");
      }
      // verify the required parameter 'discountRequest' is set
      if (discountRequest === undefined || discountRequest === null) {
        throw new Error("Missing the required parameter 'discountRequest' when calling updateDiscount");
      }

      let pathParams = {
        'organizationUuid': organizationUuid,
        'discountUuid': discountUuid
      };
      let queryParams = {
      };
      let headerParams = {
        'If-Match': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = ['ZettleOauth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{organizationUuid}/discounts/{discountUuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
