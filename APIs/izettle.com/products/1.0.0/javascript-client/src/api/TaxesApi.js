/**
 * Product Library API
 * The Product Library API is used for managing merchant's product information and product images.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import TaxRate from '../model/TaxRate';
import TaxRateProductCountResponse from '../model/TaxRateProductCountResponse';
import TaxRateUpdateRequest from '../model/TaxRateUpdateRequest';
import TaxRatesCreateRequest from '../model/TaxRatesCreateRequest';
import TaxRatesResponse from '../model/TaxRatesResponse';
import TaxSettingsResponse from '../model/TaxSettingsResponse';
import TaxSettingsUpdateRequest from '../model/TaxSettingsUpdateRequest';

/**
* Taxes service.
* @module api/TaxesApi
* @version 1.0.0
*/
export default class TaxesApi {

    /**
    * Constructs a new TaxesApi. 
    * @alias module:api/TaxesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createTaxRates operation.
     * @callback module:api/TaxesApi~createTaxRatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaxRatesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new tax rates
     * @param {module:model/TaxRatesCreateRequest} taxRatesCreateRequest 
     * @param {module:api/TaxesApi~createTaxRatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaxRatesResponse}
     */
    createTaxRates(taxRatesCreateRequest, callback) {
      let postBody = taxRatesCreateRequest;
      // verify the required parameter 'taxRatesCreateRequest' is set
      if (taxRatesCreateRequest === undefined || taxRatesCreateRequest === null) {
        throw new Error("Missing the required parameter 'taxRatesCreateRequest' when calling createTaxRates");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ZettleOauth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TaxRatesResponse;
      return this.apiClient.callApi(
        '/v1/taxes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTaxRate operation.
     * @callback module:api/TaxesApi~deleteTaxRateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a single tax rate
     * @param {String} taxRateUuid 
     * @param {module:api/TaxesApi~deleteTaxRateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTaxRate(taxRateUuid, callback) {
      let postBody = null;
      // verify the required parameter 'taxRateUuid' is set
      if (taxRateUuid === undefined || taxRateUuid === null) {
        throw new Error("Missing the required parameter 'taxRateUuid' when calling deleteTaxRate");
      }

      let pathParams = {
        'taxRateUuid': taxRateUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ZettleOauth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/taxes/{taxRateUuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductCountForAllTaxes operation.
     * @callback module:api/TaxesApi~getProductCountForAllTaxesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaxRateProductCountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all tax rates and a count of products associated with each
     * @param {module:api/TaxesApi~getProductCountForAllTaxesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaxRateProductCountResponse}
     */
    getProductCountForAllTaxes(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ZettleOauth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TaxRateProductCountResponse;
      return this.apiClient.callApi(
        '/v1/taxes/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTaxRate operation.
     * @callback module:api/TaxesApi~getTaxRateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaxRate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single tax rate
     * @param {String} taxRateUuid 
     * @param {module:api/TaxesApi~getTaxRateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaxRate}
     */
    getTaxRate(taxRateUuid, callback) {
      let postBody = null;
      // verify the required parameter 'taxRateUuid' is set
      if (taxRateUuid === undefined || taxRateUuid === null) {
        throw new Error("Missing the required parameter 'taxRateUuid' when calling getTaxRate");
      }

      let pathParams = {
        'taxRateUuid': taxRateUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ZettleOauth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TaxRate;
      return this.apiClient.callApi(
        '/v1/taxes/{taxRateUuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTaxRates operation.
     * @callback module:api/TaxesApi~getTaxRatesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TaxRatesResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all available tax rates
     * @param {module:api/TaxesApi~getTaxRatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TaxRatesResponse>}
     */
    getTaxRates(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ZettleOauth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TaxRatesResponse];
      return this.apiClient.callApi(
        '/v1/taxes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTaxSettings operation.
     * @callback module:api/TaxesApi~getTaxSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaxSettingsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the organization tax settings 
     * @param {module:api/TaxesApi~getTaxSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaxSettingsResponse}
     */
    getTaxSettings(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ZettleOauth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TaxSettingsResponse;
      return this.apiClient.callApi(
        '/v1/taxes/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setTaxationMode operation.
     * @callback module:api/TaxesApi~setTaxationModeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaxSettingsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the organization tax settings
     * @param {module:model/TaxSettingsUpdateRequest} taxSettingsUpdateRequest 
     * @param {module:api/TaxesApi~setTaxationModeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaxSettingsResponse}
     */
    setTaxationMode(taxSettingsUpdateRequest, callback) {
      let postBody = taxSettingsUpdateRequest;
      // verify the required parameter 'taxSettingsUpdateRequest' is set
      if (taxSettingsUpdateRequest === undefined || taxSettingsUpdateRequest === null) {
        throw new Error("Missing the required parameter 'taxSettingsUpdateRequest' when calling setTaxationMode");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ZettleOauth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TaxSettingsResponse;
      return this.apiClient.callApi(
        '/v1/taxes/settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTaxRate operation.
     * @callback module:api/TaxesApi~updateTaxRateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaxRate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a single tax rate
     * @param {String} taxRateUuid 
     * @param {module:model/TaxRateUpdateRequest} taxRateUpdateRequest 
     * @param {module:api/TaxesApi~updateTaxRateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaxRate}
     */
    updateTaxRate(taxRateUuid, taxRateUpdateRequest, callback) {
      let postBody = taxRateUpdateRequest;
      // verify the required parameter 'taxRateUuid' is set
      if (taxRateUuid === undefined || taxRateUuid === null) {
        throw new Error("Missing the required parameter 'taxRateUuid' when calling updateTaxRate");
      }
      // verify the required parameter 'taxRateUpdateRequest' is set
      if (taxRateUpdateRequest === undefined || taxRateUpdateRequest === null) {
        throw new Error("Missing the required parameter 'taxRateUpdateRequest' when calling updateTaxRate");
      }

      let pathParams = {
        'taxRateUuid': taxRateUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ZettleOauth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TaxRate;
      return this.apiClient.callApi(
        '/v1/taxes/{taxRateUuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
