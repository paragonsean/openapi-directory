/**
 * Product Library API
 * The Product Library API is used for managing merchant's product information and product images.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BulkImportRequest from '../model/BulkImportRequest';
import ErrorResponse from '../model/ErrorResponse';
import ImportResponse from '../model/ImportResponse';

/**
* Import service.
* @module api/ImportApi
* @version 1.0.0
*/
export default class ImportApi {

    /**
    * Constructs a new ImportApi. 
    * @alias module:api/ImportApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getLatestImportStatus operation.
     * @callback module:api/ImportApi~getLatestImportStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get status for latest import
     * @param {String} organizationUuid 
     * @param {module:api/ImportApi~getLatestImportStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImportResponse}
     */
    getLatestImportStatus(organizationUuid, callback) {
      let postBody = null;
      // verify the required parameter 'organizationUuid' is set
      if (organizationUuid === undefined || organizationUuid === null) {
        throw new Error("Missing the required parameter 'organizationUuid' when calling getLatestImportStatus");
      }

      let pathParams = {
        'organizationUuid': organizationUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ZettleOauth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ImportResponse;
      return this.apiClient.callApi(
        '/organizations/{organizationUuid}/import/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStatusByUuid operation.
     * @callback module:api/ImportApi~getStatusByUuidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get status for an import
     * @param {String} organizationUuid 
     * @param {String} importUuid 
     * @param {module:api/ImportApi~getStatusByUuidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImportResponse}
     */
    getStatusByUuid(organizationUuid, importUuid, callback) {
      let postBody = null;
      // verify the required parameter 'organizationUuid' is set
      if (organizationUuid === undefined || organizationUuid === null) {
        throw new Error("Missing the required parameter 'organizationUuid' when calling getStatusByUuid");
      }
      // verify the required parameter 'importUuid' is set
      if (importUuid === undefined || importUuid === null) {
        throw new Error("Missing the required parameter 'importUuid' when calling getStatusByUuid");
      }

      let pathParams = {
        'organizationUuid': organizationUuid,
        'importUuid': importUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ZettleOauth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ImportResponse;
      return this.apiClient.callApi(
        '/organizations/{organizationUuid}/import/status/{importUuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importLibraryV2 operation.
     * @callback module:api/ImportApi~importLibraryV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ImportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import library items
     * @param {String} organizationUuid 
     * @param {module:model/BulkImportRequest} bulkImportRequest 
     * @param {module:api/ImportApi~importLibraryV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImportResponse}
     */
    importLibraryV2(organizationUuid, bulkImportRequest, callback) {
      let postBody = bulkImportRequest;
      // verify the required parameter 'organizationUuid' is set
      if (organizationUuid === undefined || organizationUuid === null) {
        throw new Error("Missing the required parameter 'organizationUuid' when calling importLibraryV2");
      }
      // verify the required parameter 'bulkImportRequest' is set
      if (bulkImportRequest === undefined || bulkImportRequest === null) {
        throw new Error("Missing the required parameter 'bulkImportRequest' when calling importLibraryV2");
      }

      let pathParams = {
        'organizationUuid': organizationUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ZettleOauth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ImportResponse;
      return this.apiClient.callApi(
        '/organizations/{organizationUuid}/import/v2', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
