/**
 * Product Library API
 * The Product Library API is used for managing merchant's product information and product images.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import FullProductUpdateRequest from '../model/FullProductUpdateRequest';
import ProductCountResponse from '../model/ProductCountResponse';
import ProductCreateRequest from '../model/ProductCreateRequest';
import ProductResponse from '../model/ProductResponse';
import VariantOptionsResponse from '../model/VariantOptionsResponse';

/**
* Products service.
* @module api/ProductsApi
* @version 1.0.0
*/
export default class ProductsApi {

    /**
    * Constructs a new ProductsApi. 
    * @alias module:api/ProductsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the countAllProducts operation.
     * @callback module:api/ProductsApi~countAllProductsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProductCountResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the count of existing products
     * @param {String} organizationUuid 
     * @param {module:api/ProductsApi~countAllProductsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProductCountResponse>}
     */
    countAllProducts(organizationUuid, callback) {
      let postBody = null;
      // verify the required parameter 'organizationUuid' is set
      if (organizationUuid === undefined || organizationUuid === null) {
        throw new Error("Missing the required parameter 'organizationUuid' when calling countAllProducts");
      }

      let pathParams = {
        'organizationUuid': organizationUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ZettleOauth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProductCountResponse];
      return this.apiClient.callApi(
        '/organizations/{organizationUuid}/products/v2/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createProduct operation.
     * @callback module:api/ProductsApi~createProductCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new product
     * @param {String} organizationUuid 
     * @param {module:model/ProductCreateRequest} productCreateRequest 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [returnEntity = false)] 
     * @param {module:api/ProductsApi~createProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductResponse}
     */
    createProduct(organizationUuid, productCreateRequest, opts, callback) {
      opts = opts || {};
      let postBody = productCreateRequest;
      // verify the required parameter 'organizationUuid' is set
      if (organizationUuid === undefined || organizationUuid === null) {
        throw new Error("Missing the required parameter 'organizationUuid' when calling createProduct");
      }
      // verify the required parameter 'productCreateRequest' is set
      if (productCreateRequest === undefined || productCreateRequest === null) {
        throw new Error("Missing the required parameter 'productCreateRequest' when calling createProduct");
      }

      let pathParams = {
        'organizationUuid': organizationUuid
      };
      let queryParams = {
        'returnEntity': opts['returnEntity']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ZettleOauth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductResponse;
      return this.apiClient.callApi(
        '/organizations/{organizationUuid}/products', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProduct operation.
     * @callback module:api/ProductsApi~deleteProductCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a single product
     * @param {String} organizationUuid 
     * @param {String} productUuid 
     * @param {module:api/ProductsApi~deleteProductCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProduct(organizationUuid, productUuid, callback) {
      let postBody = null;
      // verify the required parameter 'organizationUuid' is set
      if (organizationUuid === undefined || organizationUuid === null) {
        throw new Error("Missing the required parameter 'organizationUuid' when calling deleteProduct");
      }
      // verify the required parameter 'productUuid' is set
      if (productUuid === undefined || productUuid === null) {
        throw new Error("Missing the required parameter 'productUuid' when calling deleteProduct");
      }

      let pathParams = {
        'organizationUuid': organizationUuid,
        'productUuid': productUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ZettleOauth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{organizationUuid}/products/{productUuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProducts operation.
     * @callback module:api/ProductsApi~deleteProductsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a list of products
     * @param {String} organizationUuid 
     * @param {Array.<String>} uuid List of product UUIDs to be deleted
     * @param {module:api/ProductsApi~deleteProductsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProducts(organizationUuid, uuid, callback) {
      let postBody = null;
      // verify the required parameter 'organizationUuid' is set
      if (organizationUuid === undefined || organizationUuid === null) {
        throw new Error("Missing the required parameter 'organizationUuid' when calling deleteProducts");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling deleteProducts");
      }

      let pathParams = {
        'organizationUuid': organizationUuid
      };
      let queryParams = {
        'uuid': this.apiClient.buildCollectionParam(uuid, 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ZettleOauth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{organizationUuid}/products', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllOptions operation.
     * @callback module:api/ProductsApi~getAllOptionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/VariantOptionsResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an aggregate of active Options in the library
     * @param {String} organizationUuid 
     * @param {module:api/ProductsApi~getAllOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/VariantOptionsResponse>}
     */
    getAllOptions(organizationUuid, callback) {
      let postBody = null;
      // verify the required parameter 'organizationUuid' is set
      if (organizationUuid === undefined || organizationUuid === null) {
        throw new Error("Missing the required parameter 'organizationUuid' when calling getAllOptions");
      }

      let pathParams = {
        'organizationUuid': organizationUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ZettleOauth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [VariantOptionsResponse];
      return this.apiClient.callApi(
        '/organizations/{organizationUuid}/products/options', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllProductsInPos operation.
     * @callback module:api/ProductsApi~getAllProductsInPosCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProductResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all products visible in POS
     * @param {String} organizationUuid 
     * @param {module:api/ProductsApi~getAllProductsInPosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProductResponse>}
     */
    getAllProductsInPos(organizationUuid, callback) {
      let postBody = null;
      // verify the required parameter 'organizationUuid' is set
      if (organizationUuid === undefined || organizationUuid === null) {
        throw new Error("Missing the required parameter 'organizationUuid' when calling getAllProductsInPos");
      }

      let pathParams = {
        'organizationUuid': organizationUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ZettleOauth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProductResponse];
      return this.apiClient.callApi(
        '/organizations/{organizationUuid}/products', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllProductsV2 operation.
     * @callback module:api/ProductsApi~getAllProductsV2Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProductResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all products visible in POS – v2
     * @param {String} organizationUuid 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [sort] If true, sorts response by created date
     * @param {module:api/ProductsApi~getAllProductsV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProductResponse>}
     */
    getAllProductsV2(organizationUuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationUuid' is set
      if (organizationUuid === undefined || organizationUuid === null) {
        throw new Error("Missing the required parameter 'organizationUuid' when calling getAllProductsV2");
      }

      let pathParams = {
        'organizationUuid': organizationUuid
      };
      let queryParams = {
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ZettleOauth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProductResponse];
      return this.apiClient.callApi(
        '/organizations/{organizationUuid}/products/v2', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProduct operation.
     * @callback module:api/ProductsApi~getProductCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a single product
     * Get the full product with the provided UUID. The method supports conditional GET through providing a HttpHeaders.IF_NONE_MATCH header. If the conditional prerequisite is fullfilled, the full product is returned, otherwise a 304 not modified will be returned with an empty body.
     * @param {String} organizationUuid 
     * @param {String} productUuid 
     * @param {Object} opts Optional parameters
     * @param {String} [ifNoneMatch] 
     * @param {module:api/ProductsApi~getProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductResponse}
     */
    getProduct(organizationUuid, productUuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationUuid' is set
      if (organizationUuid === undefined || organizationUuid === null) {
        throw new Error("Missing the required parameter 'organizationUuid' when calling getProduct");
      }
      // verify the required parameter 'productUuid' is set
      if (productUuid === undefined || productUuid === null) {
        throw new Error("Missing the required parameter 'productUuid' when calling getProduct");
      }

      let pathParams = {
        'organizationUuid': organizationUuid,
        'productUuid': productUuid
      };
      let queryParams = {
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['ZettleOauth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductResponse;
      return this.apiClient.callApi(
        '/organizations/{organizationUuid}/products/{productUuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProduct operation.
     * @callback module:api/ProductsApi~updateProductCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a single product
     * Updates a product entity using JSON merge patch (https://tools.ietf.org/html/rfc7386). This means that only included fields will be changed: null values removes the field on the target entity, and other values updates the field. Conditional updates are supported through the HttpHeaders.IF_MATCH header. If the conditional prerequisite is fullfilled, the product is updated: otherwise a 412 (precondition failed) will be returned with an empty body.
     * @param {String} organizationUuid 
     * @param {String} productUuid 
     * @param {module:model/FullProductUpdateRequest} fullProductUpdateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [ifMatch] 
     * @param {module:api/ProductsApi~updateProductCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateProduct(organizationUuid, productUuid, fullProductUpdateRequest, opts, callback) {
      opts = opts || {};
      let postBody = fullProductUpdateRequest;
      // verify the required parameter 'organizationUuid' is set
      if (organizationUuid === undefined || organizationUuid === null) {
        throw new Error("Missing the required parameter 'organizationUuid' when calling updateProduct");
      }
      // verify the required parameter 'productUuid' is set
      if (productUuid === undefined || productUuid === null) {
        throw new Error("Missing the required parameter 'productUuid' when calling updateProduct");
      }
      // verify the required parameter 'fullProductUpdateRequest' is set
      if (fullProductUpdateRequest === undefined || fullProductUpdateRequest === null) {
        throw new Error("Missing the required parameter 'fullProductUpdateRequest' when calling updateProduct");
      }

      let pathParams = {
        'organizationUuid': organizationUuid,
        'productUuid': productUuid
      };
      let queryParams = {
      };
      let headerParams = {
        'If-Match': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = ['ZettleOauth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{organizationUuid}/products/v2/{productUuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
