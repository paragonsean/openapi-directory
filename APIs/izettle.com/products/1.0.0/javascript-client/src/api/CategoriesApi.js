/**
 * Product Library API
 * The Product Library API is used for managing merchant's product information and product images.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CategoryResponse from '../model/CategoryResponse';
import CreateCategoriesRequest from '../model/CreateCategoriesRequest';
import RenameCategoryRequest from '../model/RenameCategoryRequest';

/**
* Categories service.
* @module api/CategoriesApi
* @version 1.0.0
*/
export default class CategoriesApi {

    /**
    * Constructs a new CategoriesApi. 
    * @alias module:api/CategoriesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createCategories operation.
     * @callback module:api/CategoriesApi~createCategoriesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new category
     * @param {String} organizationUuid 
     * @param {module:model/CreateCategoriesRequest} createCategoriesRequest 
     * @param {module:api/CategoriesApi~createCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createCategories(organizationUuid, createCategoriesRequest, callback) {
      let postBody = createCategoriesRequest;
      // verify the required parameter 'organizationUuid' is set
      if (organizationUuid === undefined || organizationUuid === null) {
        throw new Error("Missing the required parameter 'organizationUuid' when calling createCategories");
      }
      // verify the required parameter 'createCategoriesRequest' is set
      if (createCategoriesRequest === undefined || createCategoriesRequest === null) {
        throw new Error("Missing the required parameter 'createCategoriesRequest' when calling createCategories");
      }

      let pathParams = {
        'organizationUuid': organizationUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ZettleOauth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{organizationUuid}/categories/v2', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCategory operation.
     * @callback module:api/CategoriesApi~deleteCategoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a category
     * @param {String} organizationUuid 
     * @param {String} categoryUuid 
     * @param {module:api/CategoriesApi~deleteCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCategory(organizationUuid, categoryUuid, callback) {
      let postBody = null;
      // verify the required parameter 'organizationUuid' is set
      if (organizationUuid === undefined || organizationUuid === null) {
        throw new Error("Missing the required parameter 'organizationUuid' when calling deleteCategory");
      }
      // verify the required parameter 'categoryUuid' is set
      if (categoryUuid === undefined || categoryUuid === null) {
        throw new Error("Missing the required parameter 'categoryUuid' when calling deleteCategory");
      }

      let pathParams = {
        'organizationUuid': organizationUuid,
        'categoryUuid': categoryUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ZettleOauth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{organizationUuid}/categories/v2/{categoryUuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductTypes operation.
     * @callback module:api/CategoriesApi~getProductTypesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CategoryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all categories
     * @param {String} organizationUuid 
     * @param {module:api/CategoriesApi~getProductTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CategoryResponse}
     */
    getProductTypes(organizationUuid, callback) {
      let postBody = null;
      // verify the required parameter 'organizationUuid' is set
      if (organizationUuid === undefined || organizationUuid === null) {
        throw new Error("Missing the required parameter 'organizationUuid' when calling getProductTypes");
      }

      let pathParams = {
        'organizationUuid': organizationUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ZettleOauth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CategoryResponse;
      return this.apiClient.callApi(
        '/organizations/{organizationUuid}/categories/v2', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the renameCategory operation.
     * @callback module:api/CategoriesApi~renameCategoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rename a category
     * @param {String} organizationUuid 
     * @param {String} categoryUuid 
     * @param {module:model/RenameCategoryRequest} renameCategoryRequest 
     * @param {module:api/CategoriesApi~renameCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    renameCategory(organizationUuid, categoryUuid, renameCategoryRequest, callback) {
      let postBody = renameCategoryRequest;
      // verify the required parameter 'organizationUuid' is set
      if (organizationUuid === undefined || organizationUuid === null) {
        throw new Error("Missing the required parameter 'organizationUuid' when calling renameCategory");
      }
      // verify the required parameter 'categoryUuid' is set
      if (categoryUuid === undefined || categoryUuid === null) {
        throw new Error("Missing the required parameter 'categoryUuid' when calling renameCategory");
      }
      // verify the required parameter 'renameCategoryRequest' is set
      if (renameCategoryRequest === undefined || renameCategoryRequest === null) {
        throw new Error("Missing the required parameter 'renameCategoryRequest' when calling renameCategory");
      }

      let pathParams = {
        'organizationUuid': organizationUuid,
        'categoryUuid': categoryUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ZettleOauth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{organizationUuid}/categories/v2/{categoryUuid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
