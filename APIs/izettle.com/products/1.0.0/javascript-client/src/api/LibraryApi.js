/**
 * Product Library API
 * The Product Library API is used for managing merchant's product information and product images.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import LibraryResponse from '../model/LibraryResponse';

/**
* Library service.
* @module api/LibraryApi
* @version 1.0.0
*/
export default class LibraryApi {

    /**
    * Constructs a new LibraryApi. 
    * @alias module:api/LibraryApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getLibrary operation.
     * @callback module:api/LibraryApi~getLibraryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LibraryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the entire library
     * Will return the entire library for the authenticated user. If size of the library exceeds server preferences (normally 500) or the value of the optional limit parameter, the result will be paginated. Paginated responses return a Link header, indicating the next URI to fetch. The resulting header value will look something like:  <https://products.izettle.com/organizations/self/library?limit=X&offset=Y>; rel=\"next\"  where limit is number of items in response, and offset is the current position in pagination. The rel-part in the header is the links relation to the data previously recieved. The idea is that as long as this header is present there are still items remaining to be fetched. When either the header is not present or it's value doesn't contain any \"next\" value, all items have been sent to the client.  Note: The client should NOT try to extract query parameters from the URI, but rather use it as-is for the next request. Also, clients should be perpared that one Link header might contain multiple other IRIs that are not \"next\" (there will never be more than one \"next\" though). See more at:      IETF: https://tools.ietf.org/html/rfc5988     GitHub: https://developer.github.com/guides/traversing-with-pagination/  If eventLogUuid is provided, the response will only include events affecting the library since that event. Such responses are normally quite small and would be a preferred method for most fat clients after retrieving the initial full library. 
     * @param {String} organizationUuid 
     * @param {Object} opts Optional parameters
     * @param {String} [eventLogUuid] 
     * @param {Number} [limit = 500)] 
     * @param {String} [offset] 
     * @param {Boolean} [all] 
     * @param {module:api/LibraryApi~getLibraryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LibraryResponse}
     */
    getLibrary(organizationUuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationUuid' is set
      if (organizationUuid === undefined || organizationUuid === null) {
        throw new Error("Missing the required parameter 'organizationUuid' when calling getLibrary");
      }

      let pathParams = {
        'organizationUuid': organizationUuid
      };
      let queryParams = {
        'eventLogUuid': opts['eventLogUuid'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'all': opts['all']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ZettleOauth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LibraryResponse;
      return this.apiClient.callApi(
        '/organizations/{organizationUuid}/library', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
