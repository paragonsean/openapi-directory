/**
 * Product Library API
 * The Product Library API is used for managing merchant's product information and product images.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITaxesApi_H
#define OAI_OAITaxesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAITaxRate.h"
#include "OAITaxRateProductCountResponse.h"
#include "OAITaxRateUpdateRequest.h"
#include "OAITaxRatesCreateRequest.h"
#include "OAITaxRatesResponse.h"
#include "OAITaxSettingsResponse.h"
#include "OAITaxSettingsUpdateRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITaxesApi : public QObject {
    Q_OBJECT

public:
    OAITaxesApi(const int timeOut = 0);
    ~OAITaxesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_tax_rates_create_request OAITaxRatesCreateRequest [required]
    */
    virtual void createTaxRates(const OAITaxRatesCreateRequest &oai_tax_rates_create_request);

    /**
    * @param[in]  tax_rate_uuid QString [required]
    */
    virtual void deleteTaxRate(const QString &tax_rate_uuid);


    virtual void getProductCountForAllTaxes();

    /**
    * @param[in]  tax_rate_uuid QString [required]
    */
    virtual void getTaxRate(const QString &tax_rate_uuid);


    virtual void getTaxRates();


    virtual void getTaxSettings();

    /**
    * @param[in]  oai_tax_settings_update_request OAITaxSettingsUpdateRequest [required]
    */
    virtual void setTaxationMode(const OAITaxSettingsUpdateRequest &oai_tax_settings_update_request);

    /**
    * @param[in]  tax_rate_uuid QString [required]
    * @param[in]  oai_tax_rate_update_request OAITaxRateUpdateRequest [required]
    */
    virtual void updateTaxRate(const QString &tax_rate_uuid, const OAITaxRateUpdateRequest &oai_tax_rate_update_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createTaxRatesCallback(OAIHttpRequestWorker *worker);
    void deleteTaxRateCallback(OAIHttpRequestWorker *worker);
    void getProductCountForAllTaxesCallback(OAIHttpRequestWorker *worker);
    void getTaxRateCallback(OAIHttpRequestWorker *worker);
    void getTaxRatesCallback(OAIHttpRequestWorker *worker);
    void getTaxSettingsCallback(OAIHttpRequestWorker *worker);
    void setTaxationModeCallback(OAIHttpRequestWorker *worker);
    void updateTaxRateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createTaxRatesSignal(OAITaxRatesResponse summary);
    void deleteTaxRateSignal();
    void getProductCountForAllTaxesSignal(OAITaxRateProductCountResponse summary);
    void getTaxRateSignal(OAITaxRate summary);
    void getTaxRatesSignal(QList<OAITaxRatesResponse> summary);
    void getTaxSettingsSignal(OAITaxSettingsResponse summary);
    void setTaxationModeSignal(OAITaxSettingsResponse summary);
    void updateTaxRateSignal(OAITaxRate summary);


    void createTaxRatesSignalFull(OAIHttpRequestWorker *worker, OAITaxRatesResponse summary);
    void deleteTaxRateSignalFull(OAIHttpRequestWorker *worker);
    void getProductCountForAllTaxesSignalFull(OAIHttpRequestWorker *worker, OAITaxRateProductCountResponse summary);
    void getTaxRateSignalFull(OAIHttpRequestWorker *worker, OAITaxRate summary);
    void getTaxRatesSignalFull(OAIHttpRequestWorker *worker, QList<OAITaxRatesResponse> summary);
    void getTaxSettingsSignalFull(OAIHttpRequestWorker *worker, OAITaxSettingsResponse summary);
    void setTaxationModeSignalFull(OAIHttpRequestWorker *worker, OAITaxSettingsResponse summary);
    void updateTaxRateSignalFull(OAIHttpRequestWorker *worker, OAITaxRate summary);

    Q_DECL_DEPRECATED_X("Use createTaxRatesSignalError() instead")
    void createTaxRatesSignalE(OAITaxRatesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createTaxRatesSignalError(OAITaxRatesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTaxRateSignalError() instead")
    void deleteTaxRateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTaxRateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProductCountForAllTaxesSignalError() instead")
    void getProductCountForAllTaxesSignalE(OAITaxRateProductCountResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProductCountForAllTaxesSignalError(OAITaxRateProductCountResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTaxRateSignalError() instead")
    void getTaxRateSignalE(OAITaxRate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTaxRateSignalError(OAITaxRate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTaxRatesSignalError() instead")
    void getTaxRatesSignalE(QList<OAITaxRatesResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTaxRatesSignalError(QList<OAITaxRatesResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTaxSettingsSignalError() instead")
    void getTaxSettingsSignalE(OAITaxSettingsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTaxSettingsSignalError(OAITaxSettingsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setTaxationModeSignalError() instead")
    void setTaxationModeSignalE(OAITaxSettingsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setTaxationModeSignalError(OAITaxSettingsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTaxRateSignalError() instead")
    void updateTaxRateSignalE(OAITaxRate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTaxRateSignalError(OAITaxRate summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createTaxRatesSignalErrorFull() instead")
    void createTaxRatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createTaxRatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTaxRateSignalErrorFull() instead")
    void deleteTaxRateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTaxRateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProductCountForAllTaxesSignalErrorFull() instead")
    void getProductCountForAllTaxesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProductCountForAllTaxesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTaxRateSignalErrorFull() instead")
    void getTaxRateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTaxRateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTaxRatesSignalErrorFull() instead")
    void getTaxRatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTaxRatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTaxSettingsSignalErrorFull() instead")
    void getTaxSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTaxSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setTaxationModeSignalErrorFull() instead")
    void setTaxationModeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setTaxationModeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTaxRateSignalErrorFull() instead")
    void updateTaxRateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTaxRateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
