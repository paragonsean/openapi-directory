/**
 * Product Library API
 * The Product Library API is used for managing merchant's product information and product images.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProductsApi_H
#define OAI_OAIProductsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAIFullProductUpdateRequest.h"
#include "OAIProductCountResponse.h"
#include "OAIProductCreateRequest.h"
#include "OAIProductResponse.h"
#include "OAIVariantOptionsResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProductsApi : public QObject {
    Q_OBJECT

public:
    OAIProductsApi(const int timeOut = 0);
    ~OAIProductsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  organization_uuid QString [required]
    */
    virtual void countAllProducts(const QString &organization_uuid);

    /**
    * @param[in]  organization_uuid QString [required]
    * @param[in]  oai_product_create_request OAIProductCreateRequest [required]
    * @param[in]  return_entity bool [optional]
    */
    virtual void createProduct(const QString &organization_uuid, const OAIProductCreateRequest &oai_product_create_request, const ::OpenAPI::OptionalParam<bool> &return_entity = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  organization_uuid QString [required]
    * @param[in]  product_uuid QString [required]
    */
    virtual void deleteProduct(const QString &organization_uuid, const QString &product_uuid);

    /**
    * @param[in]  organization_uuid QString [required]
    * @param[in]  uuid QList<QString> [required]
    */
    virtual void deleteProducts(const QString &organization_uuid, const QList<QString> &uuid);

    /**
    * @param[in]  organization_uuid QString [required]
    */
    virtual void getAllOptions(const QString &organization_uuid);

    /**
    * @param[in]  organization_uuid QString [required]
    */
    virtual void getAllProductsInPos(const QString &organization_uuid);

    /**
    * @param[in]  organization_uuid QString [required]
    * @param[in]  sort bool [optional]
    */
    virtual void getAllProductsV2(const QString &organization_uuid, const ::OpenAPI::OptionalParam<bool> &sort = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  organization_uuid QString [required]
    * @param[in]  product_uuid QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getProduct(const QString &organization_uuid, const QString &product_uuid, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  organization_uuid QString [required]
    * @param[in]  product_uuid QString [required]
    * @param[in]  oai_full_product_update_request OAIFullProductUpdateRequest [required]
    * @param[in]  if_match QString [optional]
    */
    virtual void updateProduct(const QString &organization_uuid, const QString &product_uuid, const OAIFullProductUpdateRequest &oai_full_product_update_request, const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void countAllProductsCallback(OAIHttpRequestWorker *worker);
    void createProductCallback(OAIHttpRequestWorker *worker);
    void deleteProductCallback(OAIHttpRequestWorker *worker);
    void deleteProductsCallback(OAIHttpRequestWorker *worker);
    void getAllOptionsCallback(OAIHttpRequestWorker *worker);
    void getAllProductsInPosCallback(OAIHttpRequestWorker *worker);
    void getAllProductsV2Callback(OAIHttpRequestWorker *worker);
    void getProductCallback(OAIHttpRequestWorker *worker);
    void updateProductCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void countAllProductsSignal(QList<OAIProductCountResponse> summary);
    void createProductSignal(OAIProductResponse summary);
    void deleteProductSignal();
    void deleteProductsSignal();
    void getAllOptionsSignal(QList<OAIVariantOptionsResponse> summary);
    void getAllProductsInPosSignal(QList<OAIProductResponse> summary);
    void getAllProductsV2Signal(QList<OAIProductResponse> summary);
    void getProductSignal(OAIProductResponse summary);
    void updateProductSignal();


    void countAllProductsSignalFull(OAIHttpRequestWorker *worker, QList<OAIProductCountResponse> summary);
    void createProductSignalFull(OAIHttpRequestWorker *worker, OAIProductResponse summary);
    void deleteProductSignalFull(OAIHttpRequestWorker *worker);
    void deleteProductsSignalFull(OAIHttpRequestWorker *worker);
    void getAllOptionsSignalFull(OAIHttpRequestWorker *worker, QList<OAIVariantOptionsResponse> summary);
    void getAllProductsInPosSignalFull(OAIHttpRequestWorker *worker, QList<OAIProductResponse> summary);
    void getAllProductsV2SignalFull(OAIHttpRequestWorker *worker, QList<OAIProductResponse> summary);
    void getProductSignalFull(OAIHttpRequestWorker *worker, OAIProductResponse summary);
    void updateProductSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use countAllProductsSignalError() instead")
    void countAllProductsSignalE(QList<OAIProductCountResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void countAllProductsSignalError(QList<OAIProductCountResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createProductSignalError() instead")
    void createProductSignalE(OAIProductResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createProductSignalError(OAIProductResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteProductSignalError() instead")
    void deleteProductSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProductSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteProductsSignalError() instead")
    void deleteProductsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProductsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllOptionsSignalError() instead")
    void getAllOptionsSignalE(QList<OAIVariantOptionsResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllOptionsSignalError(QList<OAIVariantOptionsResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllProductsInPosSignalError() instead")
    void getAllProductsInPosSignalE(QList<OAIProductResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllProductsInPosSignalError(QList<OAIProductResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllProductsV2SignalError() instead")
    void getAllProductsV2SignalE(QList<OAIProductResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllProductsV2SignalError(QList<OAIProductResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProductSignalError() instead")
    void getProductSignalE(OAIProductResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProductSignalError(OAIProductResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateProductSignalError() instead")
    void updateProductSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateProductSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use countAllProductsSignalErrorFull() instead")
    void countAllProductsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void countAllProductsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createProductSignalErrorFull() instead")
    void createProductSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createProductSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteProductSignalErrorFull() instead")
    void deleteProductSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProductSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteProductsSignalErrorFull() instead")
    void deleteProductsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProductsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllOptionsSignalErrorFull() instead")
    void getAllOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllProductsInPosSignalErrorFull() instead")
    void getAllProductsInPosSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllProductsInPosSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllProductsV2SignalErrorFull() instead")
    void getAllProductsV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllProductsV2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProductSignalErrorFull() instead")
    void getProductSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProductSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateProductSignalErrorFull() instead")
    void updateProductSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateProductSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
