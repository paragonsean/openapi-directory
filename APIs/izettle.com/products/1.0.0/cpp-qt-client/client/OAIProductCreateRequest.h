/**
 * Product Library API
 * The Product Library API is used for managing merchant's product information and product images.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIProductCreateRequest.h
 *
 * 
 */

#ifndef OAIProductCreateRequest_H
#define OAIProductCreateRequest_H

#include <QJsonObject>

#include "OAICategoryDTO.h"
#include "OAIMetadataDTO.h"
#include "OAIOnlineProperties.h"
#include "OAIPresentationDTO.h"
#include "OAIVariantDTO.h"
#include "OAIVariantOptionDefinitions.h"
#include <QList>
#include <QSet>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICategoryDTO;
class OAIMetadataDTO;
class OAIOnlineProperties;
class OAIPresentationDTO;
class OAIVariantOptionDefinitions;
class OAIVariantDTO;

class OAIProductCreateRequest : public OAIObject {
public:
    OAIProductCreateRequest();
    OAIProductCreateRequest(QString json);
    ~OAIProductCreateRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QSet<QString> getCategories() const;
    void setCategories(const QSet<QString> &categories);
    bool is_categories_Set() const;
    bool is_categories_Valid() const;

    OAICategoryDTO getCategory() const;
    void setCategory(const OAICategoryDTO &category);
    bool is_category_Set() const;
    bool is_category_Valid() const;

    bool isCreateWithDefaultTax() const;
    void setCreateWithDefaultTax(const bool &create_with_default_tax);
    bool is_create_with_default_tax_Set() const;
    bool is_create_with_default_tax_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getExternalReference() const;
    void setExternalReference(const QString &external_reference);
    bool is_external_reference_Set() const;
    bool is_external_reference_Valid() const;

    QSet<QString> getImageLookupKeys() const;
    void setImageLookupKeys(const QSet<QString> &image_lookup_keys);
    bool is_image_lookup_keys_Set() const;
    bool is_image_lookup_keys_Valid() const;

    OAIMetadataDTO getMetadata() const;
    void setMetadata(const OAIMetadataDTO &metadata);
    bool is_metadata_Set() const;
    bool is_metadata_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAIOnlineProperties getOnline() const;
    void setOnline(const OAIOnlineProperties &online);
    bool is_online_Set() const;
    bool is_online_Valid() const;

    OAIPresentationDTO getPresentation() const;
    void setPresentation(const OAIPresentationDTO &presentation);
    bool is_presentation_Set() const;
    bool is_presentation_Valid() const;

    QString getTaxCode() const;
    void setTaxCode(const QString &tax_code);
    bool is_tax_code_Set() const;
    bool is_tax_code_Valid() const;

    bool isTaxExempt() const;
    void setTaxExempt(const bool &tax_exempt);
    bool is_tax_exempt_Set() const;
    bool is_tax_exempt_Valid() const;

    QSet<QString> getTaxRates() const;
    void setTaxRates(const QSet<QString> &tax_rates);
    bool is_tax_rates_Set() const;
    bool is_tax_rates_Valid() const;

    QString getUnitName() const;
    void setUnitName(const QString &unit_name);
    bool is_unit_name_Set() const;
    bool is_unit_name_Valid() const;

    QString getUuid() const;
    void setUuid(const QString &uuid);
    bool is_uuid_Set() const;
    bool is_uuid_Valid() const;

    OAIVariantOptionDefinitions getVariantOptionDefinitions() const;
    void setVariantOptionDefinitions(const OAIVariantOptionDefinitions &variant_option_definitions);
    bool is_variant_option_definitions_Set() const;
    bool is_variant_option_definitions_Valid() const;

    QList<OAIVariantDTO> getVariants() const;
    void setVariants(const QList<OAIVariantDTO> &variants);
    bool is_variants_Set() const;
    bool is_variants_Valid() const;

    double getVatPercentage() const;
    void setVatPercentage(const double &vat_percentage);
    bool is_vat_percentage_Set() const;
    bool is_vat_percentage_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QSet<QString> m_categories;
    bool m_categories_isSet;
    bool m_categories_isValid;

    OAICategoryDTO m_category;
    bool m_category_isSet;
    bool m_category_isValid;

    bool m_create_with_default_tax;
    bool m_create_with_default_tax_isSet;
    bool m_create_with_default_tax_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_external_reference;
    bool m_external_reference_isSet;
    bool m_external_reference_isValid;

    QSet<QString> m_image_lookup_keys;
    bool m_image_lookup_keys_isSet;
    bool m_image_lookup_keys_isValid;

    OAIMetadataDTO m_metadata;
    bool m_metadata_isSet;
    bool m_metadata_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAIOnlineProperties m_online;
    bool m_online_isSet;
    bool m_online_isValid;

    OAIPresentationDTO m_presentation;
    bool m_presentation_isSet;
    bool m_presentation_isValid;

    QString m_tax_code;
    bool m_tax_code_isSet;
    bool m_tax_code_isValid;

    bool m_tax_exempt;
    bool m_tax_exempt_isSet;
    bool m_tax_exempt_isValid;

    QSet<QString> m_tax_rates;
    bool m_tax_rates_isSet;
    bool m_tax_rates_isValid;

    QString m_unit_name;
    bool m_unit_name_isSet;
    bool m_unit_name_isValid;

    QString m_uuid;
    bool m_uuid_isSet;
    bool m_uuid_isValid;

    OAIVariantOptionDefinitions m_variant_option_definitions;
    bool m_variant_option_definitions_isSet;
    bool m_variant_option_definitions_isValid;

    QList<OAIVariantDTO> m_variants;
    bool m_variants_isSet;
    bool m_variants_isValid;

    double m_vat_percentage;
    bool m_vat_percentage_isSet;
    bool m_vat_percentage_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIProductCreateRequest)

#endif // OAIProductCreateRequest_H
