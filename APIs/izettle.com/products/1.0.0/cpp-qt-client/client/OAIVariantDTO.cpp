/**
 * Product Library API
 * The Product Library API is used for managing merchant's product information and product images.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVariantDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVariantDTO::OAIVariantDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVariantDTO::OAIVariantDTO() {
    this->initializeModel();
}

OAIVariantDTO::~OAIVariantDTO() {}

void OAIVariantDTO::initializeModel() {

    m_barcode_isSet = false;
    m_barcode_isValid = false;

    m_cost_price_isSet = false;
    m_cost_price_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_options_isSet = false;
    m_options_isValid = false;

    m_presentation_isSet = false;
    m_presentation_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_sku_isSet = false;
    m_sku_isValid = false;

    m_uuid_isSet = false;
    m_uuid_isValid = false;

    m_vat_percentage_isSet = false;
    m_vat_percentage_isValid = false;
}

void OAIVariantDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVariantDTO::fromJsonObject(QJsonObject json) {

    m_barcode_isValid = ::OpenAPI::fromJsonValue(m_barcode, json[QString("barcode")]);
    m_barcode_isSet = !json[QString("barcode")].isNull() && m_barcode_isValid;

    m_cost_price_isValid = ::OpenAPI::fromJsonValue(m_cost_price, json[QString("costPrice")]);
    m_cost_price_isSet = !json[QString("costPrice")].isNull() && m_cost_price_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_options_isValid = ::OpenAPI::fromJsonValue(m_options, json[QString("options")]);
    m_options_isSet = !json[QString("options")].isNull() && m_options_isValid;

    m_presentation_isValid = ::OpenAPI::fromJsonValue(m_presentation, json[QString("presentation")]);
    m_presentation_isSet = !json[QString("presentation")].isNull() && m_presentation_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_sku_isValid = ::OpenAPI::fromJsonValue(m_sku, json[QString("sku")]);
    m_sku_isSet = !json[QString("sku")].isNull() && m_sku_isValid;

    m_uuid_isValid = ::OpenAPI::fromJsonValue(m_uuid, json[QString("uuid")]);
    m_uuid_isSet = !json[QString("uuid")].isNull() && m_uuid_isValid;

    m_vat_percentage_isValid = ::OpenAPI::fromJsonValue(m_vat_percentage, json[QString("vatPercentage")]);
    m_vat_percentage_isSet = !json[QString("vatPercentage")].isNull() && m_vat_percentage_isValid;
}

QString OAIVariantDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVariantDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_barcode_isSet) {
        obj.insert(QString("barcode"), ::OpenAPI::toJsonValue(m_barcode));
    }
    if (m_cost_price.isSet()) {
        obj.insert(QString("costPrice"), ::OpenAPI::toJsonValue(m_cost_price));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_options.size() > 0) {
        obj.insert(QString("options"), ::OpenAPI::toJsonValue(m_options));
    }
    if (m_presentation.isSet()) {
        obj.insert(QString("presentation"), ::OpenAPI::toJsonValue(m_presentation));
    }
    if (m_price.isSet()) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_sku_isSet) {
        obj.insert(QString("sku"), ::OpenAPI::toJsonValue(m_sku));
    }
    if (m_uuid_isSet) {
        obj.insert(QString("uuid"), ::OpenAPI::toJsonValue(m_uuid));
    }
    if (m_vat_percentage_isSet) {
        obj.insert(QString("vatPercentage"), ::OpenAPI::toJsonValue(m_vat_percentage));
    }
    return obj;
}

QString OAIVariantDTO::getBarcode() const {
    return m_barcode;
}
void OAIVariantDTO::setBarcode(const QString &barcode) {
    m_barcode = barcode;
    m_barcode_isSet = true;
}

bool OAIVariantDTO::is_barcode_Set() const{
    return m_barcode_isSet;
}

bool OAIVariantDTO::is_barcode_Valid() const{
    return m_barcode_isValid;
}

OAIPrice OAIVariantDTO::getCostPrice() const {
    return m_cost_price;
}
void OAIVariantDTO::setCostPrice(const OAIPrice &cost_price) {
    m_cost_price = cost_price;
    m_cost_price_isSet = true;
}

bool OAIVariantDTO::is_cost_price_Set() const{
    return m_cost_price_isSet;
}

bool OAIVariantDTO::is_cost_price_Valid() const{
    return m_cost_price_isValid;
}

QString OAIVariantDTO::getDescription() const {
    return m_description;
}
void OAIVariantDTO::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIVariantDTO::is_description_Set() const{
    return m_description_isSet;
}

bool OAIVariantDTO::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIVariantDTO::getName() const {
    return m_name;
}
void OAIVariantDTO::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIVariantDTO::is_name_Set() const{
    return m_name_isSet;
}

bool OAIVariantDTO::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIVariantOption> OAIVariantDTO::getOptions() const {
    return m_options;
}
void OAIVariantDTO::setOptions(const QList<OAIVariantOption> &options) {
    m_options = options;
    m_options_isSet = true;
}

bool OAIVariantDTO::is_options_Set() const{
    return m_options_isSet;
}

bool OAIVariantDTO::is_options_Valid() const{
    return m_options_isValid;
}

OAIPresentationDTO OAIVariantDTO::getPresentation() const {
    return m_presentation;
}
void OAIVariantDTO::setPresentation(const OAIPresentationDTO &presentation) {
    m_presentation = presentation;
    m_presentation_isSet = true;
}

bool OAIVariantDTO::is_presentation_Set() const{
    return m_presentation_isSet;
}

bool OAIVariantDTO::is_presentation_Valid() const{
    return m_presentation_isValid;
}

OAIPrice OAIVariantDTO::getPrice() const {
    return m_price;
}
void OAIVariantDTO::setPrice(const OAIPrice &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIVariantDTO::is_price_Set() const{
    return m_price_isSet;
}

bool OAIVariantDTO::is_price_Valid() const{
    return m_price_isValid;
}

QString OAIVariantDTO::getSku() const {
    return m_sku;
}
void OAIVariantDTO::setSku(const QString &sku) {
    m_sku = sku;
    m_sku_isSet = true;
}

bool OAIVariantDTO::is_sku_Set() const{
    return m_sku_isSet;
}

bool OAIVariantDTO::is_sku_Valid() const{
    return m_sku_isValid;
}

QString OAIVariantDTO::getUuid() const {
    return m_uuid;
}
void OAIVariantDTO::setUuid(const QString &uuid) {
    m_uuid = uuid;
    m_uuid_isSet = true;
}

bool OAIVariantDTO::is_uuid_Set() const{
    return m_uuid_isSet;
}

bool OAIVariantDTO::is_uuid_Valid() const{
    return m_uuid_isValid;
}

double OAIVariantDTO::getVatPercentage() const {
    return m_vat_percentage;
}
void OAIVariantDTO::setVatPercentage(const double &vat_percentage) {
    m_vat_percentage = vat_percentage;
    m_vat_percentage_isSet = true;
}

bool OAIVariantDTO::is_vat_percentage_Set() const{
    return m_vat_percentage_isSet;
}

bool OAIVariantDTO::is_vat_percentage_Valid() const{
    return m_vat_percentage_isValid;
}

bool OAIVariantDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_barcode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_presentation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVariantDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_uuid_isValid && true;
}

} // namespace OpenAPI
