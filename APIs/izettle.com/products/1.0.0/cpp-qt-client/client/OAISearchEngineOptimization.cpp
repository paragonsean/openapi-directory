/**
 * Product Library API
 * The Product Library API is used for managing merchant's product information and product images.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchEngineOptimization.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchEngineOptimization::OAISearchEngineOptimization(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchEngineOptimization::OAISearchEngineOptimization() {
    this->initializeModel();
}

OAISearchEngineOptimization::~OAISearchEngineOptimization() {}

void OAISearchEngineOptimization::initializeModel() {

    m_meta_description_isSet = false;
    m_meta_description_isValid = false;

    m_slug_isSet = false;
    m_slug_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAISearchEngineOptimization::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchEngineOptimization::fromJsonObject(QJsonObject json) {

    m_meta_description_isValid = ::OpenAPI::fromJsonValue(m_meta_description, json[QString("metaDescription")]);
    m_meta_description_isSet = !json[QString("metaDescription")].isNull() && m_meta_description_isValid;

    m_slug_isValid = ::OpenAPI::fromJsonValue(m_slug, json[QString("slug")]);
    m_slug_isSet = !json[QString("slug")].isNull() && m_slug_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAISearchEngineOptimization::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchEngineOptimization::asJsonObject() const {
    QJsonObject obj;
    if (m_meta_description_isSet) {
        obj.insert(QString("metaDescription"), ::OpenAPI::toJsonValue(m_meta_description));
    }
    if (m_slug_isSet) {
        obj.insert(QString("slug"), ::OpenAPI::toJsonValue(m_slug));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAISearchEngineOptimization::getMetaDescription() const {
    return m_meta_description;
}
void OAISearchEngineOptimization::setMetaDescription(const QString &meta_description) {
    m_meta_description = meta_description;
    m_meta_description_isSet = true;
}

bool OAISearchEngineOptimization::is_meta_description_Set() const{
    return m_meta_description_isSet;
}

bool OAISearchEngineOptimization::is_meta_description_Valid() const{
    return m_meta_description_isValid;
}

QString OAISearchEngineOptimization::getSlug() const {
    return m_slug;
}
void OAISearchEngineOptimization::setSlug(const QString &slug) {
    m_slug = slug;
    m_slug_isSet = true;
}

bool OAISearchEngineOptimization::is_slug_Set() const{
    return m_slug_isSet;
}

bool OAISearchEngineOptimization::is_slug_Valid() const{
    return m_slug_isValid;
}

QString OAISearchEngineOptimization::getTitle() const {
    return m_title;
}
void OAISearchEngineOptimization::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAISearchEngineOptimization::is_title_Set() const{
    return m_title_isSet;
}

bool OAISearchEngineOptimization::is_title_Valid() const{
    return m_title_isValid;
}

bool OAISearchEngineOptimization::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_meta_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slug_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchEngineOptimization::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
