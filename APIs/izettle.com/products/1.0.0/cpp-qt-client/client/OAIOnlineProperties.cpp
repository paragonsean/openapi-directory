/**
 * Product Library API
 * The Product Library API is used for managing merchant's product information and product images.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOnlineProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOnlineProperties::OAIOnlineProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOnlineProperties::OAIOnlineProperties() {
    this->initializeModel();
}

OAIOnlineProperties::~OAIOnlineProperties() {}

void OAIOnlineProperties::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_presentation_isSet = false;
    m_presentation_isValid = false;

    m_seo_isSet = false;
    m_seo_isValid = false;

    m_shipping_isSet = false;
    m_shipping_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIOnlineProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOnlineProperties::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_presentation_isValid = ::OpenAPI::fromJsonValue(m_presentation, json[QString("presentation")]);
    m_presentation_isSet = !json[QString("presentation")].isNull() && m_presentation_isValid;

    m_seo_isValid = ::OpenAPI::fromJsonValue(m_seo, json[QString("seo")]);
    m_seo_isSet = !json[QString("seo")].isNull() && m_seo_isValid;

    m_shipping_isValid = ::OpenAPI::fromJsonValue(m_shipping, json[QString("shipping")]);
    m_shipping_isSet = !json[QString("shipping")].isNull() && m_shipping_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIOnlineProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOnlineProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_presentation.isSet()) {
        obj.insert(QString("presentation"), ::OpenAPI::toJsonValue(m_presentation));
    }
    if (m_seo.isSet()) {
        obj.insert(QString("seo"), ::OpenAPI::toJsonValue(m_seo));
    }
    if (m_shipping.isSet()) {
        obj.insert(QString("shipping"), ::OpenAPI::toJsonValue(m_shipping));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAIOnlineProperties::getDescription() const {
    return m_description;
}
void OAIOnlineProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIOnlineProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIOnlineProperties::is_description_Valid() const{
    return m_description_isValid;
}

OAIPresentation OAIOnlineProperties::getPresentation() const {
    return m_presentation;
}
void OAIOnlineProperties::setPresentation(const OAIPresentation &presentation) {
    m_presentation = presentation;
    m_presentation_isSet = true;
}

bool OAIOnlineProperties::is_presentation_Set() const{
    return m_presentation_isSet;
}

bool OAIOnlineProperties::is_presentation_Valid() const{
    return m_presentation_isValid;
}

OAISearchEngineOptimization OAIOnlineProperties::getSeo() const {
    return m_seo;
}
void OAIOnlineProperties::setSeo(const OAISearchEngineOptimization &seo) {
    m_seo = seo;
    m_seo_isSet = true;
}

bool OAIOnlineProperties::is_seo_Set() const{
    return m_seo_isSet;
}

bool OAIOnlineProperties::is_seo_Valid() const{
    return m_seo_isValid;
}

OAIShipping OAIOnlineProperties::getShipping() const {
    return m_shipping;
}
void OAIOnlineProperties::setShipping(const OAIShipping &shipping) {
    m_shipping = shipping;
    m_shipping_isSet = true;
}

bool OAIOnlineProperties::is_shipping_Set() const{
    return m_shipping_isSet;
}

bool OAIOnlineProperties::is_shipping_Valid() const{
    return m_shipping_isValid;
}

QString OAIOnlineProperties::getStatus() const {
    return m_status;
}
void OAIOnlineProperties::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIOnlineProperties::is_status_Set() const{
    return m_status_isSet;
}

bool OAIOnlineProperties::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIOnlineProperties::getTitle() const {
    return m_title;
}
void OAIOnlineProperties::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIOnlineProperties::is_title_Set() const{
    return m_title_isSet;
}

bool OAIOnlineProperties::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIOnlineProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_presentation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_seo.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOnlineProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_status_isValid && true;
}

} // namespace OpenAPI
