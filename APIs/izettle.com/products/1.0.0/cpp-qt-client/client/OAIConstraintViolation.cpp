/**
 * Product Library API
 * The Product Library API is used for managing merchant's product information and product images.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConstraintViolation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConstraintViolation::OAIConstraintViolation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConstraintViolation::OAIConstraintViolation() {
    this->initializeModel();
}

OAIConstraintViolation::~OAIConstraintViolation() {}

void OAIConstraintViolation::initializeModel() {

    m_constraint_type_isSet = false;
    m_constraint_type_isValid = false;

    m_developer_message_isSet = false;
    m_developer_message_isValid = false;

    m_expected_isSet = false;
    m_expected_isValid = false;

    m_property_name_isSet = false;
    m_property_name_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIConstraintViolation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConstraintViolation::fromJsonObject(QJsonObject json) {

    m_constraint_type_isValid = ::OpenAPI::fromJsonValue(m_constraint_type, json[QString("constraintType")]);
    m_constraint_type_isSet = !json[QString("constraintType")].isNull() && m_constraint_type_isValid;

    m_developer_message_isValid = ::OpenAPI::fromJsonValue(m_developer_message, json[QString("developerMessage")]);
    m_developer_message_isSet = !json[QString("developerMessage")].isNull() && m_developer_message_isValid;

    m_expected_isValid = ::OpenAPI::fromJsonValue(m_expected, json[QString("expected")]);
    m_expected_isSet = !json[QString("expected")].isNull() && m_expected_isValid;

    m_property_name_isValid = ::OpenAPI::fromJsonValue(m_property_name, json[QString("propertyName")]);
    m_property_name_isSet = !json[QString("propertyName")].isNull() && m_property_name_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIConstraintViolation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConstraintViolation::asJsonObject() const {
    QJsonObject obj;
    if (m_constraint_type_isSet) {
        obj.insert(QString("constraintType"), ::OpenAPI::toJsonValue(m_constraint_type));
    }
    if (m_developer_message_isSet) {
        obj.insert(QString("developerMessage"), ::OpenAPI::toJsonValue(m_developer_message));
    }
    if (m_expected_isSet) {
        obj.insert(QString("expected"), ::OpenAPI::toJsonValue(m_expected));
    }
    if (m_property_name_isSet) {
        obj.insert(QString("propertyName"), ::OpenAPI::toJsonValue(m_property_name));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIConstraintViolation::getConstraintType() const {
    return m_constraint_type;
}
void OAIConstraintViolation::setConstraintType(const QString &constraint_type) {
    m_constraint_type = constraint_type;
    m_constraint_type_isSet = true;
}

bool OAIConstraintViolation::is_constraint_type_Set() const{
    return m_constraint_type_isSet;
}

bool OAIConstraintViolation::is_constraint_type_Valid() const{
    return m_constraint_type_isValid;
}

QString OAIConstraintViolation::getDeveloperMessage() const {
    return m_developer_message;
}
void OAIConstraintViolation::setDeveloperMessage(const QString &developer_message) {
    m_developer_message = developer_message;
    m_developer_message_isSet = true;
}

bool OAIConstraintViolation::is_developer_message_Set() const{
    return m_developer_message_isSet;
}

bool OAIConstraintViolation::is_developer_message_Valid() const{
    return m_developer_message_isValid;
}

QString OAIConstraintViolation::getExpected() const {
    return m_expected;
}
void OAIConstraintViolation::setExpected(const QString &expected) {
    m_expected = expected;
    m_expected_isSet = true;
}

bool OAIConstraintViolation::is_expected_Set() const{
    return m_expected_isSet;
}

bool OAIConstraintViolation::is_expected_Valid() const{
    return m_expected_isValid;
}

QString OAIConstraintViolation::getPropertyName() const {
    return m_property_name;
}
void OAIConstraintViolation::setPropertyName(const QString &property_name) {
    m_property_name = property_name;
    m_property_name_isSet = true;
}

bool OAIConstraintViolation::is_property_name_Set() const{
    return m_property_name_isSet;
}

bool OAIConstraintViolation::is_property_name_Valid() const{
    return m_property_name_isValid;
}

QString OAIConstraintViolation::getValue() const {
    return m_value;
}
void OAIConstraintViolation::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIConstraintViolation::is_value_Set() const{
    return m_value_isSet;
}

bool OAIConstraintViolation::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIConstraintViolation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_constraint_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_developer_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expected_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConstraintViolation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
