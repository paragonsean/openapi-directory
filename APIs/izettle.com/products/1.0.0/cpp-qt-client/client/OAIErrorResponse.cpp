/**
 * Product Library API
 * The Product Library API is used for managing merchant's product information and product images.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErrorResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErrorResponse::OAIErrorResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErrorResponse::OAIErrorResponse() {
    this->initializeModel();
}

OAIErrorResponse::~OAIErrorResponse() {}

void OAIErrorResponse::initializeModel() {

    m_developer_message_isSet = false;
    m_developer_message_isValid = false;

    m_error_type_isSet = false;
    m_error_type_isValid = false;

    m_violations_isSet = false;
    m_violations_isValid = false;
}

void OAIErrorResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIErrorResponse::fromJsonObject(QJsonObject json) {

    m_developer_message_isValid = ::OpenAPI::fromJsonValue(m_developer_message, json[QString("developerMessage")]);
    m_developer_message_isSet = !json[QString("developerMessage")].isNull() && m_developer_message_isValid;

    m_error_type_isValid = ::OpenAPI::fromJsonValue(m_error_type, json[QString("errorType")]);
    m_error_type_isSet = !json[QString("errorType")].isNull() && m_error_type_isValid;

    m_violations_isValid = ::OpenAPI::fromJsonValue(m_violations, json[QString("violations")]);
    m_violations_isSet = !json[QString("violations")].isNull() && m_violations_isValid;
}

QString OAIErrorResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIErrorResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_developer_message_isSet) {
        obj.insert(QString("developerMessage"), ::OpenAPI::toJsonValue(m_developer_message));
    }
    if (m_error_type_isSet) {
        obj.insert(QString("errorType"), ::OpenAPI::toJsonValue(m_error_type));
    }
    if (m_violations.size() > 0) {
        obj.insert(QString("violations"), ::OpenAPI::toJsonValue(m_violations));
    }
    return obj;
}

QString OAIErrorResponse::getDeveloperMessage() const {
    return m_developer_message;
}
void OAIErrorResponse::setDeveloperMessage(const QString &developer_message) {
    m_developer_message = developer_message;
    m_developer_message_isSet = true;
}

bool OAIErrorResponse::is_developer_message_Set() const{
    return m_developer_message_isSet;
}

bool OAIErrorResponse::is_developer_message_Valid() const{
    return m_developer_message_isValid;
}

QString OAIErrorResponse::getErrorType() const {
    return m_error_type;
}
void OAIErrorResponse::setErrorType(const QString &error_type) {
    m_error_type = error_type;
    m_error_type_isSet = true;
}

bool OAIErrorResponse::is_error_type_Set() const{
    return m_error_type_isSet;
}

bool OAIErrorResponse::is_error_type_Valid() const{
    return m_error_type_isValid;
}

QSet<OAIConstraintViolation> OAIErrorResponse::getViolations() const {
    return m_violations;
}
void OAIErrorResponse::setViolations(const QSet<OAIConstraintViolation> &violations) {
    m_violations = violations;
    m_violations_isSet = true;
}

bool OAIErrorResponse::is_violations_Set() const{
    return m_violations_isSet;
}

bool OAIErrorResponse::is_violations_Valid() const{
    return m_violations_isValid;
}

bool OAIErrorResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_developer_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_violations.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIErrorResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
