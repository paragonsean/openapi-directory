/**
 * Product Library API
 * The Product Library API is used for managing merchant's product information and product images.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductCreateRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductCreateRequest::OAIProductCreateRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductCreateRequest::OAIProductCreateRequest() {
    this->initializeModel();
}

OAIProductCreateRequest::~OAIProductCreateRequest() {}

void OAIProductCreateRequest::initializeModel() {

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_create_with_default_tax_isSet = false;
    m_create_with_default_tax_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_external_reference_isSet = false;
    m_external_reference_isValid = false;

    m_image_lookup_keys_isSet = false;
    m_image_lookup_keys_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_online_isSet = false;
    m_online_isValid = false;

    m_presentation_isSet = false;
    m_presentation_isValid = false;

    m_tax_code_isSet = false;
    m_tax_code_isValid = false;

    m_tax_exempt_isSet = false;
    m_tax_exempt_isValid = false;

    m_tax_rates_isSet = false;
    m_tax_rates_isValid = false;

    m_unit_name_isSet = false;
    m_unit_name_isValid = false;

    m_uuid_isSet = false;
    m_uuid_isValid = false;

    m_variant_option_definitions_isSet = false;
    m_variant_option_definitions_isValid = false;

    m_variants_isSet = false;
    m_variants_isValid = false;

    m_vat_percentage_isSet = false;
    m_vat_percentage_isValid = false;
}

void OAIProductCreateRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProductCreateRequest::fromJsonObject(QJsonObject json) {

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("categories")]);
    m_categories_isSet = !json[QString("categories")].isNull() && m_categories_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_create_with_default_tax_isValid = ::OpenAPI::fromJsonValue(m_create_with_default_tax, json[QString("createWithDefaultTax")]);
    m_create_with_default_tax_isSet = !json[QString("createWithDefaultTax")].isNull() && m_create_with_default_tax_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_external_reference_isValid = ::OpenAPI::fromJsonValue(m_external_reference, json[QString("externalReference")]);
    m_external_reference_isSet = !json[QString("externalReference")].isNull() && m_external_reference_isValid;

    m_image_lookup_keys_isValid = ::OpenAPI::fromJsonValue(m_image_lookup_keys, json[QString("imageLookupKeys")]);
    m_image_lookup_keys_isSet = !json[QString("imageLookupKeys")].isNull() && m_image_lookup_keys_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_online_isValid = ::OpenAPI::fromJsonValue(m_online, json[QString("online")]);
    m_online_isSet = !json[QString("online")].isNull() && m_online_isValid;

    m_presentation_isValid = ::OpenAPI::fromJsonValue(m_presentation, json[QString("presentation")]);
    m_presentation_isSet = !json[QString("presentation")].isNull() && m_presentation_isValid;

    m_tax_code_isValid = ::OpenAPI::fromJsonValue(m_tax_code, json[QString("taxCode")]);
    m_tax_code_isSet = !json[QString("taxCode")].isNull() && m_tax_code_isValid;

    m_tax_exempt_isValid = ::OpenAPI::fromJsonValue(m_tax_exempt, json[QString("taxExempt")]);
    m_tax_exempt_isSet = !json[QString("taxExempt")].isNull() && m_tax_exempt_isValid;

    m_tax_rates_isValid = ::OpenAPI::fromJsonValue(m_tax_rates, json[QString("taxRates")]);
    m_tax_rates_isSet = !json[QString("taxRates")].isNull() && m_tax_rates_isValid;

    m_unit_name_isValid = ::OpenAPI::fromJsonValue(m_unit_name, json[QString("unitName")]);
    m_unit_name_isSet = !json[QString("unitName")].isNull() && m_unit_name_isValid;

    m_uuid_isValid = ::OpenAPI::fromJsonValue(m_uuid, json[QString("uuid")]);
    m_uuid_isSet = !json[QString("uuid")].isNull() && m_uuid_isValid;

    m_variant_option_definitions_isValid = ::OpenAPI::fromJsonValue(m_variant_option_definitions, json[QString("variantOptionDefinitions")]);
    m_variant_option_definitions_isSet = !json[QString("variantOptionDefinitions")].isNull() && m_variant_option_definitions_isValid;

    m_variants_isValid = ::OpenAPI::fromJsonValue(m_variants, json[QString("variants")]);
    m_variants_isSet = !json[QString("variants")].isNull() && m_variants_isValid;

    m_vat_percentage_isValid = ::OpenAPI::fromJsonValue(m_vat_percentage, json[QString("vatPercentage")]);
    m_vat_percentage_isSet = !json[QString("vatPercentage")].isNull() && m_vat_percentage_isValid;
}

QString OAIProductCreateRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProductCreateRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_categories.size() > 0) {
        obj.insert(QString("categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_category.isSet()) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_create_with_default_tax_isSet) {
        obj.insert(QString("createWithDefaultTax"), ::OpenAPI::toJsonValue(m_create_with_default_tax));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_external_reference_isSet) {
        obj.insert(QString("externalReference"), ::OpenAPI::toJsonValue(m_external_reference));
    }
    if (m_image_lookup_keys.size() > 0) {
        obj.insert(QString("imageLookupKeys"), ::OpenAPI::toJsonValue(m_image_lookup_keys));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_online.isSet()) {
        obj.insert(QString("online"), ::OpenAPI::toJsonValue(m_online));
    }
    if (m_presentation.isSet()) {
        obj.insert(QString("presentation"), ::OpenAPI::toJsonValue(m_presentation));
    }
    if (m_tax_code_isSet) {
        obj.insert(QString("taxCode"), ::OpenAPI::toJsonValue(m_tax_code));
    }
    if (m_tax_exempt_isSet) {
        obj.insert(QString("taxExempt"), ::OpenAPI::toJsonValue(m_tax_exempt));
    }
    if (m_tax_rates.size() > 0) {
        obj.insert(QString("taxRates"), ::OpenAPI::toJsonValue(m_tax_rates));
    }
    if (m_unit_name_isSet) {
        obj.insert(QString("unitName"), ::OpenAPI::toJsonValue(m_unit_name));
    }
    if (m_uuid_isSet) {
        obj.insert(QString("uuid"), ::OpenAPI::toJsonValue(m_uuid));
    }
    if (m_variant_option_definitions.isSet()) {
        obj.insert(QString("variantOptionDefinitions"), ::OpenAPI::toJsonValue(m_variant_option_definitions));
    }
    if (m_variants.size() > 0) {
        obj.insert(QString("variants"), ::OpenAPI::toJsonValue(m_variants));
    }
    if (m_vat_percentage_isSet) {
        obj.insert(QString("vatPercentage"), ::OpenAPI::toJsonValue(m_vat_percentage));
    }
    return obj;
}

QSet<QString> OAIProductCreateRequest::getCategories() const {
    return m_categories;
}
void OAIProductCreateRequest::setCategories(const QSet<QString> &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAIProductCreateRequest::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAIProductCreateRequest::is_categories_Valid() const{
    return m_categories_isValid;
}

OAICategoryDTO OAIProductCreateRequest::getCategory() const {
    return m_category;
}
void OAIProductCreateRequest::setCategory(const OAICategoryDTO &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIProductCreateRequest::is_category_Set() const{
    return m_category_isSet;
}

bool OAIProductCreateRequest::is_category_Valid() const{
    return m_category_isValid;
}

bool OAIProductCreateRequest::isCreateWithDefaultTax() const {
    return m_create_with_default_tax;
}
void OAIProductCreateRequest::setCreateWithDefaultTax(const bool &create_with_default_tax) {
    m_create_with_default_tax = create_with_default_tax;
    m_create_with_default_tax_isSet = true;
}

bool OAIProductCreateRequest::is_create_with_default_tax_Set() const{
    return m_create_with_default_tax_isSet;
}

bool OAIProductCreateRequest::is_create_with_default_tax_Valid() const{
    return m_create_with_default_tax_isValid;
}

QString OAIProductCreateRequest::getDescription() const {
    return m_description;
}
void OAIProductCreateRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIProductCreateRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAIProductCreateRequest::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIProductCreateRequest::getExternalReference() const {
    return m_external_reference;
}
void OAIProductCreateRequest::setExternalReference(const QString &external_reference) {
    m_external_reference = external_reference;
    m_external_reference_isSet = true;
}

bool OAIProductCreateRequest::is_external_reference_Set() const{
    return m_external_reference_isSet;
}

bool OAIProductCreateRequest::is_external_reference_Valid() const{
    return m_external_reference_isValid;
}

QSet<QString> OAIProductCreateRequest::getImageLookupKeys() const {
    return m_image_lookup_keys;
}
void OAIProductCreateRequest::setImageLookupKeys(const QSet<QString> &image_lookup_keys) {
    m_image_lookup_keys = image_lookup_keys;
    m_image_lookup_keys_isSet = true;
}

bool OAIProductCreateRequest::is_image_lookup_keys_Set() const{
    return m_image_lookup_keys_isSet;
}

bool OAIProductCreateRequest::is_image_lookup_keys_Valid() const{
    return m_image_lookup_keys_isValid;
}

OAIMetadataDTO OAIProductCreateRequest::getMetadata() const {
    return m_metadata;
}
void OAIProductCreateRequest::setMetadata(const OAIMetadataDTO &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIProductCreateRequest::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIProductCreateRequest::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIProductCreateRequest::getName() const {
    return m_name;
}
void OAIProductCreateRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProductCreateRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProductCreateRequest::is_name_Valid() const{
    return m_name_isValid;
}

OAIOnlineProperties OAIProductCreateRequest::getOnline() const {
    return m_online;
}
void OAIProductCreateRequest::setOnline(const OAIOnlineProperties &online) {
    m_online = online;
    m_online_isSet = true;
}

bool OAIProductCreateRequest::is_online_Set() const{
    return m_online_isSet;
}

bool OAIProductCreateRequest::is_online_Valid() const{
    return m_online_isValid;
}

OAIPresentationDTO OAIProductCreateRequest::getPresentation() const {
    return m_presentation;
}
void OAIProductCreateRequest::setPresentation(const OAIPresentationDTO &presentation) {
    m_presentation = presentation;
    m_presentation_isSet = true;
}

bool OAIProductCreateRequest::is_presentation_Set() const{
    return m_presentation_isSet;
}

bool OAIProductCreateRequest::is_presentation_Valid() const{
    return m_presentation_isValid;
}

QString OAIProductCreateRequest::getTaxCode() const {
    return m_tax_code;
}
void OAIProductCreateRequest::setTaxCode(const QString &tax_code) {
    m_tax_code = tax_code;
    m_tax_code_isSet = true;
}

bool OAIProductCreateRequest::is_tax_code_Set() const{
    return m_tax_code_isSet;
}

bool OAIProductCreateRequest::is_tax_code_Valid() const{
    return m_tax_code_isValid;
}

bool OAIProductCreateRequest::isTaxExempt() const {
    return m_tax_exempt;
}
void OAIProductCreateRequest::setTaxExempt(const bool &tax_exempt) {
    m_tax_exempt = tax_exempt;
    m_tax_exempt_isSet = true;
}

bool OAIProductCreateRequest::is_tax_exempt_Set() const{
    return m_tax_exempt_isSet;
}

bool OAIProductCreateRequest::is_tax_exempt_Valid() const{
    return m_tax_exempt_isValid;
}

QSet<QString> OAIProductCreateRequest::getTaxRates() const {
    return m_tax_rates;
}
void OAIProductCreateRequest::setTaxRates(const QSet<QString> &tax_rates) {
    m_tax_rates = tax_rates;
    m_tax_rates_isSet = true;
}

bool OAIProductCreateRequest::is_tax_rates_Set() const{
    return m_tax_rates_isSet;
}

bool OAIProductCreateRequest::is_tax_rates_Valid() const{
    return m_tax_rates_isValid;
}

QString OAIProductCreateRequest::getUnitName() const {
    return m_unit_name;
}
void OAIProductCreateRequest::setUnitName(const QString &unit_name) {
    m_unit_name = unit_name;
    m_unit_name_isSet = true;
}

bool OAIProductCreateRequest::is_unit_name_Set() const{
    return m_unit_name_isSet;
}

bool OAIProductCreateRequest::is_unit_name_Valid() const{
    return m_unit_name_isValid;
}

QString OAIProductCreateRequest::getUuid() const {
    return m_uuid;
}
void OAIProductCreateRequest::setUuid(const QString &uuid) {
    m_uuid = uuid;
    m_uuid_isSet = true;
}

bool OAIProductCreateRequest::is_uuid_Set() const{
    return m_uuid_isSet;
}

bool OAIProductCreateRequest::is_uuid_Valid() const{
    return m_uuid_isValid;
}

OAIVariantOptionDefinitions OAIProductCreateRequest::getVariantOptionDefinitions() const {
    return m_variant_option_definitions;
}
void OAIProductCreateRequest::setVariantOptionDefinitions(const OAIVariantOptionDefinitions &variant_option_definitions) {
    m_variant_option_definitions = variant_option_definitions;
    m_variant_option_definitions_isSet = true;
}

bool OAIProductCreateRequest::is_variant_option_definitions_Set() const{
    return m_variant_option_definitions_isSet;
}

bool OAIProductCreateRequest::is_variant_option_definitions_Valid() const{
    return m_variant_option_definitions_isValid;
}

QList<OAIVariantDTO> OAIProductCreateRequest::getVariants() const {
    return m_variants;
}
void OAIProductCreateRequest::setVariants(const QList<OAIVariantDTO> &variants) {
    m_variants = variants;
    m_variants_isSet = true;
}

bool OAIProductCreateRequest::is_variants_Set() const{
    return m_variants_isSet;
}

bool OAIProductCreateRequest::is_variants_Valid() const{
    return m_variants_isValid;
}

double OAIProductCreateRequest::getVatPercentage() const {
    return m_vat_percentage;
}
void OAIProductCreateRequest::setVatPercentage(const double &vat_percentage) {
    m_vat_percentage = vat_percentage;
    m_vat_percentage_isSet = true;
}

bool OAIProductCreateRequest::is_vat_percentage_Set() const{
    return m_vat_percentage_isSet;
}

bool OAIProductCreateRequest::is_vat_percentage_Valid() const{
    return m_vat_percentage_isValid;
}

bool OAIProductCreateRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_with_default_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_lookup_keys.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_online.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_presentation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_exempt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_rates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variant_option_definitions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_variants.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProductCreateRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_uuid_isValid && true;
}

} // namespace OpenAPI
