/**
 * Product Library API
 * The Product Library API is used for managing merchant's product information and product images.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDiscountsApi_H
#define OAI_OAIDiscountsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDiscountRequest.h"
#include "OAIDiscountResponse.h"
#include "OAIErrorResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDiscountsApi : public QObject {
    Q_OBJECT

public:
    OAIDiscountsApi(const int timeOut = 0);
    ~OAIDiscountsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  organization_uuid QString [required]
    * @param[in]  oai_discount_request OAIDiscountRequest [optional]
    */
    virtual void createDiscount(const QString &organization_uuid, const ::OpenAPI::OptionalParam<OAIDiscountRequest> &oai_discount_request = ::OpenAPI::OptionalParam<OAIDiscountRequest>());

    /**
    * @param[in]  organization_uuid QString [required]
    * @param[in]  discount_uuid QString [required]
    */
    virtual void deleteDiscount(const QString &organization_uuid, const QString &discount_uuid);

    /**
    * @param[in]  organization_uuid QString [required]
    */
    virtual void getAllDiscounts(const QString &organization_uuid);

    /**
    * @param[in]  organization_uuid QString [required]
    * @param[in]  discount_uuid QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getDiscount(const QString &organization_uuid, const QString &discount_uuid, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  organization_uuid QString [required]
    * @param[in]  discount_uuid QString [required]
    * @param[in]  oai_discount_request OAIDiscountRequest [required]
    * @param[in]  if_match QString [optional]
    */
    virtual void updateDiscount(const QString &organization_uuid, const QString &discount_uuid, const OAIDiscountRequest &oai_discount_request, const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createDiscountCallback(OAIHttpRequestWorker *worker);
    void deleteDiscountCallback(OAIHttpRequestWorker *worker);
    void getAllDiscountsCallback(OAIHttpRequestWorker *worker);
    void getDiscountCallback(OAIHttpRequestWorker *worker);
    void updateDiscountCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createDiscountSignal();
    void deleteDiscountSignal();
    void getAllDiscountsSignal(QList<OAIDiscountResponse> summary);
    void getDiscountSignal(OAIDiscountResponse summary);
    void updateDiscountSignal();


    void createDiscountSignalFull(OAIHttpRequestWorker *worker);
    void deleteDiscountSignalFull(OAIHttpRequestWorker *worker);
    void getAllDiscountsSignalFull(OAIHttpRequestWorker *worker, QList<OAIDiscountResponse> summary);
    void getDiscountSignalFull(OAIHttpRequestWorker *worker, OAIDiscountResponse summary);
    void updateDiscountSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use createDiscountSignalError() instead")
    void createDiscountSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createDiscountSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDiscountSignalError() instead")
    void deleteDiscountSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDiscountSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllDiscountsSignalError() instead")
    void getAllDiscountsSignalE(QList<OAIDiscountResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllDiscountsSignalError(QList<OAIDiscountResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDiscountSignalError() instead")
    void getDiscountSignalE(OAIDiscountResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDiscountSignalError(OAIDiscountResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDiscountSignalError() instead")
    void updateDiscountSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateDiscountSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createDiscountSignalErrorFull() instead")
    void createDiscountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createDiscountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDiscountSignalErrorFull() instead")
    void deleteDiscountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDiscountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllDiscountsSignalErrorFull() instead")
    void getAllDiscountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllDiscountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDiscountSignalErrorFull() instead")
    void getDiscountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDiscountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDiscountSignalErrorFull() instead")
    void updateDiscountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDiscountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
