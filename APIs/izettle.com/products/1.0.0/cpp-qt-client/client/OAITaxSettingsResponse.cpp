/**
 * Product Library API
 * The Product Library API is used for managing merchant's product information and product images.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITaxSettingsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITaxSettingsResponse::OAITaxSettingsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITaxSettingsResponse::OAITaxSettingsResponse() {
    this->initializeModel();
}

OAITaxSettingsResponse::~OAITaxSettingsResponse() {}

void OAITaxSettingsResponse::initializeModel() {

    m_organization_uuid_isSet = false;
    m_organization_uuid_isValid = false;

    m_taxation_mode_isSet = false;
    m_taxation_mode_isValid = false;

    m_taxation_type_isSet = false;
    m_taxation_type_isValid = false;
}

void OAITaxSettingsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITaxSettingsResponse::fromJsonObject(QJsonObject json) {

    m_organization_uuid_isValid = ::OpenAPI::fromJsonValue(m_organization_uuid, json[QString("organizationUuid")]);
    m_organization_uuid_isSet = !json[QString("organizationUuid")].isNull() && m_organization_uuid_isValid;

    m_taxation_mode_isValid = ::OpenAPI::fromJsonValue(m_taxation_mode, json[QString("taxationMode")]);
    m_taxation_mode_isSet = !json[QString("taxationMode")].isNull() && m_taxation_mode_isValid;

    m_taxation_type_isValid = ::OpenAPI::fromJsonValue(m_taxation_type, json[QString("taxationType")]);
    m_taxation_type_isSet = !json[QString("taxationType")].isNull() && m_taxation_type_isValid;
}

QString OAITaxSettingsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITaxSettingsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_organization_uuid_isSet) {
        obj.insert(QString("organizationUuid"), ::OpenAPI::toJsonValue(m_organization_uuid));
    }
    if (m_taxation_mode_isSet) {
        obj.insert(QString("taxationMode"), ::OpenAPI::toJsonValue(m_taxation_mode));
    }
    if (m_taxation_type_isSet) {
        obj.insert(QString("taxationType"), ::OpenAPI::toJsonValue(m_taxation_type));
    }
    return obj;
}

QString OAITaxSettingsResponse::getOrganizationUuid() const {
    return m_organization_uuid;
}
void OAITaxSettingsResponse::setOrganizationUuid(const QString &organization_uuid) {
    m_organization_uuid = organization_uuid;
    m_organization_uuid_isSet = true;
}

bool OAITaxSettingsResponse::is_organization_uuid_Set() const{
    return m_organization_uuid_isSet;
}

bool OAITaxSettingsResponse::is_organization_uuid_Valid() const{
    return m_organization_uuid_isValid;
}

QString OAITaxSettingsResponse::getTaxationMode() const {
    return m_taxation_mode;
}
void OAITaxSettingsResponse::setTaxationMode(const QString &taxation_mode) {
    m_taxation_mode = taxation_mode;
    m_taxation_mode_isSet = true;
}

bool OAITaxSettingsResponse::is_taxation_mode_Set() const{
    return m_taxation_mode_isSet;
}

bool OAITaxSettingsResponse::is_taxation_mode_Valid() const{
    return m_taxation_mode_isValid;
}

QString OAITaxSettingsResponse::getTaxationType() const {
    return m_taxation_type;
}
void OAITaxSettingsResponse::setTaxationType(const QString &taxation_type) {
    m_taxation_type = taxation_type;
    m_taxation_type_isSet = true;
}

bool OAITaxSettingsResponse::is_taxation_type_Set() const{
    return m_taxation_type_isSet;
}

bool OAITaxSettingsResponse::is_taxation_type_Valid() const{
    return m_taxation_type_isValid;
}

bool OAITaxSettingsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_organization_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_taxation_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_taxation_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITaxSettingsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
