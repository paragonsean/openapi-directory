/**
 * Product Library API
 * The Product Library API is used for managing merchant's product information and product images.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShipping.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShipping::OAIShipping(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShipping::OAIShipping() {
    this->initializeModel();
}

OAIShipping::~OAIShipping() {}

void OAIShipping::initializeModel() {

    m_shipping_pricing_model_isSet = false;
    m_shipping_pricing_model_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;

    m_weight_in_grams_isSet = false;
    m_weight_in_grams_isValid = false;
}

void OAIShipping::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShipping::fromJsonObject(QJsonObject json) {

    m_shipping_pricing_model_isValid = ::OpenAPI::fromJsonValue(m_shipping_pricing_model, json[QString("shippingPricingModel")]);
    m_shipping_pricing_model_isSet = !json[QString("shippingPricingModel")].isNull() && m_shipping_pricing_model_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("weight")]);
    m_weight_isSet = !json[QString("weight")].isNull() && m_weight_isValid;

    m_weight_in_grams_isValid = ::OpenAPI::fromJsonValue(m_weight_in_grams, json[QString("weightInGrams")]);
    m_weight_in_grams_isSet = !json[QString("weightInGrams")].isNull() && m_weight_in_grams_isValid;
}

QString OAIShipping::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShipping::asJsonObject() const {
    QJsonObject obj;
    if (m_shipping_pricing_model_isSet) {
        obj.insert(QString("shippingPricingModel"), ::OpenAPI::toJsonValue(m_shipping_pricing_model));
    }
    if (m_weight.isSet()) {
        obj.insert(QString("weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    if (m_weight_in_grams_isSet) {
        obj.insert(QString("weightInGrams"), ::OpenAPI::toJsonValue(m_weight_in_grams));
    }
    return obj;
}

QString OAIShipping::getShippingPricingModel() const {
    return m_shipping_pricing_model;
}
void OAIShipping::setShippingPricingModel(const QString &shipping_pricing_model) {
    m_shipping_pricing_model = shipping_pricing_model;
    m_shipping_pricing_model_isSet = true;
}

bool OAIShipping::is_shipping_pricing_model_Set() const{
    return m_shipping_pricing_model_isSet;
}

bool OAIShipping::is_shipping_pricing_model_Valid() const{
    return m_shipping_pricing_model_isValid;
}

OAIWeight OAIShipping::getWeight() const {
    return m_weight;
}
void OAIShipping::setWeight(const OAIWeight &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAIShipping::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAIShipping::is_weight_Valid() const{
    return m_weight_isValid;
}

qint64 OAIShipping::getWeightInGrams() const {
    return m_weight_in_grams;
}
void OAIShipping::setWeightInGrams(const qint64 &weight_in_grams) {
    m_weight_in_grams = weight_in_grams;
    m_weight_in_grams_isSet = true;
}

bool OAIShipping::is_weight_in_grams_Set() const{
    return m_weight_in_grams_isSet;
}

bool OAIShipping::is_weight_in_grams_Valid() const{
    return m_weight_in_grams_isValid;
}

bool OAIShipping::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_shipping_pricing_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_in_grams_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShipping::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
