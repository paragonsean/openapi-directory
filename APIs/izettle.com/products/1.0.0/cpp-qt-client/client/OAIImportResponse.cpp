/**
 * Product Library API
 * The Product Library API is used for managing merchant's product information and product images.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImportResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImportResponse::OAIImportResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImportResponse::OAIImportResponse() {
    this->initializeModel();
}

OAIImportResponse::~OAIImportResponse() {}

void OAIImportResponse::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_finished_isSet = false;
    m_finished_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_uuid_isSet = false;
    m_uuid_isValid = false;
}

void OAIImportResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImportResponse::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("errorMessage")]);
    m_error_message_isSet = !json[QString("errorMessage")].isNull() && m_error_message_isValid;

    m_finished_isValid = ::OpenAPI::fromJsonValue(m_finished, json[QString("finished")]);
    m_finished_isSet = !json[QString("finished")].isNull() && m_finished_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_uuid_isValid = ::OpenAPI::fromJsonValue(m_uuid, json[QString("uuid")]);
    m_uuid_isSet = !json[QString("uuid")].isNull() && m_uuid_isValid;
}

QString OAIImportResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImportResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("errorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_finished_isSet) {
        obj.insert(QString("finished"), ::OpenAPI::toJsonValue(m_finished));
    }
    if (m_items_isSet) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_uuid_isSet) {
        obj.insert(QString("uuid"), ::OpenAPI::toJsonValue(m_uuid));
    }
    return obj;
}

QDateTime OAIImportResponse::getCreated() const {
    return m_created;
}
void OAIImportResponse::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIImportResponse::is_created_Set() const{
    return m_created_isSet;
}

bool OAIImportResponse::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIImportResponse::getErrorMessage() const {
    return m_error_message;
}
void OAIImportResponse::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIImportResponse::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIImportResponse::is_error_message_Valid() const{
    return m_error_message_isValid;
}

QDateTime OAIImportResponse::getFinished() const {
    return m_finished;
}
void OAIImportResponse::setFinished(const QDateTime &finished) {
    m_finished = finished;
    m_finished_isSet = true;
}

bool OAIImportResponse::is_finished_Set() const{
    return m_finished_isSet;
}

bool OAIImportResponse::is_finished_Valid() const{
    return m_finished_isValid;
}

qint64 OAIImportResponse::getItems() const {
    return m_items;
}
void OAIImportResponse::setItems(const qint64 &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIImportResponse::is_items_Set() const{
    return m_items_isSet;
}

bool OAIImportResponse::is_items_Valid() const{
    return m_items_isValid;
}

QString OAIImportResponse::getState() const {
    return m_state;
}
void OAIImportResponse::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIImportResponse::is_state_Set() const{
    return m_state_isSet;
}

bool OAIImportResponse::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIImportResponse::getUuid() const {
    return m_uuid;
}
void OAIImportResponse::setUuid(const QString &uuid) {
    m_uuid = uuid;
    m_uuid_isSet = true;
}

bool OAIImportResponse::is_uuid_Set() const{
    return m_uuid_isSet;
}

bool OAIImportResponse::is_uuid_Valid() const{
    return m_uuid_isValid;
}

bool OAIImportResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_finished_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImportResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
