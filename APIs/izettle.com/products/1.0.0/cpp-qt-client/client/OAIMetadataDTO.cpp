/**
 * Product Library API
 * The Product Library API is used for managing merchant's product information and product images.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetadataDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetadataDTO::OAIMetadataDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetadataDTO::OAIMetadataDTO() {
    this->initializeModel();
}

OAIMetadataDTO::~OAIMetadataDTO() {}

void OAIMetadataDTO::initializeModel() {

    m_in_pos_isSet = false;
    m_in_pos_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;
}

void OAIMetadataDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetadataDTO::fromJsonObject(QJsonObject json) {

    m_in_pos_isValid = ::OpenAPI::fromJsonValue(m_in_pos, json[QString("inPos")]);
    m_in_pos_isSet = !json[QString("inPos")].isNull() && m_in_pos_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;
}

QString OAIMetadataDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetadataDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_in_pos_isSet) {
        obj.insert(QString("inPos"), ::OpenAPI::toJsonValue(m_in_pos));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    return obj;
}

bool OAIMetadataDTO::isInPos() const {
    return m_in_pos;
}
void OAIMetadataDTO::setInPos(const bool &in_pos) {
    m_in_pos = in_pos;
    m_in_pos_isSet = true;
}

bool OAIMetadataDTO::is_in_pos_Set() const{
    return m_in_pos_isSet;
}

bool OAIMetadataDTO::is_in_pos_Valid() const{
    return m_in_pos_isValid;
}

OAISourceDTO OAIMetadataDTO::getSource() const {
    return m_source;
}
void OAIMetadataDTO::setSource(const OAISourceDTO &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIMetadataDTO::is_source_Set() const{
    return m_source_isSet;
}

bool OAIMetadataDTO::is_source_Valid() const{
    return m_source_isValid;
}

bool OAIMetadataDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_in_pos_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetadataDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_in_pos_isValid && true;
}

} // namespace OpenAPI
