/**
 * Product Library API
 * The Product Library API is used for managing merchant's product information and product images.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPresentation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPresentation::OAIPresentation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPresentation::OAIPresentation() {
    this->initializeModel();
}

OAIPresentation::~OAIPresentation() {}

void OAIPresentation::initializeModel() {

    m_additional_image_urls_isSet = false;
    m_additional_image_urls_isValid = false;

    m_display_image_url_isSet = false;
    m_display_image_url_isValid = false;

    m_media_urls_isSet = false;
    m_media_urls_isValid = false;
}

void OAIPresentation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPresentation::fromJsonObject(QJsonObject json) {

    m_additional_image_urls_isValid = ::OpenAPI::fromJsonValue(m_additional_image_urls, json[QString("additionalImageUrls")]);
    m_additional_image_urls_isSet = !json[QString("additionalImageUrls")].isNull() && m_additional_image_urls_isValid;

    m_display_image_url_isValid = ::OpenAPI::fromJsonValue(m_display_image_url, json[QString("displayImageUrl")]);
    m_display_image_url_isSet = !json[QString("displayImageUrl")].isNull() && m_display_image_url_isValid;

    m_media_urls_isValid = ::OpenAPI::fromJsonValue(m_media_urls, json[QString("mediaUrls")]);
    m_media_urls_isSet = !json[QString("mediaUrls")].isNull() && m_media_urls_isValid;
}

QString OAIPresentation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPresentation::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_image_urls.size() > 0) {
        obj.insert(QString("additionalImageUrls"), ::OpenAPI::toJsonValue(m_additional_image_urls));
    }
    if (m_display_image_url_isSet) {
        obj.insert(QString("displayImageUrl"), ::OpenAPI::toJsonValue(m_display_image_url));
    }
    if (m_media_urls.size() > 0) {
        obj.insert(QString("mediaUrls"), ::OpenAPI::toJsonValue(m_media_urls));
    }
    return obj;
}

QList<QString> OAIPresentation::getAdditionalImageUrls() const {
    return m_additional_image_urls;
}
void OAIPresentation::setAdditionalImageUrls(const QList<QString> &additional_image_urls) {
    m_additional_image_urls = additional_image_urls;
    m_additional_image_urls_isSet = true;
}

bool OAIPresentation::is_additional_image_urls_Set() const{
    return m_additional_image_urls_isSet;
}

bool OAIPresentation::is_additional_image_urls_Valid() const{
    return m_additional_image_urls_isValid;
}

QString OAIPresentation::getDisplayImageUrl() const {
    return m_display_image_url;
}
void OAIPresentation::setDisplayImageUrl(const QString &display_image_url) {
    m_display_image_url = display_image_url;
    m_display_image_url_isSet = true;
}

bool OAIPresentation::is_display_image_url_Set() const{
    return m_display_image_url_isSet;
}

bool OAIPresentation::is_display_image_url_Valid() const{
    return m_display_image_url_isValid;
}

QList<QString> OAIPresentation::getMediaUrls() const {
    return m_media_urls;
}
void OAIPresentation::setMediaUrls(const QList<QString> &media_urls) {
    m_media_urls = media_urls;
    m_media_urls_isSet = true;
}

bool OAIPresentation::is_media_urls_Set() const{
    return m_media_urls_isSet;
}

bool OAIPresentation::is_media_urls_Valid() const{
    return m_media_urls_isValid;
}

bool OAIPresentation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_image_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPresentation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
