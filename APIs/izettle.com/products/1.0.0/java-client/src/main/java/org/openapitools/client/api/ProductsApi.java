/*
 * Product Library API
 * The Product Library API is used for managing merchant's product information and product images.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.FullProductUpdateRequest;
import org.openapitools.client.model.ProductCountResponse;
import org.openapitools.client.model.ProductCreateRequest;
import org.openapitools.client.model.ProductResponse;
import java.util.UUID;
import org.openapitools.client.model.VariantOptionsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProductsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProductsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProductsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for countAllProducts
     * @param organizationUuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of existing products </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call countAllProductsCall(UUID organizationUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationUuid}/products/v2/count"
            .replace("{" + "organizationUuid" + "}", localVarApiClient.escapeString(organizationUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ZettleOauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call countAllProductsValidateBeforeCall(UUID organizationUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationUuid' is set
        if (organizationUuid == null) {
            throw new ApiException("Missing the required parameter 'organizationUuid' when calling countAllProducts(Async)");
        }

        return countAllProductsCall(organizationUuid, _callback);

    }

    /**
     * Retrieve the count of existing products
     * 
     * @param organizationUuid  (required)
     * @return List&lt;ProductCountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of existing products </td><td>  -  </td></tr>
     </table>
     */
    public List<ProductCountResponse> countAllProducts(UUID organizationUuid) throws ApiException {
        ApiResponse<List<ProductCountResponse>> localVarResp = countAllProductsWithHttpInfo(organizationUuid);
        return localVarResp.getData();
    }

    /**
     * Retrieve the count of existing products
     * 
     * @param organizationUuid  (required)
     * @return ApiResponse&lt;List&lt;ProductCountResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of existing products </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProductCountResponse>> countAllProductsWithHttpInfo(UUID organizationUuid) throws ApiException {
        okhttp3.Call localVarCall = countAllProductsValidateBeforeCall(organizationUuid, null);
        Type localVarReturnType = new TypeToken<List<ProductCountResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve the count of existing products (asynchronously)
     * 
     * @param organizationUuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of existing products </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call countAllProductsAsync(UUID organizationUuid, final ApiCallback<List<ProductCountResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = countAllProductsValidateBeforeCall(organizationUuid, _callback);
        Type localVarReturnType = new TypeToken<List<ProductCountResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createProduct
     * @param organizationUuid  (required)
     * @param productCreateRequest  (required)
     * @param returnEntity  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Product created. It will include the Product in the response only if &#39;returnEntity&#39; is true </td><td>  * ETag - ETag value <br>  * Location - Location of updated product <br>  </td></tr>
     </table>
     */
    public okhttp3.Call createProductCall(UUID organizationUuid, ProductCreateRequest productCreateRequest, Boolean returnEntity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productCreateRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationUuid}/products"
            .replace("{" + "organizationUuid" + "}", localVarApiClient.escapeString(organizationUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (returnEntity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("returnEntity", returnEntity));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ZettleOauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createProductValidateBeforeCall(UUID organizationUuid, ProductCreateRequest productCreateRequest, Boolean returnEntity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationUuid' is set
        if (organizationUuid == null) {
            throw new ApiException("Missing the required parameter 'organizationUuid' when calling createProduct(Async)");
        }

        // verify the required parameter 'productCreateRequest' is set
        if (productCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'productCreateRequest' when calling createProduct(Async)");
        }

        return createProductCall(organizationUuid, productCreateRequest, returnEntity, _callback);

    }

    /**
     * Create a new product
     * 
     * @param organizationUuid  (required)
     * @param productCreateRequest  (required)
     * @param returnEntity  (optional, default to false)
     * @return ProductResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Product created. It will include the Product in the response only if &#39;returnEntity&#39; is true </td><td>  * ETag - ETag value <br>  * Location - Location of updated product <br>  </td></tr>
     </table>
     */
    public ProductResponse createProduct(UUID organizationUuid, ProductCreateRequest productCreateRequest, Boolean returnEntity) throws ApiException {
        ApiResponse<ProductResponse> localVarResp = createProductWithHttpInfo(organizationUuid, productCreateRequest, returnEntity);
        return localVarResp.getData();
    }

    /**
     * Create a new product
     * 
     * @param organizationUuid  (required)
     * @param productCreateRequest  (required)
     * @param returnEntity  (optional, default to false)
     * @return ApiResponse&lt;ProductResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Product created. It will include the Product in the response only if &#39;returnEntity&#39; is true </td><td>  * ETag - ETag value <br>  * Location - Location of updated product <br>  </td></tr>
     </table>
     */
    public ApiResponse<ProductResponse> createProductWithHttpInfo(UUID organizationUuid, ProductCreateRequest productCreateRequest, Boolean returnEntity) throws ApiException {
        okhttp3.Call localVarCall = createProductValidateBeforeCall(organizationUuid, productCreateRequest, returnEntity, null);
        Type localVarReturnType = new TypeToken<ProductResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new product (asynchronously)
     * 
     * @param organizationUuid  (required)
     * @param productCreateRequest  (required)
     * @param returnEntity  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Product created. It will include the Product in the response only if &#39;returnEntity&#39; is true </td><td>  * ETag - ETag value <br>  * Location - Location of updated product <br>  </td></tr>
     </table>
     */
    public okhttp3.Call createProductAsync(UUID organizationUuid, ProductCreateRequest productCreateRequest, Boolean returnEntity, final ApiCallback<ProductResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createProductValidateBeforeCall(organizationUuid, productCreateRequest, returnEntity, _callback);
        Type localVarReturnType = new TypeToken<ProductResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteProduct
     * @param organizationUuid  (required)
     * @param productUuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Product deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organization or Product not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProductCall(UUID organizationUuid, UUID productUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationUuid}/products/{productUuid}"
            .replace("{" + "organizationUuid" + "}", localVarApiClient.escapeString(organizationUuid.toString()))
            .replace("{" + "productUuid" + "}", localVarApiClient.escapeString(productUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ZettleOauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProductValidateBeforeCall(UUID organizationUuid, UUID productUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationUuid' is set
        if (organizationUuid == null) {
            throw new ApiException("Missing the required parameter 'organizationUuid' when calling deleteProduct(Async)");
        }

        // verify the required parameter 'productUuid' is set
        if (productUuid == null) {
            throw new ApiException("Missing the required parameter 'productUuid' when calling deleteProduct(Async)");
        }

        return deleteProductCall(organizationUuid, productUuid, _callback);

    }

    /**
     * Delete a single product
     * 
     * @param organizationUuid  (required)
     * @param productUuid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Product deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organization or Product not found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteProduct(UUID organizationUuid, UUID productUuid) throws ApiException {
        deleteProductWithHttpInfo(organizationUuid, productUuid);
    }

    /**
     * Delete a single product
     * 
     * @param organizationUuid  (required)
     * @param productUuid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Product deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organization or Product not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteProductWithHttpInfo(UUID organizationUuid, UUID productUuid) throws ApiException {
        okhttp3.Call localVarCall = deleteProductValidateBeforeCall(organizationUuid, productUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a single product (asynchronously)
     * 
     * @param organizationUuid  (required)
     * @param productUuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Product deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organization or Product not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProductAsync(UUID organizationUuid, UUID productUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProductValidateBeforeCall(organizationUuid, productUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteProducts
     * @param organizationUuid  (required)
     * @param uuid List of product UUIDs to be deleted (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Products deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProductsCall(UUID organizationUuid, List<UUID> uuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationUuid}/products"
            .replace("{" + "organizationUuid" + "}", localVarApiClient.escapeString(organizationUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (uuid != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "uuid", uuid));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ZettleOauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProductsValidateBeforeCall(UUID organizationUuid, List<UUID> uuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationUuid' is set
        if (organizationUuid == null) {
            throw new ApiException("Missing the required parameter 'organizationUuid' when calling deleteProducts(Async)");
        }

        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteProducts(Async)");
        }

        return deleteProductsCall(organizationUuid, uuid, _callback);

    }

    /**
     * Delete a list of products
     * 
     * @param organizationUuid  (required)
     * @param uuid List of product UUIDs to be deleted (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Products deleted </td><td>  -  </td></tr>
     </table>
     */
    public void deleteProducts(UUID organizationUuid, List<UUID> uuid) throws ApiException {
        deleteProductsWithHttpInfo(organizationUuid, uuid);
    }

    /**
     * Delete a list of products
     * 
     * @param organizationUuid  (required)
     * @param uuid List of product UUIDs to be deleted (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Products deleted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteProductsWithHttpInfo(UUID organizationUuid, List<UUID> uuid) throws ApiException {
        okhttp3.Call localVarCall = deleteProductsValidateBeforeCall(organizationUuid, uuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a list of products (asynchronously)
     * 
     * @param organizationUuid  (required)
     * @param uuid List of product UUIDs to be deleted (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Products deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProductsAsync(UUID organizationUuid, List<UUID> uuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProductsValidateBeforeCall(organizationUuid, uuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllOptions
     * @param organizationUuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Options </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllOptionsCall(UUID organizationUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationUuid}/products/options"
            .replace("{" + "organizationUuid" + "}", localVarApiClient.escapeString(organizationUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ZettleOauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllOptionsValidateBeforeCall(UUID organizationUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationUuid' is set
        if (organizationUuid == null) {
            throw new ApiException("Missing the required parameter 'organizationUuid' when calling getAllOptions(Async)");
        }

        return getAllOptionsCall(organizationUuid, _callback);

    }

    /**
     * Retrieve an aggregate of active Options in the library
     * 
     * @param organizationUuid  (required)
     * @return List&lt;VariantOptionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Options </td><td>  -  </td></tr>
     </table>
     */
    public List<VariantOptionsResponse> getAllOptions(UUID organizationUuid) throws ApiException {
        ApiResponse<List<VariantOptionsResponse>> localVarResp = getAllOptionsWithHttpInfo(organizationUuid);
        return localVarResp.getData();
    }

    /**
     * Retrieve an aggregate of active Options in the library
     * 
     * @param organizationUuid  (required)
     * @return ApiResponse&lt;List&lt;VariantOptionsResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Options </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<VariantOptionsResponse>> getAllOptionsWithHttpInfo(UUID organizationUuid) throws ApiException {
        okhttp3.Call localVarCall = getAllOptionsValidateBeforeCall(organizationUuid, null);
        Type localVarReturnType = new TypeToken<List<VariantOptionsResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an aggregate of active Options in the library (asynchronously)
     * 
     * @param organizationUuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Options </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllOptionsAsync(UUID organizationUuid, final ApiCallback<List<VariantOptionsResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllOptionsValidateBeforeCall(organizationUuid, _callback);
        Type localVarReturnType = new TypeToken<List<VariantOptionsResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllProductsInPos
     * @param organizationUuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of products </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllProductsInPosCall(UUID organizationUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationUuid}/products"
            .replace("{" + "organizationUuid" + "}", localVarApiClient.escapeString(organizationUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ZettleOauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllProductsInPosValidateBeforeCall(UUID organizationUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationUuid' is set
        if (organizationUuid == null) {
            throw new ApiException("Missing the required parameter 'organizationUuid' when calling getAllProductsInPos(Async)");
        }

        return getAllProductsInPosCall(organizationUuid, _callback);

    }

    /**
     * Retrieve all products visible in POS
     * 
     * @param organizationUuid  (required)
     * @return List&lt;ProductResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of products </td><td>  -  </td></tr>
     </table>
     */
    public List<ProductResponse> getAllProductsInPos(UUID organizationUuid) throws ApiException {
        ApiResponse<List<ProductResponse>> localVarResp = getAllProductsInPosWithHttpInfo(organizationUuid);
        return localVarResp.getData();
    }

    /**
     * Retrieve all products visible in POS
     * 
     * @param organizationUuid  (required)
     * @return ApiResponse&lt;List&lt;ProductResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of products </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProductResponse>> getAllProductsInPosWithHttpInfo(UUID organizationUuid) throws ApiException {
        okhttp3.Call localVarCall = getAllProductsInPosValidateBeforeCall(organizationUuid, null);
        Type localVarReturnType = new TypeToken<List<ProductResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve all products visible in POS (asynchronously)
     * 
     * @param organizationUuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of products </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllProductsInPosAsync(UUID organizationUuid, final ApiCallback<List<ProductResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllProductsInPosValidateBeforeCall(organizationUuid, _callback);
        Type localVarReturnType = new TypeToken<List<ProductResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllProductsV2
     * @param organizationUuid  (required)
     * @param sort If true, sorts response by created date (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of products </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllProductsV2Call(UUID organizationUuid, Boolean sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationUuid}/products/v2"
            .replace("{" + "organizationUuid" + "}", localVarApiClient.escapeString(organizationUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ZettleOauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllProductsV2ValidateBeforeCall(UUID organizationUuid, Boolean sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationUuid' is set
        if (organizationUuid == null) {
            throw new ApiException("Missing the required parameter 'organizationUuid' when calling getAllProductsV2(Async)");
        }

        return getAllProductsV2Call(organizationUuid, sort, _callback);

    }

    /**
     * Retrieve all products visible in POS – v2
     * 
     * @param organizationUuid  (required)
     * @param sort If true, sorts response by created date (optional)
     * @return List&lt;ProductResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of products </td><td>  -  </td></tr>
     </table>
     */
    public List<ProductResponse> getAllProductsV2(UUID organizationUuid, Boolean sort) throws ApiException {
        ApiResponse<List<ProductResponse>> localVarResp = getAllProductsV2WithHttpInfo(organizationUuid, sort);
        return localVarResp.getData();
    }

    /**
     * Retrieve all products visible in POS – v2
     * 
     * @param organizationUuid  (required)
     * @param sort If true, sorts response by created date (optional)
     * @return ApiResponse&lt;List&lt;ProductResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of products </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProductResponse>> getAllProductsV2WithHttpInfo(UUID organizationUuid, Boolean sort) throws ApiException {
        okhttp3.Call localVarCall = getAllProductsV2ValidateBeforeCall(organizationUuid, sort, null);
        Type localVarReturnType = new TypeToken<List<ProductResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve all products visible in POS – v2 (asynchronously)
     * 
     * @param organizationUuid  (required)
     * @param sort If true, sorts response by created date (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of products </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllProductsV2Async(UUID organizationUuid, Boolean sort, final ApiCallback<List<ProductResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllProductsV2ValidateBeforeCall(organizationUuid, sort, _callback);
        Type localVarReturnType = new TypeToken<List<ProductResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProduct
     * @param organizationUuid  (required)
     * @param productUuid  (required)
     * @param ifNoneMatch  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product </td><td>  * ETag - ETag value <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed ETag </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organization or Product not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductCall(UUID organizationUuid, UUID productUuid, String ifNoneMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationUuid}/products/{productUuid}"
            .replace("{" + "organizationUuid" + "}", localVarApiClient.escapeString(organizationUuid.toString()))
            .replace("{" + "productUuid" + "}", localVarApiClient.escapeString(productUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ZettleOauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProductValidateBeforeCall(UUID organizationUuid, UUID productUuid, String ifNoneMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationUuid' is set
        if (organizationUuid == null) {
            throw new ApiException("Missing the required parameter 'organizationUuid' when calling getProduct(Async)");
        }

        // verify the required parameter 'productUuid' is set
        if (productUuid == null) {
            throw new ApiException("Missing the required parameter 'productUuid' when calling getProduct(Async)");
        }

        return getProductCall(organizationUuid, productUuid, ifNoneMatch, _callback);

    }

    /**
     * Retrieve a single product
     * Get the full product with the provided UUID. The method supports conditional GET through providing a HttpHeaders.IF_NONE_MATCH header. If the conditional prerequisite is fullfilled, the full product is returned, otherwise a 304 not modified will be returned with an empty body.
     * @param organizationUuid  (required)
     * @param productUuid  (required)
     * @param ifNoneMatch  (optional)
     * @return ProductResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product </td><td>  * ETag - ETag value <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed ETag </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organization or Product not found </td><td>  -  </td></tr>
     </table>
     */
    public ProductResponse getProduct(UUID organizationUuid, UUID productUuid, String ifNoneMatch) throws ApiException {
        ApiResponse<ProductResponse> localVarResp = getProductWithHttpInfo(organizationUuid, productUuid, ifNoneMatch);
        return localVarResp.getData();
    }

    /**
     * Retrieve a single product
     * Get the full product with the provided UUID. The method supports conditional GET through providing a HttpHeaders.IF_NONE_MATCH header. If the conditional prerequisite is fullfilled, the full product is returned, otherwise a 304 not modified will be returned with an empty body.
     * @param organizationUuid  (required)
     * @param productUuid  (required)
     * @param ifNoneMatch  (optional)
     * @return ApiResponse&lt;ProductResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product </td><td>  * ETag - ETag value <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed ETag </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organization or Product not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductResponse> getProductWithHttpInfo(UUID organizationUuid, UUID productUuid, String ifNoneMatch) throws ApiException {
        okhttp3.Call localVarCall = getProductValidateBeforeCall(organizationUuid, productUuid, ifNoneMatch, null);
        Type localVarReturnType = new TypeToken<ProductResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a single product (asynchronously)
     * Get the full product with the provided UUID. The method supports conditional GET through providing a HttpHeaders.IF_NONE_MATCH header. If the conditional prerequisite is fullfilled, the full product is returned, otherwise a 304 not modified will be returned with an empty body.
     * @param organizationUuid  (required)
     * @param productUuid  (required)
     * @param ifNoneMatch  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product </td><td>  * ETag - ETag value <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed ETag </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organization or Product not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductAsync(UUID organizationUuid, UUID productUuid, String ifNoneMatch, final ApiCallback<ProductResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProductValidateBeforeCall(organizationUuid, productUuid, ifNoneMatch, _callback);
        Type localVarReturnType = new TypeToken<ProductResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateProduct
     * @param organizationUuid  (required)
     * @param productUuid  (required)
     * @param fullProductUpdateRequest  (required)
     * @param ifMatch  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Product updated </td><td>  * ETag - ETag value <br>  * Location - Location of updated product <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request body </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition failed: ETag did not match the expected value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProductCall(UUID organizationUuid, UUID productUuid, FullProductUpdateRequest fullProductUpdateRequest, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fullProductUpdateRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationUuid}/products/v2/{productUuid}"
            .replace("{" + "organizationUuid" + "}", localVarApiClient.escapeString(organizationUuid.toString()))
            .replace("{" + "productUuid" + "}", localVarApiClient.escapeString(productUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ZettleOauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProductValidateBeforeCall(UUID organizationUuid, UUID productUuid, FullProductUpdateRequest fullProductUpdateRequest, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationUuid' is set
        if (organizationUuid == null) {
            throw new ApiException("Missing the required parameter 'organizationUuid' when calling updateProduct(Async)");
        }

        // verify the required parameter 'productUuid' is set
        if (productUuid == null) {
            throw new ApiException("Missing the required parameter 'productUuid' when calling updateProduct(Async)");
        }

        // verify the required parameter 'fullProductUpdateRequest' is set
        if (fullProductUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'fullProductUpdateRequest' when calling updateProduct(Async)");
        }

        return updateProductCall(organizationUuid, productUuid, fullProductUpdateRequest, ifMatch, _callback);

    }

    /**
     * Update a single product
     * Updates a product entity using JSON merge patch (https://tools.ietf.org/html/rfc7386). This means that only included fields will be changed: null values removes the field on the target entity, and other values updates the field. Conditional updates are supported through the HttpHeaders.IF_MATCH header. If the conditional prerequisite is fullfilled, the product is updated: otherwise a 412 (precondition failed) will be returned with an empty body.
     * @param organizationUuid  (required)
     * @param productUuid  (required)
     * @param fullProductUpdateRequest  (required)
     * @param ifMatch  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Product updated </td><td>  * ETag - ETag value <br>  * Location - Location of updated product <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request body </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition failed: ETag did not match the expected value </td><td>  -  </td></tr>
     </table>
     */
    public void updateProduct(UUID organizationUuid, UUID productUuid, FullProductUpdateRequest fullProductUpdateRequest, String ifMatch) throws ApiException {
        updateProductWithHttpInfo(organizationUuid, productUuid, fullProductUpdateRequest, ifMatch);
    }

    /**
     * Update a single product
     * Updates a product entity using JSON merge patch (https://tools.ietf.org/html/rfc7386). This means that only included fields will be changed: null values removes the field on the target entity, and other values updates the field. Conditional updates are supported through the HttpHeaders.IF_MATCH header. If the conditional prerequisite is fullfilled, the product is updated: otherwise a 412 (precondition failed) will be returned with an empty body.
     * @param organizationUuid  (required)
     * @param productUuid  (required)
     * @param fullProductUpdateRequest  (required)
     * @param ifMatch  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Product updated </td><td>  * ETag - ETag value <br>  * Location - Location of updated product <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request body </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition failed: ETag did not match the expected value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateProductWithHttpInfo(UUID organizationUuid, UUID productUuid, FullProductUpdateRequest fullProductUpdateRequest, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = updateProductValidateBeforeCall(organizationUuid, productUuid, fullProductUpdateRequest, ifMatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a single product (asynchronously)
     * Updates a product entity using JSON merge patch (https://tools.ietf.org/html/rfc7386). This means that only included fields will be changed: null values removes the field on the target entity, and other values updates the field. Conditional updates are supported through the HttpHeaders.IF_MATCH header. If the conditional prerequisite is fullfilled, the product is updated: otherwise a 412 (precondition failed) will be returned with an empty body.
     * @param organizationUuid  (required)
     * @param productUuid  (required)
     * @param fullProductUpdateRequest  (required)
     * @param ifMatch  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Product updated </td><td>  * ETag - ETag value <br>  * Location - Location of updated product <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request body </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition failed: ETag did not match the expected value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProductAsync(UUID organizationUuid, UUID productUuid, FullProductUpdateRequest fullProductUpdateRequest, String ifMatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProductValidateBeforeCall(organizationUuid, productUuid, fullProductUpdateRequest, ifMatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
