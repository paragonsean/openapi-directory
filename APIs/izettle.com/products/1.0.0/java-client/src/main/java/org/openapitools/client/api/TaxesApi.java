/*
 * Product Library API
 * The Product Library API is used for managing merchant's product information and product images.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.TaxRate;
import org.openapitools.client.model.TaxRateProductCountResponse;
import org.openapitools.client.model.TaxRateUpdateRequest;
import org.openapitools.client.model.TaxRatesCreateRequest;
import org.openapitools.client.model.TaxRatesResponse;
import org.openapitools.client.model.TaxSettingsResponse;
import org.openapitools.client.model.TaxSettingsUpdateRequest;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TaxesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TaxesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TaxesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createTaxRates
     * @param taxRatesCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Tax rates created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not a sales tax user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTaxRatesCall(TaxRatesCreateRequest taxRatesCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = taxRatesCreateRequest;

        // create path and map variables
        String localVarPath = "/v1/taxes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ZettleOauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTaxRatesValidateBeforeCall(TaxRatesCreateRequest taxRatesCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taxRatesCreateRequest' is set
        if (taxRatesCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'taxRatesCreateRequest' when calling createTaxRates(Async)");
        }

        return createTaxRatesCall(taxRatesCreateRequest, _callback);

    }

    /**
     * Create new tax rates
     * 
     * @param taxRatesCreateRequest  (required)
     * @return TaxRatesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Tax rates created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not a sales tax user </td><td>  -  </td></tr>
     </table>
     */
    public TaxRatesResponse createTaxRates(TaxRatesCreateRequest taxRatesCreateRequest) throws ApiException {
        ApiResponse<TaxRatesResponse> localVarResp = createTaxRatesWithHttpInfo(taxRatesCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create new tax rates
     * 
     * @param taxRatesCreateRequest  (required)
     * @return ApiResponse&lt;TaxRatesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Tax rates created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not a sales tax user </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaxRatesResponse> createTaxRatesWithHttpInfo(TaxRatesCreateRequest taxRatesCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = createTaxRatesValidateBeforeCall(taxRatesCreateRequest, null);
        Type localVarReturnType = new TypeToken<TaxRatesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create new tax rates (asynchronously)
     * 
     * @param taxRatesCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Tax rates created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not a sales tax user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTaxRatesAsync(TaxRatesCreateRequest taxRatesCreateRequest, final ApiCallback<TaxRatesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTaxRatesValidateBeforeCall(taxRatesCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<TaxRatesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTaxRate
     * @param taxRateUuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Tax rate deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not a sales tax user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tax rate not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTaxRateCall(UUID taxRateUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/taxes/{taxRateUuid}"
            .replace("{" + "taxRateUuid" + "}", localVarApiClient.escapeString(taxRateUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ZettleOauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTaxRateValidateBeforeCall(UUID taxRateUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taxRateUuid' is set
        if (taxRateUuid == null) {
            throw new ApiException("Missing the required parameter 'taxRateUuid' when calling deleteTaxRate(Async)");
        }

        return deleteTaxRateCall(taxRateUuid, _callback);

    }

    /**
     * Delete a single tax rate
     * 
     * @param taxRateUuid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Tax rate deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not a sales tax user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tax rate not found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteTaxRate(UUID taxRateUuid) throws ApiException {
        deleteTaxRateWithHttpInfo(taxRateUuid);
    }

    /**
     * Delete a single tax rate
     * 
     * @param taxRateUuid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Tax rate deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not a sales tax user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tax rate not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteTaxRateWithHttpInfo(UUID taxRateUuid) throws ApiException {
        okhttp3.Call localVarCall = deleteTaxRateValidateBeforeCall(taxRateUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a single tax rate (asynchronously)
     * 
     * @param taxRateUuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Tax rate deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not a sales tax user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tax rate not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTaxRateAsync(UUID taxRateUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTaxRateValidateBeforeCall(taxRateUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProductCountForAllTaxes
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of products for each tax rate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not a sales tax user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductCountForAllTaxesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/taxes/count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ZettleOauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProductCountForAllTaxesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getProductCountForAllTaxesCall(_callback);

    }

    /**
     * Get all tax rates and a count of products associated with each
     * 
     * @return TaxRateProductCountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of products for each tax rate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not a sales tax user </td><td>  -  </td></tr>
     </table>
     */
    public TaxRateProductCountResponse getProductCountForAllTaxes() throws ApiException {
        ApiResponse<TaxRateProductCountResponse> localVarResp = getProductCountForAllTaxesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get all tax rates and a count of products associated with each
     * 
     * @return ApiResponse&lt;TaxRateProductCountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of products for each tax rate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not a sales tax user </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaxRateProductCountResponse> getProductCountForAllTaxesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getProductCountForAllTaxesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<TaxRateProductCountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all tax rates and a count of products associated with each (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of products for each tax rate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not a sales tax user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductCountForAllTaxesAsync(final ApiCallback<TaxRateProductCountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProductCountForAllTaxesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<TaxRateProductCountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTaxRate
     * @param taxRateUuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single tax rate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not a sales tax user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tax rate not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTaxRateCall(UUID taxRateUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/taxes/{taxRateUuid}"
            .replace("{" + "taxRateUuid" + "}", localVarApiClient.escapeString(taxRateUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ZettleOauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTaxRateValidateBeforeCall(UUID taxRateUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taxRateUuid' is set
        if (taxRateUuid == null) {
            throw new ApiException("Missing the required parameter 'taxRateUuid' when calling getTaxRate(Async)");
        }

        return getTaxRateCall(taxRateUuid, _callback);

    }

    /**
     * Get a single tax rate
     * 
     * @param taxRateUuid  (required)
     * @return TaxRate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single tax rate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not a sales tax user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tax rate not found </td><td>  -  </td></tr>
     </table>
     */
    public TaxRate getTaxRate(UUID taxRateUuid) throws ApiException {
        ApiResponse<TaxRate> localVarResp = getTaxRateWithHttpInfo(taxRateUuid);
        return localVarResp.getData();
    }

    /**
     * Get a single tax rate
     * 
     * @param taxRateUuid  (required)
     * @return ApiResponse&lt;TaxRate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single tax rate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not a sales tax user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tax rate not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaxRate> getTaxRateWithHttpInfo(UUID taxRateUuid) throws ApiException {
        okhttp3.Call localVarCall = getTaxRateValidateBeforeCall(taxRateUuid, null);
        Type localVarReturnType = new TypeToken<TaxRate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a single tax rate (asynchronously)
     * 
     * @param taxRateUuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single tax rate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not a sales tax user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tax rate not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTaxRateAsync(UUID taxRateUuid, final ApiCallback<TaxRate> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTaxRateValidateBeforeCall(taxRateUuid, _callback);
        Type localVarReturnType = new TypeToken<TaxRate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTaxRates
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tax rates </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not a sales tax user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTaxRatesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/taxes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ZettleOauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTaxRatesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getTaxRatesCall(_callback);

    }

    /**
     * Get all available tax rates
     * 
     * @return List&lt;TaxRatesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tax rates </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not a sales tax user </td><td>  -  </td></tr>
     </table>
     */
    public List<TaxRatesResponse> getTaxRates() throws ApiException {
        ApiResponse<List<TaxRatesResponse>> localVarResp = getTaxRatesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get all available tax rates
     * 
     * @return ApiResponse&lt;List&lt;TaxRatesResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tax rates </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not a sales tax user </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TaxRatesResponse>> getTaxRatesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getTaxRatesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<TaxRatesResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all available tax rates (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tax rates </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not a sales tax user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTaxRatesAsync(final ApiCallback<List<TaxRatesResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTaxRatesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<TaxRatesResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTaxSettings
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tax settings </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not a sales tax user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTaxSettingsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/taxes/settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ZettleOauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTaxSettingsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getTaxSettingsCall(_callback);

    }

    /**
     * Get the organization tax settings 
     * 
     * @return TaxSettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tax settings </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not a sales tax user </td><td>  -  </td></tr>
     </table>
     */
    public TaxSettingsResponse getTaxSettings() throws ApiException {
        ApiResponse<TaxSettingsResponse> localVarResp = getTaxSettingsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get the organization tax settings 
     * 
     * @return ApiResponse&lt;TaxSettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tax settings </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not a sales tax user </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaxSettingsResponse> getTaxSettingsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getTaxSettingsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<TaxSettingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the organization tax settings  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tax settings </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not a sales tax user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTaxSettingsAsync(final ApiCallback<TaxSettingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTaxSettingsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<TaxSettingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setTaxationMode
     * @param taxSettingsUpdateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated tax settings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not a sales tax user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setTaxationModeCall(TaxSettingsUpdateRequest taxSettingsUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = taxSettingsUpdateRequest;

        // create path and map variables
        String localVarPath = "/v1/taxes/settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ZettleOauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setTaxationModeValidateBeforeCall(TaxSettingsUpdateRequest taxSettingsUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taxSettingsUpdateRequest' is set
        if (taxSettingsUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'taxSettingsUpdateRequest' when calling setTaxationMode(Async)");
        }

        return setTaxationModeCall(taxSettingsUpdateRequest, _callback);

    }

    /**
     * Update the organization tax settings
     * 
     * @param taxSettingsUpdateRequest  (required)
     * @return TaxSettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated tax settings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not a sales tax user </td><td>  -  </td></tr>
     </table>
     */
    public TaxSettingsResponse setTaxationMode(TaxSettingsUpdateRequest taxSettingsUpdateRequest) throws ApiException {
        ApiResponse<TaxSettingsResponse> localVarResp = setTaxationModeWithHttpInfo(taxSettingsUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * Update the organization tax settings
     * 
     * @param taxSettingsUpdateRequest  (required)
     * @return ApiResponse&lt;TaxSettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated tax settings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not a sales tax user </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaxSettingsResponse> setTaxationModeWithHttpInfo(TaxSettingsUpdateRequest taxSettingsUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = setTaxationModeValidateBeforeCall(taxSettingsUpdateRequest, null);
        Type localVarReturnType = new TypeToken<TaxSettingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the organization tax settings (asynchronously)
     * 
     * @param taxSettingsUpdateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated tax settings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not a sales tax user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setTaxationModeAsync(TaxSettingsUpdateRequest taxSettingsUpdateRequest, final ApiCallback<TaxSettingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = setTaxationModeValidateBeforeCall(taxSettingsUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<TaxSettingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTaxRate
     * @param taxRateUuid  (required)
     * @param taxRateUpdateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated tax rate </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not a sales tax user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tax rate not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTaxRateCall(UUID taxRateUuid, TaxRateUpdateRequest taxRateUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = taxRateUpdateRequest;

        // create path and map variables
        String localVarPath = "/v1/taxes/{taxRateUuid}"
            .replace("{" + "taxRateUuid" + "}", localVarApiClient.escapeString(taxRateUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ZettleOauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTaxRateValidateBeforeCall(UUID taxRateUuid, TaxRateUpdateRequest taxRateUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taxRateUuid' is set
        if (taxRateUuid == null) {
            throw new ApiException("Missing the required parameter 'taxRateUuid' when calling updateTaxRate(Async)");
        }

        // verify the required parameter 'taxRateUpdateRequest' is set
        if (taxRateUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'taxRateUpdateRequest' when calling updateTaxRate(Async)");
        }

        return updateTaxRateCall(taxRateUuid, taxRateUpdateRequest, _callback);

    }

    /**
     * Update a single tax rate
     * 
     * @param taxRateUuid  (required)
     * @param taxRateUpdateRequest  (required)
     * @return TaxRate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated tax rate </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not a sales tax user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tax rate not found </td><td>  -  </td></tr>
     </table>
     */
    public TaxRate updateTaxRate(UUID taxRateUuid, TaxRateUpdateRequest taxRateUpdateRequest) throws ApiException {
        ApiResponse<TaxRate> localVarResp = updateTaxRateWithHttpInfo(taxRateUuid, taxRateUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * Update a single tax rate
     * 
     * @param taxRateUuid  (required)
     * @param taxRateUpdateRequest  (required)
     * @return ApiResponse&lt;TaxRate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated tax rate </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not a sales tax user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tax rate not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaxRate> updateTaxRateWithHttpInfo(UUID taxRateUuid, TaxRateUpdateRequest taxRateUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateTaxRateValidateBeforeCall(taxRateUuid, taxRateUpdateRequest, null);
        Type localVarReturnType = new TypeToken<TaxRate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a single tax rate (asynchronously)
     * 
     * @param taxRateUuid  (required)
     * @param taxRateUpdateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated tax rate </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not a sales tax user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tax rate not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTaxRateAsync(UUID taxRateUuid, TaxRateUpdateRequest taxRateUpdateRequest, final ApiCallback<TaxRate> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTaxRateValidateBeforeCall(taxRateUuid, taxRateUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<TaxRate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
