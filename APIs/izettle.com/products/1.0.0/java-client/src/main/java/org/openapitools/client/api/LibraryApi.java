/*
 * Product Library API
 * The Product Library API is used for managing merchant's product information and product images.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.LibraryResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LibraryApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LibraryApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LibraryApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getLibrary
     * @param organizationUuid  (required)
     * @param eventLogUuid  (optional)
     * @param limit  (optional, default to 500)
     * @param offset  (optional)
     * @param all  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of library items </td><td>  * Link - If the response is paginated this header will contain the URI for the next page. See more at: https://tools.ietf.org/html/rfc5988 <br>  </td></tr>
        <tr><td> 412 </td><td> Invalid event log uuid. If the eventLogUuid query parameter was provided a 412 response indicates that the number of changes in the product exceeds the limit since that particular event (currently 500 changes).  When this happens, the client should remove the eventLogUuid query parameters and try again. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLibraryCall(UUID organizationUuid, UUID eventLogUuid, Integer limit, String offset, Boolean all, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationUuid}/library"
            .replace("{" + "organizationUuid" + "}", localVarApiClient.escapeString(organizationUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (eventLogUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventLogUuid", eventLogUuid));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (all != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("all", all));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ZettleOauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLibraryValidateBeforeCall(UUID organizationUuid, UUID eventLogUuid, Integer limit, String offset, Boolean all, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationUuid' is set
        if (organizationUuid == null) {
            throw new ApiException("Missing the required parameter 'organizationUuid' when calling getLibrary(Async)");
        }

        return getLibraryCall(organizationUuid, eventLogUuid, limit, offset, all, _callback);

    }

    /**
     * Retrieve the entire library
     * Will return the entire library for the authenticated user. If size of the library exceeds server preferences (normally 500) or the value of the optional limit parameter, the result will be paginated. Paginated responses return a Link header, indicating the next URI to fetch. The resulting header value will look something like:  &lt;https://products.izettle.com/organizations/self/library?limit&#x3D;X&amp;offset&#x3D;Y&gt;; rel&#x3D;\&quot;next\&quot;  where limit is number of items in response, and offset is the current position in pagination. The rel-part in the header is the links relation to the data previously recieved. The idea is that as long as this header is present there are still items remaining to be fetched. When either the header is not present or it&#39;s value doesn&#39;t contain any \&quot;next\&quot; value, all items have been sent to the client.  Note: The client should NOT try to extract query parameters from the URI, but rather use it as-is for the next request. Also, clients should be perpared that one Link header might contain multiple other IRIs that are not \&quot;next\&quot; (there will never be more than one \&quot;next\&quot; though). See more at:      IETF: https://tools.ietf.org/html/rfc5988     GitHub: https://developer.github.com/guides/traversing-with-pagination/  If eventLogUuid is provided, the response will only include events affecting the library since that event. Such responses are normally quite small and would be a preferred method for most fat clients after retrieving the initial full library. 
     * @param organizationUuid  (required)
     * @param eventLogUuid  (optional)
     * @param limit  (optional, default to 500)
     * @param offset  (optional)
     * @param all  (optional)
     * @return LibraryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of library items </td><td>  * Link - If the response is paginated this header will contain the URI for the next page. See more at: https://tools.ietf.org/html/rfc5988 <br>  </td></tr>
        <tr><td> 412 </td><td> Invalid event log uuid. If the eventLogUuid query parameter was provided a 412 response indicates that the number of changes in the product exceeds the limit since that particular event (currently 500 changes).  When this happens, the client should remove the eventLogUuid query parameters and try again. </td><td>  -  </td></tr>
     </table>
     */
    public LibraryResponse getLibrary(UUID organizationUuid, UUID eventLogUuid, Integer limit, String offset, Boolean all) throws ApiException {
        ApiResponse<LibraryResponse> localVarResp = getLibraryWithHttpInfo(organizationUuid, eventLogUuid, limit, offset, all);
        return localVarResp.getData();
    }

    /**
     * Retrieve the entire library
     * Will return the entire library for the authenticated user. If size of the library exceeds server preferences (normally 500) or the value of the optional limit parameter, the result will be paginated. Paginated responses return a Link header, indicating the next URI to fetch. The resulting header value will look something like:  &lt;https://products.izettle.com/organizations/self/library?limit&#x3D;X&amp;offset&#x3D;Y&gt;; rel&#x3D;\&quot;next\&quot;  where limit is number of items in response, and offset is the current position in pagination. The rel-part in the header is the links relation to the data previously recieved. The idea is that as long as this header is present there are still items remaining to be fetched. When either the header is not present or it&#39;s value doesn&#39;t contain any \&quot;next\&quot; value, all items have been sent to the client.  Note: The client should NOT try to extract query parameters from the URI, but rather use it as-is for the next request. Also, clients should be perpared that one Link header might contain multiple other IRIs that are not \&quot;next\&quot; (there will never be more than one \&quot;next\&quot; though). See more at:      IETF: https://tools.ietf.org/html/rfc5988     GitHub: https://developer.github.com/guides/traversing-with-pagination/  If eventLogUuid is provided, the response will only include events affecting the library since that event. Such responses are normally quite small and would be a preferred method for most fat clients after retrieving the initial full library. 
     * @param organizationUuid  (required)
     * @param eventLogUuid  (optional)
     * @param limit  (optional, default to 500)
     * @param offset  (optional)
     * @param all  (optional)
     * @return ApiResponse&lt;LibraryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of library items </td><td>  * Link - If the response is paginated this header will contain the URI for the next page. See more at: https://tools.ietf.org/html/rfc5988 <br>  </td></tr>
        <tr><td> 412 </td><td> Invalid event log uuid. If the eventLogUuid query parameter was provided a 412 response indicates that the number of changes in the product exceeds the limit since that particular event (currently 500 changes).  When this happens, the client should remove the eventLogUuid query parameters and try again. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LibraryResponse> getLibraryWithHttpInfo(UUID organizationUuid, UUID eventLogUuid, Integer limit, String offset, Boolean all) throws ApiException {
        okhttp3.Call localVarCall = getLibraryValidateBeforeCall(organizationUuid, eventLogUuid, limit, offset, all, null);
        Type localVarReturnType = new TypeToken<LibraryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve the entire library (asynchronously)
     * Will return the entire library for the authenticated user. If size of the library exceeds server preferences (normally 500) or the value of the optional limit parameter, the result will be paginated. Paginated responses return a Link header, indicating the next URI to fetch. The resulting header value will look something like:  &lt;https://products.izettle.com/organizations/self/library?limit&#x3D;X&amp;offset&#x3D;Y&gt;; rel&#x3D;\&quot;next\&quot;  where limit is number of items in response, and offset is the current position in pagination. The rel-part in the header is the links relation to the data previously recieved. The idea is that as long as this header is present there are still items remaining to be fetched. When either the header is not present or it&#39;s value doesn&#39;t contain any \&quot;next\&quot; value, all items have been sent to the client.  Note: The client should NOT try to extract query parameters from the URI, but rather use it as-is for the next request. Also, clients should be perpared that one Link header might contain multiple other IRIs that are not \&quot;next\&quot; (there will never be more than one \&quot;next\&quot; though). See more at:      IETF: https://tools.ietf.org/html/rfc5988     GitHub: https://developer.github.com/guides/traversing-with-pagination/  If eventLogUuid is provided, the response will only include events affecting the library since that event. Such responses are normally quite small and would be a preferred method for most fat clients after retrieving the initial full library. 
     * @param organizationUuid  (required)
     * @param eventLogUuid  (optional)
     * @param limit  (optional, default to 500)
     * @param offset  (optional)
     * @param all  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of library items </td><td>  * Link - If the response is paginated this header will contain the URI for the next page. See more at: https://tools.ietf.org/html/rfc5988 <br>  </td></tr>
        <tr><td> 412 </td><td> Invalid event log uuid. If the eventLogUuid query parameter was provided a 412 response indicates that the number of changes in the product exceeds the limit since that particular event (currently 500 changes).  When this happens, the client should remove the eventLogUuid query parameters and try again. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLibraryAsync(UUID organizationUuid, UUID eventLogUuid, Integer limit, String offset, Boolean all, final ApiCallback<LibraryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLibraryValidateBeforeCall(organizationUuid, eventLogUuid, limit, offset, all, _callback);
        Type localVarReturnType = new TypeToken<LibraryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
