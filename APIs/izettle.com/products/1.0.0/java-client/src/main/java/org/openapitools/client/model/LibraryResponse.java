/*
 * Product Library API
 * The Product Library API is used for managing merchant's product information and product images.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;
import java.util.UUID;
import org.openapitools.client.model.DiscountResponse;
import org.openapitools.client.model.ProductResponse;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LibraryResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:43:49.275831-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LibraryResponse {
  public static final String SERIALIZED_NAME_DELETED_DISCOUNTS = "deletedDiscounts";
  @SerializedName(SERIALIZED_NAME_DELETED_DISCOUNTS)
  private Set<UUID> deletedDiscounts = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_DELETED_PRODUCTS = "deletedProducts";
  @SerializedName(SERIALIZED_NAME_DELETED_PRODUCTS)
  private Set<UUID> deletedProducts = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_DISCOUNTS = "discounts";
  @SerializedName(SERIALIZED_NAME_DISCOUNTS)
  private Set<DiscountResponse> discounts = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_FROM_EVENT_LOG_UUID = "fromEventLogUuid";
  @SerializedName(SERIALIZED_NAME_FROM_EVENT_LOG_UUID)
  private UUID fromEventLogUuid;

  public static final String SERIALIZED_NAME_PRODUCTS = "products";
  @SerializedName(SERIALIZED_NAME_PRODUCTS)
  private Set<ProductResponse> products = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_UNTIL_EVENT_LOG_UUID = "untilEventLogUuid";
  @SerializedName(SERIALIZED_NAME_UNTIL_EVENT_LOG_UUID)
  private UUID untilEventLogUuid;

  public LibraryResponse() {
  }

  public LibraryResponse deletedDiscounts(Set<UUID> deletedDiscounts) {
    this.deletedDiscounts = deletedDiscounts;
    return this;
  }

  public LibraryResponse addDeletedDiscountsItem(UUID deletedDiscountsItem) {
    if (this.deletedDiscounts == null) {
      this.deletedDiscounts = new LinkedHashSet<>();
    }
    this.deletedDiscounts.add(deletedDiscountsItem);
    return this;
  }

  /**
   * Get deletedDiscounts
   * @return deletedDiscounts
   */
  @javax.annotation.Nullable
  public Set<UUID> getDeletedDiscounts() {
    return deletedDiscounts;
  }

  public void setDeletedDiscounts(Set<UUID> deletedDiscounts) {
    this.deletedDiscounts = deletedDiscounts;
  }


  public LibraryResponse deletedProducts(Set<UUID> deletedProducts) {
    this.deletedProducts = deletedProducts;
    return this;
  }

  public LibraryResponse addDeletedProductsItem(UUID deletedProductsItem) {
    if (this.deletedProducts == null) {
      this.deletedProducts = new LinkedHashSet<>();
    }
    this.deletedProducts.add(deletedProductsItem);
    return this;
  }

  /**
   * Get deletedProducts
   * @return deletedProducts
   */
  @javax.annotation.Nullable
  public Set<UUID> getDeletedProducts() {
    return deletedProducts;
  }

  public void setDeletedProducts(Set<UUID> deletedProducts) {
    this.deletedProducts = deletedProducts;
  }


  public LibraryResponse discounts(Set<DiscountResponse> discounts) {
    this.discounts = discounts;
    return this;
  }

  public LibraryResponse addDiscountsItem(DiscountResponse discountsItem) {
    if (this.discounts == null) {
      this.discounts = new LinkedHashSet<>();
    }
    this.discounts.add(discountsItem);
    return this;
  }

  /**
   * Get discounts
   * @return discounts
   */
  @javax.annotation.Nullable
  public Set<DiscountResponse> getDiscounts() {
    return discounts;
  }

  public void setDiscounts(Set<DiscountResponse> discounts) {
    this.discounts = discounts;
  }


  public LibraryResponse fromEventLogUuid(UUID fromEventLogUuid) {
    this.fromEventLogUuid = fromEventLogUuid;
    return this;
  }

  /**
   * Get fromEventLogUuid
   * @return fromEventLogUuid
   */
  @javax.annotation.Nullable
  public UUID getFromEventLogUuid() {
    return fromEventLogUuid;
  }

  public void setFromEventLogUuid(UUID fromEventLogUuid) {
    this.fromEventLogUuid = fromEventLogUuid;
  }


  public LibraryResponse products(Set<ProductResponse> products) {
    this.products = products;
    return this;
  }

  public LibraryResponse addProductsItem(ProductResponse productsItem) {
    if (this.products == null) {
      this.products = new LinkedHashSet<>();
    }
    this.products.add(productsItem);
    return this;
  }

  /**
   * Get products
   * @return products
   */
  @javax.annotation.Nullable
  public Set<ProductResponse> getProducts() {
    return products;
  }

  public void setProducts(Set<ProductResponse> products) {
    this.products = products;
  }


  public LibraryResponse untilEventLogUuid(UUID untilEventLogUuid) {
    this.untilEventLogUuid = untilEventLogUuid;
    return this;
  }

  /**
   * Get untilEventLogUuid
   * @return untilEventLogUuid
   */
  @javax.annotation.Nullable
  public UUID getUntilEventLogUuid() {
    return untilEventLogUuid;
  }

  public void setUntilEventLogUuid(UUID untilEventLogUuid) {
    this.untilEventLogUuid = untilEventLogUuid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LibraryResponse libraryResponse = (LibraryResponse) o;
    return Objects.equals(this.deletedDiscounts, libraryResponse.deletedDiscounts) &&
        Objects.equals(this.deletedProducts, libraryResponse.deletedProducts) &&
        Objects.equals(this.discounts, libraryResponse.discounts) &&
        Objects.equals(this.fromEventLogUuid, libraryResponse.fromEventLogUuid) &&
        Objects.equals(this.products, libraryResponse.products) &&
        Objects.equals(this.untilEventLogUuid, libraryResponse.untilEventLogUuid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deletedDiscounts, deletedProducts, discounts, fromEventLogUuid, products, untilEventLogUuid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LibraryResponse {\n");
    sb.append("    deletedDiscounts: ").append(toIndentedString(deletedDiscounts)).append("\n");
    sb.append("    deletedProducts: ").append(toIndentedString(deletedProducts)).append("\n");
    sb.append("    discounts: ").append(toIndentedString(discounts)).append("\n");
    sb.append("    fromEventLogUuid: ").append(toIndentedString(fromEventLogUuid)).append("\n");
    sb.append("    products: ").append(toIndentedString(products)).append("\n");
    sb.append("    untilEventLogUuid: ").append(toIndentedString(untilEventLogUuid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deletedDiscounts");
    openapiFields.add("deletedProducts");
    openapiFields.add("discounts");
    openapiFields.add("fromEventLogUuid");
    openapiFields.add("products");
    openapiFields.add("untilEventLogUuid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LibraryResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LibraryResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LibraryResponse is not found in the empty JSON string", LibraryResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LibraryResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LibraryResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("deletedDiscounts") != null && !jsonObj.get("deletedDiscounts").isJsonNull() && !jsonObj.get("deletedDiscounts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `deletedDiscounts` to be an array in the JSON string but got `%s`", jsonObj.get("deletedDiscounts").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("deletedProducts") != null && !jsonObj.get("deletedProducts").isJsonNull() && !jsonObj.get("deletedProducts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `deletedProducts` to be an array in the JSON string but got `%s`", jsonObj.get("deletedProducts").toString()));
      }
      if (jsonObj.get("discounts") != null && !jsonObj.get("discounts").isJsonNull()) {
        JsonArray jsonArraydiscounts = jsonObj.getAsJsonArray("discounts");
        if (jsonArraydiscounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("discounts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `discounts` to be an array in the JSON string but got `%s`", jsonObj.get("discounts").toString()));
          }

          // validate the optional field `discounts` (array)
          for (int i = 0; i < jsonArraydiscounts.size(); i++) {
            DiscountResponse.validateJsonElement(jsonArraydiscounts.get(i));
          };
        }
      }
      if ((jsonObj.get("fromEventLogUuid") != null && !jsonObj.get("fromEventLogUuid").isJsonNull()) && !jsonObj.get("fromEventLogUuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fromEventLogUuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fromEventLogUuid").toString()));
      }
      if (jsonObj.get("products") != null && !jsonObj.get("products").isJsonNull()) {
        JsonArray jsonArrayproducts = jsonObj.getAsJsonArray("products");
        if (jsonArrayproducts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("products").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `products` to be an array in the JSON string but got `%s`", jsonObj.get("products").toString()));
          }

          // validate the optional field `products` (array)
          for (int i = 0; i < jsonArrayproducts.size(); i++) {
            ProductResponse.validateJsonElement(jsonArrayproducts.get(i));
          };
        }
      }
      if ((jsonObj.get("untilEventLogUuid") != null && !jsonObj.get("untilEventLogUuid").isJsonNull()) && !jsonObj.get("untilEventLogUuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `untilEventLogUuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("untilEventLogUuid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LibraryResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LibraryResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LibraryResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LibraryResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<LibraryResponse>() {
           @Override
           public void write(JsonWriter out, LibraryResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LibraryResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LibraryResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LibraryResponse
   * @throws IOException if the JSON string is invalid with respect to LibraryResponse
   */
  public static LibraryResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LibraryResponse.class);
  }

  /**
   * Convert an instance of LibraryResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

