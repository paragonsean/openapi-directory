/*
 * Product Library API
 * The Product Library API is used for managing merchant's product information and product images.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DiscountRequest;
import org.openapitools.client.model.DiscountResponse;
import org.openapitools.client.model.ErrorResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DiscountsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DiscountsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DiscountsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createDiscount
     * @param organizationUuid  (required)
     * @param discountRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Discount created </td><td>  * ETag - ETag value <br>  * Location - Location of updated product <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDiscountCall(UUID organizationUuid, DiscountRequest discountRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = discountRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationUuid}/discounts"
            .replace("{" + "organizationUuid" + "}", localVarApiClient.escapeString(organizationUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ZettleOauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDiscountValidateBeforeCall(UUID organizationUuid, DiscountRequest discountRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationUuid' is set
        if (organizationUuid == null) {
            throw new ApiException("Missing the required parameter 'organizationUuid' when calling createDiscount(Async)");
        }

        return createDiscountCall(organizationUuid, discountRequest, _callback);

    }

    /**
     * Create a discount
     * Creates a single discount entity. The location of the newly created discount will be available in the successful response as a HttpHeaders.LOCATION header
     * @param organizationUuid  (required)
     * @param discountRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Discount created </td><td>  * ETag - ETag value <br>  * Location - Location of updated product <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request body </td><td>  -  </td></tr>
     </table>
     */
    public void createDiscount(UUID organizationUuid, DiscountRequest discountRequest) throws ApiException {
        createDiscountWithHttpInfo(organizationUuid, discountRequest);
    }

    /**
     * Create a discount
     * Creates a single discount entity. The location of the newly created discount will be available in the successful response as a HttpHeaders.LOCATION header
     * @param organizationUuid  (required)
     * @param discountRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Discount created </td><td>  * ETag - ETag value <br>  * Location - Location of updated product <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createDiscountWithHttpInfo(UUID organizationUuid, DiscountRequest discountRequest) throws ApiException {
        okhttp3.Call localVarCall = createDiscountValidateBeforeCall(organizationUuid, discountRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a discount (asynchronously)
     * Creates a single discount entity. The location of the newly created discount will be available in the successful response as a HttpHeaders.LOCATION header
     * @param organizationUuid  (required)
     * @param discountRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Discount created </td><td>  * ETag - ETag value <br>  * Location - Location of updated product <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDiscountAsync(UUID organizationUuid, DiscountRequest discountRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDiscountValidateBeforeCall(organizationUuid, discountRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDiscount
     * @param organizationUuid  (required)
     * @param discountUuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Discount deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organization or Discount not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDiscountCall(UUID organizationUuid, UUID discountUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationUuid}/discounts/{discountUuid}"
            .replace("{" + "organizationUuid" + "}", localVarApiClient.escapeString(organizationUuid.toString()))
            .replace("{" + "discountUuid" + "}", localVarApiClient.escapeString(discountUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ZettleOauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDiscountValidateBeforeCall(UUID organizationUuid, UUID discountUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationUuid' is set
        if (organizationUuid == null) {
            throw new ApiException("Missing the required parameter 'organizationUuid' when calling deleteDiscount(Async)");
        }

        // verify the required parameter 'discountUuid' is set
        if (discountUuid == null) {
            throw new ApiException("Missing the required parameter 'discountUuid' when calling deleteDiscount(Async)");
        }

        return deleteDiscountCall(organizationUuid, discountUuid, _callback);

    }

    /**
     * Delete a single discount 
     * 
     * @param organizationUuid  (required)
     * @param discountUuid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Discount deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organization or Discount not found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteDiscount(UUID organizationUuid, UUID discountUuid) throws ApiException {
        deleteDiscountWithHttpInfo(organizationUuid, discountUuid);
    }

    /**
     * Delete a single discount 
     * 
     * @param organizationUuid  (required)
     * @param discountUuid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Discount deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organization or Discount not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteDiscountWithHttpInfo(UUID organizationUuid, UUID discountUuid) throws ApiException {
        okhttp3.Call localVarCall = deleteDiscountValidateBeforeCall(organizationUuid, discountUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a single discount  (asynchronously)
     * 
     * @param organizationUuid  (required)
     * @param discountUuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Discount deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organization or Discount not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDiscountAsync(UUID organizationUuid, UUID discountUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDiscountValidateBeforeCall(organizationUuid, discountUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllDiscounts
     * @param organizationUuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all discounts </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllDiscountsCall(UUID organizationUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationUuid}/discounts"
            .replace("{" + "organizationUuid" + "}", localVarApiClient.escapeString(organizationUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ZettleOauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllDiscountsValidateBeforeCall(UUID organizationUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationUuid' is set
        if (organizationUuid == null) {
            throw new ApiException("Missing the required parameter 'organizationUuid' when calling getAllDiscounts(Async)");
        }

        return getAllDiscountsCall(organizationUuid, _callback);

    }

    /**
     * Retrieve all discounts
     * 
     * @param organizationUuid  (required)
     * @return List&lt;DiscountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all discounts </td><td>  -  </td></tr>
     </table>
     */
    public List<DiscountResponse> getAllDiscounts(UUID organizationUuid) throws ApiException {
        ApiResponse<List<DiscountResponse>> localVarResp = getAllDiscountsWithHttpInfo(organizationUuid);
        return localVarResp.getData();
    }

    /**
     * Retrieve all discounts
     * 
     * @param organizationUuid  (required)
     * @return ApiResponse&lt;List&lt;DiscountResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all discounts </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DiscountResponse>> getAllDiscountsWithHttpInfo(UUID organizationUuid) throws ApiException {
        okhttp3.Call localVarCall = getAllDiscountsValidateBeforeCall(organizationUuid, null);
        Type localVarReturnType = new TypeToken<List<DiscountResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve all discounts (asynchronously)
     * 
     * @param organizationUuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all discounts </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllDiscountsAsync(UUID organizationUuid, final ApiCallback<List<DiscountResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllDiscountsValidateBeforeCall(organizationUuid, _callback);
        Type localVarReturnType = new TypeToken<List<DiscountResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDiscount
     * @param organizationUuid  (required)
     * @param discountUuid  (required)
     * @param ifNoneMatch  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Discount </td><td>  * ETag - ETag value <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organization or Discount not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDiscountCall(UUID organizationUuid, UUID discountUuid, String ifNoneMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationUuid}/discounts/{discountUuid}"
            .replace("{" + "organizationUuid" + "}", localVarApiClient.escapeString(organizationUuid.toString()))
            .replace("{" + "discountUuid" + "}", localVarApiClient.escapeString(discountUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ZettleOauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDiscountValidateBeforeCall(UUID organizationUuid, UUID discountUuid, String ifNoneMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationUuid' is set
        if (organizationUuid == null) {
            throw new ApiException("Missing the required parameter 'organizationUuid' when calling getDiscount(Async)");
        }

        // verify the required parameter 'discountUuid' is set
        if (discountUuid == null) {
            throw new ApiException("Missing the required parameter 'discountUuid' when calling getDiscount(Async)");
        }

        return getDiscountCall(organizationUuid, discountUuid, ifNoneMatch, _callback);

    }

    /**
     * Retrieve a single discount
     * Get the full discount with the provided UUID. The method supports conditional GET through providing a HttpHeaders.IF_NONE_MATCH header. If the conditional prerequisite is fullfilled, the full discount is returned: otherwise a 304 not modified will be returned with an empty body.
     * @param organizationUuid  (required)
     * @param discountUuid  (required)
     * @param ifNoneMatch  (optional)
     * @return DiscountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Discount </td><td>  * ETag - ETag value <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organization or Discount not found </td><td>  -  </td></tr>
     </table>
     */
    public DiscountResponse getDiscount(UUID organizationUuid, UUID discountUuid, String ifNoneMatch) throws ApiException {
        ApiResponse<DiscountResponse> localVarResp = getDiscountWithHttpInfo(organizationUuid, discountUuid, ifNoneMatch);
        return localVarResp.getData();
    }

    /**
     * Retrieve a single discount
     * Get the full discount with the provided UUID. The method supports conditional GET through providing a HttpHeaders.IF_NONE_MATCH header. If the conditional prerequisite is fullfilled, the full discount is returned: otherwise a 304 not modified will be returned with an empty body.
     * @param organizationUuid  (required)
     * @param discountUuid  (required)
     * @param ifNoneMatch  (optional)
     * @return ApiResponse&lt;DiscountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Discount </td><td>  * ETag - ETag value <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organization or Discount not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DiscountResponse> getDiscountWithHttpInfo(UUID organizationUuid, UUID discountUuid, String ifNoneMatch) throws ApiException {
        okhttp3.Call localVarCall = getDiscountValidateBeforeCall(organizationUuid, discountUuid, ifNoneMatch, null);
        Type localVarReturnType = new TypeToken<DiscountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a single discount (asynchronously)
     * Get the full discount with the provided UUID. The method supports conditional GET through providing a HttpHeaders.IF_NONE_MATCH header. If the conditional prerequisite is fullfilled, the full discount is returned: otherwise a 304 not modified will be returned with an empty body.
     * @param organizationUuid  (required)
     * @param discountUuid  (required)
     * @param ifNoneMatch  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Discount </td><td>  * ETag - ETag value <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organization or Discount not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDiscountAsync(UUID organizationUuid, UUID discountUuid, String ifNoneMatch, final ApiCallback<DiscountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDiscountValidateBeforeCall(organizationUuid, discountUuid, ifNoneMatch, _callback);
        Type localVarReturnType = new TypeToken<DiscountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDiscount
     * @param organizationUuid  (required)
     * @param discountUuid  (required)
     * @param discountRequest  (required)
     * @param ifMatch  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Discount updated </td><td>  * ETag - ETag value <br>  * Location - Location of updated product <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request body </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition failed: ETag did not match the expected value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDiscountCall(UUID organizationUuid, UUID discountUuid, DiscountRequest discountRequest, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = discountRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationUuid}/discounts/{discountUuid}"
            .replace("{" + "organizationUuid" + "}", localVarApiClient.escapeString(organizationUuid.toString()))
            .replace("{" + "discountUuid" + "}", localVarApiClient.escapeString(discountUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ZettleOauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDiscountValidateBeforeCall(UUID organizationUuid, UUID discountUuid, DiscountRequest discountRequest, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationUuid' is set
        if (organizationUuid == null) {
            throw new ApiException("Missing the required parameter 'organizationUuid' when calling updateDiscount(Async)");
        }

        // verify the required parameter 'discountUuid' is set
        if (discountUuid == null) {
            throw new ApiException("Missing the required parameter 'discountUuid' when calling updateDiscount(Async)");
        }

        // verify the required parameter 'discountRequest' is set
        if (discountRequest == null) {
            throw new ApiException("Missing the required parameter 'discountRequest' when calling updateDiscount(Async)");
        }

        return updateDiscountCall(organizationUuid, discountUuid, discountRequest, ifMatch, _callback);

    }

    /**
     * Update a single discount
     * Updates a discount entity using JSON merge patch (https://tools.ietf.org/html/rfc7386). This means that only included fields will be changed: null values removes the field on the target entity, and other values updates the field. Conditional updates are supported through the HttpHeaders.IF_MATCH header. If the conditional prerequisite is fullfilled, the discount is updated: otherwise a 412 precondition failed will be returned with an empty body.
     * @param organizationUuid  (required)
     * @param discountUuid  (required)
     * @param discountRequest  (required)
     * @param ifMatch  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Discount updated </td><td>  * ETag - ETag value <br>  * Location - Location of updated product <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request body </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition failed: ETag did not match the expected value </td><td>  -  </td></tr>
     </table>
     */
    public void updateDiscount(UUID organizationUuid, UUID discountUuid, DiscountRequest discountRequest, String ifMatch) throws ApiException {
        updateDiscountWithHttpInfo(organizationUuid, discountUuid, discountRequest, ifMatch);
    }

    /**
     * Update a single discount
     * Updates a discount entity using JSON merge patch (https://tools.ietf.org/html/rfc7386). This means that only included fields will be changed: null values removes the field on the target entity, and other values updates the field. Conditional updates are supported through the HttpHeaders.IF_MATCH header. If the conditional prerequisite is fullfilled, the discount is updated: otherwise a 412 precondition failed will be returned with an empty body.
     * @param organizationUuid  (required)
     * @param discountUuid  (required)
     * @param discountRequest  (required)
     * @param ifMatch  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Discount updated </td><td>  * ETag - ETag value <br>  * Location - Location of updated product <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request body </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition failed: ETag did not match the expected value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateDiscountWithHttpInfo(UUID organizationUuid, UUID discountUuid, DiscountRequest discountRequest, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = updateDiscountValidateBeforeCall(organizationUuid, discountUuid, discountRequest, ifMatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a single discount (asynchronously)
     * Updates a discount entity using JSON merge patch (https://tools.ietf.org/html/rfc7386). This means that only included fields will be changed: null values removes the field on the target entity, and other values updates the field. Conditional updates are supported through the HttpHeaders.IF_MATCH header. If the conditional prerequisite is fullfilled, the discount is updated: otherwise a 412 precondition failed will be returned with an empty body.
     * @param organizationUuid  (required)
     * @param discountUuid  (required)
     * @param discountRequest  (required)
     * @param ifMatch  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Discount updated </td><td>  * ETag - ETag value <br>  * Location - Location of updated product <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request body </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition failed: ETag did not match the expected value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDiscountAsync(UUID organizationUuid, UUID discountUuid, DiscountRequest discountRequest, String ifMatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDiscountValidateBeforeCall(organizationUuid, discountUuid, discountRequest, ifMatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
