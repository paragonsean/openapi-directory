/*
 * Product Library API
 * The Product Library API is used for managing merchant's product information and product images.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CategoryResponse;
import org.openapitools.client.model.CreateCategoriesRequest;
import org.openapitools.client.model.RenameCategoryRequest;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CategoriesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CategoriesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CategoriesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createCategories
     * @param organizationUuid  (required)
     * @param createCategoriesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Category created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Category already exists </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organization not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCategoriesCall(UUID organizationUuid, CreateCategoriesRequest createCategoriesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCategoriesRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationUuid}/categories/v2"
            .replace("{" + "organizationUuid" + "}", localVarApiClient.escapeString(organizationUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ZettleOauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCategoriesValidateBeforeCall(UUID organizationUuid, CreateCategoriesRequest createCategoriesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationUuid' is set
        if (organizationUuid == null) {
            throw new ApiException("Missing the required parameter 'organizationUuid' when calling createCategories(Async)");
        }

        // verify the required parameter 'createCategoriesRequest' is set
        if (createCategoriesRequest == null) {
            throw new ApiException("Missing the required parameter 'createCategoriesRequest' when calling createCategories(Async)");
        }

        return createCategoriesCall(organizationUuid, createCategoriesRequest, _callback);

    }

    /**
     * Create a new category
     * 
     * @param organizationUuid  (required)
     * @param createCategoriesRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Category created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Category already exists </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organization not found </td><td>  -  </td></tr>
     </table>
     */
    public void createCategories(UUID organizationUuid, CreateCategoriesRequest createCategoriesRequest) throws ApiException {
        createCategoriesWithHttpInfo(organizationUuid, createCategoriesRequest);
    }

    /**
     * Create a new category
     * 
     * @param organizationUuid  (required)
     * @param createCategoriesRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Category created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Category already exists </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organization not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createCategoriesWithHttpInfo(UUID organizationUuid, CreateCategoriesRequest createCategoriesRequest) throws ApiException {
        okhttp3.Call localVarCall = createCategoriesValidateBeforeCall(organizationUuid, createCategoriesRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a new category (asynchronously)
     * 
     * @param organizationUuid  (required)
     * @param createCategoriesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Category created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Category already exists </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organization not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCategoriesAsync(UUID organizationUuid, CreateCategoriesRequest createCategoriesRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCategoriesValidateBeforeCall(organizationUuid, createCategoriesRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCategory
     * @param organizationUuid  (required)
     * @param categoryUuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Category deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organization not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCategoryCall(UUID organizationUuid, UUID categoryUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationUuid}/categories/v2/{categoryUuid}"
            .replace("{" + "organizationUuid" + "}", localVarApiClient.escapeString(organizationUuid.toString()))
            .replace("{" + "categoryUuid" + "}", localVarApiClient.escapeString(categoryUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ZettleOauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCategoryValidateBeforeCall(UUID organizationUuid, UUID categoryUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationUuid' is set
        if (organizationUuid == null) {
            throw new ApiException("Missing the required parameter 'organizationUuid' when calling deleteCategory(Async)");
        }

        // verify the required parameter 'categoryUuid' is set
        if (categoryUuid == null) {
            throw new ApiException("Missing the required parameter 'categoryUuid' when calling deleteCategory(Async)");
        }

        return deleteCategoryCall(organizationUuid, categoryUuid, _callback);

    }

    /**
     * Delete a category
     * 
     * @param organizationUuid  (required)
     * @param categoryUuid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Category deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organization not found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCategory(UUID organizationUuid, UUID categoryUuid) throws ApiException {
        deleteCategoryWithHttpInfo(organizationUuid, categoryUuid);
    }

    /**
     * Delete a category
     * 
     * @param organizationUuid  (required)
     * @param categoryUuid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Category deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organization not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCategoryWithHttpInfo(UUID organizationUuid, UUID categoryUuid) throws ApiException {
        okhttp3.Call localVarCall = deleteCategoryValidateBeforeCall(organizationUuid, categoryUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a category (asynchronously)
     * 
     * @param organizationUuid  (required)
     * @param categoryUuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Category deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organization not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCategoryAsync(UUID organizationUuid, UUID categoryUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCategoryValidateBeforeCall(organizationUuid, categoryUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProductTypes
     * @param organizationUuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all categories </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductTypesCall(UUID organizationUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationUuid}/categories/v2"
            .replace("{" + "organizationUuid" + "}", localVarApiClient.escapeString(organizationUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ZettleOauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProductTypesValidateBeforeCall(UUID organizationUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationUuid' is set
        if (organizationUuid == null) {
            throw new ApiException("Missing the required parameter 'organizationUuid' when calling getProductTypes(Async)");
        }

        return getProductTypesCall(organizationUuid, _callback);

    }

    /**
     * Retrieve all categories
     * 
     * @param organizationUuid  (required)
     * @return CategoryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all categories </td><td>  -  </td></tr>
     </table>
     */
    public CategoryResponse getProductTypes(UUID organizationUuid) throws ApiException {
        ApiResponse<CategoryResponse> localVarResp = getProductTypesWithHttpInfo(organizationUuid);
        return localVarResp.getData();
    }

    /**
     * Retrieve all categories
     * 
     * @param organizationUuid  (required)
     * @return ApiResponse&lt;CategoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all categories </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CategoryResponse> getProductTypesWithHttpInfo(UUID organizationUuid) throws ApiException {
        okhttp3.Call localVarCall = getProductTypesValidateBeforeCall(organizationUuid, null);
        Type localVarReturnType = new TypeToken<CategoryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve all categories (asynchronously)
     * 
     * @param organizationUuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all categories </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductTypesAsync(UUID organizationUuid, final ApiCallback<CategoryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProductTypesValidateBeforeCall(organizationUuid, _callback);
        Type localVarReturnType = new TypeToken<CategoryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for renameCategory
     * @param organizationUuid  (required)
     * @param categoryUuid  (required)
     * @param renameCategoryRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Category renamed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Category already exists </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organization not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call renameCategoryCall(UUID organizationUuid, UUID categoryUuid, RenameCategoryRequest renameCategoryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = renameCategoryRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organizationUuid}/categories/v2/{categoryUuid}"
            .replace("{" + "organizationUuid" + "}", localVarApiClient.escapeString(organizationUuid.toString()))
            .replace("{" + "categoryUuid" + "}", localVarApiClient.escapeString(categoryUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ZettleOauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call renameCategoryValidateBeforeCall(UUID organizationUuid, UUID categoryUuid, RenameCategoryRequest renameCategoryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationUuid' is set
        if (organizationUuid == null) {
            throw new ApiException("Missing the required parameter 'organizationUuid' when calling renameCategory(Async)");
        }

        // verify the required parameter 'categoryUuid' is set
        if (categoryUuid == null) {
            throw new ApiException("Missing the required parameter 'categoryUuid' when calling renameCategory(Async)");
        }

        // verify the required parameter 'renameCategoryRequest' is set
        if (renameCategoryRequest == null) {
            throw new ApiException("Missing the required parameter 'renameCategoryRequest' when calling renameCategory(Async)");
        }

        return renameCategoryCall(organizationUuid, categoryUuid, renameCategoryRequest, _callback);

    }

    /**
     * Rename a category
     * 
     * @param organizationUuid  (required)
     * @param categoryUuid  (required)
     * @param renameCategoryRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Category renamed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Category already exists </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organization not found </td><td>  -  </td></tr>
     </table>
     */
    public void renameCategory(UUID organizationUuid, UUID categoryUuid, RenameCategoryRequest renameCategoryRequest) throws ApiException {
        renameCategoryWithHttpInfo(organizationUuid, categoryUuid, renameCategoryRequest);
    }

    /**
     * Rename a category
     * 
     * @param organizationUuid  (required)
     * @param categoryUuid  (required)
     * @param renameCategoryRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Category renamed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Category already exists </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organization not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> renameCategoryWithHttpInfo(UUID organizationUuid, UUID categoryUuid, RenameCategoryRequest renameCategoryRequest) throws ApiException {
        okhttp3.Call localVarCall = renameCategoryValidateBeforeCall(organizationUuid, categoryUuid, renameCategoryRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Rename a category (asynchronously)
     * 
     * @param organizationUuid  (required)
     * @param categoryUuid  (required)
     * @param renameCategoryRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Category renamed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Category already exists </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organization not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call renameCategoryAsync(UUID organizationUuid, UUID categoryUuid, RenameCategoryRequest renameCategoryRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = renameCategoryValidateBeforeCall(organizationUuid, categoryUuid, renameCategoryRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
