/*
 * Product Library API
 * The Product Library API is used for managing merchant's product information and product images.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TaxSettingsResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:43:49.275831-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TaxSettingsResponse {
  public static final String SERIALIZED_NAME_ORGANIZATION_UUID = "organizationUuid";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_UUID)
  private UUID organizationUuid;

  /**
   * Gets or Sets taxationMode
   */
  @JsonAdapter(TaxationModeEnum.Adapter.class)
  public enum TaxationModeEnum {
    EXCLUSIVE("EXCLUSIVE"),
    
    INCLUSIVE("INCLUSIVE");

    private String value;

    TaxationModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TaxationModeEnum fromValue(String value) {
      for (TaxationModeEnum b : TaxationModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TaxationModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TaxationModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TaxationModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TaxationModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TaxationModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TAXATION_MODE = "taxationMode";
  @SerializedName(SERIALIZED_NAME_TAXATION_MODE)
  private TaxationModeEnum taxationMode;

  /**
   * Gets or Sets taxationType
   */
  @JsonAdapter(TaxationTypeEnum.Adapter.class)
  public enum TaxationTypeEnum {
    NONE("NONE"),
    
    SALES_TAX("SALES_TAX"),
    
    VAT("VAT");

    private String value;

    TaxationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TaxationTypeEnum fromValue(String value) {
      for (TaxationTypeEnum b : TaxationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TaxationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TaxationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TaxationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TaxationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TaxationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TAXATION_TYPE = "taxationType";
  @SerializedName(SERIALIZED_NAME_TAXATION_TYPE)
  private TaxationTypeEnum taxationType;

  public TaxSettingsResponse() {
  }

  public TaxSettingsResponse organizationUuid(UUID organizationUuid) {
    this.organizationUuid = organizationUuid;
    return this;
  }

  /**
   * Get organizationUuid
   * @return organizationUuid
   */
  @javax.annotation.Nullable
  public UUID getOrganizationUuid() {
    return organizationUuid;
  }

  public void setOrganizationUuid(UUID organizationUuid) {
    this.organizationUuid = organizationUuid;
  }


  public TaxSettingsResponse taxationMode(TaxationModeEnum taxationMode) {
    this.taxationMode = taxationMode;
    return this;
  }

  /**
   * Get taxationMode
   * @return taxationMode
   */
  @javax.annotation.Nullable
  public TaxationModeEnum getTaxationMode() {
    return taxationMode;
  }

  public void setTaxationMode(TaxationModeEnum taxationMode) {
    this.taxationMode = taxationMode;
  }


  public TaxSettingsResponse taxationType(TaxationTypeEnum taxationType) {
    this.taxationType = taxationType;
    return this;
  }

  /**
   * Get taxationType
   * @return taxationType
   */
  @javax.annotation.Nullable
  public TaxationTypeEnum getTaxationType() {
    return taxationType;
  }

  public void setTaxationType(TaxationTypeEnum taxationType) {
    this.taxationType = taxationType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaxSettingsResponse taxSettingsResponse = (TaxSettingsResponse) o;
    return Objects.equals(this.organizationUuid, taxSettingsResponse.organizationUuid) &&
        Objects.equals(this.taxationMode, taxSettingsResponse.taxationMode) &&
        Objects.equals(this.taxationType, taxSettingsResponse.taxationType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(organizationUuid, taxationMode, taxationType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaxSettingsResponse {\n");
    sb.append("    organizationUuid: ").append(toIndentedString(organizationUuid)).append("\n");
    sb.append("    taxationMode: ").append(toIndentedString(taxationMode)).append("\n");
    sb.append("    taxationType: ").append(toIndentedString(taxationType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("organizationUuid");
    openapiFields.add("taxationMode");
    openapiFields.add("taxationType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TaxSettingsResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TaxSettingsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TaxSettingsResponse is not found in the empty JSON string", TaxSettingsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TaxSettingsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TaxSettingsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("organizationUuid") != null && !jsonObj.get("organizationUuid").isJsonNull()) && !jsonObj.get("organizationUuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organizationUuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organizationUuid").toString()));
      }
      if ((jsonObj.get("taxationMode") != null && !jsonObj.get("taxationMode").isJsonNull()) && !jsonObj.get("taxationMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxationMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxationMode").toString()));
      }
      // validate the optional field `taxationMode`
      if (jsonObj.get("taxationMode") != null && !jsonObj.get("taxationMode").isJsonNull()) {
        TaxationModeEnum.validateJsonElement(jsonObj.get("taxationMode"));
      }
      if ((jsonObj.get("taxationType") != null && !jsonObj.get("taxationType").isJsonNull()) && !jsonObj.get("taxationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxationType").toString()));
      }
      // validate the optional field `taxationType`
      if (jsonObj.get("taxationType") != null && !jsonObj.get("taxationType").isJsonNull()) {
        TaxationTypeEnum.validateJsonElement(jsonObj.get("taxationType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TaxSettingsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TaxSettingsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TaxSettingsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TaxSettingsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<TaxSettingsResponse>() {
           @Override
           public void write(JsonWriter out, TaxSettingsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TaxSettingsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TaxSettingsResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TaxSettingsResponse
   * @throws IOException if the JSON string is invalid with respect to TaxSettingsResponse
   */
  public static TaxSettingsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TaxSettingsResponse.class);
  }

  /**
   * Convert an instance of TaxSettingsResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

