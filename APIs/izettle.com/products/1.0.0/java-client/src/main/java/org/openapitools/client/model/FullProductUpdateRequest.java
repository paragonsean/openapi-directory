/*
 * Product Library API
 * The Product Library API is used for managing merchant's product information and product images.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import java.util.UUID;
import org.openapitools.client.model.CategoryDTO;
import org.openapitools.client.model.MetadataDTO;
import org.openapitools.client.model.OnlineProperties;
import org.openapitools.client.model.PresentationDTO;
import org.openapitools.client.model.VariantDTO;
import org.openapitools.client.model.VariantOptionDefinitions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FullProductUpdateRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:43:49.275831-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FullProductUpdateRequest {
  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private Set<String> categories = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private CategoryDTO category;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EXTERNAL_REFERENCE = "externalReference";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_REFERENCE)
  private String externalReference;

  public static final String SERIALIZED_NAME_IMAGE_LOOKUP_KEYS = "imageLookupKeys";
  @SerializedName(SERIALIZED_NAME_IMAGE_LOOKUP_KEYS)
  private Set<String> imageLookupKeys = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private MetadataDTO metadata;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ONLINE = "online";
  @SerializedName(SERIALIZED_NAME_ONLINE)
  private OnlineProperties online;

  public static final String SERIALIZED_NAME_PRESENTATION = "presentation";
  @SerializedName(SERIALIZED_NAME_PRESENTATION)
  private PresentationDTO presentation;

  public static final String SERIALIZED_NAME_TAX_CODE = "taxCode";
  @SerializedName(SERIALIZED_NAME_TAX_CODE)
  private String taxCode;

  public static final String SERIALIZED_NAME_TAX_EXEMPT = "taxExempt";
  @SerializedName(SERIALIZED_NAME_TAX_EXEMPT)
  private Boolean taxExempt;

  public static final String SERIALIZED_NAME_TAX_RATES = "taxRates";
  @SerializedName(SERIALIZED_NAME_TAX_RATES)
  private Set<UUID> taxRates = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_UNIT_NAME = "unitName";
  @SerializedName(SERIALIZED_NAME_UNIT_NAME)
  private String unitName;

  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private UUID uuid;

  public static final String SERIALIZED_NAME_VARIANT_OPTION_DEFINITIONS = "variantOptionDefinitions";
  @SerializedName(SERIALIZED_NAME_VARIANT_OPTION_DEFINITIONS)
  private VariantOptionDefinitions variantOptionDefinitions;

  public static final String SERIALIZED_NAME_VARIANTS = "variants";
  @SerializedName(SERIALIZED_NAME_VARIANTS)
  private List<VariantDTO> variants = new ArrayList<>();

  public static final String SERIALIZED_NAME_VAT_PERCENTAGE = "vatPercentage";
  @SerializedName(SERIALIZED_NAME_VAT_PERCENTAGE)
  private BigDecimal vatPercentage;

  public FullProductUpdateRequest() {
  }

  public FullProductUpdateRequest categories(Set<String> categories) {
    this.categories = categories;
    return this;
  }

  public FullProductUpdateRequest addCategoriesItem(String categoriesItem) {
    if (this.categories == null) {
      this.categories = new LinkedHashSet<>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

  /**
   * Get categories
   * @return categories
   */
  @javax.annotation.Nullable
  public Set<String> getCategories() {
    return categories;
  }

  public void setCategories(Set<String> categories) {
    this.categories = categories;
  }


  public FullProductUpdateRequest category(CategoryDTO category) {
    this.category = category;
    return this;
  }

  /**
   * Get category
   * @return category
   */
  @javax.annotation.Nullable
  public CategoryDTO getCategory() {
    return category;
  }

  public void setCategory(CategoryDTO category) {
    this.category = category;
  }


  public FullProductUpdateRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public FullProductUpdateRequest externalReference(String externalReference) {
    this.externalReference = externalReference;
    return this;
  }

  /**
   * Get externalReference
   * @return externalReference
   */
  @javax.annotation.Nullable
  public String getExternalReference() {
    return externalReference;
  }

  public void setExternalReference(String externalReference) {
    this.externalReference = externalReference;
  }


  public FullProductUpdateRequest imageLookupKeys(Set<String> imageLookupKeys) {
    this.imageLookupKeys = imageLookupKeys;
    return this;
  }

  public FullProductUpdateRequest addImageLookupKeysItem(String imageLookupKeysItem) {
    if (this.imageLookupKeys == null) {
      this.imageLookupKeys = new LinkedHashSet<>();
    }
    this.imageLookupKeys.add(imageLookupKeysItem);
    return this;
  }

  /**
   * Get imageLookupKeys
   * @return imageLookupKeys
   */
  @javax.annotation.Nullable
  public Set<String> getImageLookupKeys() {
    return imageLookupKeys;
  }

  public void setImageLookupKeys(Set<String> imageLookupKeys) {
    this.imageLookupKeys = imageLookupKeys;
  }


  public FullProductUpdateRequest metadata(MetadataDTO metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public MetadataDTO getMetadata() {
    return metadata;
  }

  public void setMetadata(MetadataDTO metadata) {
    this.metadata = metadata;
  }


  public FullProductUpdateRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public FullProductUpdateRequest online(OnlineProperties online) {
    this.online = online;
    return this;
  }

  /**
   * Get online
   * @return online
   */
  @javax.annotation.Nullable
  public OnlineProperties getOnline() {
    return online;
  }

  public void setOnline(OnlineProperties online) {
    this.online = online;
  }


  public FullProductUpdateRequest presentation(PresentationDTO presentation) {
    this.presentation = presentation;
    return this;
  }

  /**
   * Get presentation
   * @return presentation
   */
  @javax.annotation.Nullable
  public PresentationDTO getPresentation() {
    return presentation;
  }

  public void setPresentation(PresentationDTO presentation) {
    this.presentation = presentation;
  }


  public FullProductUpdateRequest taxCode(String taxCode) {
    this.taxCode = taxCode;
    return this;
  }

  /**
   * Get taxCode
   * @return taxCode
   */
  @javax.annotation.Nullable
  public String getTaxCode() {
    return taxCode;
  }

  public void setTaxCode(String taxCode) {
    this.taxCode = taxCode;
  }


  public FullProductUpdateRequest taxExempt(Boolean taxExempt) {
    this.taxExempt = taxExempt;
    return this;
  }

  /**
   * Get taxExempt
   * @return taxExempt
   */
  @javax.annotation.Nullable
  public Boolean getTaxExempt() {
    return taxExempt;
  }

  public void setTaxExempt(Boolean taxExempt) {
    this.taxExempt = taxExempt;
  }


  public FullProductUpdateRequest taxRates(Set<UUID> taxRates) {
    this.taxRates = taxRates;
    return this;
  }

  public FullProductUpdateRequest addTaxRatesItem(UUID taxRatesItem) {
    if (this.taxRates == null) {
      this.taxRates = new LinkedHashSet<>();
    }
    this.taxRates.add(taxRatesItem);
    return this;
  }

  /**
   * Get taxRates
   * @return taxRates
   */
  @javax.annotation.Nullable
  public Set<UUID> getTaxRates() {
    return taxRates;
  }

  public void setTaxRates(Set<UUID> taxRates) {
    this.taxRates = taxRates;
  }


  public FullProductUpdateRequest unitName(String unitName) {
    this.unitName = unitName;
    return this;
  }

  /**
   * Get unitName
   * @return unitName
   */
  @javax.annotation.Nullable
  public String getUnitName() {
    return unitName;
  }

  public void setUnitName(String unitName) {
    this.unitName = unitName;
  }


  public FullProductUpdateRequest uuid(UUID uuid) {
    this.uuid = uuid;
    return this;
  }

  /**
   * Get uuid
   * @return uuid
   */
  @javax.annotation.Nonnull
  public UUID getUuid() {
    return uuid;
  }

  public void setUuid(UUID uuid) {
    this.uuid = uuid;
  }


  public FullProductUpdateRequest variantOptionDefinitions(VariantOptionDefinitions variantOptionDefinitions) {
    this.variantOptionDefinitions = variantOptionDefinitions;
    return this;
  }

  /**
   * Get variantOptionDefinitions
   * @return variantOptionDefinitions
   */
  @javax.annotation.Nullable
  public VariantOptionDefinitions getVariantOptionDefinitions() {
    return variantOptionDefinitions;
  }

  public void setVariantOptionDefinitions(VariantOptionDefinitions variantOptionDefinitions) {
    this.variantOptionDefinitions = variantOptionDefinitions;
  }


  public FullProductUpdateRequest variants(List<VariantDTO> variants) {
    this.variants = variants;
    return this;
  }

  public FullProductUpdateRequest addVariantsItem(VariantDTO variantsItem) {
    if (this.variants == null) {
      this.variants = new ArrayList<>();
    }
    this.variants.add(variantsItem);
    return this;
  }

  /**
   * Get variants
   * @return variants
   */
  @javax.annotation.Nullable
  public List<VariantDTO> getVariants() {
    return variants;
  }

  public void setVariants(List<VariantDTO> variants) {
    this.variants = variants;
  }


  public FullProductUpdateRequest vatPercentage(BigDecimal vatPercentage) {
    this.vatPercentage = vatPercentage;
    return this;
  }

  /**
   * Get vatPercentage
   * minimum: 0
   * maximum: 100
   * @return vatPercentage
   */
  @javax.annotation.Nullable
  public BigDecimal getVatPercentage() {
    return vatPercentage;
  }

  public void setVatPercentage(BigDecimal vatPercentage) {
    this.vatPercentage = vatPercentage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FullProductUpdateRequest fullProductUpdateRequest = (FullProductUpdateRequest) o;
    return Objects.equals(this.categories, fullProductUpdateRequest.categories) &&
        Objects.equals(this.category, fullProductUpdateRequest.category) &&
        Objects.equals(this.description, fullProductUpdateRequest.description) &&
        Objects.equals(this.externalReference, fullProductUpdateRequest.externalReference) &&
        Objects.equals(this.imageLookupKeys, fullProductUpdateRequest.imageLookupKeys) &&
        Objects.equals(this.metadata, fullProductUpdateRequest.metadata) &&
        Objects.equals(this.name, fullProductUpdateRequest.name) &&
        Objects.equals(this.online, fullProductUpdateRequest.online) &&
        Objects.equals(this.presentation, fullProductUpdateRequest.presentation) &&
        Objects.equals(this.taxCode, fullProductUpdateRequest.taxCode) &&
        Objects.equals(this.taxExempt, fullProductUpdateRequest.taxExempt) &&
        Objects.equals(this.taxRates, fullProductUpdateRequest.taxRates) &&
        Objects.equals(this.unitName, fullProductUpdateRequest.unitName) &&
        Objects.equals(this.uuid, fullProductUpdateRequest.uuid) &&
        Objects.equals(this.variantOptionDefinitions, fullProductUpdateRequest.variantOptionDefinitions) &&
        Objects.equals(this.variants, fullProductUpdateRequest.variants) &&
        Objects.equals(this.vatPercentage, fullProductUpdateRequest.vatPercentage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(categories, category, description, externalReference, imageLookupKeys, metadata, name, online, presentation, taxCode, taxExempt, taxRates, unitName, uuid, variantOptionDefinitions, variants, vatPercentage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FullProductUpdateRequest {\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    externalReference: ").append(toIndentedString(externalReference)).append("\n");
    sb.append("    imageLookupKeys: ").append(toIndentedString(imageLookupKeys)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    online: ").append(toIndentedString(online)).append("\n");
    sb.append("    presentation: ").append(toIndentedString(presentation)).append("\n");
    sb.append("    taxCode: ").append(toIndentedString(taxCode)).append("\n");
    sb.append("    taxExempt: ").append(toIndentedString(taxExempt)).append("\n");
    sb.append("    taxRates: ").append(toIndentedString(taxRates)).append("\n");
    sb.append("    unitName: ").append(toIndentedString(unitName)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    variantOptionDefinitions: ").append(toIndentedString(variantOptionDefinitions)).append("\n");
    sb.append("    variants: ").append(toIndentedString(variants)).append("\n");
    sb.append("    vatPercentage: ").append(toIndentedString(vatPercentage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("categories");
    openapiFields.add("category");
    openapiFields.add("description");
    openapiFields.add("externalReference");
    openapiFields.add("imageLookupKeys");
    openapiFields.add("metadata");
    openapiFields.add("name");
    openapiFields.add("online");
    openapiFields.add("presentation");
    openapiFields.add("taxCode");
    openapiFields.add("taxExempt");
    openapiFields.add("taxRates");
    openapiFields.add("unitName");
    openapiFields.add("uuid");
    openapiFields.add("variantOptionDefinitions");
    openapiFields.add("variants");
    openapiFields.add("vatPercentage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("uuid");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FullProductUpdateRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FullProductUpdateRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FullProductUpdateRequest is not found in the empty JSON string", FullProductUpdateRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FullProductUpdateRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FullProductUpdateRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FullProductUpdateRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("categories") != null && !jsonObj.get("categories").isJsonNull() && !jsonObj.get("categories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `categories` to be an array in the JSON string but got `%s`", jsonObj.get("categories").toString()));
      }
      // validate the optional field `category`
      if (jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) {
        CategoryDTO.validateJsonElement(jsonObj.get("category"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("externalReference") != null && !jsonObj.get("externalReference").isJsonNull()) && !jsonObj.get("externalReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalReference").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("imageLookupKeys") != null && !jsonObj.get("imageLookupKeys").isJsonNull() && !jsonObj.get("imageLookupKeys").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageLookupKeys` to be an array in the JSON string but got `%s`", jsonObj.get("imageLookupKeys").toString()));
      }
      // validate the optional field `metadata`
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) {
        MetadataDTO.validateJsonElement(jsonObj.get("metadata"));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `online`
      if (jsonObj.get("online") != null && !jsonObj.get("online").isJsonNull()) {
        OnlineProperties.validateJsonElement(jsonObj.get("online"));
      }
      // validate the optional field `presentation`
      if (jsonObj.get("presentation") != null && !jsonObj.get("presentation").isJsonNull()) {
        PresentationDTO.validateJsonElement(jsonObj.get("presentation"));
      }
      if ((jsonObj.get("taxCode") != null && !jsonObj.get("taxCode").isJsonNull()) && !jsonObj.get("taxCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxCode").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("taxRates") != null && !jsonObj.get("taxRates").isJsonNull() && !jsonObj.get("taxRates").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxRates` to be an array in the JSON string but got `%s`", jsonObj.get("taxRates").toString()));
      }
      if ((jsonObj.get("unitName") != null && !jsonObj.get("unitName").isJsonNull()) && !jsonObj.get("unitName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unitName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unitName").toString()));
      }
      if (!jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
      // validate the optional field `variantOptionDefinitions`
      if (jsonObj.get("variantOptionDefinitions") != null && !jsonObj.get("variantOptionDefinitions").isJsonNull()) {
        VariantOptionDefinitions.validateJsonElement(jsonObj.get("variantOptionDefinitions"));
      }
      if (jsonObj.get("variants") != null && !jsonObj.get("variants").isJsonNull()) {
        JsonArray jsonArrayvariants = jsonObj.getAsJsonArray("variants");
        if (jsonArrayvariants != null) {
          // ensure the json data is an array
          if (!jsonObj.get("variants").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `variants` to be an array in the JSON string but got `%s`", jsonObj.get("variants").toString()));
          }

          // validate the optional field `variants` (array)
          for (int i = 0; i < jsonArrayvariants.size(); i++) {
            VariantDTO.validateJsonElement(jsonArrayvariants.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FullProductUpdateRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FullProductUpdateRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FullProductUpdateRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FullProductUpdateRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<FullProductUpdateRequest>() {
           @Override
           public void write(JsonWriter out, FullProductUpdateRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FullProductUpdateRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FullProductUpdateRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FullProductUpdateRequest
   * @throws IOException if the JSON string is invalid with respect to FullProductUpdateRequest
   */
  public static FullProductUpdateRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FullProductUpdateRequest.class);
  }

  /**
   * Convert an instance of FullProductUpdateRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

