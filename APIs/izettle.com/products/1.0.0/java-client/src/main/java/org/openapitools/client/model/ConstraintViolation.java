/*
 * Product Library API
 * The Product Library API is used for managing merchant's product information and product images.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ConstraintViolation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:43:49.275831-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConstraintViolation {
  /**
   * Gets or Sets constraintType
   */
  @JsonAdapter(ConstraintTypeEnum.Adapter.class)
  public enum ConstraintTypeEnum {
    MUST_BE_FALSE("MUST_BE_FALSE"),
    
    MUST_BE_TRUE("MUST_BE_TRUE"),
    
    MUST_BE_LESS_THAN("MUST_BE_LESS_THAN"),
    
    MUST_BE_GREATER_THAN("MUST_BE_GREATER_THAN"),
    
    DIGIT_OUT_OF_BOUNDS("DIGIT_OUT_OF_BOUNDS"),
    
    DATE_MUST_BE_IN_THE_FUTURE("DATE_MUST_BE_IN_THE_FUTURE"),
    
    MUST_BE_LESS_OR_EQUAL_THAN("MUST_BE_LESS_OR_EQUAL_THAN"),
    
    MUST_BE_GREATER_OR_EQUAL_TO("MUST_BE_GREATER_OR_EQUAL_TO"),
    
    MUST_NOT_BE_NULL("MUST_NOT_BE_NULL"),
    
    MUST_BE_NULL("MUST_BE_NULL"),
    
    DATE_MUST_BE_IN_THE_PAST("DATE_MUST_BE_IN_THE_PAST"),
    
    MUST_MATCH_PATTERN("MUST_MATCH_PATTERN"),
    
    INVALID_SIZE("INVALID_SIZE"),
    
    INVALID_EMAIL("INVALID_EMAIL"),
    
    MUST_NOT_BE_EMPTY("MUST_NOT_BE_EMPTY"),
    
    INVALID_RANGE("INVALID_RANGE"),
    
    UNKNOWN("UNKNOWN");

    private String value;

    ConstraintTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConstraintTypeEnum fromValue(String value) {
      for (ConstraintTypeEnum b : ConstraintTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConstraintTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConstraintTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConstraintTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConstraintTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ConstraintTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONSTRAINT_TYPE = "constraintType";
  @SerializedName(SERIALIZED_NAME_CONSTRAINT_TYPE)
  private ConstraintTypeEnum constraintType;

  public static final String SERIALIZED_NAME_DEVELOPER_MESSAGE = "developerMessage";
  @SerializedName(SERIALIZED_NAME_DEVELOPER_MESSAGE)
  private String developerMessage;

  public static final String SERIALIZED_NAME_EXPECTED = "expected";
  @SerializedName(SERIALIZED_NAME_EXPECTED)
  private String expected;

  public static final String SERIALIZED_NAME_PROPERTY_NAME = "propertyName";
  @SerializedName(SERIALIZED_NAME_PROPERTY_NAME)
  private String propertyName;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public ConstraintViolation() {
  }

  public ConstraintViolation constraintType(ConstraintTypeEnum constraintType) {
    this.constraintType = constraintType;
    return this;
  }

  /**
   * Get constraintType
   * @return constraintType
   */
  @javax.annotation.Nullable
  public ConstraintTypeEnum getConstraintType() {
    return constraintType;
  }

  public void setConstraintType(ConstraintTypeEnum constraintType) {
    this.constraintType = constraintType;
  }


  public ConstraintViolation developerMessage(String developerMessage) {
    this.developerMessage = developerMessage;
    return this;
  }

  /**
   * Get developerMessage
   * @return developerMessage
   */
  @javax.annotation.Nullable
  public String getDeveloperMessage() {
    return developerMessage;
  }

  public void setDeveloperMessage(String developerMessage) {
    this.developerMessage = developerMessage;
  }


  public ConstraintViolation expected(String expected) {
    this.expected = expected;
    return this;
  }

  /**
   * Get expected
   * @return expected
   */
  @javax.annotation.Nullable
  public String getExpected() {
    return expected;
  }

  public void setExpected(String expected) {
    this.expected = expected;
  }


  public ConstraintViolation propertyName(String propertyName) {
    this.propertyName = propertyName;
    return this;
  }

  /**
   * Get propertyName
   * @return propertyName
   */
  @javax.annotation.Nullable
  public String getPropertyName() {
    return propertyName;
  }

  public void setPropertyName(String propertyName) {
    this.propertyName = propertyName;
  }


  public ConstraintViolation value(String value) {
    this.value = value;
    return this;
  }

  /**
   * Get value
   * @return value
   */
  @javax.annotation.Nullable
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConstraintViolation constraintViolation = (ConstraintViolation) o;
    return Objects.equals(this.constraintType, constraintViolation.constraintType) &&
        Objects.equals(this.developerMessage, constraintViolation.developerMessage) &&
        Objects.equals(this.expected, constraintViolation.expected) &&
        Objects.equals(this.propertyName, constraintViolation.propertyName) &&
        Objects.equals(this.value, constraintViolation.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(constraintType, developerMessage, expected, propertyName, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConstraintViolation {\n");
    sb.append("    constraintType: ").append(toIndentedString(constraintType)).append("\n");
    sb.append("    developerMessage: ").append(toIndentedString(developerMessage)).append("\n");
    sb.append("    expected: ").append(toIndentedString(expected)).append("\n");
    sb.append("    propertyName: ").append(toIndentedString(propertyName)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("constraintType");
    openapiFields.add("developerMessage");
    openapiFields.add("expected");
    openapiFields.add("propertyName");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConstraintViolation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConstraintViolation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConstraintViolation is not found in the empty JSON string", ConstraintViolation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConstraintViolation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConstraintViolation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("constraintType") != null && !jsonObj.get("constraintType").isJsonNull()) && !jsonObj.get("constraintType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `constraintType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("constraintType").toString()));
      }
      // validate the optional field `constraintType`
      if (jsonObj.get("constraintType") != null && !jsonObj.get("constraintType").isJsonNull()) {
        ConstraintTypeEnum.validateJsonElement(jsonObj.get("constraintType"));
      }
      if ((jsonObj.get("developerMessage") != null && !jsonObj.get("developerMessage").isJsonNull()) && !jsonObj.get("developerMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `developerMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("developerMessage").toString()));
      }
      if ((jsonObj.get("expected") != null && !jsonObj.get("expected").isJsonNull()) && !jsonObj.get("expected").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expected` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expected").toString()));
      }
      if ((jsonObj.get("propertyName") != null && !jsonObj.get("propertyName").isJsonNull()) && !jsonObj.get("propertyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `propertyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("propertyName").toString()));
      }
      if ((jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) && !jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConstraintViolation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConstraintViolation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConstraintViolation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConstraintViolation.class));

       return (TypeAdapter<T>) new TypeAdapter<ConstraintViolation>() {
           @Override
           public void write(JsonWriter out, ConstraintViolation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConstraintViolation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConstraintViolation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConstraintViolation
   * @throws IOException if the JSON string is invalid with respect to ConstraintViolation
   */
  public static ConstraintViolation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConstraintViolation.class);
  }

  /**
   * Convert an instance of ConstraintViolation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

