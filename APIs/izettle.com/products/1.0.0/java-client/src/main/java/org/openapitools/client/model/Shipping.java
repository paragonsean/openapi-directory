/*
 * Product Library API
 * The Product Library API is used for managing merchant's product information and product images.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Weight;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Shipping
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:43:49.275831-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Shipping {
  /**
   * Gets or Sets shippingPricingModel
   */
  @JsonAdapter(ShippingPricingModelEnum.Adapter.class)
  public enum ShippingPricingModelEnum {
    FREE("FREE"),
    
    STANDARD("STANDARD");

    private String value;

    ShippingPricingModelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ShippingPricingModelEnum fromValue(String value) {
      for (ShippingPricingModelEnum b : ShippingPricingModelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ShippingPricingModelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ShippingPricingModelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ShippingPricingModelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ShippingPricingModelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ShippingPricingModelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SHIPPING_PRICING_MODEL = "shippingPricingModel";
  @SerializedName(SERIALIZED_NAME_SHIPPING_PRICING_MODEL)
  private ShippingPricingModelEnum shippingPricingModel;

  public static final String SERIALIZED_NAME_WEIGHT = "weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  private Weight weight;

  public static final String SERIALIZED_NAME_WEIGHT_IN_GRAMS = "weightInGrams";
  @SerializedName(SERIALIZED_NAME_WEIGHT_IN_GRAMS)
  private Long weightInGrams;

  public Shipping() {
  }

  public Shipping shippingPricingModel(ShippingPricingModelEnum shippingPricingModel) {
    this.shippingPricingModel = shippingPricingModel;
    return this;
  }

  /**
   * Get shippingPricingModel
   * @return shippingPricingModel
   */
  @javax.annotation.Nullable
  public ShippingPricingModelEnum getShippingPricingModel() {
    return shippingPricingModel;
  }

  public void setShippingPricingModel(ShippingPricingModelEnum shippingPricingModel) {
    this.shippingPricingModel = shippingPricingModel;
  }


  public Shipping weight(Weight weight) {
    this.weight = weight;
    return this;
  }

  /**
   * Get weight
   * @return weight
   */
  @javax.annotation.Nullable
  public Weight getWeight() {
    return weight;
  }

  public void setWeight(Weight weight) {
    this.weight = weight;
  }


  public Shipping weightInGrams(Long weightInGrams) {
    this.weightInGrams = weightInGrams;
    return this;
  }

  /**
   * Get weightInGrams
   * minimum: 0
   * maximum: 2147483647
   * @return weightInGrams
   */
  @javax.annotation.Nullable
  public Long getWeightInGrams() {
    return weightInGrams;
  }

  public void setWeightInGrams(Long weightInGrams) {
    this.weightInGrams = weightInGrams;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Shipping shipping = (Shipping) o;
    return Objects.equals(this.shippingPricingModel, shipping.shippingPricingModel) &&
        Objects.equals(this.weight, shipping.weight) &&
        Objects.equals(this.weightInGrams, shipping.weightInGrams);
  }

  @Override
  public int hashCode() {
    return Objects.hash(shippingPricingModel, weight, weightInGrams);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Shipping {\n");
    sb.append("    shippingPricingModel: ").append(toIndentedString(shippingPricingModel)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("    weightInGrams: ").append(toIndentedString(weightInGrams)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("shippingPricingModel");
    openapiFields.add("weight");
    openapiFields.add("weightInGrams");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Shipping
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Shipping.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Shipping is not found in the empty JSON string", Shipping.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Shipping.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Shipping` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("shippingPricingModel") != null && !jsonObj.get("shippingPricingModel").isJsonNull()) && !jsonObj.get("shippingPricingModel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shippingPricingModel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shippingPricingModel").toString()));
      }
      // validate the optional field `shippingPricingModel`
      if (jsonObj.get("shippingPricingModel") != null && !jsonObj.get("shippingPricingModel").isJsonNull()) {
        ShippingPricingModelEnum.validateJsonElement(jsonObj.get("shippingPricingModel"));
      }
      // validate the optional field `weight`
      if (jsonObj.get("weight") != null && !jsonObj.get("weight").isJsonNull()) {
        Weight.validateJsonElement(jsonObj.get("weight"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Shipping.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Shipping' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Shipping> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Shipping.class));

       return (TypeAdapter<T>) new TypeAdapter<Shipping>() {
           @Override
           public void write(JsonWriter out, Shipping value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Shipping read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Shipping given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Shipping
   * @throws IOException if the JSON string is invalid with respect to Shipping
   */
  public static Shipping fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Shipping.class);
  }

  /**
   * Convert an instance of Shipping to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

