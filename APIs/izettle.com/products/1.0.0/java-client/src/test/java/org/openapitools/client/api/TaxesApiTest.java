/*
 * Product Library API
 * The Product Library API is used for managing merchant's product information and product images.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.TaxRate;
import org.openapitools.client.model.TaxRateProductCountResponse;
import org.openapitools.client.model.TaxRateUpdateRequest;
import org.openapitools.client.model.TaxRatesCreateRequest;
import org.openapitools.client.model.TaxRatesResponse;
import org.openapitools.client.model.TaxSettingsResponse;
import org.openapitools.client.model.TaxSettingsUpdateRequest;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TaxesApi
 */
@Disabled
public class TaxesApiTest {

    private final TaxesApi api = new TaxesApi();

    /**
     * Create new tax rates
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTaxRatesTest() throws ApiException {
        TaxRatesCreateRequest taxRatesCreateRequest = null;
        TaxRatesResponse response = api.createTaxRates(taxRatesCreateRequest);
        // TODO: test validations
    }

    /**
     * Delete a single tax rate
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTaxRateTest() throws ApiException {
        UUID taxRateUuid = null;
        api.deleteTaxRate(taxRateUuid);
        // TODO: test validations
    }

    /**
     * Get all tax rates and a count of products associated with each
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProductCountForAllTaxesTest() throws ApiException {
        TaxRateProductCountResponse response = api.getProductCountForAllTaxes();
        // TODO: test validations
    }

    /**
     * Get a single tax rate
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTaxRateTest() throws ApiException {
        UUID taxRateUuid = null;
        TaxRate response = api.getTaxRate(taxRateUuid);
        // TODO: test validations
    }

    /**
     * Get all available tax rates
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTaxRatesTest() throws ApiException {
        List<TaxRatesResponse> response = api.getTaxRates();
        // TODO: test validations
    }

    /**
     * Get the organization tax settings 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTaxSettingsTest() throws ApiException {
        TaxSettingsResponse response = api.getTaxSettings();
        // TODO: test validations
    }

    /**
     * Update the organization tax settings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setTaxationModeTest() throws ApiException {
        TaxSettingsUpdateRequest taxSettingsUpdateRequest = null;
        TaxSettingsResponse response = api.setTaxationMode(taxSettingsUpdateRequest);
        // TODO: test validations
    }

    /**
     * Update a single tax rate
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTaxRateTest() throws ApiException {
        UUID taxRateUuid = null;
        TaxRateUpdateRequest taxRateUpdateRequest = null;
        TaxRate response = api.updateTaxRate(taxRateUuid, taxRateUpdateRequest);
        // TODO: test validations
    }

}
