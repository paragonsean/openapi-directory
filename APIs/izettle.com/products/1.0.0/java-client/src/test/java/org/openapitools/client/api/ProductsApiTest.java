/*
 * Product Library API
 * The Product Library API is used for managing merchant's product information and product images.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.FullProductUpdateRequest;
import org.openapitools.client.model.ProductCountResponse;
import org.openapitools.client.model.ProductCreateRequest;
import org.openapitools.client.model.ProductResponse;
import java.util.UUID;
import org.openapitools.client.model.VariantOptionsResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProductsApi
 */
@Disabled
public class ProductsApiTest {

    private final ProductsApi api = new ProductsApi();

    /**
     * Retrieve the count of existing products
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void countAllProductsTest() throws ApiException {
        UUID organizationUuid = null;
        List<ProductCountResponse> response = api.countAllProducts(organizationUuid);
        // TODO: test validations
    }

    /**
     * Create a new product
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createProductTest() throws ApiException {
        UUID organizationUuid = null;
        ProductCreateRequest productCreateRequest = null;
        Boolean returnEntity = null;
        ProductResponse response = api.createProduct(organizationUuid, productCreateRequest, returnEntity);
        // TODO: test validations
    }

    /**
     * Delete a single product
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteProductTest() throws ApiException {
        UUID organizationUuid = null;
        UUID productUuid = null;
        api.deleteProduct(organizationUuid, productUuid);
        // TODO: test validations
    }

    /**
     * Delete a list of products
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteProductsTest() throws ApiException {
        UUID organizationUuid = null;
        List<UUID> uuid = null;
        api.deleteProducts(organizationUuid, uuid);
        // TODO: test validations
    }

    /**
     * Retrieve an aggregate of active Options in the library
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllOptionsTest() throws ApiException {
        UUID organizationUuid = null;
        List<VariantOptionsResponse> response = api.getAllOptions(organizationUuid);
        // TODO: test validations
    }

    /**
     * Retrieve all products visible in POS
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllProductsInPosTest() throws ApiException {
        UUID organizationUuid = null;
        List<ProductResponse> response = api.getAllProductsInPos(organizationUuid);
        // TODO: test validations
    }

    /**
     * Retrieve all products visible in POS â€“ v2
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllProductsV2Test() throws ApiException {
        UUID organizationUuid = null;
        Boolean sort = null;
        List<ProductResponse> response = api.getAllProductsV2(organizationUuid, sort);
        // TODO: test validations
    }

    /**
     * Retrieve a single product
     *
     * Get the full product with the provided UUID. The method supports conditional GET through providing a HttpHeaders.IF_NONE_MATCH header. If the conditional prerequisite is fullfilled, the full product is returned, otherwise a 304 not modified will be returned with an empty body.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProductTest() throws ApiException {
        UUID organizationUuid = null;
        UUID productUuid = null;
        String ifNoneMatch = null;
        ProductResponse response = api.getProduct(organizationUuid, productUuid, ifNoneMatch);
        // TODO: test validations
    }

    /**
     * Update a single product
     *
     * Updates a product entity using JSON merge patch (https://tools.ietf.org/html/rfc7386). This means that only included fields will be changed: null values removes the field on the target entity, and other values updates the field. Conditional updates are supported through the HttpHeaders.IF_MATCH header. If the conditional prerequisite is fullfilled, the product is updated: otherwise a 412 (precondition failed) will be returned with an empty body.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProductTest() throws ApiException {
        UUID organizationUuid = null;
        UUID productUuid = null;
        FullProductUpdateRequest fullProductUpdateRequest = null;
        String ifMatch = null;
        api.updateProduct(organizationUuid, productUuid, fullProductUpdateRequest, ifMatch);
        // TODO: test validations
    }

}
