/**
 * The Consumer Financial Protection Bureau
 * Learn more about home mortgage data, download the data yourself, or build new tools using our API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIHmdaApi_H
#define OAI_OAIHmdaApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIQueryResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIHmdaApi : public QObject {
    Q_OBJECT

public:
    OAIHmdaApi(const int timeOut = 0);
    ~OAIHmdaApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  r_concept QString [required]
    */
    virtual void getConceptHmda(const QString &r_concept);


    virtual void getDatasetHmda();

    /**
    * @param[in]  slice QString [required]
    */
    virtual void getSliceMetadataHmda(const QString &slice);

    /**
    * @param[in]  slice QString [required]
    * @param[in]  select QString [optional]
    * @param[in]  where QString [optional]
    * @param[in]  group QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void querySliceHmda(const QString &slice, const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &where = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getConceptHmdaCallback(OAIHttpRequestWorker *worker);
    void getDatasetHmdaCallback(OAIHttpRequestWorker *worker);
    void getSliceMetadataHmdaCallback(OAIHttpRequestWorker *worker);
    void querySliceHmdaCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getConceptHmdaSignal();
    void getDatasetHmdaSignal();
    void getSliceMetadataHmdaSignal();
    void querySliceHmdaSignal(OAIQueryResponse summary);


    void getConceptHmdaSignalFull(OAIHttpRequestWorker *worker);
    void getDatasetHmdaSignalFull(OAIHttpRequestWorker *worker);
    void getSliceMetadataHmdaSignalFull(OAIHttpRequestWorker *worker);
    void querySliceHmdaSignalFull(OAIHttpRequestWorker *worker, OAIQueryResponse summary);

    Q_DECL_DEPRECATED_X("Use getConceptHmdaSignalError() instead")
    void getConceptHmdaSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getConceptHmdaSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDatasetHmdaSignalError() instead")
    void getDatasetHmdaSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getDatasetHmdaSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSliceMetadataHmdaSignalError() instead")
    void getSliceMetadataHmdaSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getSliceMetadataHmdaSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use querySliceHmdaSignalError() instead")
    void querySliceHmdaSignalE(OAIQueryResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void querySliceHmdaSignalError(OAIQueryResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getConceptHmdaSignalErrorFull() instead")
    void getConceptHmdaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getConceptHmdaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDatasetHmdaSignalErrorFull() instead")
    void getDatasetHmdaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDatasetHmdaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSliceMetadataHmdaSignalErrorFull() instead")
    void getSliceMetadataHmdaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSliceMetadataHmdaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use querySliceHmdaSignalErrorFull() instead")
    void querySliceHmdaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void querySliceHmdaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
