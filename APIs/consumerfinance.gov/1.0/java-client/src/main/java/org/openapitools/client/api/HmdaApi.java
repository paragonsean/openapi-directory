/*
 * The Consumer Financial Protection Bureau
 * Learn more about home mortgage data, download the data yourself, or build new tools using our API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.QueryResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class HmdaApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public HmdaApi() {
        this(Configuration.getDefaultApiClient());
    }

    public HmdaApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getConceptHmda
     * @param concept Name of concept (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConceptHmdaCall(String concept, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/hmda/concept/{concept}"
            .replace("{" + "concept" + "}", localVarApiClient.escapeString(concept.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConceptHmdaValidateBeforeCall(String concept, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'concept' is set
        if (concept == null) {
            throw new ApiException("Missing the required parameter 'concept' when calling getConceptHmda(Async)");
        }

        return getConceptHmdaCall(concept, _callback);

    }

    /**
     * Get information about a particular concept in this dataset.
     * 
     * @param concept Name of concept (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void getConceptHmda(String concept) throws ApiException {
        getConceptHmdaWithHttpInfo(concept);
    }

    /**
     * Get information about a particular concept in this dataset.
     * 
     * @param concept Name of concept (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getConceptHmdaWithHttpInfo(String concept) throws ApiException {
        okhttp3.Call localVarCall = getConceptHmdaValidateBeforeCall(concept, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get information about a particular concept in this dataset. (asynchronously)
     * 
     * @param concept Name of concept (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConceptHmdaAsync(String concept, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConceptHmdaValidateBeforeCall(concept, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDatasetHmda
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDatasetHmdaCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/hmda";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDatasetHmdaValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getDatasetHmdaCall(_callback);

    }

    /**
     * Get metadata for this dataset.
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void getDatasetHmda() throws ApiException {
        getDatasetHmdaWithHttpInfo();
    }

    /**
     * Get metadata for this dataset.
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getDatasetHmdaWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getDatasetHmdaValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get metadata for this dataset. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDatasetHmdaAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDatasetHmdaValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSliceMetadataHmda
     * @param slice Name of slice (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSliceMetadataHmdaCall(String slice, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/hmda/slice/{slice}/metadata"
            .replace("{" + "slice" + "}", localVarApiClient.escapeString(slice.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSliceMetadataHmdaValidateBeforeCall(String slice, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'slice' is set
        if (slice == null) {
            throw new ApiException("Missing the required parameter 'slice' when calling getSliceMetadataHmda(Async)");
        }

        return getSliceMetadataHmdaCall(slice, _callback);

    }

    /**
     * Get the metadata for a slice in this dataset.
     * 
     * @param slice Name of slice (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void getSliceMetadataHmda(String slice) throws ApiException {
        getSliceMetadataHmdaWithHttpInfo(slice);
    }

    /**
     * Get the metadata for a slice in this dataset.
     * 
     * @param slice Name of slice (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getSliceMetadataHmdaWithHttpInfo(String slice) throws ApiException {
        okhttp3.Call localVarCall = getSliceMetadataHmdaValidateBeforeCall(slice, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get the metadata for a slice in this dataset. (asynchronously)
     * 
     * @param slice Name of slice (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSliceMetadataHmdaAsync(String slice, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSliceMetadataHmdaValidateBeforeCall(slice, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for querySliceHmda
     * @param slice Name of slice (required)
     * @param $select Fields to return, separated by commas. (optional)
     * @param $where Conditions to search for in the slice, in SQL WHERE style. (optional)
     * @param $group Fields to group by, summarizing the data, separated by commas. (optional)
     * @param $limit Number of records to return, 100 by default. Enter 0 for no limit. (optional)
     * @param $offset Number of records to skip. (optional)
     * @param $orderBy Fields to order by, separated by commas. ASC and DESC can be used to modify the order. (optional)
     * @param $callback JavaScript callback to invoke. Only useful with JSONP requests. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call querySliceHmdaCall(String slice, String $select, String $where, String $group, Integer $limit, Integer $offset, String $orderBy, String $callback, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/hmda/slice/{slice}"
            .replace("{" + "slice" + "}", localVarApiClient.escapeString(slice.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($select != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$select", $select));
        }

        if ($where != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$where", $where));
        }

        if ($group != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$group", $group));
        }

        if ($limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$limit", $limit));
        }

        if ($offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$offset", $offset));
        }

        if ($orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$orderBy", $orderBy));
        }

        if ($callback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$callback", $callback));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/javascript",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call querySliceHmdaValidateBeforeCall(String slice, String $select, String $where, String $group, Integer $limit, Integer $offset, String $orderBy, String $callback, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'slice' is set
        if (slice == null) {
            throw new ApiException("Missing the required parameter 'slice' when calling querySliceHmda(Async)");
        }

        return querySliceHmdaCall(slice, $select, $where, $group, $limit, $offset, $orderBy, $callback, _callback);

    }

    /**
     * Query a slice in this dataset.
     * 
     * @param slice Name of slice (required)
     * @param $select Fields to return, separated by commas. (optional)
     * @param $where Conditions to search for in the slice, in SQL WHERE style. (optional)
     * @param $group Fields to group by, summarizing the data, separated by commas. (optional)
     * @param $limit Number of records to return, 100 by default. Enter 0 for no limit. (optional)
     * @param $offset Number of records to skip. (optional)
     * @param $orderBy Fields to order by, separated by commas. ASC and DESC can be used to modify the order. (optional)
     * @param $callback JavaScript callback to invoke. Only useful with JSONP requests. (optional)
     * @return QueryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public QueryResponse querySliceHmda(String slice, String $select, String $where, String $group, Integer $limit, Integer $offset, String $orderBy, String $callback) throws ApiException {
        ApiResponse<QueryResponse> localVarResp = querySliceHmdaWithHttpInfo(slice, $select, $where, $group, $limit, $offset, $orderBy, $callback);
        return localVarResp.getData();
    }

    /**
     * Query a slice in this dataset.
     * 
     * @param slice Name of slice (required)
     * @param $select Fields to return, separated by commas. (optional)
     * @param $where Conditions to search for in the slice, in SQL WHERE style. (optional)
     * @param $group Fields to group by, summarizing the data, separated by commas. (optional)
     * @param $limit Number of records to return, 100 by default. Enter 0 for no limit. (optional)
     * @param $offset Number of records to skip. (optional)
     * @param $orderBy Fields to order by, separated by commas. ASC and DESC can be used to modify the order. (optional)
     * @param $callback JavaScript callback to invoke. Only useful with JSONP requests. (optional)
     * @return ApiResponse&lt;QueryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QueryResponse> querySliceHmdaWithHttpInfo(String slice, String $select, String $where, String $group, Integer $limit, Integer $offset, String $orderBy, String $callback) throws ApiException {
        okhttp3.Call localVarCall = querySliceHmdaValidateBeforeCall(slice, $select, $where, $group, $limit, $offset, $orderBy, $callback, null);
        Type localVarReturnType = new TypeToken<QueryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Query a slice in this dataset. (asynchronously)
     * 
     * @param slice Name of slice (required)
     * @param $select Fields to return, separated by commas. (optional)
     * @param $where Conditions to search for in the slice, in SQL WHERE style. (optional)
     * @param $group Fields to group by, summarizing the data, separated by commas. (optional)
     * @param $limit Number of records to return, 100 by default. Enter 0 for no limit. (optional)
     * @param $offset Number of records to skip. (optional)
     * @param $orderBy Fields to order by, separated by commas. ASC and DESC can be used to modify the order. (optional)
     * @param $callback JavaScript callback to invoke. Only useful with JSONP requests. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call querySliceHmdaAsync(String slice, String $select, String $where, String $group, Integer $limit, Integer $offset, String $orderBy, String $callback, final ApiCallback<QueryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = querySliceHmdaValidateBeforeCall(slice, $select, $where, $group, $limit, $offset, $orderBy, $callback, _callback);
        Type localVarReturnType = new TypeToken<QueryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
