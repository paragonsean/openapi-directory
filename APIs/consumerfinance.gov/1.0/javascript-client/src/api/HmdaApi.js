/**
 * The Consumer Financial Protection Bureau
 * Learn more about home mortgage data, download the data yourself, or build new tools using our API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import QueryResponse from '../model/QueryResponse';

/**
* Hmda service.
* @module api/HmdaApi
* @version 1.0
*/
export default class HmdaApi {

    /**
    * Constructs a new HmdaApi. 
    * @alias module:api/HmdaApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getConceptHmda operation.
     * @callback module:api/HmdaApi~getConceptHmdaCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get information about a particular concept in this dataset.
     * @param {String} concept Name of concept
     * @param {module:api/HmdaApi~getConceptHmdaCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getConceptHmda(concept, callback) {
      let postBody = null;
      // verify the required parameter 'concept' is set
      if (concept === undefined || concept === null) {
        throw new Error("Missing the required parameter 'concept' when calling getConceptHmda");
      }

      let pathParams = {
        'concept': concept
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/data/hmda/concept/{concept}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDatasetHmda operation.
     * @callback module:api/HmdaApi~getDatasetHmdaCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get metadata for this dataset.
     * @param {module:api/HmdaApi~getDatasetHmdaCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getDatasetHmda(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/data/hmda', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSliceMetadataHmda operation.
     * @callback module:api/HmdaApi~getSliceMetadataHmdaCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the metadata for a slice in this dataset.
     * @param {String} slice Name of slice
     * @param {module:api/HmdaApi~getSliceMetadataHmdaCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSliceMetadataHmda(slice, callback) {
      let postBody = null;
      // verify the required parameter 'slice' is set
      if (slice === undefined || slice === null) {
        throw new Error("Missing the required parameter 'slice' when calling getSliceMetadataHmda");
      }

      let pathParams = {
        'slice': slice
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/data/hmda/slice/{slice}/metadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the querySliceHmda operation.
     * @callback module:api/HmdaApi~querySliceHmdaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QueryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query a slice in this dataset.
     * @param {String} slice Name of slice
     * @param {Object} opts Optional parameters
     * @param {String} [select] Fields to return, separated by commas.
     * @param {String} [where] Conditions to search for in the slice, in SQL WHERE style.
     * @param {String} [group] Fields to group by, summarizing the data, separated by commas.
     * @param {Number} [limit] Number of records to return, 100 by default. Enter 0 for no limit.
     * @param {Number} [offset] Number of records to skip.
     * @param {String} [orderBy] Fields to order by, separated by commas. ASC and DESC can be used to modify the order.
     * @param {String} [callback] JavaScript callback to invoke. Only useful with JSONP requests.
     * @param {module:api/HmdaApi~querySliceHmdaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QueryResponse}
     */
    querySliceHmda(slice, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'slice' is set
      if (slice === undefined || slice === null) {
        throw new Error("Missing the required parameter 'slice' when calling querySliceHmda");
      }

      let pathParams = {
        'slice': slice
      };
      let queryParams = {
        '$select': opts['select'],
        '$where': opts['where'],
        '$group': opts['group'],
        '$limit': opts['limit'],
        '$offset': opts['offset'],
        '$orderBy': opts['orderBy'],
        '$callback': opts['callback']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/javascript', 'text/csv'];
      let returnType = QueryResponse;
      return this.apiClient.callApi(
        '/data/hmda/slice/{slice}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
