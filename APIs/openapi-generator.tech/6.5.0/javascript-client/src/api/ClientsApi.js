/**
 * OpenAPI Generator Online
 * This is an online openapi generator server.  You can find out more at https://github.com/OpenAPITools/openapi-generator.
 *
 * The version of the OpenAPI document: 6.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CliOption from '../model/CliOption';
import GeneratorInput from '../model/GeneratorInput';
import ResponseCode from '../model/ResponseCode';

/**
* Clients service.
* @module api/ClientsApi
* @version 6.5.0
*/
export default class ClientsApi {

    /**
    * Constructs a new ClientsApi. 
    * @alias module:api/ClientsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the clientOptions operation.
     * @callback module:api/ClientsApi~clientOptionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets languages supported by the client generator
     * @param {module:api/ClientsApi~clientOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    clientOptions(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/api/gen/clients', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the downloadFile operation.
     * @callback module:api/ClientsApi~downloadFileCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Downloads a pre-generated file
     * A valid `fileId` is generated by the `/clients/{language}` or `/servers/{language}` POST operations.  The fileId code can be used just once, after which a new `fileId` will need to be requested.
     * @param {String} fileId fileId
     * @param {module:api/ClientsApi~downloadFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    downloadFile(fileId, callback) {
      let postBody = null;
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling downloadFile");
      }

      let pathParams = {
        'fileId': fileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = File;
      return this.apiClient.callApi(
        '/api/gen/download/{fileId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the generateClient operation.
     * @callback module:api/ClientsApi~generateClientCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseCode} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generates a client library
     * Accepts a `GeneratorInput` options map for spec location and generation options
     * @param {String} language The target language for the client library
     * @param {module:model/GeneratorInput} generatorInput Configuration for building the client library
     * @param {module:api/ClientsApi~generateClientCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseCode}
     */
    generateClient(language, generatorInput, callback) {
      let postBody = generatorInput;
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling generateClient");
      }
      // verify the required parameter 'generatorInput' is set
      if (generatorInput === undefined || generatorInput === null) {
        throw new Error("Missing the required parameter 'generatorInput' when calling generateClient");
      }

      let pathParams = {
        'language': language
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResponseCode;
      return this.apiClient.callApi(
        '/api/gen/clients/{language}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getClientOptions operation.
     * @callback module:api/ClientsApi~getClientOptionsCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, module:model/{String: CliOption}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns options for a client library
     * @param {String} language The target language for the client library
     * @param {module:api/ClientsApi~getClientOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, module:model/{String: CliOption}>}
     */
    getClientOptions(language, callback) {
      let postBody = null;
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling getClientOptions");
      }

      let pathParams = {
        'language': language
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': CliOption};
      return this.apiClient.callApi(
        '/api/gen/clients/{language}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
