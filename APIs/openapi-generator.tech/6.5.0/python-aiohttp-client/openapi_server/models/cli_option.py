# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CliOption(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default: str=None, description: str=None, enum: Dict[str, str]=None, opt: str=None, opt_value: str=None, type: str=None):
        """CliOption - a model defined in OpenAPI

        :param default: The default of this CliOption.
        :param description: The description of this CliOption.
        :param enum: The enum of this CliOption.
        :param opt: The opt of this CliOption.
        :param opt_value: The opt_value of this CliOption.
        :param type: The type of this CliOption.
        """
        self.openapi_types = {
            'default': str,
            'description': str,
            'enum': Dict[str, str],
            'opt': str,
            'opt_value': str,
            'type': str
        }

        self.attribute_map = {
            'default': 'default',
            'description': 'description',
            'enum': 'enum',
            'opt': 'opt',
            'opt_value': 'optValue',
            'type': 'type'
        }

        self._default = default
        self._description = description
        self._enum = enum
        self._opt = opt
        self._opt_value = opt_value
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CliOption':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CliOption of this CliOption.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default(self):
        """Gets the default of this CliOption.


        :return: The default of this CliOption.
        :rtype: str
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this CliOption.


        :param default: The default of this CliOption.
        :type default: str
        """

        self._default = default

    @property
    def description(self):
        """Gets the description of this CliOption.


        :return: The description of this CliOption.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CliOption.


        :param description: The description of this CliOption.
        :type description: str
        """

        self._description = description

    @property
    def enum(self):
        """Gets the enum of this CliOption.


        :return: The enum of this CliOption.
        :rtype: Dict[str, str]
        """
        return self._enum

    @enum.setter
    def enum(self, enum):
        """Sets the enum of this CliOption.


        :param enum: The enum of this CliOption.
        :type enum: Dict[str, str]
        """

        self._enum = enum

    @property
    def opt(self):
        """Gets the opt of this CliOption.


        :return: The opt of this CliOption.
        :rtype: str
        """
        return self._opt

    @opt.setter
    def opt(self, opt):
        """Sets the opt of this CliOption.


        :param opt: The opt of this CliOption.
        :type opt: str
        """

        self._opt = opt

    @property
    def opt_value(self):
        """Gets the opt_value of this CliOption.


        :return: The opt_value of this CliOption.
        :rtype: str
        """
        return self._opt_value

    @opt_value.setter
    def opt_value(self, opt_value):
        """Sets the opt_value of this CliOption.


        :param opt_value: The opt_value of this CliOption.
        :type opt_value: str
        """

        self._opt_value = opt_value

    @property
    def type(self):
        """Gets the type of this CliOption.


        :return: The type of this CliOption.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CliOption.


        :param type: The type of this CliOption.
        :type type: str
        """

        self._type = type
