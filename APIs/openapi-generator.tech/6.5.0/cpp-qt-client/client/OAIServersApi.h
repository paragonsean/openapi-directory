/**
 * OpenAPI Generator Online
 * This is an online openapi generator server.  You can find out more at https://github.com/OpenAPITools/openapi-generator.
 *
 * The version of the OpenAPI document: 6.5.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIServersApi_H
#define OAI_OAIServersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICliOption.h"
#include "OAIGeneratorInput.h"
#include "OAIHttpFileElement.h"
#include "OAIResponseCode.h"
#include <QMap>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIServersApi : public QObject {
    Q_OBJECT

public:
    OAIServersApi(const int timeOut = 0);
    ~OAIServersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  file_id QString [required]
    */
    virtual void downloadFile(const QString &file_id);

    /**
    * @param[in]  framework QString [required]
    * @param[in]  oai_generator_input OAIGeneratorInput [required]
    */
    virtual void generateServerForLanguage(const QString &framework, const OAIGeneratorInput &oai_generator_input);

    /**
    * @param[in]  framework QString [required]
    */
    virtual void getServerOptions(const QString &framework);


    virtual void serverOptions();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void downloadFileCallback(OAIHttpRequestWorker *worker);
    void generateServerForLanguageCallback(OAIHttpRequestWorker *worker);
    void getServerOptionsCallback(OAIHttpRequestWorker *worker);
    void serverOptionsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void downloadFileSignal(OAIHttpFileElement summary);
    void generateServerForLanguageSignal(OAIResponseCode summary);
    void getServerOptionsSignal(QMap<QString, OAICliOption> summary);
    void serverOptionsSignal(QList<QString> summary);


    void downloadFileSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void generateServerForLanguageSignalFull(OAIHttpRequestWorker *worker, OAIResponseCode summary);
    void getServerOptionsSignalFull(OAIHttpRequestWorker *worker, QMap<QString, OAICliOption> summary);
    void serverOptionsSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);

    Q_DECL_DEPRECATED_X("Use downloadFileSignalError() instead")
    void downloadFileSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadFileSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateServerForLanguageSignalError() instead")
    void generateServerForLanguageSignalE(OAIResponseCode summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateServerForLanguageSignalError(OAIResponseCode summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServerOptionsSignalError() instead")
    void getServerOptionsSignalE(QMap<QString, OAICliOption> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getServerOptionsSignalError(QMap<QString, OAICliOption> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverOptionsSignalError() instead")
    void serverOptionsSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serverOptionsSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use downloadFileSignalErrorFull() instead")
    void downloadFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateServerForLanguageSignalErrorFull() instead")
    void generateServerForLanguageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateServerForLanguageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServerOptionsSignalErrorFull() instead")
    void getServerOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getServerOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverOptionsSignalErrorFull() instead")
    void serverOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serverOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
