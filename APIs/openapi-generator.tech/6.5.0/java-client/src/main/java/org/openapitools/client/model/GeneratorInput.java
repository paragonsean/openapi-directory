/*
 * OpenAPI Generator Online
 * This is an online openapi generator server.  You can find out more at https://github.com/OpenAPITools/openapi-generator.
 *
 * The version of the OpenAPI document: 6.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.AuthorizationValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GeneratorInput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:23.759379-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GeneratorInput {
  public static final String SERIALIZED_NAME_AUTHORIZATION_VALUE = "authorizationValue";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_VALUE)
  private AuthorizationValue authorizationValue;

  public static final String SERIALIZED_NAME_OPEN_A_P_I_URL = "openAPIUrl";
  @SerializedName(SERIALIZED_NAME_OPEN_A_P_I_URL)
  private String openAPIUrl;

  public static final String SERIALIZED_NAME_OPTIONS = "options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private Map<String, String> options = new HashMap<>();

  public static final String SERIALIZED_NAME_SPEC = "spec";
  @SerializedName(SERIALIZED_NAME_SPEC)
  private Object spec;

  public GeneratorInput() {
  }

  public GeneratorInput authorizationValue(AuthorizationValue authorizationValue) {
    this.authorizationValue = authorizationValue;
    return this;
  }

  /**
   * Get authorizationValue
   * @return authorizationValue
   */
  @javax.annotation.Nullable
  public AuthorizationValue getAuthorizationValue() {
    return authorizationValue;
  }

  public void setAuthorizationValue(AuthorizationValue authorizationValue) {
    this.authorizationValue = authorizationValue;
  }


  public GeneratorInput openAPIUrl(String openAPIUrl) {
    this.openAPIUrl = openAPIUrl;
    return this;
  }

  /**
   * Get openAPIUrl
   * @return openAPIUrl
   */
  @javax.annotation.Nullable
  public String getOpenAPIUrl() {
    return openAPIUrl;
  }

  public void setOpenAPIUrl(String openAPIUrl) {
    this.openAPIUrl = openAPIUrl;
  }


  public GeneratorInput options(Map<String, String> options) {
    this.options = options;
    return this;
  }

  public GeneratorInput putOptionsItem(String key, String optionsItem) {
    if (this.options == null) {
      this.options = new HashMap<>();
    }
    this.options.put(key, optionsItem);
    return this;
  }

  /**
   * Get options
   * @return options
   */
  @javax.annotation.Nullable
  public Map<String, String> getOptions() {
    return options;
  }

  public void setOptions(Map<String, String> options) {
    this.options = options;
  }


  public GeneratorInput spec(Object spec) {
    this.spec = spec;
    return this;
  }

  /**
   * Get spec
   * @return spec
   */
  @javax.annotation.Nullable
  public Object getSpec() {
    return spec;
  }

  public void setSpec(Object spec) {
    this.spec = spec;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GeneratorInput generatorInput = (GeneratorInput) o;
    return Objects.equals(this.authorizationValue, generatorInput.authorizationValue) &&
        Objects.equals(this.openAPIUrl, generatorInput.openAPIUrl) &&
        Objects.equals(this.options, generatorInput.options) &&
        Objects.equals(this.spec, generatorInput.spec);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authorizationValue, openAPIUrl, options, spec);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GeneratorInput {\n");
    sb.append("    authorizationValue: ").append(toIndentedString(authorizationValue)).append("\n");
    sb.append("    openAPIUrl: ").append(toIndentedString(openAPIUrl)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    spec: ").append(toIndentedString(spec)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authorizationValue");
    openapiFields.add("openAPIUrl");
    openapiFields.add("options");
    openapiFields.add("spec");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GeneratorInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GeneratorInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GeneratorInput is not found in the empty JSON string", GeneratorInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GeneratorInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GeneratorInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `authorizationValue`
      if (jsonObj.get("authorizationValue") != null && !jsonObj.get("authorizationValue").isJsonNull()) {
        AuthorizationValue.validateJsonElement(jsonObj.get("authorizationValue"));
      }
      if ((jsonObj.get("openAPIUrl") != null && !jsonObj.get("openAPIUrl").isJsonNull()) && !jsonObj.get("openAPIUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `openAPIUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("openAPIUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GeneratorInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GeneratorInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GeneratorInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GeneratorInput.class));

       return (TypeAdapter<T>) new TypeAdapter<GeneratorInput>() {
           @Override
           public void write(JsonWriter out, GeneratorInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GeneratorInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GeneratorInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GeneratorInput
   * @throws IOException if the JSON string is invalid with respect to GeneratorInput
   */
  public static GeneratorInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GeneratorInput.class);
  }

  /**
   * Convert an instance of GeneratorInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

