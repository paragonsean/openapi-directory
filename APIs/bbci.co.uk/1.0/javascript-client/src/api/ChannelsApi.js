/**
 * BBC iPlayer Business Layer
 * The definitive iPlayer API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: ibl-team@lists.forge.bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Channels service.
* @module api/ChannelsApi
* @version 1.0
*/
export default class ChannelsApi {

    /**
    * Constructs a new ChannelsApi. 
    * @alias module:api/ChannelsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getChannels operation.
     * @callback module:api/ChannelsApi~getChannelsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all the channels.
     * Get the list of all the channels TV & iPlayer.
     * @param {module:model/String} lang The language for any applicable localised strings.
     * @param {Object} opts Optional parameters
     * @param {String} [region] The region to get the channels for.
     * @param {module:api/ChannelsApi~getChannelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getChannels(lang, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'lang' is set
      if (lang === undefined || lang === null) {
        throw new Error("Missing the required parameter 'lang' when calling getChannels");
      }

      let pathParams = {
      };
      let queryParams = {
        'region': opts['region'],
        'lang': lang
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/channels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getHighlightsByChannel operation.
     * @callback module:api/ChannelsApi~getHighlightsByChannelCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the highlights for a channel.
     * Get the editorial highlights of a given channel in TV & iPlayer.
     * @param {String} channel The channel identifier to limit results to.
     * @param {module:model/String} lang The language for any applicable localised strings.
     * @param {module:model/String} rights The rights group to limit results to.
     * @param {module:model/String} availability Whether to return all, or available programmes
     * @param {Object} opts Optional parameters
     * @param {Boolean} [live] Whether to include live programmes
     * @param {Array.<module:model/String>} [mixin] Request additional data in the output
     * @param {module:api/ChannelsApi~getHighlightsByChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getHighlightsByChannel(channel, lang, rights, availability, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channel' is set
      if (channel === undefined || channel === null) {
        throw new Error("Missing the required parameter 'channel' when calling getHighlightsByChannel");
      }
      // verify the required parameter 'lang' is set
      if (lang === undefined || lang === null) {
        throw new Error("Missing the required parameter 'lang' when calling getHighlightsByChannel");
      }
      // verify the required parameter 'rights' is set
      if (rights === undefined || rights === null) {
        throw new Error("Missing the required parameter 'rights' when calling getHighlightsByChannel");
      }
      // verify the required parameter 'availability' is set
      if (availability === undefined || availability === null) {
        throw new Error("Missing the required parameter 'availability' when calling getHighlightsByChannel");
      }

      let pathParams = {
        'channel': channel
      };
      let queryParams = {
        'lang': lang,
        'rights': rights,
        'availability': availability,
        'live': opts['live'],
        'mixin': this.apiClient.buildCollectionParam(opts['mixin'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/channels/{channel}/highlights', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getScheduleByChannel operation.
     * @callback module:api/ChannelsApi~getScheduleByChannelCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get schedule by channel
     * Get schedule by channel
     * @param {String} channel The channel identifier to limit results to.
     * @param {String} date The date to return the schedule for, yyyy-mm-dd format
     * @param {module:model/String} lang The language for any applicable localised strings.
     * @param {module:model/String} rights The rights group to limit results to.
     * @param {module:model/String} availability Whether to return all, or available programmes
     * @param {module:api/ChannelsApi~getScheduleByChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getScheduleByChannel(channel, date, lang, rights, availability, callback) {
      let postBody = null;
      // verify the required parameter 'channel' is set
      if (channel === undefined || channel === null) {
        throw new Error("Missing the required parameter 'channel' when calling getScheduleByChannel");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling getScheduleByChannel");
      }
      // verify the required parameter 'lang' is set
      if (lang === undefined || lang === null) {
        throw new Error("Missing the required parameter 'lang' when calling getScheduleByChannel");
      }
      // verify the required parameter 'rights' is set
      if (rights === undefined || rights === null) {
        throw new Error("Missing the required parameter 'rights' when calling getScheduleByChannel");
      }
      // verify the required parameter 'availability' is set
      if (availability === undefined || availability === null) {
        throw new Error("Missing the required parameter 'availability' when calling getScheduleByChannel");
      }

      let pathParams = {
        'channel': channel,
        'date': date
      };
      let queryParams = {
        'lang': lang,
        'rights': rights,
        'availability': availability
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/channels/{channel}/schedule/{date}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
