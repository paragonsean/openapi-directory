/**
 * BBC iPlayer Business Layer
 * The definitive iPlayer API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: ibl-team@lists.forge.bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Episodes service.
* @module api/EpisodesApi
* @version 1.0
*/
export default class EpisodesApi {

    /**
    * Constructs a new EpisodesApi. 
    * @alias module:api/EpisodesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getClips operation.
     * @callback module:api/EpisodesApi~getClipsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Clips
     * Get Clips
     * @param {String} pid The programme identifier.
     * @param {module:model/String} rights The rights group to limit results to.
     * @param {module:model/String} availability Whether to return all, or available programmes
     * @param {module:api/EpisodesApi~getClipsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getClips(pid, rights, availability, callback) {
      let postBody = null;
      // verify the required parameter 'pid' is set
      if (pid === undefined || pid === null) {
        throw new Error("Missing the required parameter 'pid' when calling getClips");
      }
      // verify the required parameter 'rights' is set
      if (rights === undefined || rights === null) {
        throw new Error("Missing the required parameter 'rights' when calling getClips");
      }
      // verify the required parameter 'availability' is set
      if (availability === undefined || availability === null) {
        throw new Error("Missing the required parameter 'availability' when calling getClips");
      }

      let pathParams = {
        'pid': pid
      };
      let queryParams = {
        'rights': rights,
        'availability': availability
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/clips/{pid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEpisodesByCategory operation.
     * @callback module:api/EpisodesApi~getEpisodesByCategoryCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all the episodes for a category.
     * Get the list of all the episodes for a given category in TV & iPlayer.
     * @param {String} category The category identifier to return results from.
     * @param {module:model/String} lang The language for any applicable localised strings.
     * @param {module:model/String} rights The rights group to limit results to.
     * @param {module:model/String} availability Whether to return all, or available programmes
     * @param {Number} page The page index.
     * @param {Number} perPage The number of results to return.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [sort] The sort order of the results.
     * @param {module:api/EpisodesApi~getEpisodesByCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getEpisodesByCategory(category, lang, rights, availability, page, perPage, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling getEpisodesByCategory");
      }
      // verify the required parameter 'lang' is set
      if (lang === undefined || lang === null) {
        throw new Error("Missing the required parameter 'lang' when calling getEpisodesByCategory");
      }
      // verify the required parameter 'rights' is set
      if (rights === undefined || rights === null) {
        throw new Error("Missing the required parameter 'rights' when calling getEpisodesByCategory");
      }
      // verify the required parameter 'availability' is set
      if (availability === undefined || availability === null) {
        throw new Error("Missing the required parameter 'availability' when calling getEpisodesByCategory");
      }
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling getEpisodesByCategory");
      }
      // verify the required parameter 'perPage' is set
      if (perPage === undefined || perPage === null) {
        throw new Error("Missing the required parameter 'perPage' when calling getEpisodesByCategory");
      }

      let pathParams = {
        'category': category
      };
      let queryParams = {
        'lang': lang,
        'rights': rights,
        'availability': availability,
        'page': page,
        'per_page': perPage,
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/categories/{category}/episodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEpisodesByGroup operation.
     * @callback module:api/EpisodesApi~getEpisodesByGroupCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get episodes by group, brand or series
     * Get episodes by group, brand or series
     * @param {String} pid The programme identifier.
     * @param {module:model/String} rights The rights group to limit results to.
     * @param {Number} page The page index.
     * @param {Number} perPage The number of results to return.
     * @param {Number} initialChildCount The depth to return child entities.
     * @param {String} sort The sort order of the results.
     * @param {module:model/String} sortDirection Whether to sort ascending or descending
     * @param {module:model/String} availability Whether to return all, or available programmes
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [mixin] Request additional data in the output
     * @param {module:api/EpisodesApi~getEpisodesByGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getEpisodesByGroup(pid, rights, page, perPage, initialChildCount, sort, sortDirection, availability, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pid' is set
      if (pid === undefined || pid === null) {
        throw new Error("Missing the required parameter 'pid' when calling getEpisodesByGroup");
      }
      // verify the required parameter 'rights' is set
      if (rights === undefined || rights === null) {
        throw new Error("Missing the required parameter 'rights' when calling getEpisodesByGroup");
      }
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling getEpisodesByGroup");
      }
      // verify the required parameter 'perPage' is set
      if (perPage === undefined || perPage === null) {
        throw new Error("Missing the required parameter 'perPage' when calling getEpisodesByGroup");
      }
      // verify the required parameter 'initialChildCount' is set
      if (initialChildCount === undefined || initialChildCount === null) {
        throw new Error("Missing the required parameter 'initialChildCount' when calling getEpisodesByGroup");
      }
      // verify the required parameter 'sort' is set
      if (sort === undefined || sort === null) {
        throw new Error("Missing the required parameter 'sort' when calling getEpisodesByGroup");
      }
      // verify the required parameter 'sortDirection' is set
      if (sortDirection === undefined || sortDirection === null) {
        throw new Error("Missing the required parameter 'sortDirection' when calling getEpisodesByGroup");
      }
      // verify the required parameter 'availability' is set
      if (availability === undefined || availability === null) {
        throw new Error("Missing the required parameter 'availability' when calling getEpisodesByGroup");
      }

      let pathParams = {
        'pid': pid
      };
      let queryParams = {
        'rights': rights,
        'page': page,
        'per_page': perPage,
        'initial_child_count': initialChildCount,
        'sort': sort,
        'sort_direction': sortDirection,
        'availability': availability,
        'mixin': this.apiClient.buildCollectionParam(opts['mixin'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/groups/{pid}/episodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEpisodesByParentPID operation.
     * @callback module:api/EpisodesApi~getEpisodesByParentPIDCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Child episodes for a given programme pid.
     * Get the child episodes belonging to a given programme identifier.
     * @param {String} pid The programme identifier.
     * @param {module:model/String} rights The rights group to limit results to.
     * @param {module:model/String} availability Whether to return all, or available programmes
     * @param {Number} initialChildCount The depth to return child entities.
     * @param {module:api/EpisodesApi~getEpisodesByParentPIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getEpisodesByParentPID(pid, rights, availability, initialChildCount, callback) {
      let postBody = null;
      // verify the required parameter 'pid' is set
      if (pid === undefined || pid === null) {
        throw new Error("Missing the required parameter 'pid' when calling getEpisodesByParentPID");
      }
      // verify the required parameter 'rights' is set
      if (rights === undefined || rights === null) {
        throw new Error("Missing the required parameter 'rights' when calling getEpisodesByParentPID");
      }
      // verify the required parameter 'availability' is set
      if (availability === undefined || availability === null) {
        throw new Error("Missing the required parameter 'availability' when calling getEpisodesByParentPID");
      }
      // verify the required parameter 'initialChildCount' is set
      if (initialChildCount === undefined || initialChildCount === null) {
        throw new Error("Missing the required parameter 'initialChildCount' when calling getEpisodesByParentPID");
      }

      let pathParams = {
        'pid': pid
      };
      let queryParams = {
        'rights': rights,
        'availability': availability,
        'initial_child_count': initialChildCount
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/programmes/{pid}/episodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOnwardJourney operation.
     * @callback module:api/EpisodesApi~getOnwardJourneyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Onward Journey
     * Get Onward Journey (next programme)
     * @param {String} pid The programme identifier.
     * @param {module:model/String} rights The rights group to limit results to.
     * @param {module:model/String} availability Whether to return all, or available programmes
     * @param {module:api/EpisodesApi~getOnwardJourneyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getOnwardJourney(pid, rights, availability, callback) {
      let postBody = null;
      // verify the required parameter 'pid' is set
      if (pid === undefined || pid === null) {
        throw new Error("Missing the required parameter 'pid' when calling getOnwardJourney");
      }
      // verify the required parameter 'rights' is set
      if (rights === undefined || rights === null) {
        throw new Error("Missing the required parameter 'rights' when calling getOnwardJourney");
      }
      // verify the required parameter 'availability' is set
      if (availability === undefined || availability === null) {
        throw new Error("Missing the required parameter 'availability' when calling getOnwardJourney");
      }

      let pathParams = {
        'pid': pid
      };
      let queryParams = {
        'rights': rights,
        'availability': availability
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/episodes/{pid}/next', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPostRolls operation.
     * @callback module:api/EpisodesApi~getPostRollsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Follow-ups (post-rolls)
     * Get Follow-ups (post-rolls)
     * @param {String} pid The programme identifier.
     * @param {module:model/String} rights The rights group to limit results to.
     * @param {module:model/String} availability Whether to return all, or available programmes
     * @param {module:api/EpisodesApi~getPostRollsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getPostRolls(pid, rights, availability, callback) {
      let postBody = null;
      // verify the required parameter 'pid' is set
      if (pid === undefined || pid === null) {
        throw new Error("Missing the required parameter 'pid' when calling getPostRolls");
      }
      // verify the required parameter 'rights' is set
      if (rights === undefined || rights === null) {
        throw new Error("Missing the required parameter 'rights' when calling getPostRolls");
      }
      // verify the required parameter 'availability' is set
      if (availability === undefined || availability === null) {
        throw new Error("Missing the required parameter 'availability' when calling getPostRolls");
      }

      let pathParams = {
        'pid': pid
      };
      let queryParams = {
        'rights': rights,
        'availability': availability
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/episodes/{pid}/postrolls', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProgrammeByPID operation.
     * @callback module:api/EpisodesApi~getProgrammeByPIDCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Episode for a given pid.
     * Get the episode for a given episode identifier.
     * @param {String} pid The programme identifier.
     * @param {module:model/String} rights The rights group to limit results to.
     * @param {module:model/String} availability Whether to return all, or available programmes
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [mixin] Request additional data in the output
     * @param {module:api/EpisodesApi~getProgrammeByPIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getProgrammeByPID(pid, rights, availability, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pid' is set
      if (pid === undefined || pid === null) {
        throw new Error("Missing the required parameter 'pid' when calling getProgrammeByPID");
      }
      // verify the required parameter 'rights' is set
      if (rights === undefined || rights === null) {
        throw new Error("Missing the required parameter 'rights' when calling getProgrammeByPID");
      }
      // verify the required parameter 'availability' is set
      if (availability === undefined || availability === null) {
        throw new Error("Missing the required parameter 'availability' when calling getProgrammeByPID");
      }

      let pathParams = {
        'pid': pid
      };
      let queryParams = {
        'rights': rights,
        'availability': availability,
        'mixin': this.apiClient.buildCollectionParam(opts['mixin'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/episodes/{pid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProgrammeRecommendations operation.
     * @callback module:api/EpisodesApi~getProgrammeRecommendationsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get programme recommendations
     * Get programme recommendations
     * @param {String} pid The programme identifier.
     * @param {module:model/String} rights The rights group to limit results to.
     * @param {module:model/String} availability Whether to return all, or available programmes
     * @param {Number} page The page index.
     * @param {Number} perPage The number of results to return.
     * @param {module:api/EpisodesApi~getProgrammeRecommendationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getProgrammeRecommendations(pid, rights, availability, page, perPage, callback) {
      let postBody = null;
      // verify the required parameter 'pid' is set
      if (pid === undefined || pid === null) {
        throw new Error("Missing the required parameter 'pid' when calling getProgrammeRecommendations");
      }
      // verify the required parameter 'rights' is set
      if (rights === undefined || rights === null) {
        throw new Error("Missing the required parameter 'rights' when calling getProgrammeRecommendations");
      }
      // verify the required parameter 'availability' is set
      if (availability === undefined || availability === null) {
        throw new Error("Missing the required parameter 'availability' when calling getProgrammeRecommendations");
      }
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling getProgrammeRecommendations");
      }
      // verify the required parameter 'perPage' is set
      if (perPage === undefined || perPage === null) {
        throw new Error("Missing the required parameter 'perPage' when calling getProgrammeRecommendations");
      }

      let pathParams = {
        'pid': pid
      };
      let queryParams = {
        'rights': rights,
        'availability': availability,
        'page': page,
        'per_page': perPage
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/episodes/{pid}/recommendations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProgrammesPopular operation.
     * @callback module:api/EpisodesApi~getProgrammesPopularCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get programmes popular
     * Get programmes popular
     * @param {module:model/String} rights The rights group to limit results to.
     * @param {Number} page The page index.
     * @param {Number} perPage The number of results to return.
     * @param {Number} initialChildCount The depth to return child entities.
     * @param {String} sort The sort order of the results.
     * @param {module:model/String} sortDirection Whether to sort ascending or descending
     * @param {module:model/String} availability Whether to return all, or available programmes
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [mixin] Request additional data in the output
     * @param {module:api/EpisodesApi~getProgrammesPopularCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getProgrammesPopular(rights, page, perPage, initialChildCount, sort, sortDirection, availability, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'rights' is set
      if (rights === undefined || rights === null) {
        throw new Error("Missing the required parameter 'rights' when calling getProgrammesPopular");
      }
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling getProgrammesPopular");
      }
      // verify the required parameter 'perPage' is set
      if (perPage === undefined || perPage === null) {
        throw new Error("Missing the required parameter 'perPage' when calling getProgrammesPopular");
      }
      // verify the required parameter 'initialChildCount' is set
      if (initialChildCount === undefined || initialChildCount === null) {
        throw new Error("Missing the required parameter 'initialChildCount' when calling getProgrammesPopular");
      }
      // verify the required parameter 'sort' is set
      if (sort === undefined || sort === null) {
        throw new Error("Missing the required parameter 'sort' when calling getProgrammesPopular");
      }
      // verify the required parameter 'sortDirection' is set
      if (sortDirection === undefined || sortDirection === null) {
        throw new Error("Missing the required parameter 'sortDirection' when calling getProgrammesPopular");
      }
      // verify the required parameter 'availability' is set
      if (availability === undefined || availability === null) {
        throw new Error("Missing the required parameter 'availability' when calling getProgrammesPopular");
      }

      let pathParams = {
      };
      let queryParams = {
        'rights': rights,
        'page': page,
        'per_page': perPage,
        'initial_child_count': initialChildCount,
        'sort': sort,
        'sort_direction': sortDirection,
        'availability': availability,
        'mixin': this.apiClient.buildCollectionParam(opts['mixin'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/groups/popular/episodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTrailersPreRolls operation.
     * @callback module:api/EpisodesApi~getTrailersPreRollsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Trailers (pre-rolls)
     * Get Trailers (pre-rolls)
     * @param {String} pid The programme identifier.
     * @param {module:model/String} rights The rights group to limit results to.
     * @param {module:model/String} availability Whether to return all, or available programmes
     * @param {module:api/EpisodesApi~getTrailersPreRollsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getTrailersPreRolls(pid, rights, availability, callback) {
      let postBody = null;
      // verify the required parameter 'pid' is set
      if (pid === undefined || pid === null) {
        throw new Error("Missing the required parameter 'pid' when calling getTrailersPreRolls");
      }
      // verify the required parameter 'rights' is set
      if (rights === undefined || rights === null) {
        throw new Error("Missing the required parameter 'rights' when calling getTrailersPreRolls");
      }
      // verify the required parameter 'availability' is set
      if (availability === undefined || availability === null) {
        throw new Error("Missing the required parameter 'availability' when calling getTrailersPreRolls");
      }

      let pathParams = {
        'pid': pid
      };
      let queryParams = {
        'rights': rights,
        'availability': availability
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/episodes/{pid}/prerolls', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
