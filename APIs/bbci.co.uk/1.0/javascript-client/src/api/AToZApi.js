/**
 * BBC iPlayer Business Layer
 * The definitive iPlayer API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: ibl-team@lists.forge.bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* AToZ service.
* @module api/AToZApi
* @version 1.0
*/
export default class AToZApi {

    /**
    * Constructs a new AToZApi. 
    * @alias module:api/AToZApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getProgrammesAtoZSearch operation.
     * @callback module:api/AToZApi~getProgrammesAtoZSearchCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Programmes by initial title character
     * Get the Programmes whose title begins with the given initial character.
     * @param {String} letter Letter to search by, a to z or the string '0-9'
     * @param {module:model/String} rights The rights group to limit results to.
     * @param {Number} page The page index.
     * @param {Number} perPage The number of results to return.
     * @param {Number} initialChildCount The depth to return child entities.
     * @param {module:model/String} sort The sort order of the results.
     * @param {module:model/String} sortDirection Whether to sort ascending or descending
     * @param {module:model/String} availability Whether to return all, or available programmes
     * @param {module:api/AToZApi~getProgrammesAtoZSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getProgrammesAtoZSearch(letter, rights, page, perPage, initialChildCount, sort, sortDirection, availability, callback) {
      let postBody = null;
      // verify the required parameter 'letter' is set
      if (letter === undefined || letter === null) {
        throw new Error("Missing the required parameter 'letter' when calling getProgrammesAtoZSearch");
      }
      // verify the required parameter 'rights' is set
      if (rights === undefined || rights === null) {
        throw new Error("Missing the required parameter 'rights' when calling getProgrammesAtoZSearch");
      }
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling getProgrammesAtoZSearch");
      }
      // verify the required parameter 'perPage' is set
      if (perPage === undefined || perPage === null) {
        throw new Error("Missing the required parameter 'perPage' when calling getProgrammesAtoZSearch");
      }
      // verify the required parameter 'initialChildCount' is set
      if (initialChildCount === undefined || initialChildCount === null) {
        throw new Error("Missing the required parameter 'initialChildCount' when calling getProgrammesAtoZSearch");
      }
      // verify the required parameter 'sort' is set
      if (sort === undefined || sort === null) {
        throw new Error("Missing the required parameter 'sort' when calling getProgrammesAtoZSearch");
      }
      // verify the required parameter 'sortDirection' is set
      if (sortDirection === undefined || sortDirection === null) {
        throw new Error("Missing the required parameter 'sortDirection' when calling getProgrammesAtoZSearch");
      }
      // verify the required parameter 'availability' is set
      if (availability === undefined || availability === null) {
        throw new Error("Missing the required parameter 'availability' when calling getProgrammesAtoZSearch");
      }

      let pathParams = {
        'letter': letter
      };
      let queryParams = {
        'rights': rights,
        'page': page,
        'per_page': perPage,
        'initial_child_count': initialChildCount,
        'sort': sort,
        'sort_direction': sortDirection,
        'availability': availability
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/atoz/{letter}/programmes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
