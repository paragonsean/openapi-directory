/**
 * BBC iPlayer Business Layer
 * The definitive iPlayer API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: ibl-team@lists.forge.bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* ProgrammesTLEOs service.
* @module api/ProgrammesTLEOsApi
* @version 1.0
*/
export default class ProgrammesTLEOsApi {

    /**
    * Constructs a new ProgrammesTLEOsApi. 
    * @alias module:api/ProgrammesTLEOsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getBroadcastsByChannel operation.
     * @callback module:api/ProgrammesTLEOsApi~getBroadcastsByChannelCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get broadcasts by channel
     * Get broadcasts by channel
     * @param {String} channel The channel identifier to limit results to.
     * @param {module:model/String} lang The language for any applicable localised strings.
     * @param {module:model/String} rights The rights group to limit results to.
     * @param {module:model/String} availability Whether to return all, or available programmes
     * @param {Number} perPage The number of results to return.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [mixin] Request additional data in the output
     * @param {String} [from] Time to return results from, e.g. -3h
     * @param {module:api/ProgrammesTLEOsApi~getBroadcastsByChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getBroadcastsByChannel(channel, lang, rights, availability, perPage, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channel' is set
      if (channel === undefined || channel === null) {
        throw new Error("Missing the required parameter 'channel' when calling getBroadcastsByChannel");
      }
      // verify the required parameter 'lang' is set
      if (lang === undefined || lang === null) {
        throw new Error("Missing the required parameter 'lang' when calling getBroadcastsByChannel");
      }
      // verify the required parameter 'rights' is set
      if (rights === undefined || rights === null) {
        throw new Error("Missing the required parameter 'rights' when calling getBroadcastsByChannel");
      }
      // verify the required parameter 'availability' is set
      if (availability === undefined || availability === null) {
        throw new Error("Missing the required parameter 'availability' when calling getBroadcastsByChannel");
      }
      // verify the required parameter 'perPage' is set
      if (perPage === undefined || perPage === null) {
        throw new Error("Missing the required parameter 'perPage' when calling getBroadcastsByChannel");
      }

      let pathParams = {
        'channel': channel
      };
      let queryParams = {
        'lang': lang,
        'rights': rights,
        'availability': availability,
        'mixin': this.apiClient.buildCollectionParam(opts['mixin'], 'multi'),
        'per_page': perPage,
        'from': opts['from']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/channels/{channel}/broadcasts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getHighlightsByCategory operation.
     * @callback module:api/ProgrammesTLEOsApi~getHighlightsByCategoryCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the highlights for a category.
     * Get the editorial highlights of a given category in TV & iPlayer.
     * @param {String} category The category identifier to return results from.
     * @param {module:model/String} lang The language for any applicable localised strings.
     * @param {module:model/String} rights The rights group to limit results to.
     * @param {module:model/String} availability Whether to return all, or available programmes
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [mixin] Request additional data in the output
     * @param {module:api/ProgrammesTLEOsApi~getHighlightsByCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getHighlightsByCategory(category, lang, rights, availability, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling getHighlightsByCategory");
      }
      // verify the required parameter 'lang' is set
      if (lang === undefined || lang === null) {
        throw new Error("Missing the required parameter 'lang' when calling getHighlightsByCategory");
      }
      // verify the required parameter 'rights' is set
      if (rights === undefined || rights === null) {
        throw new Error("Missing the required parameter 'rights' when calling getHighlightsByCategory");
      }
      // verify the required parameter 'availability' is set
      if (availability === undefined || availability === null) {
        throw new Error("Missing the required parameter 'availability' when calling getHighlightsByCategory");
      }

      let pathParams = {
        'category': category
      };
      let queryParams = {
        'lang': lang,
        'rights': rights,
        'availability': availability,
        'mixin': this.apiClient.buildCollectionParam(opts['mixin'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/categories/{category}/highlights', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProgrammeHighlights operation.
     * @callback module:api/ProgrammesTLEOsApi~getProgrammeHighlightsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get programme highlights
     * Get programme highlights
     * @param {module:model/String} lang The language for any applicable localised strings.
     * @param {module:model/String} rights The rights group to limit results to.
     * @param {module:model/String} availability Whether to return all, or available programmes
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [mixin] Request additional data in the output
     * @param {module:api/ProgrammesTLEOsApi~getProgrammeHighlightsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getProgrammeHighlights(lang, rights, availability, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'lang' is set
      if (lang === undefined || lang === null) {
        throw new Error("Missing the required parameter 'lang' when calling getProgrammeHighlights");
      }
      // verify the required parameter 'rights' is set
      if (rights === undefined || rights === null) {
        throw new Error("Missing the required parameter 'rights' when calling getProgrammeHighlights");
      }
      // verify the required parameter 'availability' is set
      if (availability === undefined || availability === null) {
        throw new Error("Missing the required parameter 'availability' when calling getProgrammeHighlights");
      }

      let pathParams = {
      };
      let queryParams = {
        'lang': lang,
        'rights': rights,
        'availability': availability,
        'mixin': this.apiClient.buildCollectionParam(opts['mixin'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/home/highlights', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProgrammesByCategory operation.
     * @callback module:api/ProgrammesTLEOsApi~getProgrammesByCategoryCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all the programmes for a category.
     * Get the list of all the Programmes (TLEOs) for a given category in TV & iPlayer.
     * @param {String} category The category identifier to return results from.
     * @param {module:model/String} lang The language for any applicable localised strings.
     * @param {module:model/String} rights The rights group to limit results to.
     * @param {module:model/String} availability Whether to return all, or available programmes
     * @param {Number} page The page index.
     * @param {Number} perPage The number of results to return.
     * @param {module:api/ProgrammesTLEOsApi~getProgrammesByCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getProgrammesByCategory(category, lang, rights, availability, page, perPage, callback) {
      let postBody = null;
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling getProgrammesByCategory");
      }
      // verify the required parameter 'lang' is set
      if (lang === undefined || lang === null) {
        throw new Error("Missing the required parameter 'lang' when calling getProgrammesByCategory");
      }
      // verify the required parameter 'rights' is set
      if (rights === undefined || rights === null) {
        throw new Error("Missing the required parameter 'rights' when calling getProgrammesByCategory");
      }
      // verify the required parameter 'availability' is set
      if (availability === undefined || availability === null) {
        throw new Error("Missing the required parameter 'availability' when calling getProgrammesByCategory");
      }
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling getProgrammesByCategory");
      }
      // verify the required parameter 'perPage' is set
      if (perPage === undefined || perPage === null) {
        throw new Error("Missing the required parameter 'perPage' when calling getProgrammesByCategory");
      }

      let pathParams = {
        'category': category
      };
      let queryParams = {
        'lang': lang,
        'rights': rights,
        'availability': availability,
        'page': page,
        'per_page': perPage
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/categories/{category}/programmes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProgrammesByChannel operation.
     * @callback module:api/ProgrammesTLEOsApi~getProgrammesByChannelCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get programmes by channel
     * Get programmes by channel
     * @param {String} channel The channel identifier to limit results to.
     * @param {module:model/String} lang The language for any applicable localised strings.
     * @param {module:model/String} rights The rights group to limit results to.
     * @param {module:model/String} availability Whether to return all, or available programmes
     * @param {Number} page The page index.
     * @param {Number} perPage The number of results to return.
     * @param {module:api/ProgrammesTLEOsApi~getProgrammesByChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getProgrammesByChannel(channel, lang, rights, availability, page, perPage, callback) {
      let postBody = null;
      // verify the required parameter 'channel' is set
      if (channel === undefined || channel === null) {
        throw new Error("Missing the required parameter 'channel' when calling getProgrammesByChannel");
      }
      // verify the required parameter 'lang' is set
      if (lang === undefined || lang === null) {
        throw new Error("Missing the required parameter 'lang' when calling getProgrammesByChannel");
      }
      // verify the required parameter 'rights' is set
      if (rights === undefined || rights === null) {
        throw new Error("Missing the required parameter 'rights' when calling getProgrammesByChannel");
      }
      // verify the required parameter 'availability' is set
      if (availability === undefined || availability === null) {
        throw new Error("Missing the required parameter 'availability' when calling getProgrammesByChannel");
      }
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling getProgrammesByChannel");
      }
      // verify the required parameter 'perPage' is set
      if (perPage === undefined || perPage === null) {
        throw new Error("Missing the required parameter 'perPage' when calling getProgrammesByChannel");
      }

      let pathParams = {
        'channel': channel
      };
      let queryParams = {
        'lang': lang,
        'rights': rights,
        'availability': availability,
        'page': page,
        'per_page': perPage
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/channels/{channel}/programmes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProgrammesByParentPID operation.
     * @callback module:api/ProgrammesTLEOsApi~getProgrammesByParentPIDCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Programme for a given pid.
     * Get the programme for a given programme identifier.
     * @param {String} pid The programme identifier.
     * @param {module:model/String} rights The rights group to limit results to.
     * @param {module:model/String} availability Whether to return all, or available programmes
     * @param {Number} initialChildCount The depth to return child entities.
     * @param {module:api/ProgrammesTLEOsApi~getProgrammesByParentPIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getProgrammesByParentPID(pid, rights, availability, initialChildCount, callback) {
      let postBody = null;
      // verify the required parameter 'pid' is set
      if (pid === undefined || pid === null) {
        throw new Error("Missing the required parameter 'pid' when calling getProgrammesByParentPID");
      }
      // verify the required parameter 'rights' is set
      if (rights === undefined || rights === null) {
        throw new Error("Missing the required parameter 'rights' when calling getProgrammesByParentPID");
      }
      // verify the required parameter 'availability' is set
      if (availability === undefined || availability === null) {
        throw new Error("Missing the required parameter 'availability' when calling getProgrammesByParentPID");
      }
      // verify the required parameter 'initialChildCount' is set
      if (initialChildCount === undefined || initialChildCount === null) {
        throw new Error("Missing the required parameter 'initialChildCount' when calling getProgrammesByParentPID");
      }

      let pathParams = {
        'pid': pid
      };
      let queryParams = {
        'rights': rights,
        'availability': availability,
        'initial_child_count': initialChildCount
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/programmes/{pid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
