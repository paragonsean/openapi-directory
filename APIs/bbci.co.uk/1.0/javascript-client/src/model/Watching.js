/**
 * BBC iPlayer Business Layer
 * The definitive iPlayer API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: ibl-team@lists.forge.bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Episode from './Episode';
import Programme from './Programme';
import Version from './Version';

/**
 * The Watching model module.
 * @module model/Watching
 * @version 1.0
 */
class Watching {
    /**
     * Constructs a new <code>Watching</code>.
     * @alias module:model/Watching
     * @param episode {module:model/Episode} 
     * @param hasNext {Boolean} 
     * @param programme {module:model/Programme} 
     * @param type {module:model/Watching.TypeEnum} 
     * @param urn {String} 
     * @param version {module:model/Version} 
     */
    constructor(episode, hasNext, programme, type, urn, version) { 
        
        Watching.initialize(this, episode, hasNext, programme, type, urn, version);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, episode, hasNext, programme, type, urn, version) { 
        obj['episode'] = episode;
        obj['has_next'] = hasNext;
        obj['programme'] = programme;
        obj['type'] = type;
        obj['urn'] = urn;
        obj['version'] = version;
    }

    /**
     * Constructs a <code>Watching</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Watching} obj Optional instance to populate.
     * @return {module:model/Watching} The populated <code>Watching</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Watching();

            if (data.hasOwnProperty('episode')) {
                obj['episode'] = Episode.constructFromObject(data['episode']);
            }
            if (data.hasOwnProperty('has_next')) {
                obj['has_next'] = ApiClient.convertToType(data['has_next'], 'Boolean');
            }
            if (data.hasOwnProperty('offset')) {
                obj['offset'] = ApiClient.convertToType(data['offset'], 'Number');
            }
            if (data.hasOwnProperty('programme')) {
                obj['programme'] = Programme.constructFromObject(data['programme']);
            }
            if (data.hasOwnProperty('progress')) {
                obj['progress'] = ApiClient.convertToType(data['progress'], 'Number');
            }
            if (data.hasOwnProperty('remaining')) {
                obj['remaining'] = ApiClient.convertToType(data['remaining'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('urn')) {
                obj['urn'] = ApiClient.convertToType(data['urn'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = Version.constructFromObject(data['version']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Watching</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Watching</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Watching.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `episode`
        if (data['episode']) { // data not null
          Episode.validateJSON(data['episode']);
        }
        // validate the optional field `programme`
        if (data['programme']) { // data not null
          Programme.validateJSON(data['programme']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['urn'] && !(typeof data['urn'] === 'string' || data['urn'] instanceof String)) {
            throw new Error("Expected the field `urn` to be a primitive type in the JSON string but got " + data['urn']);
        }
        // validate the optional field `version`
        if (data['version']) { // data not null
          Version.validateJSON(data['version']);
        }

        return true;
    }


}

Watching.RequiredProperties = ["episode", "has_next", "programme", "type", "urn", "version"];

/**
 * @member {module:model/Episode} episode
 */
Watching.prototype['episode'] = undefined;

/**
 * @member {Boolean} has_next
 */
Watching.prototype['has_next'] = undefined;

/**
 * @member {Number} offset
 */
Watching.prototype['offset'] = undefined;

/**
 * @member {module:model/Programme} programme
 */
Watching.prototype['programme'] = undefined;

/**
 * @member {Number} progress
 */
Watching.prototype['progress'] = undefined;

/**
 * @member {Number} remaining
 */
Watching.prototype['remaining'] = undefined;

/**
 * @member {module:model/Watching.StatusEnum} status
 */
Watching.prototype['status'] = undefined;

/**
 * @member {module:model/Watching.TypeEnum} type
 */
Watching.prototype['type'] = undefined;

/**
 * @member {String} urn
 */
Watching.prototype['urn'] = undefined;

/**
 * @member {module:model/Version} version
 */
Watching.prototype['version'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Watching['StatusEnum'] = {

    /**
     * value: "current"
     * @const
     */
    "current": "current",

    /**
     * value: "next"
     * @const
     */
    "next": "next",

    /**
     * value: "ended"
     * @const
     */
    "ended": "ended"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Watching['TypeEnum'] = {

    /**
     * value: "watching"
     * @const
     */
    "watching": "watching"
};



export default Watching;

