/**
 * BBC iPlayer Business Layer
 * The definitive iPlayer API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: ibl-team@lists.forge.bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ClipImages from './ClipImages';
import ClipVersionsInnerGuidanceText from './ClipVersionsInnerGuidanceText';
import PromotionLabels from './PromotionLabels';

/**
 * The Promotion model module.
 * @module model/Promotion
 * @version 1.0
 */
class Promotion {
    /**
     * Constructs a new <code>Promotion</code>.
     * @alias module:model/Promotion
     * @param id {String} 
     * @param type {module:model/Promotion.TypeEnum} 
     */
    constructor(id, type) { 
        
        Promotion.initialize(this, id, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, type) { 
        obj['id'] = id;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>Promotion</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Promotion} obj Optional instance to populate.
     * @return {module:model/Promotion} The populated <code>Promotion</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Promotion();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('images')) {
                obj['images'] = ClipImages.constructFromObject(data['images']);
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = PromotionLabels.constructFromObject(data['labels']);
            }
            if (data.hasOwnProperty('subtitle')) {
                obj['subtitle'] = ApiClient.convertToType(data['subtitle'], 'String');
            }
            if (data.hasOwnProperty('synopses')) {
                obj['synopses'] = ClipVersionsInnerGuidanceText.constructFromObject(data['synopses']);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Promotion</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Promotion</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Promotion.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `images`
        if (data['images']) { // data not null
          ClipImages.validateJSON(data['images']);
        }
        // validate the optional field `labels`
        if (data['labels']) { // data not null
          PromotionLabels.validateJSON(data['labels']);
        }
        // ensure the json data is a string
        if (data['subtitle'] && !(typeof data['subtitle'] === 'string' || data['subtitle'] instanceof String)) {
            throw new Error("Expected the field `subtitle` to be a primitive type in the JSON string but got " + data['subtitle']);
        }
        // validate the optional field `synopses`
        if (data['synopses']) { // data not null
          ClipVersionsInnerGuidanceText.validateJSON(data['synopses']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

Promotion.RequiredProperties = ["id", "type"];

/**
 * @member {String} id
 */
Promotion.prototype['id'] = undefined;

/**
 * @member {module:model/ClipImages} images
 */
Promotion.prototype['images'] = undefined;

/**
 * @member {module:model/PromotionLabels} labels
 */
Promotion.prototype['labels'] = undefined;

/**
 * @member {String} subtitle
 */
Promotion.prototype['subtitle'] = undefined;

/**
 * @member {module:model/ClipVersionsInnerGuidanceText} synopses
 */
Promotion.prototype['synopses'] = undefined;

/**
 * @member {String} title
 */
Promotion.prototype['title'] = undefined;

/**
 * @member {module:model/Promotion.TypeEnum} type
 */
Promotion.prototype['type'] = undefined;

/**
 * @member {String} url
 */
Promotion.prototype['url'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Promotion['TypeEnum'] = {

    /**
     * value: "promotion"
     * @const
     */
    "promotion": "promotion"
};



export default Promotion;

