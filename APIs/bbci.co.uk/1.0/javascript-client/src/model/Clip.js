/**
 * BBC iPlayer Business Layer
 * The definitive iPlayer API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: ibl-team@lists.forge.bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ClipImages from './ClipImages';
import ClipLabels from './ClipLabels';
import ClipOnwardJourney from './ClipOnwardJourney';
import ClipSynopses from './ClipSynopses';
import ClipVersionsInner from './ClipVersionsInner';
import MasterBrand from './MasterBrand';

/**
 * The Clip model module.
 * @module model/Clip
 * @version 1.0
 */
class Clip {
    /**
     * Constructs a new <code>Clip</code>.
     * @alias module:model/Clip
     * @param id {String} 
     * @param images {module:model/ClipImages} 
     * @param masterBrand {module:model/MasterBrand} 
     * @param synopses {module:model/ClipSynopses} 
     * @param title {String} 
     * @param tleoId {String} 
     * @param type {module:model/Clip.TypeEnum} 
     * @param versions {Array.<module:model/ClipVersionsInner>} 
     */
    constructor(id, images, masterBrand, synopses, title, tleoId, type, versions) { 
        
        Clip.initialize(this, id, images, masterBrand, synopses, title, tleoId, type, versions);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, images, masterBrand, synopses, title, tleoId, type, versions) { 
        obj['id'] = id;
        obj['images'] = images;
        obj['master_brand'] = masterBrand;
        obj['synopses'] = synopses;
        obj['title'] = title;
        obj['tleo_id'] = tleoId;
        obj['type'] = type;
        obj['versions'] = versions;
    }

    /**
     * Constructs a <code>Clip</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Clip} obj Optional instance to populate.
     * @return {module:model/Clip} The populated <code>Clip</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Clip();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('images')) {
                obj['images'] = ClipImages.constructFromObject(data['images']);
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ClipLabels.constructFromObject(data['labels']);
            }
            if (data.hasOwnProperty('master_brand')) {
                obj['master_brand'] = MasterBrand.constructFromObject(data['master_brand']);
            }
            if (data.hasOwnProperty('onward_journey')) {
                obj['onward_journey'] = ClipOnwardJourney.constructFromObject(data['onward_journey']);
            }
            if (data.hasOwnProperty('promotion_type')) {
                obj['promotion_type'] = ApiClient.convertToType(data['promotion_type'], 'String');
            }
            if (data.hasOwnProperty('synopses')) {
                obj['synopses'] = ClipSynopses.constructFromObject(data['synopses']);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('tleo_id')) {
                obj['tleo_id'] = ApiClient.convertToType(data['tleo_id'], 'String');
            }
            if (data.hasOwnProperty('tleo_type')) {
                obj['tleo_type'] = ApiClient.convertToType(data['tleo_type'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('versions')) {
                obj['versions'] = ApiClient.convertToType(data['versions'], [ClipVersionsInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Clip</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Clip</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Clip.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `images`
        if (data['images']) { // data not null
          ClipImages.validateJSON(data['images']);
        }
        // validate the optional field `labels`
        if (data['labels']) { // data not null
          ClipLabels.validateJSON(data['labels']);
        }
        // validate the optional field `master_brand`
        if (data['master_brand']) { // data not null
          MasterBrand.validateJSON(data['master_brand']);
        }
        // validate the optional field `onward_journey`
        if (data['onward_journey']) { // data not null
          ClipOnwardJourney.validateJSON(data['onward_journey']);
        }
        // ensure the json data is a string
        if (data['promotion_type'] && !(typeof data['promotion_type'] === 'string' || data['promotion_type'] instanceof String)) {
            throw new Error("Expected the field `promotion_type` to be a primitive type in the JSON string but got " + data['promotion_type']);
        }
        // validate the optional field `synopses`
        if (data['synopses']) { // data not null
          ClipSynopses.validateJSON(data['synopses']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['tleo_id'] && !(typeof data['tleo_id'] === 'string' || data['tleo_id'] instanceof String)) {
            throw new Error("Expected the field `tleo_id` to be a primitive type in the JSON string but got " + data['tleo_id']);
        }
        // ensure the json data is a string
        if (data['tleo_type'] && !(typeof data['tleo_type'] === 'string' || data['tleo_type'] instanceof String)) {
            throw new Error("Expected the field `tleo_type` to be a primitive type in the JSON string but got " + data['tleo_type']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        if (data['versions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['versions'])) {
                throw new Error("Expected the field `versions` to be an array in the JSON data but got " + data['versions']);
            }
            // validate the optional field `versions` (array)
            for (const item of data['versions']) {
                ClipVersionsInner.validateJSON(item);
            };
        }

        return true;
    }


}

Clip.RequiredProperties = ["id", "images", "master_brand", "synopses", "title", "tleo_id", "type", "versions"];

/**
 * @member {String} id
 */
Clip.prototype['id'] = undefined;

/**
 * @member {module:model/ClipImages} images
 */
Clip.prototype['images'] = undefined;

/**
 * @member {module:model/ClipLabels} labels
 */
Clip.prototype['labels'] = undefined;

/**
 * @member {module:model/MasterBrand} master_brand
 */
Clip.prototype['master_brand'] = undefined;

/**
 * @member {module:model/ClipOnwardJourney} onward_journey
 */
Clip.prototype['onward_journey'] = undefined;

/**
 * @member {module:model/Clip.PromotionTypeEnum} promotion_type
 */
Clip.prototype['promotion_type'] = undefined;

/**
 * @member {module:model/ClipSynopses} synopses
 */
Clip.prototype['synopses'] = undefined;

/**
 * @member {String} title
 */
Clip.prototype['title'] = undefined;

/**
 * @member {String} tleo_id
 */
Clip.prototype['tleo_id'] = undefined;

/**
 * @member {module:model/Clip.TleoTypeEnum} tleo_type
 */
Clip.prototype['tleo_type'] = undefined;

/**
 * @member {module:model/Clip.TypeEnum} type
 */
Clip.prototype['type'] = undefined;

/**
 * @member {Array.<module:model/ClipVersionsInner>} versions
 */
Clip.prototype['versions'] = undefined;





/**
 * Allowed values for the <code>promotion_type</code> property.
 * @enum {String}
 * @readonly
 */
Clip['PromotionTypeEnum'] = {

    /**
     * value: "available_now"
     * @const
     */
    "available_now": "available_now",

    /**
     * value: "coming_soon"
     * @const
     */
    "coming_soon": "coming_soon"
};


/**
 * Allowed values for the <code>tleo_type</code> property.
 * @enum {String}
 * @readonly
 */
Clip['TleoTypeEnum'] = {

    /**
     * value: "episode"
     * @const
     */
    "episode": "episode",

    /**
     * value: "brand"
     * @const
     */
    "brand": "brand",

    /**
     * value: "series"
     * @const
     */
    "series": "series"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Clip['TypeEnum'] = {

    /**
     * value: "clip"
     * @const
     */
    "clip": "clip"
};



export default Clip;

