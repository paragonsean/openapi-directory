/**
 * BBC iPlayer Business Layer
 * The definitive iPlayer API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: ibl-team@lists.forge.bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EpisodeImages from './EpisodeImages';
import EpisodeLabels from './EpisodeLabels';
import EpisodeNextBroadcast from './EpisodeNextBroadcast';
import EpisodeRelatedLinksInner from './EpisodeRelatedLinksInner';
import EpisodeSynopses from './EpisodeSynopses';
import EpisodeTestsInner from './EpisodeTestsInner';
import EpisodeVersionsInner from './EpisodeVersionsInner';
import MasterBrand from './MasterBrand';

/**
 * The Episode model module.
 * @module model/Episode
 * @version 1.0
 */
class Episode {
    /**
     * Constructs a new <code>Episode</code>.
     * @alias module:model/Episode
     * @param audioDescribed {Boolean} 
     * @param categories {Array.<String>} 
     * @param guidance {Boolean} 
     * @param id {String} 
     * @param images {module:model/EpisodeImages} 
     * @param lexicalSortLetter {String} 
     * @param masterBrand {module:model/MasterBrand} 
     * @param requiresSignIn {Boolean} 
     * @param signed {Boolean} 
     * @param status {module:model/Episode.StatusEnum} 
     * @param synopses {module:model/EpisodeSynopses} 
     * @param title {String} 
     * @param tleoId {String} 
     * @param tleoType {module:model/Episode.TleoTypeEnum} 
     * @param type {module:model/Episode.TypeEnum} 
     * @param versions {Array.<module:model/EpisodeVersionsInner>} 
     */
    constructor(audioDescribed, categories, guidance, id, images, lexicalSortLetter, masterBrand, requiresSignIn, signed, status, synopses, title, tleoId, tleoType, type, versions) { 
        
        Episode.initialize(this, audioDescribed, categories, guidance, id, images, lexicalSortLetter, masterBrand, requiresSignIn, signed, status, synopses, title, tleoId, tleoType, type, versions);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, audioDescribed, categories, guidance, id, images, lexicalSortLetter, masterBrand, requiresSignIn, signed, status, synopses, title, tleoId, tleoType, type, versions) { 
        obj['audio_described'] = audioDescribed;
        obj['categories'] = categories;
        obj['guidance'] = guidance;
        obj['id'] = id;
        obj['images'] = images;
        obj['lexical_sort_letter'] = lexicalSortLetter;
        obj['master_brand'] = masterBrand;
        obj['requires_sign_in'] = requiresSignIn;
        obj['signed'] = signed;
        obj['status'] = status;
        obj['synopses'] = synopses;
        obj['title'] = title;
        obj['tleo_id'] = tleoId;
        obj['tleo_type'] = tleoType;
        obj['type'] = type;
        obj['versions'] = versions;
    }

    /**
     * Constructs a <code>Episode</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Episode} obj Optional instance to populate.
     * @return {module:model/Episode} The populated <code>Episode</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Episode();

            if (data.hasOwnProperty('audio_described')) {
                obj['audio_described'] = ApiClient.convertToType(data['audio_described'], 'Boolean');
            }
            if (data.hasOwnProperty('categories')) {
                obj['categories'] = ApiClient.convertToType(data['categories'], ['String']);
            }
            if (data.hasOwnProperty('childrens')) {
                obj['childrens'] = ApiClient.convertToType(data['childrens'], 'Boolean');
            }
            if (data.hasOwnProperty('editorial_subtitle')) {
                obj['editorial_subtitle'] = ApiClient.convertToType(data['editorial_subtitle'], 'String');
            }
            if (data.hasOwnProperty('editorial_title')) {
                obj['editorial_title'] = ApiClient.convertToType(data['editorial_title'], 'String');
            }
            if (data.hasOwnProperty('event_group_id')) {
                obj['event_group_id'] = ApiClient.convertToType(data['event_group_id'], 'String');
            }
            if (data.hasOwnProperty('guidance')) {
                obj['guidance'] = ApiClient.convertToType(data['guidance'], 'Boolean');
            }
            if (data.hasOwnProperty('has_credits')) {
                obj['has_credits'] = ApiClient.convertToType(data['has_credits'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('images')) {
                obj['images'] = EpisodeImages.constructFromObject(data['images']);
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = EpisodeLabels.constructFromObject(data['labels']);
            }
            if (data.hasOwnProperty('lexical_sort_letter')) {
                obj['lexical_sort_letter'] = ApiClient.convertToType(data['lexical_sort_letter'], 'String');
            }
            if (data.hasOwnProperty('live')) {
                obj['live'] = ApiClient.convertToType(data['live'], 'Boolean');
            }
            if (data.hasOwnProperty('live_subtitle')) {
                obj['live_subtitle'] = ApiClient.convertToType(data['live_subtitle'], 'String');
            }
            if (data.hasOwnProperty('live_title')) {
                obj['live_title'] = ApiClient.convertToType(data['live_title'], 'String');
            }
            if (data.hasOwnProperty('master_brand')) {
                obj['master_brand'] = MasterBrand.constructFromObject(data['master_brand']);
            }
            if (data.hasOwnProperty('next_broadcast')) {
                obj['next_broadcast'] = EpisodeNextBroadcast.constructFromObject(data['next_broadcast']);
            }
            if (data.hasOwnProperty('numeric_tleo_position')) {
                obj['numeric_tleo_position'] = ApiClient.convertToType(data['numeric_tleo_position'], 'Number');
            }
            if (data.hasOwnProperty('original_title')) {
                obj['original_title'] = ApiClient.convertToType(data['original_title'], 'String');
            }
            if (data.hasOwnProperty('parent_id')) {
                obj['parent_id'] = ApiClient.convertToType(data['parent_id'], 'String');
            }
            if (data.hasOwnProperty('parent_position')) {
                obj['parent_position'] = ApiClient.convertToType(data['parent_position'], 'Number');
            }
            if (data.hasOwnProperty('preview_id')) {
                obj['preview_id'] = ApiClient.convertToType(data['preview_id'], 'String');
            }
            if (data.hasOwnProperty('programme_type')) {
                obj['programme_type'] = ApiClient.convertToType(data['programme_type'], 'String');
            }
            if (data.hasOwnProperty('promoted')) {
                obj['promoted'] = ApiClient.convertToType(data['promoted'], 'Boolean');
            }
            if (data.hasOwnProperty('related_links')) {
                obj['related_links'] = ApiClient.convertToType(data['related_links'], [EpisodeRelatedLinksInner]);
            }
            if (data.hasOwnProperty('release_date')) {
                obj['release_date'] = ApiClient.convertToType(data['release_date'], 'String');
            }
            if (data.hasOwnProperty('release_date_time')) {
                obj['release_date_time'] = ApiClient.convertToType(data['release_date_time'], 'String');
            }
            if (data.hasOwnProperty('requires_ab')) {
                obj['requires_ab'] = ApiClient.convertToType(data['requires_ab'], ['String']);
            }
            if (data.hasOwnProperty('requires_sign_in')) {
                obj['requires_sign_in'] = ApiClient.convertToType(data['requires_sign_in'], 'Boolean');
            }
            if (data.hasOwnProperty('requires_tv_licence')) {
                obj['requires_tv_licence'] = ApiClient.convertToType(data['requires_tv_licence'], 'Boolean');
            }
            if (data.hasOwnProperty('signed')) {
                obj['signed'] = ApiClient.convertToType(data['signed'], 'Boolean');
            }
            if (data.hasOwnProperty('slice_id')) {
                obj['slice_id'] = ApiClient.convertToType(data['slice_id'], 'String');
            }
            if (data.hasOwnProperty('slice_subtitle')) {
                obj['slice_subtitle'] = ApiClient.convertToType(data['slice_subtitle'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('subtitle')) {
                obj['subtitle'] = ApiClient.convertToType(data['subtitle'], 'String');
            }
            if (data.hasOwnProperty('synopses')) {
                obj['synopses'] = EpisodeSynopses.constructFromObject(data['synopses']);
            }
            if (data.hasOwnProperty('tests')) {
                obj['tests'] = ApiClient.convertToType(data['tests'], [EpisodeTestsInner]);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('tleo_id')) {
                obj['tleo_id'] = ApiClient.convertToType(data['tleo_id'], 'String');
            }
            if (data.hasOwnProperty('tleo_type')) {
                obj['tleo_type'] = ApiClient.convertToType(data['tleo_type'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('versions')) {
                obj['versions'] = ApiClient.convertToType(data['versions'], [EpisodeVersionsInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Episode</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Episode</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Episode.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['categories'])) {
            throw new Error("Expected the field `categories` to be an array in the JSON data but got " + data['categories']);
        }
        // ensure the json data is a string
        if (data['editorial_subtitle'] && !(typeof data['editorial_subtitle'] === 'string' || data['editorial_subtitle'] instanceof String)) {
            throw new Error("Expected the field `editorial_subtitle` to be a primitive type in the JSON string but got " + data['editorial_subtitle']);
        }
        // ensure the json data is a string
        if (data['editorial_title'] && !(typeof data['editorial_title'] === 'string' || data['editorial_title'] instanceof String)) {
            throw new Error("Expected the field `editorial_title` to be a primitive type in the JSON string but got " + data['editorial_title']);
        }
        // ensure the json data is a string
        if (data['event_group_id'] && !(typeof data['event_group_id'] === 'string' || data['event_group_id'] instanceof String)) {
            throw new Error("Expected the field `event_group_id` to be a primitive type in the JSON string but got " + data['event_group_id']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `images`
        if (data['images']) { // data not null
          EpisodeImages.validateJSON(data['images']);
        }
        // validate the optional field `labels`
        if (data['labels']) { // data not null
          EpisodeLabels.validateJSON(data['labels']);
        }
        // ensure the json data is a string
        if (data['lexical_sort_letter'] && !(typeof data['lexical_sort_letter'] === 'string' || data['lexical_sort_letter'] instanceof String)) {
            throw new Error("Expected the field `lexical_sort_letter` to be a primitive type in the JSON string but got " + data['lexical_sort_letter']);
        }
        // ensure the json data is a string
        if (data['live_subtitle'] && !(typeof data['live_subtitle'] === 'string' || data['live_subtitle'] instanceof String)) {
            throw new Error("Expected the field `live_subtitle` to be a primitive type in the JSON string but got " + data['live_subtitle']);
        }
        // ensure the json data is a string
        if (data['live_title'] && !(typeof data['live_title'] === 'string' || data['live_title'] instanceof String)) {
            throw new Error("Expected the field `live_title` to be a primitive type in the JSON string but got " + data['live_title']);
        }
        // validate the optional field `master_brand`
        if (data['master_brand']) { // data not null
          MasterBrand.validateJSON(data['master_brand']);
        }
        // validate the optional field `next_broadcast`
        if (data['next_broadcast']) { // data not null
          EpisodeNextBroadcast.validateJSON(data['next_broadcast']);
        }
        // ensure the json data is a string
        if (data['original_title'] && !(typeof data['original_title'] === 'string' || data['original_title'] instanceof String)) {
            throw new Error("Expected the field `original_title` to be a primitive type in the JSON string but got " + data['original_title']);
        }
        // ensure the json data is a string
        if (data['parent_id'] && !(typeof data['parent_id'] === 'string' || data['parent_id'] instanceof String)) {
            throw new Error("Expected the field `parent_id` to be a primitive type in the JSON string but got " + data['parent_id']);
        }
        // ensure the json data is a string
        if (data['preview_id'] && !(typeof data['preview_id'] === 'string' || data['preview_id'] instanceof String)) {
            throw new Error("Expected the field `preview_id` to be a primitive type in the JSON string but got " + data['preview_id']);
        }
        // ensure the json data is a string
        if (data['programme_type'] && !(typeof data['programme_type'] === 'string' || data['programme_type'] instanceof String)) {
            throw new Error("Expected the field `programme_type` to be a primitive type in the JSON string but got " + data['programme_type']);
        }
        if (data['related_links']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['related_links'])) {
                throw new Error("Expected the field `related_links` to be an array in the JSON data but got " + data['related_links']);
            }
            // validate the optional field `related_links` (array)
            for (const item of data['related_links']) {
                EpisodeRelatedLinksInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['release_date'] && !(typeof data['release_date'] === 'string' || data['release_date'] instanceof String)) {
            throw new Error("Expected the field `release_date` to be a primitive type in the JSON string but got " + data['release_date']);
        }
        // ensure the json data is a string
        if (data['release_date_time'] && !(typeof data['release_date_time'] === 'string' || data['release_date_time'] instanceof String)) {
            throw new Error("Expected the field `release_date_time` to be a primitive type in the JSON string but got " + data['release_date_time']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['requires_ab'])) {
            throw new Error("Expected the field `requires_ab` to be an array in the JSON data but got " + data['requires_ab']);
        }
        // ensure the json data is a string
        if (data['slice_id'] && !(typeof data['slice_id'] === 'string' || data['slice_id'] instanceof String)) {
            throw new Error("Expected the field `slice_id` to be a primitive type in the JSON string but got " + data['slice_id']);
        }
        // ensure the json data is a string
        if (data['slice_subtitle'] && !(typeof data['slice_subtitle'] === 'string' || data['slice_subtitle'] instanceof String)) {
            throw new Error("Expected the field `slice_subtitle` to be a primitive type in the JSON string but got " + data['slice_subtitle']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['subtitle'] && !(typeof data['subtitle'] === 'string' || data['subtitle'] instanceof String)) {
            throw new Error("Expected the field `subtitle` to be a primitive type in the JSON string but got " + data['subtitle']);
        }
        // validate the optional field `synopses`
        if (data['synopses']) { // data not null
          EpisodeSynopses.validateJSON(data['synopses']);
        }
        if (data['tests']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tests'])) {
                throw new Error("Expected the field `tests` to be an array in the JSON data but got " + data['tests']);
            }
            // validate the optional field `tests` (array)
            for (const item of data['tests']) {
                EpisodeTestsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['tleo_id'] && !(typeof data['tleo_id'] === 'string' || data['tleo_id'] instanceof String)) {
            throw new Error("Expected the field `tleo_id` to be a primitive type in the JSON string but got " + data['tleo_id']);
        }
        // ensure the json data is a string
        if (data['tleo_type'] && !(typeof data['tleo_type'] === 'string' || data['tleo_type'] instanceof String)) {
            throw new Error("Expected the field `tleo_type` to be a primitive type in the JSON string but got " + data['tleo_type']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        if (data['versions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['versions'])) {
                throw new Error("Expected the field `versions` to be an array in the JSON data but got " + data['versions']);
            }
            // validate the optional field `versions` (array)
            for (const item of data['versions']) {
                EpisodeVersionsInner.validateJSON(item);
            };
        }

        return true;
    }


}

Episode.RequiredProperties = ["audio_described", "categories", "guidance", "id", "images", "lexical_sort_letter", "master_brand", "requires_sign_in", "signed", "status", "synopses", "title", "tleo_id", "tleo_type", "type", "versions"];

/**
 * @member {Boolean} audio_described
 */
Episode.prototype['audio_described'] = undefined;

/**
 * @member {Array.<String>} categories
 */
Episode.prototype['categories'] = undefined;

/**
 * @member {Boolean} childrens
 */
Episode.prototype['childrens'] = undefined;

/**
 * @member {String} editorial_subtitle
 */
Episode.prototype['editorial_subtitle'] = undefined;

/**
 * @member {String} editorial_title
 */
Episode.prototype['editorial_title'] = undefined;

/**
 * @member {String} event_group_id
 */
Episode.prototype['event_group_id'] = undefined;

/**
 * @member {Boolean} guidance
 */
Episode.prototype['guidance'] = undefined;

/**
 * @member {Boolean} has_credits
 */
Episode.prototype['has_credits'] = undefined;

/**
 * @member {String} id
 */
Episode.prototype['id'] = undefined;

/**
 * @member {module:model/EpisodeImages} images
 */
Episode.prototype['images'] = undefined;

/**
 * @member {module:model/EpisodeLabels} labels
 */
Episode.prototype['labels'] = undefined;

/**
 * @member {String} lexical_sort_letter
 */
Episode.prototype['lexical_sort_letter'] = undefined;

/**
 * @member {Boolean} live
 */
Episode.prototype['live'] = undefined;

/**
 * @member {String} live_subtitle
 */
Episode.prototype['live_subtitle'] = undefined;

/**
 * @member {String} live_title
 */
Episode.prototype['live_title'] = undefined;

/**
 * @member {module:model/MasterBrand} master_brand
 */
Episode.prototype['master_brand'] = undefined;

/**
 * @member {module:model/EpisodeNextBroadcast} next_broadcast
 */
Episode.prototype['next_broadcast'] = undefined;

/**
 * @member {Number} numeric_tleo_position
 */
Episode.prototype['numeric_tleo_position'] = undefined;

/**
 * @member {String} original_title
 */
Episode.prototype['original_title'] = undefined;

/**
 * @member {String} parent_id
 */
Episode.prototype['parent_id'] = undefined;

/**
 * @member {Number} parent_position
 */
Episode.prototype['parent_position'] = undefined;

/**
 * @member {String} preview_id
 */
Episode.prototype['preview_id'] = undefined;

/**
 * @member {module:model/Episode.ProgrammeTypeEnum} programme_type
 */
Episode.prototype['programme_type'] = undefined;

/**
 * @member {Boolean} promoted
 */
Episode.prototype['promoted'] = undefined;

/**
 * @member {Array.<module:model/EpisodeRelatedLinksInner>} related_links
 */
Episode.prototype['related_links'] = undefined;

/**
 * @member {String} release_date
 */
Episode.prototype['release_date'] = undefined;

/**
 * @member {String} release_date_time
 */
Episode.prototype['release_date_time'] = undefined;

/**
 * @member {Array.<module:model/Episode.RequiresAbEnum>} requires_ab
 */
Episode.prototype['requires_ab'] = undefined;

/**
 * @member {Boolean} requires_sign_in
 */
Episode.prototype['requires_sign_in'] = undefined;

/**
 * @member {Boolean} requires_tv_licence
 */
Episode.prototype['requires_tv_licence'] = undefined;

/**
 * @member {Boolean} signed
 */
Episode.prototype['signed'] = undefined;

/**
 * @member {String} slice_id
 */
Episode.prototype['slice_id'] = undefined;

/**
 * @member {String} slice_subtitle
 */
Episode.prototype['slice_subtitle'] = undefined;

/**
 * @member {module:model/Episode.StatusEnum} status
 */
Episode.prototype['status'] = undefined;

/**
 * @member {String} subtitle
 */
Episode.prototype['subtitle'] = undefined;

/**
 * @member {module:model/EpisodeSynopses} synopses
 */
Episode.prototype['synopses'] = undefined;

/**
 * @member {Array.<module:model/EpisodeTestsInner>} tests
 */
Episode.prototype['tests'] = undefined;

/**
 * @member {String} title
 */
Episode.prototype['title'] = undefined;

/**
 * @member {String} tleo_id
 */
Episode.prototype['tleo_id'] = undefined;

/**
 * @member {module:model/Episode.TleoTypeEnum} tleo_type
 */
Episode.prototype['tleo_type'] = undefined;

/**
 * @member {module:model/Episode.TypeEnum} type
 */
Episode.prototype['type'] = undefined;

/**
 * @member {Array.<module:model/EpisodeVersionsInner>} versions
 */
Episode.prototype['versions'] = undefined;





/**
 * Allowed values for the <code>programme_type</code> property.
 * @enum {String}
 * @readonly
 */
Episode['ProgrammeTypeEnum'] = {

    /**
     * value: "narrative"
     * @const
     */
    "narrative": "narrative",

    /**
     * value: "sequential"
     * @const
     */
    "sequential": "sequential",

    /**
     * value: "self-contained"
     * @const
     */
    "self-contained": "self-contained",

    /**
     * value: "strand"
     * @const
     */
    "strand": "strand",

    /**
     * value: "unclassified"
     * @const
     */
    "unclassified": "unclassified",

    /**
     * value: "one-off"
     * @const
     */
    "one-off": "one-off"
};


/**
 * Allowed values for the <code>requiresAb</code> property.
 * @enum {String}
 * @readonly
 */
Episode['RequiresAbEnum'] = {

    /**
     * value: "u13"
     * @const
     */
    "u13": "u13",

    /**
     * value: "u16"
     * @const
     */
    "u16": "u16",

    /**
     * value: "u18"
     * @const
     */
    "u18": "u18",

    /**
     * value: "o18"
     * @const
     */
    "o18": "o18"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Episode['StatusEnum'] = {

    /**
     * value: "available"
     * @const
     */
    "available": "available",

    /**
     * value: "unavailable"
     * @const
     */
    "unavailable": "unavailable"
};


/**
 * Allowed values for the <code>tleo_type</code> property.
 * @enum {String}
 * @readonly
 */
Episode['TleoTypeEnum'] = {

    /**
     * value: "episode"
     * @const
     */
    "episode": "episode",

    /**
     * value: "brand"
     * @const
     */
    "brand": "brand",

    /**
     * value: "series"
     * @const
     */
    "series": "series"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Episode['TypeEnum'] = {

    /**
     * value: "episode"
     * @const
     */
    "episode": "episode",

    /**
     * value: "episode_large"
     * @const
     */
    "episode_large": "episode_large"
};



export default Episode;

