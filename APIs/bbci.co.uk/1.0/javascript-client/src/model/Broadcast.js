/**
 * BBC iPlayer Business Layer
 * The definitive iPlayer API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: ibl-team@lists.forge.bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BroadcastDuration from './BroadcastDuration';
import BroadcastEventsInner from './BroadcastEventsInner';
import Episode from './Episode';

/**
 * The Broadcast model module.
 * @module model/Broadcast
 * @version 1.0
 */
class Broadcast {
    /**
     * Constructs a new <code>Broadcast</code>.
     * @alias module:model/Broadcast
     * @param blanked {Boolean} 
     * @param episode {module:model/Episode} 
     * @param episodeId {String} 
     * @param id {String} 
     * @param repeat {Boolean} 
     * @param scheduledEnd {String} 
     * @param scheduledStart {String} 
     * @param serviceId {String} 
     * @param type {module:model/Broadcast.TypeEnum} 
     * @param versionId {String} 
     */
    constructor(blanked, episode, episodeId, id, repeat, scheduledEnd, scheduledStart, serviceId, type, versionId) { 
        
        Broadcast.initialize(this, blanked, episode, episodeId, id, repeat, scheduledEnd, scheduledStart, serviceId, type, versionId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, blanked, episode, episodeId, id, repeat, scheduledEnd, scheduledStart, serviceId, type, versionId) { 
        obj['blanked'] = blanked;
        obj['episode'] = episode;
        obj['episode_id'] = episodeId;
        obj['id'] = id;
        obj['repeat'] = repeat;
        obj['scheduled_end'] = scheduledEnd;
        obj['scheduled_start'] = scheduledStart;
        obj['service_id'] = serviceId;
        obj['type'] = type;
        obj['version_id'] = versionId;
    }

    /**
     * Constructs a <code>Broadcast</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Broadcast} obj Optional instance to populate.
     * @return {module:model/Broadcast} The populated <code>Broadcast</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Broadcast();

            if (data.hasOwnProperty('available_on_hd_service')) {
                obj['available_on_hd_service'] = ApiClient.convertToType(data['available_on_hd_service'], 'String');
            }
            if (data.hasOwnProperty('blanked')) {
                obj['blanked'] = ApiClient.convertToType(data['blanked'], 'Boolean');
            }
            if (data.hasOwnProperty('channel_title')) {
                obj['channel_title'] = ApiClient.convertToType(data['channel_title'], 'String');
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = BroadcastDuration.constructFromObject(data['duration']);
            }
            if (data.hasOwnProperty('episode')) {
                obj['episode'] = Episode.constructFromObject(data['episode']);
            }
            if (data.hasOwnProperty('episode_id')) {
                obj['episode_id'] = ApiClient.convertToType(data['episode_id'], 'String');
            }
            if (data.hasOwnProperty('events')) {
                obj['events'] = ApiClient.convertToType(data['events'], [BroadcastEventsInner]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('repeat')) {
                obj['repeat'] = ApiClient.convertToType(data['repeat'], 'Boolean');
            }
            if (data.hasOwnProperty('scheduled_end')) {
                obj['scheduled_end'] = ApiClient.convertToType(data['scheduled_end'], 'String');
            }
            if (data.hasOwnProperty('scheduled_start')) {
                obj['scheduled_start'] = ApiClient.convertToType(data['scheduled_start'], 'String');
            }
            if (data.hasOwnProperty('service_id')) {
                obj['service_id'] = ApiClient.convertToType(data['service_id'], 'String');
            }
            if (data.hasOwnProperty('transmission_end')) {
                obj['transmission_end'] = ApiClient.convertToType(data['transmission_end'], 'String');
            }
            if (data.hasOwnProperty('transmission_start')) {
                obj['transmission_start'] = ApiClient.convertToType(data['transmission_start'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('version_id')) {
                obj['version_id'] = ApiClient.convertToType(data['version_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Broadcast</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Broadcast</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Broadcast.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['available_on_hd_service'] && !(typeof data['available_on_hd_service'] === 'string' || data['available_on_hd_service'] instanceof String)) {
            throw new Error("Expected the field `available_on_hd_service` to be a primitive type in the JSON string but got " + data['available_on_hd_service']);
        }
        // ensure the json data is a string
        if (data['channel_title'] && !(typeof data['channel_title'] === 'string' || data['channel_title'] instanceof String)) {
            throw new Error("Expected the field `channel_title` to be a primitive type in the JSON string but got " + data['channel_title']);
        }
        // validate the optional field `duration`
        if (data['duration']) { // data not null
          BroadcastDuration.validateJSON(data['duration']);
        }
        // validate the optional field `episode`
        if (data['episode']) { // data not null
          Episode.validateJSON(data['episode']);
        }
        // ensure the json data is a string
        if (data['episode_id'] && !(typeof data['episode_id'] === 'string' || data['episode_id'] instanceof String)) {
            throw new Error("Expected the field `episode_id` to be a primitive type in the JSON string but got " + data['episode_id']);
        }
        if (data['events']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['events'])) {
                throw new Error("Expected the field `events` to be an array in the JSON data but got " + data['events']);
            }
            // validate the optional field `events` (array)
            for (const item of data['events']) {
                BroadcastEventsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['scheduled_end'] && !(typeof data['scheduled_end'] === 'string' || data['scheduled_end'] instanceof String)) {
            throw new Error("Expected the field `scheduled_end` to be a primitive type in the JSON string but got " + data['scheduled_end']);
        }
        // ensure the json data is a string
        if (data['scheduled_start'] && !(typeof data['scheduled_start'] === 'string' || data['scheduled_start'] instanceof String)) {
            throw new Error("Expected the field `scheduled_start` to be a primitive type in the JSON string but got " + data['scheduled_start']);
        }
        // ensure the json data is a string
        if (data['service_id'] && !(typeof data['service_id'] === 'string' || data['service_id'] instanceof String)) {
            throw new Error("Expected the field `service_id` to be a primitive type in the JSON string but got " + data['service_id']);
        }
        // ensure the json data is a string
        if (data['transmission_end'] && !(typeof data['transmission_end'] === 'string' || data['transmission_end'] instanceof String)) {
            throw new Error("Expected the field `transmission_end` to be a primitive type in the JSON string but got " + data['transmission_end']);
        }
        // ensure the json data is a string
        if (data['transmission_start'] && !(typeof data['transmission_start'] === 'string' || data['transmission_start'] instanceof String)) {
            throw new Error("Expected the field `transmission_start` to be a primitive type in the JSON string but got " + data['transmission_start']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['version_id'] && !(typeof data['version_id'] === 'string' || data['version_id'] instanceof String)) {
            throw new Error("Expected the field `version_id` to be a primitive type in the JSON string but got " + data['version_id']);
        }

        return true;
    }


}

Broadcast.RequiredProperties = ["blanked", "episode", "episode_id", "id", "repeat", "scheduled_end", "scheduled_start", "service_id", "type", "version_id"];

/**
 * @member {String} available_on_hd_service
 */
Broadcast.prototype['available_on_hd_service'] = undefined;

/**
 * @member {Boolean} blanked
 */
Broadcast.prototype['blanked'] = undefined;

/**
 * @member {String} channel_title
 */
Broadcast.prototype['channel_title'] = undefined;

/**
 * @member {module:model/BroadcastDuration} duration
 */
Broadcast.prototype['duration'] = undefined;

/**
 * @member {module:model/Episode} episode
 */
Broadcast.prototype['episode'] = undefined;

/**
 * @member {String} episode_id
 */
Broadcast.prototype['episode_id'] = undefined;

/**
 * @member {Array.<module:model/BroadcastEventsInner>} events
 */
Broadcast.prototype['events'] = undefined;

/**
 * @member {String} id
 */
Broadcast.prototype['id'] = undefined;

/**
 * @member {Boolean} repeat
 */
Broadcast.prototype['repeat'] = undefined;

/**
 * @member {String} scheduled_end
 */
Broadcast.prototype['scheduled_end'] = undefined;

/**
 * @member {String} scheduled_start
 */
Broadcast.prototype['scheduled_start'] = undefined;

/**
 * @member {String} service_id
 */
Broadcast.prototype['service_id'] = undefined;

/**
 * @member {String} transmission_end
 */
Broadcast.prototype['transmission_end'] = undefined;

/**
 * @member {String} transmission_start
 */
Broadcast.prototype['transmission_start'] = undefined;

/**
 * @member {module:model/Broadcast.TypeEnum} type
 */
Broadcast.prototype['type'] = undefined;

/**
 * @member {String} version_id
 */
Broadcast.prototype['version_id'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Broadcast['TypeEnum'] = {

    /**
     * value: "broadcast"
     * @const
     */
    "broadcast": "broadcast"
};



export default Broadcast;

