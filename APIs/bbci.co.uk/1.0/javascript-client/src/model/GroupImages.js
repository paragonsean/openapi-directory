/**
 * BBC iPlayer Business Layer
 * The definitive iPlayer API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: ibl-team@lists.forge.bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GroupImages model module.
 * @module model/GroupImages
 * @version 1.0
 */
class GroupImages {
    /**
     * Constructs a new <code>GroupImages</code>.
     * @alias module:model/GroupImages
     * @param standard {String} 
     * @param type {module:model/GroupImages.TypeEnum} 
     * @param vertical {String} 
     */
    constructor(standard, type, vertical) { 
        
        GroupImages.initialize(this, standard, type, vertical);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, standard, type, vertical) { 
        obj['standard'] = standard;
        obj['type'] = type;
        obj['vertical'] = vertical;
    }

    /**
     * Constructs a <code>GroupImages</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GroupImages} obj Optional instance to populate.
     * @return {module:model/GroupImages} The populated <code>GroupImages</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GroupImages();

            if (data.hasOwnProperty('standard')) {
                obj['standard'] = ApiClient.convertToType(data['standard'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('vertical')) {
                obj['vertical'] = ApiClient.convertToType(data['vertical'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GroupImages</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GroupImages</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GroupImages.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['standard'] && !(typeof data['standard'] === 'string' || data['standard'] instanceof String)) {
            throw new Error("Expected the field `standard` to be a primitive type in the JSON string but got " + data['standard']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['vertical'] && !(typeof data['vertical'] === 'string' || data['vertical'] instanceof String)) {
            throw new Error("Expected the field `vertical` to be a primitive type in the JSON string but got " + data['vertical']);
        }

        return true;
    }


}

GroupImages.RequiredProperties = ["standard", "type", "vertical"];

/**
 * @member {String} standard
 */
GroupImages.prototype['standard'] = undefined;

/**
 * @member {module:model/GroupImages.TypeEnum} type
 */
GroupImages.prototype['type'] = undefined;

/**
 * @member {String} vertical
 */
GroupImages.prototype['vertical'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
GroupImages['TypeEnum'] = {

    /**
     * value: "image"
     * @const
     */
    "image": "image"
};



export default GroupImages;

