/**
 * BBC iPlayer Business Layer
 * The definitive iPlayer API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: ibl-team@lists.forge.bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Trailer model module.
 * @module model/Trailer
 * @version 1.0
 */
class Trailer {
    /**
     * Constructs a new <code>Trailer</code>.
     * @alias module:model/Trailer
     * @param id {String} 
     * @param kind {module:model/Trailer.KindEnum} 
     * @param message {String} 
     * @param title {String} 
     * @param type {module:model/Trailer.TypeEnum} 
     * @param versionId {String} 
     */
    constructor(id, kind, message, title, type, versionId) { 
        
        Trailer.initialize(this, id, kind, message, title, type, versionId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, kind, message, title, type, versionId) { 
        obj['id'] = id;
        obj['kind'] = kind;
        obj['message'] = message;
        obj['title'] = title;
        obj['type'] = type;
        obj['version_id'] = versionId;
    }

    /**
     * Constructs a <code>Trailer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Trailer} obj Optional instance to populate.
     * @return {module:model/Trailer} The populated <code>Trailer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Trailer();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('version_id')) {
                obj['version_id'] = ApiClient.convertToType(data['version_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Trailer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Trailer</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Trailer.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['version_id'] && !(typeof data['version_id'] === 'string' || data['version_id'] instanceof String)) {
            throw new Error("Expected the field `version_id` to be a primitive type in the JSON string but got " + data['version_id']);
        }

        return true;
    }


}

Trailer.RequiredProperties = ["id", "kind", "message", "title", "type", "version_id"];

/**
 * @member {String} id
 */
Trailer.prototype['id'] = undefined;

/**
 * @member {module:model/Trailer.KindEnum} kind
 */
Trailer.prototype['kind'] = undefined;

/**
 * @member {String} message
 */
Trailer.prototype['message'] = undefined;

/**
 * @member {String} title
 */
Trailer.prototype['title'] = undefined;

/**
 * @member {module:model/Trailer.TypeEnum} type
 */
Trailer.prototype['type'] = undefined;

/**
 * @member {String} version_id
 */
Trailer.prototype['version_id'] = undefined;





/**
 * Allowed values for the <code>kind</code> property.
 * @enum {String}
 * @readonly
 */
Trailer['KindEnum'] = {

    /**
     * value: "available_now"
     * @const
     */
    "available_now": "available_now",

    /**
     * value: "watch_now"
     * @const
     */
    "watch_now": "watch_now",

    /**
     * value: "coming_soon"
     * @const
     */
    "coming_soon": "coming_soon",

    /**
     * value: "streaming_now_sounds"
     * @const
     */
    "streaming_now_sounds": "streaming_now_sounds",

    /**
     * value: "other"
     * @const
     */
    "other": "other"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Trailer['TypeEnum'] = {

    /**
     * value: "trailer"
     * @const
     */
    "trailer": "trailer"
};



export default Trailer;

