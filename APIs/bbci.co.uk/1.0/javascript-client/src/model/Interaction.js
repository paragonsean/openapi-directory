/**
 * BBC iPlayer Business Layer
 * The definitive iPlayer API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: ibl-team@lists.forge.bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InteractionInteractionPoints from './InteractionInteractionPoints';
import InteractionSubtype from './InteractionSubtype';
import InteractionTitle from './InteractionTitle';
import InteractionType from './InteractionType';

/**
 * The Interaction model module.
 * @module model/Interaction
 * @version 1.0
 */
class Interaction {
    /**
     * Constructs a new <code>Interaction</code>.
     * @alias module:model/Interaction
     * @param interactionPoints {module:model/InteractionInteractionPoints} 
     * @param subtype {module:model/InteractionSubtype} 
     * @param title {module:model/InteractionTitle} 
     * @param type {module:model/InteractionType} 
     */
    constructor(interactionPoints, subtype, title, type) { 
        
        Interaction.initialize(this, interactionPoints, subtype, title, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, interactionPoints, subtype, title, type) { 
        obj['interaction_points'] = interactionPoints;
        obj['subtype'] = subtype;
        obj['title'] = title;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>Interaction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Interaction} obj Optional instance to populate.
     * @return {module:model/Interaction} The populated <code>Interaction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Interaction();

            if (data.hasOwnProperty('interaction_points')) {
                obj['interaction_points'] = InteractionInteractionPoints.constructFromObject(data['interaction_points']);
            }
            if (data.hasOwnProperty('subtype')) {
                obj['subtype'] = InteractionSubtype.constructFromObject(data['subtype']);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = InteractionTitle.constructFromObject(data['title']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = InteractionType.constructFromObject(data['type']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Interaction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Interaction</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Interaction.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `interaction_points`
        if (data['interaction_points']) { // data not null
          InteractionInteractionPoints.validateJSON(data['interaction_points']);
        }
        // validate the optional field `subtype`
        if (data['subtype']) { // data not null
          InteractionSubtype.validateJSON(data['subtype']);
        }
        // validate the optional field `title`
        if (data['title']) { // data not null
          InteractionTitle.validateJSON(data['title']);
        }
        // validate the optional field `type`
        if (data['type']) { // data not null
          InteractionType.validateJSON(data['type']);
        }

        return true;
    }


}

Interaction.RequiredProperties = ["interaction_points", "subtype", "title", "type"];

/**
 * @member {module:model/InteractionInteractionPoints} interaction_points
 */
Interaction.prototype['interaction_points'] = undefined;

/**
 * @member {module:model/InteractionSubtype} subtype
 */
Interaction.prototype['subtype'] = undefined;

/**
 * @member {module:model/InteractionTitle} title
 */
Interaction.prototype['title'] = undefined;

/**
 * @member {module:model/InteractionType} type
 */
Interaction.prototype['type'] = undefined;






export default Interaction;

