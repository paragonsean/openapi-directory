/**
 * BBC iPlayer Business Layer
 * The definitive iPlayer API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: ibl-team@lists.forge.bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ClipImages from './ClipImages';
import ClipVersionsInnerGuidanceText from './ClipVersionsInnerGuidanceText';
import Episode from './Episode';
import MasterBrand from './MasterBrand';
import ProgrammeLabels from './ProgrammeLabels';

/**
 * The Programme model module.
 * @module model/Programme
 * @version 1.0
 */
class Programme {
    /**
     * Constructs a new <code>Programme</code>.
     * @alias module:model/Programme
     * @param categories {Array.<String>} 
     * @param count {Number} 
     * @param id {String} 
     * @param images {module:model/ClipImages} 
     * @param initialChildren {Array.<module:model/Episode>} 
     * @param lexicalSortLetter {String} 
     * @param masterBrand {module:model/MasterBrand} 
     * @param status {module:model/Programme.StatusEnum} 
     * @param synopses {module:model/ClipVersionsInnerGuidanceText} 
     * @param title {String} 
     * @param type {module:model/Programme.TypeEnum} 
     */
    constructor(categories, count, id, images, initialChildren, lexicalSortLetter, masterBrand, status, synopses, title, type) { 
        
        Programme.initialize(this, categories, count, id, images, initialChildren, lexicalSortLetter, masterBrand, status, synopses, title, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, categories, count, id, images, initialChildren, lexicalSortLetter, masterBrand, status, synopses, title, type) { 
        obj['categories'] = categories;
        obj['count'] = count;
        obj['id'] = id;
        obj['images'] = images;
        obj['initial_children'] = initialChildren;
        obj['lexical_sort_letter'] = lexicalSortLetter;
        obj['master_brand'] = masterBrand;
        obj['status'] = status;
        obj['synopses'] = synopses;
        obj['title'] = title;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>Programme</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Programme} obj Optional instance to populate.
     * @return {module:model/Programme} The populated <code>Programme</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Programme();

            if (data.hasOwnProperty('categories')) {
                obj['categories'] = ApiClient.convertToType(data['categories'], ['String']);
            }
            if (data.hasOwnProperty('count')) {
                obj['count'] = ApiClient.convertToType(data['count'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('images')) {
                obj['images'] = ClipImages.constructFromObject(data['images']);
            }
            if (data.hasOwnProperty('initial_children')) {
                obj['initial_children'] = ApiClient.convertToType(data['initial_children'], [Episode]);
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ProgrammeLabels.constructFromObject(data['labels']);
            }
            if (data.hasOwnProperty('lexical_sort_letter')) {
                obj['lexical_sort_letter'] = ApiClient.convertToType(data['lexical_sort_letter'], 'String');
            }
            if (data.hasOwnProperty('master_brand')) {
                obj['master_brand'] = MasterBrand.constructFromObject(data['master_brand']);
            }
            if (data.hasOwnProperty('programme_type')) {
                obj['programme_type'] = ApiClient.convertToType(data['programme_type'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('synopses')) {
                obj['synopses'] = ClipVersionsInnerGuidanceText.constructFromObject(data['synopses']);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('tleo_type')) {
                obj['tleo_type'] = ApiClient.convertToType(data['tleo_type'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Programme</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Programme</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Programme.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['categories'])) {
            throw new Error("Expected the field `categories` to be an array in the JSON data but got " + data['categories']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `images`
        if (data['images']) { // data not null
          ClipImages.validateJSON(data['images']);
        }
        if (data['initial_children']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['initial_children'])) {
                throw new Error("Expected the field `initial_children` to be an array in the JSON data but got " + data['initial_children']);
            }
            // validate the optional field `initial_children` (array)
            for (const item of data['initial_children']) {
                Episode.validateJSON(item);
            };
        }
        // validate the optional field `labels`
        if (data['labels']) { // data not null
          ProgrammeLabels.validateJSON(data['labels']);
        }
        // ensure the json data is a string
        if (data['lexical_sort_letter'] && !(typeof data['lexical_sort_letter'] === 'string' || data['lexical_sort_letter'] instanceof String)) {
            throw new Error("Expected the field `lexical_sort_letter` to be a primitive type in the JSON string but got " + data['lexical_sort_letter']);
        }
        // validate the optional field `master_brand`
        if (data['master_brand']) { // data not null
          MasterBrand.validateJSON(data['master_brand']);
        }
        // ensure the json data is a string
        if (data['programme_type'] && !(typeof data['programme_type'] === 'string' || data['programme_type'] instanceof String)) {
            throw new Error("Expected the field `programme_type` to be a primitive type in the JSON string but got " + data['programme_type']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // validate the optional field `synopses`
        if (data['synopses']) { // data not null
          ClipVersionsInnerGuidanceText.validateJSON(data['synopses']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['tleo_type'] && !(typeof data['tleo_type'] === 'string' || data['tleo_type'] instanceof String)) {
            throw new Error("Expected the field `tleo_type` to be a primitive type in the JSON string but got " + data['tleo_type']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

Programme.RequiredProperties = ["categories", "count", "id", "images", "initial_children", "lexical_sort_letter", "master_brand", "status", "synopses", "title", "type"];

/**
 * @member {Array.<String>} categories
 */
Programme.prototype['categories'] = undefined;

/**
 * @member {Number} count
 */
Programme.prototype['count'] = undefined;

/**
 * @member {String} id
 */
Programme.prototype['id'] = undefined;

/**
 * @member {module:model/ClipImages} images
 */
Programme.prototype['images'] = undefined;

/**
 * @member {Array.<module:model/Episode>} initial_children
 */
Programme.prototype['initial_children'] = undefined;

/**
 * @member {module:model/ProgrammeLabels} labels
 */
Programme.prototype['labels'] = undefined;

/**
 * @member {String} lexical_sort_letter
 */
Programme.prototype['lexical_sort_letter'] = undefined;

/**
 * @member {module:model/MasterBrand} master_brand
 */
Programme.prototype['master_brand'] = undefined;

/**
 * @member {module:model/Programme.ProgrammeTypeEnum} programme_type
 */
Programme.prototype['programme_type'] = undefined;

/**
 * @member {module:model/Programme.StatusEnum} status
 */
Programme.prototype['status'] = undefined;

/**
 * @member {module:model/ClipVersionsInnerGuidanceText} synopses
 */
Programme.prototype['synopses'] = undefined;

/**
 * @member {String} title
 */
Programme.prototype['title'] = undefined;

/**
 * @member {module:model/Programme.TleoTypeEnum} tleo_type
 */
Programme.prototype['tleo_type'] = undefined;

/**
 * @member {module:model/Programme.TypeEnum} type
 */
Programme.prototype['type'] = undefined;





/**
 * Allowed values for the <code>programme_type</code> property.
 * @enum {String}
 * @readonly
 */
Programme['ProgrammeTypeEnum'] = {

    /**
     * value: "narrative"
     * @const
     */
    "narrative": "narrative",

    /**
     * value: "sequential"
     * @const
     */
    "sequential": "sequential",

    /**
     * value: "self-contained"
     * @const
     */
    "self-contained": "self-contained",

    /**
     * value: "strand"
     * @const
     */
    "strand": "strand",

    /**
     * value: "unclassified"
     * @const
     */
    "unclassified": "unclassified",

    /**
     * value: "one-off"
     * @const
     */
    "one-off": "one-off"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Programme['StatusEnum'] = {

    /**
     * value: "available"
     * @const
     */
    "available": "available",

    /**
     * value: "unavailable"
     * @const
     */
    "unavailable": "unavailable"
};


/**
 * Allowed values for the <code>tleo_type</code> property.
 * @enum {String}
 * @readonly
 */
Programme['TleoTypeEnum'] = {

    /**
     * value: "brand"
     * @const
     */
    "brand": "brand",

    /**
     * value: "series"
     * @const
     */
    "series": "series",

    /**
     * value: "episode"
     * @const
     */
    "episode": "episode"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Programme['TypeEnum'] = {

    /**
     * value: "programme"
     * @const
     */
    "programme": "programme",

    /**
     * value: "programme_large"
     * @const
     */
    "programme_large": "programme_large"
};



export default Programme;

