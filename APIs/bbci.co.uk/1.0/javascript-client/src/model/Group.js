/**
 * BBC iPlayer Business Layer
 * The definitive iPlayer API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: ibl-team@lists.forge.bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ClipVersionsInnerGuidanceText from './ClipVersionsInnerGuidanceText';
import GroupImages from './GroupImages';
import GroupInitialChildrenInner from './GroupInitialChildrenInner';
import GroupRelatedLinksInner from './GroupRelatedLinksInner';
import MasterBrand from './MasterBrand';

/**
 * The Group model module.
 * @module model/Group
 * @version 1.0
 */
class Group {
    /**
     * Constructs a new <code>Group</code>.
     * @alias module:model/Group
     * @param id {String} 
     * @param type {module:model/Group.TypeEnum} 
     */
    constructor(id, type) { 
        
        Group.initialize(this, id, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, type) { 
        obj['id'] = id;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>Group</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Group} obj Optional instance to populate.
     * @return {module:model/Group} The populated <code>Group</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Group();

            if (data.hasOwnProperty('count')) {
                obj['count'] = ApiClient.convertToType(data['count'], 'Number');
            }
            if (data.hasOwnProperty('episode_sort_direction')) {
                obj['episode_sort_direction'] = ApiClient.convertToType(data['episode_sort_direction'], 'String');
            }
            if (data.hasOwnProperty('group_type')) {
                obj['group_type'] = ApiClient.convertToType(data['group_type'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('images')) {
                obj['images'] = GroupImages.constructFromObject(data['images']);
            }
            if (data.hasOwnProperty('initial_children')) {
                obj['initial_children'] = ApiClient.convertToType(data['initial_children'], [GroupInitialChildrenInner]);
            }
            if (data.hasOwnProperty('master_brand')) {
                obj['master_brand'] = MasterBrand.constructFromObject(data['master_brand']);
            }
            if (data.hasOwnProperty('related_links')) {
                obj['related_links'] = ApiClient.convertToType(data['related_links'], [GroupRelatedLinksInner]);
            }
            if (data.hasOwnProperty('short_title')) {
                obj['short_title'] = ApiClient.convertToType(data['short_title'], 'String');
            }
            if (data.hasOwnProperty('stacked')) {
                obj['stacked'] = ApiClient.convertToType(data['stacked'], 'Boolean');
            }
            if (data.hasOwnProperty('synopses')) {
                obj['synopses'] = ClipVersionsInnerGuidanceText.constructFromObject(data['synopses']);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Group</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Group</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Group.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['episode_sort_direction'] && !(typeof data['episode_sort_direction'] === 'string' || data['episode_sort_direction'] instanceof String)) {
            throw new Error("Expected the field `episode_sort_direction` to be a primitive type in the JSON string but got " + data['episode_sort_direction']);
        }
        // ensure the json data is a string
        if (data['group_type'] && !(typeof data['group_type'] === 'string' || data['group_type'] instanceof String)) {
            throw new Error("Expected the field `group_type` to be a primitive type in the JSON string but got " + data['group_type']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `images`
        if (data['images']) { // data not null
          GroupImages.validateJSON(data['images']);
        }
        if (data['initial_children']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['initial_children'])) {
                throw new Error("Expected the field `initial_children` to be an array in the JSON data but got " + data['initial_children']);
            }
            // validate the optional field `initial_children` (array)
            for (const item of data['initial_children']) {
                GroupInitialChildrenInner.validateJSON(item);
            };
        }
        // validate the optional field `master_brand`
        if (data['master_brand']) { // data not null
          MasterBrand.validateJSON(data['master_brand']);
        }
        if (data['related_links']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['related_links'])) {
                throw new Error("Expected the field `related_links` to be an array in the JSON data but got " + data['related_links']);
            }
            // validate the optional field `related_links` (array)
            for (const item of data['related_links']) {
                GroupRelatedLinksInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['short_title'] && !(typeof data['short_title'] === 'string' || data['short_title'] instanceof String)) {
            throw new Error("Expected the field `short_title` to be a primitive type in the JSON string but got " + data['short_title']);
        }
        // validate the optional field `synopses`
        if (data['synopses']) { // data not null
          ClipVersionsInnerGuidanceText.validateJSON(data['synopses']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

Group.RequiredProperties = ["id", "type"];

/**
 * @member {Number} count
 */
Group.prototype['count'] = undefined;

/**
 * @member {String} episode_sort_direction
 */
Group.prototype['episode_sort_direction'] = undefined;

/**
 * @member {module:model/Group.GroupTypeEnum} group_type
 */
Group.prototype['group_type'] = undefined;

/**
 * @member {String} id
 */
Group.prototype['id'] = undefined;

/**
 * @member {module:model/GroupImages} images
 */
Group.prototype['images'] = undefined;

/**
 * @member {Array.<module:model/GroupInitialChildrenInner>} initial_children
 */
Group.prototype['initial_children'] = undefined;

/**
 * @member {module:model/MasterBrand} master_brand
 */
Group.prototype['master_brand'] = undefined;

/**
 * @member {Array.<module:model/GroupRelatedLinksInner>} related_links
 */
Group.prototype['related_links'] = undefined;

/**
 * @member {String} short_title
 */
Group.prototype['short_title'] = undefined;

/**
 * @member {Boolean} stacked
 */
Group.prototype['stacked'] = undefined;

/**
 * @member {module:model/ClipVersionsInnerGuidanceText} synopses
 */
Group.prototype['synopses'] = undefined;

/**
 * @member {String} title
 */
Group.prototype['title'] = undefined;

/**
 * @member {module:model/Group.TypeEnum} type
 */
Group.prototype['type'] = undefined;





/**
 * Allowed values for the <code>group_type</code> property.
 * @enum {String}
 * @readonly
 */
Group['GroupTypeEnum'] = {

    /**
     * value: "tleo"
     * @const
     */
    "tleo": "tleo",

    /**
     * value: "curated"
     * @const
     */
    "curated": "curated",

    /**
     * value: "automated"
     * @const
     */
    "automated": "automated",

    /**
     * value: "event"
     * @const
     */
    "event": "event"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Group['TypeEnum'] = {

    /**
     * value: "group"
     * @const
     */
    "group": "group",

    /**
     * value: "group_large"
     * @const
     */
    "group_large": "group_large"
};



export default Group;

