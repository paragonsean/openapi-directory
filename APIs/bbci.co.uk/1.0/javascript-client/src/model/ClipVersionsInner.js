/**
 * BBC iPlayer Business Layer
 * The definitive iPlayer API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: ibl-team@lists.forge.bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BroadcastDuration from './BroadcastDuration';
import ClipVersionsInnerAvailability from './ClipVersionsInnerAvailability';
import ClipVersionsInnerEventsInner from './ClipVersionsInnerEventsInner';
import ClipVersionsInnerGuidance from './ClipVersionsInnerGuidance';
import ClipVersionsInnerRrc from './ClipVersionsInnerRrc';
import Interaction from './Interaction';

/**
 * The ClipVersionsInner model module.
 * @module model/ClipVersionsInner
 * @version 1.0
 */
class ClipVersionsInner {
    /**
     * Constructs a new <code>ClipVersionsInner</code>.
     * @alias module:model/ClipVersionsInner
     * @param availability {module:model/ClipVersionsInnerAvailability} 
     * @param download {Boolean} 
     * @param duration {module:model/BroadcastDuration} 
     * @param hd {Boolean} 
     * @param id {String} 
     * @param kind {module:model/ClipVersionsInner.KindEnum} 
     * @param type {module:model/ClipVersionsInner.TypeEnum} 
     * @param uhd {Boolean} 
     */
    constructor(availability, download, duration, hd, id, kind, type, uhd) { 
        
        ClipVersionsInner.initialize(this, availability, download, duration, hd, id, kind, type, uhd);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, availability, download, duration, hd, id, kind, type, uhd) { 
        obj['availability'] = availability;
        obj['download'] = download;
        obj['duration'] = duration;
        obj['hd'] = hd;
        obj['id'] = id;
        obj['kind'] = kind;
        obj['type'] = type;
        obj['uhd'] = uhd;
    }

    /**
     * Constructs a <code>ClipVersionsInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ClipVersionsInner} obj Optional instance to populate.
     * @return {module:model/ClipVersionsInner} The populated <code>ClipVersionsInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ClipVersionsInner();

            if (data.hasOwnProperty('availability')) {
                obj['availability'] = ClipVersionsInnerAvailability.constructFromObject(data['availability']);
            }
            if (data.hasOwnProperty('credits_start')) {
                obj['credits_start'] = ApiClient.convertToType(data['credits_start'], 'Number');
            }
            if (data.hasOwnProperty('download')) {
                obj['download'] = ApiClient.convertToType(data['download'], 'Boolean');
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = BroadcastDuration.constructFromObject(data['duration']);
            }
            if (data.hasOwnProperty('events')) {
                obj['events'] = ApiClient.convertToType(data['events'], [ClipVersionsInnerEventsInner]);
            }
            if (data.hasOwnProperty('first_broadcast')) {
                obj['first_broadcast'] = ApiClient.convertToType(data['first_broadcast'], 'String');
            }
            if (data.hasOwnProperty('first_broadcast_date_time')) {
                obj['first_broadcast_date_time'] = ApiClient.convertToType(data['first_broadcast_date_time'], 'String');
            }
            if (data.hasOwnProperty('guidance')) {
                obj['guidance'] = ClipVersionsInnerGuidance.constructFromObject(data['guidance']);
            }
            if (data.hasOwnProperty('hd')) {
                obj['hd'] = ApiClient.convertToType(data['hd'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('interactions')) {
                obj['interactions'] = ApiClient.convertToType(data['interactions'], [Interaction]);
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('rrc')) {
                obj['rrc'] = ClipVersionsInnerRrc.constructFromObject(data['rrc']);
            }
            if (data.hasOwnProperty('service_id')) {
                obj['service_id'] = ApiClient.convertToType(data['service_id'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('uhd')) {
                obj['uhd'] = ApiClient.convertToType(data['uhd'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ClipVersionsInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ClipVersionsInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ClipVersionsInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `availability`
        if (data['availability']) { // data not null
          ClipVersionsInnerAvailability.validateJSON(data['availability']);
        }
        // validate the optional field `duration`
        if (data['duration']) { // data not null
          BroadcastDuration.validateJSON(data['duration']);
        }
        if (data['events']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['events'])) {
                throw new Error("Expected the field `events` to be an array in the JSON data but got " + data['events']);
            }
            // validate the optional field `events` (array)
            for (const item of data['events']) {
                ClipVersionsInnerEventsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['first_broadcast'] && !(typeof data['first_broadcast'] === 'string' || data['first_broadcast'] instanceof String)) {
            throw new Error("Expected the field `first_broadcast` to be a primitive type in the JSON string but got " + data['first_broadcast']);
        }
        // ensure the json data is a string
        if (data['first_broadcast_date_time'] && !(typeof data['first_broadcast_date_time'] === 'string' || data['first_broadcast_date_time'] instanceof String)) {
            throw new Error("Expected the field `first_broadcast_date_time` to be a primitive type in the JSON string but got " + data['first_broadcast_date_time']);
        }
        // validate the optional field `guidance`
        if (data['guidance']) { // data not null
          ClipVersionsInnerGuidance.validateJSON(data['guidance']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['interactions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['interactions'])) {
                throw new Error("Expected the field `interactions` to be an array in the JSON data but got " + data['interactions']);
            }
            // validate the optional field `interactions` (array)
            for (const item of data['interactions']) {
                Interaction.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // validate the optional field `rrc`
        if (data['rrc']) { // data not null
          ClipVersionsInnerRrc.validateJSON(data['rrc']);
        }
        // ensure the json data is a string
        if (data['service_id'] && !(typeof data['service_id'] === 'string' || data['service_id'] instanceof String)) {
            throw new Error("Expected the field `service_id` to be a primitive type in the JSON string but got " + data['service_id']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

ClipVersionsInner.RequiredProperties = ["availability", "download", "duration", "hd", "id", "kind", "type", "uhd"];

/**
 * @member {module:model/ClipVersionsInnerAvailability} availability
 */
ClipVersionsInner.prototype['availability'] = undefined;

/**
 * @member {Number} credits_start
 */
ClipVersionsInner.prototype['credits_start'] = undefined;

/**
 * @member {Boolean} download
 */
ClipVersionsInner.prototype['download'] = undefined;

/**
 * @member {module:model/BroadcastDuration} duration
 */
ClipVersionsInner.prototype['duration'] = undefined;

/**
 * @member {Array.<module:model/ClipVersionsInnerEventsInner>} events
 */
ClipVersionsInner.prototype['events'] = undefined;

/**
 * @member {String} first_broadcast
 */
ClipVersionsInner.prototype['first_broadcast'] = undefined;

/**
 * @member {String} first_broadcast_date_time
 */
ClipVersionsInner.prototype['first_broadcast_date_time'] = undefined;

/**
 * @member {module:model/ClipVersionsInnerGuidance} guidance
 */
ClipVersionsInner.prototype['guidance'] = undefined;

/**
 * @member {Boolean} hd
 */
ClipVersionsInner.prototype['hd'] = undefined;

/**
 * @member {String} id
 */
ClipVersionsInner.prototype['id'] = undefined;

/**
 * @member {Array.<module:model/Interaction>} interactions
 */
ClipVersionsInner.prototype['interactions'] = undefined;

/**
 * @member {module:model/ClipVersionsInner.KindEnum} kind
 */
ClipVersionsInner.prototype['kind'] = undefined;

/**
 * @member {module:model/ClipVersionsInnerRrc} rrc
 */
ClipVersionsInner.prototype['rrc'] = undefined;

/**
 * @member {String} service_id
 */
ClipVersionsInner.prototype['service_id'] = undefined;

/**
 * @member {module:model/ClipVersionsInner.TypeEnum} type
 */
ClipVersionsInner.prototype['type'] = undefined;

/**
 * @member {Boolean} uhd
 */
ClipVersionsInner.prototype['uhd'] = undefined;





/**
 * Allowed values for the <code>kind</code> property.
 * @enum {String}
 * @readonly
 */
ClipVersionsInner['KindEnum'] = {

    /**
     * value: "legal"
     * @const
     */
    "legal": "legal",

    /**
     * value: "editorial"
     * @const
     */
    "editorial": "editorial",

    /**
     * value: "technical-replacement"
     * @const
     */
    "technical-replacement": "technical-replacement",

    /**
     * value: "original"
     * @const
     */
    "original": "original",

    /**
     * value: "iplayer-version"
     * @const
     */
    "iplayer-version": "iplayer-version",

    /**
     * value: "lengthened"
     * @const
     */
    "lengthened": "lengthened",

    /**
     * value: "shortened"
     * @const
     */
    "shortened": "shortened",

    /**
     * value: "pre-watershed"
     * @const
     */
    "pre-watershed": "pre-watershed",

    /**
     * value: "post-watershed"
     * @const
     */
    "post-watershed": "post-watershed",

    /**
     * value: "warnings-higher"
     * @const
     */
    "warnings-higher": "warnings-higher",

    /**
     * value: "warnings-lower"
     * @const
     */
    "warnings-lower": "warnings-lower",

    /**
     * value: "warnings-none"
     * @const
     */
    "warnings-none": "warnings-none",

    /**
     * value: "duplication"
     * @const
     */
    "duplication": "duplication",

    /**
     * value: "open-subtitled"
     * @const
     */
    "open-subtitled": "open-subtitled",

    /**
     * value: "other"
     * @const
     */
    "other": "other",

    /**
     * value: "audio-described"
     * @const
     */
    "audio-described": "audio-described",

    /**
     * value: "signed"
     * @const
     */
    "signed": "signed",

    /**
     * value: "webcast"
     * @const
     */
    "webcast": "webcast",

    /**
     * value: "simulcast"
     * @const
     */
    "simulcast": "simulcast"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
ClipVersionsInner['TypeEnum'] = {

    /**
     * value: "version"
     * @const
     */
    "version": "version",

    /**
     * value: "version_large"
     * @const
     */
    "version_large": "version_large"
};



export default ClipVersionsInner;

