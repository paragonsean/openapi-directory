/**
 * BBC iPlayer Business Layer
 * The definitive iPlayer API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: ibl-team@lists.forge.bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Category model module.
 * @module model/Category
 * @version 1.0
 */
class Category {
    /**
     * Constructs a new <code>Category</code>.
     * @alias module:model/Category
     * @param id {String} 
     * @param kind {module:model/Category.KindEnum} 
     * @param title {String} 
     * @param type {module:model/Category.TypeEnum} 
     */
    constructor(id, kind, title, type) { 
        
        Category.initialize(this, id, kind, title, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, kind, title, type) { 
        obj['id'] = id;
        obj['kind'] = kind;
        obj['title'] = title;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>Category</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Category} obj Optional instance to populate.
     * @return {module:model/Category} The populated <code>Category</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Category();

            if (data.hasOwnProperty('child_episode_count')) {
                obj['child_episode_count'] = ApiClient.convertToType(data['child_episode_count'], 'Number');
            }
            if (data.hasOwnProperty('child_programme_count')) {
                obj['child_programme_count'] = ApiClient.convertToType(data['child_programme_count'], 'Number');
            }
            if (data.hasOwnProperty('contextual_title')) {
                obj['contextual_title'] = ApiClient.convertToType(data['contextual_title'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('parent_category')) {
                obj['parent_category'] = ApiClient.convertToType(data['parent_category'], 'String');
            }
            if (data.hasOwnProperty('sub_categories')) {
                obj['sub_categories'] = ApiClient.convertToType(data['sub_categories'], [Category]);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Category</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Category</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Category.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['contextual_title'] && !(typeof data['contextual_title'] === 'string' || data['contextual_title'] instanceof String)) {
            throw new Error("Expected the field `contextual_title` to be a primitive type in the JSON string but got " + data['contextual_title']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['parent_category'] && !(typeof data['parent_category'] === 'string' || data['parent_category'] instanceof String)) {
            throw new Error("Expected the field `parent_category` to be a primitive type in the JSON string but got " + data['parent_category']);
        }
        if (data['sub_categories']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sub_categories'])) {
                throw new Error("Expected the field `sub_categories` to be an array in the JSON data but got " + data['sub_categories']);
            }
            // validate the optional field `sub_categories` (array)
            for (const item of data['sub_categories']) {
                Category.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

Category.RequiredProperties = ["id", "kind", "title", "type"];

/**
 * @member {Number} child_episode_count
 */
Category.prototype['child_episode_count'] = undefined;

/**
 * @member {Number} child_programme_count
 */
Category.prototype['child_programme_count'] = undefined;

/**
 * @member {String} contextual_title
 */
Category.prototype['contextual_title'] = undefined;

/**
 * @member {String} id
 */
Category.prototype['id'] = undefined;

/**
 * @member {module:model/Category.KindEnum} kind
 */
Category.prototype['kind'] = undefined;

/**
 * @member {String} parent_category
 */
Category.prototype['parent_category'] = undefined;

/**
 * @member {Array.<module:model/Category>} sub_categories
 */
Category.prototype['sub_categories'] = undefined;

/**
 * @member {String} title
 */
Category.prototype['title'] = undefined;

/**
 * @member {module:model/Category.TypeEnum} type
 */
Category.prototype['type'] = undefined;





/**
 * Allowed values for the <code>kind</code> property.
 * @enum {String}
 * @readonly
 */
Category['KindEnum'] = {

    /**
     * value: "genre"
     * @const
     */
    "genre": "genre",

    /**
     * value: "accessibility"
     * @const
     */
    "accessibility": "accessibility",

    /**
     * value: "national"
     * @const
     */
    "national": "national",

    /**
     * value: "childrens"
     * @const
     */
    "childrens": "childrens"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Category['TypeEnum'] = {

    /**
     * value: "category"
     * @const
     */
    "category": "category"
};



export default Category;

