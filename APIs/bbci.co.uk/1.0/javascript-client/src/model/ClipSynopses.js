/**
 * BBC iPlayer Business Layer
 * The definitive iPlayer API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: ibl-team@lists.forge.bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ClipSynopses model module.
 * @module model/ClipSynopses
 * @version 1.0
 */
class ClipSynopses {
    /**
     * Constructs a new <code>ClipSynopses</code>.
     * @alias module:model/ClipSynopses
     */
    constructor() { 
        
        ClipSynopses.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ClipSynopses</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ClipSynopses} obj Optional instance to populate.
     * @return {module:model/ClipSynopses} The populated <code>ClipSynopses</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ClipSynopses();

            if (data.hasOwnProperty('editorial')) {
                obj['editorial'] = ApiClient.convertToType(data['editorial'], 'String');
            }
            if (data.hasOwnProperty('large')) {
                obj['large'] = ApiClient.convertToType(data['large'], 'String');
            }
            if (data.hasOwnProperty('medium')) {
                obj['medium'] = ApiClient.convertToType(data['medium'], 'String');
            }
            if (data.hasOwnProperty('small')) {
                obj['small'] = ApiClient.convertToType(data['small'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ClipSynopses</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ClipSynopses</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['editorial'] && !(typeof data['editorial'] === 'string' || data['editorial'] instanceof String)) {
            throw new Error("Expected the field `editorial` to be a primitive type in the JSON string but got " + data['editorial']);
        }
        // ensure the json data is a string
        if (data['large'] && !(typeof data['large'] === 'string' || data['large'] instanceof String)) {
            throw new Error("Expected the field `large` to be a primitive type in the JSON string but got " + data['large']);
        }
        // ensure the json data is a string
        if (data['medium'] && !(typeof data['medium'] === 'string' || data['medium'] instanceof String)) {
            throw new Error("Expected the field `medium` to be a primitive type in the JSON string but got " + data['medium']);
        }
        // ensure the json data is a string
        if (data['small'] && !(typeof data['small'] === 'string' || data['small'] instanceof String)) {
            throw new Error("Expected the field `small` to be a primitive type in the JSON string but got " + data['small']);
        }

        return true;
    }


}



/**
 * @member {String} editorial
 */
ClipSynopses.prototype['editorial'] = undefined;

/**
 * @member {String} large
 */
ClipSynopses.prototype['large'] = undefined;

/**
 * @member {String} medium
 */
ClipSynopses.prototype['medium'] = undefined;

/**
 * @member {String} small
 */
ClipSynopses.prototype['small'] = undefined;






export default ClipSynopses;

