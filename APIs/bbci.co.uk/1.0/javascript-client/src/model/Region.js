/**
 * BBC iPlayer Business Layer
 * The definitive iPlayer API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: ibl-team@lists.forge.bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Region model module.
 * @module model/Region
 * @version 1.0
 */
class Region {
    /**
     * Constructs a new <code>Region</code>.
     * @alias module:model/Region
     * @param id {String} 
     * @param kind {module:model/Region.KindEnum} 
     * @param shortId {String} 
     * @param title {String} 
     * @param type {module:model/Region.TypeEnum} 
     */
    constructor(id, kind, shortId, title, type) { 
        
        Region.initialize(this, id, kind, shortId, title, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, kind, shortId, title, type) { 
        obj['id'] = id;
        obj['kind'] = kind;
        obj['short_id'] = shortId;
        obj['title'] = title;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>Region</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Region} obj Optional instance to populate.
     * @return {module:model/Region} The populated <code>Region</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Region();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('short_id')) {
                obj['short_id'] = ApiClient.convertToType(data['short_id'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Region</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Region</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Region.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['short_id'] && !(typeof data['short_id'] === 'string' || data['short_id'] instanceof String)) {
            throw new Error("Expected the field `short_id` to be a primitive type in the JSON string but got " + data['short_id']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

Region.RequiredProperties = ["id", "kind", "short_id", "title", "type"];

/**
 * @member {String} id
 */
Region.prototype['id'] = undefined;

/**
 * @member {module:model/Region.KindEnum} kind
 */
Region.prototype['kind'] = undefined;

/**
 * @member {String} short_id
 */
Region.prototype['short_id'] = undefined;

/**
 * @member {String} title
 */
Region.prototype['title'] = undefined;

/**
 * @member {module:model/Region.TypeEnum} type
 */
Region.prototype['type'] = undefined;





/**
 * Allowed values for the <code>kind</code> property.
 * @enum {String}
 * @readonly
 */
Region['KindEnum'] = {

    /**
     * value: "regional"
     * @const
     */
    "regional": "regional",

    /**
     * value: "national"
     * @const
     */
    "national": "national"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Region['TypeEnum'] = {

    /**
     * value: "region"
     * @const
     */
    "region": "region"
};



export default Region;

