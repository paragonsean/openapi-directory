/**
 * BBC iPlayer Business Layer
 * The definitive iPlayer API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: ibl-team@lists.forge.bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MasterBrandTitles from './MasterBrandTitles';

/**
 * The MasterBrand model module.
 * @module model/MasterBrand
 * @version 1.0
 */
class MasterBrand {
    /**
     * Constructs a new <code>MasterBrand</code>.
     * @alias module:model/MasterBrand
     * @param attribution {String} 
     * @param id {String} 
     * @param titles {module:model/MasterBrandTitles} 
     */
    constructor(attribution, id, titles) { 
        
        MasterBrand.initialize(this, attribution, id, titles);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, attribution, id, titles) { 
        obj['attribution'] = attribution;
        obj['id'] = id;
        obj['titles'] = titles;
    }

    /**
     * Constructs a <code>MasterBrand</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MasterBrand} obj Optional instance to populate.
     * @return {module:model/MasterBrand} The populated <code>MasterBrand</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MasterBrand();

            if (data.hasOwnProperty('attribution')) {
                obj['attribution'] = ApiClient.convertToType(data['attribution'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('ident_id')) {
                obj['ident_id'] = ApiClient.convertToType(data['ident_id'], 'String');
            }
            if (data.hasOwnProperty('titles')) {
                obj['titles'] = MasterBrandTitles.constructFromObject(data['titles']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MasterBrand</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MasterBrand</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MasterBrand.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['attribution'] && !(typeof data['attribution'] === 'string' || data['attribution'] instanceof String)) {
            throw new Error("Expected the field `attribution` to be a primitive type in the JSON string but got " + data['attribution']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['ident_id'] && !(typeof data['ident_id'] === 'string' || data['ident_id'] instanceof String)) {
            throw new Error("Expected the field `ident_id` to be a primitive type in the JSON string but got " + data['ident_id']);
        }
        // validate the optional field `titles`
        if (data['titles']) { // data not null
          MasterBrandTitles.validateJSON(data['titles']);
        }

        return true;
    }


}

MasterBrand.RequiredProperties = ["attribution", "id", "titles"];

/**
 * @member {String} attribution
 */
MasterBrand.prototype['attribution'] = undefined;

/**
 * @member {String} id
 */
MasterBrand.prototype['id'] = undefined;

/**
 * @member {String} ident_id
 */
MasterBrand.prototype['ident_id'] = undefined;

/**
 * @member {module:model/MasterBrandTitles} titles
 */
MasterBrand.prototype['titles'] = undefined;






export default MasterBrand;

