/**
 * BBC iPlayer Business Layer
 * The definitive iPlayer API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: ibl-team@lists.forge.bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEpisode_versions_inner_anyOf_store_session_stats.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEpisode_versions_inner_anyOf_store_session_stats::OAIEpisode_versions_inner_anyOf_store_session_stats(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEpisode_versions_inner_anyOf_store_session_stats::OAIEpisode_versions_inner_anyOf_store_session_stats() {
    this->initializeModel();
}

OAIEpisode_versions_inner_anyOf_store_session_stats::~OAIEpisode_versions_inner_anyOf_store_session_stats() {}

void OAIEpisode_versions_inner_anyOf_store_session_stats::initializeModel() {

    m_asset_name_isSet = false;
    m_asset_name_isValid = false;

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_content_variant_isSet = false;
    m_content_variant_isValid = false;

    m_episode_name_isSet = false;
    m_episode_name_isValid = false;

    m_parent_pid_isSet = false;
    m_parent_pid_isValid = false;

    m_parent_pid_type_isSet = false;
    m_parent_pid_type_isValid = false;

    m_product_variant_isSet = false;
    m_product_variant_isValid = false;

    m_viewer_id_isSet = false;
    m_viewer_id_isValid = false;
}

void OAIEpisode_versions_inner_anyOf_store_session_stats::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEpisode_versions_inner_anyOf_store_session_stats::fromJsonObject(QJsonObject json) {

    m_asset_name_isValid = ::OpenAPI::fromJsonValue(m_asset_name, json[QString("assetName")]);
    m_asset_name_isSet = !json[QString("assetName")].isNull() && m_asset_name_isValid;

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("contentType")]);
    m_content_type_isSet = !json[QString("contentType")].isNull() && m_content_type_isValid;

    m_content_variant_isValid = ::OpenAPI::fromJsonValue(m_content_variant, json[QString("contentVariant")]);
    m_content_variant_isSet = !json[QString("contentVariant")].isNull() && m_content_variant_isValid;

    m_episode_name_isValid = ::OpenAPI::fromJsonValue(m_episode_name, json[QString("episodeName")]);
    m_episode_name_isSet = !json[QString("episodeName")].isNull() && m_episode_name_isValid;

    m_parent_pid_isValid = ::OpenAPI::fromJsonValue(m_parent_pid, json[QString("parentPID")]);
    m_parent_pid_isSet = !json[QString("parentPID")].isNull() && m_parent_pid_isValid;

    m_parent_pid_type_isValid = ::OpenAPI::fromJsonValue(m_parent_pid_type, json[QString("parentPIDType")]);
    m_parent_pid_type_isSet = !json[QString("parentPIDType")].isNull() && m_parent_pid_type_isValid;

    m_product_variant_isValid = ::OpenAPI::fromJsonValue(m_product_variant, json[QString("productVariant")]);
    m_product_variant_isSet = !json[QString("productVariant")].isNull() && m_product_variant_isValid;

    m_viewer_id_isValid = ::OpenAPI::fromJsonValue(m_viewer_id, json[QString("viewerId")]);
    m_viewer_id_isSet = !json[QString("viewerId")].isNull() && m_viewer_id_isValid;
}

QString OAIEpisode_versions_inner_anyOf_store_session_stats::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEpisode_versions_inner_anyOf_store_session_stats::asJsonObject() const {
    QJsonObject obj;
    if (m_asset_name_isSet) {
        obj.insert(QString("assetName"), ::OpenAPI::toJsonValue(m_asset_name));
    }
    if (m_content_type_isSet) {
        obj.insert(QString("contentType"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_content_variant_isSet) {
        obj.insert(QString("contentVariant"), ::OpenAPI::toJsonValue(m_content_variant));
    }
    if (m_episode_name_isSet) {
        obj.insert(QString("episodeName"), ::OpenAPI::toJsonValue(m_episode_name));
    }
    if (m_parent_pid_isSet) {
        obj.insert(QString("parentPID"), ::OpenAPI::toJsonValue(m_parent_pid));
    }
    if (m_parent_pid_type_isSet) {
        obj.insert(QString("parentPIDType"), ::OpenAPI::toJsonValue(m_parent_pid_type));
    }
    if (m_product_variant_isSet) {
        obj.insert(QString("productVariant"), ::OpenAPI::toJsonValue(m_product_variant));
    }
    if (m_viewer_id_isSet) {
        obj.insert(QString("viewerId"), ::OpenAPI::toJsonValue(m_viewer_id));
    }
    return obj;
}

QString OAIEpisode_versions_inner_anyOf_store_session_stats::getAssetName() const {
    return m_asset_name;
}
void OAIEpisode_versions_inner_anyOf_store_session_stats::setAssetName(const QString &asset_name) {
    m_asset_name = asset_name;
    m_asset_name_isSet = true;
}

bool OAIEpisode_versions_inner_anyOf_store_session_stats::is_asset_name_Set() const{
    return m_asset_name_isSet;
}

bool OAIEpisode_versions_inner_anyOf_store_session_stats::is_asset_name_Valid() const{
    return m_asset_name_isValid;
}

QString OAIEpisode_versions_inner_anyOf_store_session_stats::getContentType() const {
    return m_content_type;
}
void OAIEpisode_versions_inner_anyOf_store_session_stats::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIEpisode_versions_inner_anyOf_store_session_stats::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIEpisode_versions_inner_anyOf_store_session_stats::is_content_type_Valid() const{
    return m_content_type_isValid;
}

QString OAIEpisode_versions_inner_anyOf_store_session_stats::getContentVariant() const {
    return m_content_variant;
}
void OAIEpisode_versions_inner_anyOf_store_session_stats::setContentVariant(const QString &content_variant) {
    m_content_variant = content_variant;
    m_content_variant_isSet = true;
}

bool OAIEpisode_versions_inner_anyOf_store_session_stats::is_content_variant_Set() const{
    return m_content_variant_isSet;
}

bool OAIEpisode_versions_inner_anyOf_store_session_stats::is_content_variant_Valid() const{
    return m_content_variant_isValid;
}

QString OAIEpisode_versions_inner_anyOf_store_session_stats::getEpisodeName() const {
    return m_episode_name;
}
void OAIEpisode_versions_inner_anyOf_store_session_stats::setEpisodeName(const QString &episode_name) {
    m_episode_name = episode_name;
    m_episode_name_isSet = true;
}

bool OAIEpisode_versions_inner_anyOf_store_session_stats::is_episode_name_Set() const{
    return m_episode_name_isSet;
}

bool OAIEpisode_versions_inner_anyOf_store_session_stats::is_episode_name_Valid() const{
    return m_episode_name_isValid;
}

QString OAIEpisode_versions_inner_anyOf_store_session_stats::getParentPid() const {
    return m_parent_pid;
}
void OAIEpisode_versions_inner_anyOf_store_session_stats::setParentPid(const QString &parent_pid) {
    m_parent_pid = parent_pid;
    m_parent_pid_isSet = true;
}

bool OAIEpisode_versions_inner_anyOf_store_session_stats::is_parent_pid_Set() const{
    return m_parent_pid_isSet;
}

bool OAIEpisode_versions_inner_anyOf_store_session_stats::is_parent_pid_Valid() const{
    return m_parent_pid_isValid;
}

QString OAIEpisode_versions_inner_anyOf_store_session_stats::getParentPidType() const {
    return m_parent_pid_type;
}
void OAIEpisode_versions_inner_anyOf_store_session_stats::setParentPidType(const QString &parent_pid_type) {
    m_parent_pid_type = parent_pid_type;
    m_parent_pid_type_isSet = true;
}

bool OAIEpisode_versions_inner_anyOf_store_session_stats::is_parent_pid_type_Set() const{
    return m_parent_pid_type_isSet;
}

bool OAIEpisode_versions_inner_anyOf_store_session_stats::is_parent_pid_type_Valid() const{
    return m_parent_pid_type_isValid;
}

QString OAIEpisode_versions_inner_anyOf_store_session_stats::getProductVariant() const {
    return m_product_variant;
}
void OAIEpisode_versions_inner_anyOf_store_session_stats::setProductVariant(const QString &product_variant) {
    m_product_variant = product_variant;
    m_product_variant_isSet = true;
}

bool OAIEpisode_versions_inner_anyOf_store_session_stats::is_product_variant_Set() const{
    return m_product_variant_isSet;
}

bool OAIEpisode_versions_inner_anyOf_store_session_stats::is_product_variant_Valid() const{
    return m_product_variant_isValid;
}

QString OAIEpisode_versions_inner_anyOf_store_session_stats::getViewerId() const {
    return m_viewer_id;
}
void OAIEpisode_versions_inner_anyOf_store_session_stats::setViewerId(const QString &viewer_id) {
    m_viewer_id = viewer_id;
    m_viewer_id_isSet = true;
}

bool OAIEpisode_versions_inner_anyOf_store_session_stats::is_viewer_id_Set() const{
    return m_viewer_id_isSet;
}

bool OAIEpisode_versions_inner_anyOf_store_session_stats::is_viewer_id_Valid() const{
    return m_viewer_id_isValid;
}

bool OAIEpisode_versions_inner_anyOf_store_session_stats::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asset_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_variant_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_episode_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_pid_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_variant_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_viewer_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEpisode_versions_inner_anyOf_store_session_stats::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
