/**
 * BBC iPlayer Business Layer
 * The definitive iPlayer API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: ibl-team@lists.forge.bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBroadcast_events_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBroadcast_events_inner::OAIBroadcast_events_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBroadcast_events_inner::OAIBroadcast_events_inner() {
    this->initializeModel();
}

OAIBroadcast_events_inner::~OAIBroadcast_events_inner() {}

void OAIBroadcast_events_inner::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_system_isSet = false;
    m_system_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;
}

void OAIBroadcast_events_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBroadcast_events_inner::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_system_isValid = ::OpenAPI::fromJsonValue(m_system, json[QString("system")]);
    m_system_isSet = !json[QString("system")].isNull() && m_system_isValid;

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("time")]);
    m_time_isSet = !json[QString("time")].isNull() && m_time_isValid;
}

QString OAIBroadcast_events_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBroadcast_events_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_system_isSet) {
        obj.insert(QString("system"), ::OpenAPI::toJsonValue(m_system));
    }
    if (m_time_isSet) {
        obj.insert(QString("time"), ::OpenAPI::toJsonValue(m_time));
    }
    return obj;
}

QString OAIBroadcast_events_inner::getName() const {
    return m_name;
}
void OAIBroadcast_events_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBroadcast_events_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBroadcast_events_inner::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIBroadcast_events_inner::getSystem() const {
    return m_system;
}
void OAIBroadcast_events_inner::setSystem(const QString &system) {
    m_system = system;
    m_system_isSet = true;
}

bool OAIBroadcast_events_inner::is_system_Set() const{
    return m_system_isSet;
}

bool OAIBroadcast_events_inner::is_system_Valid() const{
    return m_system_isValid;
}

QString OAIBroadcast_events_inner::getTime() const {
    return m_time;
}
void OAIBroadcast_events_inner::setTime(const QString &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAIBroadcast_events_inner::is_time_Set() const{
    return m_time_isSet;
}

bool OAIBroadcast_events_inner::is_time_Valid() const{
    return m_time_isValid;
}

bool OAIBroadcast_events_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBroadcast_events_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_system_isValid && m_time_isValid && true;
}

} // namespace OpenAPI
