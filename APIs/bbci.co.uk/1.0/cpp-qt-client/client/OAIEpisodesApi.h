/**
 * BBC iPlayer Business Layer
 * The definitive iPlayer API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: ibl-team@lists.forge.bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIEpisodesApi_H
#define OAI_OAIEpisodesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIEpisodesApi : public QObject {
    Q_OBJECT

public:
    OAIEpisodesApi(const int timeOut = 0);
    ~OAIEpisodesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  pid QString [required]
    * @param[in]  rights QString [required]
    * @param[in]  availability QString [required]
    */
    virtual void getClips(const QString &pid, const QString &rights, const QString &availability);

    /**
    * @param[in]  category QString [required]
    * @param[in]  lang QString [required]
    * @param[in]  rights QString [required]
    * @param[in]  availability QString [required]
    * @param[in]  page qint64 [required]
    * @param[in]  per_page qint64 [required]
    * @param[in]  sort QString [optional]
    */
    virtual void getEpisodes_by_category(const QString &category, const QString &lang, const QString &rights, const QString &availability, const qint64 &page, const qint64 &per_page, const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pid QString [required]
    * @param[in]  rights QString [required]
    * @param[in]  page qint64 [required]
    * @param[in]  per_page qint64 [required]
    * @param[in]  initial_child_count qint32 [required]
    * @param[in]  sort QString [required]
    * @param[in]  sort_direction QString [required]
    * @param[in]  availability QString [required]
    * @param[in]  mixin QList<QString> [optional]
    */
    virtual void getEpisodes_by_group(const QString &pid, const QString &rights, const qint64 &page, const qint64 &per_page, const qint32 &initial_child_count, const QString &sort, const QString &sort_direction, const QString &availability, const ::OpenAPI::OptionalParam<QList<QString>> &mixin = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  pid QString [required]
    * @param[in]  rights QString [required]
    * @param[in]  availability QString [required]
    * @param[in]  initial_child_count qint32 [required]
    */
    virtual void getEpisodes_by_parent_PID(const QString &pid, const QString &rights, const QString &availability, const qint32 &initial_child_count);

    /**
    * @param[in]  pid QString [required]
    * @param[in]  rights QString [required]
    * @param[in]  availability QString [required]
    */
    virtual void getOnwardJourney(const QString &pid, const QString &rights, const QString &availability);

    /**
    * @param[in]  pid QString [required]
    * @param[in]  rights QString [required]
    * @param[in]  availability QString [required]
    */
    virtual void getPostRolls(const QString &pid, const QString &rights, const QString &availability);

    /**
    * @param[in]  pid QString [required]
    * @param[in]  rights QString [required]
    * @param[in]  availability QString [required]
    * @param[in]  mixin QList<QString> [optional]
    */
    virtual void getProgramme_by_PID(const QString &pid, const QString &rights, const QString &availability, const ::OpenAPI::OptionalParam<QList<QString>> &mixin = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  pid QString [required]
    * @param[in]  rights QString [required]
    * @param[in]  availability QString [required]
    * @param[in]  page qint64 [required]
    * @param[in]  per_page qint64 [required]
    */
    virtual void getProgramme_recommendations(const QString &pid, const QString &rights, const QString &availability, const qint64 &page, const qint64 &per_page);

    /**
    * @param[in]  rights QString [required]
    * @param[in]  page qint64 [required]
    * @param[in]  per_page qint64 [required]
    * @param[in]  initial_child_count qint32 [required]
    * @param[in]  sort QString [required]
    * @param[in]  sort_direction QString [required]
    * @param[in]  availability QString [required]
    * @param[in]  mixin QList<QString> [optional]
    */
    virtual void getProgrammes_popular(const QString &rights, const qint64 &page, const qint64 &per_page, const qint32 &initial_child_count, const QString &sort, const QString &sort_direction, const QString &availability, const ::OpenAPI::OptionalParam<QList<QString>> &mixin = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  pid QString [required]
    * @param[in]  rights QString [required]
    * @param[in]  availability QString [required]
    */
    virtual void getTrailers__preRolls(const QString &pid, const QString &rights, const QString &availability);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getClipsCallback(OAIHttpRequestWorker *worker);
    void getEpisodes_by_categoryCallback(OAIHttpRequestWorker *worker);
    void getEpisodes_by_groupCallback(OAIHttpRequestWorker *worker);
    void getEpisodes_by_parent_PIDCallback(OAIHttpRequestWorker *worker);
    void getOnwardJourneyCallback(OAIHttpRequestWorker *worker);
    void getPostRollsCallback(OAIHttpRequestWorker *worker);
    void getProgramme_by_PIDCallback(OAIHttpRequestWorker *worker);
    void getProgramme_recommendationsCallback(OAIHttpRequestWorker *worker);
    void getProgrammes_popularCallback(OAIHttpRequestWorker *worker);
    void getTrailers__preRollsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getClipsSignal(QJsonValue summary);
    void getEpisodes_by_categorySignal(QJsonValue summary);
    void getEpisodes_by_groupSignal(QJsonValue summary);
    void getEpisodes_by_parent_PIDSignal(QJsonValue summary);
    void getOnwardJourneySignal(QJsonValue summary);
    void getPostRollsSignal(QJsonValue summary);
    void getProgramme_by_PIDSignal(QJsonValue summary);
    void getProgramme_recommendationsSignal(QJsonValue summary);
    void getProgrammes_popularSignal(QJsonValue summary);
    void getTrailers__preRollsSignal(QJsonValue summary);


    void getClipsSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void getEpisodes_by_categorySignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void getEpisodes_by_groupSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void getEpisodes_by_parent_PIDSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void getOnwardJourneySignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void getPostRollsSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void getProgramme_by_PIDSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void getProgramme_recommendationsSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void getProgrammes_popularSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void getTrailers__preRollsSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);

    Q_DECL_DEPRECATED_X("Use getClipsSignalError() instead")
    void getClipsSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getClipsSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEpisodes_by_categorySignalError() instead")
    void getEpisodes_by_categorySignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEpisodes_by_categorySignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEpisodes_by_groupSignalError() instead")
    void getEpisodes_by_groupSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEpisodes_by_groupSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEpisodes_by_parent_PIDSignalError() instead")
    void getEpisodes_by_parent_PIDSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEpisodes_by_parent_PIDSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOnwardJourneySignalError() instead")
    void getOnwardJourneySignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOnwardJourneySignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPostRollsSignalError() instead")
    void getPostRollsSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPostRollsSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProgramme_by_PIDSignalError() instead")
    void getProgramme_by_PIDSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProgramme_by_PIDSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProgramme_recommendationsSignalError() instead")
    void getProgramme_recommendationsSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProgramme_recommendationsSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProgrammes_popularSignalError() instead")
    void getProgrammes_popularSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProgrammes_popularSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTrailers__preRollsSignalError() instead")
    void getTrailers__preRollsSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTrailers__preRollsSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getClipsSignalErrorFull() instead")
    void getClipsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getClipsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEpisodes_by_categorySignalErrorFull() instead")
    void getEpisodes_by_categorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEpisodes_by_categorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEpisodes_by_groupSignalErrorFull() instead")
    void getEpisodes_by_groupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEpisodes_by_groupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEpisodes_by_parent_PIDSignalErrorFull() instead")
    void getEpisodes_by_parent_PIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEpisodes_by_parent_PIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOnwardJourneySignalErrorFull() instead")
    void getOnwardJourneySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOnwardJourneySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPostRollsSignalErrorFull() instead")
    void getPostRollsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPostRollsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProgramme_by_PIDSignalErrorFull() instead")
    void getProgramme_by_PIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProgramme_by_PIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProgramme_recommendationsSignalErrorFull() instead")
    void getProgramme_recommendationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProgramme_recommendationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProgrammes_popularSignalErrorFull() instead")
    void getProgrammes_popularSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProgrammes_popularSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTrailers__preRollsSignalErrorFull() instead")
    void getTrailers__preRollsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTrailers__preRollsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
