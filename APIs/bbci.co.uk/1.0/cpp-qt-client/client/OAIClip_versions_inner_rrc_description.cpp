/**
 * BBC iPlayer Business Layer
 * The definitive iPlayer API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: ibl-team@lists.forge.bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClip_versions_inner_rrc_description.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClip_versions_inner_rrc_description::OAIClip_versions_inner_rrc_description(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClip_versions_inner_rrc_description::OAIClip_versions_inner_rrc_description() {
    this->initializeModel();
}

OAIClip_versions_inner_rrc_description::~OAIClip_versions_inner_rrc_description() {}

void OAIClip_versions_inner_rrc_description::initializeModel() {

    m_large_isSet = false;
    m_large_isValid = false;

    m_small_isSet = false;
    m_small_isValid = false;
}

void OAIClip_versions_inner_rrc_description::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClip_versions_inner_rrc_description::fromJsonObject(QJsonObject json) {

    m_large_isValid = ::OpenAPI::fromJsonValue(m_large, json[QString("large")]);
    m_large_isSet = !json[QString("large")].isNull() && m_large_isValid;

    m_small_isValid = ::OpenAPI::fromJsonValue(m_small, json[QString("small")]);
    m_small_isSet = !json[QString("small")].isNull() && m_small_isValid;
}

QString OAIClip_versions_inner_rrc_description::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClip_versions_inner_rrc_description::asJsonObject() const {
    QJsonObject obj;
    if (m_large_isSet) {
        obj.insert(QString("large"), ::OpenAPI::toJsonValue(m_large));
    }
    if (m_small_isSet) {
        obj.insert(QString("small"), ::OpenAPI::toJsonValue(m_small));
    }
    return obj;
}

QString OAIClip_versions_inner_rrc_description::getLarge() const {
    return m_large;
}
void OAIClip_versions_inner_rrc_description::setLarge(const QString &large) {
    m_large = large;
    m_large_isSet = true;
}

bool OAIClip_versions_inner_rrc_description::is_large_Set() const{
    return m_large_isSet;
}

bool OAIClip_versions_inner_rrc_description::is_large_Valid() const{
    return m_large_isValid;
}

QString OAIClip_versions_inner_rrc_description::getSmall() const {
    return m_small;
}
void OAIClip_versions_inner_rrc_description::setSmall(const QString &small) {
    m_small = small;
    m_small_isSet = true;
}

bool OAIClip_versions_inner_rrc_description::is_small_Set() const{
    return m_small_isSet;
}

bool OAIClip_versions_inner_rrc_description::is_small_Valid() const{
    return m_small_isValid;
}

bool OAIClip_versions_inner_rrc_description::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_large_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_small_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClip_versions_inner_rrc_description::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_large_isValid && m_small_isValid && true;
}

} // namespace OpenAPI
