/**
 * BBC iPlayer Business Layer
 * The definitive iPlayer API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: ibl-team@lists.forge.bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIWatching.h
 *
 * 
 */

#ifndef OAIWatching_H
#define OAIWatching_H

#include <QJsonObject>

#include "OAIEpisode.h"
#include "OAIProgramme.h"
#include "OAIVersion.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIEpisode;
class OAIProgramme;
class OAIVersion;

class OAIWatching : public OAIObject {
public:
    OAIWatching();
    OAIWatching(QString json);
    ~OAIWatching() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIEpisode getEpisode() const;
    void setEpisode(const OAIEpisode &episode);
    bool is_episode_Set() const;
    bool is_episode_Valid() const;

    bool isHasNext() const;
    void setHasNext(const bool &has_next);
    bool is_has_next_Set() const;
    bool is_has_next_Valid() const;

    double getOffset() const;
    void setOffset(const double &offset);
    bool is_offset_Set() const;
    bool is_offset_Valid() const;

    OAIProgramme getProgramme() const;
    void setProgramme(const OAIProgramme &programme);
    bool is_programme_Set() const;
    bool is_programme_Valid() const;

    double getProgress() const;
    void setProgress(const double &progress);
    bool is_progress_Set() const;
    bool is_progress_Valid() const;

    double getRemaining() const;
    void setRemaining(const double &remaining);
    bool is_remaining_Set() const;
    bool is_remaining_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getUrn() const;
    void setUrn(const QString &urn);
    bool is_urn_Set() const;
    bool is_urn_Valid() const;

    OAIVersion getVersion() const;
    void setVersion(const OAIVersion &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIEpisode m_episode;
    bool m_episode_isSet;
    bool m_episode_isValid;

    bool m_has_next;
    bool m_has_next_isSet;
    bool m_has_next_isValid;

    double m_offset;
    bool m_offset_isSet;
    bool m_offset_isValid;

    OAIProgramme m_programme;
    bool m_programme_isSet;
    bool m_programme_isValid;

    double m_progress;
    bool m_progress_isSet;
    bool m_progress_isValid;

    double m_remaining;
    bool m_remaining_isSet;
    bool m_remaining_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_urn;
    bool m_urn_isSet;
    bool m_urn_isValid;

    OAIVersion m_version;
    bool m_version_isSet;
    bool m_version_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIWatching)

#endif // OAIWatching_H
