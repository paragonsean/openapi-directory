/**
 * BBC iPlayer Business Layer
 * The definitive iPlayer API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: ibl-team@lists.forge.bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStore_version.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStore_version::OAIStore_version(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStore_version::OAIStore_version() {
    this->initializeModel();
}

OAIStore_version::~OAIStore_version() {}

void OAIStore_version::initializeModel() {

    m_download_isSet = false;
    m_download_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_guidance_isSet = false;
    m_guidance_isValid = false;

    m_hd_isSet = false;
    m_hd_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_store_id_isSet = false;
    m_store_id_isValid = false;

    m_store_profile_isSet = false;
    m_store_profile_isValid = false;

    m_store_session_isSet = false;
    m_store_session_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIStore_version::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStore_version::fromJsonObject(QJsonObject json) {

    m_download_isValid = ::OpenAPI::fromJsonValue(m_download, json[QString("download")]);
    m_download_isSet = !json[QString("download")].isNull() && m_download_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_guidance_isValid = ::OpenAPI::fromJsonValue(m_guidance, json[QString("guidance")]);
    m_guidance_isSet = !json[QString("guidance")].isNull() && m_guidance_isValid;

    m_hd_isValid = ::OpenAPI::fromJsonValue(m_hd, json[QString("hd")]);
    m_hd_isSet = !json[QString("hd")].isNull() && m_hd_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_store_id_isValid = ::OpenAPI::fromJsonValue(m_store_id, json[QString("store_id")]);
    m_store_id_isSet = !json[QString("store_id")].isNull() && m_store_id_isValid;

    m_store_profile_isValid = ::OpenAPI::fromJsonValue(m_store_profile, json[QString("store_profile")]);
    m_store_profile_isSet = !json[QString("store_profile")].isNull() && m_store_profile_isValid;

    m_store_session_isValid = ::OpenAPI::fromJsonValue(m_store_session, json[QString("store_session")]);
    m_store_session_isSet = !json[QString("store_session")].isNull() && m_store_session_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIStore_version::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStore_version::asJsonObject() const {
    QJsonObject obj;
    if (m_download_isSet) {
        obj.insert(QString("download"), ::OpenAPI::toJsonValue(m_download));
    }
    if (m_duration.isSet()) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_guidance.isSet()) {
        obj.insert(QString("guidance"), ::OpenAPI::toJsonValue(m_guidance));
    }
    if (m_hd_isSet) {
        obj.insert(QString("hd"), ::OpenAPI::toJsonValue(m_hd));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_store_id_isSet) {
        obj.insert(QString("store_id"), ::OpenAPI::toJsonValue(m_store_id));
    }
    if (m_store_profile_isSet) {
        obj.insert(QString("store_profile"), ::OpenAPI::toJsonValue(m_store_profile));
    }
    if (m_store_session.isSet()) {
        obj.insert(QString("store_session"), ::OpenAPI::toJsonValue(m_store_session));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

bool OAIStore_version::isDownload() const {
    return m_download;
}
void OAIStore_version::setDownload(const bool &download) {
    m_download = download;
    m_download_isSet = true;
}

bool OAIStore_version::is_download_Set() const{
    return m_download_isSet;
}

bool OAIStore_version::is_download_Valid() const{
    return m_download_isValid;
}

OAIBroadcast_duration OAIStore_version::getDuration() const {
    return m_duration;
}
void OAIStore_version::setDuration(const OAIBroadcast_duration &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIStore_version::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIStore_version::is_duration_Valid() const{
    return m_duration_isValid;
}

OAIClip_versions_inner_guidance OAIStore_version::getGuidance() const {
    return m_guidance;
}
void OAIStore_version::setGuidance(const OAIClip_versions_inner_guidance &guidance) {
    m_guidance = guidance;
    m_guidance_isSet = true;
}

bool OAIStore_version::is_guidance_Set() const{
    return m_guidance_isSet;
}

bool OAIStore_version::is_guidance_Valid() const{
    return m_guidance_isValid;
}

bool OAIStore_version::isHd() const {
    return m_hd;
}
void OAIStore_version::setHd(const bool &hd) {
    m_hd = hd;
    m_hd_isSet = true;
}

bool OAIStore_version::is_hd_Set() const{
    return m_hd_isSet;
}

bool OAIStore_version::is_hd_Valid() const{
    return m_hd_isValid;
}

QString OAIStore_version::getId() const {
    return m_id;
}
void OAIStore_version::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIStore_version::is_id_Set() const{
    return m_id_isSet;
}

bool OAIStore_version::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIStore_version::getKind() const {
    return m_kind;
}
void OAIStore_version::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIStore_version::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIStore_version::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIStore_version::getStoreId() const {
    return m_store_id;
}
void OAIStore_version::setStoreId(const QString &store_id) {
    m_store_id = store_id;
    m_store_id_isSet = true;
}

bool OAIStore_version::is_store_id_Set() const{
    return m_store_id_isSet;
}

bool OAIStore_version::is_store_id_Valid() const{
    return m_store_id_isValid;
}

QString OAIStore_version::getStoreProfile() const {
    return m_store_profile;
}
void OAIStore_version::setStoreProfile(const QString &store_profile) {
    m_store_profile = store_profile;
    m_store_profile_isSet = true;
}

bool OAIStore_version::is_store_profile_Set() const{
    return m_store_profile_isSet;
}

bool OAIStore_version::is_store_profile_Valid() const{
    return m_store_profile_isValid;
}

OAIEpisode_versions_inner_anyOf_store_session OAIStore_version::getStoreSession() const {
    return m_store_session;
}
void OAIStore_version::setStoreSession(const OAIEpisode_versions_inner_anyOf_store_session &store_session) {
    m_store_session = store_session;
    m_store_session_isSet = true;
}

bool OAIStore_version::is_store_session_Set() const{
    return m_store_session_isSet;
}

bool OAIStore_version::is_store_session_Valid() const{
    return m_store_session_isValid;
}

QString OAIStore_version::getType() const {
    return m_type;
}
void OAIStore_version::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIStore_version::is_type_Set() const{
    return m_type_isSet;
}

bool OAIStore_version::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIStore_version::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_download_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_guidance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hd_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_profile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_session.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStore_version::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_download_isValid && m_duration_isValid && m_hd_isValid && m_id_isValid && m_kind_isValid && m_store_id_isValid && m_store_profile_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
