/**
 * BBC iPlayer Business Layer
 * The definitive iPlayer API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: ibl-team@lists.forge.bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInteraction_interaction_points.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInteraction_interaction_points::OAIInteraction_interaction_points(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInteraction_interaction_points::OAIInteraction_interaction_points() {
    this->initializeModel();
}

OAIInteraction_interaction_points::~OAIInteraction_interaction_points() {}

void OAIInteraction_interaction_points::initializeModel() {

    m_show_from_isSet = false;
    m_show_from_isValid = false;

    m_skip_to_isSet = false;
    m_skip_to_isValid = false;
}

void OAIInteraction_interaction_points::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInteraction_interaction_points::fromJsonObject(QJsonObject json) {

    m_show_from_isValid = ::OpenAPI::fromJsonValue(m_show_from, json[QString("show_from")]);
    m_show_from_isSet = !json[QString("show_from")].isNull() && m_show_from_isValid;

    m_skip_to_isValid = ::OpenAPI::fromJsonValue(m_skip_to, json[QString("skip_to")]);
    m_skip_to_isSet = !json[QString("skip_to")].isNull() && m_skip_to_isValid;
}

QString OAIInteraction_interaction_points::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInteraction_interaction_points::asJsonObject() const {
    QJsonObject obj;
    if (m_show_from_isSet) {
        obj.insert(QString("show_from"), ::OpenAPI::toJsonValue(m_show_from));
    }
    if (m_skip_to_isSet) {
        obj.insert(QString("skip_to"), ::OpenAPI::toJsonValue(m_skip_to));
    }
    return obj;
}

double OAIInteraction_interaction_points::getShowFrom() const {
    return m_show_from;
}
void OAIInteraction_interaction_points::setShowFrom(const double &show_from) {
    m_show_from = show_from;
    m_show_from_isSet = true;
}

bool OAIInteraction_interaction_points::is_show_from_Set() const{
    return m_show_from_isSet;
}

bool OAIInteraction_interaction_points::is_show_from_Valid() const{
    return m_show_from_isValid;
}

double OAIInteraction_interaction_points::getSkipTo() const {
    return m_skip_to;
}
void OAIInteraction_interaction_points::setSkipTo(const double &skip_to) {
    m_skip_to = skip_to;
    m_skip_to_isSet = true;
}

bool OAIInteraction_interaction_points::is_skip_to_Set() const{
    return m_skip_to_isSet;
}

bool OAIInteraction_interaction_points::is_skip_to_Valid() const{
    return m_skip_to_isValid;
}

bool OAIInteraction_interaction_points::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_show_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_to_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInteraction_interaction_points::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_show_from_isValid && m_skip_to_isValid && true;
}

} // namespace OpenAPI
