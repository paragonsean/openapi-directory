/**
 * BBC iPlayer Business Layer
 * The definitive iPlayer API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: ibl-team@lists.forge.bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGroup_initial_children_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGroup_initial_children_inner::OAIGroup_initial_children_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGroup_initial_children_inner::OAIGroup_initial_children_inner() {
    this->initializeModel();
}

OAIGroup_initial_children_inner::~OAIGroup_initial_children_inner() {}

void OAIGroup_initial_children_inner::initializeModel() {

    m_audio_described_isSet = false;
    m_audio_described_isValid = false;

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_childrens_isSet = false;
    m_childrens_isValid = false;

    m_editorial_subtitle_isSet = false;
    m_editorial_subtitle_isValid = false;

    m_editorial_title_isSet = false;
    m_editorial_title_isValid = false;

    m_event_group_id_isSet = false;
    m_event_group_id_isValid = false;

    m_guidance_isSet = false;
    m_guidance_isValid = false;

    m_has_credits_isSet = false;
    m_has_credits_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_images_isSet = false;
    m_images_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_lexical_sort_letter_isSet = false;
    m_lexical_sort_letter_isValid = false;

    m_live_isSet = false;
    m_live_isValid = false;

    m_live_subtitle_isSet = false;
    m_live_subtitle_isValid = false;

    m_live_title_isSet = false;
    m_live_title_isValid = false;

    m_master_brand_isSet = false;
    m_master_brand_isValid = false;

    m_next_broadcast_isSet = false;
    m_next_broadcast_isValid = false;

    m_numeric_tleo_position_isSet = false;
    m_numeric_tleo_position_isValid = false;

    m_original_title_isSet = false;
    m_original_title_isValid = false;

    m_parent_id_isSet = false;
    m_parent_id_isValid = false;

    m_parent_position_isSet = false;
    m_parent_position_isValid = false;

    m_preview_id_isSet = false;
    m_preview_id_isValid = false;

    m_programme_type_isSet = false;
    m_programme_type_isValid = false;

    m_promoted_isSet = false;
    m_promoted_isValid = false;

    m_related_links_isSet = false;
    m_related_links_isValid = false;

    m_release_date_isSet = false;
    m_release_date_isValid = false;

    m_release_date_time_isSet = false;
    m_release_date_time_isValid = false;

    m_requires_ab_isSet = false;
    m_requires_ab_isValid = false;

    m_requires_sign_in_isSet = false;
    m_requires_sign_in_isValid = false;

    m_requires_tv_licence_isSet = false;
    m_requires_tv_licence_isValid = false;

    m_r_signed_isSet = false;
    m_r_signed_isValid = false;

    m_slice_id_isSet = false;
    m_slice_id_isValid = false;

    m_slice_subtitle_isSet = false;
    m_slice_subtitle_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_subtitle_isSet = false;
    m_subtitle_isValid = false;

    m_synopses_isSet = false;
    m_synopses_isValid = false;

    m_tests_isSet = false;
    m_tests_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_tleo_id_isSet = false;
    m_tleo_id_isValid = false;

    m_tleo_type_isSet = false;
    m_tleo_type_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_versions_isSet = false;
    m_versions_isValid = false;

    m_available_on_hd_service_isSet = false;
    m_available_on_hd_service_isValid = false;

    m_blanked_isSet = false;
    m_blanked_isValid = false;

    m_channel_title_isSet = false;
    m_channel_title_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_episode_isSet = false;
    m_episode_isValid = false;

    m_episode_id_isSet = false;
    m_episode_id_isValid = false;

    m_events_isSet = false;
    m_events_isValid = false;

    m_repeat_isSet = false;
    m_repeat_isValid = false;

    m_scheduled_end_isSet = false;
    m_scheduled_end_isValid = false;

    m_scheduled_start_isSet = false;
    m_scheduled_start_isValid = false;

    m_service_id_isSet = false;
    m_service_id_isValid = false;

    m_transmission_end_isSet = false;
    m_transmission_end_isValid = false;

    m_transmission_start_isSet = false;
    m_transmission_start_isValid = false;

    m_version_id_isSet = false;
    m_version_id_isValid = false;
}

void OAIGroup_initial_children_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGroup_initial_children_inner::fromJsonObject(QJsonObject json) {

    m_audio_described_isValid = ::OpenAPI::fromJsonValue(m_audio_described, json[QString("audio_described")]);
    m_audio_described_isSet = !json[QString("audio_described")].isNull() && m_audio_described_isValid;

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("categories")]);
    m_categories_isSet = !json[QString("categories")].isNull() && m_categories_isValid;

    m_childrens_isValid = ::OpenAPI::fromJsonValue(m_childrens, json[QString("childrens")]);
    m_childrens_isSet = !json[QString("childrens")].isNull() && m_childrens_isValid;

    m_editorial_subtitle_isValid = ::OpenAPI::fromJsonValue(m_editorial_subtitle, json[QString("editorial_subtitle")]);
    m_editorial_subtitle_isSet = !json[QString("editorial_subtitle")].isNull() && m_editorial_subtitle_isValid;

    m_editorial_title_isValid = ::OpenAPI::fromJsonValue(m_editorial_title, json[QString("editorial_title")]);
    m_editorial_title_isSet = !json[QString("editorial_title")].isNull() && m_editorial_title_isValid;

    m_event_group_id_isValid = ::OpenAPI::fromJsonValue(m_event_group_id, json[QString("event_group_id")]);
    m_event_group_id_isSet = !json[QString("event_group_id")].isNull() && m_event_group_id_isValid;

    m_guidance_isValid = ::OpenAPI::fromJsonValue(m_guidance, json[QString("guidance")]);
    m_guidance_isSet = !json[QString("guidance")].isNull() && m_guidance_isValid;

    m_has_credits_isValid = ::OpenAPI::fromJsonValue(m_has_credits, json[QString("has_credits")]);
    m_has_credits_isSet = !json[QString("has_credits")].isNull() && m_has_credits_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("images")]);
    m_images_isSet = !json[QString("images")].isNull() && m_images_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_lexical_sort_letter_isValid = ::OpenAPI::fromJsonValue(m_lexical_sort_letter, json[QString("lexical_sort_letter")]);
    m_lexical_sort_letter_isSet = !json[QString("lexical_sort_letter")].isNull() && m_lexical_sort_letter_isValid;

    m_live_isValid = ::OpenAPI::fromJsonValue(m_live, json[QString("live")]);
    m_live_isSet = !json[QString("live")].isNull() && m_live_isValid;

    m_live_subtitle_isValid = ::OpenAPI::fromJsonValue(m_live_subtitle, json[QString("live_subtitle")]);
    m_live_subtitle_isSet = !json[QString("live_subtitle")].isNull() && m_live_subtitle_isValid;

    m_live_title_isValid = ::OpenAPI::fromJsonValue(m_live_title, json[QString("live_title")]);
    m_live_title_isSet = !json[QString("live_title")].isNull() && m_live_title_isValid;

    m_master_brand_isValid = ::OpenAPI::fromJsonValue(m_master_brand, json[QString("master_brand")]);
    m_master_brand_isSet = !json[QString("master_brand")].isNull() && m_master_brand_isValid;

    m_next_broadcast_isValid = ::OpenAPI::fromJsonValue(m_next_broadcast, json[QString("next_broadcast")]);
    m_next_broadcast_isSet = !json[QString("next_broadcast")].isNull() && m_next_broadcast_isValid;

    m_numeric_tleo_position_isValid = ::OpenAPI::fromJsonValue(m_numeric_tleo_position, json[QString("numeric_tleo_position")]);
    m_numeric_tleo_position_isSet = !json[QString("numeric_tleo_position")].isNull() && m_numeric_tleo_position_isValid;

    m_original_title_isValid = ::OpenAPI::fromJsonValue(m_original_title, json[QString("original_title")]);
    m_original_title_isSet = !json[QString("original_title")].isNull() && m_original_title_isValid;

    m_parent_id_isValid = ::OpenAPI::fromJsonValue(m_parent_id, json[QString("parent_id")]);
    m_parent_id_isSet = !json[QString("parent_id")].isNull() && m_parent_id_isValid;

    m_parent_position_isValid = ::OpenAPI::fromJsonValue(m_parent_position, json[QString("parent_position")]);
    m_parent_position_isSet = !json[QString("parent_position")].isNull() && m_parent_position_isValid;

    m_preview_id_isValid = ::OpenAPI::fromJsonValue(m_preview_id, json[QString("preview_id")]);
    m_preview_id_isSet = !json[QString("preview_id")].isNull() && m_preview_id_isValid;

    m_programme_type_isValid = ::OpenAPI::fromJsonValue(m_programme_type, json[QString("programme_type")]);
    m_programme_type_isSet = !json[QString("programme_type")].isNull() && m_programme_type_isValid;

    m_promoted_isValid = ::OpenAPI::fromJsonValue(m_promoted, json[QString("promoted")]);
    m_promoted_isSet = !json[QString("promoted")].isNull() && m_promoted_isValid;

    m_related_links_isValid = ::OpenAPI::fromJsonValue(m_related_links, json[QString("related_links")]);
    m_related_links_isSet = !json[QString("related_links")].isNull() && m_related_links_isValid;

    m_release_date_isValid = ::OpenAPI::fromJsonValue(m_release_date, json[QString("release_date")]);
    m_release_date_isSet = !json[QString("release_date")].isNull() && m_release_date_isValid;

    m_release_date_time_isValid = ::OpenAPI::fromJsonValue(m_release_date_time, json[QString("release_date_time")]);
    m_release_date_time_isSet = !json[QString("release_date_time")].isNull() && m_release_date_time_isValid;

    m_requires_ab_isValid = ::OpenAPI::fromJsonValue(m_requires_ab, json[QString("requires_ab")]);
    m_requires_ab_isSet = !json[QString("requires_ab")].isNull() && m_requires_ab_isValid;

    m_requires_sign_in_isValid = ::OpenAPI::fromJsonValue(m_requires_sign_in, json[QString("requires_sign_in")]);
    m_requires_sign_in_isSet = !json[QString("requires_sign_in")].isNull() && m_requires_sign_in_isValid;

    m_requires_tv_licence_isValid = ::OpenAPI::fromJsonValue(m_requires_tv_licence, json[QString("requires_tv_licence")]);
    m_requires_tv_licence_isSet = !json[QString("requires_tv_licence")].isNull() && m_requires_tv_licence_isValid;

    m_r_signed_isValid = ::OpenAPI::fromJsonValue(m_r_signed, json[QString("signed")]);
    m_r_signed_isSet = !json[QString("signed")].isNull() && m_r_signed_isValid;

    m_slice_id_isValid = ::OpenAPI::fromJsonValue(m_slice_id, json[QString("slice_id")]);
    m_slice_id_isSet = !json[QString("slice_id")].isNull() && m_slice_id_isValid;

    m_slice_subtitle_isValid = ::OpenAPI::fromJsonValue(m_slice_subtitle, json[QString("slice_subtitle")]);
    m_slice_subtitle_isSet = !json[QString("slice_subtitle")].isNull() && m_slice_subtitle_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_subtitle_isValid = ::OpenAPI::fromJsonValue(m_subtitle, json[QString("subtitle")]);
    m_subtitle_isSet = !json[QString("subtitle")].isNull() && m_subtitle_isValid;

    m_synopses_isValid = ::OpenAPI::fromJsonValue(m_synopses, json[QString("synopses")]);
    m_synopses_isSet = !json[QString("synopses")].isNull() && m_synopses_isValid;

    m_tests_isValid = ::OpenAPI::fromJsonValue(m_tests, json[QString("tests")]);
    m_tests_isSet = !json[QString("tests")].isNull() && m_tests_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_tleo_id_isValid = ::OpenAPI::fromJsonValue(m_tleo_id, json[QString("tleo_id")]);
    m_tleo_id_isSet = !json[QString("tleo_id")].isNull() && m_tleo_id_isValid;

    m_tleo_type_isValid = ::OpenAPI::fromJsonValue(m_tleo_type, json[QString("tleo_type")]);
    m_tleo_type_isSet = !json[QString("tleo_type")].isNull() && m_tleo_type_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_versions_isValid = ::OpenAPI::fromJsonValue(m_versions, json[QString("versions")]);
    m_versions_isSet = !json[QString("versions")].isNull() && m_versions_isValid;

    m_available_on_hd_service_isValid = ::OpenAPI::fromJsonValue(m_available_on_hd_service, json[QString("available_on_hd_service")]);
    m_available_on_hd_service_isSet = !json[QString("available_on_hd_service")].isNull() && m_available_on_hd_service_isValid;

    m_blanked_isValid = ::OpenAPI::fromJsonValue(m_blanked, json[QString("blanked")]);
    m_blanked_isSet = !json[QString("blanked")].isNull() && m_blanked_isValid;

    m_channel_title_isValid = ::OpenAPI::fromJsonValue(m_channel_title, json[QString("channel_title")]);
    m_channel_title_isSet = !json[QString("channel_title")].isNull() && m_channel_title_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_episode_isValid = ::OpenAPI::fromJsonValue(m_episode, json[QString("episode")]);
    m_episode_isSet = !json[QString("episode")].isNull() && m_episode_isValid;

    m_episode_id_isValid = ::OpenAPI::fromJsonValue(m_episode_id, json[QString("episode_id")]);
    m_episode_id_isSet = !json[QString("episode_id")].isNull() && m_episode_id_isValid;

    m_events_isValid = ::OpenAPI::fromJsonValue(m_events, json[QString("events")]);
    m_events_isSet = !json[QString("events")].isNull() && m_events_isValid;

    m_repeat_isValid = ::OpenAPI::fromJsonValue(m_repeat, json[QString("repeat")]);
    m_repeat_isSet = !json[QString("repeat")].isNull() && m_repeat_isValid;

    m_scheduled_end_isValid = ::OpenAPI::fromJsonValue(m_scheduled_end, json[QString("scheduled_end")]);
    m_scheduled_end_isSet = !json[QString("scheduled_end")].isNull() && m_scheduled_end_isValid;

    m_scheduled_start_isValid = ::OpenAPI::fromJsonValue(m_scheduled_start, json[QString("scheduled_start")]);
    m_scheduled_start_isSet = !json[QString("scheduled_start")].isNull() && m_scheduled_start_isValid;

    m_service_id_isValid = ::OpenAPI::fromJsonValue(m_service_id, json[QString("service_id")]);
    m_service_id_isSet = !json[QString("service_id")].isNull() && m_service_id_isValid;

    m_transmission_end_isValid = ::OpenAPI::fromJsonValue(m_transmission_end, json[QString("transmission_end")]);
    m_transmission_end_isSet = !json[QString("transmission_end")].isNull() && m_transmission_end_isValid;

    m_transmission_start_isValid = ::OpenAPI::fromJsonValue(m_transmission_start, json[QString("transmission_start")]);
    m_transmission_start_isSet = !json[QString("transmission_start")].isNull() && m_transmission_start_isValid;

    m_version_id_isValid = ::OpenAPI::fromJsonValue(m_version_id, json[QString("version_id")]);
    m_version_id_isSet = !json[QString("version_id")].isNull() && m_version_id_isValid;
}

QString OAIGroup_initial_children_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGroup_initial_children_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_audio_described_isSet) {
        obj.insert(QString("audio_described"), ::OpenAPI::toJsonValue(m_audio_described));
    }
    if (m_categories.size() > 0) {
        obj.insert(QString("categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_childrens_isSet) {
        obj.insert(QString("childrens"), ::OpenAPI::toJsonValue(m_childrens));
    }
    if (m_editorial_subtitle_isSet) {
        obj.insert(QString("editorial_subtitle"), ::OpenAPI::toJsonValue(m_editorial_subtitle));
    }
    if (m_editorial_title_isSet) {
        obj.insert(QString("editorial_title"), ::OpenAPI::toJsonValue(m_editorial_title));
    }
    if (m_event_group_id_isSet) {
        obj.insert(QString("event_group_id"), ::OpenAPI::toJsonValue(m_event_group_id));
    }
    if (m_guidance_isSet) {
        obj.insert(QString("guidance"), ::OpenAPI::toJsonValue(m_guidance));
    }
    if (m_has_credits_isSet) {
        obj.insert(QString("has_credits"), ::OpenAPI::toJsonValue(m_has_credits));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_images.isSet()) {
        obj.insert(QString("images"), ::OpenAPI::toJsonValue(m_images));
    }
    if (m_labels.isSet()) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_lexical_sort_letter_isSet) {
        obj.insert(QString("lexical_sort_letter"), ::OpenAPI::toJsonValue(m_lexical_sort_letter));
    }
    if (m_live_isSet) {
        obj.insert(QString("live"), ::OpenAPI::toJsonValue(m_live));
    }
    if (m_live_subtitle_isSet) {
        obj.insert(QString("live_subtitle"), ::OpenAPI::toJsonValue(m_live_subtitle));
    }
    if (m_live_title_isSet) {
        obj.insert(QString("live_title"), ::OpenAPI::toJsonValue(m_live_title));
    }
    if (m_master_brand.isSet()) {
        obj.insert(QString("master_brand"), ::OpenAPI::toJsonValue(m_master_brand));
    }
    if (m_next_broadcast.isSet()) {
        obj.insert(QString("next_broadcast"), ::OpenAPI::toJsonValue(m_next_broadcast));
    }
    if (m_numeric_tleo_position_isSet) {
        obj.insert(QString("numeric_tleo_position"), ::OpenAPI::toJsonValue(m_numeric_tleo_position));
    }
    if (m_original_title_isSet) {
        obj.insert(QString("original_title"), ::OpenAPI::toJsonValue(m_original_title));
    }
    if (m_parent_id_isSet) {
        obj.insert(QString("parent_id"), ::OpenAPI::toJsonValue(m_parent_id));
    }
    if (m_parent_position_isSet) {
        obj.insert(QString("parent_position"), ::OpenAPI::toJsonValue(m_parent_position));
    }
    if (m_preview_id_isSet) {
        obj.insert(QString("preview_id"), ::OpenAPI::toJsonValue(m_preview_id));
    }
    if (m_programme_type_isSet) {
        obj.insert(QString("programme_type"), ::OpenAPI::toJsonValue(m_programme_type));
    }
    if (m_promoted_isSet) {
        obj.insert(QString("promoted"), ::OpenAPI::toJsonValue(m_promoted));
    }
    if (m_related_links.size() > 0) {
        obj.insert(QString("related_links"), ::OpenAPI::toJsonValue(m_related_links));
    }
    if (m_release_date_isSet) {
        obj.insert(QString("release_date"), ::OpenAPI::toJsonValue(m_release_date));
    }
    if (m_release_date_time_isSet) {
        obj.insert(QString("release_date_time"), ::OpenAPI::toJsonValue(m_release_date_time));
    }
    if (m_requires_ab.size() > 0) {
        obj.insert(QString("requires_ab"), ::OpenAPI::toJsonValue(m_requires_ab));
    }
    if (m_requires_sign_in_isSet) {
        obj.insert(QString("requires_sign_in"), ::OpenAPI::toJsonValue(m_requires_sign_in));
    }
    if (m_requires_tv_licence_isSet) {
        obj.insert(QString("requires_tv_licence"), ::OpenAPI::toJsonValue(m_requires_tv_licence));
    }
    if (m_r_signed_isSet) {
        obj.insert(QString("signed"), ::OpenAPI::toJsonValue(m_r_signed));
    }
    if (m_slice_id_isSet) {
        obj.insert(QString("slice_id"), ::OpenAPI::toJsonValue(m_slice_id));
    }
    if (m_slice_subtitle_isSet) {
        obj.insert(QString("slice_subtitle"), ::OpenAPI::toJsonValue(m_slice_subtitle));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_subtitle_isSet) {
        obj.insert(QString("subtitle"), ::OpenAPI::toJsonValue(m_subtitle));
    }
    if (m_synopses.isSet()) {
        obj.insert(QString("synopses"), ::OpenAPI::toJsonValue(m_synopses));
    }
    if (m_tests.size() > 0) {
        obj.insert(QString("tests"), ::OpenAPI::toJsonValue(m_tests));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_tleo_id_isSet) {
        obj.insert(QString("tleo_id"), ::OpenAPI::toJsonValue(m_tleo_id));
    }
    if (m_tleo_type_isSet) {
        obj.insert(QString("tleo_type"), ::OpenAPI::toJsonValue(m_tleo_type));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_versions.size() > 0) {
        obj.insert(QString("versions"), ::OpenAPI::toJsonValue(m_versions));
    }
    if (m_available_on_hd_service_isSet) {
        obj.insert(QString("available_on_hd_service"), ::OpenAPI::toJsonValue(m_available_on_hd_service));
    }
    if (m_blanked_isSet) {
        obj.insert(QString("blanked"), ::OpenAPI::toJsonValue(m_blanked));
    }
    if (m_channel_title_isSet) {
        obj.insert(QString("channel_title"), ::OpenAPI::toJsonValue(m_channel_title));
    }
    if (m_duration.isSet()) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_episode.isSet()) {
        obj.insert(QString("episode"), ::OpenAPI::toJsonValue(m_episode));
    }
    if (m_episode_id_isSet) {
        obj.insert(QString("episode_id"), ::OpenAPI::toJsonValue(m_episode_id));
    }
    if (m_events.size() > 0) {
        obj.insert(QString("events"), ::OpenAPI::toJsonValue(m_events));
    }
    if (m_repeat_isSet) {
        obj.insert(QString("repeat"), ::OpenAPI::toJsonValue(m_repeat));
    }
    if (m_scheduled_end_isSet) {
        obj.insert(QString("scheduled_end"), ::OpenAPI::toJsonValue(m_scheduled_end));
    }
    if (m_scheduled_start_isSet) {
        obj.insert(QString("scheduled_start"), ::OpenAPI::toJsonValue(m_scheduled_start));
    }
    if (m_service_id_isSet) {
        obj.insert(QString("service_id"), ::OpenAPI::toJsonValue(m_service_id));
    }
    if (m_transmission_end_isSet) {
        obj.insert(QString("transmission_end"), ::OpenAPI::toJsonValue(m_transmission_end));
    }
    if (m_transmission_start_isSet) {
        obj.insert(QString("transmission_start"), ::OpenAPI::toJsonValue(m_transmission_start));
    }
    if (m_version_id_isSet) {
        obj.insert(QString("version_id"), ::OpenAPI::toJsonValue(m_version_id));
    }
    return obj;
}

bool OAIGroup_initial_children_inner::isAudioDescribed() const {
    return m_audio_described;
}
void OAIGroup_initial_children_inner::setAudioDescribed(const bool &audio_described) {
    m_audio_described = audio_described;
    m_audio_described_isSet = true;
}

bool OAIGroup_initial_children_inner::is_audio_described_Set() const{
    return m_audio_described_isSet;
}

bool OAIGroup_initial_children_inner::is_audio_described_Valid() const{
    return m_audio_described_isValid;
}

QList<QString> OAIGroup_initial_children_inner::getCategories() const {
    return m_categories;
}
void OAIGroup_initial_children_inner::setCategories(const QList<QString> &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAIGroup_initial_children_inner::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAIGroup_initial_children_inner::is_categories_Valid() const{
    return m_categories_isValid;
}

bool OAIGroup_initial_children_inner::isChildrens() const {
    return m_childrens;
}
void OAIGroup_initial_children_inner::setChildrens(const bool &childrens) {
    m_childrens = childrens;
    m_childrens_isSet = true;
}

bool OAIGroup_initial_children_inner::is_childrens_Set() const{
    return m_childrens_isSet;
}

bool OAIGroup_initial_children_inner::is_childrens_Valid() const{
    return m_childrens_isValid;
}

QString OAIGroup_initial_children_inner::getEditorialSubtitle() const {
    return m_editorial_subtitle;
}
void OAIGroup_initial_children_inner::setEditorialSubtitle(const QString &editorial_subtitle) {
    m_editorial_subtitle = editorial_subtitle;
    m_editorial_subtitle_isSet = true;
}

bool OAIGroup_initial_children_inner::is_editorial_subtitle_Set() const{
    return m_editorial_subtitle_isSet;
}

bool OAIGroup_initial_children_inner::is_editorial_subtitle_Valid() const{
    return m_editorial_subtitle_isValid;
}

QString OAIGroup_initial_children_inner::getEditorialTitle() const {
    return m_editorial_title;
}
void OAIGroup_initial_children_inner::setEditorialTitle(const QString &editorial_title) {
    m_editorial_title = editorial_title;
    m_editorial_title_isSet = true;
}

bool OAIGroup_initial_children_inner::is_editorial_title_Set() const{
    return m_editorial_title_isSet;
}

bool OAIGroup_initial_children_inner::is_editorial_title_Valid() const{
    return m_editorial_title_isValid;
}

QString OAIGroup_initial_children_inner::getEventGroupId() const {
    return m_event_group_id;
}
void OAIGroup_initial_children_inner::setEventGroupId(const QString &event_group_id) {
    m_event_group_id = event_group_id;
    m_event_group_id_isSet = true;
}

bool OAIGroup_initial_children_inner::is_event_group_id_Set() const{
    return m_event_group_id_isSet;
}

bool OAIGroup_initial_children_inner::is_event_group_id_Valid() const{
    return m_event_group_id_isValid;
}

bool OAIGroup_initial_children_inner::isGuidance() const {
    return m_guidance;
}
void OAIGroup_initial_children_inner::setGuidance(const bool &guidance) {
    m_guidance = guidance;
    m_guidance_isSet = true;
}

bool OAIGroup_initial_children_inner::is_guidance_Set() const{
    return m_guidance_isSet;
}

bool OAIGroup_initial_children_inner::is_guidance_Valid() const{
    return m_guidance_isValid;
}

bool OAIGroup_initial_children_inner::isHasCredits() const {
    return m_has_credits;
}
void OAIGroup_initial_children_inner::setHasCredits(const bool &has_credits) {
    m_has_credits = has_credits;
    m_has_credits_isSet = true;
}

bool OAIGroup_initial_children_inner::is_has_credits_Set() const{
    return m_has_credits_isSet;
}

bool OAIGroup_initial_children_inner::is_has_credits_Valid() const{
    return m_has_credits_isValid;
}

QString OAIGroup_initial_children_inner::getId() const {
    return m_id;
}
void OAIGroup_initial_children_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGroup_initial_children_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGroup_initial_children_inner::is_id_Valid() const{
    return m_id_isValid;
}

OAIEpisode_images OAIGroup_initial_children_inner::getImages() const {
    return m_images;
}
void OAIGroup_initial_children_inner::setImages(const OAIEpisode_images &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAIGroup_initial_children_inner::is_images_Set() const{
    return m_images_isSet;
}

bool OAIGroup_initial_children_inner::is_images_Valid() const{
    return m_images_isValid;
}

OAIEpisode_labels OAIGroup_initial_children_inner::getLabels() const {
    return m_labels;
}
void OAIGroup_initial_children_inner::setLabels(const OAIEpisode_labels &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIGroup_initial_children_inner::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIGroup_initial_children_inner::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIGroup_initial_children_inner::getLexicalSortLetter() const {
    return m_lexical_sort_letter;
}
void OAIGroup_initial_children_inner::setLexicalSortLetter(const QString &lexical_sort_letter) {
    m_lexical_sort_letter = lexical_sort_letter;
    m_lexical_sort_letter_isSet = true;
}

bool OAIGroup_initial_children_inner::is_lexical_sort_letter_Set() const{
    return m_lexical_sort_letter_isSet;
}

bool OAIGroup_initial_children_inner::is_lexical_sort_letter_Valid() const{
    return m_lexical_sort_letter_isValid;
}

bool OAIGroup_initial_children_inner::isLive() const {
    return m_live;
}
void OAIGroup_initial_children_inner::setLive(const bool &live) {
    m_live = live;
    m_live_isSet = true;
}

bool OAIGroup_initial_children_inner::is_live_Set() const{
    return m_live_isSet;
}

bool OAIGroup_initial_children_inner::is_live_Valid() const{
    return m_live_isValid;
}

QString OAIGroup_initial_children_inner::getLiveSubtitle() const {
    return m_live_subtitle;
}
void OAIGroup_initial_children_inner::setLiveSubtitle(const QString &live_subtitle) {
    m_live_subtitle = live_subtitle;
    m_live_subtitle_isSet = true;
}

bool OAIGroup_initial_children_inner::is_live_subtitle_Set() const{
    return m_live_subtitle_isSet;
}

bool OAIGroup_initial_children_inner::is_live_subtitle_Valid() const{
    return m_live_subtitle_isValid;
}

QString OAIGroup_initial_children_inner::getLiveTitle() const {
    return m_live_title;
}
void OAIGroup_initial_children_inner::setLiveTitle(const QString &live_title) {
    m_live_title = live_title;
    m_live_title_isSet = true;
}

bool OAIGroup_initial_children_inner::is_live_title_Set() const{
    return m_live_title_isSet;
}

bool OAIGroup_initial_children_inner::is_live_title_Valid() const{
    return m_live_title_isValid;
}

OAIMaster_brand OAIGroup_initial_children_inner::getMasterBrand() const {
    return m_master_brand;
}
void OAIGroup_initial_children_inner::setMasterBrand(const OAIMaster_brand &master_brand) {
    m_master_brand = master_brand;
    m_master_brand_isSet = true;
}

bool OAIGroup_initial_children_inner::is_master_brand_Set() const{
    return m_master_brand_isSet;
}

bool OAIGroup_initial_children_inner::is_master_brand_Valid() const{
    return m_master_brand_isValid;
}

OAIEpisode_next_broadcast OAIGroup_initial_children_inner::getNextBroadcast() const {
    return m_next_broadcast;
}
void OAIGroup_initial_children_inner::setNextBroadcast(const OAIEpisode_next_broadcast &next_broadcast) {
    m_next_broadcast = next_broadcast;
    m_next_broadcast_isSet = true;
}

bool OAIGroup_initial_children_inner::is_next_broadcast_Set() const{
    return m_next_broadcast_isSet;
}

bool OAIGroup_initial_children_inner::is_next_broadcast_Valid() const{
    return m_next_broadcast_isValid;
}

double OAIGroup_initial_children_inner::getNumericTleoPosition() const {
    return m_numeric_tleo_position;
}
void OAIGroup_initial_children_inner::setNumericTleoPosition(const double &numeric_tleo_position) {
    m_numeric_tleo_position = numeric_tleo_position;
    m_numeric_tleo_position_isSet = true;
}

bool OAIGroup_initial_children_inner::is_numeric_tleo_position_Set() const{
    return m_numeric_tleo_position_isSet;
}

bool OAIGroup_initial_children_inner::is_numeric_tleo_position_Valid() const{
    return m_numeric_tleo_position_isValid;
}

QString OAIGroup_initial_children_inner::getOriginalTitle() const {
    return m_original_title;
}
void OAIGroup_initial_children_inner::setOriginalTitle(const QString &original_title) {
    m_original_title = original_title;
    m_original_title_isSet = true;
}

bool OAIGroup_initial_children_inner::is_original_title_Set() const{
    return m_original_title_isSet;
}

bool OAIGroup_initial_children_inner::is_original_title_Valid() const{
    return m_original_title_isValid;
}

QString OAIGroup_initial_children_inner::getParentId() const {
    return m_parent_id;
}
void OAIGroup_initial_children_inner::setParentId(const QString &parent_id) {
    m_parent_id = parent_id;
    m_parent_id_isSet = true;
}

bool OAIGroup_initial_children_inner::is_parent_id_Set() const{
    return m_parent_id_isSet;
}

bool OAIGroup_initial_children_inner::is_parent_id_Valid() const{
    return m_parent_id_isValid;
}

double OAIGroup_initial_children_inner::getParentPosition() const {
    return m_parent_position;
}
void OAIGroup_initial_children_inner::setParentPosition(const double &parent_position) {
    m_parent_position = parent_position;
    m_parent_position_isSet = true;
}

bool OAIGroup_initial_children_inner::is_parent_position_Set() const{
    return m_parent_position_isSet;
}

bool OAIGroup_initial_children_inner::is_parent_position_Valid() const{
    return m_parent_position_isValid;
}

QString OAIGroup_initial_children_inner::getPreviewId() const {
    return m_preview_id;
}
void OAIGroup_initial_children_inner::setPreviewId(const QString &preview_id) {
    m_preview_id = preview_id;
    m_preview_id_isSet = true;
}

bool OAIGroup_initial_children_inner::is_preview_id_Set() const{
    return m_preview_id_isSet;
}

bool OAIGroup_initial_children_inner::is_preview_id_Valid() const{
    return m_preview_id_isValid;
}

QString OAIGroup_initial_children_inner::getProgrammeType() const {
    return m_programme_type;
}
void OAIGroup_initial_children_inner::setProgrammeType(const QString &programme_type) {
    m_programme_type = programme_type;
    m_programme_type_isSet = true;
}

bool OAIGroup_initial_children_inner::is_programme_type_Set() const{
    return m_programme_type_isSet;
}

bool OAIGroup_initial_children_inner::is_programme_type_Valid() const{
    return m_programme_type_isValid;
}

bool OAIGroup_initial_children_inner::isPromoted() const {
    return m_promoted;
}
void OAIGroup_initial_children_inner::setPromoted(const bool &promoted) {
    m_promoted = promoted;
    m_promoted_isSet = true;
}

bool OAIGroup_initial_children_inner::is_promoted_Set() const{
    return m_promoted_isSet;
}

bool OAIGroup_initial_children_inner::is_promoted_Valid() const{
    return m_promoted_isValid;
}

QList<OAIEpisode_related_links_inner> OAIGroup_initial_children_inner::getRelatedLinks() const {
    return m_related_links;
}
void OAIGroup_initial_children_inner::setRelatedLinks(const QList<OAIEpisode_related_links_inner> &related_links) {
    m_related_links = related_links;
    m_related_links_isSet = true;
}

bool OAIGroup_initial_children_inner::is_related_links_Set() const{
    return m_related_links_isSet;
}

bool OAIGroup_initial_children_inner::is_related_links_Valid() const{
    return m_related_links_isValid;
}

QString OAIGroup_initial_children_inner::getReleaseDate() const {
    return m_release_date;
}
void OAIGroup_initial_children_inner::setReleaseDate(const QString &release_date) {
    m_release_date = release_date;
    m_release_date_isSet = true;
}

bool OAIGroup_initial_children_inner::is_release_date_Set() const{
    return m_release_date_isSet;
}

bool OAIGroup_initial_children_inner::is_release_date_Valid() const{
    return m_release_date_isValid;
}

QString OAIGroup_initial_children_inner::getReleaseDateTime() const {
    return m_release_date_time;
}
void OAIGroup_initial_children_inner::setReleaseDateTime(const QString &release_date_time) {
    m_release_date_time = release_date_time;
    m_release_date_time_isSet = true;
}

bool OAIGroup_initial_children_inner::is_release_date_time_Set() const{
    return m_release_date_time_isSet;
}

bool OAIGroup_initial_children_inner::is_release_date_time_Valid() const{
    return m_release_date_time_isValid;
}

QSet<QString> OAIGroup_initial_children_inner::getRequiresAb() const {
    return m_requires_ab;
}
void OAIGroup_initial_children_inner::setRequiresAb(const QSet<QString> &requires_ab) {
    m_requires_ab = requires_ab;
    m_requires_ab_isSet = true;
}

bool OAIGroup_initial_children_inner::is_requires_ab_Set() const{
    return m_requires_ab_isSet;
}

bool OAIGroup_initial_children_inner::is_requires_ab_Valid() const{
    return m_requires_ab_isValid;
}

bool OAIGroup_initial_children_inner::isRequiresSignIn() const {
    return m_requires_sign_in;
}
void OAIGroup_initial_children_inner::setRequiresSignIn(const bool &requires_sign_in) {
    m_requires_sign_in = requires_sign_in;
    m_requires_sign_in_isSet = true;
}

bool OAIGroup_initial_children_inner::is_requires_sign_in_Set() const{
    return m_requires_sign_in_isSet;
}

bool OAIGroup_initial_children_inner::is_requires_sign_in_Valid() const{
    return m_requires_sign_in_isValid;
}

bool OAIGroup_initial_children_inner::isRequiresTvLicence() const {
    return m_requires_tv_licence;
}
void OAIGroup_initial_children_inner::setRequiresTvLicence(const bool &requires_tv_licence) {
    m_requires_tv_licence = requires_tv_licence;
    m_requires_tv_licence_isSet = true;
}

bool OAIGroup_initial_children_inner::is_requires_tv_licence_Set() const{
    return m_requires_tv_licence_isSet;
}

bool OAIGroup_initial_children_inner::is_requires_tv_licence_Valid() const{
    return m_requires_tv_licence_isValid;
}

bool OAIGroup_initial_children_inner::isRSigned() const {
    return m_r_signed;
}
void OAIGroup_initial_children_inner::setRSigned(const bool &r_signed) {
    m_r_signed = r_signed;
    m_r_signed_isSet = true;
}

bool OAIGroup_initial_children_inner::is_r_signed_Set() const{
    return m_r_signed_isSet;
}

bool OAIGroup_initial_children_inner::is_r_signed_Valid() const{
    return m_r_signed_isValid;
}

QString OAIGroup_initial_children_inner::getSliceId() const {
    return m_slice_id;
}
void OAIGroup_initial_children_inner::setSliceId(const QString &slice_id) {
    m_slice_id = slice_id;
    m_slice_id_isSet = true;
}

bool OAIGroup_initial_children_inner::is_slice_id_Set() const{
    return m_slice_id_isSet;
}

bool OAIGroup_initial_children_inner::is_slice_id_Valid() const{
    return m_slice_id_isValid;
}

QString OAIGroup_initial_children_inner::getSliceSubtitle() const {
    return m_slice_subtitle;
}
void OAIGroup_initial_children_inner::setSliceSubtitle(const QString &slice_subtitle) {
    m_slice_subtitle = slice_subtitle;
    m_slice_subtitle_isSet = true;
}

bool OAIGroup_initial_children_inner::is_slice_subtitle_Set() const{
    return m_slice_subtitle_isSet;
}

bool OAIGroup_initial_children_inner::is_slice_subtitle_Valid() const{
    return m_slice_subtitle_isValid;
}

QString OAIGroup_initial_children_inner::getStatus() const {
    return m_status;
}
void OAIGroup_initial_children_inner::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGroup_initial_children_inner::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGroup_initial_children_inner::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIGroup_initial_children_inner::getSubtitle() const {
    return m_subtitle;
}
void OAIGroup_initial_children_inner::setSubtitle(const QString &subtitle) {
    m_subtitle = subtitle;
    m_subtitle_isSet = true;
}

bool OAIGroup_initial_children_inner::is_subtitle_Set() const{
    return m_subtitle_isSet;
}

bool OAIGroup_initial_children_inner::is_subtitle_Valid() const{
    return m_subtitle_isValid;
}

OAIEpisode_synopses OAIGroup_initial_children_inner::getSynopses() const {
    return m_synopses;
}
void OAIGroup_initial_children_inner::setSynopses(const OAIEpisode_synopses &synopses) {
    m_synopses = synopses;
    m_synopses_isSet = true;
}

bool OAIGroup_initial_children_inner::is_synopses_Set() const{
    return m_synopses_isSet;
}

bool OAIGroup_initial_children_inner::is_synopses_Valid() const{
    return m_synopses_isValid;
}

QList<OAIEpisode_tests_inner> OAIGroup_initial_children_inner::getTests() const {
    return m_tests;
}
void OAIGroup_initial_children_inner::setTests(const QList<OAIEpisode_tests_inner> &tests) {
    m_tests = tests;
    m_tests_isSet = true;
}

bool OAIGroup_initial_children_inner::is_tests_Set() const{
    return m_tests_isSet;
}

bool OAIGroup_initial_children_inner::is_tests_Valid() const{
    return m_tests_isValid;
}

QString OAIGroup_initial_children_inner::getTitle() const {
    return m_title;
}
void OAIGroup_initial_children_inner::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIGroup_initial_children_inner::is_title_Set() const{
    return m_title_isSet;
}

bool OAIGroup_initial_children_inner::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIGroup_initial_children_inner::getTleoId() const {
    return m_tleo_id;
}
void OAIGroup_initial_children_inner::setTleoId(const QString &tleo_id) {
    m_tleo_id = tleo_id;
    m_tleo_id_isSet = true;
}

bool OAIGroup_initial_children_inner::is_tleo_id_Set() const{
    return m_tleo_id_isSet;
}

bool OAIGroup_initial_children_inner::is_tleo_id_Valid() const{
    return m_tleo_id_isValid;
}

QString OAIGroup_initial_children_inner::getTleoType() const {
    return m_tleo_type;
}
void OAIGroup_initial_children_inner::setTleoType(const QString &tleo_type) {
    m_tleo_type = tleo_type;
    m_tleo_type_isSet = true;
}

bool OAIGroup_initial_children_inner::is_tleo_type_Set() const{
    return m_tleo_type_isSet;
}

bool OAIGroup_initial_children_inner::is_tleo_type_Valid() const{
    return m_tleo_type_isValid;
}

QString OAIGroup_initial_children_inner::getType() const {
    return m_type;
}
void OAIGroup_initial_children_inner::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGroup_initial_children_inner::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGroup_initial_children_inner::is_type_Valid() const{
    return m_type_isValid;
}

QList<OAIEpisode_versions_inner> OAIGroup_initial_children_inner::getVersions() const {
    return m_versions;
}
void OAIGroup_initial_children_inner::setVersions(const QList<OAIEpisode_versions_inner> &versions) {
    m_versions = versions;
    m_versions_isSet = true;
}

bool OAIGroup_initial_children_inner::is_versions_Set() const{
    return m_versions_isSet;
}

bool OAIGroup_initial_children_inner::is_versions_Valid() const{
    return m_versions_isValid;
}

QString OAIGroup_initial_children_inner::getAvailableOnHdService() const {
    return m_available_on_hd_service;
}
void OAIGroup_initial_children_inner::setAvailableOnHdService(const QString &available_on_hd_service) {
    m_available_on_hd_service = available_on_hd_service;
    m_available_on_hd_service_isSet = true;
}

bool OAIGroup_initial_children_inner::is_available_on_hd_service_Set() const{
    return m_available_on_hd_service_isSet;
}

bool OAIGroup_initial_children_inner::is_available_on_hd_service_Valid() const{
    return m_available_on_hd_service_isValid;
}

bool OAIGroup_initial_children_inner::isBlanked() const {
    return m_blanked;
}
void OAIGroup_initial_children_inner::setBlanked(const bool &blanked) {
    m_blanked = blanked;
    m_blanked_isSet = true;
}

bool OAIGroup_initial_children_inner::is_blanked_Set() const{
    return m_blanked_isSet;
}

bool OAIGroup_initial_children_inner::is_blanked_Valid() const{
    return m_blanked_isValid;
}

QString OAIGroup_initial_children_inner::getChannelTitle() const {
    return m_channel_title;
}
void OAIGroup_initial_children_inner::setChannelTitle(const QString &channel_title) {
    m_channel_title = channel_title;
    m_channel_title_isSet = true;
}

bool OAIGroup_initial_children_inner::is_channel_title_Set() const{
    return m_channel_title_isSet;
}

bool OAIGroup_initial_children_inner::is_channel_title_Valid() const{
    return m_channel_title_isValid;
}

OAIBroadcast_duration OAIGroup_initial_children_inner::getDuration() const {
    return m_duration;
}
void OAIGroup_initial_children_inner::setDuration(const OAIBroadcast_duration &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIGroup_initial_children_inner::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIGroup_initial_children_inner::is_duration_Valid() const{
    return m_duration_isValid;
}

OAIEpisode OAIGroup_initial_children_inner::getEpisode() const {
    return m_episode;
}
void OAIGroup_initial_children_inner::setEpisode(const OAIEpisode &episode) {
    m_episode = episode;
    m_episode_isSet = true;
}

bool OAIGroup_initial_children_inner::is_episode_Set() const{
    return m_episode_isSet;
}

bool OAIGroup_initial_children_inner::is_episode_Valid() const{
    return m_episode_isValid;
}

QString OAIGroup_initial_children_inner::getEpisodeId() const {
    return m_episode_id;
}
void OAIGroup_initial_children_inner::setEpisodeId(const QString &episode_id) {
    m_episode_id = episode_id;
    m_episode_id_isSet = true;
}

bool OAIGroup_initial_children_inner::is_episode_id_Set() const{
    return m_episode_id_isSet;
}

bool OAIGroup_initial_children_inner::is_episode_id_Valid() const{
    return m_episode_id_isValid;
}

QList<OAIBroadcast_events_inner> OAIGroup_initial_children_inner::getEvents() const {
    return m_events;
}
void OAIGroup_initial_children_inner::setEvents(const QList<OAIBroadcast_events_inner> &events) {
    m_events = events;
    m_events_isSet = true;
}

bool OAIGroup_initial_children_inner::is_events_Set() const{
    return m_events_isSet;
}

bool OAIGroup_initial_children_inner::is_events_Valid() const{
    return m_events_isValid;
}

bool OAIGroup_initial_children_inner::isRepeat() const {
    return m_repeat;
}
void OAIGroup_initial_children_inner::setRepeat(const bool &repeat) {
    m_repeat = repeat;
    m_repeat_isSet = true;
}

bool OAIGroup_initial_children_inner::is_repeat_Set() const{
    return m_repeat_isSet;
}

bool OAIGroup_initial_children_inner::is_repeat_Valid() const{
    return m_repeat_isValid;
}

QString OAIGroup_initial_children_inner::getScheduledEnd() const {
    return m_scheduled_end;
}
void OAIGroup_initial_children_inner::setScheduledEnd(const QString &scheduled_end) {
    m_scheduled_end = scheduled_end;
    m_scheduled_end_isSet = true;
}

bool OAIGroup_initial_children_inner::is_scheduled_end_Set() const{
    return m_scheduled_end_isSet;
}

bool OAIGroup_initial_children_inner::is_scheduled_end_Valid() const{
    return m_scheduled_end_isValid;
}

QString OAIGroup_initial_children_inner::getScheduledStart() const {
    return m_scheduled_start;
}
void OAIGroup_initial_children_inner::setScheduledStart(const QString &scheduled_start) {
    m_scheduled_start = scheduled_start;
    m_scheduled_start_isSet = true;
}

bool OAIGroup_initial_children_inner::is_scheduled_start_Set() const{
    return m_scheduled_start_isSet;
}

bool OAIGroup_initial_children_inner::is_scheduled_start_Valid() const{
    return m_scheduled_start_isValid;
}

QString OAIGroup_initial_children_inner::getServiceId() const {
    return m_service_id;
}
void OAIGroup_initial_children_inner::setServiceId(const QString &service_id) {
    m_service_id = service_id;
    m_service_id_isSet = true;
}

bool OAIGroup_initial_children_inner::is_service_id_Set() const{
    return m_service_id_isSet;
}

bool OAIGroup_initial_children_inner::is_service_id_Valid() const{
    return m_service_id_isValid;
}

QString OAIGroup_initial_children_inner::getTransmissionEnd() const {
    return m_transmission_end;
}
void OAIGroup_initial_children_inner::setTransmissionEnd(const QString &transmission_end) {
    m_transmission_end = transmission_end;
    m_transmission_end_isSet = true;
}

bool OAIGroup_initial_children_inner::is_transmission_end_Set() const{
    return m_transmission_end_isSet;
}

bool OAIGroup_initial_children_inner::is_transmission_end_Valid() const{
    return m_transmission_end_isValid;
}

QString OAIGroup_initial_children_inner::getTransmissionStart() const {
    return m_transmission_start;
}
void OAIGroup_initial_children_inner::setTransmissionStart(const QString &transmission_start) {
    m_transmission_start = transmission_start;
    m_transmission_start_isSet = true;
}

bool OAIGroup_initial_children_inner::is_transmission_start_Set() const{
    return m_transmission_start_isSet;
}

bool OAIGroup_initial_children_inner::is_transmission_start_Valid() const{
    return m_transmission_start_isValid;
}

QString OAIGroup_initial_children_inner::getVersionId() const {
    return m_version_id;
}
void OAIGroup_initial_children_inner::setVersionId(const QString &version_id) {
    m_version_id = version_id;
    m_version_id_isSet = true;
}

bool OAIGroup_initial_children_inner::is_version_id_Set() const{
    return m_version_id_isSet;
}

bool OAIGroup_initial_children_inner::is_version_id_Valid() const{
    return m_version_id_isValid;
}

bool OAIGroup_initial_children_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audio_described_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_childrens_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_editorial_subtitle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_editorial_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guidance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_credits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_images.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lexical_sort_letter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_live_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_live_subtitle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_live_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_brand.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_broadcast.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_numeric_tleo_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preview_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_programme_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_promoted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requires_ab.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_requires_sign_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requires_tv_licence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_signed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slice_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slice_subtitle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtitle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_synopses.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tests.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tleo_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tleo_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_versions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_on_hd_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blanked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_episode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_episode_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_repeat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transmission_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transmission_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGroup_initial_children_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_audio_described_isValid && m_categories_isValid && m_guidance_isValid && m_id_isValid && m_images_isValid && m_lexical_sort_letter_isValid && m_master_brand_isValid && m_requires_sign_in_isValid && m_r_signed_isValid && m_status_isValid && m_synopses_isValid && m_title_isValid && m_tleo_id_isValid && m_tleo_type_isValid && m_type_isValid && m_versions_isValid && m_blanked_isValid && m_episode_isValid && m_episode_id_isValid && m_repeat_isValid && m_scheduled_end_isValid && m_scheduled_start_isValid && m_service_id_isValid && m_version_id_isValid && true;
}

} // namespace OpenAPI
