/**
 * BBC iPlayer Business Layer
 * The definitive iPlayer API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: ibl-team@lists.forge.bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEpisode_labels.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEpisode_labels::OAIEpisode_labels(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEpisode_labels::OAIEpisode_labels() {
    this->initializeModel();
}

OAIEpisode_labels::~OAIEpisode_labels() {}

void OAIEpisode_labels::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_editorial_isSet = false;
    m_editorial_isValid = false;

    m_editorial_category_isSet = false;
    m_editorial_category_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;
}

void OAIEpisode_labels::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEpisode_labels::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_editorial_isValid = ::OpenAPI::fromJsonValue(m_editorial, json[QString("editorial")]);
    m_editorial_isSet = !json[QString("editorial")].isNull() && m_editorial_isValid;

    m_editorial_category_isValid = ::OpenAPI::fromJsonValue(m_editorial_category, json[QString("editorial_category")]);
    m_editorial_category_isSet = !json[QString("editorial_category")].isNull() && m_editorial_category_isValid;

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("time")]);
    m_time_isSet = !json[QString("time")].isNull() && m_time_isValid;
}

QString OAIEpisode_labels::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEpisode_labels::asJsonObject() const {
    QJsonObject obj;
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_editorial_isSet) {
        obj.insert(QString("editorial"), ::OpenAPI::toJsonValue(m_editorial));
    }
    if (m_editorial_category_isSet) {
        obj.insert(QString("editorial_category"), ::OpenAPI::toJsonValue(m_editorial_category));
    }
    if (m_time_isSet) {
        obj.insert(QString("time"), ::OpenAPI::toJsonValue(m_time));
    }
    return obj;
}

QString OAIEpisode_labels::getCategory() const {
    return m_category;
}
void OAIEpisode_labels::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIEpisode_labels::is_category_Set() const{
    return m_category_isSet;
}

bool OAIEpisode_labels::is_category_Valid() const{
    return m_category_isValid;
}

QString OAIEpisode_labels::getEditorial() const {
    return m_editorial;
}
void OAIEpisode_labels::setEditorial(const QString &editorial) {
    m_editorial = editorial;
    m_editorial_isSet = true;
}

bool OAIEpisode_labels::is_editorial_Set() const{
    return m_editorial_isSet;
}

bool OAIEpisode_labels::is_editorial_Valid() const{
    return m_editorial_isValid;
}

QString OAIEpisode_labels::getEditorialCategory() const {
    return m_editorial_category;
}
void OAIEpisode_labels::setEditorialCategory(const QString &editorial_category) {
    m_editorial_category = editorial_category;
    m_editorial_category_isSet = true;
}

bool OAIEpisode_labels::is_editorial_category_Set() const{
    return m_editorial_category_isSet;
}

bool OAIEpisode_labels::is_editorial_category_Valid() const{
    return m_editorial_category_isValid;
}

QString OAIEpisode_labels::getTime() const {
    return m_time;
}
void OAIEpisode_labels::setTime(const QString &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAIEpisode_labels::is_time_Set() const{
    return m_time_isSet;
}

bool OAIEpisode_labels::is_time_Valid() const{
    return m_time_isValid;
}

bool OAIEpisode_labels::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_editorial_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_editorial_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEpisode_labels::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
