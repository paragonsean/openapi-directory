/**
 * BBC iPlayer Business Layer
 * The definitive iPlayer API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: ibl-team@lists.forge.bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEpisode_images.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEpisode_images::OAIEpisode_images(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEpisode_images::OAIEpisode_images() {
    this->initializeModel();
}

OAIEpisode_images::~OAIEpisode_images() {}

void OAIEpisode_images::initializeModel() {

    m_character_image_isSet = false;
    m_character_image_isValid = false;

    m_inherited_from_isSet = false;
    m_inherited_from_isValid = false;

    m_live_isSet = false;
    m_live_isValid = false;

    m_portrait_isSet = false;
    m_portrait_isValid = false;

    m_promotional_isSet = false;
    m_promotional_isValid = false;

    m_promotional_with_logo_isSet = false;
    m_promotional_with_logo_isValid = false;

    m_standard_isSet = false;
    m_standard_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIEpisode_images::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEpisode_images::fromJsonObject(QJsonObject json) {

    m_character_image_isValid = ::OpenAPI::fromJsonValue(m_character_image, json[QString("character_image")]);
    m_character_image_isSet = !json[QString("character_image")].isNull() && m_character_image_isValid;

    m_inherited_from_isValid = ::OpenAPI::fromJsonValue(m_inherited_from, json[QString("inherited_from")]);
    m_inherited_from_isSet = !json[QString("inherited_from")].isNull() && m_inherited_from_isValid;

    m_live_isValid = ::OpenAPI::fromJsonValue(m_live, json[QString("live")]);
    m_live_isSet = !json[QString("live")].isNull() && m_live_isValid;

    m_portrait_isValid = ::OpenAPI::fromJsonValue(m_portrait, json[QString("portrait")]);
    m_portrait_isSet = !json[QString("portrait")].isNull() && m_portrait_isValid;

    m_promotional_isValid = ::OpenAPI::fromJsonValue(m_promotional, json[QString("promotional")]);
    m_promotional_isSet = !json[QString("promotional")].isNull() && m_promotional_isValid;

    m_promotional_with_logo_isValid = ::OpenAPI::fromJsonValue(m_promotional_with_logo, json[QString("promotional_with_logo")]);
    m_promotional_with_logo_isSet = !json[QString("promotional_with_logo")].isNull() && m_promotional_with_logo_isValid;

    m_standard_isValid = ::OpenAPI::fromJsonValue(m_standard, json[QString("standard")]);
    m_standard_isSet = !json[QString("standard")].isNull() && m_standard_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIEpisode_images::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEpisode_images::asJsonObject() const {
    QJsonObject obj;
    if (m_character_image_isSet) {
        obj.insert(QString("character_image"), ::OpenAPI::toJsonValue(m_character_image));
    }
    if (m_inherited_from_isSet) {
        obj.insert(QString("inherited_from"), ::OpenAPI::toJsonValue(m_inherited_from));
    }
    if (m_live_isSet) {
        obj.insert(QString("live"), ::OpenAPI::toJsonValue(m_live));
    }
    if (m_portrait_isSet) {
        obj.insert(QString("portrait"), ::OpenAPI::toJsonValue(m_portrait));
    }
    if (m_promotional_isSet) {
        obj.insert(QString("promotional"), ::OpenAPI::toJsonValue(m_promotional));
    }
    if (m_promotional_with_logo_isSet) {
        obj.insert(QString("promotional_with_logo"), ::OpenAPI::toJsonValue(m_promotional_with_logo));
    }
    if (m_standard_isSet) {
        obj.insert(QString("standard"), ::OpenAPI::toJsonValue(m_standard));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIEpisode_images::getCharacterImage() const {
    return m_character_image;
}
void OAIEpisode_images::setCharacterImage(const QString &character_image) {
    m_character_image = character_image;
    m_character_image_isSet = true;
}

bool OAIEpisode_images::is_character_image_Set() const{
    return m_character_image_isSet;
}

bool OAIEpisode_images::is_character_image_Valid() const{
    return m_character_image_isValid;
}

QString OAIEpisode_images::getInheritedFrom() const {
    return m_inherited_from;
}
void OAIEpisode_images::setInheritedFrom(const QString &inherited_from) {
    m_inherited_from = inherited_from;
    m_inherited_from_isSet = true;
}

bool OAIEpisode_images::is_inherited_from_Set() const{
    return m_inherited_from_isSet;
}

bool OAIEpisode_images::is_inherited_from_Valid() const{
    return m_inherited_from_isValid;
}

QString OAIEpisode_images::getLive() const {
    return m_live;
}
void OAIEpisode_images::setLive(const QString &live) {
    m_live = live;
    m_live_isSet = true;
}

bool OAIEpisode_images::is_live_Set() const{
    return m_live_isSet;
}

bool OAIEpisode_images::is_live_Valid() const{
    return m_live_isValid;
}

QString OAIEpisode_images::getPortrait() const {
    return m_portrait;
}
void OAIEpisode_images::setPortrait(const QString &portrait) {
    m_portrait = portrait;
    m_portrait_isSet = true;
}

bool OAIEpisode_images::is_portrait_Set() const{
    return m_portrait_isSet;
}

bool OAIEpisode_images::is_portrait_Valid() const{
    return m_portrait_isValid;
}

QString OAIEpisode_images::getPromotional() const {
    return m_promotional;
}
void OAIEpisode_images::setPromotional(const QString &promotional) {
    m_promotional = promotional;
    m_promotional_isSet = true;
}

bool OAIEpisode_images::is_promotional_Set() const{
    return m_promotional_isSet;
}

bool OAIEpisode_images::is_promotional_Valid() const{
    return m_promotional_isValid;
}

QString OAIEpisode_images::getPromotionalWithLogo() const {
    return m_promotional_with_logo;
}
void OAIEpisode_images::setPromotionalWithLogo(const QString &promotional_with_logo) {
    m_promotional_with_logo = promotional_with_logo;
    m_promotional_with_logo_isSet = true;
}

bool OAIEpisode_images::is_promotional_with_logo_Set() const{
    return m_promotional_with_logo_isSet;
}

bool OAIEpisode_images::is_promotional_with_logo_Valid() const{
    return m_promotional_with_logo_isValid;
}

QString OAIEpisode_images::getStandard() const {
    return m_standard;
}
void OAIEpisode_images::setStandard(const QString &standard) {
    m_standard = standard;
    m_standard_isSet = true;
}

bool OAIEpisode_images::is_standard_Set() const{
    return m_standard_isSet;
}

bool OAIEpisode_images::is_standard_Valid() const{
    return m_standard_isValid;
}

QString OAIEpisode_images::getType() const {
    return m_type;
}
void OAIEpisode_images::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIEpisode_images::is_type_Set() const{
    return m_type_isSet;
}

bool OAIEpisode_images::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIEpisode_images::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_character_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inherited_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_live_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_portrait_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_promotional_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_promotional_with_logo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_standard_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEpisode_images::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_standard_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
