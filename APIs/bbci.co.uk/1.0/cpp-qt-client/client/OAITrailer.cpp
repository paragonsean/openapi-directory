/**
 * BBC iPlayer Business Layer
 * The definitive iPlayer API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: ibl-team@lists.forge.bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrailer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrailer::OAITrailer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrailer::OAITrailer() {
    this->initializeModel();
}

OAITrailer::~OAITrailer() {}

void OAITrailer::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_version_id_isSet = false;
    m_version_id_isValid = false;
}

void OAITrailer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrailer::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_version_id_isValid = ::OpenAPI::fromJsonValue(m_version_id, json[QString("version_id")]);
    m_version_id_isSet = !json[QString("version_id")].isNull() && m_version_id_isValid;
}

QString OAITrailer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrailer::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_version_id_isSet) {
        obj.insert(QString("version_id"), ::OpenAPI::toJsonValue(m_version_id));
    }
    return obj;
}

QString OAITrailer::getId() const {
    return m_id;
}
void OAITrailer::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITrailer::is_id_Set() const{
    return m_id_isSet;
}

bool OAITrailer::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITrailer::getKind() const {
    return m_kind;
}
void OAITrailer::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAITrailer::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAITrailer::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAITrailer::getMessage() const {
    return m_message;
}
void OAITrailer::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAITrailer::is_message_Set() const{
    return m_message_isSet;
}

bool OAITrailer::is_message_Valid() const{
    return m_message_isValid;
}

QString OAITrailer::getTitle() const {
    return m_title;
}
void OAITrailer::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAITrailer::is_title_Set() const{
    return m_title_isSet;
}

bool OAITrailer::is_title_Valid() const{
    return m_title_isValid;
}

QString OAITrailer::getType() const {
    return m_type;
}
void OAITrailer::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITrailer::is_type_Set() const{
    return m_type_isSet;
}

bool OAITrailer::is_type_Valid() const{
    return m_type_isValid;
}

QString OAITrailer::getVersionId() const {
    return m_version_id;
}
void OAITrailer::setVersionId(const QString &version_id) {
    m_version_id = version_id;
    m_version_id_isSet = true;
}

bool OAITrailer::is_version_id_Set() const{
    return m_version_id_isSet;
}

bool OAITrailer::is_version_id_Valid() const{
    return m_version_id_isValid;
}

bool OAITrailer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrailer::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_kind_isValid && m_message_isValid && m_title_isValid && m_type_isValid && m_version_id_isValid && true;
}

} // namespace OpenAPI
