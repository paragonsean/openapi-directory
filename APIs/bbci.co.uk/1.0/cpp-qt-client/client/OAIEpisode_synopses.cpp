/**
 * BBC iPlayer Business Layer
 * The definitive iPlayer API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: ibl-team@lists.forge.bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEpisode_synopses.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEpisode_synopses::OAIEpisode_synopses(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEpisode_synopses::OAIEpisode_synopses() {
    this->initializeModel();
}

OAIEpisode_synopses::~OAIEpisode_synopses() {}

void OAIEpisode_synopses::initializeModel() {

    m_editorial_isSet = false;
    m_editorial_isValid = false;

    m_large_isSet = false;
    m_large_isValid = false;

    m_live_isSet = false;
    m_live_isValid = false;

    m_medium_isSet = false;
    m_medium_isValid = false;

    m_preview_isSet = false;
    m_preview_isValid = false;

    m_programme_small_isSet = false;
    m_programme_small_isValid = false;

    m_small_isSet = false;
    m_small_isValid = false;
}

void OAIEpisode_synopses::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEpisode_synopses::fromJsonObject(QJsonObject json) {

    m_editorial_isValid = ::OpenAPI::fromJsonValue(m_editorial, json[QString("editorial")]);
    m_editorial_isSet = !json[QString("editorial")].isNull() && m_editorial_isValid;

    m_large_isValid = ::OpenAPI::fromJsonValue(m_large, json[QString("large")]);
    m_large_isSet = !json[QString("large")].isNull() && m_large_isValid;

    m_live_isValid = ::OpenAPI::fromJsonValue(m_live, json[QString("live")]);
    m_live_isSet = !json[QString("live")].isNull() && m_live_isValid;

    m_medium_isValid = ::OpenAPI::fromJsonValue(m_medium, json[QString("medium")]);
    m_medium_isSet = !json[QString("medium")].isNull() && m_medium_isValid;

    m_preview_isValid = ::OpenAPI::fromJsonValue(m_preview, json[QString("preview")]);
    m_preview_isSet = !json[QString("preview")].isNull() && m_preview_isValid;

    m_programme_small_isValid = ::OpenAPI::fromJsonValue(m_programme_small, json[QString("programme_small")]);
    m_programme_small_isSet = !json[QString("programme_small")].isNull() && m_programme_small_isValid;

    m_small_isValid = ::OpenAPI::fromJsonValue(m_small, json[QString("small")]);
    m_small_isSet = !json[QString("small")].isNull() && m_small_isValid;
}

QString OAIEpisode_synopses::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEpisode_synopses::asJsonObject() const {
    QJsonObject obj;
    if (m_editorial_isSet) {
        obj.insert(QString("editorial"), ::OpenAPI::toJsonValue(m_editorial));
    }
    if (m_large_isSet) {
        obj.insert(QString("large"), ::OpenAPI::toJsonValue(m_large));
    }
    if (m_live_isSet) {
        obj.insert(QString("live"), ::OpenAPI::toJsonValue(m_live));
    }
    if (m_medium_isSet) {
        obj.insert(QString("medium"), ::OpenAPI::toJsonValue(m_medium));
    }
    if (m_preview_isSet) {
        obj.insert(QString("preview"), ::OpenAPI::toJsonValue(m_preview));
    }
    if (m_programme_small_isSet) {
        obj.insert(QString("programme_small"), ::OpenAPI::toJsonValue(m_programme_small));
    }
    if (m_small_isSet) {
        obj.insert(QString("small"), ::OpenAPI::toJsonValue(m_small));
    }
    return obj;
}

QString OAIEpisode_synopses::getEditorial() const {
    return m_editorial;
}
void OAIEpisode_synopses::setEditorial(const QString &editorial) {
    m_editorial = editorial;
    m_editorial_isSet = true;
}

bool OAIEpisode_synopses::is_editorial_Set() const{
    return m_editorial_isSet;
}

bool OAIEpisode_synopses::is_editorial_Valid() const{
    return m_editorial_isValid;
}

QString OAIEpisode_synopses::getLarge() const {
    return m_large;
}
void OAIEpisode_synopses::setLarge(const QString &large) {
    m_large = large;
    m_large_isSet = true;
}

bool OAIEpisode_synopses::is_large_Set() const{
    return m_large_isSet;
}

bool OAIEpisode_synopses::is_large_Valid() const{
    return m_large_isValid;
}

QString OAIEpisode_synopses::getLive() const {
    return m_live;
}
void OAIEpisode_synopses::setLive(const QString &live) {
    m_live = live;
    m_live_isSet = true;
}

bool OAIEpisode_synopses::is_live_Set() const{
    return m_live_isSet;
}

bool OAIEpisode_synopses::is_live_Valid() const{
    return m_live_isValid;
}

QString OAIEpisode_synopses::getMedium() const {
    return m_medium;
}
void OAIEpisode_synopses::setMedium(const QString &medium) {
    m_medium = medium;
    m_medium_isSet = true;
}

bool OAIEpisode_synopses::is_medium_Set() const{
    return m_medium_isSet;
}

bool OAIEpisode_synopses::is_medium_Valid() const{
    return m_medium_isValid;
}

QString OAIEpisode_synopses::getPreview() const {
    return m_preview;
}
void OAIEpisode_synopses::setPreview(const QString &preview) {
    m_preview = preview;
    m_preview_isSet = true;
}

bool OAIEpisode_synopses::is_preview_Set() const{
    return m_preview_isSet;
}

bool OAIEpisode_synopses::is_preview_Valid() const{
    return m_preview_isValid;
}

QString OAIEpisode_synopses::getProgrammeSmall() const {
    return m_programme_small;
}
void OAIEpisode_synopses::setProgrammeSmall(const QString &programme_small) {
    m_programme_small = programme_small;
    m_programme_small_isSet = true;
}

bool OAIEpisode_synopses::is_programme_small_Set() const{
    return m_programme_small_isSet;
}

bool OAIEpisode_synopses::is_programme_small_Valid() const{
    return m_programme_small_isValid;
}

QString OAIEpisode_synopses::getSmall() const {
    return m_small;
}
void OAIEpisode_synopses::setSmall(const QString &small) {
    m_small = small;
    m_small_isSet = true;
}

bool OAIEpisode_synopses::is_small_Set() const{
    return m_small_isSet;
}

bool OAIEpisode_synopses::is_small_Valid() const{
    return m_small_isValid;
}

bool OAIEpisode_synopses::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_editorial_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_large_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_live_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_medium_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preview_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_programme_small_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_small_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEpisode_synopses::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
