/**
 * BBC iPlayer Business Layer
 * The definitive iPlayer API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: ibl-team@lists.forge.bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICategory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICategory::OAICategory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICategory::OAICategory() {
    this->initializeModel();
}

OAICategory::~OAICategory() {}

void OAICategory::initializeModel() {

    m_child_episode_count_isSet = false;
    m_child_episode_count_isValid = false;

    m_child_programme_count_isSet = false;
    m_child_programme_count_isValid = false;

    m_contextual_title_isSet = false;
    m_contextual_title_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_parent_category_isSet = false;
    m_parent_category_isValid = false;

    m_sub_categories_isSet = false;
    m_sub_categories_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAICategory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICategory::fromJsonObject(QJsonObject json) {

    m_child_episode_count_isValid = ::OpenAPI::fromJsonValue(m_child_episode_count, json[QString("child_episode_count")]);
    m_child_episode_count_isSet = !json[QString("child_episode_count")].isNull() && m_child_episode_count_isValid;

    m_child_programme_count_isValid = ::OpenAPI::fromJsonValue(m_child_programme_count, json[QString("child_programme_count")]);
    m_child_programme_count_isSet = !json[QString("child_programme_count")].isNull() && m_child_programme_count_isValid;

    m_contextual_title_isValid = ::OpenAPI::fromJsonValue(m_contextual_title, json[QString("contextual_title")]);
    m_contextual_title_isSet = !json[QString("contextual_title")].isNull() && m_contextual_title_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_parent_category_isValid = ::OpenAPI::fromJsonValue(m_parent_category, json[QString("parent_category")]);
    m_parent_category_isSet = !json[QString("parent_category")].isNull() && m_parent_category_isValid;

    m_sub_categories_isValid = ::OpenAPI::fromJsonValue(m_sub_categories, json[QString("sub_categories")]);
    m_sub_categories_isSet = !json[QString("sub_categories")].isNull() && m_sub_categories_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAICategory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICategory::asJsonObject() const {
    QJsonObject obj;
    if (m_child_episode_count_isSet) {
        obj.insert(QString("child_episode_count"), ::OpenAPI::toJsonValue(m_child_episode_count));
    }
    if (m_child_programme_count_isSet) {
        obj.insert(QString("child_programme_count"), ::OpenAPI::toJsonValue(m_child_programme_count));
    }
    if (m_contextual_title_isSet) {
        obj.insert(QString("contextual_title"), ::OpenAPI::toJsonValue(m_contextual_title));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_parent_category_isSet) {
        obj.insert(QString("parent_category"), ::OpenAPI::toJsonValue(m_parent_category));
    }
    if (m_sub_categories.size() > 0) {
        obj.insert(QString("sub_categories"), ::OpenAPI::toJsonValue(m_sub_categories));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

double OAICategory::getChildEpisodeCount() const {
    return m_child_episode_count;
}
void OAICategory::setChildEpisodeCount(const double &child_episode_count) {
    m_child_episode_count = child_episode_count;
    m_child_episode_count_isSet = true;
}

bool OAICategory::is_child_episode_count_Set() const{
    return m_child_episode_count_isSet;
}

bool OAICategory::is_child_episode_count_Valid() const{
    return m_child_episode_count_isValid;
}

double OAICategory::getChildProgrammeCount() const {
    return m_child_programme_count;
}
void OAICategory::setChildProgrammeCount(const double &child_programme_count) {
    m_child_programme_count = child_programme_count;
    m_child_programme_count_isSet = true;
}

bool OAICategory::is_child_programme_count_Set() const{
    return m_child_programme_count_isSet;
}

bool OAICategory::is_child_programme_count_Valid() const{
    return m_child_programme_count_isValid;
}

QString OAICategory::getContextualTitle() const {
    return m_contextual_title;
}
void OAICategory::setContextualTitle(const QString &contextual_title) {
    m_contextual_title = contextual_title;
    m_contextual_title_isSet = true;
}

bool OAICategory::is_contextual_title_Set() const{
    return m_contextual_title_isSet;
}

bool OAICategory::is_contextual_title_Valid() const{
    return m_contextual_title_isValid;
}

QString OAICategory::getId() const {
    return m_id;
}
void OAICategory::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICategory::is_id_Set() const{
    return m_id_isSet;
}

bool OAICategory::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICategory::getKind() const {
    return m_kind;
}
void OAICategory::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAICategory::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAICategory::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAICategory::getParentCategory() const {
    return m_parent_category;
}
void OAICategory::setParentCategory(const QString &parent_category) {
    m_parent_category = parent_category;
    m_parent_category_isSet = true;
}

bool OAICategory::is_parent_category_Set() const{
    return m_parent_category_isSet;
}

bool OAICategory::is_parent_category_Valid() const{
    return m_parent_category_isValid;
}

QList<OAICategory> OAICategory::getSubCategories() const {
    return m_sub_categories;
}
void OAICategory::setSubCategories(const QList<OAICategory> &sub_categories) {
    m_sub_categories = sub_categories;
    m_sub_categories_isSet = true;
}

bool OAICategory::is_sub_categories_Set() const{
    return m_sub_categories_isSet;
}

bool OAICategory::is_sub_categories_Valid() const{
    return m_sub_categories_isValid;
}

QString OAICategory::getTitle() const {
    return m_title;
}
void OAICategory::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAICategory::is_title_Set() const{
    return m_title_isSet;
}

bool OAICategory::is_title_Valid() const{
    return m_title_isValid;
}

QString OAICategory::getType() const {
    return m_type;
}
void OAICategory::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICategory::is_type_Set() const{
    return m_type_isSet;
}

bool OAICategory::is_type_Valid() const{
    return m_type_isValid;
}

bool OAICategory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_child_episode_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_child_programme_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contextual_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICategory::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_kind_isValid && m_title_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
