/**
 * BBC iPlayer Business Layer
 * The definitive iPlayer API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: ibl-team@lists.forge.bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChannel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChannel::OAIChannel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChannel::OAIChannel() {
    this->initializeModel();
}

OAIChannel::~OAIChannel() {}

void OAIChannel::initializeModel() {

    m_has_schedule_isSet = false;
    m_has_schedule_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_master_brand_id_isSet = false;
    m_master_brand_id_isValid = false;

    m_master_brand_title_isSet = false;
    m_master_brand_title_isValid = false;

    m_on_air_isSet = false;
    m_on_air_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIChannel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChannel::fromJsonObject(QJsonObject json) {

    m_has_schedule_isValid = ::OpenAPI::fromJsonValue(m_has_schedule, json[QString("has_schedule")]);
    m_has_schedule_isSet = !json[QString("has_schedule")].isNull() && m_has_schedule_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_master_brand_id_isValid = ::OpenAPI::fromJsonValue(m_master_brand_id, json[QString("master_brand_id")]);
    m_master_brand_id_isSet = !json[QString("master_brand_id")].isNull() && m_master_brand_id_isValid;

    m_master_brand_title_isValid = ::OpenAPI::fromJsonValue(m_master_brand_title, json[QString("master_brand_title")]);
    m_master_brand_title_isSet = !json[QString("master_brand_title")].isNull() && m_master_brand_title_isValid;

    m_on_air_isValid = ::OpenAPI::fromJsonValue(m_on_air, json[QString("on_air")]);
    m_on_air_isSet = !json[QString("on_air")].isNull() && m_on_air_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIChannel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChannel::asJsonObject() const {
    QJsonObject obj;
    if (m_has_schedule_isSet) {
        obj.insert(QString("has_schedule"), ::OpenAPI::toJsonValue(m_has_schedule));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_master_brand_id_isSet) {
        obj.insert(QString("master_brand_id"), ::OpenAPI::toJsonValue(m_master_brand_id));
    }
    if (m_master_brand_title_isSet) {
        obj.insert(QString("master_brand_title"), ::OpenAPI::toJsonValue(m_master_brand_title));
    }
    if (m_on_air_isSet) {
        obj.insert(QString("on_air"), ::OpenAPI::toJsonValue(m_on_air));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

bool OAIChannel::isHasSchedule() const {
    return m_has_schedule;
}
void OAIChannel::setHasSchedule(const bool &has_schedule) {
    m_has_schedule = has_schedule;
    m_has_schedule_isSet = true;
}

bool OAIChannel::is_has_schedule_Set() const{
    return m_has_schedule_isSet;
}

bool OAIChannel::is_has_schedule_Valid() const{
    return m_has_schedule_isValid;
}

QString OAIChannel::getId() const {
    return m_id;
}
void OAIChannel::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIChannel::is_id_Set() const{
    return m_id_isSet;
}

bool OAIChannel::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIChannel::getMasterBrandId() const {
    return m_master_brand_id;
}
void OAIChannel::setMasterBrandId(const QString &master_brand_id) {
    m_master_brand_id = master_brand_id;
    m_master_brand_id_isSet = true;
}

bool OAIChannel::is_master_brand_id_Set() const{
    return m_master_brand_id_isSet;
}

bool OAIChannel::is_master_brand_id_Valid() const{
    return m_master_brand_id_isValid;
}

QString OAIChannel::getMasterBrandTitle() const {
    return m_master_brand_title;
}
void OAIChannel::setMasterBrandTitle(const QString &master_brand_title) {
    m_master_brand_title = master_brand_title;
    m_master_brand_title_isSet = true;
}

bool OAIChannel::is_master_brand_title_Set() const{
    return m_master_brand_title_isSet;
}

bool OAIChannel::is_master_brand_title_Valid() const{
    return m_master_brand_title_isValid;
}

bool OAIChannel::isOnAir() const {
    return m_on_air;
}
void OAIChannel::setOnAir(const bool &on_air) {
    m_on_air = on_air;
    m_on_air_isSet = true;
}

bool OAIChannel::is_on_air_Set() const{
    return m_on_air_isSet;
}

bool OAIChannel::is_on_air_Valid() const{
    return m_on_air_isValid;
}

QString OAIChannel::getTitle() const {
    return m_title;
}
void OAIChannel::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIChannel::is_title_Set() const{
    return m_title_isSet;
}

bool OAIChannel::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIChannel::getType() const {
    return m_type;
}
void OAIChannel::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIChannel::is_type_Set() const{
    return m_type_isSet;
}

bool OAIChannel::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIChannel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_has_schedule_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_brand_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_brand_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_air_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChannel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_has_schedule_isValid && m_id_isValid && m_master_brand_id_isValid && m_master_brand_title_isValid && m_title_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
