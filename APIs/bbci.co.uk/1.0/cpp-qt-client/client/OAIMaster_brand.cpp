/**
 * BBC iPlayer Business Layer
 * The definitive iPlayer API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: ibl-team@lists.forge.bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMaster_brand.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMaster_brand::OAIMaster_brand(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMaster_brand::OAIMaster_brand() {
    this->initializeModel();
}

OAIMaster_brand::~OAIMaster_brand() {}

void OAIMaster_brand::initializeModel() {

    m_attribution_isSet = false;
    m_attribution_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_ident_id_isSet = false;
    m_ident_id_isValid = false;

    m_titles_isSet = false;
    m_titles_isValid = false;
}

void OAIMaster_brand::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMaster_brand::fromJsonObject(QJsonObject json) {

    m_attribution_isValid = ::OpenAPI::fromJsonValue(m_attribution, json[QString("attribution")]);
    m_attribution_isSet = !json[QString("attribution")].isNull() && m_attribution_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_ident_id_isValid = ::OpenAPI::fromJsonValue(m_ident_id, json[QString("ident_id")]);
    m_ident_id_isSet = !json[QString("ident_id")].isNull() && m_ident_id_isValid;

    m_titles_isValid = ::OpenAPI::fromJsonValue(m_titles, json[QString("titles")]);
    m_titles_isSet = !json[QString("titles")].isNull() && m_titles_isValid;
}

QString OAIMaster_brand::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMaster_brand::asJsonObject() const {
    QJsonObject obj;
    if (m_attribution_isSet) {
        obj.insert(QString("attribution"), ::OpenAPI::toJsonValue(m_attribution));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_ident_id_isSet) {
        obj.insert(QString("ident_id"), ::OpenAPI::toJsonValue(m_ident_id));
    }
    if (m_titles.isSet()) {
        obj.insert(QString("titles"), ::OpenAPI::toJsonValue(m_titles));
    }
    return obj;
}

QString OAIMaster_brand::getAttribution() const {
    return m_attribution;
}
void OAIMaster_brand::setAttribution(const QString &attribution) {
    m_attribution = attribution;
    m_attribution_isSet = true;
}

bool OAIMaster_brand::is_attribution_Set() const{
    return m_attribution_isSet;
}

bool OAIMaster_brand::is_attribution_Valid() const{
    return m_attribution_isValid;
}

QString OAIMaster_brand::getId() const {
    return m_id;
}
void OAIMaster_brand::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMaster_brand::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMaster_brand::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIMaster_brand::getIdentId() const {
    return m_ident_id;
}
void OAIMaster_brand::setIdentId(const QString &ident_id) {
    m_ident_id = ident_id;
    m_ident_id_isSet = true;
}

bool OAIMaster_brand::is_ident_id_Set() const{
    return m_ident_id_isSet;
}

bool OAIMaster_brand::is_ident_id_Valid() const{
    return m_ident_id_isValid;
}

OAIMaster_brand_titles OAIMaster_brand::getTitles() const {
    return m_titles;
}
void OAIMaster_brand::setTitles(const OAIMaster_brand_titles &titles) {
    m_titles = titles;
    m_titles_isSet = true;
}

bool OAIMaster_brand::is_titles_Set() const{
    return m_titles_isSet;
}

bool OAIMaster_brand::is_titles_Valid() const{
    return m_titles_isValid;
}

bool OAIMaster_brand::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attribution_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ident_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_titles.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMaster_brand::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_attribution_isValid && m_id_isValid && m_titles_isValid && true;
}

} // namespace OpenAPI
