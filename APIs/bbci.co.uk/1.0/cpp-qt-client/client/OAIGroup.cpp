/**
 * BBC iPlayer Business Layer
 * The definitive iPlayer API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: ibl-team@lists.forge.bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGroup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGroup::OAIGroup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGroup::OAIGroup() {
    this->initializeModel();
}

OAIGroup::~OAIGroup() {}

void OAIGroup::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_episode_sort_direction_isSet = false;
    m_episode_sort_direction_isValid = false;

    m_group_type_isSet = false;
    m_group_type_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_images_isSet = false;
    m_images_isValid = false;

    m_initial_children_isSet = false;
    m_initial_children_isValid = false;

    m_master_brand_isSet = false;
    m_master_brand_isValid = false;

    m_related_links_isSet = false;
    m_related_links_isValid = false;

    m_short_title_isSet = false;
    m_short_title_isValid = false;

    m_stacked_isSet = false;
    m_stacked_isValid = false;

    m_synopses_isSet = false;
    m_synopses_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIGroup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGroup::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_episode_sort_direction_isValid = ::OpenAPI::fromJsonValue(m_episode_sort_direction, json[QString("episode_sort_direction")]);
    m_episode_sort_direction_isSet = !json[QString("episode_sort_direction")].isNull() && m_episode_sort_direction_isValid;

    m_group_type_isValid = ::OpenAPI::fromJsonValue(m_group_type, json[QString("group_type")]);
    m_group_type_isSet = !json[QString("group_type")].isNull() && m_group_type_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("images")]);
    m_images_isSet = !json[QString("images")].isNull() && m_images_isValid;

    m_initial_children_isValid = ::OpenAPI::fromJsonValue(m_initial_children, json[QString("initial_children")]);
    m_initial_children_isSet = !json[QString("initial_children")].isNull() && m_initial_children_isValid;

    m_master_brand_isValid = ::OpenAPI::fromJsonValue(m_master_brand, json[QString("master_brand")]);
    m_master_brand_isSet = !json[QString("master_brand")].isNull() && m_master_brand_isValid;

    m_related_links_isValid = ::OpenAPI::fromJsonValue(m_related_links, json[QString("related_links")]);
    m_related_links_isSet = !json[QString("related_links")].isNull() && m_related_links_isValid;

    m_short_title_isValid = ::OpenAPI::fromJsonValue(m_short_title, json[QString("short_title")]);
    m_short_title_isSet = !json[QString("short_title")].isNull() && m_short_title_isValid;

    m_stacked_isValid = ::OpenAPI::fromJsonValue(m_stacked, json[QString("stacked")]);
    m_stacked_isSet = !json[QString("stacked")].isNull() && m_stacked_isValid;

    m_synopses_isValid = ::OpenAPI::fromJsonValue(m_synopses, json[QString("synopses")]);
    m_synopses_isSet = !json[QString("synopses")].isNull() && m_synopses_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIGroup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGroup::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_episode_sort_direction_isSet) {
        obj.insert(QString("episode_sort_direction"), ::OpenAPI::toJsonValue(m_episode_sort_direction));
    }
    if (m_group_type_isSet) {
        obj.insert(QString("group_type"), ::OpenAPI::toJsonValue(m_group_type));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_images.isSet()) {
        obj.insert(QString("images"), ::OpenAPI::toJsonValue(m_images));
    }
    if (m_initial_children.size() > 0) {
        obj.insert(QString("initial_children"), ::OpenAPI::toJsonValue(m_initial_children));
    }
    if (m_master_brand.isSet()) {
        obj.insert(QString("master_brand"), ::OpenAPI::toJsonValue(m_master_brand));
    }
    if (m_related_links.size() > 0) {
        obj.insert(QString("related_links"), ::OpenAPI::toJsonValue(m_related_links));
    }
    if (m_short_title_isSet) {
        obj.insert(QString("short_title"), ::OpenAPI::toJsonValue(m_short_title));
    }
    if (m_stacked_isSet) {
        obj.insert(QString("stacked"), ::OpenAPI::toJsonValue(m_stacked));
    }
    if (m_synopses.isSet()) {
        obj.insert(QString("synopses"), ::OpenAPI::toJsonValue(m_synopses));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

double OAIGroup::getCount() const {
    return m_count;
}
void OAIGroup::setCount(const double &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIGroup::is_count_Set() const{
    return m_count_isSet;
}

bool OAIGroup::is_count_Valid() const{
    return m_count_isValid;
}

QString OAIGroup::getEpisodeSortDirection() const {
    return m_episode_sort_direction;
}
void OAIGroup::setEpisodeSortDirection(const QString &episode_sort_direction) {
    m_episode_sort_direction = episode_sort_direction;
    m_episode_sort_direction_isSet = true;
}

bool OAIGroup::is_episode_sort_direction_Set() const{
    return m_episode_sort_direction_isSet;
}

bool OAIGroup::is_episode_sort_direction_Valid() const{
    return m_episode_sort_direction_isValid;
}

QString OAIGroup::getGroupType() const {
    return m_group_type;
}
void OAIGroup::setGroupType(const QString &group_type) {
    m_group_type = group_type;
    m_group_type_isSet = true;
}

bool OAIGroup::is_group_type_Set() const{
    return m_group_type_isSet;
}

bool OAIGroup::is_group_type_Valid() const{
    return m_group_type_isValid;
}

QString OAIGroup::getId() const {
    return m_id;
}
void OAIGroup::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGroup::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGroup::is_id_Valid() const{
    return m_id_isValid;
}

OAIGroup_images OAIGroup::getImages() const {
    return m_images;
}
void OAIGroup::setImages(const OAIGroup_images &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAIGroup::is_images_Set() const{
    return m_images_isSet;
}

bool OAIGroup::is_images_Valid() const{
    return m_images_isValid;
}

QList<OAIGroup_initial_children_inner> OAIGroup::getInitialChildren() const {
    return m_initial_children;
}
void OAIGroup::setInitialChildren(const QList<OAIGroup_initial_children_inner> &initial_children) {
    m_initial_children = initial_children;
    m_initial_children_isSet = true;
}

bool OAIGroup::is_initial_children_Set() const{
    return m_initial_children_isSet;
}

bool OAIGroup::is_initial_children_Valid() const{
    return m_initial_children_isValid;
}

OAIMaster_brand OAIGroup::getMasterBrand() const {
    return m_master_brand;
}
void OAIGroup::setMasterBrand(const OAIMaster_brand &master_brand) {
    m_master_brand = master_brand;
    m_master_brand_isSet = true;
}

bool OAIGroup::is_master_brand_Set() const{
    return m_master_brand_isSet;
}

bool OAIGroup::is_master_brand_Valid() const{
    return m_master_brand_isValid;
}

QList<OAIGroup_related_links_inner> OAIGroup::getRelatedLinks() const {
    return m_related_links;
}
void OAIGroup::setRelatedLinks(const QList<OAIGroup_related_links_inner> &related_links) {
    m_related_links = related_links;
    m_related_links_isSet = true;
}

bool OAIGroup::is_related_links_Set() const{
    return m_related_links_isSet;
}

bool OAIGroup::is_related_links_Valid() const{
    return m_related_links_isValid;
}

QString OAIGroup::getShortTitle() const {
    return m_short_title;
}
void OAIGroup::setShortTitle(const QString &short_title) {
    m_short_title = short_title;
    m_short_title_isSet = true;
}

bool OAIGroup::is_short_title_Set() const{
    return m_short_title_isSet;
}

bool OAIGroup::is_short_title_Valid() const{
    return m_short_title_isValid;
}

bool OAIGroup::isStacked() const {
    return m_stacked;
}
void OAIGroup::setStacked(const bool &stacked) {
    m_stacked = stacked;
    m_stacked_isSet = true;
}

bool OAIGroup::is_stacked_Set() const{
    return m_stacked_isSet;
}

bool OAIGroup::is_stacked_Valid() const{
    return m_stacked_isValid;
}

OAIClip_versions_inner_guidance_text OAIGroup::getSynopses() const {
    return m_synopses;
}
void OAIGroup::setSynopses(const OAIClip_versions_inner_guidance_text &synopses) {
    m_synopses = synopses;
    m_synopses_isSet = true;
}

bool OAIGroup::is_synopses_Set() const{
    return m_synopses_isSet;
}

bool OAIGroup::is_synopses_Valid() const{
    return m_synopses_isValid;
}

QString OAIGroup::getTitle() const {
    return m_title;
}
void OAIGroup::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIGroup::is_title_Set() const{
    return m_title_isSet;
}

bool OAIGroup::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIGroup::getType() const {
    return m_type;
}
void OAIGroup::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGroup::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGroup::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIGroup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_episode_sort_direction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_images.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_initial_children.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_brand.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stacked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_synopses.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGroup::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
