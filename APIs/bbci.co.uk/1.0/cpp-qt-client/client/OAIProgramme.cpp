/**
 * BBC iPlayer Business Layer
 * The definitive iPlayer API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: ibl-team@lists.forge.bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProgramme.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProgramme::OAIProgramme(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProgramme::OAIProgramme() {
    this->initializeModel();
}

OAIProgramme::~OAIProgramme() {}

void OAIProgramme::initializeModel() {

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_count_isSet = false;
    m_count_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_images_isSet = false;
    m_images_isValid = false;

    m_initial_children_isSet = false;
    m_initial_children_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_lexical_sort_letter_isSet = false;
    m_lexical_sort_letter_isValid = false;

    m_master_brand_isSet = false;
    m_master_brand_isValid = false;

    m_programme_type_isSet = false;
    m_programme_type_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_synopses_isSet = false;
    m_synopses_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_tleo_type_isSet = false;
    m_tleo_type_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIProgramme::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProgramme::fromJsonObject(QJsonObject json) {

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("categories")]);
    m_categories_isSet = !json[QString("categories")].isNull() && m_categories_isValid;

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("images")]);
    m_images_isSet = !json[QString("images")].isNull() && m_images_isValid;

    m_initial_children_isValid = ::OpenAPI::fromJsonValue(m_initial_children, json[QString("initial_children")]);
    m_initial_children_isSet = !json[QString("initial_children")].isNull() && m_initial_children_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_lexical_sort_letter_isValid = ::OpenAPI::fromJsonValue(m_lexical_sort_letter, json[QString("lexical_sort_letter")]);
    m_lexical_sort_letter_isSet = !json[QString("lexical_sort_letter")].isNull() && m_lexical_sort_letter_isValid;

    m_master_brand_isValid = ::OpenAPI::fromJsonValue(m_master_brand, json[QString("master_brand")]);
    m_master_brand_isSet = !json[QString("master_brand")].isNull() && m_master_brand_isValid;

    m_programme_type_isValid = ::OpenAPI::fromJsonValue(m_programme_type, json[QString("programme_type")]);
    m_programme_type_isSet = !json[QString("programme_type")].isNull() && m_programme_type_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_synopses_isValid = ::OpenAPI::fromJsonValue(m_synopses, json[QString("synopses")]);
    m_synopses_isSet = !json[QString("synopses")].isNull() && m_synopses_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_tleo_type_isValid = ::OpenAPI::fromJsonValue(m_tleo_type, json[QString("tleo_type")]);
    m_tleo_type_isSet = !json[QString("tleo_type")].isNull() && m_tleo_type_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIProgramme::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProgramme::asJsonObject() const {
    QJsonObject obj;
    if (m_categories.size() > 0) {
        obj.insert(QString("categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_images.isSet()) {
        obj.insert(QString("images"), ::OpenAPI::toJsonValue(m_images));
    }
    if (m_initial_children.size() > 0) {
        obj.insert(QString("initial_children"), ::OpenAPI::toJsonValue(m_initial_children));
    }
    if (m_labels.isSet()) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_lexical_sort_letter_isSet) {
        obj.insert(QString("lexical_sort_letter"), ::OpenAPI::toJsonValue(m_lexical_sort_letter));
    }
    if (m_master_brand.isSet()) {
        obj.insert(QString("master_brand"), ::OpenAPI::toJsonValue(m_master_brand));
    }
    if (m_programme_type_isSet) {
        obj.insert(QString("programme_type"), ::OpenAPI::toJsonValue(m_programme_type));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_synopses.isSet()) {
        obj.insert(QString("synopses"), ::OpenAPI::toJsonValue(m_synopses));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_tleo_type_isSet) {
        obj.insert(QString("tleo_type"), ::OpenAPI::toJsonValue(m_tleo_type));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<QString> OAIProgramme::getCategories() const {
    return m_categories;
}
void OAIProgramme::setCategories(const QList<QString> &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAIProgramme::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAIProgramme::is_categories_Valid() const{
    return m_categories_isValid;
}

double OAIProgramme::getCount() const {
    return m_count;
}
void OAIProgramme::setCount(const double &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIProgramme::is_count_Set() const{
    return m_count_isSet;
}

bool OAIProgramme::is_count_Valid() const{
    return m_count_isValid;
}

QString OAIProgramme::getId() const {
    return m_id;
}
void OAIProgramme::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIProgramme::is_id_Set() const{
    return m_id_isSet;
}

bool OAIProgramme::is_id_Valid() const{
    return m_id_isValid;
}

OAIClip_images OAIProgramme::getImages() const {
    return m_images;
}
void OAIProgramme::setImages(const OAIClip_images &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAIProgramme::is_images_Set() const{
    return m_images_isSet;
}

bool OAIProgramme::is_images_Valid() const{
    return m_images_isValid;
}

QList<OAIEpisode> OAIProgramme::getInitialChildren() const {
    return m_initial_children;
}
void OAIProgramme::setInitialChildren(const QList<OAIEpisode> &initial_children) {
    m_initial_children = initial_children;
    m_initial_children_isSet = true;
}

bool OAIProgramme::is_initial_children_Set() const{
    return m_initial_children_isSet;
}

bool OAIProgramme::is_initial_children_Valid() const{
    return m_initial_children_isValid;
}

OAIProgramme_labels OAIProgramme::getLabels() const {
    return m_labels;
}
void OAIProgramme::setLabels(const OAIProgramme_labels &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIProgramme::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIProgramme::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIProgramme::getLexicalSortLetter() const {
    return m_lexical_sort_letter;
}
void OAIProgramme::setLexicalSortLetter(const QString &lexical_sort_letter) {
    m_lexical_sort_letter = lexical_sort_letter;
    m_lexical_sort_letter_isSet = true;
}

bool OAIProgramme::is_lexical_sort_letter_Set() const{
    return m_lexical_sort_letter_isSet;
}

bool OAIProgramme::is_lexical_sort_letter_Valid() const{
    return m_lexical_sort_letter_isValid;
}

OAIMaster_brand OAIProgramme::getMasterBrand() const {
    return m_master_brand;
}
void OAIProgramme::setMasterBrand(const OAIMaster_brand &master_brand) {
    m_master_brand = master_brand;
    m_master_brand_isSet = true;
}

bool OAIProgramme::is_master_brand_Set() const{
    return m_master_brand_isSet;
}

bool OAIProgramme::is_master_brand_Valid() const{
    return m_master_brand_isValid;
}

QString OAIProgramme::getProgrammeType() const {
    return m_programme_type;
}
void OAIProgramme::setProgrammeType(const QString &programme_type) {
    m_programme_type = programme_type;
    m_programme_type_isSet = true;
}

bool OAIProgramme::is_programme_type_Set() const{
    return m_programme_type_isSet;
}

bool OAIProgramme::is_programme_type_Valid() const{
    return m_programme_type_isValid;
}

QString OAIProgramme::getStatus() const {
    return m_status;
}
void OAIProgramme::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIProgramme::is_status_Set() const{
    return m_status_isSet;
}

bool OAIProgramme::is_status_Valid() const{
    return m_status_isValid;
}

OAIClip_versions_inner_guidance_text OAIProgramme::getSynopses() const {
    return m_synopses;
}
void OAIProgramme::setSynopses(const OAIClip_versions_inner_guidance_text &synopses) {
    m_synopses = synopses;
    m_synopses_isSet = true;
}

bool OAIProgramme::is_synopses_Set() const{
    return m_synopses_isSet;
}

bool OAIProgramme::is_synopses_Valid() const{
    return m_synopses_isValid;
}

QString OAIProgramme::getTitle() const {
    return m_title;
}
void OAIProgramme::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIProgramme::is_title_Set() const{
    return m_title_isSet;
}

bool OAIProgramme::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIProgramme::getTleoType() const {
    return m_tleo_type;
}
void OAIProgramme::setTleoType(const QString &tleo_type) {
    m_tleo_type = tleo_type;
    m_tleo_type_isSet = true;
}

bool OAIProgramme::is_tleo_type_Set() const{
    return m_tleo_type_isSet;
}

bool OAIProgramme::is_tleo_type_Valid() const{
    return m_tleo_type_isValid;
}

QString OAIProgramme::getType() const {
    return m_type;
}
void OAIProgramme::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIProgramme::is_type_Set() const{
    return m_type_isSet;
}

bool OAIProgramme::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIProgramme::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_images.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_initial_children.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lexical_sort_letter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_brand.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_programme_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_synopses.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tleo_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProgramme::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_categories_isValid && m_count_isValid && m_id_isValid && m_images_isValid && m_initial_children_isValid && m_lexical_sort_letter_isValid && m_master_brand_isValid && m_status_isValid && m_synopses_isValid && m_title_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
