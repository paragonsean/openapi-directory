/**
 * BBC iPlayer Business Layer
 * The definitive iPlayer API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: ibl-team@lists.forge.bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIProgramme.h
 *
 * 
 */

#ifndef OAIProgramme_H
#define OAIProgramme_H

#include <QJsonObject>

#include "OAIClip_images.h"
#include "OAIClip_versions_inner_guidance_text.h"
#include "OAIEpisode.h"
#include "OAIMaster_brand.h"
#include "OAIProgramme_labels.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIClip_images;
class OAIEpisode;
class OAIProgramme_labels;
class OAIMaster_brand;
class OAIClip_versions_inner_guidance_text;

class OAIProgramme : public OAIObject {
public:
    OAIProgramme();
    OAIProgramme(QString json);
    ~OAIProgramme() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getCategories() const;
    void setCategories(const QList<QString> &categories);
    bool is_categories_Set() const;
    bool is_categories_Valid() const;

    double getCount() const;
    void setCount(const double &count);
    bool is_count_Set() const;
    bool is_count_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    OAIClip_images getImages() const;
    void setImages(const OAIClip_images &images);
    bool is_images_Set() const;
    bool is_images_Valid() const;

    QList<OAIEpisode> getInitialChildren() const;
    void setInitialChildren(const QList<OAIEpisode> &initial_children);
    bool is_initial_children_Set() const;
    bool is_initial_children_Valid() const;

    OAIProgramme_labels getLabels() const;
    void setLabels(const OAIProgramme_labels &labels);
    bool is_labels_Set() const;
    bool is_labels_Valid() const;

    QString getLexicalSortLetter() const;
    void setLexicalSortLetter(const QString &lexical_sort_letter);
    bool is_lexical_sort_letter_Set() const;
    bool is_lexical_sort_letter_Valid() const;

    OAIMaster_brand getMasterBrand() const;
    void setMasterBrand(const OAIMaster_brand &master_brand);
    bool is_master_brand_Set() const;
    bool is_master_brand_Valid() const;

    QString getProgrammeType() const;
    void setProgrammeType(const QString &programme_type);
    bool is_programme_type_Set() const;
    bool is_programme_type_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    OAIClip_versions_inner_guidance_text getSynopses() const;
    void setSynopses(const OAIClip_versions_inner_guidance_text &synopses);
    bool is_synopses_Set() const;
    bool is_synopses_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    QString getTleoType() const;
    void setTleoType(const QString &tleo_type);
    bool is_tleo_type_Set() const;
    bool is_tleo_type_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_categories;
    bool m_categories_isSet;
    bool m_categories_isValid;

    double m_count;
    bool m_count_isSet;
    bool m_count_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    OAIClip_images m_images;
    bool m_images_isSet;
    bool m_images_isValid;

    QList<OAIEpisode> m_initial_children;
    bool m_initial_children_isSet;
    bool m_initial_children_isValid;

    OAIProgramme_labels m_labels;
    bool m_labels_isSet;
    bool m_labels_isValid;

    QString m_lexical_sort_letter;
    bool m_lexical_sort_letter_isSet;
    bool m_lexical_sort_letter_isValid;

    OAIMaster_brand m_master_brand;
    bool m_master_brand_isSet;
    bool m_master_brand_isValid;

    QString m_programme_type;
    bool m_programme_type_isSet;
    bool m_programme_type_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    OAIClip_versions_inner_guidance_text m_synopses;
    bool m_synopses_isSet;
    bool m_synopses_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;

    QString m_tleo_type;
    bool m_tleo_type_isSet;
    bool m_tleo_type_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIProgramme)

#endif // OAIProgramme_H
