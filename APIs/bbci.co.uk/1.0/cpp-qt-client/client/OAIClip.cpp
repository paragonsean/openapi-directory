/**
 * BBC iPlayer Business Layer
 * The definitive iPlayer API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: ibl-team@lists.forge.bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClip.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClip::OAIClip(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClip::OAIClip() {
    this->initializeModel();
}

OAIClip::~OAIClip() {}

void OAIClip::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_images_isSet = false;
    m_images_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_master_brand_isSet = false;
    m_master_brand_isValid = false;

    m_onward_journey_isSet = false;
    m_onward_journey_isValid = false;

    m_promotion_type_isSet = false;
    m_promotion_type_isValid = false;

    m_synopses_isSet = false;
    m_synopses_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_tleo_id_isSet = false;
    m_tleo_id_isValid = false;

    m_tleo_type_isSet = false;
    m_tleo_type_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_versions_isSet = false;
    m_versions_isValid = false;
}

void OAIClip::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClip::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("images")]);
    m_images_isSet = !json[QString("images")].isNull() && m_images_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_master_brand_isValid = ::OpenAPI::fromJsonValue(m_master_brand, json[QString("master_brand")]);
    m_master_brand_isSet = !json[QString("master_brand")].isNull() && m_master_brand_isValid;

    m_onward_journey_isValid = ::OpenAPI::fromJsonValue(m_onward_journey, json[QString("onward_journey")]);
    m_onward_journey_isSet = !json[QString("onward_journey")].isNull() && m_onward_journey_isValid;

    m_promotion_type_isValid = ::OpenAPI::fromJsonValue(m_promotion_type, json[QString("promotion_type")]);
    m_promotion_type_isSet = !json[QString("promotion_type")].isNull() && m_promotion_type_isValid;

    m_synopses_isValid = ::OpenAPI::fromJsonValue(m_synopses, json[QString("synopses")]);
    m_synopses_isSet = !json[QString("synopses")].isNull() && m_synopses_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_tleo_id_isValid = ::OpenAPI::fromJsonValue(m_tleo_id, json[QString("tleo_id")]);
    m_tleo_id_isSet = !json[QString("tleo_id")].isNull() && m_tleo_id_isValid;

    m_tleo_type_isValid = ::OpenAPI::fromJsonValue(m_tleo_type, json[QString("tleo_type")]);
    m_tleo_type_isSet = !json[QString("tleo_type")].isNull() && m_tleo_type_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_versions_isValid = ::OpenAPI::fromJsonValue(m_versions, json[QString("versions")]);
    m_versions_isSet = !json[QString("versions")].isNull() && m_versions_isValid;
}

QString OAIClip::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClip::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_images.isSet()) {
        obj.insert(QString("images"), ::OpenAPI::toJsonValue(m_images));
    }
    if (m_labels.isSet()) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_master_brand.isSet()) {
        obj.insert(QString("master_brand"), ::OpenAPI::toJsonValue(m_master_brand));
    }
    if (m_onward_journey.isSet()) {
        obj.insert(QString("onward_journey"), ::OpenAPI::toJsonValue(m_onward_journey));
    }
    if (m_promotion_type_isSet) {
        obj.insert(QString("promotion_type"), ::OpenAPI::toJsonValue(m_promotion_type));
    }
    if (m_synopses.isSet()) {
        obj.insert(QString("synopses"), ::OpenAPI::toJsonValue(m_synopses));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_tleo_id_isSet) {
        obj.insert(QString("tleo_id"), ::OpenAPI::toJsonValue(m_tleo_id));
    }
    if (m_tleo_type_isSet) {
        obj.insert(QString("tleo_type"), ::OpenAPI::toJsonValue(m_tleo_type));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_versions.size() > 0) {
        obj.insert(QString("versions"), ::OpenAPI::toJsonValue(m_versions));
    }
    return obj;
}

QString OAIClip::getId() const {
    return m_id;
}
void OAIClip::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIClip::is_id_Set() const{
    return m_id_isSet;
}

bool OAIClip::is_id_Valid() const{
    return m_id_isValid;
}

OAIClip_images OAIClip::getImages() const {
    return m_images;
}
void OAIClip::setImages(const OAIClip_images &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAIClip::is_images_Set() const{
    return m_images_isSet;
}

bool OAIClip::is_images_Valid() const{
    return m_images_isValid;
}

OAIClip_labels OAIClip::getLabels() const {
    return m_labels;
}
void OAIClip::setLabels(const OAIClip_labels &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIClip::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIClip::is_labels_Valid() const{
    return m_labels_isValid;
}

OAIMaster_brand OAIClip::getMasterBrand() const {
    return m_master_brand;
}
void OAIClip::setMasterBrand(const OAIMaster_brand &master_brand) {
    m_master_brand = master_brand;
    m_master_brand_isSet = true;
}

bool OAIClip::is_master_brand_Set() const{
    return m_master_brand_isSet;
}

bool OAIClip::is_master_brand_Valid() const{
    return m_master_brand_isValid;
}

OAIClip_onward_journey OAIClip::getOnwardJourney() const {
    return m_onward_journey;
}
void OAIClip::setOnwardJourney(const OAIClip_onward_journey &onward_journey) {
    m_onward_journey = onward_journey;
    m_onward_journey_isSet = true;
}

bool OAIClip::is_onward_journey_Set() const{
    return m_onward_journey_isSet;
}

bool OAIClip::is_onward_journey_Valid() const{
    return m_onward_journey_isValid;
}

QString OAIClip::getPromotionType() const {
    return m_promotion_type;
}
void OAIClip::setPromotionType(const QString &promotion_type) {
    m_promotion_type = promotion_type;
    m_promotion_type_isSet = true;
}

bool OAIClip::is_promotion_type_Set() const{
    return m_promotion_type_isSet;
}

bool OAIClip::is_promotion_type_Valid() const{
    return m_promotion_type_isValid;
}

OAIClip_synopses OAIClip::getSynopses() const {
    return m_synopses;
}
void OAIClip::setSynopses(const OAIClip_synopses &synopses) {
    m_synopses = synopses;
    m_synopses_isSet = true;
}

bool OAIClip::is_synopses_Set() const{
    return m_synopses_isSet;
}

bool OAIClip::is_synopses_Valid() const{
    return m_synopses_isValid;
}

QString OAIClip::getTitle() const {
    return m_title;
}
void OAIClip::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIClip::is_title_Set() const{
    return m_title_isSet;
}

bool OAIClip::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIClip::getTleoId() const {
    return m_tleo_id;
}
void OAIClip::setTleoId(const QString &tleo_id) {
    m_tleo_id = tleo_id;
    m_tleo_id_isSet = true;
}

bool OAIClip::is_tleo_id_Set() const{
    return m_tleo_id_isSet;
}

bool OAIClip::is_tleo_id_Valid() const{
    return m_tleo_id_isValid;
}

QString OAIClip::getTleoType() const {
    return m_tleo_type;
}
void OAIClip::setTleoType(const QString &tleo_type) {
    m_tleo_type = tleo_type;
    m_tleo_type_isSet = true;
}

bool OAIClip::is_tleo_type_Set() const{
    return m_tleo_type_isSet;
}

bool OAIClip::is_tleo_type_Valid() const{
    return m_tleo_type_isValid;
}

QString OAIClip::getType() const {
    return m_type;
}
void OAIClip::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIClip::is_type_Set() const{
    return m_type_isSet;
}

bool OAIClip::is_type_Valid() const{
    return m_type_isValid;
}

QList<OAIClip_versions_inner> OAIClip::getVersions() const {
    return m_versions;
}
void OAIClip::setVersions(const QList<OAIClip_versions_inner> &versions) {
    m_versions = versions;
    m_versions_isSet = true;
}

bool OAIClip::is_versions_Set() const{
    return m_versions_isSet;
}

bool OAIClip::is_versions_Valid() const{
    return m_versions_isValid;
}

bool OAIClip::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_images.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_brand.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_onward_journey.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_promotion_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_synopses.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tleo_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tleo_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_versions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClip::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_images_isValid && m_master_brand_isValid && m_synopses_isValid && m_title_isValid && m_tleo_id_isValid && m_type_isValid && m_versions_isValid && true;
}

} // namespace OpenAPI
