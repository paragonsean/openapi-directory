/**
 * BBC iPlayer Business Layer
 * The definitive iPlayer API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: ibl-team@lists.forge.bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEpisode_next_broadcast.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEpisode_next_broadcast::OAIEpisode_next_broadcast(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEpisode_next_broadcast::OAIEpisode_next_broadcast() {
    this->initializeModel();
}

OAIEpisode_next_broadcast::~OAIEpisode_next_broadcast() {}

void OAIEpisode_next_broadcast::initializeModel() {

    m_channel_title_isSet = false;
    m_channel_title_isValid = false;

    m_scheduled_start_isSet = false;
    m_scheduled_start_isValid = false;
}

void OAIEpisode_next_broadcast::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEpisode_next_broadcast::fromJsonObject(QJsonObject json) {

    m_channel_title_isValid = ::OpenAPI::fromJsonValue(m_channel_title, json[QString("channel_title")]);
    m_channel_title_isSet = !json[QString("channel_title")].isNull() && m_channel_title_isValid;

    m_scheduled_start_isValid = ::OpenAPI::fromJsonValue(m_scheduled_start, json[QString("scheduled_start")]);
    m_scheduled_start_isSet = !json[QString("scheduled_start")].isNull() && m_scheduled_start_isValid;
}

QString OAIEpisode_next_broadcast::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEpisode_next_broadcast::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_title_isSet) {
        obj.insert(QString("channel_title"), ::OpenAPI::toJsonValue(m_channel_title));
    }
    if (m_scheduled_start_isSet) {
        obj.insert(QString("scheduled_start"), ::OpenAPI::toJsonValue(m_scheduled_start));
    }
    return obj;
}

QString OAIEpisode_next_broadcast::getChannelTitle() const {
    return m_channel_title;
}
void OAIEpisode_next_broadcast::setChannelTitle(const QString &channel_title) {
    m_channel_title = channel_title;
    m_channel_title_isSet = true;
}

bool OAIEpisode_next_broadcast::is_channel_title_Set() const{
    return m_channel_title_isSet;
}

bool OAIEpisode_next_broadcast::is_channel_title_Valid() const{
    return m_channel_title_isValid;
}

QString OAIEpisode_next_broadcast::getScheduledStart() const {
    return m_scheduled_start;
}
void OAIEpisode_next_broadcast::setScheduledStart(const QString &scheduled_start) {
    m_scheduled_start = scheduled_start;
    m_scheduled_start_isSet = true;
}

bool OAIEpisode_next_broadcast::is_scheduled_start_Set() const{
    return m_scheduled_start_isSet;
}

bool OAIEpisode_next_broadcast::is_scheduled_start_Valid() const{
    return m_scheduled_start_isValid;
}

bool OAIEpisode_next_broadcast::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_start_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEpisode_next_broadcast::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_channel_title_isValid && m_scheduled_start_isValid && true;
}

} // namespace OpenAPI
