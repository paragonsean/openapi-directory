/**
 * BBC iPlayer Business Layer
 * The definitive iPlayer API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: ibl-team@lists.forge.bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEpisode_versions_inner_anyOf_store_session.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEpisode_versions_inner_anyOf_store_session::OAIEpisode_versions_inner_anyOf_store_session(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEpisode_versions_inner_anyOf_store_session::OAIEpisode_versions_inner_anyOf_store_session() {
    this->initializeModel();
}

OAIEpisode_versions_inner_anyOf_store_session::~OAIEpisode_versions_inner_anyOf_store_session() {}

void OAIEpisode_versions_inner_anyOf_store_session::initializeModel() {

    m_ceiling_isSet = false;
    m_ceiling_isValid = false;

    m_stats_isSet = false;
    m_stats_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;
}

void OAIEpisode_versions_inner_anyOf_store_session::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEpisode_versions_inner_anyOf_store_session::fromJsonObject(QJsonObject json) {

    m_ceiling_isValid = ::OpenAPI::fromJsonValue(m_ceiling, json[QString("ceiling")]);
    m_ceiling_isSet = !json[QString("ceiling")].isNull() && m_ceiling_isValid;

    m_stats_isValid = ::OpenAPI::fromJsonValue(m_stats, json[QString("stats")]);
    m_stats_isSet = !json[QString("stats")].isNull() && m_stats_isValid;

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;
}

QString OAIEpisode_versions_inner_anyOf_store_session::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEpisode_versions_inner_anyOf_store_session::asJsonObject() const {
    QJsonObject obj;
    if (m_ceiling_isSet) {
        obj.insert(QString("ceiling"), ::OpenAPI::toJsonValue(m_ceiling));
    }
    if (m_stats.isSet()) {
        obj.insert(QString("stats"), ::OpenAPI::toJsonValue(m_stats));
    }
    if (m_token_isSet) {
        obj.insert(QString("token"), ::OpenAPI::toJsonValue(m_token));
    }
    return obj;
}

double OAIEpisode_versions_inner_anyOf_store_session::getCeiling() const {
    return m_ceiling;
}
void OAIEpisode_versions_inner_anyOf_store_session::setCeiling(const double &ceiling) {
    m_ceiling = ceiling;
    m_ceiling_isSet = true;
}

bool OAIEpisode_versions_inner_anyOf_store_session::is_ceiling_Set() const{
    return m_ceiling_isSet;
}

bool OAIEpisode_versions_inner_anyOf_store_session::is_ceiling_Valid() const{
    return m_ceiling_isValid;
}

OAIEpisode_versions_inner_anyOf_store_session_stats OAIEpisode_versions_inner_anyOf_store_session::getStats() const {
    return m_stats;
}
void OAIEpisode_versions_inner_anyOf_store_session::setStats(const OAIEpisode_versions_inner_anyOf_store_session_stats &stats) {
    m_stats = stats;
    m_stats_isSet = true;
}

bool OAIEpisode_versions_inner_anyOf_store_session::is_stats_Set() const{
    return m_stats_isSet;
}

bool OAIEpisode_versions_inner_anyOf_store_session::is_stats_Valid() const{
    return m_stats_isValid;
}

QString OAIEpisode_versions_inner_anyOf_store_session::getToken() const {
    return m_token;
}
void OAIEpisode_versions_inner_anyOf_store_session::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAIEpisode_versions_inner_anyOf_store_session::is_token_Set() const{
    return m_token_isSet;
}

bool OAIEpisode_versions_inner_anyOf_store_session::is_token_Valid() const{
    return m_token_isValid;
}

bool OAIEpisode_versions_inner_anyOf_store_session::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ceiling_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stats.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEpisode_versions_inner_anyOf_store_session::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_stats_isValid && m_token_isValid && true;
}

} // namespace OpenAPI
