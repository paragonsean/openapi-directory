/**
 * BBC iPlayer Business Layer
 * The definitive iPlayer API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: ibl-team@lists.forge.bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBroadcast.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBroadcast::OAIBroadcast(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBroadcast::OAIBroadcast() {
    this->initializeModel();
}

OAIBroadcast::~OAIBroadcast() {}

void OAIBroadcast::initializeModel() {

    m_available_on_hd_service_isSet = false;
    m_available_on_hd_service_isValid = false;

    m_blanked_isSet = false;
    m_blanked_isValid = false;

    m_channel_title_isSet = false;
    m_channel_title_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_episode_isSet = false;
    m_episode_isValid = false;

    m_episode_id_isSet = false;
    m_episode_id_isValid = false;

    m_events_isSet = false;
    m_events_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_repeat_isSet = false;
    m_repeat_isValid = false;

    m_scheduled_end_isSet = false;
    m_scheduled_end_isValid = false;

    m_scheduled_start_isSet = false;
    m_scheduled_start_isValid = false;

    m_service_id_isSet = false;
    m_service_id_isValid = false;

    m_transmission_end_isSet = false;
    m_transmission_end_isValid = false;

    m_transmission_start_isSet = false;
    m_transmission_start_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_version_id_isSet = false;
    m_version_id_isValid = false;
}

void OAIBroadcast::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBroadcast::fromJsonObject(QJsonObject json) {

    m_available_on_hd_service_isValid = ::OpenAPI::fromJsonValue(m_available_on_hd_service, json[QString("available_on_hd_service")]);
    m_available_on_hd_service_isSet = !json[QString("available_on_hd_service")].isNull() && m_available_on_hd_service_isValid;

    m_blanked_isValid = ::OpenAPI::fromJsonValue(m_blanked, json[QString("blanked")]);
    m_blanked_isSet = !json[QString("blanked")].isNull() && m_blanked_isValid;

    m_channel_title_isValid = ::OpenAPI::fromJsonValue(m_channel_title, json[QString("channel_title")]);
    m_channel_title_isSet = !json[QString("channel_title")].isNull() && m_channel_title_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_episode_isValid = ::OpenAPI::fromJsonValue(m_episode, json[QString("episode")]);
    m_episode_isSet = !json[QString("episode")].isNull() && m_episode_isValid;

    m_episode_id_isValid = ::OpenAPI::fromJsonValue(m_episode_id, json[QString("episode_id")]);
    m_episode_id_isSet = !json[QString("episode_id")].isNull() && m_episode_id_isValid;

    m_events_isValid = ::OpenAPI::fromJsonValue(m_events, json[QString("events")]);
    m_events_isSet = !json[QString("events")].isNull() && m_events_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_repeat_isValid = ::OpenAPI::fromJsonValue(m_repeat, json[QString("repeat")]);
    m_repeat_isSet = !json[QString("repeat")].isNull() && m_repeat_isValid;

    m_scheduled_end_isValid = ::OpenAPI::fromJsonValue(m_scheduled_end, json[QString("scheduled_end")]);
    m_scheduled_end_isSet = !json[QString("scheduled_end")].isNull() && m_scheduled_end_isValid;

    m_scheduled_start_isValid = ::OpenAPI::fromJsonValue(m_scheduled_start, json[QString("scheduled_start")]);
    m_scheduled_start_isSet = !json[QString("scheduled_start")].isNull() && m_scheduled_start_isValid;

    m_service_id_isValid = ::OpenAPI::fromJsonValue(m_service_id, json[QString("service_id")]);
    m_service_id_isSet = !json[QString("service_id")].isNull() && m_service_id_isValid;

    m_transmission_end_isValid = ::OpenAPI::fromJsonValue(m_transmission_end, json[QString("transmission_end")]);
    m_transmission_end_isSet = !json[QString("transmission_end")].isNull() && m_transmission_end_isValid;

    m_transmission_start_isValid = ::OpenAPI::fromJsonValue(m_transmission_start, json[QString("transmission_start")]);
    m_transmission_start_isSet = !json[QString("transmission_start")].isNull() && m_transmission_start_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_version_id_isValid = ::OpenAPI::fromJsonValue(m_version_id, json[QString("version_id")]);
    m_version_id_isSet = !json[QString("version_id")].isNull() && m_version_id_isValid;
}

QString OAIBroadcast::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBroadcast::asJsonObject() const {
    QJsonObject obj;
    if (m_available_on_hd_service_isSet) {
        obj.insert(QString("available_on_hd_service"), ::OpenAPI::toJsonValue(m_available_on_hd_service));
    }
    if (m_blanked_isSet) {
        obj.insert(QString("blanked"), ::OpenAPI::toJsonValue(m_blanked));
    }
    if (m_channel_title_isSet) {
        obj.insert(QString("channel_title"), ::OpenAPI::toJsonValue(m_channel_title));
    }
    if (m_duration.isSet()) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_episode.isSet()) {
        obj.insert(QString("episode"), ::OpenAPI::toJsonValue(m_episode));
    }
    if (m_episode_id_isSet) {
        obj.insert(QString("episode_id"), ::OpenAPI::toJsonValue(m_episode_id));
    }
    if (m_events.size() > 0) {
        obj.insert(QString("events"), ::OpenAPI::toJsonValue(m_events));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_repeat_isSet) {
        obj.insert(QString("repeat"), ::OpenAPI::toJsonValue(m_repeat));
    }
    if (m_scheduled_end_isSet) {
        obj.insert(QString("scheduled_end"), ::OpenAPI::toJsonValue(m_scheduled_end));
    }
    if (m_scheduled_start_isSet) {
        obj.insert(QString("scheduled_start"), ::OpenAPI::toJsonValue(m_scheduled_start));
    }
    if (m_service_id_isSet) {
        obj.insert(QString("service_id"), ::OpenAPI::toJsonValue(m_service_id));
    }
    if (m_transmission_end_isSet) {
        obj.insert(QString("transmission_end"), ::OpenAPI::toJsonValue(m_transmission_end));
    }
    if (m_transmission_start_isSet) {
        obj.insert(QString("transmission_start"), ::OpenAPI::toJsonValue(m_transmission_start));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_version_id_isSet) {
        obj.insert(QString("version_id"), ::OpenAPI::toJsonValue(m_version_id));
    }
    return obj;
}

QString OAIBroadcast::getAvailableOnHdService() const {
    return m_available_on_hd_service;
}
void OAIBroadcast::setAvailableOnHdService(const QString &available_on_hd_service) {
    m_available_on_hd_service = available_on_hd_service;
    m_available_on_hd_service_isSet = true;
}

bool OAIBroadcast::is_available_on_hd_service_Set() const{
    return m_available_on_hd_service_isSet;
}

bool OAIBroadcast::is_available_on_hd_service_Valid() const{
    return m_available_on_hd_service_isValid;
}

bool OAIBroadcast::isBlanked() const {
    return m_blanked;
}
void OAIBroadcast::setBlanked(const bool &blanked) {
    m_blanked = blanked;
    m_blanked_isSet = true;
}

bool OAIBroadcast::is_blanked_Set() const{
    return m_blanked_isSet;
}

bool OAIBroadcast::is_blanked_Valid() const{
    return m_blanked_isValid;
}

QString OAIBroadcast::getChannelTitle() const {
    return m_channel_title;
}
void OAIBroadcast::setChannelTitle(const QString &channel_title) {
    m_channel_title = channel_title;
    m_channel_title_isSet = true;
}

bool OAIBroadcast::is_channel_title_Set() const{
    return m_channel_title_isSet;
}

bool OAIBroadcast::is_channel_title_Valid() const{
    return m_channel_title_isValid;
}

OAIBroadcast_duration OAIBroadcast::getDuration() const {
    return m_duration;
}
void OAIBroadcast::setDuration(const OAIBroadcast_duration &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIBroadcast::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIBroadcast::is_duration_Valid() const{
    return m_duration_isValid;
}

OAIEpisode OAIBroadcast::getEpisode() const {
    return m_episode;
}
void OAIBroadcast::setEpisode(const OAIEpisode &episode) {
    m_episode = episode;
    m_episode_isSet = true;
}

bool OAIBroadcast::is_episode_Set() const{
    return m_episode_isSet;
}

bool OAIBroadcast::is_episode_Valid() const{
    return m_episode_isValid;
}

QString OAIBroadcast::getEpisodeId() const {
    return m_episode_id;
}
void OAIBroadcast::setEpisodeId(const QString &episode_id) {
    m_episode_id = episode_id;
    m_episode_id_isSet = true;
}

bool OAIBroadcast::is_episode_id_Set() const{
    return m_episode_id_isSet;
}

bool OAIBroadcast::is_episode_id_Valid() const{
    return m_episode_id_isValid;
}

QList<OAIBroadcast_events_inner> OAIBroadcast::getEvents() const {
    return m_events;
}
void OAIBroadcast::setEvents(const QList<OAIBroadcast_events_inner> &events) {
    m_events = events;
    m_events_isSet = true;
}

bool OAIBroadcast::is_events_Set() const{
    return m_events_isSet;
}

bool OAIBroadcast::is_events_Valid() const{
    return m_events_isValid;
}

QString OAIBroadcast::getId() const {
    return m_id;
}
void OAIBroadcast::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIBroadcast::is_id_Set() const{
    return m_id_isSet;
}

bool OAIBroadcast::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIBroadcast::isRepeat() const {
    return m_repeat;
}
void OAIBroadcast::setRepeat(const bool &repeat) {
    m_repeat = repeat;
    m_repeat_isSet = true;
}

bool OAIBroadcast::is_repeat_Set() const{
    return m_repeat_isSet;
}

bool OAIBroadcast::is_repeat_Valid() const{
    return m_repeat_isValid;
}

QString OAIBroadcast::getScheduledEnd() const {
    return m_scheduled_end;
}
void OAIBroadcast::setScheduledEnd(const QString &scheduled_end) {
    m_scheduled_end = scheduled_end;
    m_scheduled_end_isSet = true;
}

bool OAIBroadcast::is_scheduled_end_Set() const{
    return m_scheduled_end_isSet;
}

bool OAIBroadcast::is_scheduled_end_Valid() const{
    return m_scheduled_end_isValid;
}

QString OAIBroadcast::getScheduledStart() const {
    return m_scheduled_start;
}
void OAIBroadcast::setScheduledStart(const QString &scheduled_start) {
    m_scheduled_start = scheduled_start;
    m_scheduled_start_isSet = true;
}

bool OAIBroadcast::is_scheduled_start_Set() const{
    return m_scheduled_start_isSet;
}

bool OAIBroadcast::is_scheduled_start_Valid() const{
    return m_scheduled_start_isValid;
}

QString OAIBroadcast::getServiceId() const {
    return m_service_id;
}
void OAIBroadcast::setServiceId(const QString &service_id) {
    m_service_id = service_id;
    m_service_id_isSet = true;
}

bool OAIBroadcast::is_service_id_Set() const{
    return m_service_id_isSet;
}

bool OAIBroadcast::is_service_id_Valid() const{
    return m_service_id_isValid;
}

QString OAIBroadcast::getTransmissionEnd() const {
    return m_transmission_end;
}
void OAIBroadcast::setTransmissionEnd(const QString &transmission_end) {
    m_transmission_end = transmission_end;
    m_transmission_end_isSet = true;
}

bool OAIBroadcast::is_transmission_end_Set() const{
    return m_transmission_end_isSet;
}

bool OAIBroadcast::is_transmission_end_Valid() const{
    return m_transmission_end_isValid;
}

QString OAIBroadcast::getTransmissionStart() const {
    return m_transmission_start;
}
void OAIBroadcast::setTransmissionStart(const QString &transmission_start) {
    m_transmission_start = transmission_start;
    m_transmission_start_isSet = true;
}

bool OAIBroadcast::is_transmission_start_Set() const{
    return m_transmission_start_isSet;
}

bool OAIBroadcast::is_transmission_start_Valid() const{
    return m_transmission_start_isValid;
}

QString OAIBroadcast::getType() const {
    return m_type;
}
void OAIBroadcast::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIBroadcast::is_type_Set() const{
    return m_type_isSet;
}

bool OAIBroadcast::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIBroadcast::getVersionId() const {
    return m_version_id;
}
void OAIBroadcast::setVersionId(const QString &version_id) {
    m_version_id = version_id;
    m_version_id_isSet = true;
}

bool OAIBroadcast::is_version_id_Set() const{
    return m_version_id_isSet;
}

bool OAIBroadcast::is_version_id_Valid() const{
    return m_version_id_isValid;
}

bool OAIBroadcast::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_on_hd_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blanked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_episode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_episode_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repeat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transmission_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transmission_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBroadcast::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_blanked_isValid && m_episode_isValid && m_episode_id_isValid && m_id_isValid && m_repeat_isValid && m_scheduled_end_isValid && m_scheduled_start_isValid && m_service_id_isValid && m_type_isValid && m_version_id_isValid && true;
}

} // namespace OpenAPI
