/**
 * BBC iPlayer Business Layer
 * The definitive iPlayer API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: ibl-team@lists.forge.bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWatching.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWatching::OAIWatching(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWatching::OAIWatching() {
    this->initializeModel();
}

OAIWatching::~OAIWatching() {}

void OAIWatching::initializeModel() {

    m_episode_isSet = false;
    m_episode_isValid = false;

    m_has_next_isSet = false;
    m_has_next_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_programme_isSet = false;
    m_programme_isValid = false;

    m_progress_isSet = false;
    m_progress_isValid = false;

    m_remaining_isSet = false;
    m_remaining_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_urn_isSet = false;
    m_urn_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIWatching::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWatching::fromJsonObject(QJsonObject json) {

    m_episode_isValid = ::OpenAPI::fromJsonValue(m_episode, json[QString("episode")]);
    m_episode_isSet = !json[QString("episode")].isNull() && m_episode_isValid;

    m_has_next_isValid = ::OpenAPI::fromJsonValue(m_has_next, json[QString("has_next")]);
    m_has_next_isSet = !json[QString("has_next")].isNull() && m_has_next_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_programme_isValid = ::OpenAPI::fromJsonValue(m_programme, json[QString("programme")]);
    m_programme_isSet = !json[QString("programme")].isNull() && m_programme_isValid;

    m_progress_isValid = ::OpenAPI::fromJsonValue(m_progress, json[QString("progress")]);
    m_progress_isSet = !json[QString("progress")].isNull() && m_progress_isValid;

    m_remaining_isValid = ::OpenAPI::fromJsonValue(m_remaining, json[QString("remaining")]);
    m_remaining_isSet = !json[QString("remaining")].isNull() && m_remaining_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_urn_isValid = ::OpenAPI::fromJsonValue(m_urn, json[QString("urn")]);
    m_urn_isSet = !json[QString("urn")].isNull() && m_urn_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIWatching::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWatching::asJsonObject() const {
    QJsonObject obj;
    if (m_episode.isSet()) {
        obj.insert(QString("episode"), ::OpenAPI::toJsonValue(m_episode));
    }
    if (m_has_next_isSet) {
        obj.insert(QString("has_next"), ::OpenAPI::toJsonValue(m_has_next));
    }
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_programme.isSet()) {
        obj.insert(QString("programme"), ::OpenAPI::toJsonValue(m_programme));
    }
    if (m_progress_isSet) {
        obj.insert(QString("progress"), ::OpenAPI::toJsonValue(m_progress));
    }
    if (m_remaining_isSet) {
        obj.insert(QString("remaining"), ::OpenAPI::toJsonValue(m_remaining));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_urn_isSet) {
        obj.insert(QString("urn"), ::OpenAPI::toJsonValue(m_urn));
    }
    if (m_version.isSet()) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

OAIEpisode OAIWatching::getEpisode() const {
    return m_episode;
}
void OAIWatching::setEpisode(const OAIEpisode &episode) {
    m_episode = episode;
    m_episode_isSet = true;
}

bool OAIWatching::is_episode_Set() const{
    return m_episode_isSet;
}

bool OAIWatching::is_episode_Valid() const{
    return m_episode_isValid;
}

bool OAIWatching::isHasNext() const {
    return m_has_next;
}
void OAIWatching::setHasNext(const bool &has_next) {
    m_has_next = has_next;
    m_has_next_isSet = true;
}

bool OAIWatching::is_has_next_Set() const{
    return m_has_next_isSet;
}

bool OAIWatching::is_has_next_Valid() const{
    return m_has_next_isValid;
}

double OAIWatching::getOffset() const {
    return m_offset;
}
void OAIWatching::setOffset(const double &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAIWatching::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAIWatching::is_offset_Valid() const{
    return m_offset_isValid;
}

OAIProgramme OAIWatching::getProgramme() const {
    return m_programme;
}
void OAIWatching::setProgramme(const OAIProgramme &programme) {
    m_programme = programme;
    m_programme_isSet = true;
}

bool OAIWatching::is_programme_Set() const{
    return m_programme_isSet;
}

bool OAIWatching::is_programme_Valid() const{
    return m_programme_isValid;
}

double OAIWatching::getProgress() const {
    return m_progress;
}
void OAIWatching::setProgress(const double &progress) {
    m_progress = progress;
    m_progress_isSet = true;
}

bool OAIWatching::is_progress_Set() const{
    return m_progress_isSet;
}

bool OAIWatching::is_progress_Valid() const{
    return m_progress_isValid;
}

double OAIWatching::getRemaining() const {
    return m_remaining;
}
void OAIWatching::setRemaining(const double &remaining) {
    m_remaining = remaining;
    m_remaining_isSet = true;
}

bool OAIWatching::is_remaining_Set() const{
    return m_remaining_isSet;
}

bool OAIWatching::is_remaining_Valid() const{
    return m_remaining_isValid;
}

QString OAIWatching::getStatus() const {
    return m_status;
}
void OAIWatching::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIWatching::is_status_Set() const{
    return m_status_isSet;
}

bool OAIWatching::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIWatching::getType() const {
    return m_type;
}
void OAIWatching::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIWatching::is_type_Set() const{
    return m_type_isSet;
}

bool OAIWatching::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIWatching::getUrn() const {
    return m_urn;
}
void OAIWatching::setUrn(const QString &urn) {
    m_urn = urn;
    m_urn_isSet = true;
}

bool OAIWatching::is_urn_Set() const{
    return m_urn_isSet;
}

bool OAIWatching::is_urn_Valid() const{
    return m_urn_isValid;
}

OAIVersion OAIWatching::getVersion() const {
    return m_version;
}
void OAIWatching::setVersion(const OAIVersion &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIWatching::is_version_Set() const{
    return m_version_isSet;
}

bool OAIWatching::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIWatching::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_episode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_next_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_programme.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_progress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remaining_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_urn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWatching::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_episode_isValid && m_has_next_isValid && m_programme_isValid && m_type_isValid && m_urn_isValid && m_version_isValid && true;
}

} // namespace OpenAPI
