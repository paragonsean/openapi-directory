# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.clip_images import ClipImages
from openapi_server.models.clip_versions_inner_guidance_text import ClipVersionsInnerGuidanceText
from openapi_server.models.episode import Episode
from openapi_server.models.master_brand import MasterBrand
from openapi_server.models.programme_labels import ProgrammeLabels
from openapi_server import util


class Programme(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, categories: List[str]=None, count: float=None, id: str=None, images: ClipImages=None, initial_children: List[Episode]=None, labels: ProgrammeLabels=None, lexical_sort_letter: str=None, master_brand: MasterBrand=None, programme_type: str=None, status: str=None, synopses: ClipVersionsInnerGuidanceText=None, title: str=None, tleo_type: str=None, type: str=None):
        """Programme - a model defined in OpenAPI

        :param categories: The categories of this Programme.
        :param count: The count of this Programme.
        :param id: The id of this Programme.
        :param images: The images of this Programme.
        :param initial_children: The initial_children of this Programme.
        :param labels: The labels of this Programme.
        :param lexical_sort_letter: The lexical_sort_letter of this Programme.
        :param master_brand: The master_brand of this Programme.
        :param programme_type: The programme_type of this Programme.
        :param status: The status of this Programme.
        :param synopses: The synopses of this Programme.
        :param title: The title of this Programme.
        :param tleo_type: The tleo_type of this Programme.
        :param type: The type of this Programme.
        """
        self.openapi_types = {
            'categories': List[str],
            'count': float,
            'id': str,
            'images': ClipImages,
            'initial_children': List[Episode],
            'labels': ProgrammeLabels,
            'lexical_sort_letter': str,
            'master_brand': MasterBrand,
            'programme_type': str,
            'status': str,
            'synopses': ClipVersionsInnerGuidanceText,
            'title': str,
            'tleo_type': str,
            'type': str
        }

        self.attribute_map = {
            'categories': 'categories',
            'count': 'count',
            'id': 'id',
            'images': 'images',
            'initial_children': 'initial_children',
            'labels': 'labels',
            'lexical_sort_letter': 'lexical_sort_letter',
            'master_brand': 'master_brand',
            'programme_type': 'programme_type',
            'status': 'status',
            'synopses': 'synopses',
            'title': 'title',
            'tleo_type': 'tleo_type',
            'type': 'type'
        }

        self._categories = categories
        self._count = count
        self._id = id
        self._images = images
        self._initial_children = initial_children
        self._labels = labels
        self._lexical_sort_letter = lexical_sort_letter
        self._master_brand = master_brand
        self._programme_type = programme_type
        self._status = status
        self._synopses = synopses
        self._title = title
        self._tleo_type = tleo_type
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Programme':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The programme of this Programme.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def categories(self):
        """Gets the categories of this Programme.


        :return: The categories of this Programme.
        :rtype: List[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this Programme.


        :param categories: The categories of this Programme.
        :type categories: List[str]
        """
        if categories is None:
            raise ValueError("Invalid value for `categories`, must not be `None`")

        self._categories = categories

    @property
    def count(self):
        """Gets the count of this Programme.


        :return: The count of this Programme.
        :rtype: float
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this Programme.


        :param count: The count of this Programme.
        :type count: float
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")

        self._count = count

    @property
    def id(self):
        """Gets the id of this Programme.


        :return: The id of this Programme.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Programme.


        :param id: The id of this Programme.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def images(self):
        """Gets the images of this Programme.


        :return: The images of this Programme.
        :rtype: ClipImages
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this Programme.


        :param images: The images of this Programme.
        :type images: ClipImages
        """
        if images is None:
            raise ValueError("Invalid value for `images`, must not be `None`")

        self._images = images

    @property
    def initial_children(self):
        """Gets the initial_children of this Programme.


        :return: The initial_children of this Programme.
        :rtype: List[Episode]
        """
        return self._initial_children

    @initial_children.setter
    def initial_children(self, initial_children):
        """Sets the initial_children of this Programme.


        :param initial_children: The initial_children of this Programme.
        :type initial_children: List[Episode]
        """
        if initial_children is None:
            raise ValueError("Invalid value for `initial_children`, must not be `None`")

        self._initial_children = initial_children

    @property
    def labels(self):
        """Gets the labels of this Programme.


        :return: The labels of this Programme.
        :rtype: ProgrammeLabels
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Programme.


        :param labels: The labels of this Programme.
        :type labels: ProgrammeLabels
        """

        self._labels = labels

    @property
    def lexical_sort_letter(self):
        """Gets the lexical_sort_letter of this Programme.


        :return: The lexical_sort_letter of this Programme.
        :rtype: str
        """
        return self._lexical_sort_letter

    @lexical_sort_letter.setter
    def lexical_sort_letter(self, lexical_sort_letter):
        """Sets the lexical_sort_letter of this Programme.


        :param lexical_sort_letter: The lexical_sort_letter of this Programme.
        :type lexical_sort_letter: str
        """
        if lexical_sort_letter is None:
            raise ValueError("Invalid value for `lexical_sort_letter`, must not be `None`")

        self._lexical_sort_letter = lexical_sort_letter

    @property
    def master_brand(self):
        """Gets the master_brand of this Programme.


        :return: The master_brand of this Programme.
        :rtype: MasterBrand
        """
        return self._master_brand

    @master_brand.setter
    def master_brand(self, master_brand):
        """Sets the master_brand of this Programme.


        :param master_brand: The master_brand of this Programme.
        :type master_brand: MasterBrand
        """
        if master_brand is None:
            raise ValueError("Invalid value for `master_brand`, must not be `None`")

        self._master_brand = master_brand

    @property
    def programme_type(self):
        """Gets the programme_type of this Programme.


        :return: The programme_type of this Programme.
        :rtype: str
        """
        return self._programme_type

    @programme_type.setter
    def programme_type(self, programme_type):
        """Sets the programme_type of this Programme.


        :param programme_type: The programme_type of this Programme.
        :type programme_type: str
        """
        allowed_values = ["narrative", "sequential", "self-contained", "strand", "unclassified", "one-off"]  # noqa: E501
        if programme_type not in allowed_values:
            raise ValueError(
                "Invalid value for `programme_type` ({0}), must be one of {1}"
                .format(programme_type, allowed_values)
            )

        self._programme_type = programme_type

    @property
    def status(self):
        """Gets the status of this Programme.


        :return: The status of this Programme.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Programme.


        :param status: The status of this Programme.
        :type status: str
        """
        allowed_values = ["available", "unavailable"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def synopses(self):
        """Gets the synopses of this Programme.


        :return: The synopses of this Programme.
        :rtype: ClipVersionsInnerGuidanceText
        """
        return self._synopses

    @synopses.setter
    def synopses(self, synopses):
        """Sets the synopses of this Programme.


        :param synopses: The synopses of this Programme.
        :type synopses: ClipVersionsInnerGuidanceText
        """
        if synopses is None:
            raise ValueError("Invalid value for `synopses`, must not be `None`")

        self._synopses = synopses

    @property
    def title(self):
        """Gets the title of this Programme.


        :return: The title of this Programme.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Programme.


        :param title: The title of this Programme.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def tleo_type(self):
        """Gets the tleo_type of this Programme.


        :return: The tleo_type of this Programme.
        :rtype: str
        """
        return self._tleo_type

    @tleo_type.setter
    def tleo_type(self, tleo_type):
        """Sets the tleo_type of this Programme.


        :param tleo_type: The tleo_type of this Programme.
        :type tleo_type: str
        """
        allowed_values = ["brand", "series", "episode"]  # noqa: E501
        if tleo_type not in allowed_values:
            raise ValueError(
                "Invalid value for `tleo_type` ({0}), must be one of {1}"
                .format(tleo_type, allowed_values)
            )

        self._tleo_type = tleo_type

    @property
    def type(self):
        """Gets the type of this Programme.


        :return: The type of this Programme.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Programme.


        :param type: The type of this Programme.
        :type type: str
        """
        allowed_values = ["programme", "programme_large"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
