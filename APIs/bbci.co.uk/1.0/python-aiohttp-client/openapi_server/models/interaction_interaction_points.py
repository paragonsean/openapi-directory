# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InteractionInteractionPoints(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, show_from: float=None, skip_to: float=None):
        """InteractionInteractionPoints - a model defined in OpenAPI

        :param show_from: The show_from of this InteractionInteractionPoints.
        :param skip_to: The skip_to of this InteractionInteractionPoints.
        """
        self.openapi_types = {
            'show_from': float,
            'skip_to': float
        }

        self.attribute_map = {
            'show_from': 'show_from',
            'skip_to': 'skip_to'
        }

        self._show_from = show_from
        self._skip_to = skip_to

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InteractionInteractionPoints':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The interaction_interaction_points of this InteractionInteractionPoints.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def show_from(self):
        """Gets the show_from of this InteractionInteractionPoints.


        :return: The show_from of this InteractionInteractionPoints.
        :rtype: float
        """
        return self._show_from

    @show_from.setter
    def show_from(self, show_from):
        """Sets the show_from of this InteractionInteractionPoints.


        :param show_from: The show_from of this InteractionInteractionPoints.
        :type show_from: float
        """
        if show_from is None:
            raise ValueError("Invalid value for `show_from`, must not be `None`")

        self._show_from = show_from

    @property
    def skip_to(self):
        """Gets the skip_to of this InteractionInteractionPoints.


        :return: The skip_to of this InteractionInteractionPoints.
        :rtype: float
        """
        return self._skip_to

    @skip_to.setter
    def skip_to(self, skip_to):
        """Sets the skip_to of this InteractionInteractionPoints.


        :param skip_to: The skip_to of this InteractionInteractionPoints.
        :type skip_to: float
        """
        if skip_to is None:
            raise ValueError("Invalid value for `skip_to`, must not be `None`")

        self._skip_to = skip_to
