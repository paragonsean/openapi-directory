# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.clip_images import ClipImages
from openapi_server.models.clip_versions_inner_guidance_text import ClipVersionsInnerGuidanceText
from openapi_server.models.promotion_labels import PromotionLabels
from openapi_server import util


class Promotion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, images: ClipImages=None, labels: PromotionLabels=None, subtitle: str=None, synopses: ClipVersionsInnerGuidanceText=None, title: str=None, type: str=None, url: str=None):
        """Promotion - a model defined in OpenAPI

        :param id: The id of this Promotion.
        :param images: The images of this Promotion.
        :param labels: The labels of this Promotion.
        :param subtitle: The subtitle of this Promotion.
        :param synopses: The synopses of this Promotion.
        :param title: The title of this Promotion.
        :param type: The type of this Promotion.
        :param url: The url of this Promotion.
        """
        self.openapi_types = {
            'id': str,
            'images': ClipImages,
            'labels': PromotionLabels,
            'subtitle': str,
            'synopses': ClipVersionsInnerGuidanceText,
            'title': str,
            'type': str,
            'url': str
        }

        self.attribute_map = {
            'id': 'id',
            'images': 'images',
            'labels': 'labels',
            'subtitle': 'subtitle',
            'synopses': 'synopses',
            'title': 'title',
            'type': 'type',
            'url': 'url'
        }

        self._id = id
        self._images = images
        self._labels = labels
        self._subtitle = subtitle
        self._synopses = synopses
        self._title = title
        self._type = type
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Promotion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The promotion of this Promotion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Promotion.


        :return: The id of this Promotion.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Promotion.


        :param id: The id of this Promotion.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def images(self):
        """Gets the images of this Promotion.


        :return: The images of this Promotion.
        :rtype: ClipImages
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this Promotion.


        :param images: The images of this Promotion.
        :type images: ClipImages
        """

        self._images = images

    @property
    def labels(self):
        """Gets the labels of this Promotion.


        :return: The labels of this Promotion.
        :rtype: PromotionLabels
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Promotion.


        :param labels: The labels of this Promotion.
        :type labels: PromotionLabels
        """

        self._labels = labels

    @property
    def subtitle(self):
        """Gets the subtitle of this Promotion.


        :return: The subtitle of this Promotion.
        :rtype: str
        """
        return self._subtitle

    @subtitle.setter
    def subtitle(self, subtitle):
        """Sets the subtitle of this Promotion.


        :param subtitle: The subtitle of this Promotion.
        :type subtitle: str
        """

        self._subtitle = subtitle

    @property
    def synopses(self):
        """Gets the synopses of this Promotion.


        :return: The synopses of this Promotion.
        :rtype: ClipVersionsInnerGuidanceText
        """
        return self._synopses

    @synopses.setter
    def synopses(self, synopses):
        """Sets the synopses of this Promotion.


        :param synopses: The synopses of this Promotion.
        :type synopses: ClipVersionsInnerGuidanceText
        """

        self._synopses = synopses

    @property
    def title(self):
        """Gets the title of this Promotion.


        :return: The title of this Promotion.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Promotion.


        :param title: The title of this Promotion.
        :type title: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this Promotion.


        :return: The type of this Promotion.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Promotion.


        :param type: The type of this Promotion.
        :type type: str
        """
        allowed_values = ["promotion"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def url(self):
        """Gets the url of this Promotion.


        :return: The url of this Promotion.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Promotion.


        :param url: The url of this Promotion.
        :type url: str
        """

        self._url = url
