# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BroadcastEventsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, system: str=None, time: str=None):
        """BroadcastEventsInner - a model defined in OpenAPI

        :param name: The name of this BroadcastEventsInner.
        :param system: The system of this BroadcastEventsInner.
        :param time: The time of this BroadcastEventsInner.
        """
        self.openapi_types = {
            'name': str,
            'system': str,
            'time': str
        }

        self.attribute_map = {
            'name': 'name',
            'system': 'system',
            'time': 'time'
        }

        self._name = name
        self._system = system
        self._time = time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BroadcastEventsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The broadcast_events_inner of this BroadcastEventsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this BroadcastEventsInner.


        :return: The name of this BroadcastEventsInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BroadcastEventsInner.


        :param name: The name of this BroadcastEventsInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def system(self):
        """Gets the system of this BroadcastEventsInner.


        :return: The system of this BroadcastEventsInner.
        :rtype: str
        """
        return self._system

    @system.setter
    def system(self, system):
        """Sets the system of this BroadcastEventsInner.


        :param system: The system of this BroadcastEventsInner.
        :type system: str
        """
        if system is None:
            raise ValueError("Invalid value for `system`, must not be `None`")

        self._system = system

    @property
    def time(self):
        """Gets the time of this BroadcastEventsInner.


        :return: The time of this BroadcastEventsInner.
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this BroadcastEventsInner.


        :param time: The time of this BroadcastEventsInner.
        :type time: str
        """
        if time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")

        self._time = time
