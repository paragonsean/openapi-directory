# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MasterBrandTitles(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, large: str=None, medium: str=None, small: str=None):
        """MasterBrandTitles - a model defined in OpenAPI

        :param large: The large of this MasterBrandTitles.
        :param medium: The medium of this MasterBrandTitles.
        :param small: The small of this MasterBrandTitles.
        """
        self.openapi_types = {
            'large': str,
            'medium': str,
            'small': str
        }

        self.attribute_map = {
            'large': 'large',
            'medium': 'medium',
            'small': 'small'
        }

        self._large = large
        self._medium = medium
        self._small = small

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MasterBrandTitles':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The master_brand_titles of this MasterBrandTitles.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def large(self):
        """Gets the large of this MasterBrandTitles.


        :return: The large of this MasterBrandTitles.
        :rtype: str
        """
        return self._large

    @large.setter
    def large(self, large):
        """Sets the large of this MasterBrandTitles.


        :param large: The large of this MasterBrandTitles.
        :type large: str
        """
        if large is None:
            raise ValueError("Invalid value for `large`, must not be `None`")

        self._large = large

    @property
    def medium(self):
        """Gets the medium of this MasterBrandTitles.


        :return: The medium of this MasterBrandTitles.
        :rtype: str
        """
        return self._medium

    @medium.setter
    def medium(self, medium):
        """Sets the medium of this MasterBrandTitles.


        :param medium: The medium of this MasterBrandTitles.
        :type medium: str
        """
        if medium is None:
            raise ValueError("Invalid value for `medium`, must not be `None`")

        self._medium = medium

    @property
    def small(self):
        """Gets the small of this MasterBrandTitles.


        :return: The small of this MasterBrandTitles.
        :rtype: str
        """
        return self._small

    @small.setter
    def small(self, small):
        """Sets the small of this MasterBrandTitles.


        :param small: The small of this MasterBrandTitles.
        :type small: str
        """
        if small is None:
            raise ValueError("Invalid value for `small`, must not be `None`")

        self._small = small
