# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BroadcastDuration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, text: str=None, value: str=None):
        """BroadcastDuration - a model defined in OpenAPI

        :param text: The text of this BroadcastDuration.
        :param value: The value of this BroadcastDuration.
        """
        self.openapi_types = {
            'text': str,
            'value': str
        }

        self.attribute_map = {
            'text': 'text',
            'value': 'value'
        }

        self._text = text
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BroadcastDuration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The broadcast_duration of this BroadcastDuration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def text(self):
        """Gets the text of this BroadcastDuration.


        :return: The text of this BroadcastDuration.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this BroadcastDuration.


        :param text: The text of this BroadcastDuration.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")

        self._text = text

    @property
    def value(self):
        """Gets the value of this BroadcastDuration.


        :return: The value of this BroadcastDuration.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this BroadcastDuration.


        :param value: The value of this BroadcastDuration.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
