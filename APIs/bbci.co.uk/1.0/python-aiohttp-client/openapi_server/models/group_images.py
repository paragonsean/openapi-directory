# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GroupImages(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, standard: str=None, type: str=None, vertical: str=None):
        """GroupImages - a model defined in OpenAPI

        :param standard: The standard of this GroupImages.
        :param type: The type of this GroupImages.
        :param vertical: The vertical of this GroupImages.
        """
        self.openapi_types = {
            'standard': str,
            'type': str,
            'vertical': str
        }

        self.attribute_map = {
            'standard': 'standard',
            'type': 'type',
            'vertical': 'vertical'
        }

        self._standard = standard
        self._type = type
        self._vertical = vertical

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GroupImages':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The group_images of this GroupImages.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def standard(self):
        """Gets the standard of this GroupImages.


        :return: The standard of this GroupImages.
        :rtype: str
        """
        return self._standard

    @standard.setter
    def standard(self, standard):
        """Sets the standard of this GroupImages.


        :param standard: The standard of this GroupImages.
        :type standard: str
        """
        if standard is None:
            raise ValueError("Invalid value for `standard`, must not be `None`")

        self._standard = standard

    @property
    def type(self):
        """Gets the type of this GroupImages.


        :return: The type of this GroupImages.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GroupImages.


        :param type: The type of this GroupImages.
        :type type: str
        """
        allowed_values = ["image"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def vertical(self):
        """Gets the vertical of this GroupImages.


        :return: The vertical of this GroupImages.
        :rtype: str
        """
        return self._vertical

    @vertical.setter
    def vertical(self, vertical):
        """Sets the vertical of this GroupImages.


        :param vertical: The vertical of this GroupImages.
        :type vertical: str
        """
        if vertical is None:
            raise ValueError("Invalid value for `vertical`, must not be `None`")

        self._vertical = vertical
