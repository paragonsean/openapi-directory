# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.clip_images import ClipImages
from openapi_server.models.clip_labels import ClipLabels
from openapi_server.models.clip_onward_journey import ClipOnwardJourney
from openapi_server.models.clip_synopses import ClipSynopses
from openapi_server.models.clip_versions_inner import ClipVersionsInner
from openapi_server.models.master_brand import MasterBrand
from openapi_server import util


class Clip(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, images: ClipImages=None, labels: ClipLabels=None, master_brand: MasterBrand=None, onward_journey: ClipOnwardJourney=None, promotion_type: str=None, synopses: ClipSynopses=None, title: str=None, tleo_id: str=None, tleo_type: str=None, type: str=None, versions: List[ClipVersionsInner]=None):
        """Clip - a model defined in OpenAPI

        :param id: The id of this Clip.
        :param images: The images of this Clip.
        :param labels: The labels of this Clip.
        :param master_brand: The master_brand of this Clip.
        :param onward_journey: The onward_journey of this Clip.
        :param promotion_type: The promotion_type of this Clip.
        :param synopses: The synopses of this Clip.
        :param title: The title of this Clip.
        :param tleo_id: The tleo_id of this Clip.
        :param tleo_type: The tleo_type of this Clip.
        :param type: The type of this Clip.
        :param versions: The versions of this Clip.
        """
        self.openapi_types = {
            'id': str,
            'images': ClipImages,
            'labels': ClipLabels,
            'master_brand': MasterBrand,
            'onward_journey': ClipOnwardJourney,
            'promotion_type': str,
            'synopses': ClipSynopses,
            'title': str,
            'tleo_id': str,
            'tleo_type': str,
            'type': str,
            'versions': List[ClipVersionsInner]
        }

        self.attribute_map = {
            'id': 'id',
            'images': 'images',
            'labels': 'labels',
            'master_brand': 'master_brand',
            'onward_journey': 'onward_journey',
            'promotion_type': 'promotion_type',
            'synopses': 'synopses',
            'title': 'title',
            'tleo_id': 'tleo_id',
            'tleo_type': 'tleo_type',
            'type': 'type',
            'versions': 'versions'
        }

        self._id = id
        self._images = images
        self._labels = labels
        self._master_brand = master_brand
        self._onward_journey = onward_journey
        self._promotion_type = promotion_type
        self._synopses = synopses
        self._title = title
        self._tleo_id = tleo_id
        self._tleo_type = tleo_type
        self._type = type
        self._versions = versions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Clip':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The clip of this Clip.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Clip.


        :return: The id of this Clip.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Clip.


        :param id: The id of this Clip.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def images(self):
        """Gets the images of this Clip.


        :return: The images of this Clip.
        :rtype: ClipImages
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this Clip.


        :param images: The images of this Clip.
        :type images: ClipImages
        """
        if images is None:
            raise ValueError("Invalid value for `images`, must not be `None`")

        self._images = images

    @property
    def labels(self):
        """Gets the labels of this Clip.


        :return: The labels of this Clip.
        :rtype: ClipLabels
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Clip.


        :param labels: The labels of this Clip.
        :type labels: ClipLabels
        """

        self._labels = labels

    @property
    def master_brand(self):
        """Gets the master_brand of this Clip.


        :return: The master_brand of this Clip.
        :rtype: MasterBrand
        """
        return self._master_brand

    @master_brand.setter
    def master_brand(self, master_brand):
        """Sets the master_brand of this Clip.


        :param master_brand: The master_brand of this Clip.
        :type master_brand: MasterBrand
        """
        if master_brand is None:
            raise ValueError("Invalid value for `master_brand`, must not be `None`")

        self._master_brand = master_brand

    @property
    def onward_journey(self):
        """Gets the onward_journey of this Clip.


        :return: The onward_journey of this Clip.
        :rtype: ClipOnwardJourney
        """
        return self._onward_journey

    @onward_journey.setter
    def onward_journey(self, onward_journey):
        """Sets the onward_journey of this Clip.


        :param onward_journey: The onward_journey of this Clip.
        :type onward_journey: ClipOnwardJourney
        """

        self._onward_journey = onward_journey

    @property
    def promotion_type(self):
        """Gets the promotion_type of this Clip.


        :return: The promotion_type of this Clip.
        :rtype: str
        """
        return self._promotion_type

    @promotion_type.setter
    def promotion_type(self, promotion_type):
        """Sets the promotion_type of this Clip.


        :param promotion_type: The promotion_type of this Clip.
        :type promotion_type: str
        """
        allowed_values = ["available_now", "coming_soon"]  # noqa: E501
        if promotion_type not in allowed_values:
            raise ValueError(
                "Invalid value for `promotion_type` ({0}), must be one of {1}"
                .format(promotion_type, allowed_values)
            )

        self._promotion_type = promotion_type

    @property
    def synopses(self):
        """Gets the synopses of this Clip.


        :return: The synopses of this Clip.
        :rtype: ClipSynopses
        """
        return self._synopses

    @synopses.setter
    def synopses(self, synopses):
        """Sets the synopses of this Clip.


        :param synopses: The synopses of this Clip.
        :type synopses: ClipSynopses
        """
        if synopses is None:
            raise ValueError("Invalid value for `synopses`, must not be `None`")

        self._synopses = synopses

    @property
    def title(self):
        """Gets the title of this Clip.


        :return: The title of this Clip.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Clip.


        :param title: The title of this Clip.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def tleo_id(self):
        """Gets the tleo_id of this Clip.


        :return: The tleo_id of this Clip.
        :rtype: str
        """
        return self._tleo_id

    @tleo_id.setter
    def tleo_id(self, tleo_id):
        """Sets the tleo_id of this Clip.


        :param tleo_id: The tleo_id of this Clip.
        :type tleo_id: str
        """
        if tleo_id is None:
            raise ValueError("Invalid value for `tleo_id`, must not be `None`")

        self._tleo_id = tleo_id

    @property
    def tleo_type(self):
        """Gets the tleo_type of this Clip.


        :return: The tleo_type of this Clip.
        :rtype: str
        """
        return self._tleo_type

    @tleo_type.setter
    def tleo_type(self, tleo_type):
        """Sets the tleo_type of this Clip.


        :param tleo_type: The tleo_type of this Clip.
        :type tleo_type: str
        """
        allowed_values = ["episode", "brand", "series"]  # noqa: E501
        if tleo_type not in allowed_values:
            raise ValueError(
                "Invalid value for `tleo_type` ({0}), must be one of {1}"
                .format(tleo_type, allowed_values)
            )

        self._tleo_type = tleo_type

    @property
    def type(self):
        """Gets the type of this Clip.


        :return: The type of this Clip.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Clip.


        :param type: The type of this Clip.
        :type type: str
        """
        allowed_values = ["clip"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def versions(self):
        """Gets the versions of this Clip.


        :return: The versions of this Clip.
        :rtype: List[ClipVersionsInner]
        """
        return self._versions

    @versions.setter
    def versions(self, versions):
        """Sets the versions of this Clip.


        :param versions: The versions of this Clip.
        :type versions: List[ClipVersionsInner]
        """
        if versions is None:
            raise ValueError("Invalid value for `versions`, must not be `None`")

        self._versions = versions
