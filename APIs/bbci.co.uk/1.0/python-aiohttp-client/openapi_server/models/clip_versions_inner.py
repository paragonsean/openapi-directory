# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.broadcast_duration import BroadcastDuration
from openapi_server.models.clip_versions_inner_availability import ClipVersionsInnerAvailability
from openapi_server.models.clip_versions_inner_events_inner import ClipVersionsInnerEventsInner
from openapi_server.models.clip_versions_inner_guidance import ClipVersionsInnerGuidance
from openapi_server.models.clip_versions_inner_rrc import ClipVersionsInnerRrc
from openapi_server.models.interaction import Interaction
from openapi_server import util


class ClipVersionsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, availability: ClipVersionsInnerAvailability=None, credits_start: float=None, download: bool=None, duration: BroadcastDuration=None, events: List[ClipVersionsInnerEventsInner]=None, first_broadcast: str=None, first_broadcast_date_time: str=None, guidance: ClipVersionsInnerGuidance=None, hd: bool=None, id: str=None, interactions: List[Interaction]=None, kind: str=None, rrc: ClipVersionsInnerRrc=None, service_id: str=None, type: str=None, uhd: bool=None):
        """ClipVersionsInner - a model defined in OpenAPI

        :param availability: The availability of this ClipVersionsInner.
        :param credits_start: The credits_start of this ClipVersionsInner.
        :param download: The download of this ClipVersionsInner.
        :param duration: The duration of this ClipVersionsInner.
        :param events: The events of this ClipVersionsInner.
        :param first_broadcast: The first_broadcast of this ClipVersionsInner.
        :param first_broadcast_date_time: The first_broadcast_date_time of this ClipVersionsInner.
        :param guidance: The guidance of this ClipVersionsInner.
        :param hd: The hd of this ClipVersionsInner.
        :param id: The id of this ClipVersionsInner.
        :param interactions: The interactions of this ClipVersionsInner.
        :param kind: The kind of this ClipVersionsInner.
        :param rrc: The rrc of this ClipVersionsInner.
        :param service_id: The service_id of this ClipVersionsInner.
        :param type: The type of this ClipVersionsInner.
        :param uhd: The uhd of this ClipVersionsInner.
        """
        self.openapi_types = {
            'availability': ClipVersionsInnerAvailability,
            'credits_start': float,
            'download': bool,
            'duration': BroadcastDuration,
            'events': List[ClipVersionsInnerEventsInner],
            'first_broadcast': str,
            'first_broadcast_date_time': str,
            'guidance': ClipVersionsInnerGuidance,
            'hd': bool,
            'id': str,
            'interactions': List[Interaction],
            'kind': str,
            'rrc': ClipVersionsInnerRrc,
            'service_id': str,
            'type': str,
            'uhd': bool
        }

        self.attribute_map = {
            'availability': 'availability',
            'credits_start': 'credits_start',
            'download': 'download',
            'duration': 'duration',
            'events': 'events',
            'first_broadcast': 'first_broadcast',
            'first_broadcast_date_time': 'first_broadcast_date_time',
            'guidance': 'guidance',
            'hd': 'hd',
            'id': 'id',
            'interactions': 'interactions',
            'kind': 'kind',
            'rrc': 'rrc',
            'service_id': 'service_id',
            'type': 'type',
            'uhd': 'uhd'
        }

        self._availability = availability
        self._credits_start = credits_start
        self._download = download
        self._duration = duration
        self._events = events
        self._first_broadcast = first_broadcast
        self._first_broadcast_date_time = first_broadcast_date_time
        self._guidance = guidance
        self._hd = hd
        self._id = id
        self._interactions = interactions
        self._kind = kind
        self._rrc = rrc
        self._service_id = service_id
        self._type = type
        self._uhd = uhd

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClipVersionsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The clip_versions_inner of this ClipVersionsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def availability(self):
        """Gets the availability of this ClipVersionsInner.


        :return: The availability of this ClipVersionsInner.
        :rtype: ClipVersionsInnerAvailability
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this ClipVersionsInner.


        :param availability: The availability of this ClipVersionsInner.
        :type availability: ClipVersionsInnerAvailability
        """
        if availability is None:
            raise ValueError("Invalid value for `availability`, must not be `None`")

        self._availability = availability

    @property
    def credits_start(self):
        """Gets the credits_start of this ClipVersionsInner.


        :return: The credits_start of this ClipVersionsInner.
        :rtype: float
        """
        return self._credits_start

    @credits_start.setter
    def credits_start(self, credits_start):
        """Sets the credits_start of this ClipVersionsInner.


        :param credits_start: The credits_start of this ClipVersionsInner.
        :type credits_start: float
        """

        self._credits_start = credits_start

    @property
    def download(self):
        """Gets the download of this ClipVersionsInner.


        :return: The download of this ClipVersionsInner.
        :rtype: bool
        """
        return self._download

    @download.setter
    def download(self, download):
        """Sets the download of this ClipVersionsInner.


        :param download: The download of this ClipVersionsInner.
        :type download: bool
        """
        if download is None:
            raise ValueError("Invalid value for `download`, must not be `None`")

        self._download = download

    @property
    def duration(self):
        """Gets the duration of this ClipVersionsInner.


        :return: The duration of this ClipVersionsInner.
        :rtype: BroadcastDuration
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this ClipVersionsInner.


        :param duration: The duration of this ClipVersionsInner.
        :type duration: BroadcastDuration
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")

        self._duration = duration

    @property
    def events(self):
        """Gets the events of this ClipVersionsInner.


        :return: The events of this ClipVersionsInner.
        :rtype: List[ClipVersionsInnerEventsInner]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this ClipVersionsInner.


        :param events: The events of this ClipVersionsInner.
        :type events: List[ClipVersionsInnerEventsInner]
        """

        self._events = events

    @property
    def first_broadcast(self):
        """Gets the first_broadcast of this ClipVersionsInner.


        :return: The first_broadcast of this ClipVersionsInner.
        :rtype: str
        """
        return self._first_broadcast

    @first_broadcast.setter
    def first_broadcast(self, first_broadcast):
        """Sets the first_broadcast of this ClipVersionsInner.


        :param first_broadcast: The first_broadcast of this ClipVersionsInner.
        :type first_broadcast: str
        """

        self._first_broadcast = first_broadcast

    @property
    def first_broadcast_date_time(self):
        """Gets the first_broadcast_date_time of this ClipVersionsInner.


        :return: The first_broadcast_date_time of this ClipVersionsInner.
        :rtype: str
        """
        return self._first_broadcast_date_time

    @first_broadcast_date_time.setter
    def first_broadcast_date_time(self, first_broadcast_date_time):
        """Sets the first_broadcast_date_time of this ClipVersionsInner.


        :param first_broadcast_date_time: The first_broadcast_date_time of this ClipVersionsInner.
        :type first_broadcast_date_time: str
        """

        self._first_broadcast_date_time = first_broadcast_date_time

    @property
    def guidance(self):
        """Gets the guidance of this ClipVersionsInner.


        :return: The guidance of this ClipVersionsInner.
        :rtype: ClipVersionsInnerGuidance
        """
        return self._guidance

    @guidance.setter
    def guidance(self, guidance):
        """Sets the guidance of this ClipVersionsInner.


        :param guidance: The guidance of this ClipVersionsInner.
        :type guidance: ClipVersionsInnerGuidance
        """

        self._guidance = guidance

    @property
    def hd(self):
        """Gets the hd of this ClipVersionsInner.


        :return: The hd of this ClipVersionsInner.
        :rtype: bool
        """
        return self._hd

    @hd.setter
    def hd(self, hd):
        """Sets the hd of this ClipVersionsInner.


        :param hd: The hd of this ClipVersionsInner.
        :type hd: bool
        """
        if hd is None:
            raise ValueError("Invalid value for `hd`, must not be `None`")

        self._hd = hd

    @property
    def id(self):
        """Gets the id of this ClipVersionsInner.


        :return: The id of this ClipVersionsInner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ClipVersionsInner.


        :param id: The id of this ClipVersionsInner.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def interactions(self):
        """Gets the interactions of this ClipVersionsInner.


        :return: The interactions of this ClipVersionsInner.
        :rtype: List[Interaction]
        """
        return self._interactions

    @interactions.setter
    def interactions(self, interactions):
        """Sets the interactions of this ClipVersionsInner.


        :param interactions: The interactions of this ClipVersionsInner.
        :type interactions: List[Interaction]
        """

        self._interactions = interactions

    @property
    def kind(self):
        """Gets the kind of this ClipVersionsInner.


        :return: The kind of this ClipVersionsInner.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ClipVersionsInner.


        :param kind: The kind of this ClipVersionsInner.
        :type kind: str
        """
        allowed_values = ["legal", "editorial", "technical-replacement", "original", "iplayer-version", "lengthened", "shortened", "pre-watershed", "post-watershed", "warnings-higher", "warnings-lower", "warnings-none", "duplication", "open-subtitled", "other", "audio-described", "signed", "webcast", "simulcast"]  # noqa: E501
        if kind not in allowed_values:
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def rrc(self):
        """Gets the rrc of this ClipVersionsInner.


        :return: The rrc of this ClipVersionsInner.
        :rtype: ClipVersionsInnerRrc
        """
        return self._rrc

    @rrc.setter
    def rrc(self, rrc):
        """Sets the rrc of this ClipVersionsInner.


        :param rrc: The rrc of this ClipVersionsInner.
        :type rrc: ClipVersionsInnerRrc
        """

        self._rrc = rrc

    @property
    def service_id(self):
        """Gets the service_id of this ClipVersionsInner.


        :return: The service_id of this ClipVersionsInner.
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this ClipVersionsInner.


        :param service_id: The service_id of this ClipVersionsInner.
        :type service_id: str
        """

        self._service_id = service_id

    @property
    def type(self):
        """Gets the type of this ClipVersionsInner.


        :return: The type of this ClipVersionsInner.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ClipVersionsInner.


        :param type: The type of this ClipVersionsInner.
        :type type: str
        """
        allowed_values = ["version", "version_large"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def uhd(self):
        """Gets the uhd of this ClipVersionsInner.


        :return: The uhd of this ClipVersionsInner.
        :rtype: bool
        """
        return self._uhd

    @uhd.setter
    def uhd(self, uhd):
        """Sets the uhd of this ClipVersionsInner.


        :param uhd: The uhd of this ClipVersionsInner.
        :type uhd: bool
        """
        if uhd is None:
            raise ValueError("Invalid value for `uhd`, must not be `None`")

        self._uhd = uhd
