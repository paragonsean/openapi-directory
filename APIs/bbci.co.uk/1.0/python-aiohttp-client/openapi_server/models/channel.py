# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Channel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, has_schedule: bool=None, id: str=None, master_brand_id: str=None, master_brand_title: str=None, on_air: bool=None, title: str=None, type: str=None):
        """Channel - a model defined in OpenAPI

        :param has_schedule: The has_schedule of this Channel.
        :param id: The id of this Channel.
        :param master_brand_id: The master_brand_id of this Channel.
        :param master_brand_title: The master_brand_title of this Channel.
        :param on_air: The on_air of this Channel.
        :param title: The title of this Channel.
        :param type: The type of this Channel.
        """
        self.openapi_types = {
            'has_schedule': bool,
            'id': str,
            'master_brand_id': str,
            'master_brand_title': str,
            'on_air': bool,
            'title': str,
            'type': str
        }

        self.attribute_map = {
            'has_schedule': 'has_schedule',
            'id': 'id',
            'master_brand_id': 'master_brand_id',
            'master_brand_title': 'master_brand_title',
            'on_air': 'on_air',
            'title': 'title',
            'type': 'type'
        }

        self._has_schedule = has_schedule
        self._id = id
        self._master_brand_id = master_brand_id
        self._master_brand_title = master_brand_title
        self._on_air = on_air
        self._title = title
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Channel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The channel of this Channel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def has_schedule(self):
        """Gets the has_schedule of this Channel.


        :return: The has_schedule of this Channel.
        :rtype: bool
        """
        return self._has_schedule

    @has_schedule.setter
    def has_schedule(self, has_schedule):
        """Sets the has_schedule of this Channel.


        :param has_schedule: The has_schedule of this Channel.
        :type has_schedule: bool
        """
        if has_schedule is None:
            raise ValueError("Invalid value for `has_schedule`, must not be `None`")

        self._has_schedule = has_schedule

    @property
    def id(self):
        """Gets the id of this Channel.


        :return: The id of this Channel.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Channel.


        :param id: The id of this Channel.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def master_brand_id(self):
        """Gets the master_brand_id of this Channel.


        :return: The master_brand_id of this Channel.
        :rtype: str
        """
        return self._master_brand_id

    @master_brand_id.setter
    def master_brand_id(self, master_brand_id):
        """Sets the master_brand_id of this Channel.


        :param master_brand_id: The master_brand_id of this Channel.
        :type master_brand_id: str
        """
        if master_brand_id is None:
            raise ValueError("Invalid value for `master_brand_id`, must not be `None`")

        self._master_brand_id = master_brand_id

    @property
    def master_brand_title(self):
        """Gets the master_brand_title of this Channel.


        :return: The master_brand_title of this Channel.
        :rtype: str
        """
        return self._master_brand_title

    @master_brand_title.setter
    def master_brand_title(self, master_brand_title):
        """Sets the master_brand_title of this Channel.


        :param master_brand_title: The master_brand_title of this Channel.
        :type master_brand_title: str
        """
        if master_brand_title is None:
            raise ValueError("Invalid value for `master_brand_title`, must not be `None`")

        self._master_brand_title = master_brand_title

    @property
    def on_air(self):
        """Gets the on_air of this Channel.


        :return: The on_air of this Channel.
        :rtype: bool
        """
        return self._on_air

    @on_air.setter
    def on_air(self, on_air):
        """Sets the on_air of this Channel.


        :param on_air: The on_air of this Channel.
        :type on_air: bool
        """

        self._on_air = on_air

    @property
    def title(self):
        """Gets the title of this Channel.


        :return: The title of this Channel.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Channel.


        :param title: The title of this Channel.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def type(self):
        """Gets the type of this Channel.


        :return: The type of this Channel.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Channel.


        :param type: The type of this Channel.
        :type type: str
        """
        allowed_values = ["channel"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
