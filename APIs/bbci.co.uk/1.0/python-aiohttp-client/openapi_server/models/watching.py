# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.episode import Episode
from openapi_server.models.programme import Programme
from openapi_server.models.version import Version
from openapi_server import util


class Watching(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, episode: Episode=None, has_next: bool=None, offset: float=None, programme: Programme=None, progress: float=None, remaining: float=None, status: str=None, type: str=None, urn: str=None, version: Version=None):
        """Watching - a model defined in OpenAPI

        :param episode: The episode of this Watching.
        :param has_next: The has_next of this Watching.
        :param offset: The offset of this Watching.
        :param programme: The programme of this Watching.
        :param progress: The progress of this Watching.
        :param remaining: The remaining of this Watching.
        :param status: The status of this Watching.
        :param type: The type of this Watching.
        :param urn: The urn of this Watching.
        :param version: The version of this Watching.
        """
        self.openapi_types = {
            'episode': Episode,
            'has_next': bool,
            'offset': float,
            'programme': Programme,
            'progress': float,
            'remaining': float,
            'status': str,
            'type': str,
            'urn': str,
            'version': Version
        }

        self.attribute_map = {
            'episode': 'episode',
            'has_next': 'has_next',
            'offset': 'offset',
            'programme': 'programme',
            'progress': 'progress',
            'remaining': 'remaining',
            'status': 'status',
            'type': 'type',
            'urn': 'urn',
            'version': 'version'
        }

        self._episode = episode
        self._has_next = has_next
        self._offset = offset
        self._programme = programme
        self._progress = progress
        self._remaining = remaining
        self._status = status
        self._type = type
        self._urn = urn
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Watching':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The watching of this Watching.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def episode(self):
        """Gets the episode of this Watching.


        :return: The episode of this Watching.
        :rtype: Episode
        """
        return self._episode

    @episode.setter
    def episode(self, episode):
        """Sets the episode of this Watching.


        :param episode: The episode of this Watching.
        :type episode: Episode
        """
        if episode is None:
            raise ValueError("Invalid value for `episode`, must not be `None`")

        self._episode = episode

    @property
    def has_next(self):
        """Gets the has_next of this Watching.


        :return: The has_next of this Watching.
        :rtype: bool
        """
        return self._has_next

    @has_next.setter
    def has_next(self, has_next):
        """Sets the has_next of this Watching.


        :param has_next: The has_next of this Watching.
        :type has_next: bool
        """
        if has_next is None:
            raise ValueError("Invalid value for `has_next`, must not be `None`")

        self._has_next = has_next

    @property
    def offset(self):
        """Gets the offset of this Watching.


        :return: The offset of this Watching.
        :rtype: float
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this Watching.


        :param offset: The offset of this Watching.
        :type offset: float
        """

        self._offset = offset

    @property
    def programme(self):
        """Gets the programme of this Watching.


        :return: The programme of this Watching.
        :rtype: Programme
        """
        return self._programme

    @programme.setter
    def programme(self, programme):
        """Sets the programme of this Watching.


        :param programme: The programme of this Watching.
        :type programme: Programme
        """
        if programme is None:
            raise ValueError("Invalid value for `programme`, must not be `None`")

        self._programme = programme

    @property
    def progress(self):
        """Gets the progress of this Watching.


        :return: The progress of this Watching.
        :rtype: float
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this Watching.


        :param progress: The progress of this Watching.
        :type progress: float
        """

        self._progress = progress

    @property
    def remaining(self):
        """Gets the remaining of this Watching.


        :return: The remaining of this Watching.
        :rtype: float
        """
        return self._remaining

    @remaining.setter
    def remaining(self, remaining):
        """Sets the remaining of this Watching.


        :param remaining: The remaining of this Watching.
        :type remaining: float
        """

        self._remaining = remaining

    @property
    def status(self):
        """Gets the status of this Watching.


        :return: The status of this Watching.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Watching.


        :param status: The status of this Watching.
        :type status: str
        """
        allowed_values = ["current", "next", "ended"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def type(self):
        """Gets the type of this Watching.


        :return: The type of this Watching.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Watching.


        :param type: The type of this Watching.
        :type type: str
        """
        allowed_values = ["watching"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def urn(self):
        """Gets the urn of this Watching.


        :return: The urn of this Watching.
        :rtype: str
        """
        return self._urn

    @urn.setter
    def urn(self, urn):
        """Sets the urn of this Watching.


        :param urn: The urn of this Watching.
        :type urn: str
        """
        if urn is None:
            raise ValueError("Invalid value for `urn`, must not be `None`")

        self._urn = urn

    @property
    def version(self):
        """Gets the version of this Watching.


        :return: The version of this Watching.
        :rtype: Version
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Watching.


        :param version: The version of this Watching.
        :type version: Version
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version
