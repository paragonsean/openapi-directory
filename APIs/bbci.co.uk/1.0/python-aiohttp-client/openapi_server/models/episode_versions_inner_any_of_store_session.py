# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.episode_versions_inner_any_of_store_session_stats import EpisodeVersionsInnerAnyOfStoreSessionStats
from openapi_server import util


class EpisodeVersionsInnerAnyOfStoreSession(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ceiling: float=None, stats: EpisodeVersionsInnerAnyOfStoreSessionStats=None, token: str=None):
        """EpisodeVersionsInnerAnyOfStoreSession - a model defined in OpenAPI

        :param ceiling: The ceiling of this EpisodeVersionsInnerAnyOfStoreSession.
        :param stats: The stats of this EpisodeVersionsInnerAnyOfStoreSession.
        :param token: The token of this EpisodeVersionsInnerAnyOfStoreSession.
        """
        self.openapi_types = {
            'ceiling': float,
            'stats': EpisodeVersionsInnerAnyOfStoreSessionStats,
            'token': str
        }

        self.attribute_map = {
            'ceiling': 'ceiling',
            'stats': 'stats',
            'token': 'token'
        }

        self._ceiling = ceiling
        self._stats = stats
        self._token = token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EpisodeVersionsInnerAnyOfStoreSession':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The episode_versions_inner_anyOf_store_session of this EpisodeVersionsInnerAnyOfStoreSession.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ceiling(self):
        """Gets the ceiling of this EpisodeVersionsInnerAnyOfStoreSession.


        :return: The ceiling of this EpisodeVersionsInnerAnyOfStoreSession.
        :rtype: float
        """
        return self._ceiling

    @ceiling.setter
    def ceiling(self, ceiling):
        """Sets the ceiling of this EpisodeVersionsInnerAnyOfStoreSession.


        :param ceiling: The ceiling of this EpisodeVersionsInnerAnyOfStoreSession.
        :type ceiling: float
        """

        self._ceiling = ceiling

    @property
    def stats(self):
        """Gets the stats of this EpisodeVersionsInnerAnyOfStoreSession.


        :return: The stats of this EpisodeVersionsInnerAnyOfStoreSession.
        :rtype: EpisodeVersionsInnerAnyOfStoreSessionStats
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this EpisodeVersionsInnerAnyOfStoreSession.


        :param stats: The stats of this EpisodeVersionsInnerAnyOfStoreSession.
        :type stats: EpisodeVersionsInnerAnyOfStoreSessionStats
        """
        if stats is None:
            raise ValueError("Invalid value for `stats`, must not be `None`")

        self._stats = stats

    @property
    def token(self):
        """Gets the token of this EpisodeVersionsInnerAnyOfStoreSession.


        :return: The token of this EpisodeVersionsInnerAnyOfStoreSession.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this EpisodeVersionsInnerAnyOfStoreSession.


        :param token: The token of this EpisodeVersionsInnerAnyOfStoreSession.
        :type token: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")

        self._token = token
