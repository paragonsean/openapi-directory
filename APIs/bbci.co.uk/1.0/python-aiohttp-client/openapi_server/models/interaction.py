# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.interaction_interaction_points import InteractionInteractionPoints
from openapi_server.models.interaction_subtype import InteractionSubtype
from openapi_server.models.interaction_title import InteractionTitle
from openapi_server.models.interaction_type import InteractionType
from openapi_server import util


class Interaction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, interaction_points: InteractionInteractionPoints=None, subtype: InteractionSubtype=None, title: InteractionTitle=None, type: InteractionType=None):
        """Interaction - a model defined in OpenAPI

        :param interaction_points: The interaction_points of this Interaction.
        :param subtype: The subtype of this Interaction.
        :param title: The title of this Interaction.
        :param type: The type of this Interaction.
        """
        self.openapi_types = {
            'interaction_points': InteractionInteractionPoints,
            'subtype': InteractionSubtype,
            'title': InteractionTitle,
            'type': InteractionType
        }

        self.attribute_map = {
            'interaction_points': 'interaction_points',
            'subtype': 'subtype',
            'title': 'title',
            'type': 'type'
        }

        self._interaction_points = interaction_points
        self._subtype = subtype
        self._title = title
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Interaction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The interaction of this Interaction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def interaction_points(self):
        """Gets the interaction_points of this Interaction.


        :return: The interaction_points of this Interaction.
        :rtype: InteractionInteractionPoints
        """
        return self._interaction_points

    @interaction_points.setter
    def interaction_points(self, interaction_points):
        """Sets the interaction_points of this Interaction.


        :param interaction_points: The interaction_points of this Interaction.
        :type interaction_points: InteractionInteractionPoints
        """
        if interaction_points is None:
            raise ValueError("Invalid value for `interaction_points`, must not be `None`")

        self._interaction_points = interaction_points

    @property
    def subtype(self):
        """Gets the subtype of this Interaction.


        :return: The subtype of this Interaction.
        :rtype: InteractionSubtype
        """
        return self._subtype

    @subtype.setter
    def subtype(self, subtype):
        """Sets the subtype of this Interaction.


        :param subtype: The subtype of this Interaction.
        :type subtype: InteractionSubtype
        """
        if subtype is None:
            raise ValueError("Invalid value for `subtype`, must not be `None`")

        self._subtype = subtype

    @property
    def title(self):
        """Gets the title of this Interaction.


        :return: The title of this Interaction.
        :rtype: InteractionTitle
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Interaction.


        :param title: The title of this Interaction.
        :type title: InteractionTitle
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def type(self):
        """Gets the type of this Interaction.


        :return: The type of this Interaction.
        :rtype: InteractionType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Interaction.


        :param type: The type of this Interaction.
        :type type: InteractionType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
