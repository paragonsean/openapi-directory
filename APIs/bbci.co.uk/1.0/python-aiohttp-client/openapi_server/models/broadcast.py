# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.broadcast_duration import BroadcastDuration
from openapi_server.models.broadcast_events_inner import BroadcastEventsInner
from openapi_server.models.episode import Episode
from openapi_server import util


class Broadcast(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available_on_hd_service: str=None, blanked: bool=None, channel_title: str=None, duration: BroadcastDuration=None, episode: Episode=None, episode_id: str=None, events: List[BroadcastEventsInner]=None, id: str=None, repeat: bool=None, scheduled_end: str=None, scheduled_start: str=None, service_id: str=None, transmission_end: str=None, transmission_start: str=None, type: str=None, version_id: str=None):
        """Broadcast - a model defined in OpenAPI

        :param available_on_hd_service: The available_on_hd_service of this Broadcast.
        :param blanked: The blanked of this Broadcast.
        :param channel_title: The channel_title of this Broadcast.
        :param duration: The duration of this Broadcast.
        :param episode: The episode of this Broadcast.
        :param episode_id: The episode_id of this Broadcast.
        :param events: The events of this Broadcast.
        :param id: The id of this Broadcast.
        :param repeat: The repeat of this Broadcast.
        :param scheduled_end: The scheduled_end of this Broadcast.
        :param scheduled_start: The scheduled_start of this Broadcast.
        :param service_id: The service_id of this Broadcast.
        :param transmission_end: The transmission_end of this Broadcast.
        :param transmission_start: The transmission_start of this Broadcast.
        :param type: The type of this Broadcast.
        :param version_id: The version_id of this Broadcast.
        """
        self.openapi_types = {
            'available_on_hd_service': str,
            'blanked': bool,
            'channel_title': str,
            'duration': BroadcastDuration,
            'episode': Episode,
            'episode_id': str,
            'events': List[BroadcastEventsInner],
            'id': str,
            'repeat': bool,
            'scheduled_end': str,
            'scheduled_start': str,
            'service_id': str,
            'transmission_end': str,
            'transmission_start': str,
            'type': str,
            'version_id': str
        }

        self.attribute_map = {
            'available_on_hd_service': 'available_on_hd_service',
            'blanked': 'blanked',
            'channel_title': 'channel_title',
            'duration': 'duration',
            'episode': 'episode',
            'episode_id': 'episode_id',
            'events': 'events',
            'id': 'id',
            'repeat': 'repeat',
            'scheduled_end': 'scheduled_end',
            'scheduled_start': 'scheduled_start',
            'service_id': 'service_id',
            'transmission_end': 'transmission_end',
            'transmission_start': 'transmission_start',
            'type': 'type',
            'version_id': 'version_id'
        }

        self._available_on_hd_service = available_on_hd_service
        self._blanked = blanked
        self._channel_title = channel_title
        self._duration = duration
        self._episode = episode
        self._episode_id = episode_id
        self._events = events
        self._id = id
        self._repeat = repeat
        self._scheduled_end = scheduled_end
        self._scheduled_start = scheduled_start
        self._service_id = service_id
        self._transmission_end = transmission_end
        self._transmission_start = transmission_start
        self._type = type
        self._version_id = version_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Broadcast':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The broadcast of this Broadcast.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available_on_hd_service(self):
        """Gets the available_on_hd_service of this Broadcast.


        :return: The available_on_hd_service of this Broadcast.
        :rtype: str
        """
        return self._available_on_hd_service

    @available_on_hd_service.setter
    def available_on_hd_service(self, available_on_hd_service):
        """Sets the available_on_hd_service of this Broadcast.


        :param available_on_hd_service: The available_on_hd_service of this Broadcast.
        :type available_on_hd_service: str
        """

        self._available_on_hd_service = available_on_hd_service

    @property
    def blanked(self):
        """Gets the blanked of this Broadcast.


        :return: The blanked of this Broadcast.
        :rtype: bool
        """
        return self._blanked

    @blanked.setter
    def blanked(self, blanked):
        """Sets the blanked of this Broadcast.


        :param blanked: The blanked of this Broadcast.
        :type blanked: bool
        """
        if blanked is None:
            raise ValueError("Invalid value for `blanked`, must not be `None`")

        self._blanked = blanked

    @property
    def channel_title(self):
        """Gets the channel_title of this Broadcast.


        :return: The channel_title of this Broadcast.
        :rtype: str
        """
        return self._channel_title

    @channel_title.setter
    def channel_title(self, channel_title):
        """Sets the channel_title of this Broadcast.


        :param channel_title: The channel_title of this Broadcast.
        :type channel_title: str
        """

        self._channel_title = channel_title

    @property
    def duration(self):
        """Gets the duration of this Broadcast.


        :return: The duration of this Broadcast.
        :rtype: BroadcastDuration
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this Broadcast.


        :param duration: The duration of this Broadcast.
        :type duration: BroadcastDuration
        """

        self._duration = duration

    @property
    def episode(self):
        """Gets the episode of this Broadcast.


        :return: The episode of this Broadcast.
        :rtype: Episode
        """
        return self._episode

    @episode.setter
    def episode(self, episode):
        """Sets the episode of this Broadcast.


        :param episode: The episode of this Broadcast.
        :type episode: Episode
        """
        if episode is None:
            raise ValueError("Invalid value for `episode`, must not be `None`")

        self._episode = episode

    @property
    def episode_id(self):
        """Gets the episode_id of this Broadcast.


        :return: The episode_id of this Broadcast.
        :rtype: str
        """
        return self._episode_id

    @episode_id.setter
    def episode_id(self, episode_id):
        """Sets the episode_id of this Broadcast.


        :param episode_id: The episode_id of this Broadcast.
        :type episode_id: str
        """
        if episode_id is None:
            raise ValueError("Invalid value for `episode_id`, must not be `None`")

        self._episode_id = episode_id

    @property
    def events(self):
        """Gets the events of this Broadcast.


        :return: The events of this Broadcast.
        :rtype: List[BroadcastEventsInner]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this Broadcast.


        :param events: The events of this Broadcast.
        :type events: List[BroadcastEventsInner]
        """

        self._events = events

    @property
    def id(self):
        """Gets the id of this Broadcast.


        :return: The id of this Broadcast.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Broadcast.


        :param id: The id of this Broadcast.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def repeat(self):
        """Gets the repeat of this Broadcast.


        :return: The repeat of this Broadcast.
        :rtype: bool
        """
        return self._repeat

    @repeat.setter
    def repeat(self, repeat):
        """Sets the repeat of this Broadcast.


        :param repeat: The repeat of this Broadcast.
        :type repeat: bool
        """
        if repeat is None:
            raise ValueError("Invalid value for `repeat`, must not be `None`")

        self._repeat = repeat

    @property
    def scheduled_end(self):
        """Gets the scheduled_end of this Broadcast.


        :return: The scheduled_end of this Broadcast.
        :rtype: str
        """
        return self._scheduled_end

    @scheduled_end.setter
    def scheduled_end(self, scheduled_end):
        """Sets the scheduled_end of this Broadcast.


        :param scheduled_end: The scheduled_end of this Broadcast.
        :type scheduled_end: str
        """
        if scheduled_end is None:
            raise ValueError("Invalid value for `scheduled_end`, must not be `None`")

        self._scheduled_end = scheduled_end

    @property
    def scheduled_start(self):
        """Gets the scheduled_start of this Broadcast.


        :return: The scheduled_start of this Broadcast.
        :rtype: str
        """
        return self._scheduled_start

    @scheduled_start.setter
    def scheduled_start(self, scheduled_start):
        """Sets the scheduled_start of this Broadcast.


        :param scheduled_start: The scheduled_start of this Broadcast.
        :type scheduled_start: str
        """
        if scheduled_start is None:
            raise ValueError("Invalid value for `scheduled_start`, must not be `None`")

        self._scheduled_start = scheduled_start

    @property
    def service_id(self):
        """Gets the service_id of this Broadcast.


        :return: The service_id of this Broadcast.
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this Broadcast.


        :param service_id: The service_id of this Broadcast.
        :type service_id: str
        """
        if service_id is None:
            raise ValueError("Invalid value for `service_id`, must not be `None`")

        self._service_id = service_id

    @property
    def transmission_end(self):
        """Gets the transmission_end of this Broadcast.


        :return: The transmission_end of this Broadcast.
        :rtype: str
        """
        return self._transmission_end

    @transmission_end.setter
    def transmission_end(self, transmission_end):
        """Sets the transmission_end of this Broadcast.


        :param transmission_end: The transmission_end of this Broadcast.
        :type transmission_end: str
        """

        self._transmission_end = transmission_end

    @property
    def transmission_start(self):
        """Gets the transmission_start of this Broadcast.


        :return: The transmission_start of this Broadcast.
        :rtype: str
        """
        return self._transmission_start

    @transmission_start.setter
    def transmission_start(self, transmission_start):
        """Sets the transmission_start of this Broadcast.


        :param transmission_start: The transmission_start of this Broadcast.
        :type transmission_start: str
        """

        self._transmission_start = transmission_start

    @property
    def type(self):
        """Gets the type of this Broadcast.


        :return: The type of this Broadcast.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Broadcast.


        :param type: The type of this Broadcast.
        :type type: str
        """
        allowed_values = ["broadcast"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def version_id(self):
        """Gets the version_id of this Broadcast.


        :return: The version_id of this Broadcast.
        :rtype: str
        """
        return self._version_id

    @version_id.setter
    def version_id(self, version_id):
        """Sets the version_id of this Broadcast.


        :param version_id: The version_id of this Broadcast.
        :type version_id: str
        """
        if version_id is None:
            raise ValueError("Invalid value for `version_id`, must not be `None`")

        self._version_id = version_id
