# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.broadcast_duration import BroadcastDuration
from openapi_server.models.clip_versions_inner_guidance import ClipVersionsInnerGuidance
from openapi_server.models.episode_versions_inner_any_of_store_session import EpisodeVersionsInnerAnyOfStoreSession
from openapi_server import util


class EpisodeVersionsInnerAnyOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, download: bool=None, duration: BroadcastDuration=None, guidance: ClipVersionsInnerGuidance=None, hd: bool=None, id: str=None, kind: str=None, store_id: str=None, store_profile: str=None, store_session: EpisodeVersionsInnerAnyOfStoreSession=None, type: str=None):
        """EpisodeVersionsInnerAnyOf - a model defined in OpenAPI

        :param download: The download of this EpisodeVersionsInnerAnyOf.
        :param duration: The duration of this EpisodeVersionsInnerAnyOf.
        :param guidance: The guidance of this EpisodeVersionsInnerAnyOf.
        :param hd: The hd of this EpisodeVersionsInnerAnyOf.
        :param id: The id of this EpisodeVersionsInnerAnyOf.
        :param kind: The kind of this EpisodeVersionsInnerAnyOf.
        :param store_id: The store_id of this EpisodeVersionsInnerAnyOf.
        :param store_profile: The store_profile of this EpisodeVersionsInnerAnyOf.
        :param store_session: The store_session of this EpisodeVersionsInnerAnyOf.
        :param type: The type of this EpisodeVersionsInnerAnyOf.
        """
        self.openapi_types = {
            'download': bool,
            'duration': BroadcastDuration,
            'guidance': ClipVersionsInnerGuidance,
            'hd': bool,
            'id': str,
            'kind': str,
            'store_id': str,
            'store_profile': str,
            'store_session': EpisodeVersionsInnerAnyOfStoreSession,
            'type': str
        }

        self.attribute_map = {
            'download': 'download',
            'duration': 'duration',
            'guidance': 'guidance',
            'hd': 'hd',
            'id': 'id',
            'kind': 'kind',
            'store_id': 'store_id',
            'store_profile': 'store_profile',
            'store_session': 'store_session',
            'type': 'type'
        }

        self._download = download
        self._duration = duration
        self._guidance = guidance
        self._hd = hd
        self._id = id
        self._kind = kind
        self._store_id = store_id
        self._store_profile = store_profile
        self._store_session = store_session
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EpisodeVersionsInnerAnyOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The episode_versions_inner_anyOf of this EpisodeVersionsInnerAnyOf.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def download(self):
        """Gets the download of this EpisodeVersionsInnerAnyOf.


        :return: The download of this EpisodeVersionsInnerAnyOf.
        :rtype: bool
        """
        return self._download

    @download.setter
    def download(self, download):
        """Sets the download of this EpisodeVersionsInnerAnyOf.


        :param download: The download of this EpisodeVersionsInnerAnyOf.
        :type download: bool
        """
        if download is None:
            raise ValueError("Invalid value for `download`, must not be `None`")

        self._download = download

    @property
    def duration(self):
        """Gets the duration of this EpisodeVersionsInnerAnyOf.


        :return: The duration of this EpisodeVersionsInnerAnyOf.
        :rtype: BroadcastDuration
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this EpisodeVersionsInnerAnyOf.


        :param duration: The duration of this EpisodeVersionsInnerAnyOf.
        :type duration: BroadcastDuration
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")

        self._duration = duration

    @property
    def guidance(self):
        """Gets the guidance of this EpisodeVersionsInnerAnyOf.


        :return: The guidance of this EpisodeVersionsInnerAnyOf.
        :rtype: ClipVersionsInnerGuidance
        """
        return self._guidance

    @guidance.setter
    def guidance(self, guidance):
        """Sets the guidance of this EpisodeVersionsInnerAnyOf.


        :param guidance: The guidance of this EpisodeVersionsInnerAnyOf.
        :type guidance: ClipVersionsInnerGuidance
        """

        self._guidance = guidance

    @property
    def hd(self):
        """Gets the hd of this EpisodeVersionsInnerAnyOf.


        :return: The hd of this EpisodeVersionsInnerAnyOf.
        :rtype: bool
        """
        return self._hd

    @hd.setter
    def hd(self, hd):
        """Sets the hd of this EpisodeVersionsInnerAnyOf.


        :param hd: The hd of this EpisodeVersionsInnerAnyOf.
        :type hd: bool
        """
        if hd is None:
            raise ValueError("Invalid value for `hd`, must not be `None`")

        self._hd = hd

    @property
    def id(self):
        """Gets the id of this EpisodeVersionsInnerAnyOf.


        :return: The id of this EpisodeVersionsInnerAnyOf.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EpisodeVersionsInnerAnyOf.


        :param id: The id of this EpisodeVersionsInnerAnyOf.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this EpisodeVersionsInnerAnyOf.


        :return: The kind of this EpisodeVersionsInnerAnyOf.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this EpisodeVersionsInnerAnyOf.


        :param kind: The kind of this EpisodeVersionsInnerAnyOf.
        :type kind: str
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")

        self._kind = kind

    @property
    def store_id(self):
        """Gets the store_id of this EpisodeVersionsInnerAnyOf.


        :return: The store_id of this EpisodeVersionsInnerAnyOf.
        :rtype: str
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """Sets the store_id of this EpisodeVersionsInnerAnyOf.


        :param store_id: The store_id of this EpisodeVersionsInnerAnyOf.
        :type store_id: str
        """
        if store_id is None:
            raise ValueError("Invalid value for `store_id`, must not be `None`")

        self._store_id = store_id

    @property
    def store_profile(self):
        """Gets the store_profile of this EpisodeVersionsInnerAnyOf.


        :return: The store_profile of this EpisodeVersionsInnerAnyOf.
        :rtype: str
        """
        return self._store_profile

    @store_profile.setter
    def store_profile(self, store_profile):
        """Sets the store_profile of this EpisodeVersionsInnerAnyOf.


        :param store_profile: The store_profile of this EpisodeVersionsInnerAnyOf.
        :type store_profile: str
        """
        if store_profile is None:
            raise ValueError("Invalid value for `store_profile`, must not be `None`")

        self._store_profile = store_profile

    @property
    def store_session(self):
        """Gets the store_session of this EpisodeVersionsInnerAnyOf.


        :return: The store_session of this EpisodeVersionsInnerAnyOf.
        :rtype: EpisodeVersionsInnerAnyOfStoreSession
        """
        return self._store_session

    @store_session.setter
    def store_session(self, store_session):
        """Sets the store_session of this EpisodeVersionsInnerAnyOf.


        :param store_session: The store_session of this EpisodeVersionsInnerAnyOf.
        :type store_session: EpisodeVersionsInnerAnyOfStoreSession
        """

        self._store_session = store_session

    @property
    def type(self):
        """Gets the type of this EpisodeVersionsInnerAnyOf.


        :return: The type of this EpisodeVersionsInnerAnyOf.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EpisodeVersionsInnerAnyOf.


        :param type: The type of this EpisodeVersionsInnerAnyOf.
        :type type: str
        """
        allowed_values = ["store_version"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
