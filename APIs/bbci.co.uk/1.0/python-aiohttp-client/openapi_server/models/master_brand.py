# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.master_brand_titles import MasterBrandTitles
from openapi_server import util


class MasterBrand(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attribution: str=None, id: str=None, ident_id: str=None, titles: MasterBrandTitles=None):
        """MasterBrand - a model defined in OpenAPI

        :param attribution: The attribution of this MasterBrand.
        :param id: The id of this MasterBrand.
        :param ident_id: The ident_id of this MasterBrand.
        :param titles: The titles of this MasterBrand.
        """
        self.openapi_types = {
            'attribution': str,
            'id': str,
            'ident_id': str,
            'titles': MasterBrandTitles
        }

        self.attribute_map = {
            'attribution': 'attribution',
            'id': 'id',
            'ident_id': 'ident_id',
            'titles': 'titles'
        }

        self._attribution = attribution
        self._id = id
        self._ident_id = ident_id
        self._titles = titles

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MasterBrand':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The master_brand of this MasterBrand.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attribution(self):
        """Gets the attribution of this MasterBrand.


        :return: The attribution of this MasterBrand.
        :rtype: str
        """
        return self._attribution

    @attribution.setter
    def attribution(self, attribution):
        """Sets the attribution of this MasterBrand.


        :param attribution: The attribution of this MasterBrand.
        :type attribution: str
        """
        if attribution is None:
            raise ValueError("Invalid value for `attribution`, must not be `None`")

        self._attribution = attribution

    @property
    def id(self):
        """Gets the id of this MasterBrand.


        :return: The id of this MasterBrand.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MasterBrand.


        :param id: The id of this MasterBrand.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def ident_id(self):
        """Gets the ident_id of this MasterBrand.


        :return: The ident_id of this MasterBrand.
        :rtype: str
        """
        return self._ident_id

    @ident_id.setter
    def ident_id(self, ident_id):
        """Sets the ident_id of this MasterBrand.


        :param ident_id: The ident_id of this MasterBrand.
        :type ident_id: str
        """

        self._ident_id = ident_id

    @property
    def titles(self):
        """Gets the titles of this MasterBrand.


        :return: The titles of this MasterBrand.
        :rtype: MasterBrandTitles
        """
        return self._titles

    @titles.setter
    def titles(self, titles):
        """Sets the titles of this MasterBrand.


        :param titles: The titles of this MasterBrand.
        :type titles: MasterBrandTitles
        """
        if titles is None:
            raise ValueError("Invalid value for `titles`, must not be `None`")

        self._titles = titles
