# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EpisodeImages(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, character_image: str=None, inherited_from: str=None, live: str=None, portrait: str=None, promotional: str=None, promotional_with_logo: str=None, standard: str=None, type: str=None):
        """EpisodeImages - a model defined in OpenAPI

        :param character_image: The character_image of this EpisodeImages.
        :param inherited_from: The inherited_from of this EpisodeImages.
        :param live: The live of this EpisodeImages.
        :param portrait: The portrait of this EpisodeImages.
        :param promotional: The promotional of this EpisodeImages.
        :param promotional_with_logo: The promotional_with_logo of this EpisodeImages.
        :param standard: The standard of this EpisodeImages.
        :param type: The type of this EpisodeImages.
        """
        self.openapi_types = {
            'character_image': str,
            'inherited_from': str,
            'live': str,
            'portrait': str,
            'promotional': str,
            'promotional_with_logo': str,
            'standard': str,
            'type': str
        }

        self.attribute_map = {
            'character_image': 'character_image',
            'inherited_from': 'inherited_from',
            'live': 'live',
            'portrait': 'portrait',
            'promotional': 'promotional',
            'promotional_with_logo': 'promotional_with_logo',
            'standard': 'standard',
            'type': 'type'
        }

        self._character_image = character_image
        self._inherited_from = inherited_from
        self._live = live
        self._portrait = portrait
        self._promotional = promotional
        self._promotional_with_logo = promotional_with_logo
        self._standard = standard
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EpisodeImages':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The episode_images of this EpisodeImages.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def character_image(self):
        """Gets the character_image of this EpisodeImages.


        :return: The character_image of this EpisodeImages.
        :rtype: str
        """
        return self._character_image

    @character_image.setter
    def character_image(self, character_image):
        """Sets the character_image of this EpisodeImages.


        :param character_image: The character_image of this EpisodeImages.
        :type character_image: str
        """

        self._character_image = character_image

    @property
    def inherited_from(self):
        """Gets the inherited_from of this EpisodeImages.


        :return: The inherited_from of this EpisodeImages.
        :rtype: str
        """
        return self._inherited_from

    @inherited_from.setter
    def inherited_from(self, inherited_from):
        """Sets the inherited_from of this EpisodeImages.


        :param inherited_from: The inherited_from of this EpisodeImages.
        :type inherited_from: str
        """

        self._inherited_from = inherited_from

    @property
    def live(self):
        """Gets the live of this EpisodeImages.


        :return: The live of this EpisodeImages.
        :rtype: str
        """
        return self._live

    @live.setter
    def live(self, live):
        """Sets the live of this EpisodeImages.


        :param live: The live of this EpisodeImages.
        :type live: str
        """

        self._live = live

    @property
    def portrait(self):
        """Gets the portrait of this EpisodeImages.


        :return: The portrait of this EpisodeImages.
        :rtype: str
        """
        return self._portrait

    @portrait.setter
    def portrait(self, portrait):
        """Sets the portrait of this EpisodeImages.


        :param portrait: The portrait of this EpisodeImages.
        :type portrait: str
        """

        self._portrait = portrait

    @property
    def promotional(self):
        """Gets the promotional of this EpisodeImages.


        :return: The promotional of this EpisodeImages.
        :rtype: str
        """
        return self._promotional

    @promotional.setter
    def promotional(self, promotional):
        """Sets the promotional of this EpisodeImages.


        :param promotional: The promotional of this EpisodeImages.
        :type promotional: str
        """

        self._promotional = promotional

    @property
    def promotional_with_logo(self):
        """Gets the promotional_with_logo of this EpisodeImages.


        :return: The promotional_with_logo of this EpisodeImages.
        :rtype: str
        """
        return self._promotional_with_logo

    @promotional_with_logo.setter
    def promotional_with_logo(self, promotional_with_logo):
        """Sets the promotional_with_logo of this EpisodeImages.


        :param promotional_with_logo: The promotional_with_logo of this EpisodeImages.
        :type promotional_with_logo: str
        """

        self._promotional_with_logo = promotional_with_logo

    @property
    def standard(self):
        """Gets the standard of this EpisodeImages.


        :return: The standard of this EpisodeImages.
        :rtype: str
        """
        return self._standard

    @standard.setter
    def standard(self, standard):
        """Sets the standard of this EpisodeImages.


        :param standard: The standard of this EpisodeImages.
        :type standard: str
        """
        if standard is None:
            raise ValueError("Invalid value for `standard`, must not be `None`")

        self._standard = standard

    @property
    def type(self):
        """Gets the type of this EpisodeImages.


        :return: The type of this EpisodeImages.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EpisodeImages.


        :param type: The type of this EpisodeImages.
        :type type: str
        """
        allowed_values = ["image"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
