# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Category(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, child_episode_count: float=None, child_programme_count: float=None, contextual_title: str=None, id: str=None, kind: str=None, parent_category: str=None, sub_categories: List[Category]=None, title: str=None, type: str=None):
        """Category - a model defined in OpenAPI

        :param child_episode_count: The child_episode_count of this Category.
        :param child_programme_count: The child_programme_count of this Category.
        :param contextual_title: The contextual_title of this Category.
        :param id: The id of this Category.
        :param kind: The kind of this Category.
        :param parent_category: The parent_category of this Category.
        :param sub_categories: The sub_categories of this Category.
        :param title: The title of this Category.
        :param type: The type of this Category.
        """
        self.openapi_types = {
            'child_episode_count': float,
            'child_programme_count': float,
            'contextual_title': str,
            'id': str,
            'kind': str,
            'parent_category': str,
            'sub_categories': List[Category],
            'title': str,
            'type': str
        }

        self.attribute_map = {
            'child_episode_count': 'child_episode_count',
            'child_programme_count': 'child_programme_count',
            'contextual_title': 'contextual_title',
            'id': 'id',
            'kind': 'kind',
            'parent_category': 'parent_category',
            'sub_categories': 'sub_categories',
            'title': 'title',
            'type': 'type'
        }

        self._child_episode_count = child_episode_count
        self._child_programme_count = child_programme_count
        self._contextual_title = contextual_title
        self._id = id
        self._kind = kind
        self._parent_category = parent_category
        self._sub_categories = sub_categories
        self._title = title
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Category':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The category of this Category.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def child_episode_count(self):
        """Gets the child_episode_count of this Category.


        :return: The child_episode_count of this Category.
        :rtype: float
        """
        return self._child_episode_count

    @child_episode_count.setter
    def child_episode_count(self, child_episode_count):
        """Sets the child_episode_count of this Category.


        :param child_episode_count: The child_episode_count of this Category.
        :type child_episode_count: float
        """

        self._child_episode_count = child_episode_count

    @property
    def child_programme_count(self):
        """Gets the child_programme_count of this Category.


        :return: The child_programme_count of this Category.
        :rtype: float
        """
        return self._child_programme_count

    @child_programme_count.setter
    def child_programme_count(self, child_programme_count):
        """Sets the child_programme_count of this Category.


        :param child_programme_count: The child_programme_count of this Category.
        :type child_programme_count: float
        """

        self._child_programme_count = child_programme_count

    @property
    def contextual_title(self):
        """Gets the contextual_title of this Category.


        :return: The contextual_title of this Category.
        :rtype: str
        """
        return self._contextual_title

    @contextual_title.setter
    def contextual_title(self, contextual_title):
        """Sets the contextual_title of this Category.


        :param contextual_title: The contextual_title of this Category.
        :type contextual_title: str
        """

        self._contextual_title = contextual_title

    @property
    def id(self):
        """Gets the id of this Category.


        :return: The id of this Category.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Category.


        :param id: The id of this Category.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this Category.


        :return: The kind of this Category.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Category.


        :param kind: The kind of this Category.
        :type kind: str
        """
        allowed_values = ["genre", "accessibility", "national", "childrens"]  # noqa: E501
        if kind not in allowed_values:
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def parent_category(self):
        """Gets the parent_category of this Category.


        :return: The parent_category of this Category.
        :rtype: str
        """
        return self._parent_category

    @parent_category.setter
    def parent_category(self, parent_category):
        """Sets the parent_category of this Category.


        :param parent_category: The parent_category of this Category.
        :type parent_category: str
        """

        self._parent_category = parent_category

    @property
    def sub_categories(self):
        """Gets the sub_categories of this Category.


        :return: The sub_categories of this Category.
        :rtype: List[Category]
        """
        return self._sub_categories

    @sub_categories.setter
    def sub_categories(self, sub_categories):
        """Sets the sub_categories of this Category.


        :param sub_categories: The sub_categories of this Category.
        :type sub_categories: List[Category]
        """

        self._sub_categories = sub_categories

    @property
    def title(self):
        """Gets the title of this Category.


        :return: The title of this Category.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Category.


        :param title: The title of this Category.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def type(self):
        """Gets the type of this Category.


        :return: The type of this Category.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Category.


        :param type: The type of this Category.
        :type type: str
        """
        allowed_values = ["category"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
