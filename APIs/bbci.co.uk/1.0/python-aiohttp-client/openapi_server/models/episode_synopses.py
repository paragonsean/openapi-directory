# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EpisodeSynopses(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, editorial: str=None, large: str=None, live: str=None, medium: str=None, preview: str=None, programme_small: str=None, small: str=None):
        """EpisodeSynopses - a model defined in OpenAPI

        :param editorial: The editorial of this EpisodeSynopses.
        :param large: The large of this EpisodeSynopses.
        :param live: The live of this EpisodeSynopses.
        :param medium: The medium of this EpisodeSynopses.
        :param preview: The preview of this EpisodeSynopses.
        :param programme_small: The programme_small of this EpisodeSynopses.
        :param small: The small of this EpisodeSynopses.
        """
        self.openapi_types = {
            'editorial': str,
            'large': str,
            'live': str,
            'medium': str,
            'preview': str,
            'programme_small': str,
            'small': str
        }

        self.attribute_map = {
            'editorial': 'editorial',
            'large': 'large',
            'live': 'live',
            'medium': 'medium',
            'preview': 'preview',
            'programme_small': 'programme_small',
            'small': 'small'
        }

        self._editorial = editorial
        self._large = large
        self._live = live
        self._medium = medium
        self._preview = preview
        self._programme_small = programme_small
        self._small = small

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EpisodeSynopses':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The episode_synopses of this EpisodeSynopses.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def editorial(self):
        """Gets the editorial of this EpisodeSynopses.


        :return: The editorial of this EpisodeSynopses.
        :rtype: str
        """
        return self._editorial

    @editorial.setter
    def editorial(self, editorial):
        """Sets the editorial of this EpisodeSynopses.


        :param editorial: The editorial of this EpisodeSynopses.
        :type editorial: str
        """

        self._editorial = editorial

    @property
    def large(self):
        """Gets the large of this EpisodeSynopses.


        :return: The large of this EpisodeSynopses.
        :rtype: str
        """
        return self._large

    @large.setter
    def large(self, large):
        """Sets the large of this EpisodeSynopses.


        :param large: The large of this EpisodeSynopses.
        :type large: str
        """

        self._large = large

    @property
    def live(self):
        """Gets the live of this EpisodeSynopses.


        :return: The live of this EpisodeSynopses.
        :rtype: str
        """
        return self._live

    @live.setter
    def live(self, live):
        """Sets the live of this EpisodeSynopses.


        :param live: The live of this EpisodeSynopses.
        :type live: str
        """

        self._live = live

    @property
    def medium(self):
        """Gets the medium of this EpisodeSynopses.


        :return: The medium of this EpisodeSynopses.
        :rtype: str
        """
        return self._medium

    @medium.setter
    def medium(self, medium):
        """Sets the medium of this EpisodeSynopses.


        :param medium: The medium of this EpisodeSynopses.
        :type medium: str
        """

        self._medium = medium

    @property
    def preview(self):
        """Gets the preview of this EpisodeSynopses.


        :return: The preview of this EpisodeSynopses.
        :rtype: str
        """
        return self._preview

    @preview.setter
    def preview(self, preview):
        """Sets the preview of this EpisodeSynopses.


        :param preview: The preview of this EpisodeSynopses.
        :type preview: str
        """

        self._preview = preview

    @property
    def programme_small(self):
        """Gets the programme_small of this EpisodeSynopses.


        :return: The programme_small of this EpisodeSynopses.
        :rtype: str
        """
        return self._programme_small

    @programme_small.setter
    def programme_small(self, programme_small):
        """Sets the programme_small of this EpisodeSynopses.


        :param programme_small: The programme_small of this EpisodeSynopses.
        :type programme_small: str
        """

        self._programme_small = programme_small

    @property
    def small(self):
        """Gets the small of this EpisodeSynopses.


        :return: The small of this EpisodeSynopses.
        :rtype: str
        """
        return self._small

    @small.setter
    def small(self, small):
        """Sets the small of this EpisodeSynopses.


        :param small: The small of this EpisodeSynopses.
        :type small: str
        """

        self._small = small
