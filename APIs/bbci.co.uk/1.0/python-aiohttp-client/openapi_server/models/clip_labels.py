# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ClipLabels(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, editorial: str=None):
        """ClipLabels - a model defined in OpenAPI

        :param category: The category of this ClipLabels.
        :param editorial: The editorial of this ClipLabels.
        """
        self.openapi_types = {
            'category': str,
            'editorial': str
        }

        self.attribute_map = {
            'category': 'category',
            'editorial': 'editorial'
        }

        self._category = category
        self._editorial = editorial

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClipLabels':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The clip_labels of this ClipLabels.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this ClipLabels.


        :return: The category of this ClipLabels.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this ClipLabels.


        :param category: The category of this ClipLabels.
        :type category: str
        """

        self._category = category

    @property
    def editorial(self):
        """Gets the editorial of this ClipLabels.


        :return: The editorial of this ClipLabels.
        :rtype: str
        """
        return self._editorial

    @editorial.setter
    def editorial(self, editorial):
        """Sets the editorial of this ClipLabels.


        :param editorial: The editorial of this ClipLabels.
        :type editorial: str
        """

        self._editorial = editorial
