# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.episode_tests_inner_variants_inner import EpisodeTestsInnerVariantsInner
from openapi_server import util


class EpisodeTestsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, status: str=None, variants: List[EpisodeTestsInnerVariantsInner]=None):
        """EpisodeTestsInner - a model defined in OpenAPI

        :param id: The id of this EpisodeTestsInner.
        :param status: The status of this EpisodeTestsInner.
        :param variants: The variants of this EpisodeTestsInner.
        """
        self.openapi_types = {
            'id': str,
            'status': str,
            'variants': List[EpisodeTestsInnerVariantsInner]
        }

        self.attribute_map = {
            'id': 'id',
            'status': 'status',
            'variants': 'variants'
        }

        self._id = id
        self._status = status
        self._variants = variants

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EpisodeTestsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The episode_tests_inner of this EpisodeTestsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this EpisodeTestsInner.


        :return: The id of this EpisodeTestsInner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EpisodeTestsInner.


        :param id: The id of this EpisodeTestsInner.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def status(self):
        """Gets the status of this EpisodeTestsInner.


        :return: The status of this EpisodeTestsInner.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this EpisodeTestsInner.


        :param status: The status of this EpisodeTestsInner.
        :type status: str
        """
        allowed_values = ["active"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def variants(self):
        """Gets the variants of this EpisodeTestsInner.


        :return: The variants of this EpisodeTestsInner.
        :rtype: List[EpisodeTestsInnerVariantsInner]
        """
        return self._variants

    @variants.setter
    def variants(self, variants):
        """Sets the variants of this EpisodeTestsInner.


        :param variants: The variants of this EpisodeTestsInner.
        :type variants: List[EpisodeTestsInnerVariantsInner]
        """
        if variants is None:
            raise ValueError("Invalid value for `variants`, must not be `None`")

        self._variants = variants
