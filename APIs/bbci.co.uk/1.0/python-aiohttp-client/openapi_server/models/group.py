# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.clip_versions_inner_guidance_text import ClipVersionsInnerGuidanceText
from openapi_server.models.group_images import GroupImages
from openapi_server.models.group_initial_children_inner import GroupInitialChildrenInner
from openapi_server.models.group_related_links_inner import GroupRelatedLinksInner
from openapi_server.models.master_brand import MasterBrand
from openapi_server import util


class Group(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: float=None, episode_sort_direction: str=None, group_type: str=None, id: str=None, images: GroupImages=None, initial_children: List[GroupInitialChildrenInner]=None, master_brand: MasterBrand=None, related_links: List[GroupRelatedLinksInner]=None, short_title: str=None, stacked: bool=None, synopses: ClipVersionsInnerGuidanceText=None, title: str=None, type: str=None):
        """Group - a model defined in OpenAPI

        :param count: The count of this Group.
        :param episode_sort_direction: The episode_sort_direction of this Group.
        :param group_type: The group_type of this Group.
        :param id: The id of this Group.
        :param images: The images of this Group.
        :param initial_children: The initial_children of this Group.
        :param master_brand: The master_brand of this Group.
        :param related_links: The related_links of this Group.
        :param short_title: The short_title of this Group.
        :param stacked: The stacked of this Group.
        :param synopses: The synopses of this Group.
        :param title: The title of this Group.
        :param type: The type of this Group.
        """
        self.openapi_types = {
            'count': float,
            'episode_sort_direction': str,
            'group_type': str,
            'id': str,
            'images': GroupImages,
            'initial_children': List[GroupInitialChildrenInner],
            'master_brand': MasterBrand,
            'related_links': List[GroupRelatedLinksInner],
            'short_title': str,
            'stacked': bool,
            'synopses': ClipVersionsInnerGuidanceText,
            'title': str,
            'type': str
        }

        self.attribute_map = {
            'count': 'count',
            'episode_sort_direction': 'episode_sort_direction',
            'group_type': 'group_type',
            'id': 'id',
            'images': 'images',
            'initial_children': 'initial_children',
            'master_brand': 'master_brand',
            'related_links': 'related_links',
            'short_title': 'short_title',
            'stacked': 'stacked',
            'synopses': 'synopses',
            'title': 'title',
            'type': 'type'
        }

        self._count = count
        self._episode_sort_direction = episode_sort_direction
        self._group_type = group_type
        self._id = id
        self._images = images
        self._initial_children = initial_children
        self._master_brand = master_brand
        self._related_links = related_links
        self._short_title = short_title
        self._stacked = stacked
        self._synopses = synopses
        self._title = title
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Group':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The group of this Group.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this Group.


        :return: The count of this Group.
        :rtype: float
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this Group.


        :param count: The count of this Group.
        :type count: float
        """

        self._count = count

    @property
    def episode_sort_direction(self):
        """Gets the episode_sort_direction of this Group.


        :return: The episode_sort_direction of this Group.
        :rtype: str
        """
        return self._episode_sort_direction

    @episode_sort_direction.setter
    def episode_sort_direction(self, episode_sort_direction):
        """Sets the episode_sort_direction of this Group.


        :param episode_sort_direction: The episode_sort_direction of this Group.
        :type episode_sort_direction: str
        """

        self._episode_sort_direction = episode_sort_direction

    @property
    def group_type(self):
        """Gets the group_type of this Group.


        :return: The group_type of this Group.
        :rtype: str
        """
        return self._group_type

    @group_type.setter
    def group_type(self, group_type):
        """Sets the group_type of this Group.


        :param group_type: The group_type of this Group.
        :type group_type: str
        """
        allowed_values = ["tleo", "curated", "automated", "event"]  # noqa: E501
        if group_type not in allowed_values:
            raise ValueError(
                "Invalid value for `group_type` ({0}), must be one of {1}"
                .format(group_type, allowed_values)
            )

        self._group_type = group_type

    @property
    def id(self):
        """Gets the id of this Group.


        :return: The id of this Group.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Group.


        :param id: The id of this Group.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def images(self):
        """Gets the images of this Group.


        :return: The images of this Group.
        :rtype: GroupImages
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this Group.


        :param images: The images of this Group.
        :type images: GroupImages
        """

        self._images = images

    @property
    def initial_children(self):
        """Gets the initial_children of this Group.


        :return: The initial_children of this Group.
        :rtype: List[GroupInitialChildrenInner]
        """
        return self._initial_children

    @initial_children.setter
    def initial_children(self, initial_children):
        """Sets the initial_children of this Group.


        :param initial_children: The initial_children of this Group.
        :type initial_children: List[GroupInitialChildrenInner]
        """

        self._initial_children = initial_children

    @property
    def master_brand(self):
        """Gets the master_brand of this Group.


        :return: The master_brand of this Group.
        :rtype: MasterBrand
        """
        return self._master_brand

    @master_brand.setter
    def master_brand(self, master_brand):
        """Sets the master_brand of this Group.


        :param master_brand: The master_brand of this Group.
        :type master_brand: MasterBrand
        """

        self._master_brand = master_brand

    @property
    def related_links(self):
        """Gets the related_links of this Group.


        :return: The related_links of this Group.
        :rtype: List[GroupRelatedLinksInner]
        """
        return self._related_links

    @related_links.setter
    def related_links(self, related_links):
        """Sets the related_links of this Group.


        :param related_links: The related_links of this Group.
        :type related_links: List[GroupRelatedLinksInner]
        """

        self._related_links = related_links

    @property
    def short_title(self):
        """Gets the short_title of this Group.


        :return: The short_title of this Group.
        :rtype: str
        """
        return self._short_title

    @short_title.setter
    def short_title(self, short_title):
        """Sets the short_title of this Group.


        :param short_title: The short_title of this Group.
        :type short_title: str
        """

        self._short_title = short_title

    @property
    def stacked(self):
        """Gets the stacked of this Group.


        :return: The stacked of this Group.
        :rtype: bool
        """
        return self._stacked

    @stacked.setter
    def stacked(self, stacked):
        """Sets the stacked of this Group.


        :param stacked: The stacked of this Group.
        :type stacked: bool
        """

        self._stacked = stacked

    @property
    def synopses(self):
        """Gets the synopses of this Group.


        :return: The synopses of this Group.
        :rtype: ClipVersionsInnerGuidanceText
        """
        return self._synopses

    @synopses.setter
    def synopses(self, synopses):
        """Sets the synopses of this Group.


        :param synopses: The synopses of this Group.
        :type synopses: ClipVersionsInnerGuidanceText
        """

        self._synopses = synopses

    @property
    def title(self):
        """Gets the title of this Group.


        :return: The title of this Group.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Group.


        :param title: The title of this Group.
        :type title: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this Group.


        :return: The type of this Group.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Group.


        :param type: The type of this Group.
        :type type: str
        """
        allowed_values = ["group", "group_large"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
