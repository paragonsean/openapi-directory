# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.broadcast import Broadcast
from openapi_server.models.broadcast_duration import BroadcastDuration
from openapi_server.models.broadcast_events_inner import BroadcastEventsInner
from openapi_server.models.episode import Episode
from openapi_server.models.episode_images import EpisodeImages
from openapi_server.models.episode_labels import EpisodeLabels
from openapi_server.models.episode_next_broadcast import EpisodeNextBroadcast
from openapi_server.models.episode_related_links_inner import EpisodeRelatedLinksInner
from openapi_server.models.episode_synopses import EpisodeSynopses
from openapi_server.models.episode_tests_inner import EpisodeTestsInner
from openapi_server.models.episode_versions_inner import EpisodeVersionsInner
from openapi_server.models.master_brand import MasterBrand
from openapi_server import util


class GroupInitialChildrenInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audio_described: bool=None, categories: List[str]=None, childrens: bool=None, editorial_subtitle: str=None, editorial_title: str=None, event_group_id: str=None, guidance: bool=None, has_credits: bool=None, id: str=None, images: EpisodeImages=None, labels: EpisodeLabels=None, lexical_sort_letter: str=None, live: bool=None, live_subtitle: str=None, live_title: str=None, master_brand: MasterBrand=None, next_broadcast: EpisodeNextBroadcast=None, numeric_tleo_position: float=None, original_title: str=None, parent_id: str=None, parent_position: float=None, preview_id: str=None, programme_type: str=None, promoted: bool=None, related_links: List[EpisodeRelatedLinksInner]=None, release_date: str=None, release_date_time: str=None, requires_ab: list[str]=None, requires_sign_in: bool=None, requires_tv_licence: bool=None, signed: bool=None, slice_id: str=None, slice_subtitle: str=None, status: str=None, subtitle: str=None, synopses: EpisodeSynopses=None, tests: List[EpisodeTestsInner]=None, title: str=None, tleo_id: str=None, tleo_type: str=None, type: str=None, versions: List[EpisodeVersionsInner]=None, available_on_hd_service: str=None, blanked: bool=None, channel_title: str=None, duration: BroadcastDuration=None, episode: Episode=None, episode_id: str=None, events: List[BroadcastEventsInner]=None, repeat: bool=None, scheduled_end: str=None, scheduled_start: str=None, service_id: str=None, transmission_end: str=None, transmission_start: str=None, version_id: str=None):
        """GroupInitialChildrenInner - a model defined in OpenAPI

        :param audio_described: The audio_described of this GroupInitialChildrenInner.
        :param categories: The categories of this GroupInitialChildrenInner.
        :param childrens: The childrens of this GroupInitialChildrenInner.
        :param editorial_subtitle: The editorial_subtitle of this GroupInitialChildrenInner.
        :param editorial_title: The editorial_title of this GroupInitialChildrenInner.
        :param event_group_id: The event_group_id of this GroupInitialChildrenInner.
        :param guidance: The guidance of this GroupInitialChildrenInner.
        :param has_credits: The has_credits of this GroupInitialChildrenInner.
        :param id: The id of this GroupInitialChildrenInner.
        :param images: The images of this GroupInitialChildrenInner.
        :param labels: The labels of this GroupInitialChildrenInner.
        :param lexical_sort_letter: The lexical_sort_letter of this GroupInitialChildrenInner.
        :param live: The live of this GroupInitialChildrenInner.
        :param live_subtitle: The live_subtitle of this GroupInitialChildrenInner.
        :param live_title: The live_title of this GroupInitialChildrenInner.
        :param master_brand: The master_brand of this GroupInitialChildrenInner.
        :param next_broadcast: The next_broadcast of this GroupInitialChildrenInner.
        :param numeric_tleo_position: The numeric_tleo_position of this GroupInitialChildrenInner.
        :param original_title: The original_title of this GroupInitialChildrenInner.
        :param parent_id: The parent_id of this GroupInitialChildrenInner.
        :param parent_position: The parent_position of this GroupInitialChildrenInner.
        :param preview_id: The preview_id of this GroupInitialChildrenInner.
        :param programme_type: The programme_type of this GroupInitialChildrenInner.
        :param promoted: The promoted of this GroupInitialChildrenInner.
        :param related_links: The related_links of this GroupInitialChildrenInner.
        :param release_date: The release_date of this GroupInitialChildrenInner.
        :param release_date_time: The release_date_time of this GroupInitialChildrenInner.
        :param requires_ab: The requires_ab of this GroupInitialChildrenInner.
        :param requires_sign_in: The requires_sign_in of this GroupInitialChildrenInner.
        :param requires_tv_licence: The requires_tv_licence of this GroupInitialChildrenInner.
        :param signed: The signed of this GroupInitialChildrenInner.
        :param slice_id: The slice_id of this GroupInitialChildrenInner.
        :param slice_subtitle: The slice_subtitle of this GroupInitialChildrenInner.
        :param status: The status of this GroupInitialChildrenInner.
        :param subtitle: The subtitle of this GroupInitialChildrenInner.
        :param synopses: The synopses of this GroupInitialChildrenInner.
        :param tests: The tests of this GroupInitialChildrenInner.
        :param title: The title of this GroupInitialChildrenInner.
        :param tleo_id: The tleo_id of this GroupInitialChildrenInner.
        :param tleo_type: The tleo_type of this GroupInitialChildrenInner.
        :param type: The type of this GroupInitialChildrenInner.
        :param versions: The versions of this GroupInitialChildrenInner.
        :param available_on_hd_service: The available_on_hd_service of this GroupInitialChildrenInner.
        :param blanked: The blanked of this GroupInitialChildrenInner.
        :param channel_title: The channel_title of this GroupInitialChildrenInner.
        :param duration: The duration of this GroupInitialChildrenInner.
        :param episode: The episode of this GroupInitialChildrenInner.
        :param episode_id: The episode_id of this GroupInitialChildrenInner.
        :param events: The events of this GroupInitialChildrenInner.
        :param repeat: The repeat of this GroupInitialChildrenInner.
        :param scheduled_end: The scheduled_end of this GroupInitialChildrenInner.
        :param scheduled_start: The scheduled_start of this GroupInitialChildrenInner.
        :param service_id: The service_id of this GroupInitialChildrenInner.
        :param transmission_end: The transmission_end of this GroupInitialChildrenInner.
        :param transmission_start: The transmission_start of this GroupInitialChildrenInner.
        :param version_id: The version_id of this GroupInitialChildrenInner.
        """
        self.openapi_types = {
            'audio_described': bool,
            'categories': List[str],
            'childrens': bool,
            'editorial_subtitle': str,
            'editorial_title': str,
            'event_group_id': str,
            'guidance': bool,
            'has_credits': bool,
            'id': str,
            'images': EpisodeImages,
            'labels': EpisodeLabels,
            'lexical_sort_letter': str,
            'live': bool,
            'live_subtitle': str,
            'live_title': str,
            'master_brand': MasterBrand,
            'next_broadcast': EpisodeNextBroadcast,
            'numeric_tleo_position': float,
            'original_title': str,
            'parent_id': str,
            'parent_position': float,
            'preview_id': str,
            'programme_type': str,
            'promoted': bool,
            'related_links': List[EpisodeRelatedLinksInner],
            'release_date': str,
            'release_date_time': str,
            'requires_ab': list[str],
            'requires_sign_in': bool,
            'requires_tv_licence': bool,
            'signed': bool,
            'slice_id': str,
            'slice_subtitle': str,
            'status': str,
            'subtitle': str,
            'synopses': EpisodeSynopses,
            'tests': List[EpisodeTestsInner],
            'title': str,
            'tleo_id': str,
            'tleo_type': str,
            'type': str,
            'versions': List[EpisodeVersionsInner],
            'available_on_hd_service': str,
            'blanked': bool,
            'channel_title': str,
            'duration': BroadcastDuration,
            'episode': Episode,
            'episode_id': str,
            'events': List[BroadcastEventsInner],
            'repeat': bool,
            'scheduled_end': str,
            'scheduled_start': str,
            'service_id': str,
            'transmission_end': str,
            'transmission_start': str,
            'version_id': str
        }

        self.attribute_map = {
            'audio_described': 'audio_described',
            'categories': 'categories',
            'childrens': 'childrens',
            'editorial_subtitle': 'editorial_subtitle',
            'editorial_title': 'editorial_title',
            'event_group_id': 'event_group_id',
            'guidance': 'guidance',
            'has_credits': 'has_credits',
            'id': 'id',
            'images': 'images',
            'labels': 'labels',
            'lexical_sort_letter': 'lexical_sort_letter',
            'live': 'live',
            'live_subtitle': 'live_subtitle',
            'live_title': 'live_title',
            'master_brand': 'master_brand',
            'next_broadcast': 'next_broadcast',
            'numeric_tleo_position': 'numeric_tleo_position',
            'original_title': 'original_title',
            'parent_id': 'parent_id',
            'parent_position': 'parent_position',
            'preview_id': 'preview_id',
            'programme_type': 'programme_type',
            'promoted': 'promoted',
            'related_links': 'related_links',
            'release_date': 'release_date',
            'release_date_time': 'release_date_time',
            'requires_ab': 'requires_ab',
            'requires_sign_in': 'requires_sign_in',
            'requires_tv_licence': 'requires_tv_licence',
            'signed': 'signed',
            'slice_id': 'slice_id',
            'slice_subtitle': 'slice_subtitle',
            'status': 'status',
            'subtitle': 'subtitle',
            'synopses': 'synopses',
            'tests': 'tests',
            'title': 'title',
            'tleo_id': 'tleo_id',
            'tleo_type': 'tleo_type',
            'type': 'type',
            'versions': 'versions',
            'available_on_hd_service': 'available_on_hd_service',
            'blanked': 'blanked',
            'channel_title': 'channel_title',
            'duration': 'duration',
            'episode': 'episode',
            'episode_id': 'episode_id',
            'events': 'events',
            'repeat': 'repeat',
            'scheduled_end': 'scheduled_end',
            'scheduled_start': 'scheduled_start',
            'service_id': 'service_id',
            'transmission_end': 'transmission_end',
            'transmission_start': 'transmission_start',
            'version_id': 'version_id'
        }

        self._audio_described = audio_described
        self._categories = categories
        self._childrens = childrens
        self._editorial_subtitle = editorial_subtitle
        self._editorial_title = editorial_title
        self._event_group_id = event_group_id
        self._guidance = guidance
        self._has_credits = has_credits
        self._id = id
        self._images = images
        self._labels = labels
        self._lexical_sort_letter = lexical_sort_letter
        self._live = live
        self._live_subtitle = live_subtitle
        self._live_title = live_title
        self._master_brand = master_brand
        self._next_broadcast = next_broadcast
        self._numeric_tleo_position = numeric_tleo_position
        self._original_title = original_title
        self._parent_id = parent_id
        self._parent_position = parent_position
        self._preview_id = preview_id
        self._programme_type = programme_type
        self._promoted = promoted
        self._related_links = related_links
        self._release_date = release_date
        self._release_date_time = release_date_time
        self._requires_ab = requires_ab
        self._requires_sign_in = requires_sign_in
        self._requires_tv_licence = requires_tv_licence
        self._signed = signed
        self._slice_id = slice_id
        self._slice_subtitle = slice_subtitle
        self._status = status
        self._subtitle = subtitle
        self._synopses = synopses
        self._tests = tests
        self._title = title
        self._tleo_id = tleo_id
        self._tleo_type = tleo_type
        self._type = type
        self._versions = versions
        self._available_on_hd_service = available_on_hd_service
        self._blanked = blanked
        self._channel_title = channel_title
        self._duration = duration
        self._episode = episode
        self._episode_id = episode_id
        self._events = events
        self._repeat = repeat
        self._scheduled_end = scheduled_end
        self._scheduled_start = scheduled_start
        self._service_id = service_id
        self._transmission_end = transmission_end
        self._transmission_start = transmission_start
        self._version_id = version_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GroupInitialChildrenInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The group_initial_children_inner of this GroupInitialChildrenInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audio_described(self):
        """Gets the audio_described of this GroupInitialChildrenInner.


        :return: The audio_described of this GroupInitialChildrenInner.
        :rtype: bool
        """
        return self._audio_described

    @audio_described.setter
    def audio_described(self, audio_described):
        """Sets the audio_described of this GroupInitialChildrenInner.


        :param audio_described: The audio_described of this GroupInitialChildrenInner.
        :type audio_described: bool
        """
        if audio_described is None:
            raise ValueError("Invalid value for `audio_described`, must not be `None`")

        self._audio_described = audio_described

    @property
    def categories(self):
        """Gets the categories of this GroupInitialChildrenInner.


        :return: The categories of this GroupInitialChildrenInner.
        :rtype: List[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this GroupInitialChildrenInner.


        :param categories: The categories of this GroupInitialChildrenInner.
        :type categories: List[str]
        """
        if categories is None:
            raise ValueError("Invalid value for `categories`, must not be `None`")

        self._categories = categories

    @property
    def childrens(self):
        """Gets the childrens of this GroupInitialChildrenInner.


        :return: The childrens of this GroupInitialChildrenInner.
        :rtype: bool
        """
        return self._childrens

    @childrens.setter
    def childrens(self, childrens):
        """Sets the childrens of this GroupInitialChildrenInner.


        :param childrens: The childrens of this GroupInitialChildrenInner.
        :type childrens: bool
        """

        self._childrens = childrens

    @property
    def editorial_subtitle(self):
        """Gets the editorial_subtitle of this GroupInitialChildrenInner.


        :return: The editorial_subtitle of this GroupInitialChildrenInner.
        :rtype: str
        """
        return self._editorial_subtitle

    @editorial_subtitle.setter
    def editorial_subtitle(self, editorial_subtitle):
        """Sets the editorial_subtitle of this GroupInitialChildrenInner.


        :param editorial_subtitle: The editorial_subtitle of this GroupInitialChildrenInner.
        :type editorial_subtitle: str
        """

        self._editorial_subtitle = editorial_subtitle

    @property
    def editorial_title(self):
        """Gets the editorial_title of this GroupInitialChildrenInner.


        :return: The editorial_title of this GroupInitialChildrenInner.
        :rtype: str
        """
        return self._editorial_title

    @editorial_title.setter
    def editorial_title(self, editorial_title):
        """Sets the editorial_title of this GroupInitialChildrenInner.


        :param editorial_title: The editorial_title of this GroupInitialChildrenInner.
        :type editorial_title: str
        """

        self._editorial_title = editorial_title

    @property
    def event_group_id(self):
        """Gets the event_group_id of this GroupInitialChildrenInner.


        :return: The event_group_id of this GroupInitialChildrenInner.
        :rtype: str
        """
        return self._event_group_id

    @event_group_id.setter
    def event_group_id(self, event_group_id):
        """Sets the event_group_id of this GroupInitialChildrenInner.


        :param event_group_id: The event_group_id of this GroupInitialChildrenInner.
        :type event_group_id: str
        """

        self._event_group_id = event_group_id

    @property
    def guidance(self):
        """Gets the guidance of this GroupInitialChildrenInner.


        :return: The guidance of this GroupInitialChildrenInner.
        :rtype: bool
        """
        return self._guidance

    @guidance.setter
    def guidance(self, guidance):
        """Sets the guidance of this GroupInitialChildrenInner.


        :param guidance: The guidance of this GroupInitialChildrenInner.
        :type guidance: bool
        """
        if guidance is None:
            raise ValueError("Invalid value for `guidance`, must not be `None`")

        self._guidance = guidance

    @property
    def has_credits(self):
        """Gets the has_credits of this GroupInitialChildrenInner.


        :return: The has_credits of this GroupInitialChildrenInner.
        :rtype: bool
        """
        return self._has_credits

    @has_credits.setter
    def has_credits(self, has_credits):
        """Sets the has_credits of this GroupInitialChildrenInner.


        :param has_credits: The has_credits of this GroupInitialChildrenInner.
        :type has_credits: bool
        """

        self._has_credits = has_credits

    @property
    def id(self):
        """Gets the id of this GroupInitialChildrenInner.


        :return: The id of this GroupInitialChildrenInner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GroupInitialChildrenInner.


        :param id: The id of this GroupInitialChildrenInner.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def images(self):
        """Gets the images of this GroupInitialChildrenInner.


        :return: The images of this GroupInitialChildrenInner.
        :rtype: EpisodeImages
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this GroupInitialChildrenInner.


        :param images: The images of this GroupInitialChildrenInner.
        :type images: EpisodeImages
        """
        if images is None:
            raise ValueError("Invalid value for `images`, must not be `None`")

        self._images = images

    @property
    def labels(self):
        """Gets the labels of this GroupInitialChildrenInner.


        :return: The labels of this GroupInitialChildrenInner.
        :rtype: EpisodeLabels
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this GroupInitialChildrenInner.


        :param labels: The labels of this GroupInitialChildrenInner.
        :type labels: EpisodeLabels
        """

        self._labels = labels

    @property
    def lexical_sort_letter(self):
        """Gets the lexical_sort_letter of this GroupInitialChildrenInner.


        :return: The lexical_sort_letter of this GroupInitialChildrenInner.
        :rtype: str
        """
        return self._lexical_sort_letter

    @lexical_sort_letter.setter
    def lexical_sort_letter(self, lexical_sort_letter):
        """Sets the lexical_sort_letter of this GroupInitialChildrenInner.


        :param lexical_sort_letter: The lexical_sort_letter of this GroupInitialChildrenInner.
        :type lexical_sort_letter: str
        """
        if lexical_sort_letter is None:
            raise ValueError("Invalid value for `lexical_sort_letter`, must not be `None`")

        self._lexical_sort_letter = lexical_sort_letter

    @property
    def live(self):
        """Gets the live of this GroupInitialChildrenInner.


        :return: The live of this GroupInitialChildrenInner.
        :rtype: bool
        """
        return self._live

    @live.setter
    def live(self, live):
        """Sets the live of this GroupInitialChildrenInner.


        :param live: The live of this GroupInitialChildrenInner.
        :type live: bool
        """

        self._live = live

    @property
    def live_subtitle(self):
        """Gets the live_subtitle of this GroupInitialChildrenInner.


        :return: The live_subtitle of this GroupInitialChildrenInner.
        :rtype: str
        """
        return self._live_subtitle

    @live_subtitle.setter
    def live_subtitle(self, live_subtitle):
        """Sets the live_subtitle of this GroupInitialChildrenInner.


        :param live_subtitle: The live_subtitle of this GroupInitialChildrenInner.
        :type live_subtitle: str
        """

        self._live_subtitle = live_subtitle

    @property
    def live_title(self):
        """Gets the live_title of this GroupInitialChildrenInner.


        :return: The live_title of this GroupInitialChildrenInner.
        :rtype: str
        """
        return self._live_title

    @live_title.setter
    def live_title(self, live_title):
        """Sets the live_title of this GroupInitialChildrenInner.


        :param live_title: The live_title of this GroupInitialChildrenInner.
        :type live_title: str
        """

        self._live_title = live_title

    @property
    def master_brand(self):
        """Gets the master_brand of this GroupInitialChildrenInner.


        :return: The master_brand of this GroupInitialChildrenInner.
        :rtype: MasterBrand
        """
        return self._master_brand

    @master_brand.setter
    def master_brand(self, master_brand):
        """Sets the master_brand of this GroupInitialChildrenInner.


        :param master_brand: The master_brand of this GroupInitialChildrenInner.
        :type master_brand: MasterBrand
        """
        if master_brand is None:
            raise ValueError("Invalid value for `master_brand`, must not be `None`")

        self._master_brand = master_brand

    @property
    def next_broadcast(self):
        """Gets the next_broadcast of this GroupInitialChildrenInner.


        :return: The next_broadcast of this GroupInitialChildrenInner.
        :rtype: EpisodeNextBroadcast
        """
        return self._next_broadcast

    @next_broadcast.setter
    def next_broadcast(self, next_broadcast):
        """Sets the next_broadcast of this GroupInitialChildrenInner.


        :param next_broadcast: The next_broadcast of this GroupInitialChildrenInner.
        :type next_broadcast: EpisodeNextBroadcast
        """

        self._next_broadcast = next_broadcast

    @property
    def numeric_tleo_position(self):
        """Gets the numeric_tleo_position of this GroupInitialChildrenInner.


        :return: The numeric_tleo_position of this GroupInitialChildrenInner.
        :rtype: float
        """
        return self._numeric_tleo_position

    @numeric_tleo_position.setter
    def numeric_tleo_position(self, numeric_tleo_position):
        """Sets the numeric_tleo_position of this GroupInitialChildrenInner.


        :param numeric_tleo_position: The numeric_tleo_position of this GroupInitialChildrenInner.
        :type numeric_tleo_position: float
        """

        self._numeric_tleo_position = numeric_tleo_position

    @property
    def original_title(self):
        """Gets the original_title of this GroupInitialChildrenInner.


        :return: The original_title of this GroupInitialChildrenInner.
        :rtype: str
        """
        return self._original_title

    @original_title.setter
    def original_title(self, original_title):
        """Sets the original_title of this GroupInitialChildrenInner.


        :param original_title: The original_title of this GroupInitialChildrenInner.
        :type original_title: str
        """

        self._original_title = original_title

    @property
    def parent_id(self):
        """Gets the parent_id of this GroupInitialChildrenInner.


        :return: The parent_id of this GroupInitialChildrenInner.
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this GroupInitialChildrenInner.


        :param parent_id: The parent_id of this GroupInitialChildrenInner.
        :type parent_id: str
        """

        self._parent_id = parent_id

    @property
    def parent_position(self):
        """Gets the parent_position of this GroupInitialChildrenInner.


        :return: The parent_position of this GroupInitialChildrenInner.
        :rtype: float
        """
        return self._parent_position

    @parent_position.setter
    def parent_position(self, parent_position):
        """Sets the parent_position of this GroupInitialChildrenInner.


        :param parent_position: The parent_position of this GroupInitialChildrenInner.
        :type parent_position: float
        """

        self._parent_position = parent_position

    @property
    def preview_id(self):
        """Gets the preview_id of this GroupInitialChildrenInner.


        :return: The preview_id of this GroupInitialChildrenInner.
        :rtype: str
        """
        return self._preview_id

    @preview_id.setter
    def preview_id(self, preview_id):
        """Sets the preview_id of this GroupInitialChildrenInner.


        :param preview_id: The preview_id of this GroupInitialChildrenInner.
        :type preview_id: str
        """

        self._preview_id = preview_id

    @property
    def programme_type(self):
        """Gets the programme_type of this GroupInitialChildrenInner.


        :return: The programme_type of this GroupInitialChildrenInner.
        :rtype: str
        """
        return self._programme_type

    @programme_type.setter
    def programme_type(self, programme_type):
        """Sets the programme_type of this GroupInitialChildrenInner.


        :param programme_type: The programme_type of this GroupInitialChildrenInner.
        :type programme_type: str
        """
        allowed_values = ["narrative", "sequential", "self-contained", "strand", "unclassified", "one-off"]  # noqa: E501
        if programme_type not in allowed_values:
            raise ValueError(
                "Invalid value for `programme_type` ({0}), must be one of {1}"
                .format(programme_type, allowed_values)
            )

        self._programme_type = programme_type

    @property
    def promoted(self):
        """Gets the promoted of this GroupInitialChildrenInner.


        :return: The promoted of this GroupInitialChildrenInner.
        :rtype: bool
        """
        return self._promoted

    @promoted.setter
    def promoted(self, promoted):
        """Sets the promoted of this GroupInitialChildrenInner.


        :param promoted: The promoted of this GroupInitialChildrenInner.
        :type promoted: bool
        """

        self._promoted = promoted

    @property
    def related_links(self):
        """Gets the related_links of this GroupInitialChildrenInner.


        :return: The related_links of this GroupInitialChildrenInner.
        :rtype: List[EpisodeRelatedLinksInner]
        """
        return self._related_links

    @related_links.setter
    def related_links(self, related_links):
        """Sets the related_links of this GroupInitialChildrenInner.


        :param related_links: The related_links of this GroupInitialChildrenInner.
        :type related_links: List[EpisodeRelatedLinksInner]
        """

        self._related_links = related_links

    @property
    def release_date(self):
        """Gets the release_date of this GroupInitialChildrenInner.


        :return: The release_date of this GroupInitialChildrenInner.
        :rtype: str
        """
        return self._release_date

    @release_date.setter
    def release_date(self, release_date):
        """Sets the release_date of this GroupInitialChildrenInner.


        :param release_date: The release_date of this GroupInitialChildrenInner.
        :type release_date: str
        """

        self._release_date = release_date

    @property
    def release_date_time(self):
        """Gets the release_date_time of this GroupInitialChildrenInner.


        :return: The release_date_time of this GroupInitialChildrenInner.
        :rtype: str
        """
        return self._release_date_time

    @release_date_time.setter
    def release_date_time(self, release_date_time):
        """Sets the release_date_time of this GroupInitialChildrenInner.


        :param release_date_time: The release_date_time of this GroupInitialChildrenInner.
        :type release_date_time: str
        """

        self._release_date_time = release_date_time

    @property
    def requires_ab(self):
        """Gets the requires_ab of this GroupInitialChildrenInner.


        :return: The requires_ab of this GroupInitialChildrenInner.
        :rtype: list[str]
        """
        return self._requires_ab

    @requires_ab.setter
    def requires_ab(self, requires_ab):
        """Sets the requires_ab of this GroupInitialChildrenInner.


        :param requires_ab: The requires_ab of this GroupInitialChildrenInner.
        :type requires_ab: list[str]
        """
        allowed_values = ["u13", "u16", "u18", "o18"]  # noqa: E501
        if not set(requires_ab).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `requires_ab` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(requires_ab) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._requires_ab = requires_ab

    @property
    def requires_sign_in(self):
        """Gets the requires_sign_in of this GroupInitialChildrenInner.


        :return: The requires_sign_in of this GroupInitialChildrenInner.
        :rtype: bool
        """
        return self._requires_sign_in

    @requires_sign_in.setter
    def requires_sign_in(self, requires_sign_in):
        """Sets the requires_sign_in of this GroupInitialChildrenInner.


        :param requires_sign_in: The requires_sign_in of this GroupInitialChildrenInner.
        :type requires_sign_in: bool
        """
        if requires_sign_in is None:
            raise ValueError("Invalid value for `requires_sign_in`, must not be `None`")

        self._requires_sign_in = requires_sign_in

    @property
    def requires_tv_licence(self):
        """Gets the requires_tv_licence of this GroupInitialChildrenInner.


        :return: The requires_tv_licence of this GroupInitialChildrenInner.
        :rtype: bool
        """
        return self._requires_tv_licence

    @requires_tv_licence.setter
    def requires_tv_licence(self, requires_tv_licence):
        """Sets the requires_tv_licence of this GroupInitialChildrenInner.


        :param requires_tv_licence: The requires_tv_licence of this GroupInitialChildrenInner.
        :type requires_tv_licence: bool
        """

        self._requires_tv_licence = requires_tv_licence

    @property
    def signed(self):
        """Gets the signed of this GroupInitialChildrenInner.


        :return: The signed of this GroupInitialChildrenInner.
        :rtype: bool
        """
        return self._signed

    @signed.setter
    def signed(self, signed):
        """Sets the signed of this GroupInitialChildrenInner.


        :param signed: The signed of this GroupInitialChildrenInner.
        :type signed: bool
        """
        if signed is None:
            raise ValueError("Invalid value for `signed`, must not be `None`")

        self._signed = signed

    @property
    def slice_id(self):
        """Gets the slice_id of this GroupInitialChildrenInner.


        :return: The slice_id of this GroupInitialChildrenInner.
        :rtype: str
        """
        return self._slice_id

    @slice_id.setter
    def slice_id(self, slice_id):
        """Sets the slice_id of this GroupInitialChildrenInner.


        :param slice_id: The slice_id of this GroupInitialChildrenInner.
        :type slice_id: str
        """

        self._slice_id = slice_id

    @property
    def slice_subtitle(self):
        """Gets the slice_subtitle of this GroupInitialChildrenInner.


        :return: The slice_subtitle of this GroupInitialChildrenInner.
        :rtype: str
        """
        return self._slice_subtitle

    @slice_subtitle.setter
    def slice_subtitle(self, slice_subtitle):
        """Sets the slice_subtitle of this GroupInitialChildrenInner.


        :param slice_subtitle: The slice_subtitle of this GroupInitialChildrenInner.
        :type slice_subtitle: str
        """

        self._slice_subtitle = slice_subtitle

    @property
    def status(self):
        """Gets the status of this GroupInitialChildrenInner.


        :return: The status of this GroupInitialChildrenInner.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GroupInitialChildrenInner.


        :param status: The status of this GroupInitialChildrenInner.
        :type status: str
        """
        allowed_values = ["available", "unavailable"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def subtitle(self):
        """Gets the subtitle of this GroupInitialChildrenInner.


        :return: The subtitle of this GroupInitialChildrenInner.
        :rtype: str
        """
        return self._subtitle

    @subtitle.setter
    def subtitle(self, subtitle):
        """Sets the subtitle of this GroupInitialChildrenInner.


        :param subtitle: The subtitle of this GroupInitialChildrenInner.
        :type subtitle: str
        """

        self._subtitle = subtitle

    @property
    def synopses(self):
        """Gets the synopses of this GroupInitialChildrenInner.


        :return: The synopses of this GroupInitialChildrenInner.
        :rtype: EpisodeSynopses
        """
        return self._synopses

    @synopses.setter
    def synopses(self, synopses):
        """Sets the synopses of this GroupInitialChildrenInner.


        :param synopses: The synopses of this GroupInitialChildrenInner.
        :type synopses: EpisodeSynopses
        """
        if synopses is None:
            raise ValueError("Invalid value for `synopses`, must not be `None`")

        self._synopses = synopses

    @property
    def tests(self):
        """Gets the tests of this GroupInitialChildrenInner.


        :return: The tests of this GroupInitialChildrenInner.
        :rtype: List[EpisodeTestsInner]
        """
        return self._tests

    @tests.setter
    def tests(self, tests):
        """Sets the tests of this GroupInitialChildrenInner.


        :param tests: The tests of this GroupInitialChildrenInner.
        :type tests: List[EpisodeTestsInner]
        """

        self._tests = tests

    @property
    def title(self):
        """Gets the title of this GroupInitialChildrenInner.


        :return: The title of this GroupInitialChildrenInner.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this GroupInitialChildrenInner.


        :param title: The title of this GroupInitialChildrenInner.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def tleo_id(self):
        """Gets the tleo_id of this GroupInitialChildrenInner.


        :return: The tleo_id of this GroupInitialChildrenInner.
        :rtype: str
        """
        return self._tleo_id

    @tleo_id.setter
    def tleo_id(self, tleo_id):
        """Sets the tleo_id of this GroupInitialChildrenInner.


        :param tleo_id: The tleo_id of this GroupInitialChildrenInner.
        :type tleo_id: str
        """
        if tleo_id is None:
            raise ValueError("Invalid value for `tleo_id`, must not be `None`")

        self._tleo_id = tleo_id

    @property
    def tleo_type(self):
        """Gets the tleo_type of this GroupInitialChildrenInner.


        :return: The tleo_type of this GroupInitialChildrenInner.
        :rtype: str
        """
        return self._tleo_type

    @tleo_type.setter
    def tleo_type(self, tleo_type):
        """Sets the tleo_type of this GroupInitialChildrenInner.


        :param tleo_type: The tleo_type of this GroupInitialChildrenInner.
        :type tleo_type: str
        """
        allowed_values = ["episode", "brand", "series"]  # noqa: E501
        if tleo_type not in allowed_values:
            raise ValueError(
                "Invalid value for `tleo_type` ({0}), must be one of {1}"
                .format(tleo_type, allowed_values)
            )

        self._tleo_type = tleo_type

    @property
    def type(self):
        """Gets the type of this GroupInitialChildrenInner.


        :return: The type of this GroupInitialChildrenInner.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GroupInitialChildrenInner.


        :param type: The type of this GroupInitialChildrenInner.
        :type type: str
        """
        allowed_values = ["episode", "episode_large", "broadcast"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def versions(self):
        """Gets the versions of this GroupInitialChildrenInner.


        :return: The versions of this GroupInitialChildrenInner.
        :rtype: List[EpisodeVersionsInner]
        """
        return self._versions

    @versions.setter
    def versions(self, versions):
        """Sets the versions of this GroupInitialChildrenInner.


        :param versions: The versions of this GroupInitialChildrenInner.
        :type versions: List[EpisodeVersionsInner]
        """
        if versions is None:
            raise ValueError("Invalid value for `versions`, must not be `None`")

        self._versions = versions

    @property
    def available_on_hd_service(self):
        """Gets the available_on_hd_service of this GroupInitialChildrenInner.


        :return: The available_on_hd_service of this GroupInitialChildrenInner.
        :rtype: str
        """
        return self._available_on_hd_service

    @available_on_hd_service.setter
    def available_on_hd_service(self, available_on_hd_service):
        """Sets the available_on_hd_service of this GroupInitialChildrenInner.


        :param available_on_hd_service: The available_on_hd_service of this GroupInitialChildrenInner.
        :type available_on_hd_service: str
        """

        self._available_on_hd_service = available_on_hd_service

    @property
    def blanked(self):
        """Gets the blanked of this GroupInitialChildrenInner.


        :return: The blanked of this GroupInitialChildrenInner.
        :rtype: bool
        """
        return self._blanked

    @blanked.setter
    def blanked(self, blanked):
        """Sets the blanked of this GroupInitialChildrenInner.


        :param blanked: The blanked of this GroupInitialChildrenInner.
        :type blanked: bool
        """
        if blanked is None:
            raise ValueError("Invalid value for `blanked`, must not be `None`")

        self._blanked = blanked

    @property
    def channel_title(self):
        """Gets the channel_title of this GroupInitialChildrenInner.


        :return: The channel_title of this GroupInitialChildrenInner.
        :rtype: str
        """
        return self._channel_title

    @channel_title.setter
    def channel_title(self, channel_title):
        """Sets the channel_title of this GroupInitialChildrenInner.


        :param channel_title: The channel_title of this GroupInitialChildrenInner.
        :type channel_title: str
        """

        self._channel_title = channel_title

    @property
    def duration(self):
        """Gets the duration of this GroupInitialChildrenInner.


        :return: The duration of this GroupInitialChildrenInner.
        :rtype: BroadcastDuration
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this GroupInitialChildrenInner.


        :param duration: The duration of this GroupInitialChildrenInner.
        :type duration: BroadcastDuration
        """

        self._duration = duration

    @property
    def episode(self):
        """Gets the episode of this GroupInitialChildrenInner.


        :return: The episode of this GroupInitialChildrenInner.
        :rtype: Episode
        """
        return self._episode

    @episode.setter
    def episode(self, episode):
        """Sets the episode of this GroupInitialChildrenInner.


        :param episode: The episode of this GroupInitialChildrenInner.
        :type episode: Episode
        """
        if episode is None:
            raise ValueError("Invalid value for `episode`, must not be `None`")

        self._episode = episode

    @property
    def episode_id(self):
        """Gets the episode_id of this GroupInitialChildrenInner.


        :return: The episode_id of this GroupInitialChildrenInner.
        :rtype: str
        """
        return self._episode_id

    @episode_id.setter
    def episode_id(self, episode_id):
        """Sets the episode_id of this GroupInitialChildrenInner.


        :param episode_id: The episode_id of this GroupInitialChildrenInner.
        :type episode_id: str
        """
        if episode_id is None:
            raise ValueError("Invalid value for `episode_id`, must not be `None`")

        self._episode_id = episode_id

    @property
    def events(self):
        """Gets the events of this GroupInitialChildrenInner.


        :return: The events of this GroupInitialChildrenInner.
        :rtype: List[BroadcastEventsInner]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this GroupInitialChildrenInner.


        :param events: The events of this GroupInitialChildrenInner.
        :type events: List[BroadcastEventsInner]
        """

        self._events = events

    @property
    def repeat(self):
        """Gets the repeat of this GroupInitialChildrenInner.


        :return: The repeat of this GroupInitialChildrenInner.
        :rtype: bool
        """
        return self._repeat

    @repeat.setter
    def repeat(self, repeat):
        """Sets the repeat of this GroupInitialChildrenInner.


        :param repeat: The repeat of this GroupInitialChildrenInner.
        :type repeat: bool
        """
        if repeat is None:
            raise ValueError("Invalid value for `repeat`, must not be `None`")

        self._repeat = repeat

    @property
    def scheduled_end(self):
        """Gets the scheduled_end of this GroupInitialChildrenInner.


        :return: The scheduled_end of this GroupInitialChildrenInner.
        :rtype: str
        """
        return self._scheduled_end

    @scheduled_end.setter
    def scheduled_end(self, scheduled_end):
        """Sets the scheduled_end of this GroupInitialChildrenInner.


        :param scheduled_end: The scheduled_end of this GroupInitialChildrenInner.
        :type scheduled_end: str
        """
        if scheduled_end is None:
            raise ValueError("Invalid value for `scheduled_end`, must not be `None`")

        self._scheduled_end = scheduled_end

    @property
    def scheduled_start(self):
        """Gets the scheduled_start of this GroupInitialChildrenInner.


        :return: The scheduled_start of this GroupInitialChildrenInner.
        :rtype: str
        """
        return self._scheduled_start

    @scheduled_start.setter
    def scheduled_start(self, scheduled_start):
        """Sets the scheduled_start of this GroupInitialChildrenInner.


        :param scheduled_start: The scheduled_start of this GroupInitialChildrenInner.
        :type scheduled_start: str
        """
        if scheduled_start is None:
            raise ValueError("Invalid value for `scheduled_start`, must not be `None`")

        self._scheduled_start = scheduled_start

    @property
    def service_id(self):
        """Gets the service_id of this GroupInitialChildrenInner.


        :return: The service_id of this GroupInitialChildrenInner.
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this GroupInitialChildrenInner.


        :param service_id: The service_id of this GroupInitialChildrenInner.
        :type service_id: str
        """
        if service_id is None:
            raise ValueError("Invalid value for `service_id`, must not be `None`")

        self._service_id = service_id

    @property
    def transmission_end(self):
        """Gets the transmission_end of this GroupInitialChildrenInner.


        :return: The transmission_end of this GroupInitialChildrenInner.
        :rtype: str
        """
        return self._transmission_end

    @transmission_end.setter
    def transmission_end(self, transmission_end):
        """Sets the transmission_end of this GroupInitialChildrenInner.


        :param transmission_end: The transmission_end of this GroupInitialChildrenInner.
        :type transmission_end: str
        """

        self._transmission_end = transmission_end

    @property
    def transmission_start(self):
        """Gets the transmission_start of this GroupInitialChildrenInner.


        :return: The transmission_start of this GroupInitialChildrenInner.
        :rtype: str
        """
        return self._transmission_start

    @transmission_start.setter
    def transmission_start(self, transmission_start):
        """Sets the transmission_start of this GroupInitialChildrenInner.


        :param transmission_start: The transmission_start of this GroupInitialChildrenInner.
        :type transmission_start: str
        """

        self._transmission_start = transmission_start

    @property
    def version_id(self):
        """Gets the version_id of this GroupInitialChildrenInner.


        :return: The version_id of this GroupInitialChildrenInner.
        :rtype: str
        """
        return self._version_id

    @version_id.setter
    def version_id(self, version_id):
        """Sets the version_id of this GroupInitialChildrenInner.


        :param version_id: The version_id of this GroupInitialChildrenInner.
        :type version_id: str
        """
        if version_id is None:
            raise ValueError("Invalid value for `version_id`, must not be `None`")

        self._version_id = version_id
