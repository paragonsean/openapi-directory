# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Trailer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, kind: str=None, message: str=None, title: str=None, type: str=None, version_id: str=None):
        """Trailer - a model defined in OpenAPI

        :param id: The id of this Trailer.
        :param kind: The kind of this Trailer.
        :param message: The message of this Trailer.
        :param title: The title of this Trailer.
        :param type: The type of this Trailer.
        :param version_id: The version_id of this Trailer.
        """
        self.openapi_types = {
            'id': str,
            'kind': str,
            'message': str,
            'title': str,
            'type': str,
            'version_id': str
        }

        self.attribute_map = {
            'id': 'id',
            'kind': 'kind',
            'message': 'message',
            'title': 'title',
            'type': 'type',
            'version_id': 'version_id'
        }

        self._id = id
        self._kind = kind
        self._message = message
        self._title = title
        self._type = type
        self._version_id = version_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Trailer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The trailer of this Trailer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Trailer.


        :return: The id of this Trailer.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Trailer.


        :param id: The id of this Trailer.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this Trailer.


        :return: The kind of this Trailer.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Trailer.


        :param kind: The kind of this Trailer.
        :type kind: str
        """
        allowed_values = ["available_now", "watch_now", "coming_soon", "streaming_now_sounds", "other"]  # noqa: E501
        if kind not in allowed_values:
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def message(self):
        """Gets the message of this Trailer.


        :return: The message of this Trailer.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Trailer.


        :param message: The message of this Trailer.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def title(self):
        """Gets the title of this Trailer.


        :return: The title of this Trailer.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Trailer.


        :param title: The title of this Trailer.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def type(self):
        """Gets the type of this Trailer.


        :return: The type of this Trailer.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Trailer.


        :param type: The type of this Trailer.
        :type type: str
        """
        allowed_values = ["trailer"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def version_id(self):
        """Gets the version_id of this Trailer.


        :return: The version_id of this Trailer.
        :rtype: str
        """
        return self._version_id

    @version_id.setter
    def version_id(self, version_id):
        """Sets the version_id of this Trailer.


        :param version_id: The version_id of this Trailer.
        :type version_id: str
        """
        if version_id is None:
            raise ValueError("Invalid value for `version_id`, must not be `None`")

        self._version_id = version_id
