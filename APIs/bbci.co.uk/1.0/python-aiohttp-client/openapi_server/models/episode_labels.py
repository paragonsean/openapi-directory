# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EpisodeLabels(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, editorial: str=None, editorial_category: str=None, time: str=None):
        """EpisodeLabels - a model defined in OpenAPI

        :param category: The category of this EpisodeLabels.
        :param editorial: The editorial of this EpisodeLabels.
        :param editorial_category: The editorial_category of this EpisodeLabels.
        :param time: The time of this EpisodeLabels.
        """
        self.openapi_types = {
            'category': str,
            'editorial': str,
            'editorial_category': str,
            'time': str
        }

        self.attribute_map = {
            'category': 'category',
            'editorial': 'editorial',
            'editorial_category': 'editorial_category',
            'time': 'time'
        }

        self._category = category
        self._editorial = editorial
        self._editorial_category = editorial_category
        self._time = time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EpisodeLabels':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The episode_labels of this EpisodeLabels.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this EpisodeLabels.


        :return: The category of this EpisodeLabels.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this EpisodeLabels.


        :param category: The category of this EpisodeLabels.
        :type category: str
        """

        self._category = category

    @property
    def editorial(self):
        """Gets the editorial of this EpisodeLabels.


        :return: The editorial of this EpisodeLabels.
        :rtype: str
        """
        return self._editorial

    @editorial.setter
    def editorial(self, editorial):
        """Sets the editorial of this EpisodeLabels.


        :param editorial: The editorial of this EpisodeLabels.
        :type editorial: str
        """

        self._editorial = editorial

    @property
    def editorial_category(self):
        """Gets the editorial_category of this EpisodeLabels.


        :return: The editorial_category of this EpisodeLabels.
        :rtype: str
        """
        return self._editorial_category

    @editorial_category.setter
    def editorial_category(self, editorial_category):
        """Sets the editorial_category of this EpisodeLabels.


        :param editorial_category: The editorial_category of this EpisodeLabels.
        :type editorial_category: str
        """

        self._editorial_category = editorial_category

    @property
    def time(self):
        """Gets the time of this EpisodeLabels.


        :return: The time of this EpisodeLabels.
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this EpisodeLabels.


        :param time: The time of this EpisodeLabels.
        :type time: str
        """

        self._time = time
