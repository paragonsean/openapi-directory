# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.programme import Programme
from openapi_server import util


class Added(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, programme: Programme=None, type: str=None, urn: str=None):
        """Added - a model defined in OpenAPI

        :param programme: The programme of this Added.
        :param type: The type of this Added.
        :param urn: The urn of this Added.
        """
        self.openapi_types = {
            'programme': Programme,
            'type': str,
            'urn': str
        }

        self.attribute_map = {
            'programme': 'programme',
            'type': 'type',
            'urn': 'urn'
        }

        self._programme = programme
        self._type = type
        self._urn = urn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Added':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The added of this Added.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def programme(self):
        """Gets the programme of this Added.


        :return: The programme of this Added.
        :rtype: Programme
        """
        return self._programme

    @programme.setter
    def programme(self, programme):
        """Sets the programme of this Added.


        :param programme: The programme of this Added.
        :type programme: Programme
        """
        if programme is None:
            raise ValueError("Invalid value for `programme`, must not be `None`")

        self._programme = programme

    @property
    def type(self):
        """Gets the type of this Added.


        :return: The type of this Added.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Added.


        :param type: The type of this Added.
        :type type: str
        """
        allowed_values = ["added"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def urn(self):
        """Gets the urn of this Added.


        :return: The urn of this Added.
        :rtype: str
        """
        return self._urn

    @urn.setter
    def urn(self, urn):
        """Sets the urn of this Added.


        :param urn: The urn of this Added.
        :type urn: str
        """
        if urn is None:
            raise ValueError("Invalid value for `urn`, must not be `None`")

        self._urn = urn
