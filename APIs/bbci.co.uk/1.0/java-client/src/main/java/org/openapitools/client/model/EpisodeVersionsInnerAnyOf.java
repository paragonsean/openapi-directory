/*
 * BBC iPlayer Business Layer
 * The definitive iPlayer API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: ibl-team@lists.forge.bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BroadcastDuration;
import org.openapitools.client.model.ClipVersionsInnerGuidance;
import org.openapitools.client.model.EpisodeVersionsInnerAnyOfStoreSession;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EpisodeVersionsInnerAnyOf
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:15.122769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EpisodeVersionsInnerAnyOf {
  public static final String SERIALIZED_NAME_DOWNLOAD = "download";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD)
  private Boolean download;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private BroadcastDuration duration;

  public static final String SERIALIZED_NAME_GUIDANCE = "guidance";
  @SerializedName(SERIALIZED_NAME_GUIDANCE)
  private ClipVersionsInnerGuidance guidance;

  public static final String SERIALIZED_NAME_HD = "hd";
  @SerializedName(SERIALIZED_NAME_HD)
  private Boolean hd;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_STORE_ID = "store_id";
  @SerializedName(SERIALIZED_NAME_STORE_ID)
  private String storeId;

  public static final String SERIALIZED_NAME_STORE_PROFILE = "store_profile";
  @SerializedName(SERIALIZED_NAME_STORE_PROFILE)
  private String storeProfile;

  public static final String SERIALIZED_NAME_STORE_SESSION = "store_session";
  @SerializedName(SERIALIZED_NAME_STORE_SESSION)
  private EpisodeVersionsInnerAnyOfStoreSession storeSession;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    STORE_VERSION("store_version");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public EpisodeVersionsInnerAnyOf() {
  }

  public EpisodeVersionsInnerAnyOf download(Boolean download) {
    this.download = download;
    return this;
  }

  /**
   * Get download
   * @return download
   */
  @javax.annotation.Nonnull
  public Boolean getDownload() {
    return download;
  }

  public void setDownload(Boolean download) {
    this.download = download;
  }


  public EpisodeVersionsInnerAnyOf duration(BroadcastDuration duration) {
    this.duration = duration;
    return this;
  }

  /**
   * Get duration
   * @return duration
   */
  @javax.annotation.Nonnull
  public BroadcastDuration getDuration() {
    return duration;
  }

  public void setDuration(BroadcastDuration duration) {
    this.duration = duration;
  }


  public EpisodeVersionsInnerAnyOf guidance(ClipVersionsInnerGuidance guidance) {
    this.guidance = guidance;
    return this;
  }

  /**
   * Get guidance
   * @return guidance
   */
  @javax.annotation.Nullable
  public ClipVersionsInnerGuidance getGuidance() {
    return guidance;
  }

  public void setGuidance(ClipVersionsInnerGuidance guidance) {
    this.guidance = guidance;
  }


  public EpisodeVersionsInnerAnyOf hd(Boolean hd) {
    this.hd = hd;
    return this;
  }

  /**
   * Get hd
   * @return hd
   */
  @javax.annotation.Nonnull
  public Boolean getHd() {
    return hd;
  }

  public void setHd(Boolean hd) {
    this.hd = hd;
  }


  public EpisodeVersionsInnerAnyOf id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public EpisodeVersionsInnerAnyOf kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Get kind
   * @return kind
   */
  @javax.annotation.Nonnull
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public EpisodeVersionsInnerAnyOf storeId(String storeId) {
    this.storeId = storeId;
    return this;
  }

  /**
   * Get storeId
   * @return storeId
   */
  @javax.annotation.Nonnull
  public String getStoreId() {
    return storeId;
  }

  public void setStoreId(String storeId) {
    this.storeId = storeId;
  }


  public EpisodeVersionsInnerAnyOf storeProfile(String storeProfile) {
    this.storeProfile = storeProfile;
    return this;
  }

  /**
   * Get storeProfile
   * @return storeProfile
   */
  @javax.annotation.Nonnull
  public String getStoreProfile() {
    return storeProfile;
  }

  public void setStoreProfile(String storeProfile) {
    this.storeProfile = storeProfile;
  }


  public EpisodeVersionsInnerAnyOf storeSession(EpisodeVersionsInnerAnyOfStoreSession storeSession) {
    this.storeSession = storeSession;
    return this;
  }

  /**
   * Get storeSession
   * @return storeSession
   */
  @javax.annotation.Nullable
  public EpisodeVersionsInnerAnyOfStoreSession getStoreSession() {
    return storeSession;
  }

  public void setStoreSession(EpisodeVersionsInnerAnyOfStoreSession storeSession) {
    this.storeSession = storeSession;
  }


  public EpisodeVersionsInnerAnyOf type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EpisodeVersionsInnerAnyOf episodeVersionsInnerAnyOf = (EpisodeVersionsInnerAnyOf) o;
    return Objects.equals(this.download, episodeVersionsInnerAnyOf.download) &&
        Objects.equals(this.duration, episodeVersionsInnerAnyOf.duration) &&
        Objects.equals(this.guidance, episodeVersionsInnerAnyOf.guidance) &&
        Objects.equals(this.hd, episodeVersionsInnerAnyOf.hd) &&
        Objects.equals(this.id, episodeVersionsInnerAnyOf.id) &&
        Objects.equals(this.kind, episodeVersionsInnerAnyOf.kind) &&
        Objects.equals(this.storeId, episodeVersionsInnerAnyOf.storeId) &&
        Objects.equals(this.storeProfile, episodeVersionsInnerAnyOf.storeProfile) &&
        Objects.equals(this.storeSession, episodeVersionsInnerAnyOf.storeSession) &&
        Objects.equals(this.type, episodeVersionsInnerAnyOf.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(download, duration, guidance, hd, id, kind, storeId, storeProfile, storeSession, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EpisodeVersionsInnerAnyOf {\n");
    sb.append("    download: ").append(toIndentedString(download)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    guidance: ").append(toIndentedString(guidance)).append("\n");
    sb.append("    hd: ").append(toIndentedString(hd)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    storeId: ").append(toIndentedString(storeId)).append("\n");
    sb.append("    storeProfile: ").append(toIndentedString(storeProfile)).append("\n");
    sb.append("    storeSession: ").append(toIndentedString(storeSession)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("download");
    openapiFields.add("duration");
    openapiFields.add("guidance");
    openapiFields.add("hd");
    openapiFields.add("id");
    openapiFields.add("kind");
    openapiFields.add("store_id");
    openapiFields.add("store_profile");
    openapiFields.add("store_session");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("download");
    openapiRequiredFields.add("duration");
    openapiRequiredFields.add("hd");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("kind");
    openapiRequiredFields.add("store_id");
    openapiRequiredFields.add("store_profile");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EpisodeVersionsInnerAnyOf
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EpisodeVersionsInnerAnyOf.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EpisodeVersionsInnerAnyOf is not found in the empty JSON string", EpisodeVersionsInnerAnyOf.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EpisodeVersionsInnerAnyOf.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EpisodeVersionsInnerAnyOf` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EpisodeVersionsInnerAnyOf.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `duration`
      BroadcastDuration.validateJsonElement(jsonObj.get("duration"));
      // validate the optional field `guidance`
      if (jsonObj.get("guidance") != null && !jsonObj.get("guidance").isJsonNull()) {
        ClipVersionsInnerGuidance.validateJsonElement(jsonObj.get("guidance"));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if (!jsonObj.get("store_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `store_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("store_id").toString()));
      }
      if (!jsonObj.get("store_profile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `store_profile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("store_profile").toString()));
      }
      // validate the optional field `store_session`
      if (jsonObj.get("store_session") != null && !jsonObj.get("store_session").isJsonNull()) {
        EpisodeVersionsInnerAnyOfStoreSession.validateJsonElement(jsonObj.get("store_session"));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EpisodeVersionsInnerAnyOf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EpisodeVersionsInnerAnyOf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EpisodeVersionsInnerAnyOf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EpisodeVersionsInnerAnyOf.class));

       return (TypeAdapter<T>) new TypeAdapter<EpisodeVersionsInnerAnyOf>() {
           @Override
           public void write(JsonWriter out, EpisodeVersionsInnerAnyOf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EpisodeVersionsInnerAnyOf read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EpisodeVersionsInnerAnyOf given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EpisodeVersionsInnerAnyOf
   * @throws IOException if the JSON string is invalid with respect to EpisodeVersionsInnerAnyOf
   */
  public static EpisodeVersionsInnerAnyOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EpisodeVersionsInnerAnyOf.class);
  }

  /**
   * Convert an instance of EpisodeVersionsInnerAnyOf to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

