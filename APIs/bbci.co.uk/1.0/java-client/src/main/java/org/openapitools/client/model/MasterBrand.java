/*
 * BBC iPlayer Business Layer
 * The definitive iPlayer API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: ibl-team@lists.forge.bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.MasterBrandTitles;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MasterBrand
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:15.122769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MasterBrand {
  public static final String SERIALIZED_NAME_ATTRIBUTION = "attribution";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTION)
  private String attribution;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IDENT_ID = "ident_id";
  @SerializedName(SERIALIZED_NAME_IDENT_ID)
  private String identId;

  public static final String SERIALIZED_NAME_TITLES = "titles";
  @SerializedName(SERIALIZED_NAME_TITLES)
  private MasterBrandTitles titles;

  public MasterBrand() {
  }

  public MasterBrand attribution(String attribution) {
    this.attribution = attribution;
    return this;
  }

  /**
   * Get attribution
   * @return attribution
   */
  @javax.annotation.Nonnull
  public String getAttribution() {
    return attribution;
  }

  public void setAttribution(String attribution) {
    this.attribution = attribution;
  }


  public MasterBrand id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public MasterBrand identId(String identId) {
    this.identId = identId;
    return this;
  }

  /**
   * Get identId
   * @return identId
   */
  @javax.annotation.Nullable
  public String getIdentId() {
    return identId;
  }

  public void setIdentId(String identId) {
    this.identId = identId;
  }


  public MasterBrand titles(MasterBrandTitles titles) {
    this.titles = titles;
    return this;
  }

  /**
   * Get titles
   * @return titles
   */
  @javax.annotation.Nonnull
  public MasterBrandTitles getTitles() {
    return titles;
  }

  public void setTitles(MasterBrandTitles titles) {
    this.titles = titles;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MasterBrand masterBrand = (MasterBrand) o;
    return Objects.equals(this.attribution, masterBrand.attribution) &&
        Objects.equals(this.id, masterBrand.id) &&
        Objects.equals(this.identId, masterBrand.identId) &&
        Objects.equals(this.titles, masterBrand.titles);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attribution, id, identId, titles);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MasterBrand {\n");
    sb.append("    attribution: ").append(toIndentedString(attribution)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    identId: ").append(toIndentedString(identId)).append("\n");
    sb.append("    titles: ").append(toIndentedString(titles)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attribution");
    openapiFields.add("id");
    openapiFields.add("ident_id");
    openapiFields.add("titles");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("attribution");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("titles");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MasterBrand
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MasterBrand.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MasterBrand is not found in the empty JSON string", MasterBrand.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MasterBrand.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MasterBrand` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MasterBrand.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("attribution").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attribution` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attribution").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("ident_id") != null && !jsonObj.get("ident_id").isJsonNull()) && !jsonObj.get("ident_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ident_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ident_id").toString()));
      }
      // validate the required field `titles`
      MasterBrandTitles.validateJsonElement(jsonObj.get("titles"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MasterBrand.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MasterBrand' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MasterBrand> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MasterBrand.class));

       return (TypeAdapter<T>) new TypeAdapter<MasterBrand>() {
           @Override
           public void write(JsonWriter out, MasterBrand value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MasterBrand read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MasterBrand given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MasterBrand
   * @throws IOException if the JSON string is invalid with respect to MasterBrand
   */
  public static MasterBrand fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MasterBrand.class);
  }

  /**
   * Convert an instance of MasterBrand to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

