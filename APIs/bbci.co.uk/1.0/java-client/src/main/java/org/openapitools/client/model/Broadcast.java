/*
 * BBC iPlayer Business Layer
 * The definitive iPlayer API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: ibl-team@lists.forge.bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BroadcastDuration;
import org.openapitools.client.model.BroadcastEventsInner;
import org.openapitools.client.model.Episode;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Broadcast
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:15.122769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Broadcast {
  public static final String SERIALIZED_NAME_AVAILABLE_ON_HD_SERVICE = "available_on_hd_service";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_ON_HD_SERVICE)
  private String availableOnHdService;

  public static final String SERIALIZED_NAME_BLANKED = "blanked";
  @SerializedName(SERIALIZED_NAME_BLANKED)
  private Boolean blanked;

  public static final String SERIALIZED_NAME_CHANNEL_TITLE = "channel_title";
  @SerializedName(SERIALIZED_NAME_CHANNEL_TITLE)
  private String channelTitle;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private BroadcastDuration duration;

  public static final String SERIALIZED_NAME_EPISODE = "episode";
  @SerializedName(SERIALIZED_NAME_EPISODE)
  private Episode episode;

  public static final String SERIALIZED_NAME_EPISODE_ID = "episode_id";
  @SerializedName(SERIALIZED_NAME_EPISODE_ID)
  private String episodeId;

  public static final String SERIALIZED_NAME_EVENTS = "events";
  @SerializedName(SERIALIZED_NAME_EVENTS)
  private List<BroadcastEventsInner> events = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_REPEAT = "repeat";
  @SerializedName(SERIALIZED_NAME_REPEAT)
  private Boolean repeat;

  public static final String SERIALIZED_NAME_SCHEDULED_END = "scheduled_end";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_END)
  private String scheduledEnd;

  public static final String SERIALIZED_NAME_SCHEDULED_START = "scheduled_start";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_START)
  private String scheduledStart;

  public static final String SERIALIZED_NAME_SERVICE_ID = "service_id";
  @SerializedName(SERIALIZED_NAME_SERVICE_ID)
  private String serviceId;

  public static final String SERIALIZED_NAME_TRANSMISSION_END = "transmission_end";
  @SerializedName(SERIALIZED_NAME_TRANSMISSION_END)
  private String transmissionEnd;

  public static final String SERIALIZED_NAME_TRANSMISSION_START = "transmission_start";
  @SerializedName(SERIALIZED_NAME_TRANSMISSION_START)
  private String transmissionStart;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    BROADCAST("broadcast");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_VERSION_ID = "version_id";
  @SerializedName(SERIALIZED_NAME_VERSION_ID)
  private String versionId;

  public Broadcast() {
  }

  public Broadcast availableOnHdService(String availableOnHdService) {
    this.availableOnHdService = availableOnHdService;
    return this;
  }

  /**
   * Get availableOnHdService
   * @return availableOnHdService
   */
  @javax.annotation.Nullable
  public String getAvailableOnHdService() {
    return availableOnHdService;
  }

  public void setAvailableOnHdService(String availableOnHdService) {
    this.availableOnHdService = availableOnHdService;
  }


  public Broadcast blanked(Boolean blanked) {
    this.blanked = blanked;
    return this;
  }

  /**
   * Get blanked
   * @return blanked
   */
  @javax.annotation.Nonnull
  public Boolean getBlanked() {
    return blanked;
  }

  public void setBlanked(Boolean blanked) {
    this.blanked = blanked;
  }


  public Broadcast channelTitle(String channelTitle) {
    this.channelTitle = channelTitle;
    return this;
  }

  /**
   * Get channelTitle
   * @return channelTitle
   */
  @javax.annotation.Nullable
  public String getChannelTitle() {
    return channelTitle;
  }

  public void setChannelTitle(String channelTitle) {
    this.channelTitle = channelTitle;
  }


  public Broadcast duration(BroadcastDuration duration) {
    this.duration = duration;
    return this;
  }

  /**
   * Get duration
   * @return duration
   */
  @javax.annotation.Nullable
  public BroadcastDuration getDuration() {
    return duration;
  }

  public void setDuration(BroadcastDuration duration) {
    this.duration = duration;
  }


  public Broadcast episode(Episode episode) {
    this.episode = episode;
    return this;
  }

  /**
   * Get episode
   * @return episode
   */
  @javax.annotation.Nonnull
  public Episode getEpisode() {
    return episode;
  }

  public void setEpisode(Episode episode) {
    this.episode = episode;
  }


  public Broadcast episodeId(String episodeId) {
    this.episodeId = episodeId;
    return this;
  }

  /**
   * Get episodeId
   * @return episodeId
   */
  @javax.annotation.Nonnull
  public String getEpisodeId() {
    return episodeId;
  }

  public void setEpisodeId(String episodeId) {
    this.episodeId = episodeId;
  }


  public Broadcast events(List<BroadcastEventsInner> events) {
    this.events = events;
    return this;
  }

  public Broadcast addEventsItem(BroadcastEventsInner eventsItem) {
    if (this.events == null) {
      this.events = new ArrayList<>();
    }
    this.events.add(eventsItem);
    return this;
  }

  /**
   * Get events
   * @return events
   */
  @javax.annotation.Nullable
  public List<BroadcastEventsInner> getEvents() {
    return events;
  }

  public void setEvents(List<BroadcastEventsInner> events) {
    this.events = events;
  }


  public Broadcast id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Broadcast repeat(Boolean repeat) {
    this.repeat = repeat;
    return this;
  }

  /**
   * Get repeat
   * @return repeat
   */
  @javax.annotation.Nonnull
  public Boolean getRepeat() {
    return repeat;
  }

  public void setRepeat(Boolean repeat) {
    this.repeat = repeat;
  }


  public Broadcast scheduledEnd(String scheduledEnd) {
    this.scheduledEnd = scheduledEnd;
    return this;
  }

  /**
   * Get scheduledEnd
   * @return scheduledEnd
   */
  @javax.annotation.Nonnull
  public String getScheduledEnd() {
    return scheduledEnd;
  }

  public void setScheduledEnd(String scheduledEnd) {
    this.scheduledEnd = scheduledEnd;
  }


  public Broadcast scheduledStart(String scheduledStart) {
    this.scheduledStart = scheduledStart;
    return this;
  }

  /**
   * Get scheduledStart
   * @return scheduledStart
   */
  @javax.annotation.Nonnull
  public String getScheduledStart() {
    return scheduledStart;
  }

  public void setScheduledStart(String scheduledStart) {
    this.scheduledStart = scheduledStart;
  }


  public Broadcast serviceId(String serviceId) {
    this.serviceId = serviceId;
    return this;
  }

  /**
   * Get serviceId
   * @return serviceId
   */
  @javax.annotation.Nonnull
  public String getServiceId() {
    return serviceId;
  }

  public void setServiceId(String serviceId) {
    this.serviceId = serviceId;
  }


  public Broadcast transmissionEnd(String transmissionEnd) {
    this.transmissionEnd = transmissionEnd;
    return this;
  }

  /**
   * Get transmissionEnd
   * @return transmissionEnd
   */
  @javax.annotation.Nullable
  public String getTransmissionEnd() {
    return transmissionEnd;
  }

  public void setTransmissionEnd(String transmissionEnd) {
    this.transmissionEnd = transmissionEnd;
  }


  public Broadcast transmissionStart(String transmissionStart) {
    this.transmissionStart = transmissionStart;
    return this;
  }

  /**
   * Get transmissionStart
   * @return transmissionStart
   */
  @javax.annotation.Nullable
  public String getTransmissionStart() {
    return transmissionStart;
  }

  public void setTransmissionStart(String transmissionStart) {
    this.transmissionStart = transmissionStart;
  }


  public Broadcast type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public Broadcast versionId(String versionId) {
    this.versionId = versionId;
    return this;
  }

  /**
   * Get versionId
   * @return versionId
   */
  @javax.annotation.Nonnull
  public String getVersionId() {
    return versionId;
  }

  public void setVersionId(String versionId) {
    this.versionId = versionId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Broadcast broadcast = (Broadcast) o;
    return Objects.equals(this.availableOnHdService, broadcast.availableOnHdService) &&
        Objects.equals(this.blanked, broadcast.blanked) &&
        Objects.equals(this.channelTitle, broadcast.channelTitle) &&
        Objects.equals(this.duration, broadcast.duration) &&
        Objects.equals(this.episode, broadcast.episode) &&
        Objects.equals(this.episodeId, broadcast.episodeId) &&
        Objects.equals(this.events, broadcast.events) &&
        Objects.equals(this.id, broadcast.id) &&
        Objects.equals(this.repeat, broadcast.repeat) &&
        Objects.equals(this.scheduledEnd, broadcast.scheduledEnd) &&
        Objects.equals(this.scheduledStart, broadcast.scheduledStart) &&
        Objects.equals(this.serviceId, broadcast.serviceId) &&
        Objects.equals(this.transmissionEnd, broadcast.transmissionEnd) &&
        Objects.equals(this.transmissionStart, broadcast.transmissionStart) &&
        Objects.equals(this.type, broadcast.type) &&
        Objects.equals(this.versionId, broadcast.versionId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(availableOnHdService, blanked, channelTitle, duration, episode, episodeId, events, id, repeat, scheduledEnd, scheduledStart, serviceId, transmissionEnd, transmissionStart, type, versionId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Broadcast {\n");
    sb.append("    availableOnHdService: ").append(toIndentedString(availableOnHdService)).append("\n");
    sb.append("    blanked: ").append(toIndentedString(blanked)).append("\n");
    sb.append("    channelTitle: ").append(toIndentedString(channelTitle)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    episode: ").append(toIndentedString(episode)).append("\n");
    sb.append("    episodeId: ").append(toIndentedString(episodeId)).append("\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    repeat: ").append(toIndentedString(repeat)).append("\n");
    sb.append("    scheduledEnd: ").append(toIndentedString(scheduledEnd)).append("\n");
    sb.append("    scheduledStart: ").append(toIndentedString(scheduledStart)).append("\n");
    sb.append("    serviceId: ").append(toIndentedString(serviceId)).append("\n");
    sb.append("    transmissionEnd: ").append(toIndentedString(transmissionEnd)).append("\n");
    sb.append("    transmissionStart: ").append(toIndentedString(transmissionStart)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    versionId: ").append(toIndentedString(versionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("available_on_hd_service");
    openapiFields.add("blanked");
    openapiFields.add("channel_title");
    openapiFields.add("duration");
    openapiFields.add("episode");
    openapiFields.add("episode_id");
    openapiFields.add("events");
    openapiFields.add("id");
    openapiFields.add("repeat");
    openapiFields.add("scheduled_end");
    openapiFields.add("scheduled_start");
    openapiFields.add("service_id");
    openapiFields.add("transmission_end");
    openapiFields.add("transmission_start");
    openapiFields.add("type");
    openapiFields.add("version_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("blanked");
    openapiRequiredFields.add("episode");
    openapiRequiredFields.add("episode_id");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("repeat");
    openapiRequiredFields.add("scheduled_end");
    openapiRequiredFields.add("scheduled_start");
    openapiRequiredFields.add("service_id");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("version_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Broadcast
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Broadcast.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Broadcast is not found in the empty JSON string", Broadcast.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Broadcast.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Broadcast` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Broadcast.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("available_on_hd_service") != null && !jsonObj.get("available_on_hd_service").isJsonNull()) && !jsonObj.get("available_on_hd_service").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `available_on_hd_service` to be a primitive type in the JSON string but got `%s`", jsonObj.get("available_on_hd_service").toString()));
      }
      if ((jsonObj.get("channel_title") != null && !jsonObj.get("channel_title").isJsonNull()) && !jsonObj.get("channel_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channel_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channel_title").toString()));
      }
      // validate the optional field `duration`
      if (jsonObj.get("duration") != null && !jsonObj.get("duration").isJsonNull()) {
        BroadcastDuration.validateJsonElement(jsonObj.get("duration"));
      }
      // validate the required field `episode`
      Episode.validateJsonElement(jsonObj.get("episode"));
      if (!jsonObj.get("episode_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `episode_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("episode_id").toString()));
      }
      if (jsonObj.get("events") != null && !jsonObj.get("events").isJsonNull()) {
        JsonArray jsonArrayevents = jsonObj.getAsJsonArray("events");
        if (jsonArrayevents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("events").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `events` to be an array in the JSON string but got `%s`", jsonObj.get("events").toString()));
          }

          // validate the optional field `events` (array)
          for (int i = 0; i < jsonArrayevents.size(); i++) {
            BroadcastEventsInner.validateJsonElement(jsonArrayevents.get(i));
          };
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("scheduled_end").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scheduled_end` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scheduled_end").toString()));
      }
      if (!jsonObj.get("scheduled_start").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scheduled_start` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scheduled_start").toString()));
      }
      if (!jsonObj.get("service_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `service_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("service_id").toString()));
      }
      if ((jsonObj.get("transmission_end") != null && !jsonObj.get("transmission_end").isJsonNull()) && !jsonObj.get("transmission_end").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transmission_end` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transmission_end").toString()));
      }
      if ((jsonObj.get("transmission_start") != null && !jsonObj.get("transmission_start").isJsonNull()) && !jsonObj.get("transmission_start").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transmission_start` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transmission_start").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
      if (!jsonObj.get("version_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Broadcast.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Broadcast' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Broadcast> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Broadcast.class));

       return (TypeAdapter<T>) new TypeAdapter<Broadcast>() {
           @Override
           public void write(JsonWriter out, Broadcast value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Broadcast read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Broadcast given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Broadcast
   * @throws IOException if the JSON string is invalid with respect to Broadcast
   */
  public static Broadcast fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Broadcast.class);
  }

  /**
   * Convert an instance of Broadcast to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

