/*
 * BBC iPlayer Business Layer
 * The definitive iPlayer API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: ibl-team@lists.forge.bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.InteractionInteractionPoints;
import org.openapitools.client.model.InteractionSubtype;
import org.openapitools.client.model.InteractionTitle;
import org.openapitools.client.model.InteractionType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Interaction
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:15.122769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Interaction {
  public static final String SERIALIZED_NAME_INTERACTION_POINTS = "interaction_points";
  @SerializedName(SERIALIZED_NAME_INTERACTION_POINTS)
  private InteractionInteractionPoints interactionPoints;

  public static final String SERIALIZED_NAME_SUBTYPE = "subtype";
  @SerializedName(SERIALIZED_NAME_SUBTYPE)
  private InteractionSubtype subtype;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private InteractionTitle title;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private InteractionType type;

  public Interaction() {
  }

  public Interaction interactionPoints(InteractionInteractionPoints interactionPoints) {
    this.interactionPoints = interactionPoints;
    return this;
  }

  /**
   * Get interactionPoints
   * @return interactionPoints
   */
  @javax.annotation.Nonnull
  public InteractionInteractionPoints getInteractionPoints() {
    return interactionPoints;
  }

  public void setInteractionPoints(InteractionInteractionPoints interactionPoints) {
    this.interactionPoints = interactionPoints;
  }


  public Interaction subtype(InteractionSubtype subtype) {
    this.subtype = subtype;
    return this;
  }

  /**
   * Get subtype
   * @return subtype
   */
  @javax.annotation.Nonnull
  public InteractionSubtype getSubtype() {
    return subtype;
  }

  public void setSubtype(InteractionSubtype subtype) {
    this.subtype = subtype;
  }


  public Interaction title(InteractionTitle title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nonnull
  public InteractionTitle getTitle() {
    return title;
  }

  public void setTitle(InteractionTitle title) {
    this.title = title;
  }


  public Interaction type(InteractionType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public InteractionType getType() {
    return type;
  }

  public void setType(InteractionType type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Interaction interaction = (Interaction) o;
    return Objects.equals(this.interactionPoints, interaction.interactionPoints) &&
        Objects.equals(this.subtype, interaction.subtype) &&
        Objects.equals(this.title, interaction.title) &&
        Objects.equals(this.type, interaction.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(interactionPoints, subtype, title, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Interaction {\n");
    sb.append("    interactionPoints: ").append(toIndentedString(interactionPoints)).append("\n");
    sb.append("    subtype: ").append(toIndentedString(subtype)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("interaction_points");
    openapiFields.add("subtype");
    openapiFields.add("title");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("interaction_points");
    openapiRequiredFields.add("subtype");
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Interaction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Interaction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Interaction is not found in the empty JSON string", Interaction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Interaction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Interaction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Interaction.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `interaction_points`
      InteractionInteractionPoints.validateJsonElement(jsonObj.get("interaction_points"));
      // validate the required field `subtype`
      InteractionSubtype.validateJsonElement(jsonObj.get("subtype"));
      // validate the required field `title`
      InteractionTitle.validateJsonElement(jsonObj.get("title"));
      // validate the required field `type`
      InteractionType.validateJsonElement(jsonObj.get("type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Interaction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Interaction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Interaction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Interaction.class));

       return (TypeAdapter<T>) new TypeAdapter<Interaction>() {
           @Override
           public void write(JsonWriter out, Interaction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Interaction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Interaction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Interaction
   * @throws IOException if the JSON string is invalid with respect to Interaction
   */
  public static Interaction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Interaction.class);
  }

  /**
   * Convert an instance of Interaction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

