/*
 * BBC iPlayer Business Layer
 * The definitive iPlayer API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: ibl-team@lists.forge.bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BroadcastDuration;
import org.openapitools.client.model.ClipVersionsInnerAvailability;
import org.openapitools.client.model.ClipVersionsInnerEventsInner;
import org.openapitools.client.model.ClipVersionsInnerGuidance;
import org.openapitools.client.model.ClipVersionsInnerRrc;
import org.openapitools.client.model.Interaction;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ClipVersionsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:15.122769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ClipVersionsInner {
  public static final String SERIALIZED_NAME_AVAILABILITY = "availability";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY)
  private ClipVersionsInnerAvailability availability;

  public static final String SERIALIZED_NAME_CREDITS_START = "credits_start";
  @SerializedName(SERIALIZED_NAME_CREDITS_START)
  private BigDecimal creditsStart;

  public static final String SERIALIZED_NAME_DOWNLOAD = "download";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD)
  private Boolean download;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private BroadcastDuration duration;

  public static final String SERIALIZED_NAME_EVENTS = "events";
  @SerializedName(SERIALIZED_NAME_EVENTS)
  private List<ClipVersionsInnerEventsInner> events = new ArrayList<>();

  public static final String SERIALIZED_NAME_FIRST_BROADCAST = "first_broadcast";
  @SerializedName(SERIALIZED_NAME_FIRST_BROADCAST)
  private String firstBroadcast;

  public static final String SERIALIZED_NAME_FIRST_BROADCAST_DATE_TIME = "first_broadcast_date_time";
  @SerializedName(SERIALIZED_NAME_FIRST_BROADCAST_DATE_TIME)
  private String firstBroadcastDateTime;

  public static final String SERIALIZED_NAME_GUIDANCE = "guidance";
  @SerializedName(SERIALIZED_NAME_GUIDANCE)
  private ClipVersionsInnerGuidance guidance;

  public static final String SERIALIZED_NAME_HD = "hd";
  @SerializedName(SERIALIZED_NAME_HD)
  private Boolean hd;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INTERACTIONS = "interactions";
  @SerializedName(SERIALIZED_NAME_INTERACTIONS)
  private List<Interaction> interactions = new ArrayList<>();

  /**
   * Gets or Sets kind
   */
  @JsonAdapter(KindEnum.Adapter.class)
  public enum KindEnum {
    LEGAL("legal"),
    
    EDITORIAL("editorial"),
    
    TECHNICAL_REPLACEMENT("technical-replacement"),
    
    ORIGINAL("original"),
    
    IPLAYER_VERSION("iplayer-version"),
    
    LENGTHENED("lengthened"),
    
    SHORTENED("shortened"),
    
    PRE_WATERSHED("pre-watershed"),
    
    POST_WATERSHED("post-watershed"),
    
    WARNINGS_HIGHER("warnings-higher"),
    
    WARNINGS_LOWER("warnings-lower"),
    
    WARNINGS_NONE("warnings-none"),
    
    DUPLICATION("duplication"),
    
    OPEN_SUBTITLED("open-subtitled"),
    
    OTHER("other"),
    
    AUDIO_DESCRIBED("audio-described"),
    
    SIGNED("signed"),
    
    WEBCAST("webcast"),
    
    SIMULCAST("simulcast");

    private String value;

    KindEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static KindEnum fromValue(String value) {
      for (KindEnum b : KindEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<KindEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KindEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public KindEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return KindEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      KindEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private KindEnum kind;

  public static final String SERIALIZED_NAME_RRC = "rrc";
  @SerializedName(SERIALIZED_NAME_RRC)
  private ClipVersionsInnerRrc rrc;

  public static final String SERIALIZED_NAME_SERVICE_ID = "service_id";
  @SerializedName(SERIALIZED_NAME_SERVICE_ID)
  private String serviceId;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    VERSION("version"),
    
    VERSION_LARGE("version_large");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_UHD = "uhd";
  @SerializedName(SERIALIZED_NAME_UHD)
  private Boolean uhd;

  public ClipVersionsInner() {
  }

  public ClipVersionsInner availability(ClipVersionsInnerAvailability availability) {
    this.availability = availability;
    return this;
  }

  /**
   * Get availability
   * @return availability
   */
  @javax.annotation.Nonnull
  public ClipVersionsInnerAvailability getAvailability() {
    return availability;
  }

  public void setAvailability(ClipVersionsInnerAvailability availability) {
    this.availability = availability;
  }


  public ClipVersionsInner creditsStart(BigDecimal creditsStart) {
    this.creditsStart = creditsStart;
    return this;
  }

  /**
   * Get creditsStart
   * @return creditsStart
   */
  @javax.annotation.Nullable
  public BigDecimal getCreditsStart() {
    return creditsStart;
  }

  public void setCreditsStart(BigDecimal creditsStart) {
    this.creditsStart = creditsStart;
  }


  public ClipVersionsInner download(Boolean download) {
    this.download = download;
    return this;
  }

  /**
   * Get download
   * @return download
   */
  @javax.annotation.Nonnull
  public Boolean getDownload() {
    return download;
  }

  public void setDownload(Boolean download) {
    this.download = download;
  }


  public ClipVersionsInner duration(BroadcastDuration duration) {
    this.duration = duration;
    return this;
  }

  /**
   * Get duration
   * @return duration
   */
  @javax.annotation.Nonnull
  public BroadcastDuration getDuration() {
    return duration;
  }

  public void setDuration(BroadcastDuration duration) {
    this.duration = duration;
  }


  public ClipVersionsInner events(List<ClipVersionsInnerEventsInner> events) {
    this.events = events;
    return this;
  }

  public ClipVersionsInner addEventsItem(ClipVersionsInnerEventsInner eventsItem) {
    if (this.events == null) {
      this.events = new ArrayList<>();
    }
    this.events.add(eventsItem);
    return this;
  }

  /**
   * Get events
   * @return events
   */
  @javax.annotation.Nullable
  public List<ClipVersionsInnerEventsInner> getEvents() {
    return events;
  }

  public void setEvents(List<ClipVersionsInnerEventsInner> events) {
    this.events = events;
  }


  public ClipVersionsInner firstBroadcast(String firstBroadcast) {
    this.firstBroadcast = firstBroadcast;
    return this;
  }

  /**
   * Get firstBroadcast
   * @return firstBroadcast
   */
  @javax.annotation.Nullable
  public String getFirstBroadcast() {
    return firstBroadcast;
  }

  public void setFirstBroadcast(String firstBroadcast) {
    this.firstBroadcast = firstBroadcast;
  }


  public ClipVersionsInner firstBroadcastDateTime(String firstBroadcastDateTime) {
    this.firstBroadcastDateTime = firstBroadcastDateTime;
    return this;
  }

  /**
   * Get firstBroadcastDateTime
   * @return firstBroadcastDateTime
   */
  @javax.annotation.Nullable
  public String getFirstBroadcastDateTime() {
    return firstBroadcastDateTime;
  }

  public void setFirstBroadcastDateTime(String firstBroadcastDateTime) {
    this.firstBroadcastDateTime = firstBroadcastDateTime;
  }


  public ClipVersionsInner guidance(ClipVersionsInnerGuidance guidance) {
    this.guidance = guidance;
    return this;
  }

  /**
   * Get guidance
   * @return guidance
   */
  @javax.annotation.Nullable
  public ClipVersionsInnerGuidance getGuidance() {
    return guidance;
  }

  public void setGuidance(ClipVersionsInnerGuidance guidance) {
    this.guidance = guidance;
  }


  public ClipVersionsInner hd(Boolean hd) {
    this.hd = hd;
    return this;
  }

  /**
   * Get hd
   * @return hd
   */
  @javax.annotation.Nonnull
  public Boolean getHd() {
    return hd;
  }

  public void setHd(Boolean hd) {
    this.hd = hd;
  }


  public ClipVersionsInner id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ClipVersionsInner interactions(List<Interaction> interactions) {
    this.interactions = interactions;
    return this;
  }

  public ClipVersionsInner addInteractionsItem(Interaction interactionsItem) {
    if (this.interactions == null) {
      this.interactions = new ArrayList<>();
    }
    this.interactions.add(interactionsItem);
    return this;
  }

  /**
   * Get interactions
   * @return interactions
   */
  @javax.annotation.Nullable
  public List<Interaction> getInteractions() {
    return interactions;
  }

  public void setInteractions(List<Interaction> interactions) {
    this.interactions = interactions;
  }


  public ClipVersionsInner kind(KindEnum kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Get kind
   * @return kind
   */
  @javax.annotation.Nonnull
  public KindEnum getKind() {
    return kind;
  }

  public void setKind(KindEnum kind) {
    this.kind = kind;
  }


  public ClipVersionsInner rrc(ClipVersionsInnerRrc rrc) {
    this.rrc = rrc;
    return this;
  }

  /**
   * Get rrc
   * @return rrc
   */
  @javax.annotation.Nullable
  public ClipVersionsInnerRrc getRrc() {
    return rrc;
  }

  public void setRrc(ClipVersionsInnerRrc rrc) {
    this.rrc = rrc;
  }


  public ClipVersionsInner serviceId(String serviceId) {
    this.serviceId = serviceId;
    return this;
  }

  /**
   * Get serviceId
   * @return serviceId
   */
  @javax.annotation.Nullable
  public String getServiceId() {
    return serviceId;
  }

  public void setServiceId(String serviceId) {
    this.serviceId = serviceId;
  }


  public ClipVersionsInner type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public ClipVersionsInner uhd(Boolean uhd) {
    this.uhd = uhd;
    return this;
  }

  /**
   * Get uhd
   * @return uhd
   */
  @javax.annotation.Nonnull
  public Boolean getUhd() {
    return uhd;
  }

  public void setUhd(Boolean uhd) {
    this.uhd = uhd;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClipVersionsInner clipVersionsInner = (ClipVersionsInner) o;
    return Objects.equals(this.availability, clipVersionsInner.availability) &&
        Objects.equals(this.creditsStart, clipVersionsInner.creditsStart) &&
        Objects.equals(this.download, clipVersionsInner.download) &&
        Objects.equals(this.duration, clipVersionsInner.duration) &&
        Objects.equals(this.events, clipVersionsInner.events) &&
        Objects.equals(this.firstBroadcast, clipVersionsInner.firstBroadcast) &&
        Objects.equals(this.firstBroadcastDateTime, clipVersionsInner.firstBroadcastDateTime) &&
        Objects.equals(this.guidance, clipVersionsInner.guidance) &&
        Objects.equals(this.hd, clipVersionsInner.hd) &&
        Objects.equals(this.id, clipVersionsInner.id) &&
        Objects.equals(this.interactions, clipVersionsInner.interactions) &&
        Objects.equals(this.kind, clipVersionsInner.kind) &&
        Objects.equals(this.rrc, clipVersionsInner.rrc) &&
        Objects.equals(this.serviceId, clipVersionsInner.serviceId) &&
        Objects.equals(this.type, clipVersionsInner.type) &&
        Objects.equals(this.uhd, clipVersionsInner.uhd);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availability, creditsStart, download, duration, events, firstBroadcast, firstBroadcastDateTime, guidance, hd, id, interactions, kind, rrc, serviceId, type, uhd);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClipVersionsInner {\n");
    sb.append("    availability: ").append(toIndentedString(availability)).append("\n");
    sb.append("    creditsStart: ").append(toIndentedString(creditsStart)).append("\n");
    sb.append("    download: ").append(toIndentedString(download)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("    firstBroadcast: ").append(toIndentedString(firstBroadcast)).append("\n");
    sb.append("    firstBroadcastDateTime: ").append(toIndentedString(firstBroadcastDateTime)).append("\n");
    sb.append("    guidance: ").append(toIndentedString(guidance)).append("\n");
    sb.append("    hd: ").append(toIndentedString(hd)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    interactions: ").append(toIndentedString(interactions)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    rrc: ").append(toIndentedString(rrc)).append("\n");
    sb.append("    serviceId: ").append(toIndentedString(serviceId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    uhd: ").append(toIndentedString(uhd)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("availability");
    openapiFields.add("credits_start");
    openapiFields.add("download");
    openapiFields.add("duration");
    openapiFields.add("events");
    openapiFields.add("first_broadcast");
    openapiFields.add("first_broadcast_date_time");
    openapiFields.add("guidance");
    openapiFields.add("hd");
    openapiFields.add("id");
    openapiFields.add("interactions");
    openapiFields.add("kind");
    openapiFields.add("rrc");
    openapiFields.add("service_id");
    openapiFields.add("type");
    openapiFields.add("uhd");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("availability");
    openapiRequiredFields.add("download");
    openapiRequiredFields.add("duration");
    openapiRequiredFields.add("hd");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("kind");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("uhd");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ClipVersionsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ClipVersionsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClipVersionsInner is not found in the empty JSON string", ClipVersionsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ClipVersionsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ClipVersionsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ClipVersionsInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `availability`
      ClipVersionsInnerAvailability.validateJsonElement(jsonObj.get("availability"));
      // validate the required field `duration`
      BroadcastDuration.validateJsonElement(jsonObj.get("duration"));
      if (jsonObj.get("events") != null && !jsonObj.get("events").isJsonNull()) {
        JsonArray jsonArrayevents = jsonObj.getAsJsonArray("events");
        if (jsonArrayevents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("events").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `events` to be an array in the JSON string but got `%s`", jsonObj.get("events").toString()));
          }

          // validate the optional field `events` (array)
          for (int i = 0; i < jsonArrayevents.size(); i++) {
            ClipVersionsInnerEventsInner.validateJsonElement(jsonArrayevents.get(i));
          };
        }
      }
      if ((jsonObj.get("first_broadcast") != null && !jsonObj.get("first_broadcast").isJsonNull()) && !jsonObj.get("first_broadcast").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `first_broadcast` to be a primitive type in the JSON string but got `%s`", jsonObj.get("first_broadcast").toString()));
      }
      if ((jsonObj.get("first_broadcast_date_time") != null && !jsonObj.get("first_broadcast_date_time").isJsonNull()) && !jsonObj.get("first_broadcast_date_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `first_broadcast_date_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("first_broadcast_date_time").toString()));
      }
      // validate the optional field `guidance`
      if (jsonObj.get("guidance") != null && !jsonObj.get("guidance").isJsonNull()) {
        ClipVersionsInnerGuidance.validateJsonElement(jsonObj.get("guidance"));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("interactions") != null && !jsonObj.get("interactions").isJsonNull()) {
        JsonArray jsonArrayinteractions = jsonObj.getAsJsonArray("interactions");
        if (jsonArrayinteractions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("interactions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `interactions` to be an array in the JSON string but got `%s`", jsonObj.get("interactions").toString()));
          }

          // validate the optional field `interactions` (array)
          for (int i = 0; i < jsonArrayinteractions.size(); i++) {
            Interaction.validateJsonElement(jsonArrayinteractions.get(i));
          };
        }
      }
      if (!jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      // validate the required field `kind`
      KindEnum.validateJsonElement(jsonObj.get("kind"));
      // validate the optional field `rrc`
      if (jsonObj.get("rrc") != null && !jsonObj.get("rrc").isJsonNull()) {
        ClipVersionsInnerRrc.validateJsonElement(jsonObj.get("rrc"));
      }
      if ((jsonObj.get("service_id") != null && !jsonObj.get("service_id").isJsonNull()) && !jsonObj.get("service_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `service_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("service_id").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClipVersionsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClipVersionsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClipVersionsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClipVersionsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ClipVersionsInner>() {
           @Override
           public void write(JsonWriter out, ClipVersionsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClipVersionsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ClipVersionsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ClipVersionsInner
   * @throws IOException if the JSON string is invalid with respect to ClipVersionsInner
   */
  public static ClipVersionsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClipVersionsInner.class);
  }

  /**
   * Convert an instance of ClipVersionsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

