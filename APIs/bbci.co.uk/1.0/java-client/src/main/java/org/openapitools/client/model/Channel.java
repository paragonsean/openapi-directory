/*
 * BBC iPlayer Business Layer
 * The definitive iPlayer API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: ibl-team@lists.forge.bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Channel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:15.122769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Channel {
  public static final String SERIALIZED_NAME_HAS_SCHEDULE = "has_schedule";
  @SerializedName(SERIALIZED_NAME_HAS_SCHEDULE)
  private Boolean hasSchedule;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MASTER_BRAND_ID = "master_brand_id";
  @SerializedName(SERIALIZED_NAME_MASTER_BRAND_ID)
  private String masterBrandId;

  public static final String SERIALIZED_NAME_MASTER_BRAND_TITLE = "master_brand_title";
  @SerializedName(SERIALIZED_NAME_MASTER_BRAND_TITLE)
  private String masterBrandTitle;

  public static final String SERIALIZED_NAME_ON_AIR = "on_air";
  @SerializedName(SERIALIZED_NAME_ON_AIR)
  private Boolean onAir;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    CHANNEL("channel");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public Channel() {
  }

  public Channel hasSchedule(Boolean hasSchedule) {
    this.hasSchedule = hasSchedule;
    return this;
  }

  /**
   * Get hasSchedule
   * @return hasSchedule
   */
  @javax.annotation.Nonnull
  public Boolean getHasSchedule() {
    return hasSchedule;
  }

  public void setHasSchedule(Boolean hasSchedule) {
    this.hasSchedule = hasSchedule;
  }


  public Channel id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Channel masterBrandId(String masterBrandId) {
    this.masterBrandId = masterBrandId;
    return this;
  }

  /**
   * Get masterBrandId
   * @return masterBrandId
   */
  @javax.annotation.Nonnull
  public String getMasterBrandId() {
    return masterBrandId;
  }

  public void setMasterBrandId(String masterBrandId) {
    this.masterBrandId = masterBrandId;
  }


  public Channel masterBrandTitle(String masterBrandTitle) {
    this.masterBrandTitle = masterBrandTitle;
    return this;
  }

  /**
   * Get masterBrandTitle
   * @return masterBrandTitle
   */
  @javax.annotation.Nonnull
  public String getMasterBrandTitle() {
    return masterBrandTitle;
  }

  public void setMasterBrandTitle(String masterBrandTitle) {
    this.masterBrandTitle = masterBrandTitle;
  }


  public Channel onAir(Boolean onAir) {
    this.onAir = onAir;
    return this;
  }

  /**
   * Get onAir
   * @return onAir
   */
  @javax.annotation.Nullable
  public Boolean getOnAir() {
    return onAir;
  }

  public void setOnAir(Boolean onAir) {
    this.onAir = onAir;
  }


  public Channel title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public Channel type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Channel channel = (Channel) o;
    return Objects.equals(this.hasSchedule, channel.hasSchedule) &&
        Objects.equals(this.id, channel.id) &&
        Objects.equals(this.masterBrandId, channel.masterBrandId) &&
        Objects.equals(this.masterBrandTitle, channel.masterBrandTitle) &&
        Objects.equals(this.onAir, channel.onAir) &&
        Objects.equals(this.title, channel.title) &&
        Objects.equals(this.type, channel.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hasSchedule, id, masterBrandId, masterBrandTitle, onAir, title, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Channel {\n");
    sb.append("    hasSchedule: ").append(toIndentedString(hasSchedule)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    masterBrandId: ").append(toIndentedString(masterBrandId)).append("\n");
    sb.append("    masterBrandTitle: ").append(toIndentedString(masterBrandTitle)).append("\n");
    sb.append("    onAir: ").append(toIndentedString(onAir)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("has_schedule");
    openapiFields.add("id");
    openapiFields.add("master_brand_id");
    openapiFields.add("master_brand_title");
    openapiFields.add("on_air");
    openapiFields.add("title");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("has_schedule");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("master_brand_id");
    openapiRequiredFields.add("master_brand_title");
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Channel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Channel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Channel is not found in the empty JSON string", Channel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Channel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Channel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Channel.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("master_brand_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `master_brand_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("master_brand_id").toString()));
      }
      if (!jsonObj.get("master_brand_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `master_brand_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("master_brand_title").toString()));
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Channel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Channel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Channel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Channel.class));

       return (TypeAdapter<T>) new TypeAdapter<Channel>() {
           @Override
           public void write(JsonWriter out, Channel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Channel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Channel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Channel
   * @throws IOException if the JSON string is invalid with respect to Channel
   */
  public static Channel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Channel.class);
  }

  /**
   * Convert an instance of Channel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

