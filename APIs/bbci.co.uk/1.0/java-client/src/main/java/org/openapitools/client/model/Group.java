/*
 * BBC iPlayer Business Layer
 * The definitive iPlayer API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: ibl-team@lists.forge.bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ClipVersionsInnerGuidanceText;
import org.openapitools.client.model.GroupImages;
import org.openapitools.client.model.GroupInitialChildrenInner;
import org.openapitools.client.model.GroupRelatedLinksInner;
import org.openapitools.client.model.MasterBrand;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Group
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:15.122769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Group {
  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private BigDecimal count;

  public static final String SERIALIZED_NAME_EPISODE_SORT_DIRECTION = "episode_sort_direction";
  @SerializedName(SERIALIZED_NAME_EPISODE_SORT_DIRECTION)
  private String episodeSortDirection;

  /**
   * Gets or Sets groupType
   */
  @JsonAdapter(GroupTypeEnum.Adapter.class)
  public enum GroupTypeEnum {
    TLEO("tleo"),
    
    CURATED("curated"),
    
    AUTOMATED("automated"),
    
    EVENT("event");

    private String value;

    GroupTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GroupTypeEnum fromValue(String value) {
      for (GroupTypeEnum b : GroupTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GroupTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GroupTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GroupTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GroupTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GroupTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GROUP_TYPE = "group_type";
  @SerializedName(SERIALIZED_NAME_GROUP_TYPE)
  private GroupTypeEnum groupType;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IMAGES = "images";
  @SerializedName(SERIALIZED_NAME_IMAGES)
  private GroupImages images;

  public static final String SERIALIZED_NAME_INITIAL_CHILDREN = "initial_children";
  @SerializedName(SERIALIZED_NAME_INITIAL_CHILDREN)
  private List<GroupInitialChildrenInner> initialChildren = new ArrayList<>();

  public static final String SERIALIZED_NAME_MASTER_BRAND = "master_brand";
  @SerializedName(SERIALIZED_NAME_MASTER_BRAND)
  private MasterBrand masterBrand;

  public static final String SERIALIZED_NAME_RELATED_LINKS = "related_links";
  @SerializedName(SERIALIZED_NAME_RELATED_LINKS)
  private List<GroupRelatedLinksInner> relatedLinks = new ArrayList<>();

  public static final String SERIALIZED_NAME_SHORT_TITLE = "short_title";
  @SerializedName(SERIALIZED_NAME_SHORT_TITLE)
  private String shortTitle;

  public static final String SERIALIZED_NAME_STACKED = "stacked";
  @SerializedName(SERIALIZED_NAME_STACKED)
  private Boolean stacked;

  public static final String SERIALIZED_NAME_SYNOPSES = "synopses";
  @SerializedName(SERIALIZED_NAME_SYNOPSES)
  private ClipVersionsInnerGuidanceText synopses;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    GROUP("group"),
    
    GROUP_LARGE("group_large");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public Group() {
  }

  public Group count(BigDecimal count) {
    this.count = count;
    return this;
  }

  /**
   * Get count
   * @return count
   */
  @javax.annotation.Nullable
  public BigDecimal getCount() {
    return count;
  }

  public void setCount(BigDecimal count) {
    this.count = count;
  }


  public Group episodeSortDirection(String episodeSortDirection) {
    this.episodeSortDirection = episodeSortDirection;
    return this;
  }

  /**
   * Get episodeSortDirection
   * @return episodeSortDirection
   */
  @javax.annotation.Nullable
  public String getEpisodeSortDirection() {
    return episodeSortDirection;
  }

  public void setEpisodeSortDirection(String episodeSortDirection) {
    this.episodeSortDirection = episodeSortDirection;
  }


  public Group groupType(GroupTypeEnum groupType) {
    this.groupType = groupType;
    return this;
  }

  /**
   * Get groupType
   * @return groupType
   */
  @javax.annotation.Nullable
  public GroupTypeEnum getGroupType() {
    return groupType;
  }

  public void setGroupType(GroupTypeEnum groupType) {
    this.groupType = groupType;
  }


  public Group id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Group images(GroupImages images) {
    this.images = images;
    return this;
  }

  /**
   * Get images
   * @return images
   */
  @javax.annotation.Nullable
  public GroupImages getImages() {
    return images;
  }

  public void setImages(GroupImages images) {
    this.images = images;
  }


  public Group initialChildren(List<GroupInitialChildrenInner> initialChildren) {
    this.initialChildren = initialChildren;
    return this;
  }

  public Group addInitialChildrenItem(GroupInitialChildrenInner initialChildrenItem) {
    if (this.initialChildren == null) {
      this.initialChildren = new ArrayList<>();
    }
    this.initialChildren.add(initialChildrenItem);
    return this;
  }

  /**
   * Get initialChildren
   * @return initialChildren
   */
  @javax.annotation.Nullable
  public List<GroupInitialChildrenInner> getInitialChildren() {
    return initialChildren;
  }

  public void setInitialChildren(List<GroupInitialChildrenInner> initialChildren) {
    this.initialChildren = initialChildren;
  }


  public Group masterBrand(MasterBrand masterBrand) {
    this.masterBrand = masterBrand;
    return this;
  }

  /**
   * Get masterBrand
   * @return masterBrand
   */
  @javax.annotation.Nullable
  public MasterBrand getMasterBrand() {
    return masterBrand;
  }

  public void setMasterBrand(MasterBrand masterBrand) {
    this.masterBrand = masterBrand;
  }


  public Group relatedLinks(List<GroupRelatedLinksInner> relatedLinks) {
    this.relatedLinks = relatedLinks;
    return this;
  }

  public Group addRelatedLinksItem(GroupRelatedLinksInner relatedLinksItem) {
    if (this.relatedLinks == null) {
      this.relatedLinks = new ArrayList<>();
    }
    this.relatedLinks.add(relatedLinksItem);
    return this;
  }

  /**
   * Get relatedLinks
   * @return relatedLinks
   */
  @javax.annotation.Nullable
  public List<GroupRelatedLinksInner> getRelatedLinks() {
    return relatedLinks;
  }

  public void setRelatedLinks(List<GroupRelatedLinksInner> relatedLinks) {
    this.relatedLinks = relatedLinks;
  }


  public Group shortTitle(String shortTitle) {
    this.shortTitle = shortTitle;
    return this;
  }

  /**
   * Get shortTitle
   * @return shortTitle
   */
  @javax.annotation.Nullable
  public String getShortTitle() {
    return shortTitle;
  }

  public void setShortTitle(String shortTitle) {
    this.shortTitle = shortTitle;
  }


  public Group stacked(Boolean stacked) {
    this.stacked = stacked;
    return this;
  }

  /**
   * Get stacked
   * @return stacked
   */
  @javax.annotation.Nullable
  public Boolean getStacked() {
    return stacked;
  }

  public void setStacked(Boolean stacked) {
    this.stacked = stacked;
  }


  public Group synopses(ClipVersionsInnerGuidanceText synopses) {
    this.synopses = synopses;
    return this;
  }

  /**
   * Get synopses
   * @return synopses
   */
  @javax.annotation.Nullable
  public ClipVersionsInnerGuidanceText getSynopses() {
    return synopses;
  }

  public void setSynopses(ClipVersionsInnerGuidanceText synopses) {
    this.synopses = synopses;
  }


  public Group title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public Group type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Group group = (Group) o;
    return Objects.equals(this.count, group.count) &&
        Objects.equals(this.episodeSortDirection, group.episodeSortDirection) &&
        Objects.equals(this.groupType, group.groupType) &&
        Objects.equals(this.id, group.id) &&
        Objects.equals(this.images, group.images) &&
        Objects.equals(this.initialChildren, group.initialChildren) &&
        Objects.equals(this.masterBrand, group.masterBrand) &&
        Objects.equals(this.relatedLinks, group.relatedLinks) &&
        Objects.equals(this.shortTitle, group.shortTitle) &&
        Objects.equals(this.stacked, group.stacked) &&
        Objects.equals(this.synopses, group.synopses) &&
        Objects.equals(this.title, group.title) &&
        Objects.equals(this.type, group.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(count, episodeSortDirection, groupType, id, images, initialChildren, masterBrand, relatedLinks, shortTitle, stacked, synopses, title, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Group {\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    episodeSortDirection: ").append(toIndentedString(episodeSortDirection)).append("\n");
    sb.append("    groupType: ").append(toIndentedString(groupType)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    initialChildren: ").append(toIndentedString(initialChildren)).append("\n");
    sb.append("    masterBrand: ").append(toIndentedString(masterBrand)).append("\n");
    sb.append("    relatedLinks: ").append(toIndentedString(relatedLinks)).append("\n");
    sb.append("    shortTitle: ").append(toIndentedString(shortTitle)).append("\n");
    sb.append("    stacked: ").append(toIndentedString(stacked)).append("\n");
    sb.append("    synopses: ").append(toIndentedString(synopses)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("count");
    openapiFields.add("episode_sort_direction");
    openapiFields.add("group_type");
    openapiFields.add("id");
    openapiFields.add("images");
    openapiFields.add("initial_children");
    openapiFields.add("master_brand");
    openapiFields.add("related_links");
    openapiFields.add("short_title");
    openapiFields.add("stacked");
    openapiFields.add("synopses");
    openapiFields.add("title");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Group
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Group.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Group is not found in the empty JSON string", Group.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Group.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Group` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Group.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("episode_sort_direction") != null && !jsonObj.get("episode_sort_direction").isJsonNull()) && !jsonObj.get("episode_sort_direction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `episode_sort_direction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("episode_sort_direction").toString()));
      }
      if ((jsonObj.get("group_type") != null && !jsonObj.get("group_type").isJsonNull()) && !jsonObj.get("group_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `group_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("group_type").toString()));
      }
      // validate the optional field `group_type`
      if (jsonObj.get("group_type") != null && !jsonObj.get("group_type").isJsonNull()) {
        GroupTypeEnum.validateJsonElement(jsonObj.get("group_type"));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `images`
      if (jsonObj.get("images") != null && !jsonObj.get("images").isJsonNull()) {
        GroupImages.validateJsonElement(jsonObj.get("images"));
      }
      if (jsonObj.get("initial_children") != null && !jsonObj.get("initial_children").isJsonNull()) {
        JsonArray jsonArrayinitialChildren = jsonObj.getAsJsonArray("initial_children");
        if (jsonArrayinitialChildren != null) {
          // ensure the json data is an array
          if (!jsonObj.get("initial_children").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `initial_children` to be an array in the JSON string but got `%s`", jsonObj.get("initial_children").toString()));
          }

          // validate the optional field `initial_children` (array)
          for (int i = 0; i < jsonArrayinitialChildren.size(); i++) {
            GroupInitialChildrenInner.validateJsonElement(jsonArrayinitialChildren.get(i));
          };
        }
      }
      // validate the optional field `master_brand`
      if (jsonObj.get("master_brand") != null && !jsonObj.get("master_brand").isJsonNull()) {
        MasterBrand.validateJsonElement(jsonObj.get("master_brand"));
      }
      if (jsonObj.get("related_links") != null && !jsonObj.get("related_links").isJsonNull()) {
        JsonArray jsonArrayrelatedLinks = jsonObj.getAsJsonArray("related_links");
        if (jsonArrayrelatedLinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("related_links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `related_links` to be an array in the JSON string but got `%s`", jsonObj.get("related_links").toString()));
          }

          // validate the optional field `related_links` (array)
          for (int i = 0; i < jsonArrayrelatedLinks.size(); i++) {
            GroupRelatedLinksInner.validateJsonElement(jsonArrayrelatedLinks.get(i));
          };
        }
      }
      if ((jsonObj.get("short_title") != null && !jsonObj.get("short_title").isJsonNull()) && !jsonObj.get("short_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `short_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("short_title").toString()));
      }
      // validate the optional field `synopses`
      if (jsonObj.get("synopses") != null && !jsonObj.get("synopses").isJsonNull()) {
        ClipVersionsInnerGuidanceText.validateJsonElement(jsonObj.get("synopses"));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Group.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Group' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Group> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Group.class));

       return (TypeAdapter<T>) new TypeAdapter<Group>() {
           @Override
           public void write(JsonWriter out, Group value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Group read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Group given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Group
   * @throws IOException if the JSON string is invalid with respect to Group
   */
  public static Group fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Group.class);
  }

  /**
   * Convert an instance of Group to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

