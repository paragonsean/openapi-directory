/*
 * BBC iPlayer Business Layer
 * The definitive iPlayer API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: ibl-team@lists.forge.bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ClipImages;
import org.openapitools.client.model.ClipLabels;
import org.openapitools.client.model.ClipOnwardJourney;
import org.openapitools.client.model.ClipSynopses;
import org.openapitools.client.model.ClipVersionsInner;
import org.openapitools.client.model.MasterBrand;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Clip
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:15.122769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Clip {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IMAGES = "images";
  @SerializedName(SERIALIZED_NAME_IMAGES)
  private ClipImages images;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private ClipLabels labels;

  public static final String SERIALIZED_NAME_MASTER_BRAND = "master_brand";
  @SerializedName(SERIALIZED_NAME_MASTER_BRAND)
  private MasterBrand masterBrand;

  public static final String SERIALIZED_NAME_ONWARD_JOURNEY = "onward_journey";
  @SerializedName(SERIALIZED_NAME_ONWARD_JOURNEY)
  private ClipOnwardJourney onwardJourney;

  /**
   * Gets or Sets promotionType
   */
  @JsonAdapter(PromotionTypeEnum.Adapter.class)
  public enum PromotionTypeEnum {
    AVAILABLE_NOW("available_now"),
    
    COMING_SOON("coming_soon");

    private String value;

    PromotionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PromotionTypeEnum fromValue(String value) {
      for (PromotionTypeEnum b : PromotionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PromotionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PromotionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PromotionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PromotionTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PromotionTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROMOTION_TYPE = "promotion_type";
  @SerializedName(SERIALIZED_NAME_PROMOTION_TYPE)
  private PromotionTypeEnum promotionType;

  public static final String SERIALIZED_NAME_SYNOPSES = "synopses";
  @SerializedName(SERIALIZED_NAME_SYNOPSES)
  private ClipSynopses synopses;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TLEO_ID = "tleo_id";
  @SerializedName(SERIALIZED_NAME_TLEO_ID)
  private String tleoId;

  /**
   * Gets or Sets tleoType
   */
  @JsonAdapter(TleoTypeEnum.Adapter.class)
  public enum TleoTypeEnum {
    EPISODE("episode"),
    
    BRAND("brand"),
    
    SERIES("series");

    private String value;

    TleoTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TleoTypeEnum fromValue(String value) {
      for (TleoTypeEnum b : TleoTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TleoTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TleoTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TleoTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TleoTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TleoTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TLEO_TYPE = "tleo_type";
  @SerializedName(SERIALIZED_NAME_TLEO_TYPE)
  private TleoTypeEnum tleoType;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    CLIP("clip");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_VERSIONS = "versions";
  @SerializedName(SERIALIZED_NAME_VERSIONS)
  private List<ClipVersionsInner> versions = new ArrayList<>();

  public Clip() {
  }

  public Clip id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Clip images(ClipImages images) {
    this.images = images;
    return this;
  }

  /**
   * Get images
   * @return images
   */
  @javax.annotation.Nonnull
  public ClipImages getImages() {
    return images;
  }

  public void setImages(ClipImages images) {
    this.images = images;
  }


  public Clip labels(ClipLabels labels) {
    this.labels = labels;
    return this;
  }

  /**
   * Get labels
   * @return labels
   */
  @javax.annotation.Nullable
  public ClipLabels getLabels() {
    return labels;
  }

  public void setLabels(ClipLabels labels) {
    this.labels = labels;
  }


  public Clip masterBrand(MasterBrand masterBrand) {
    this.masterBrand = masterBrand;
    return this;
  }

  /**
   * Get masterBrand
   * @return masterBrand
   */
  @javax.annotation.Nonnull
  public MasterBrand getMasterBrand() {
    return masterBrand;
  }

  public void setMasterBrand(MasterBrand masterBrand) {
    this.masterBrand = masterBrand;
  }


  public Clip onwardJourney(ClipOnwardJourney onwardJourney) {
    this.onwardJourney = onwardJourney;
    return this;
  }

  /**
   * Get onwardJourney
   * @return onwardJourney
   */
  @javax.annotation.Nullable
  public ClipOnwardJourney getOnwardJourney() {
    return onwardJourney;
  }

  public void setOnwardJourney(ClipOnwardJourney onwardJourney) {
    this.onwardJourney = onwardJourney;
  }


  public Clip promotionType(PromotionTypeEnum promotionType) {
    this.promotionType = promotionType;
    return this;
  }

  /**
   * Get promotionType
   * @return promotionType
   */
  @javax.annotation.Nullable
  public PromotionTypeEnum getPromotionType() {
    return promotionType;
  }

  public void setPromotionType(PromotionTypeEnum promotionType) {
    this.promotionType = promotionType;
  }


  public Clip synopses(ClipSynopses synopses) {
    this.synopses = synopses;
    return this;
  }

  /**
   * Get synopses
   * @return synopses
   */
  @javax.annotation.Nonnull
  public ClipSynopses getSynopses() {
    return synopses;
  }

  public void setSynopses(ClipSynopses synopses) {
    this.synopses = synopses;
  }


  public Clip title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public Clip tleoId(String tleoId) {
    this.tleoId = tleoId;
    return this;
  }

  /**
   * Get tleoId
   * @return tleoId
   */
  @javax.annotation.Nonnull
  public String getTleoId() {
    return tleoId;
  }

  public void setTleoId(String tleoId) {
    this.tleoId = tleoId;
  }


  public Clip tleoType(TleoTypeEnum tleoType) {
    this.tleoType = tleoType;
    return this;
  }

  /**
   * Get tleoType
   * @return tleoType
   */
  @javax.annotation.Nullable
  public TleoTypeEnum getTleoType() {
    return tleoType;
  }

  public void setTleoType(TleoTypeEnum tleoType) {
    this.tleoType = tleoType;
  }


  public Clip type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public Clip versions(List<ClipVersionsInner> versions) {
    this.versions = versions;
    return this;
  }

  public Clip addVersionsItem(ClipVersionsInner versionsItem) {
    if (this.versions == null) {
      this.versions = new ArrayList<>();
    }
    this.versions.add(versionsItem);
    return this;
  }

  /**
   * Get versions
   * @return versions
   */
  @javax.annotation.Nonnull
  public List<ClipVersionsInner> getVersions() {
    return versions;
  }

  public void setVersions(List<ClipVersionsInner> versions) {
    this.versions = versions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Clip clip = (Clip) o;
    return Objects.equals(this.id, clip.id) &&
        Objects.equals(this.images, clip.images) &&
        Objects.equals(this.labels, clip.labels) &&
        Objects.equals(this.masterBrand, clip.masterBrand) &&
        Objects.equals(this.onwardJourney, clip.onwardJourney) &&
        Objects.equals(this.promotionType, clip.promotionType) &&
        Objects.equals(this.synopses, clip.synopses) &&
        Objects.equals(this.title, clip.title) &&
        Objects.equals(this.tleoId, clip.tleoId) &&
        Objects.equals(this.tleoType, clip.tleoType) &&
        Objects.equals(this.type, clip.type) &&
        Objects.equals(this.versions, clip.versions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, images, labels, masterBrand, onwardJourney, promotionType, synopses, title, tleoId, tleoType, type, versions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Clip {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    masterBrand: ").append(toIndentedString(masterBrand)).append("\n");
    sb.append("    onwardJourney: ").append(toIndentedString(onwardJourney)).append("\n");
    sb.append("    promotionType: ").append(toIndentedString(promotionType)).append("\n");
    sb.append("    synopses: ").append(toIndentedString(synopses)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    tleoId: ").append(toIndentedString(tleoId)).append("\n");
    sb.append("    tleoType: ").append(toIndentedString(tleoType)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    versions: ").append(toIndentedString(versions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("images");
    openapiFields.add("labels");
    openapiFields.add("master_brand");
    openapiFields.add("onward_journey");
    openapiFields.add("promotion_type");
    openapiFields.add("synopses");
    openapiFields.add("title");
    openapiFields.add("tleo_id");
    openapiFields.add("tleo_type");
    openapiFields.add("type");
    openapiFields.add("versions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("images");
    openapiRequiredFields.add("master_brand");
    openapiRequiredFields.add("synopses");
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("tleo_id");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("versions");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Clip
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Clip.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Clip is not found in the empty JSON string", Clip.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Clip.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Clip` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Clip.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the required field `images`
      ClipImages.validateJsonElement(jsonObj.get("images"));
      // validate the optional field `labels`
      if (jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonNull()) {
        ClipLabels.validateJsonElement(jsonObj.get("labels"));
      }
      // validate the required field `master_brand`
      MasterBrand.validateJsonElement(jsonObj.get("master_brand"));
      // validate the optional field `onward_journey`
      if (jsonObj.get("onward_journey") != null && !jsonObj.get("onward_journey").isJsonNull()) {
        ClipOnwardJourney.validateJsonElement(jsonObj.get("onward_journey"));
      }
      if ((jsonObj.get("promotion_type") != null && !jsonObj.get("promotion_type").isJsonNull()) && !jsonObj.get("promotion_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `promotion_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("promotion_type").toString()));
      }
      // validate the optional field `promotion_type`
      if (jsonObj.get("promotion_type") != null && !jsonObj.get("promotion_type").isJsonNull()) {
        PromotionTypeEnum.validateJsonElement(jsonObj.get("promotion_type"));
      }
      // validate the required field `synopses`
      ClipSynopses.validateJsonElement(jsonObj.get("synopses"));
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (!jsonObj.get("tleo_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tleo_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tleo_id").toString()));
      }
      if ((jsonObj.get("tleo_type") != null && !jsonObj.get("tleo_type").isJsonNull()) && !jsonObj.get("tleo_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tleo_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tleo_type").toString()));
      }
      // validate the optional field `tleo_type`
      if (jsonObj.get("tleo_type") != null && !jsonObj.get("tleo_type").isJsonNull()) {
        TleoTypeEnum.validateJsonElement(jsonObj.get("tleo_type"));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
      // ensure the json data is an array
      if (!jsonObj.get("versions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `versions` to be an array in the JSON string but got `%s`", jsonObj.get("versions").toString()));
      }

      JsonArray jsonArrayversions = jsonObj.getAsJsonArray("versions");
      // validate the required field `versions` (array)
      for (int i = 0; i < jsonArrayversions.size(); i++) {
        ClipVersionsInner.validateJsonElement(jsonArrayversions.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Clip.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Clip' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Clip> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Clip.class));

       return (TypeAdapter<T>) new TypeAdapter<Clip>() {
           @Override
           public void write(JsonWriter out, Clip value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Clip read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Clip given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Clip
   * @throws IOException if the JSON string is invalid with respect to Clip
   */
  public static Clip fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Clip.class);
  }

  /**
   * Convert an instance of Clip to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

