/*
 * BBC iPlayer Business Layer
 * The definitive iPlayer API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: ibl-team@lists.forge.bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ClipImages;
import org.openapitools.client.model.ClipVersionsInnerGuidanceText;
import org.openapitools.client.model.Episode;
import org.openapitools.client.model.MasterBrand;
import org.openapitools.client.model.ProgrammeLabels;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Programme
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:15.122769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Programme {
  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private List<String> categories = new ArrayList<>();

  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private BigDecimal count;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IMAGES = "images";
  @SerializedName(SERIALIZED_NAME_IMAGES)
  private ClipImages images;

  public static final String SERIALIZED_NAME_INITIAL_CHILDREN = "initial_children";
  @SerializedName(SERIALIZED_NAME_INITIAL_CHILDREN)
  private List<Episode> initialChildren = new ArrayList<>();

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private ProgrammeLabels labels;

  public static final String SERIALIZED_NAME_LEXICAL_SORT_LETTER = "lexical_sort_letter";
  @SerializedName(SERIALIZED_NAME_LEXICAL_SORT_LETTER)
  private String lexicalSortLetter;

  public static final String SERIALIZED_NAME_MASTER_BRAND = "master_brand";
  @SerializedName(SERIALIZED_NAME_MASTER_BRAND)
  private MasterBrand masterBrand;

  /**
   * Gets or Sets programmeType
   */
  @JsonAdapter(ProgrammeTypeEnum.Adapter.class)
  public enum ProgrammeTypeEnum {
    NARRATIVE("narrative"),
    
    SEQUENTIAL("sequential"),
    
    SELF_CONTAINED("self-contained"),
    
    STRAND("strand"),
    
    UNCLASSIFIED("unclassified"),
    
    ONE_OFF("one-off");

    private String value;

    ProgrammeTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProgrammeTypeEnum fromValue(String value) {
      for (ProgrammeTypeEnum b : ProgrammeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProgrammeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProgrammeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProgrammeTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProgrammeTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProgrammeTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROGRAMME_TYPE = "programme_type";
  @SerializedName(SERIALIZED_NAME_PROGRAMME_TYPE)
  private ProgrammeTypeEnum programmeType;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    AVAILABLE("available"),
    
    UNAVAILABLE("unavailable");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_SYNOPSES = "synopses";
  @SerializedName(SERIALIZED_NAME_SYNOPSES)
  private ClipVersionsInnerGuidanceText synopses;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  /**
   * Gets or Sets tleoType
   */
  @JsonAdapter(TleoTypeEnum.Adapter.class)
  public enum TleoTypeEnum {
    BRAND("brand"),
    
    SERIES("series"),
    
    EPISODE("episode");

    private String value;

    TleoTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TleoTypeEnum fromValue(String value) {
      for (TleoTypeEnum b : TleoTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TleoTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TleoTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TleoTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TleoTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TleoTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TLEO_TYPE = "tleo_type";
  @SerializedName(SERIALIZED_NAME_TLEO_TYPE)
  private TleoTypeEnum tleoType;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    PROGRAMME("programme"),
    
    PROGRAMME_LARGE("programme_large");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public Programme() {
  }

  public Programme categories(List<String> categories) {
    this.categories = categories;
    return this;
  }

  public Programme addCategoriesItem(String categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

  /**
   * Get categories
   * @return categories
   */
  @javax.annotation.Nonnull
  public List<String> getCategories() {
    return categories;
  }

  public void setCategories(List<String> categories) {
    this.categories = categories;
  }


  public Programme count(BigDecimal count) {
    this.count = count;
    return this;
  }

  /**
   * Get count
   * @return count
   */
  @javax.annotation.Nonnull
  public BigDecimal getCount() {
    return count;
  }

  public void setCount(BigDecimal count) {
    this.count = count;
  }


  public Programme id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Programme images(ClipImages images) {
    this.images = images;
    return this;
  }

  /**
   * Get images
   * @return images
   */
  @javax.annotation.Nonnull
  public ClipImages getImages() {
    return images;
  }

  public void setImages(ClipImages images) {
    this.images = images;
  }


  public Programme initialChildren(List<Episode> initialChildren) {
    this.initialChildren = initialChildren;
    return this;
  }

  public Programme addInitialChildrenItem(Episode initialChildrenItem) {
    if (this.initialChildren == null) {
      this.initialChildren = new ArrayList<>();
    }
    this.initialChildren.add(initialChildrenItem);
    return this;
  }

  /**
   * Get initialChildren
   * @return initialChildren
   */
  @javax.annotation.Nonnull
  public List<Episode> getInitialChildren() {
    return initialChildren;
  }

  public void setInitialChildren(List<Episode> initialChildren) {
    this.initialChildren = initialChildren;
  }


  public Programme labels(ProgrammeLabels labels) {
    this.labels = labels;
    return this;
  }

  /**
   * Get labels
   * @return labels
   */
  @javax.annotation.Nullable
  public ProgrammeLabels getLabels() {
    return labels;
  }

  public void setLabels(ProgrammeLabels labels) {
    this.labels = labels;
  }


  public Programme lexicalSortLetter(String lexicalSortLetter) {
    this.lexicalSortLetter = lexicalSortLetter;
    return this;
  }

  /**
   * Get lexicalSortLetter
   * @return lexicalSortLetter
   */
  @javax.annotation.Nonnull
  public String getLexicalSortLetter() {
    return lexicalSortLetter;
  }

  public void setLexicalSortLetter(String lexicalSortLetter) {
    this.lexicalSortLetter = lexicalSortLetter;
  }


  public Programme masterBrand(MasterBrand masterBrand) {
    this.masterBrand = masterBrand;
    return this;
  }

  /**
   * Get masterBrand
   * @return masterBrand
   */
  @javax.annotation.Nonnull
  public MasterBrand getMasterBrand() {
    return masterBrand;
  }

  public void setMasterBrand(MasterBrand masterBrand) {
    this.masterBrand = masterBrand;
  }


  public Programme programmeType(ProgrammeTypeEnum programmeType) {
    this.programmeType = programmeType;
    return this;
  }

  /**
   * Get programmeType
   * @return programmeType
   */
  @javax.annotation.Nullable
  public ProgrammeTypeEnum getProgrammeType() {
    return programmeType;
  }

  public void setProgrammeType(ProgrammeTypeEnum programmeType) {
    this.programmeType = programmeType;
  }


  public Programme status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public Programme synopses(ClipVersionsInnerGuidanceText synopses) {
    this.synopses = synopses;
    return this;
  }

  /**
   * Get synopses
   * @return synopses
   */
  @javax.annotation.Nonnull
  public ClipVersionsInnerGuidanceText getSynopses() {
    return synopses;
  }

  public void setSynopses(ClipVersionsInnerGuidanceText synopses) {
    this.synopses = synopses;
  }


  public Programme title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public Programme tleoType(TleoTypeEnum tleoType) {
    this.tleoType = tleoType;
    return this;
  }

  /**
   * Get tleoType
   * @return tleoType
   */
  @javax.annotation.Nullable
  public TleoTypeEnum getTleoType() {
    return tleoType;
  }

  public void setTleoType(TleoTypeEnum tleoType) {
    this.tleoType = tleoType;
  }


  public Programme type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Programme programme = (Programme) o;
    return Objects.equals(this.categories, programme.categories) &&
        Objects.equals(this.count, programme.count) &&
        Objects.equals(this.id, programme.id) &&
        Objects.equals(this.images, programme.images) &&
        Objects.equals(this.initialChildren, programme.initialChildren) &&
        Objects.equals(this.labels, programme.labels) &&
        Objects.equals(this.lexicalSortLetter, programme.lexicalSortLetter) &&
        Objects.equals(this.masterBrand, programme.masterBrand) &&
        Objects.equals(this.programmeType, programme.programmeType) &&
        Objects.equals(this.status, programme.status) &&
        Objects.equals(this.synopses, programme.synopses) &&
        Objects.equals(this.title, programme.title) &&
        Objects.equals(this.tleoType, programme.tleoType) &&
        Objects.equals(this.type, programme.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(categories, count, id, images, initialChildren, labels, lexicalSortLetter, masterBrand, programmeType, status, synopses, title, tleoType, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Programme {\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    initialChildren: ").append(toIndentedString(initialChildren)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    lexicalSortLetter: ").append(toIndentedString(lexicalSortLetter)).append("\n");
    sb.append("    masterBrand: ").append(toIndentedString(masterBrand)).append("\n");
    sb.append("    programmeType: ").append(toIndentedString(programmeType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    synopses: ").append(toIndentedString(synopses)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    tleoType: ").append(toIndentedString(tleoType)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("categories");
    openapiFields.add("count");
    openapiFields.add("id");
    openapiFields.add("images");
    openapiFields.add("initial_children");
    openapiFields.add("labels");
    openapiFields.add("lexical_sort_letter");
    openapiFields.add("master_brand");
    openapiFields.add("programme_type");
    openapiFields.add("status");
    openapiFields.add("synopses");
    openapiFields.add("title");
    openapiFields.add("tleo_type");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("categories");
    openapiRequiredFields.add("count");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("images");
    openapiRequiredFields.add("initial_children");
    openapiRequiredFields.add("lexical_sort_letter");
    openapiRequiredFields.add("master_brand");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("synopses");
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Programme
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Programme.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Programme is not found in the empty JSON string", Programme.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Programme.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Programme` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Programme.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("categories") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("categories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `categories` to be an array in the JSON string but got `%s`", jsonObj.get("categories").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the required field `images`
      ClipImages.validateJsonElement(jsonObj.get("images"));
      // ensure the json data is an array
      if (!jsonObj.get("initial_children").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `initial_children` to be an array in the JSON string but got `%s`", jsonObj.get("initial_children").toString()));
      }

      JsonArray jsonArrayinitialChildren = jsonObj.getAsJsonArray("initial_children");
      // validate the required field `initial_children` (array)
      for (int i = 0; i < jsonArrayinitialChildren.size(); i++) {
        Episode.validateJsonElement(jsonArrayinitialChildren.get(i));
      };
      // validate the optional field `labels`
      if (jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonNull()) {
        ProgrammeLabels.validateJsonElement(jsonObj.get("labels"));
      }
      if (!jsonObj.get("lexical_sort_letter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lexical_sort_letter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lexical_sort_letter").toString()));
      }
      // validate the required field `master_brand`
      MasterBrand.validateJsonElement(jsonObj.get("master_brand"));
      if ((jsonObj.get("programme_type") != null && !jsonObj.get("programme_type").isJsonNull()) && !jsonObj.get("programme_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `programme_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("programme_type").toString()));
      }
      // validate the optional field `programme_type`
      if (jsonObj.get("programme_type") != null && !jsonObj.get("programme_type").isJsonNull()) {
        ProgrammeTypeEnum.validateJsonElement(jsonObj.get("programme_type"));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the required field `status`
      StatusEnum.validateJsonElement(jsonObj.get("status"));
      // validate the required field `synopses`
      ClipVersionsInnerGuidanceText.validateJsonElement(jsonObj.get("synopses"));
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("tleo_type") != null && !jsonObj.get("tleo_type").isJsonNull()) && !jsonObj.get("tleo_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tleo_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tleo_type").toString()));
      }
      // validate the optional field `tleo_type`
      if (jsonObj.get("tleo_type") != null && !jsonObj.get("tleo_type").isJsonNull()) {
        TleoTypeEnum.validateJsonElement(jsonObj.get("tleo_type"));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Programme.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Programme' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Programme> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Programme.class));

       return (TypeAdapter<T>) new TypeAdapter<Programme>() {
           @Override
           public void write(JsonWriter out, Programme value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Programme read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Programme given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Programme
   * @throws IOException if the JSON string is invalid with respect to Programme
   */
  public static Programme fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Programme.class);
  }

  /**
   * Convert an instance of Programme to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

