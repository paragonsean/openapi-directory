/*
 * BBC iPlayer Business Layer
 * The definitive iPlayer API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: ibl-team@lists.forge.bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EpisodesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EpisodesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EpisodesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getClips
     * @param pid The programme identifier. (required)
     * @param rights The rights group to limit results to. (required)
     * @param availability Whether to return all, or available programmes (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getClipsCall(String pid, String rights, String availability, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/clips/{pid}"
            .replace("{" + "pid" + "}", localVarApiClient.escapeString(pid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rights != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rights", rights));
        }

        if (availability != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("availability", availability));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getClipsValidateBeforeCall(String pid, String rights, String availability, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pid' is set
        if (pid == null) {
            throw new ApiException("Missing the required parameter 'pid' when calling getClips(Async)");
        }

        // verify the required parameter 'rights' is set
        if (rights == null) {
            throw new ApiException("Missing the required parameter 'rights' when calling getClips(Async)");
        }

        // verify the required parameter 'availability' is set
        if (availability == null) {
            throw new ApiException("Missing the required parameter 'availability' when calling getClips(Async)");
        }

        return getClipsCall(pid, rights, availability, _callback);

    }

    /**
     * Get Clips
     * Get Clips
     * @param pid The programme identifier. (required)
     * @param rights The rights group to limit results to. (required)
     * @param availability Whether to return all, or available programmes (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Object getClips(String pid, String rights, String availability) throws ApiException {
        ApiResponse<Object> localVarResp = getClipsWithHttpInfo(pid, rights, availability);
        return localVarResp.getData();
    }

    /**
     * Get Clips
     * Get Clips
     * @param pid The programme identifier. (required)
     * @param rights The rights group to limit results to. (required)
     * @param availability Whether to return all, or available programmes (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getClipsWithHttpInfo(String pid, String rights, String availability) throws ApiException {
        okhttp3.Call localVarCall = getClipsValidateBeforeCall(pid, rights, availability, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Clips (asynchronously)
     * Get Clips
     * @param pid The programme identifier. (required)
     * @param rights The rights group to limit results to. (required)
     * @param availability Whether to return all, or available programmes (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getClipsAsync(String pid, String rights, String availability, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getClipsValidateBeforeCall(pid, rights, availability, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEpisodesByCategory
     * @param category The category identifier to return results from. (required)
     * @param lang The language for any applicable localised strings. (required)
     * @param rights The rights group to limit results to. (required)
     * @param availability Whether to return all, or available programmes (required)
     * @param page The page index. (required)
     * @param perPage The number of results to return. (required)
     * @param sort The sort order of the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEpisodesByCategoryCall(String category, String lang, String rights, String availability, Long page, Long perPage, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories/{category}/episodes"
            .replace("{" + "category" + "}", localVarApiClient.escapeString(category.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang", lang));
        }

        if (rights != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rights", rights));
        }

        if (availability != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("availability", availability));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEpisodesByCategoryValidateBeforeCall(String category, String lang, String rights, String availability, Long page, Long perPage, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling getEpisodesByCategory(Async)");
        }

        // verify the required parameter 'lang' is set
        if (lang == null) {
            throw new ApiException("Missing the required parameter 'lang' when calling getEpisodesByCategory(Async)");
        }

        // verify the required parameter 'rights' is set
        if (rights == null) {
            throw new ApiException("Missing the required parameter 'rights' when calling getEpisodesByCategory(Async)");
        }

        // verify the required parameter 'availability' is set
        if (availability == null) {
            throw new ApiException("Missing the required parameter 'availability' when calling getEpisodesByCategory(Async)");
        }

        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling getEpisodesByCategory(Async)");
        }

        // verify the required parameter 'perPage' is set
        if (perPage == null) {
            throw new ApiException("Missing the required parameter 'perPage' when calling getEpisodesByCategory(Async)");
        }

        return getEpisodesByCategoryCall(category, lang, rights, availability, page, perPage, sort, _callback);

    }

    /**
     * List all the episodes for a category.
     * Get the list of all the episodes for a given category in TV &amp; iPlayer.
     * @param category The category identifier to return results from. (required)
     * @param lang The language for any applicable localised strings. (required)
     * @param rights The rights group to limit results to. (required)
     * @param availability Whether to return all, or available programmes (required)
     * @param page The page index. (required)
     * @param perPage The number of results to return. (required)
     * @param sort The sort order of the results. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Object getEpisodesByCategory(String category, String lang, String rights, String availability, Long page, Long perPage, String sort) throws ApiException {
        ApiResponse<Object> localVarResp = getEpisodesByCategoryWithHttpInfo(category, lang, rights, availability, page, perPage, sort);
        return localVarResp.getData();
    }

    /**
     * List all the episodes for a category.
     * Get the list of all the episodes for a given category in TV &amp; iPlayer.
     * @param category The category identifier to return results from. (required)
     * @param lang The language for any applicable localised strings. (required)
     * @param rights The rights group to limit results to. (required)
     * @param availability Whether to return all, or available programmes (required)
     * @param page The page index. (required)
     * @param perPage The number of results to return. (required)
     * @param sort The sort order of the results. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getEpisodesByCategoryWithHttpInfo(String category, String lang, String rights, String availability, Long page, Long perPage, String sort) throws ApiException {
        okhttp3.Call localVarCall = getEpisodesByCategoryValidateBeforeCall(category, lang, rights, availability, page, perPage, sort, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all the episodes for a category. (asynchronously)
     * Get the list of all the episodes for a given category in TV &amp; iPlayer.
     * @param category The category identifier to return results from. (required)
     * @param lang The language for any applicable localised strings. (required)
     * @param rights The rights group to limit results to. (required)
     * @param availability Whether to return all, or available programmes (required)
     * @param page The page index. (required)
     * @param perPage The number of results to return. (required)
     * @param sort The sort order of the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEpisodesByCategoryAsync(String category, String lang, String rights, String availability, Long page, Long perPage, String sort, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEpisodesByCategoryValidateBeforeCall(category, lang, rights, availability, page, perPage, sort, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEpisodesByGroup
     * @param pid The programme identifier. (required)
     * @param rights The rights group to limit results to. (required)
     * @param page The page index. (required)
     * @param perPage The number of results to return. (required)
     * @param initialChildCount The depth to return child entities. (required)
     * @param sort The sort order of the results. (required)
     * @param sortDirection Whether to sort ascending or descending (required)
     * @param availability Whether to return all, or available programmes (required)
     * @param mixin Request additional data in the output (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEpisodesByGroupCall(String pid, String rights, Long page, Long perPage, Integer initialChildCount, String sort, String sortDirection, String availability, List<String> mixin, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{pid}/episodes"
            .replace("{" + "pid" + "}", localVarApiClient.escapeString(pid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rights != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rights", rights));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (initialChildCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("initial_child_count", initialChildCount));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (sortDirection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_direction", sortDirection));
        }

        if (availability != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("availability", availability));
        }

        if (mixin != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "mixin", mixin));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEpisodesByGroupValidateBeforeCall(String pid, String rights, Long page, Long perPage, Integer initialChildCount, String sort, String sortDirection, String availability, List<String> mixin, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pid' is set
        if (pid == null) {
            throw new ApiException("Missing the required parameter 'pid' when calling getEpisodesByGroup(Async)");
        }

        // verify the required parameter 'rights' is set
        if (rights == null) {
            throw new ApiException("Missing the required parameter 'rights' when calling getEpisodesByGroup(Async)");
        }

        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling getEpisodesByGroup(Async)");
        }

        // verify the required parameter 'perPage' is set
        if (perPage == null) {
            throw new ApiException("Missing the required parameter 'perPage' when calling getEpisodesByGroup(Async)");
        }

        // verify the required parameter 'initialChildCount' is set
        if (initialChildCount == null) {
            throw new ApiException("Missing the required parameter 'initialChildCount' when calling getEpisodesByGroup(Async)");
        }

        // verify the required parameter 'sort' is set
        if (sort == null) {
            throw new ApiException("Missing the required parameter 'sort' when calling getEpisodesByGroup(Async)");
        }

        // verify the required parameter 'sortDirection' is set
        if (sortDirection == null) {
            throw new ApiException("Missing the required parameter 'sortDirection' when calling getEpisodesByGroup(Async)");
        }

        // verify the required parameter 'availability' is set
        if (availability == null) {
            throw new ApiException("Missing the required parameter 'availability' when calling getEpisodesByGroup(Async)");
        }

        return getEpisodesByGroupCall(pid, rights, page, perPage, initialChildCount, sort, sortDirection, availability, mixin, _callback);

    }

    /**
     * Get episodes by group, brand or series
     * Get episodes by group, brand or series
     * @param pid The programme identifier. (required)
     * @param rights The rights group to limit results to. (required)
     * @param page The page index. (required)
     * @param perPage The number of results to return. (required)
     * @param initialChildCount The depth to return child entities. (required)
     * @param sort The sort order of the results. (required)
     * @param sortDirection Whether to sort ascending or descending (required)
     * @param availability Whether to return all, or available programmes (required)
     * @param mixin Request additional data in the output (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Object getEpisodesByGroup(String pid, String rights, Long page, Long perPage, Integer initialChildCount, String sort, String sortDirection, String availability, List<String> mixin) throws ApiException {
        ApiResponse<Object> localVarResp = getEpisodesByGroupWithHttpInfo(pid, rights, page, perPage, initialChildCount, sort, sortDirection, availability, mixin);
        return localVarResp.getData();
    }

    /**
     * Get episodes by group, brand or series
     * Get episodes by group, brand or series
     * @param pid The programme identifier. (required)
     * @param rights The rights group to limit results to. (required)
     * @param page The page index. (required)
     * @param perPage The number of results to return. (required)
     * @param initialChildCount The depth to return child entities. (required)
     * @param sort The sort order of the results. (required)
     * @param sortDirection Whether to sort ascending or descending (required)
     * @param availability Whether to return all, or available programmes (required)
     * @param mixin Request additional data in the output (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getEpisodesByGroupWithHttpInfo(String pid, String rights, Long page, Long perPage, Integer initialChildCount, String sort, String sortDirection, String availability, List<String> mixin) throws ApiException {
        okhttp3.Call localVarCall = getEpisodesByGroupValidateBeforeCall(pid, rights, page, perPage, initialChildCount, sort, sortDirection, availability, mixin, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get episodes by group, brand or series (asynchronously)
     * Get episodes by group, brand or series
     * @param pid The programme identifier. (required)
     * @param rights The rights group to limit results to. (required)
     * @param page The page index. (required)
     * @param perPage The number of results to return. (required)
     * @param initialChildCount The depth to return child entities. (required)
     * @param sort The sort order of the results. (required)
     * @param sortDirection Whether to sort ascending or descending (required)
     * @param availability Whether to return all, or available programmes (required)
     * @param mixin Request additional data in the output (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEpisodesByGroupAsync(String pid, String rights, Long page, Long perPage, Integer initialChildCount, String sort, String sortDirection, String availability, List<String> mixin, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEpisodesByGroupValidateBeforeCall(pid, rights, page, perPage, initialChildCount, sort, sortDirection, availability, mixin, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEpisodesByParentPID
     * @param pid The programme identifier. (required)
     * @param rights The rights group to limit results to. (required)
     * @param availability Whether to return all, or available programmes (required)
     * @param initialChildCount The depth to return child entities. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEpisodesByParentPIDCall(String pid, String rights, String availability, Integer initialChildCount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/programmes/{pid}/episodes"
            .replace("{" + "pid" + "}", localVarApiClient.escapeString(pid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rights != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rights", rights));
        }

        if (availability != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("availability", availability));
        }

        if (initialChildCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("initial_child_count", initialChildCount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEpisodesByParentPIDValidateBeforeCall(String pid, String rights, String availability, Integer initialChildCount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pid' is set
        if (pid == null) {
            throw new ApiException("Missing the required parameter 'pid' when calling getEpisodesByParentPID(Async)");
        }

        // verify the required parameter 'rights' is set
        if (rights == null) {
            throw new ApiException("Missing the required parameter 'rights' when calling getEpisodesByParentPID(Async)");
        }

        // verify the required parameter 'availability' is set
        if (availability == null) {
            throw new ApiException("Missing the required parameter 'availability' when calling getEpisodesByParentPID(Async)");
        }

        // verify the required parameter 'initialChildCount' is set
        if (initialChildCount == null) {
            throw new ApiException("Missing the required parameter 'initialChildCount' when calling getEpisodesByParentPID(Async)");
        }

        return getEpisodesByParentPIDCall(pid, rights, availability, initialChildCount, _callback);

    }

    /**
     * Child episodes for a given programme pid.
     * Get the child episodes belonging to a given programme identifier.
     * @param pid The programme identifier. (required)
     * @param rights The rights group to limit results to. (required)
     * @param availability Whether to return all, or available programmes (required)
     * @param initialChildCount The depth to return child entities. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Object getEpisodesByParentPID(String pid, String rights, String availability, Integer initialChildCount) throws ApiException {
        ApiResponse<Object> localVarResp = getEpisodesByParentPIDWithHttpInfo(pid, rights, availability, initialChildCount);
        return localVarResp.getData();
    }

    /**
     * Child episodes for a given programme pid.
     * Get the child episodes belonging to a given programme identifier.
     * @param pid The programme identifier. (required)
     * @param rights The rights group to limit results to. (required)
     * @param availability Whether to return all, or available programmes (required)
     * @param initialChildCount The depth to return child entities. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getEpisodesByParentPIDWithHttpInfo(String pid, String rights, String availability, Integer initialChildCount) throws ApiException {
        okhttp3.Call localVarCall = getEpisodesByParentPIDValidateBeforeCall(pid, rights, availability, initialChildCount, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Child episodes for a given programme pid. (asynchronously)
     * Get the child episodes belonging to a given programme identifier.
     * @param pid The programme identifier. (required)
     * @param rights The rights group to limit results to. (required)
     * @param availability Whether to return all, or available programmes (required)
     * @param initialChildCount The depth to return child entities. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEpisodesByParentPIDAsync(String pid, String rights, String availability, Integer initialChildCount, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEpisodesByParentPIDValidateBeforeCall(pid, rights, availability, initialChildCount, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOnwardJourney
     * @param pid The programme identifier. (required)
     * @param rights The rights group to limit results to. (required)
     * @param availability Whether to return all, or available programmes (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOnwardJourneyCall(String pid, String rights, String availability, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/episodes/{pid}/next"
            .replace("{" + "pid" + "}", localVarApiClient.escapeString(pid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rights != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rights", rights));
        }

        if (availability != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("availability", availability));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOnwardJourneyValidateBeforeCall(String pid, String rights, String availability, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pid' is set
        if (pid == null) {
            throw new ApiException("Missing the required parameter 'pid' when calling getOnwardJourney(Async)");
        }

        // verify the required parameter 'rights' is set
        if (rights == null) {
            throw new ApiException("Missing the required parameter 'rights' when calling getOnwardJourney(Async)");
        }

        // verify the required parameter 'availability' is set
        if (availability == null) {
            throw new ApiException("Missing the required parameter 'availability' when calling getOnwardJourney(Async)");
        }

        return getOnwardJourneyCall(pid, rights, availability, _callback);

    }

    /**
     * Get Onward Journey
     * Get Onward Journey (next programme)
     * @param pid The programme identifier. (required)
     * @param rights The rights group to limit results to. (required)
     * @param availability Whether to return all, or available programmes (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Object getOnwardJourney(String pid, String rights, String availability) throws ApiException {
        ApiResponse<Object> localVarResp = getOnwardJourneyWithHttpInfo(pid, rights, availability);
        return localVarResp.getData();
    }

    /**
     * Get Onward Journey
     * Get Onward Journey (next programme)
     * @param pid The programme identifier. (required)
     * @param rights The rights group to limit results to. (required)
     * @param availability Whether to return all, or available programmes (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getOnwardJourneyWithHttpInfo(String pid, String rights, String availability) throws ApiException {
        okhttp3.Call localVarCall = getOnwardJourneyValidateBeforeCall(pid, rights, availability, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Onward Journey (asynchronously)
     * Get Onward Journey (next programme)
     * @param pid The programme identifier. (required)
     * @param rights The rights group to limit results to. (required)
     * @param availability Whether to return all, or available programmes (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOnwardJourneyAsync(String pid, String rights, String availability, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOnwardJourneyValidateBeforeCall(pid, rights, availability, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPostRolls
     * @param pid The programme identifier. (required)
     * @param rights The rights group to limit results to. (required)
     * @param availability Whether to return all, or available programmes (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPostRollsCall(String pid, String rights, String availability, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/episodes/{pid}/postrolls"
            .replace("{" + "pid" + "}", localVarApiClient.escapeString(pid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rights != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rights", rights));
        }

        if (availability != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("availability", availability));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPostRollsValidateBeforeCall(String pid, String rights, String availability, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pid' is set
        if (pid == null) {
            throw new ApiException("Missing the required parameter 'pid' when calling getPostRolls(Async)");
        }

        // verify the required parameter 'rights' is set
        if (rights == null) {
            throw new ApiException("Missing the required parameter 'rights' when calling getPostRolls(Async)");
        }

        // verify the required parameter 'availability' is set
        if (availability == null) {
            throw new ApiException("Missing the required parameter 'availability' when calling getPostRolls(Async)");
        }

        return getPostRollsCall(pid, rights, availability, _callback);

    }

    /**
     * Get Follow-ups (post-rolls)
     * Get Follow-ups (post-rolls)
     * @param pid The programme identifier. (required)
     * @param rights The rights group to limit results to. (required)
     * @param availability Whether to return all, or available programmes (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Object getPostRolls(String pid, String rights, String availability) throws ApiException {
        ApiResponse<Object> localVarResp = getPostRollsWithHttpInfo(pid, rights, availability);
        return localVarResp.getData();
    }

    /**
     * Get Follow-ups (post-rolls)
     * Get Follow-ups (post-rolls)
     * @param pid The programme identifier. (required)
     * @param rights The rights group to limit results to. (required)
     * @param availability Whether to return all, or available programmes (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getPostRollsWithHttpInfo(String pid, String rights, String availability) throws ApiException {
        okhttp3.Call localVarCall = getPostRollsValidateBeforeCall(pid, rights, availability, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Follow-ups (post-rolls) (asynchronously)
     * Get Follow-ups (post-rolls)
     * @param pid The programme identifier. (required)
     * @param rights The rights group to limit results to. (required)
     * @param availability Whether to return all, or available programmes (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPostRollsAsync(String pid, String rights, String availability, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPostRollsValidateBeforeCall(pid, rights, availability, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProgrammeByPID
     * @param pid The programme identifier. (required)
     * @param rights The rights group to limit results to. (required)
     * @param availability Whether to return all, or available programmes (required)
     * @param mixin Request additional data in the output (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProgrammeByPIDCall(String pid, String rights, String availability, List<String> mixin, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/episodes/{pid}"
            .replace("{" + "pid" + "}", localVarApiClient.escapeString(pid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rights != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rights", rights));
        }

        if (availability != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("availability", availability));
        }

        if (mixin != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "mixin", mixin));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProgrammeByPIDValidateBeforeCall(String pid, String rights, String availability, List<String> mixin, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pid' is set
        if (pid == null) {
            throw new ApiException("Missing the required parameter 'pid' when calling getProgrammeByPID(Async)");
        }

        // verify the required parameter 'rights' is set
        if (rights == null) {
            throw new ApiException("Missing the required parameter 'rights' when calling getProgrammeByPID(Async)");
        }

        // verify the required parameter 'availability' is set
        if (availability == null) {
            throw new ApiException("Missing the required parameter 'availability' when calling getProgrammeByPID(Async)");
        }

        return getProgrammeByPIDCall(pid, rights, availability, mixin, _callback);

    }

    /**
     * Episode for a given pid.
     * Get the episode for a given episode identifier.
     * @param pid The programme identifier. (required)
     * @param rights The rights group to limit results to. (required)
     * @param availability Whether to return all, or available programmes (required)
     * @param mixin Request additional data in the output (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Object getProgrammeByPID(String pid, String rights, String availability, List<String> mixin) throws ApiException {
        ApiResponse<Object> localVarResp = getProgrammeByPIDWithHttpInfo(pid, rights, availability, mixin);
        return localVarResp.getData();
    }

    /**
     * Episode for a given pid.
     * Get the episode for a given episode identifier.
     * @param pid The programme identifier. (required)
     * @param rights The rights group to limit results to. (required)
     * @param availability Whether to return all, or available programmes (required)
     * @param mixin Request additional data in the output (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getProgrammeByPIDWithHttpInfo(String pid, String rights, String availability, List<String> mixin) throws ApiException {
        okhttp3.Call localVarCall = getProgrammeByPIDValidateBeforeCall(pid, rights, availability, mixin, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Episode for a given pid. (asynchronously)
     * Get the episode for a given episode identifier.
     * @param pid The programme identifier. (required)
     * @param rights The rights group to limit results to. (required)
     * @param availability Whether to return all, or available programmes (required)
     * @param mixin Request additional data in the output (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProgrammeByPIDAsync(String pid, String rights, String availability, List<String> mixin, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProgrammeByPIDValidateBeforeCall(pid, rights, availability, mixin, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProgrammeRecommendations
     * @param pid The programme identifier. (required)
     * @param rights The rights group to limit results to. (required)
     * @param availability Whether to return all, or available programmes (required)
     * @param page The page index. (required)
     * @param perPage The number of results to return. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProgrammeRecommendationsCall(String pid, String rights, String availability, Long page, Long perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/episodes/{pid}/recommendations"
            .replace("{" + "pid" + "}", localVarApiClient.escapeString(pid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rights != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rights", rights));
        }

        if (availability != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("availability", availability));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProgrammeRecommendationsValidateBeforeCall(String pid, String rights, String availability, Long page, Long perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pid' is set
        if (pid == null) {
            throw new ApiException("Missing the required parameter 'pid' when calling getProgrammeRecommendations(Async)");
        }

        // verify the required parameter 'rights' is set
        if (rights == null) {
            throw new ApiException("Missing the required parameter 'rights' when calling getProgrammeRecommendations(Async)");
        }

        // verify the required parameter 'availability' is set
        if (availability == null) {
            throw new ApiException("Missing the required parameter 'availability' when calling getProgrammeRecommendations(Async)");
        }

        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling getProgrammeRecommendations(Async)");
        }

        // verify the required parameter 'perPage' is set
        if (perPage == null) {
            throw new ApiException("Missing the required parameter 'perPage' when calling getProgrammeRecommendations(Async)");
        }

        return getProgrammeRecommendationsCall(pid, rights, availability, page, perPage, _callback);

    }

    /**
     * Get programme recommendations
     * Get programme recommendations
     * @param pid The programme identifier. (required)
     * @param rights The rights group to limit results to. (required)
     * @param availability Whether to return all, or available programmes (required)
     * @param page The page index. (required)
     * @param perPage The number of results to return. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Object getProgrammeRecommendations(String pid, String rights, String availability, Long page, Long perPage) throws ApiException {
        ApiResponse<Object> localVarResp = getProgrammeRecommendationsWithHttpInfo(pid, rights, availability, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get programme recommendations
     * Get programme recommendations
     * @param pid The programme identifier. (required)
     * @param rights The rights group to limit results to. (required)
     * @param availability Whether to return all, or available programmes (required)
     * @param page The page index. (required)
     * @param perPage The number of results to return. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getProgrammeRecommendationsWithHttpInfo(String pid, String rights, String availability, Long page, Long perPage) throws ApiException {
        okhttp3.Call localVarCall = getProgrammeRecommendationsValidateBeforeCall(pid, rights, availability, page, perPage, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get programme recommendations (asynchronously)
     * Get programme recommendations
     * @param pid The programme identifier. (required)
     * @param rights The rights group to limit results to. (required)
     * @param availability Whether to return all, or available programmes (required)
     * @param page The page index. (required)
     * @param perPage The number of results to return. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProgrammeRecommendationsAsync(String pid, String rights, String availability, Long page, Long perPage, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProgrammeRecommendationsValidateBeforeCall(pid, rights, availability, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProgrammesPopular
     * @param rights The rights group to limit results to. (required)
     * @param page The page index. (required)
     * @param perPage The number of results to return. (required)
     * @param initialChildCount The depth to return child entities. (required)
     * @param sort The sort order of the results. (required)
     * @param sortDirection Whether to sort ascending or descending (required)
     * @param availability Whether to return all, or available programmes (required)
     * @param mixin Request additional data in the output (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProgrammesPopularCall(String rights, Long page, Long perPage, Integer initialChildCount, String sort, String sortDirection, String availability, List<String> mixin, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/popular/episodes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rights != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rights", rights));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (initialChildCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("initial_child_count", initialChildCount));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (sortDirection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_direction", sortDirection));
        }

        if (availability != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("availability", availability));
        }

        if (mixin != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "mixin", mixin));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProgrammesPopularValidateBeforeCall(String rights, Long page, Long perPage, Integer initialChildCount, String sort, String sortDirection, String availability, List<String> mixin, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rights' is set
        if (rights == null) {
            throw new ApiException("Missing the required parameter 'rights' when calling getProgrammesPopular(Async)");
        }

        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling getProgrammesPopular(Async)");
        }

        // verify the required parameter 'perPage' is set
        if (perPage == null) {
            throw new ApiException("Missing the required parameter 'perPage' when calling getProgrammesPopular(Async)");
        }

        // verify the required parameter 'initialChildCount' is set
        if (initialChildCount == null) {
            throw new ApiException("Missing the required parameter 'initialChildCount' when calling getProgrammesPopular(Async)");
        }

        // verify the required parameter 'sort' is set
        if (sort == null) {
            throw new ApiException("Missing the required parameter 'sort' when calling getProgrammesPopular(Async)");
        }

        // verify the required parameter 'sortDirection' is set
        if (sortDirection == null) {
            throw new ApiException("Missing the required parameter 'sortDirection' when calling getProgrammesPopular(Async)");
        }

        // verify the required parameter 'availability' is set
        if (availability == null) {
            throw new ApiException("Missing the required parameter 'availability' when calling getProgrammesPopular(Async)");
        }

        return getProgrammesPopularCall(rights, page, perPage, initialChildCount, sort, sortDirection, availability, mixin, _callback);

    }

    /**
     * Get programmes popular
     * Get programmes popular
     * @param rights The rights group to limit results to. (required)
     * @param page The page index. (required)
     * @param perPage The number of results to return. (required)
     * @param initialChildCount The depth to return child entities. (required)
     * @param sort The sort order of the results. (required)
     * @param sortDirection Whether to sort ascending or descending (required)
     * @param availability Whether to return all, or available programmes (required)
     * @param mixin Request additional data in the output (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Object getProgrammesPopular(String rights, Long page, Long perPage, Integer initialChildCount, String sort, String sortDirection, String availability, List<String> mixin) throws ApiException {
        ApiResponse<Object> localVarResp = getProgrammesPopularWithHttpInfo(rights, page, perPage, initialChildCount, sort, sortDirection, availability, mixin);
        return localVarResp.getData();
    }

    /**
     * Get programmes popular
     * Get programmes popular
     * @param rights The rights group to limit results to. (required)
     * @param page The page index. (required)
     * @param perPage The number of results to return. (required)
     * @param initialChildCount The depth to return child entities. (required)
     * @param sort The sort order of the results. (required)
     * @param sortDirection Whether to sort ascending or descending (required)
     * @param availability Whether to return all, or available programmes (required)
     * @param mixin Request additional data in the output (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getProgrammesPopularWithHttpInfo(String rights, Long page, Long perPage, Integer initialChildCount, String sort, String sortDirection, String availability, List<String> mixin) throws ApiException {
        okhttp3.Call localVarCall = getProgrammesPopularValidateBeforeCall(rights, page, perPage, initialChildCount, sort, sortDirection, availability, mixin, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get programmes popular (asynchronously)
     * Get programmes popular
     * @param rights The rights group to limit results to. (required)
     * @param page The page index. (required)
     * @param perPage The number of results to return. (required)
     * @param initialChildCount The depth to return child entities. (required)
     * @param sort The sort order of the results. (required)
     * @param sortDirection Whether to sort ascending or descending (required)
     * @param availability Whether to return all, or available programmes (required)
     * @param mixin Request additional data in the output (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProgrammesPopularAsync(String rights, Long page, Long perPage, Integer initialChildCount, String sort, String sortDirection, String availability, List<String> mixin, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProgrammesPopularValidateBeforeCall(rights, page, perPage, initialChildCount, sort, sortDirection, availability, mixin, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTrailersPreRolls
     * @param pid The programme identifier. (required)
     * @param rights The rights group to limit results to. (required)
     * @param availability Whether to return all, or available programmes (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrailersPreRollsCall(String pid, String rights, String availability, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/episodes/{pid}/prerolls"
            .replace("{" + "pid" + "}", localVarApiClient.escapeString(pid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rights != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rights", rights));
        }

        if (availability != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("availability", availability));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTrailersPreRollsValidateBeforeCall(String pid, String rights, String availability, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pid' is set
        if (pid == null) {
            throw new ApiException("Missing the required parameter 'pid' when calling getTrailersPreRolls(Async)");
        }

        // verify the required parameter 'rights' is set
        if (rights == null) {
            throw new ApiException("Missing the required parameter 'rights' when calling getTrailersPreRolls(Async)");
        }

        // verify the required parameter 'availability' is set
        if (availability == null) {
            throw new ApiException("Missing the required parameter 'availability' when calling getTrailersPreRolls(Async)");
        }

        return getTrailersPreRollsCall(pid, rights, availability, _callback);

    }

    /**
     * Get Trailers (pre-rolls)
     * Get Trailers (pre-rolls)
     * @param pid The programme identifier. (required)
     * @param rights The rights group to limit results to. (required)
     * @param availability Whether to return all, or available programmes (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Object getTrailersPreRolls(String pid, String rights, String availability) throws ApiException {
        ApiResponse<Object> localVarResp = getTrailersPreRollsWithHttpInfo(pid, rights, availability);
        return localVarResp.getData();
    }

    /**
     * Get Trailers (pre-rolls)
     * Get Trailers (pre-rolls)
     * @param pid The programme identifier. (required)
     * @param rights The rights group to limit results to. (required)
     * @param availability Whether to return all, or available programmes (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getTrailersPreRollsWithHttpInfo(String pid, String rights, String availability) throws ApiException {
        okhttp3.Call localVarCall = getTrailersPreRollsValidateBeforeCall(pid, rights, availability, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Trailers (pre-rolls) (asynchronously)
     * Get Trailers (pre-rolls)
     * @param pid The programme identifier. (required)
     * @param rights The rights group to limit results to. (required)
     * @param availability Whether to return all, or available programmes (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrailersPreRollsAsync(String pid, String rights, String availability, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTrailersPreRollsValidateBeforeCall(pid, rights, availability, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
