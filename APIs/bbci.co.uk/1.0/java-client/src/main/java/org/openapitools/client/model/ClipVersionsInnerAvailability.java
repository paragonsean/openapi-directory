/*
 * BBC iPlayer Business Layer
 * The definitive iPlayer API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: ibl-team@lists.forge.bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ClipVersionsInnerAvailabilityRemaining;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ClipVersionsInnerAvailability
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:15.122769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ClipVersionsInnerAvailability {
  public static final String SERIALIZED_NAME_ACCURATE_START = "accurate_start";
  @SerializedName(SERIALIZED_NAME_ACCURATE_START)
  private String accurateStart;

  public static final String SERIALIZED_NAME_END = "end";
  @SerializedName(SERIALIZED_NAME_END)
  private String end;

  public static final String SERIALIZED_NAME_REMAINING = "remaining";
  @SerializedName(SERIALIZED_NAME_REMAINING)
  private ClipVersionsInnerAvailabilityRemaining remaining;

  public static final String SERIALIZED_NAME_START = "start";
  @SerializedName(SERIALIZED_NAME_START)
  private String start;

  public ClipVersionsInnerAvailability() {
  }

  public ClipVersionsInnerAvailability accurateStart(String accurateStart) {
    this.accurateStart = accurateStart;
    return this;
  }

  /**
   * Get accurateStart
   * @return accurateStart
   */
  @javax.annotation.Nullable
  public String getAccurateStart() {
    return accurateStart;
  }

  public void setAccurateStart(String accurateStart) {
    this.accurateStart = accurateStart;
  }


  public ClipVersionsInnerAvailability end(String end) {
    this.end = end;
    return this;
  }

  /**
   * Get end
   * @return end
   */
  @javax.annotation.Nullable
  public String getEnd() {
    return end;
  }

  public void setEnd(String end) {
    this.end = end;
  }


  public ClipVersionsInnerAvailability remaining(ClipVersionsInnerAvailabilityRemaining remaining) {
    this.remaining = remaining;
    return this;
  }

  /**
   * Get remaining
   * @return remaining
   */
  @javax.annotation.Nullable
  public ClipVersionsInnerAvailabilityRemaining getRemaining() {
    return remaining;
  }

  public void setRemaining(ClipVersionsInnerAvailabilityRemaining remaining) {
    this.remaining = remaining;
  }


  public ClipVersionsInnerAvailability start(String start) {
    this.start = start;
    return this;
  }

  /**
   * Get start
   * @return start
   */
  @javax.annotation.Nonnull
  public String getStart() {
    return start;
  }

  public void setStart(String start) {
    this.start = start;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClipVersionsInnerAvailability clipVersionsInnerAvailability = (ClipVersionsInnerAvailability) o;
    return Objects.equals(this.accurateStart, clipVersionsInnerAvailability.accurateStart) &&
        Objects.equals(this.end, clipVersionsInnerAvailability.end) &&
        Objects.equals(this.remaining, clipVersionsInnerAvailability.remaining) &&
        Objects.equals(this.start, clipVersionsInnerAvailability.start);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accurateStart, end, remaining, start);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClipVersionsInnerAvailability {\n");
    sb.append("    accurateStart: ").append(toIndentedString(accurateStart)).append("\n");
    sb.append("    end: ").append(toIndentedString(end)).append("\n");
    sb.append("    remaining: ").append(toIndentedString(remaining)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accurate_start");
    openapiFields.add("end");
    openapiFields.add("remaining");
    openapiFields.add("start");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("start");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ClipVersionsInnerAvailability
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ClipVersionsInnerAvailability.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClipVersionsInnerAvailability is not found in the empty JSON string", ClipVersionsInnerAvailability.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ClipVersionsInnerAvailability.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ClipVersionsInnerAvailability` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ClipVersionsInnerAvailability.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accurate_start") != null && !jsonObj.get("accurate_start").isJsonNull()) && !jsonObj.get("accurate_start").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accurate_start` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accurate_start").toString()));
      }
      if ((jsonObj.get("end") != null && !jsonObj.get("end").isJsonNull()) && !jsonObj.get("end").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `end` to be a primitive type in the JSON string but got `%s`", jsonObj.get("end").toString()));
      }
      // validate the optional field `remaining`
      if (jsonObj.get("remaining") != null && !jsonObj.get("remaining").isJsonNull()) {
        ClipVersionsInnerAvailabilityRemaining.validateJsonElement(jsonObj.get("remaining"));
      }
      if (!jsonObj.get("start").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClipVersionsInnerAvailability.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClipVersionsInnerAvailability' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClipVersionsInnerAvailability> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClipVersionsInnerAvailability.class));

       return (TypeAdapter<T>) new TypeAdapter<ClipVersionsInnerAvailability>() {
           @Override
           public void write(JsonWriter out, ClipVersionsInnerAvailability value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClipVersionsInnerAvailability read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ClipVersionsInnerAvailability given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ClipVersionsInnerAvailability
   * @throws IOException if the JSON string is invalid with respect to ClipVersionsInnerAvailability
   */
  public static ClipVersionsInnerAvailability fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClipVersionsInnerAvailability.class);
  }

  /**
   * Convert an instance of ClipVersionsInnerAvailability to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

