/*
 * BBC iPlayer Business Layer
 * The definitive iPlayer API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: ibl-team@lists.forge.bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Category
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:15.122769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Category {
  public static final String SERIALIZED_NAME_CHILD_EPISODE_COUNT = "child_episode_count";
  @SerializedName(SERIALIZED_NAME_CHILD_EPISODE_COUNT)
  private BigDecimal childEpisodeCount;

  public static final String SERIALIZED_NAME_CHILD_PROGRAMME_COUNT = "child_programme_count";
  @SerializedName(SERIALIZED_NAME_CHILD_PROGRAMME_COUNT)
  private BigDecimal childProgrammeCount;

  public static final String SERIALIZED_NAME_CONTEXTUAL_TITLE = "contextual_title";
  @SerializedName(SERIALIZED_NAME_CONTEXTUAL_TITLE)
  private String contextualTitle;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  /**
   * Gets or Sets kind
   */
  @JsonAdapter(KindEnum.Adapter.class)
  public enum KindEnum {
    GENRE("genre"),
    
    ACCESSIBILITY("accessibility"),
    
    NATIONAL("national"),
    
    CHILDRENS("childrens");

    private String value;

    KindEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static KindEnum fromValue(String value) {
      for (KindEnum b : KindEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<KindEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KindEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public KindEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return KindEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      KindEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private KindEnum kind;

  public static final String SERIALIZED_NAME_PARENT_CATEGORY = "parent_category";
  @SerializedName(SERIALIZED_NAME_PARENT_CATEGORY)
  private String parentCategory;

  public static final String SERIALIZED_NAME_SUB_CATEGORIES = "sub_categories";
  @SerializedName(SERIALIZED_NAME_SUB_CATEGORIES)
  private List<Category> subCategories = new ArrayList<>();

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    CATEGORY("category");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public Category() {
  }

  public Category childEpisodeCount(BigDecimal childEpisodeCount) {
    this.childEpisodeCount = childEpisodeCount;
    return this;
  }

  /**
   * Get childEpisodeCount
   * @return childEpisodeCount
   */
  @javax.annotation.Nullable
  public BigDecimal getChildEpisodeCount() {
    return childEpisodeCount;
  }

  public void setChildEpisodeCount(BigDecimal childEpisodeCount) {
    this.childEpisodeCount = childEpisodeCount;
  }


  public Category childProgrammeCount(BigDecimal childProgrammeCount) {
    this.childProgrammeCount = childProgrammeCount;
    return this;
  }

  /**
   * Get childProgrammeCount
   * @return childProgrammeCount
   */
  @javax.annotation.Nullable
  public BigDecimal getChildProgrammeCount() {
    return childProgrammeCount;
  }

  public void setChildProgrammeCount(BigDecimal childProgrammeCount) {
    this.childProgrammeCount = childProgrammeCount;
  }


  public Category contextualTitle(String contextualTitle) {
    this.contextualTitle = contextualTitle;
    return this;
  }

  /**
   * Get contextualTitle
   * @return contextualTitle
   */
  @javax.annotation.Nullable
  public String getContextualTitle() {
    return contextualTitle;
  }

  public void setContextualTitle(String contextualTitle) {
    this.contextualTitle = contextualTitle;
  }


  public Category id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Category kind(KindEnum kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Get kind
   * @return kind
   */
  @javax.annotation.Nonnull
  public KindEnum getKind() {
    return kind;
  }

  public void setKind(KindEnum kind) {
    this.kind = kind;
  }


  public Category parentCategory(String parentCategory) {
    this.parentCategory = parentCategory;
    return this;
  }

  /**
   * Get parentCategory
   * @return parentCategory
   */
  @javax.annotation.Nullable
  public String getParentCategory() {
    return parentCategory;
  }

  public void setParentCategory(String parentCategory) {
    this.parentCategory = parentCategory;
  }


  public Category subCategories(List<Category> subCategories) {
    this.subCategories = subCategories;
    return this;
  }

  public Category addSubCategoriesItem(Category subCategoriesItem) {
    if (this.subCategories == null) {
      this.subCategories = new ArrayList<>();
    }
    this.subCategories.add(subCategoriesItem);
    return this;
  }

  /**
   * Get subCategories
   * @return subCategories
   */
  @javax.annotation.Nullable
  public List<Category> getSubCategories() {
    return subCategories;
  }

  public void setSubCategories(List<Category> subCategories) {
    this.subCategories = subCategories;
  }


  public Category title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public Category type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Category category = (Category) o;
    return Objects.equals(this.childEpisodeCount, category.childEpisodeCount) &&
        Objects.equals(this.childProgrammeCount, category.childProgrammeCount) &&
        Objects.equals(this.contextualTitle, category.contextualTitle) &&
        Objects.equals(this.id, category.id) &&
        Objects.equals(this.kind, category.kind) &&
        Objects.equals(this.parentCategory, category.parentCategory) &&
        Objects.equals(this.subCategories, category.subCategories) &&
        Objects.equals(this.title, category.title) &&
        Objects.equals(this.type, category.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(childEpisodeCount, childProgrammeCount, contextualTitle, id, kind, parentCategory, subCategories, title, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Category {\n");
    sb.append("    childEpisodeCount: ").append(toIndentedString(childEpisodeCount)).append("\n");
    sb.append("    childProgrammeCount: ").append(toIndentedString(childProgrammeCount)).append("\n");
    sb.append("    contextualTitle: ").append(toIndentedString(contextualTitle)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    parentCategory: ").append(toIndentedString(parentCategory)).append("\n");
    sb.append("    subCategories: ").append(toIndentedString(subCategories)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("child_episode_count");
    openapiFields.add("child_programme_count");
    openapiFields.add("contextual_title");
    openapiFields.add("id");
    openapiFields.add("kind");
    openapiFields.add("parent_category");
    openapiFields.add("sub_categories");
    openapiFields.add("title");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("kind");
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Category
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Category.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Category is not found in the empty JSON string", Category.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Category.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Category` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Category.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("contextual_title") != null && !jsonObj.get("contextual_title").isJsonNull()) && !jsonObj.get("contextual_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contextual_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contextual_title").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      // validate the required field `kind`
      KindEnum.validateJsonElement(jsonObj.get("kind"));
      if ((jsonObj.get("parent_category") != null && !jsonObj.get("parent_category").isJsonNull()) && !jsonObj.get("parent_category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent_category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parent_category").toString()));
      }
      if (jsonObj.get("sub_categories") != null && !jsonObj.get("sub_categories").isJsonNull()) {
        JsonArray jsonArraysubCategories = jsonObj.getAsJsonArray("sub_categories");
        if (jsonArraysubCategories != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sub_categories").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sub_categories` to be an array in the JSON string but got `%s`", jsonObj.get("sub_categories").toString()));
          }

          // validate the optional field `sub_categories` (array)
          for (int i = 0; i < jsonArraysubCategories.size(); i++) {
            Category.validateJsonElement(jsonArraysubCategories.get(i));
          };
        }
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Category.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Category' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Category> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Category.class));

       return (TypeAdapter<T>) new TypeAdapter<Category>() {
           @Override
           public void write(JsonWriter out, Category value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Category read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Category given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Category
   * @throws IOException if the JSON string is invalid with respect to Category
   */
  public static Category fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Category.class);
  }

  /**
   * Convert an instance of Category to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

