/*
 * BBC iPlayer Business Layer
 * The definitive iPlayer API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: ibl-team@lists.forge.bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AToZApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AToZApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AToZApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getProgrammesAtoZSearch
     * @param letter Letter to search by, a to z or the string &#39;0-9&#39; (required)
     * @param rights The rights group to limit results to. (required)
     * @param page The page index. (required)
     * @param perPage The number of results to return. (required)
     * @param initialChildCount The depth to return child entities. (required)
     * @param sort The sort order of the results. (required)
     * @param sortDirection Whether to sort ascending or descending (required)
     * @param availability Whether to return all, or available programmes (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProgrammesAtoZSearchCall(String letter, String rights, Long page, Long perPage, Integer initialChildCount, String sort, String sortDirection, String availability, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/atoz/{letter}/programmes"
            .replace("{" + "letter" + "}", localVarApiClient.escapeString(letter.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rights != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rights", rights));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (initialChildCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("initial_child_count", initialChildCount));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (sortDirection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_direction", sortDirection));
        }

        if (availability != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("availability", availability));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProgrammesAtoZSearchValidateBeforeCall(String letter, String rights, Long page, Long perPage, Integer initialChildCount, String sort, String sortDirection, String availability, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'letter' is set
        if (letter == null) {
            throw new ApiException("Missing the required parameter 'letter' when calling getProgrammesAtoZSearch(Async)");
        }

        // verify the required parameter 'rights' is set
        if (rights == null) {
            throw new ApiException("Missing the required parameter 'rights' when calling getProgrammesAtoZSearch(Async)");
        }

        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling getProgrammesAtoZSearch(Async)");
        }

        // verify the required parameter 'perPage' is set
        if (perPage == null) {
            throw new ApiException("Missing the required parameter 'perPage' when calling getProgrammesAtoZSearch(Async)");
        }

        // verify the required parameter 'initialChildCount' is set
        if (initialChildCount == null) {
            throw new ApiException("Missing the required parameter 'initialChildCount' when calling getProgrammesAtoZSearch(Async)");
        }

        // verify the required parameter 'sort' is set
        if (sort == null) {
            throw new ApiException("Missing the required parameter 'sort' when calling getProgrammesAtoZSearch(Async)");
        }

        // verify the required parameter 'sortDirection' is set
        if (sortDirection == null) {
            throw new ApiException("Missing the required parameter 'sortDirection' when calling getProgrammesAtoZSearch(Async)");
        }

        // verify the required parameter 'availability' is set
        if (availability == null) {
            throw new ApiException("Missing the required parameter 'availability' when calling getProgrammesAtoZSearch(Async)");
        }

        return getProgrammesAtoZSearchCall(letter, rights, page, perPage, initialChildCount, sort, sortDirection, availability, _callback);

    }

    /**
     * Programmes by initial title character
     * Get the Programmes whose title begins with the given initial character.
     * @param letter Letter to search by, a to z or the string &#39;0-9&#39; (required)
     * @param rights The rights group to limit results to. (required)
     * @param page The page index. (required)
     * @param perPage The number of results to return. (required)
     * @param initialChildCount The depth to return child entities. (required)
     * @param sort The sort order of the results. (required)
     * @param sortDirection Whether to sort ascending or descending (required)
     * @param availability Whether to return all, or available programmes (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Object getProgrammesAtoZSearch(String letter, String rights, Long page, Long perPage, Integer initialChildCount, String sort, String sortDirection, String availability) throws ApiException {
        ApiResponse<Object> localVarResp = getProgrammesAtoZSearchWithHttpInfo(letter, rights, page, perPage, initialChildCount, sort, sortDirection, availability);
        return localVarResp.getData();
    }

    /**
     * Programmes by initial title character
     * Get the Programmes whose title begins with the given initial character.
     * @param letter Letter to search by, a to z or the string &#39;0-9&#39; (required)
     * @param rights The rights group to limit results to. (required)
     * @param page The page index. (required)
     * @param perPage The number of results to return. (required)
     * @param initialChildCount The depth to return child entities. (required)
     * @param sort The sort order of the results. (required)
     * @param sortDirection Whether to sort ascending or descending (required)
     * @param availability Whether to return all, or available programmes (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getProgrammesAtoZSearchWithHttpInfo(String letter, String rights, Long page, Long perPage, Integer initialChildCount, String sort, String sortDirection, String availability) throws ApiException {
        okhttp3.Call localVarCall = getProgrammesAtoZSearchValidateBeforeCall(letter, rights, page, perPage, initialChildCount, sort, sortDirection, availability, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Programmes by initial title character (asynchronously)
     * Get the Programmes whose title begins with the given initial character.
     * @param letter Letter to search by, a to z or the string &#39;0-9&#39; (required)
     * @param rights The rights group to limit results to. (required)
     * @param page The page index. (required)
     * @param perPage The number of results to return. (required)
     * @param initialChildCount The depth to return child entities. (required)
     * @param sort The sort order of the results. (required)
     * @param sortDirection Whether to sort ascending or descending (required)
     * @param availability Whether to return all, or available programmes (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProgrammesAtoZSearchAsync(String letter, String rights, Long page, Long perPage, Integer initialChildCount, String sort, String sortDirection, String availability, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProgrammesAtoZSearchValidateBeforeCall(letter, rights, page, perPage, initialChildCount, sort, sortDirection, availability, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
