/*
 * BBC iPlayer Business Layer
 * The definitive iPlayer API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: ibl-team@lists.forge.bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import org.openapitools.client.model.EpisodeImages;
import org.openapitools.client.model.EpisodeLabels;
import org.openapitools.client.model.EpisodeNextBroadcast;
import org.openapitools.client.model.EpisodeRelatedLinksInner;
import org.openapitools.client.model.EpisodeSynopses;
import org.openapitools.client.model.EpisodeTestsInner;
import org.openapitools.client.model.EpisodeVersionsInner;
import org.openapitools.client.model.MasterBrand;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Episode
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:15.122769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Episode {
  public static final String SERIALIZED_NAME_AUDIO_DESCRIBED = "audio_described";
  @SerializedName(SERIALIZED_NAME_AUDIO_DESCRIBED)
  private Boolean audioDescribed;

  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private List<String> categories = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHILDRENS = "childrens";
  @SerializedName(SERIALIZED_NAME_CHILDRENS)
  private Boolean childrens;

  public static final String SERIALIZED_NAME_EDITORIAL_SUBTITLE = "editorial_subtitle";
  @SerializedName(SERIALIZED_NAME_EDITORIAL_SUBTITLE)
  private String editorialSubtitle;

  public static final String SERIALIZED_NAME_EDITORIAL_TITLE = "editorial_title";
  @SerializedName(SERIALIZED_NAME_EDITORIAL_TITLE)
  private String editorialTitle;

  public static final String SERIALIZED_NAME_EVENT_GROUP_ID = "event_group_id";
  @SerializedName(SERIALIZED_NAME_EVENT_GROUP_ID)
  private String eventGroupId;

  public static final String SERIALIZED_NAME_GUIDANCE = "guidance";
  @SerializedName(SERIALIZED_NAME_GUIDANCE)
  private Boolean guidance;

  public static final String SERIALIZED_NAME_HAS_CREDITS = "has_credits";
  @SerializedName(SERIALIZED_NAME_HAS_CREDITS)
  private Boolean hasCredits;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IMAGES = "images";
  @SerializedName(SERIALIZED_NAME_IMAGES)
  private EpisodeImages images;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private EpisodeLabels labels;

  public static final String SERIALIZED_NAME_LEXICAL_SORT_LETTER = "lexical_sort_letter";
  @SerializedName(SERIALIZED_NAME_LEXICAL_SORT_LETTER)
  private String lexicalSortLetter;

  public static final String SERIALIZED_NAME_LIVE = "live";
  @SerializedName(SERIALIZED_NAME_LIVE)
  private Boolean live;

  public static final String SERIALIZED_NAME_LIVE_SUBTITLE = "live_subtitle";
  @SerializedName(SERIALIZED_NAME_LIVE_SUBTITLE)
  private String liveSubtitle;

  public static final String SERIALIZED_NAME_LIVE_TITLE = "live_title";
  @SerializedName(SERIALIZED_NAME_LIVE_TITLE)
  private String liveTitle;

  public static final String SERIALIZED_NAME_MASTER_BRAND = "master_brand";
  @SerializedName(SERIALIZED_NAME_MASTER_BRAND)
  private MasterBrand masterBrand;

  public static final String SERIALIZED_NAME_NEXT_BROADCAST = "next_broadcast";
  @SerializedName(SERIALIZED_NAME_NEXT_BROADCAST)
  private EpisodeNextBroadcast nextBroadcast;

  public static final String SERIALIZED_NAME_NUMERIC_TLEO_POSITION = "numeric_tleo_position";
  @SerializedName(SERIALIZED_NAME_NUMERIC_TLEO_POSITION)
  private BigDecimal numericTleoPosition;

  public static final String SERIALIZED_NAME_ORIGINAL_TITLE = "original_title";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_TITLE)
  private String originalTitle;

  public static final String SERIALIZED_NAME_PARENT_ID = "parent_id";
  @SerializedName(SERIALIZED_NAME_PARENT_ID)
  private String parentId;

  public static final String SERIALIZED_NAME_PARENT_POSITION = "parent_position";
  @SerializedName(SERIALIZED_NAME_PARENT_POSITION)
  private BigDecimal parentPosition;

  public static final String SERIALIZED_NAME_PREVIEW_ID = "preview_id";
  @SerializedName(SERIALIZED_NAME_PREVIEW_ID)
  private String previewId;

  /**
   * Gets or Sets programmeType
   */
  @JsonAdapter(ProgrammeTypeEnum.Adapter.class)
  public enum ProgrammeTypeEnum {
    NARRATIVE("narrative"),
    
    SEQUENTIAL("sequential"),
    
    SELF_CONTAINED("self-contained"),
    
    STRAND("strand"),
    
    UNCLASSIFIED("unclassified"),
    
    ONE_OFF("one-off");

    private String value;

    ProgrammeTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProgrammeTypeEnum fromValue(String value) {
      for (ProgrammeTypeEnum b : ProgrammeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProgrammeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProgrammeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProgrammeTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProgrammeTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProgrammeTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROGRAMME_TYPE = "programme_type";
  @SerializedName(SERIALIZED_NAME_PROGRAMME_TYPE)
  private ProgrammeTypeEnum programmeType;

  public static final String SERIALIZED_NAME_PROMOTED = "promoted";
  @SerializedName(SERIALIZED_NAME_PROMOTED)
  private Boolean promoted;

  public static final String SERIALIZED_NAME_RELATED_LINKS = "related_links";
  @SerializedName(SERIALIZED_NAME_RELATED_LINKS)
  private List<EpisodeRelatedLinksInner> relatedLinks = new ArrayList<>();

  public static final String SERIALIZED_NAME_RELEASE_DATE = "release_date";
  @SerializedName(SERIALIZED_NAME_RELEASE_DATE)
  private String releaseDate;

  public static final String SERIALIZED_NAME_RELEASE_DATE_TIME = "release_date_time";
  @SerializedName(SERIALIZED_NAME_RELEASE_DATE_TIME)
  private String releaseDateTime;

  /**
   * Gets or Sets requiresAb
   */
  @JsonAdapter(RequiresAbEnum.Adapter.class)
  public enum RequiresAbEnum {
    U13("u13"),
    
    U16("u16"),
    
    U18("u18"),
    
    O18("o18");

    private String value;

    RequiresAbEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RequiresAbEnum fromValue(String value) {
      for (RequiresAbEnum b : RequiresAbEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RequiresAbEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RequiresAbEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RequiresAbEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RequiresAbEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RequiresAbEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REQUIRES_AB = "requires_ab";
  @SerializedName(SERIALIZED_NAME_REQUIRES_AB)
  private Set<RequiresAbEnum> requiresAb = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_REQUIRES_SIGN_IN = "requires_sign_in";
  @SerializedName(SERIALIZED_NAME_REQUIRES_SIGN_IN)
  private Boolean requiresSignIn;

  public static final String SERIALIZED_NAME_REQUIRES_TV_LICENCE = "requires_tv_licence";
  @SerializedName(SERIALIZED_NAME_REQUIRES_TV_LICENCE)
  private Boolean requiresTvLicence;

  public static final String SERIALIZED_NAME_SIGNED = "signed";
  @SerializedName(SERIALIZED_NAME_SIGNED)
  private Boolean signed;

  public static final String SERIALIZED_NAME_SLICE_ID = "slice_id";
  @SerializedName(SERIALIZED_NAME_SLICE_ID)
  private String sliceId;

  public static final String SERIALIZED_NAME_SLICE_SUBTITLE = "slice_subtitle";
  @SerializedName(SERIALIZED_NAME_SLICE_SUBTITLE)
  private String sliceSubtitle;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    AVAILABLE("available"),
    
    UNAVAILABLE("unavailable");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_SUBTITLE = "subtitle";
  @SerializedName(SERIALIZED_NAME_SUBTITLE)
  private String subtitle;

  public static final String SERIALIZED_NAME_SYNOPSES = "synopses";
  @SerializedName(SERIALIZED_NAME_SYNOPSES)
  private EpisodeSynopses synopses;

  public static final String SERIALIZED_NAME_TESTS = "tests";
  @SerializedName(SERIALIZED_NAME_TESTS)
  private List<EpisodeTestsInner> tests = new ArrayList<>();

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TLEO_ID = "tleo_id";
  @SerializedName(SERIALIZED_NAME_TLEO_ID)
  private String tleoId;

  /**
   * Gets or Sets tleoType
   */
  @JsonAdapter(TleoTypeEnum.Adapter.class)
  public enum TleoTypeEnum {
    EPISODE("episode"),
    
    BRAND("brand"),
    
    SERIES("series");

    private String value;

    TleoTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TleoTypeEnum fromValue(String value) {
      for (TleoTypeEnum b : TleoTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TleoTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TleoTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TleoTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TleoTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TleoTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TLEO_TYPE = "tleo_type";
  @SerializedName(SERIALIZED_NAME_TLEO_TYPE)
  private TleoTypeEnum tleoType;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    EPISODE("episode"),
    
    EPISODE_LARGE("episode_large");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_VERSIONS = "versions";
  @SerializedName(SERIALIZED_NAME_VERSIONS)
  private List<EpisodeVersionsInner> versions = new ArrayList<>();

  public Episode() {
  }

  public Episode audioDescribed(Boolean audioDescribed) {
    this.audioDescribed = audioDescribed;
    return this;
  }

  /**
   * Get audioDescribed
   * @return audioDescribed
   */
  @javax.annotation.Nonnull
  public Boolean getAudioDescribed() {
    return audioDescribed;
  }

  public void setAudioDescribed(Boolean audioDescribed) {
    this.audioDescribed = audioDescribed;
  }


  public Episode categories(List<String> categories) {
    this.categories = categories;
    return this;
  }

  public Episode addCategoriesItem(String categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

  /**
   * Get categories
   * @return categories
   */
  @javax.annotation.Nonnull
  public List<String> getCategories() {
    return categories;
  }

  public void setCategories(List<String> categories) {
    this.categories = categories;
  }


  public Episode childrens(Boolean childrens) {
    this.childrens = childrens;
    return this;
  }

  /**
   * Get childrens
   * @return childrens
   */
  @javax.annotation.Nullable
  public Boolean getChildrens() {
    return childrens;
  }

  public void setChildrens(Boolean childrens) {
    this.childrens = childrens;
  }


  public Episode editorialSubtitle(String editorialSubtitle) {
    this.editorialSubtitle = editorialSubtitle;
    return this;
  }

  /**
   * Get editorialSubtitle
   * @return editorialSubtitle
   */
  @javax.annotation.Nullable
  public String getEditorialSubtitle() {
    return editorialSubtitle;
  }

  public void setEditorialSubtitle(String editorialSubtitle) {
    this.editorialSubtitle = editorialSubtitle;
  }


  public Episode editorialTitle(String editorialTitle) {
    this.editorialTitle = editorialTitle;
    return this;
  }

  /**
   * Get editorialTitle
   * @return editorialTitle
   */
  @javax.annotation.Nullable
  public String getEditorialTitle() {
    return editorialTitle;
  }

  public void setEditorialTitle(String editorialTitle) {
    this.editorialTitle = editorialTitle;
  }


  public Episode eventGroupId(String eventGroupId) {
    this.eventGroupId = eventGroupId;
    return this;
  }

  /**
   * Get eventGroupId
   * @return eventGroupId
   */
  @javax.annotation.Nullable
  public String getEventGroupId() {
    return eventGroupId;
  }

  public void setEventGroupId(String eventGroupId) {
    this.eventGroupId = eventGroupId;
  }


  public Episode guidance(Boolean guidance) {
    this.guidance = guidance;
    return this;
  }

  /**
   * Get guidance
   * @return guidance
   */
  @javax.annotation.Nonnull
  public Boolean getGuidance() {
    return guidance;
  }

  public void setGuidance(Boolean guidance) {
    this.guidance = guidance;
  }


  public Episode hasCredits(Boolean hasCredits) {
    this.hasCredits = hasCredits;
    return this;
  }

  /**
   * Get hasCredits
   * @return hasCredits
   */
  @javax.annotation.Nullable
  public Boolean getHasCredits() {
    return hasCredits;
  }

  public void setHasCredits(Boolean hasCredits) {
    this.hasCredits = hasCredits;
  }


  public Episode id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Episode images(EpisodeImages images) {
    this.images = images;
    return this;
  }

  /**
   * Get images
   * @return images
   */
  @javax.annotation.Nonnull
  public EpisodeImages getImages() {
    return images;
  }

  public void setImages(EpisodeImages images) {
    this.images = images;
  }


  public Episode labels(EpisodeLabels labels) {
    this.labels = labels;
    return this;
  }

  /**
   * Get labels
   * @return labels
   */
  @javax.annotation.Nullable
  public EpisodeLabels getLabels() {
    return labels;
  }

  public void setLabels(EpisodeLabels labels) {
    this.labels = labels;
  }


  public Episode lexicalSortLetter(String lexicalSortLetter) {
    this.lexicalSortLetter = lexicalSortLetter;
    return this;
  }

  /**
   * Get lexicalSortLetter
   * @return lexicalSortLetter
   */
  @javax.annotation.Nonnull
  public String getLexicalSortLetter() {
    return lexicalSortLetter;
  }

  public void setLexicalSortLetter(String lexicalSortLetter) {
    this.lexicalSortLetter = lexicalSortLetter;
  }


  public Episode live(Boolean live) {
    this.live = live;
    return this;
  }

  /**
   * Get live
   * @return live
   */
  @javax.annotation.Nullable
  public Boolean getLive() {
    return live;
  }

  public void setLive(Boolean live) {
    this.live = live;
  }


  public Episode liveSubtitle(String liveSubtitle) {
    this.liveSubtitle = liveSubtitle;
    return this;
  }

  /**
   * Get liveSubtitle
   * @return liveSubtitle
   */
  @javax.annotation.Nullable
  public String getLiveSubtitle() {
    return liveSubtitle;
  }

  public void setLiveSubtitle(String liveSubtitle) {
    this.liveSubtitle = liveSubtitle;
  }


  public Episode liveTitle(String liveTitle) {
    this.liveTitle = liveTitle;
    return this;
  }

  /**
   * Get liveTitle
   * @return liveTitle
   */
  @javax.annotation.Nullable
  public String getLiveTitle() {
    return liveTitle;
  }

  public void setLiveTitle(String liveTitle) {
    this.liveTitle = liveTitle;
  }


  public Episode masterBrand(MasterBrand masterBrand) {
    this.masterBrand = masterBrand;
    return this;
  }

  /**
   * Get masterBrand
   * @return masterBrand
   */
  @javax.annotation.Nonnull
  public MasterBrand getMasterBrand() {
    return masterBrand;
  }

  public void setMasterBrand(MasterBrand masterBrand) {
    this.masterBrand = masterBrand;
  }


  public Episode nextBroadcast(EpisodeNextBroadcast nextBroadcast) {
    this.nextBroadcast = nextBroadcast;
    return this;
  }

  /**
   * Get nextBroadcast
   * @return nextBroadcast
   */
  @javax.annotation.Nullable
  public EpisodeNextBroadcast getNextBroadcast() {
    return nextBroadcast;
  }

  public void setNextBroadcast(EpisodeNextBroadcast nextBroadcast) {
    this.nextBroadcast = nextBroadcast;
  }


  public Episode numericTleoPosition(BigDecimal numericTleoPosition) {
    this.numericTleoPosition = numericTleoPosition;
    return this;
  }

  /**
   * Get numericTleoPosition
   * @return numericTleoPosition
   */
  @javax.annotation.Nullable
  public BigDecimal getNumericTleoPosition() {
    return numericTleoPosition;
  }

  public void setNumericTleoPosition(BigDecimal numericTleoPosition) {
    this.numericTleoPosition = numericTleoPosition;
  }


  public Episode originalTitle(String originalTitle) {
    this.originalTitle = originalTitle;
    return this;
  }

  /**
   * Get originalTitle
   * @return originalTitle
   */
  @javax.annotation.Nullable
  public String getOriginalTitle() {
    return originalTitle;
  }

  public void setOriginalTitle(String originalTitle) {
    this.originalTitle = originalTitle;
  }


  public Episode parentId(String parentId) {
    this.parentId = parentId;
    return this;
  }

  /**
   * Get parentId
   * @return parentId
   */
  @javax.annotation.Nullable
  public String getParentId() {
    return parentId;
  }

  public void setParentId(String parentId) {
    this.parentId = parentId;
  }


  public Episode parentPosition(BigDecimal parentPosition) {
    this.parentPosition = parentPosition;
    return this;
  }

  /**
   * Get parentPosition
   * @return parentPosition
   */
  @javax.annotation.Nullable
  public BigDecimal getParentPosition() {
    return parentPosition;
  }

  public void setParentPosition(BigDecimal parentPosition) {
    this.parentPosition = parentPosition;
  }


  public Episode previewId(String previewId) {
    this.previewId = previewId;
    return this;
  }

  /**
   * Get previewId
   * @return previewId
   */
  @javax.annotation.Nullable
  public String getPreviewId() {
    return previewId;
  }

  public void setPreviewId(String previewId) {
    this.previewId = previewId;
  }


  public Episode programmeType(ProgrammeTypeEnum programmeType) {
    this.programmeType = programmeType;
    return this;
  }

  /**
   * Get programmeType
   * @return programmeType
   */
  @javax.annotation.Nullable
  public ProgrammeTypeEnum getProgrammeType() {
    return programmeType;
  }

  public void setProgrammeType(ProgrammeTypeEnum programmeType) {
    this.programmeType = programmeType;
  }


  public Episode promoted(Boolean promoted) {
    this.promoted = promoted;
    return this;
  }

  /**
   * Get promoted
   * @return promoted
   */
  @javax.annotation.Nullable
  public Boolean getPromoted() {
    return promoted;
  }

  public void setPromoted(Boolean promoted) {
    this.promoted = promoted;
  }


  public Episode relatedLinks(List<EpisodeRelatedLinksInner> relatedLinks) {
    this.relatedLinks = relatedLinks;
    return this;
  }

  public Episode addRelatedLinksItem(EpisodeRelatedLinksInner relatedLinksItem) {
    if (this.relatedLinks == null) {
      this.relatedLinks = new ArrayList<>();
    }
    this.relatedLinks.add(relatedLinksItem);
    return this;
  }

  /**
   * Get relatedLinks
   * @return relatedLinks
   */
  @javax.annotation.Nullable
  public List<EpisodeRelatedLinksInner> getRelatedLinks() {
    return relatedLinks;
  }

  public void setRelatedLinks(List<EpisodeRelatedLinksInner> relatedLinks) {
    this.relatedLinks = relatedLinks;
  }


  public Episode releaseDate(String releaseDate) {
    this.releaseDate = releaseDate;
    return this;
  }

  /**
   * Get releaseDate
   * @return releaseDate
   */
  @javax.annotation.Nullable
  public String getReleaseDate() {
    return releaseDate;
  }

  public void setReleaseDate(String releaseDate) {
    this.releaseDate = releaseDate;
  }


  public Episode releaseDateTime(String releaseDateTime) {
    this.releaseDateTime = releaseDateTime;
    return this;
  }

  /**
   * Get releaseDateTime
   * @return releaseDateTime
   */
  @javax.annotation.Nullable
  public String getReleaseDateTime() {
    return releaseDateTime;
  }

  public void setReleaseDateTime(String releaseDateTime) {
    this.releaseDateTime = releaseDateTime;
  }


  public Episode requiresAb(Set<RequiresAbEnum> requiresAb) {
    this.requiresAb = requiresAb;
    return this;
  }

  public Episode addRequiresAbItem(RequiresAbEnum requiresAbItem) {
    if (this.requiresAb == null) {
      this.requiresAb = new LinkedHashSet<>();
    }
    this.requiresAb.add(requiresAbItem);
    return this;
  }

  /**
   * Get requiresAb
   * @return requiresAb
   */
  @javax.annotation.Nullable
  public Set<RequiresAbEnum> getRequiresAb() {
    return requiresAb;
  }

  public void setRequiresAb(Set<RequiresAbEnum> requiresAb) {
    this.requiresAb = requiresAb;
  }


  public Episode requiresSignIn(Boolean requiresSignIn) {
    this.requiresSignIn = requiresSignIn;
    return this;
  }

  /**
   * Get requiresSignIn
   * @return requiresSignIn
   */
  @javax.annotation.Nonnull
  public Boolean getRequiresSignIn() {
    return requiresSignIn;
  }

  public void setRequiresSignIn(Boolean requiresSignIn) {
    this.requiresSignIn = requiresSignIn;
  }


  public Episode requiresTvLicence(Boolean requiresTvLicence) {
    this.requiresTvLicence = requiresTvLicence;
    return this;
  }

  /**
   * Get requiresTvLicence
   * @return requiresTvLicence
   */
  @javax.annotation.Nullable
  public Boolean getRequiresTvLicence() {
    return requiresTvLicence;
  }

  public void setRequiresTvLicence(Boolean requiresTvLicence) {
    this.requiresTvLicence = requiresTvLicence;
  }


  public Episode signed(Boolean signed) {
    this.signed = signed;
    return this;
  }

  /**
   * Get signed
   * @return signed
   */
  @javax.annotation.Nonnull
  public Boolean getSigned() {
    return signed;
  }

  public void setSigned(Boolean signed) {
    this.signed = signed;
  }


  public Episode sliceId(String sliceId) {
    this.sliceId = sliceId;
    return this;
  }

  /**
   * Get sliceId
   * @return sliceId
   */
  @javax.annotation.Nullable
  public String getSliceId() {
    return sliceId;
  }

  public void setSliceId(String sliceId) {
    this.sliceId = sliceId;
  }


  public Episode sliceSubtitle(String sliceSubtitle) {
    this.sliceSubtitle = sliceSubtitle;
    return this;
  }

  /**
   * Get sliceSubtitle
   * @return sliceSubtitle
   */
  @javax.annotation.Nullable
  public String getSliceSubtitle() {
    return sliceSubtitle;
  }

  public void setSliceSubtitle(String sliceSubtitle) {
    this.sliceSubtitle = sliceSubtitle;
  }


  public Episode status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public Episode subtitle(String subtitle) {
    this.subtitle = subtitle;
    return this;
  }

  /**
   * Get subtitle
   * @return subtitle
   */
  @javax.annotation.Nullable
  public String getSubtitle() {
    return subtitle;
  }

  public void setSubtitle(String subtitle) {
    this.subtitle = subtitle;
  }


  public Episode synopses(EpisodeSynopses synopses) {
    this.synopses = synopses;
    return this;
  }

  /**
   * Get synopses
   * @return synopses
   */
  @javax.annotation.Nonnull
  public EpisodeSynopses getSynopses() {
    return synopses;
  }

  public void setSynopses(EpisodeSynopses synopses) {
    this.synopses = synopses;
  }


  public Episode tests(List<EpisodeTestsInner> tests) {
    this.tests = tests;
    return this;
  }

  public Episode addTestsItem(EpisodeTestsInner testsItem) {
    if (this.tests == null) {
      this.tests = new ArrayList<>();
    }
    this.tests.add(testsItem);
    return this;
  }

  /**
   * Get tests
   * @return tests
   */
  @javax.annotation.Nullable
  public List<EpisodeTestsInner> getTests() {
    return tests;
  }

  public void setTests(List<EpisodeTestsInner> tests) {
    this.tests = tests;
  }


  public Episode title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public Episode tleoId(String tleoId) {
    this.tleoId = tleoId;
    return this;
  }

  /**
   * Get tleoId
   * @return tleoId
   */
  @javax.annotation.Nonnull
  public String getTleoId() {
    return tleoId;
  }

  public void setTleoId(String tleoId) {
    this.tleoId = tleoId;
  }


  public Episode tleoType(TleoTypeEnum tleoType) {
    this.tleoType = tleoType;
    return this;
  }

  /**
   * Get tleoType
   * @return tleoType
   */
  @javax.annotation.Nonnull
  public TleoTypeEnum getTleoType() {
    return tleoType;
  }

  public void setTleoType(TleoTypeEnum tleoType) {
    this.tleoType = tleoType;
  }


  public Episode type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public Episode versions(List<EpisodeVersionsInner> versions) {
    this.versions = versions;
    return this;
  }

  public Episode addVersionsItem(EpisodeVersionsInner versionsItem) {
    if (this.versions == null) {
      this.versions = new ArrayList<>();
    }
    this.versions.add(versionsItem);
    return this;
  }

  /**
   * Get versions
   * @return versions
   */
  @javax.annotation.Nonnull
  public List<EpisodeVersionsInner> getVersions() {
    return versions;
  }

  public void setVersions(List<EpisodeVersionsInner> versions) {
    this.versions = versions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Episode episode = (Episode) o;
    return Objects.equals(this.audioDescribed, episode.audioDescribed) &&
        Objects.equals(this.categories, episode.categories) &&
        Objects.equals(this.childrens, episode.childrens) &&
        Objects.equals(this.editorialSubtitle, episode.editorialSubtitle) &&
        Objects.equals(this.editorialTitle, episode.editorialTitle) &&
        Objects.equals(this.eventGroupId, episode.eventGroupId) &&
        Objects.equals(this.guidance, episode.guidance) &&
        Objects.equals(this.hasCredits, episode.hasCredits) &&
        Objects.equals(this.id, episode.id) &&
        Objects.equals(this.images, episode.images) &&
        Objects.equals(this.labels, episode.labels) &&
        Objects.equals(this.lexicalSortLetter, episode.lexicalSortLetter) &&
        Objects.equals(this.live, episode.live) &&
        Objects.equals(this.liveSubtitle, episode.liveSubtitle) &&
        Objects.equals(this.liveTitle, episode.liveTitle) &&
        Objects.equals(this.masterBrand, episode.masterBrand) &&
        Objects.equals(this.nextBroadcast, episode.nextBroadcast) &&
        Objects.equals(this.numericTleoPosition, episode.numericTleoPosition) &&
        Objects.equals(this.originalTitle, episode.originalTitle) &&
        Objects.equals(this.parentId, episode.parentId) &&
        Objects.equals(this.parentPosition, episode.parentPosition) &&
        Objects.equals(this.previewId, episode.previewId) &&
        Objects.equals(this.programmeType, episode.programmeType) &&
        Objects.equals(this.promoted, episode.promoted) &&
        Objects.equals(this.relatedLinks, episode.relatedLinks) &&
        Objects.equals(this.releaseDate, episode.releaseDate) &&
        Objects.equals(this.releaseDateTime, episode.releaseDateTime) &&
        Objects.equals(this.requiresAb, episode.requiresAb) &&
        Objects.equals(this.requiresSignIn, episode.requiresSignIn) &&
        Objects.equals(this.requiresTvLicence, episode.requiresTvLicence) &&
        Objects.equals(this.signed, episode.signed) &&
        Objects.equals(this.sliceId, episode.sliceId) &&
        Objects.equals(this.sliceSubtitle, episode.sliceSubtitle) &&
        Objects.equals(this.status, episode.status) &&
        Objects.equals(this.subtitle, episode.subtitle) &&
        Objects.equals(this.synopses, episode.synopses) &&
        Objects.equals(this.tests, episode.tests) &&
        Objects.equals(this.title, episode.title) &&
        Objects.equals(this.tleoId, episode.tleoId) &&
        Objects.equals(this.tleoType, episode.tleoType) &&
        Objects.equals(this.type, episode.type) &&
        Objects.equals(this.versions, episode.versions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(audioDescribed, categories, childrens, editorialSubtitle, editorialTitle, eventGroupId, guidance, hasCredits, id, images, labels, lexicalSortLetter, live, liveSubtitle, liveTitle, masterBrand, nextBroadcast, numericTleoPosition, originalTitle, parentId, parentPosition, previewId, programmeType, promoted, relatedLinks, releaseDate, releaseDateTime, requiresAb, requiresSignIn, requiresTvLicence, signed, sliceId, sliceSubtitle, status, subtitle, synopses, tests, title, tleoId, tleoType, type, versions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Episode {\n");
    sb.append("    audioDescribed: ").append(toIndentedString(audioDescribed)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    childrens: ").append(toIndentedString(childrens)).append("\n");
    sb.append("    editorialSubtitle: ").append(toIndentedString(editorialSubtitle)).append("\n");
    sb.append("    editorialTitle: ").append(toIndentedString(editorialTitle)).append("\n");
    sb.append("    eventGroupId: ").append(toIndentedString(eventGroupId)).append("\n");
    sb.append("    guidance: ").append(toIndentedString(guidance)).append("\n");
    sb.append("    hasCredits: ").append(toIndentedString(hasCredits)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    lexicalSortLetter: ").append(toIndentedString(lexicalSortLetter)).append("\n");
    sb.append("    live: ").append(toIndentedString(live)).append("\n");
    sb.append("    liveSubtitle: ").append(toIndentedString(liveSubtitle)).append("\n");
    sb.append("    liveTitle: ").append(toIndentedString(liveTitle)).append("\n");
    sb.append("    masterBrand: ").append(toIndentedString(masterBrand)).append("\n");
    sb.append("    nextBroadcast: ").append(toIndentedString(nextBroadcast)).append("\n");
    sb.append("    numericTleoPosition: ").append(toIndentedString(numericTleoPosition)).append("\n");
    sb.append("    originalTitle: ").append(toIndentedString(originalTitle)).append("\n");
    sb.append("    parentId: ").append(toIndentedString(parentId)).append("\n");
    sb.append("    parentPosition: ").append(toIndentedString(parentPosition)).append("\n");
    sb.append("    previewId: ").append(toIndentedString(previewId)).append("\n");
    sb.append("    programmeType: ").append(toIndentedString(programmeType)).append("\n");
    sb.append("    promoted: ").append(toIndentedString(promoted)).append("\n");
    sb.append("    relatedLinks: ").append(toIndentedString(relatedLinks)).append("\n");
    sb.append("    releaseDate: ").append(toIndentedString(releaseDate)).append("\n");
    sb.append("    releaseDateTime: ").append(toIndentedString(releaseDateTime)).append("\n");
    sb.append("    requiresAb: ").append(toIndentedString(requiresAb)).append("\n");
    sb.append("    requiresSignIn: ").append(toIndentedString(requiresSignIn)).append("\n");
    sb.append("    requiresTvLicence: ").append(toIndentedString(requiresTvLicence)).append("\n");
    sb.append("    signed: ").append(toIndentedString(signed)).append("\n");
    sb.append("    sliceId: ").append(toIndentedString(sliceId)).append("\n");
    sb.append("    sliceSubtitle: ").append(toIndentedString(sliceSubtitle)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    subtitle: ").append(toIndentedString(subtitle)).append("\n");
    sb.append("    synopses: ").append(toIndentedString(synopses)).append("\n");
    sb.append("    tests: ").append(toIndentedString(tests)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    tleoId: ").append(toIndentedString(tleoId)).append("\n");
    sb.append("    tleoType: ").append(toIndentedString(tleoType)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    versions: ").append(toIndentedString(versions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("audio_described");
    openapiFields.add("categories");
    openapiFields.add("childrens");
    openapiFields.add("editorial_subtitle");
    openapiFields.add("editorial_title");
    openapiFields.add("event_group_id");
    openapiFields.add("guidance");
    openapiFields.add("has_credits");
    openapiFields.add("id");
    openapiFields.add("images");
    openapiFields.add("labels");
    openapiFields.add("lexical_sort_letter");
    openapiFields.add("live");
    openapiFields.add("live_subtitle");
    openapiFields.add("live_title");
    openapiFields.add("master_brand");
    openapiFields.add("next_broadcast");
    openapiFields.add("numeric_tleo_position");
    openapiFields.add("original_title");
    openapiFields.add("parent_id");
    openapiFields.add("parent_position");
    openapiFields.add("preview_id");
    openapiFields.add("programme_type");
    openapiFields.add("promoted");
    openapiFields.add("related_links");
    openapiFields.add("release_date");
    openapiFields.add("release_date_time");
    openapiFields.add("requires_ab");
    openapiFields.add("requires_sign_in");
    openapiFields.add("requires_tv_licence");
    openapiFields.add("signed");
    openapiFields.add("slice_id");
    openapiFields.add("slice_subtitle");
    openapiFields.add("status");
    openapiFields.add("subtitle");
    openapiFields.add("synopses");
    openapiFields.add("tests");
    openapiFields.add("title");
    openapiFields.add("tleo_id");
    openapiFields.add("tleo_type");
    openapiFields.add("type");
    openapiFields.add("versions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("audio_described");
    openapiRequiredFields.add("categories");
    openapiRequiredFields.add("guidance");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("images");
    openapiRequiredFields.add("lexical_sort_letter");
    openapiRequiredFields.add("master_brand");
    openapiRequiredFields.add("requires_sign_in");
    openapiRequiredFields.add("signed");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("synopses");
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("tleo_id");
    openapiRequiredFields.add("tleo_type");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("versions");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Episode
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Episode.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Episode is not found in the empty JSON string", Episode.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Episode.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Episode` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Episode.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("categories") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("categories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `categories` to be an array in the JSON string but got `%s`", jsonObj.get("categories").toString()));
      }
      if ((jsonObj.get("editorial_subtitle") != null && !jsonObj.get("editorial_subtitle").isJsonNull()) && !jsonObj.get("editorial_subtitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `editorial_subtitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("editorial_subtitle").toString()));
      }
      if ((jsonObj.get("editorial_title") != null && !jsonObj.get("editorial_title").isJsonNull()) && !jsonObj.get("editorial_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `editorial_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("editorial_title").toString()));
      }
      if ((jsonObj.get("event_group_id") != null && !jsonObj.get("event_group_id").isJsonNull()) && !jsonObj.get("event_group_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_group_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event_group_id").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the required field `images`
      EpisodeImages.validateJsonElement(jsonObj.get("images"));
      // validate the optional field `labels`
      if (jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonNull()) {
        EpisodeLabels.validateJsonElement(jsonObj.get("labels"));
      }
      if (!jsonObj.get("lexical_sort_letter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lexical_sort_letter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lexical_sort_letter").toString()));
      }
      if ((jsonObj.get("live_subtitle") != null && !jsonObj.get("live_subtitle").isJsonNull()) && !jsonObj.get("live_subtitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `live_subtitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("live_subtitle").toString()));
      }
      if ((jsonObj.get("live_title") != null && !jsonObj.get("live_title").isJsonNull()) && !jsonObj.get("live_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `live_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("live_title").toString()));
      }
      // validate the required field `master_brand`
      MasterBrand.validateJsonElement(jsonObj.get("master_brand"));
      // validate the optional field `next_broadcast`
      if (jsonObj.get("next_broadcast") != null && !jsonObj.get("next_broadcast").isJsonNull()) {
        EpisodeNextBroadcast.validateJsonElement(jsonObj.get("next_broadcast"));
      }
      if ((jsonObj.get("original_title") != null && !jsonObj.get("original_title").isJsonNull()) && !jsonObj.get("original_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `original_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("original_title").toString()));
      }
      if ((jsonObj.get("parent_id") != null && !jsonObj.get("parent_id").isJsonNull()) && !jsonObj.get("parent_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parent_id").toString()));
      }
      if ((jsonObj.get("preview_id") != null && !jsonObj.get("preview_id").isJsonNull()) && !jsonObj.get("preview_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preview_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preview_id").toString()));
      }
      if ((jsonObj.get("programme_type") != null && !jsonObj.get("programme_type").isJsonNull()) && !jsonObj.get("programme_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `programme_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("programme_type").toString()));
      }
      // validate the optional field `programme_type`
      if (jsonObj.get("programme_type") != null && !jsonObj.get("programme_type").isJsonNull()) {
        ProgrammeTypeEnum.validateJsonElement(jsonObj.get("programme_type"));
      }
      if (jsonObj.get("related_links") != null && !jsonObj.get("related_links").isJsonNull()) {
        JsonArray jsonArrayrelatedLinks = jsonObj.getAsJsonArray("related_links");
        if (jsonArrayrelatedLinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("related_links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `related_links` to be an array in the JSON string but got `%s`", jsonObj.get("related_links").toString()));
          }

          // validate the optional field `related_links` (array)
          for (int i = 0; i < jsonArrayrelatedLinks.size(); i++) {
            EpisodeRelatedLinksInner.validateJsonElement(jsonArrayrelatedLinks.get(i));
          };
        }
      }
      if ((jsonObj.get("release_date") != null && !jsonObj.get("release_date").isJsonNull()) && !jsonObj.get("release_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `release_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("release_date").toString()));
      }
      if ((jsonObj.get("release_date_time") != null && !jsonObj.get("release_date_time").isJsonNull()) && !jsonObj.get("release_date_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `release_date_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("release_date_time").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("requires_ab") != null && !jsonObj.get("requires_ab").isJsonNull() && !jsonObj.get("requires_ab").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `requires_ab` to be an array in the JSON string but got `%s`", jsonObj.get("requires_ab").toString()));
      }
      if ((jsonObj.get("slice_id") != null && !jsonObj.get("slice_id").isJsonNull()) && !jsonObj.get("slice_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slice_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slice_id").toString()));
      }
      if ((jsonObj.get("slice_subtitle") != null && !jsonObj.get("slice_subtitle").isJsonNull()) && !jsonObj.get("slice_subtitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slice_subtitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slice_subtitle").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the required field `status`
      StatusEnum.validateJsonElement(jsonObj.get("status"));
      if ((jsonObj.get("subtitle") != null && !jsonObj.get("subtitle").isJsonNull()) && !jsonObj.get("subtitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subtitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subtitle").toString()));
      }
      // validate the required field `synopses`
      EpisodeSynopses.validateJsonElement(jsonObj.get("synopses"));
      if (jsonObj.get("tests") != null && !jsonObj.get("tests").isJsonNull()) {
        JsonArray jsonArraytests = jsonObj.getAsJsonArray("tests");
        if (jsonArraytests != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tests").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tests` to be an array in the JSON string but got `%s`", jsonObj.get("tests").toString()));
          }

          // validate the optional field `tests` (array)
          for (int i = 0; i < jsonArraytests.size(); i++) {
            EpisodeTestsInner.validateJsonElement(jsonArraytests.get(i));
          };
        }
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (!jsonObj.get("tleo_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tleo_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tleo_id").toString()));
      }
      if (!jsonObj.get("tleo_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tleo_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tleo_type").toString()));
      }
      // validate the required field `tleo_type`
      TleoTypeEnum.validateJsonElement(jsonObj.get("tleo_type"));
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
      // ensure the json data is an array
      if (!jsonObj.get("versions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `versions` to be an array in the JSON string but got `%s`", jsonObj.get("versions").toString()));
      }

      JsonArray jsonArrayversions = jsonObj.getAsJsonArray("versions");
      // validate the required field `versions` (array)
      for (int i = 0; i < jsonArrayversions.size(); i++) {
        EpisodeVersionsInner.validateJsonElement(jsonArrayversions.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Episode.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Episode' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Episode> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Episode.class));

       return (TypeAdapter<T>) new TypeAdapter<Episode>() {
           @Override
           public void write(JsonWriter out, Episode value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Episode read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Episode given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Episode
   * @throws IOException if the JSON string is invalid with respect to Episode
   */
  public static Episode fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Episode.class);
  }

  /**
   * Convert an instance of Episode to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

