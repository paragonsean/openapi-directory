/*
 * BBC iPlayer Business Layer
 * The definitive iPlayer API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: ibl-team@lists.forge.bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProgrammesTleosApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProgrammesTleosApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProgrammesTleosApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getBroadcastsByChannel
     * @param channel The channel identifier to limit results to. (required)
     * @param lang The language for any applicable localised strings. (required)
     * @param rights The rights group to limit results to. (required)
     * @param availability Whether to return all, or available programmes (required)
     * @param perPage The number of results to return. (required)
     * @param mixin Request additional data in the output (optional)
     * @param from Time to return results from, e.g. -3h (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBroadcastsByChannelCall(String channel, String lang, String rights, String availability, Long perPage, List<String> mixin, String from, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channel}/broadcasts"
            .replace("{" + "channel" + "}", localVarApiClient.escapeString(channel.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang", lang));
        }

        if (rights != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rights", rights));
        }

        if (availability != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("availability", availability));
        }

        if (mixin != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "mixin", mixin));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBroadcastsByChannelValidateBeforeCall(String channel, String lang, String rights, String availability, Long perPage, List<String> mixin, String from, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channel' is set
        if (channel == null) {
            throw new ApiException("Missing the required parameter 'channel' when calling getBroadcastsByChannel(Async)");
        }

        // verify the required parameter 'lang' is set
        if (lang == null) {
            throw new ApiException("Missing the required parameter 'lang' when calling getBroadcastsByChannel(Async)");
        }

        // verify the required parameter 'rights' is set
        if (rights == null) {
            throw new ApiException("Missing the required parameter 'rights' when calling getBroadcastsByChannel(Async)");
        }

        // verify the required parameter 'availability' is set
        if (availability == null) {
            throw new ApiException("Missing the required parameter 'availability' when calling getBroadcastsByChannel(Async)");
        }

        // verify the required parameter 'perPage' is set
        if (perPage == null) {
            throw new ApiException("Missing the required parameter 'perPage' when calling getBroadcastsByChannel(Async)");
        }

        return getBroadcastsByChannelCall(channel, lang, rights, availability, perPage, mixin, from, _callback);

    }

    /**
     * Get broadcasts by channel
     * Get broadcasts by channel
     * @param channel The channel identifier to limit results to. (required)
     * @param lang The language for any applicable localised strings. (required)
     * @param rights The rights group to limit results to. (required)
     * @param availability Whether to return all, or available programmes (required)
     * @param perPage The number of results to return. (required)
     * @param mixin Request additional data in the output (optional)
     * @param from Time to return results from, e.g. -3h (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Object getBroadcastsByChannel(String channel, String lang, String rights, String availability, Long perPage, List<String> mixin, String from) throws ApiException {
        ApiResponse<Object> localVarResp = getBroadcastsByChannelWithHttpInfo(channel, lang, rights, availability, perPage, mixin, from);
        return localVarResp.getData();
    }

    /**
     * Get broadcasts by channel
     * Get broadcasts by channel
     * @param channel The channel identifier to limit results to. (required)
     * @param lang The language for any applicable localised strings. (required)
     * @param rights The rights group to limit results to. (required)
     * @param availability Whether to return all, or available programmes (required)
     * @param perPage The number of results to return. (required)
     * @param mixin Request additional data in the output (optional)
     * @param from Time to return results from, e.g. -3h (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getBroadcastsByChannelWithHttpInfo(String channel, String lang, String rights, String availability, Long perPage, List<String> mixin, String from) throws ApiException {
        okhttp3.Call localVarCall = getBroadcastsByChannelValidateBeforeCall(channel, lang, rights, availability, perPage, mixin, from, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get broadcasts by channel (asynchronously)
     * Get broadcasts by channel
     * @param channel The channel identifier to limit results to. (required)
     * @param lang The language for any applicable localised strings. (required)
     * @param rights The rights group to limit results to. (required)
     * @param availability Whether to return all, or available programmes (required)
     * @param perPage The number of results to return. (required)
     * @param mixin Request additional data in the output (optional)
     * @param from Time to return results from, e.g. -3h (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBroadcastsByChannelAsync(String channel, String lang, String rights, String availability, Long perPage, List<String> mixin, String from, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBroadcastsByChannelValidateBeforeCall(channel, lang, rights, availability, perPage, mixin, from, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getHighlightsByCategory
     * @param category The category identifier to return results from. (required)
     * @param lang The language for any applicable localised strings. (required)
     * @param rights The rights group to limit results to. (required)
     * @param availability Whether to return all, or available programmes (required)
     * @param mixin Request additional data in the output (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHighlightsByCategoryCall(String category, String lang, String rights, String availability, List<String> mixin, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories/{category}/highlights"
            .replace("{" + "category" + "}", localVarApiClient.escapeString(category.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang", lang));
        }

        if (rights != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rights", rights));
        }

        if (availability != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("availability", availability));
        }

        if (mixin != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "mixin", mixin));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHighlightsByCategoryValidateBeforeCall(String category, String lang, String rights, String availability, List<String> mixin, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling getHighlightsByCategory(Async)");
        }

        // verify the required parameter 'lang' is set
        if (lang == null) {
            throw new ApiException("Missing the required parameter 'lang' when calling getHighlightsByCategory(Async)");
        }

        // verify the required parameter 'rights' is set
        if (rights == null) {
            throw new ApiException("Missing the required parameter 'rights' when calling getHighlightsByCategory(Async)");
        }

        // verify the required parameter 'availability' is set
        if (availability == null) {
            throw new ApiException("Missing the required parameter 'availability' when calling getHighlightsByCategory(Async)");
        }

        return getHighlightsByCategoryCall(category, lang, rights, availability, mixin, _callback);

    }

    /**
     * List the highlights for a category.
     * Get the editorial highlights of a given category in TV &amp; iPlayer.
     * @param category The category identifier to return results from. (required)
     * @param lang The language for any applicable localised strings. (required)
     * @param rights The rights group to limit results to. (required)
     * @param availability Whether to return all, or available programmes (required)
     * @param mixin Request additional data in the output (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Object getHighlightsByCategory(String category, String lang, String rights, String availability, List<String> mixin) throws ApiException {
        ApiResponse<Object> localVarResp = getHighlightsByCategoryWithHttpInfo(category, lang, rights, availability, mixin);
        return localVarResp.getData();
    }

    /**
     * List the highlights for a category.
     * Get the editorial highlights of a given category in TV &amp; iPlayer.
     * @param category The category identifier to return results from. (required)
     * @param lang The language for any applicable localised strings. (required)
     * @param rights The rights group to limit results to. (required)
     * @param availability Whether to return all, or available programmes (required)
     * @param mixin Request additional data in the output (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getHighlightsByCategoryWithHttpInfo(String category, String lang, String rights, String availability, List<String> mixin) throws ApiException {
        okhttp3.Call localVarCall = getHighlightsByCategoryValidateBeforeCall(category, lang, rights, availability, mixin, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the highlights for a category. (asynchronously)
     * Get the editorial highlights of a given category in TV &amp; iPlayer.
     * @param category The category identifier to return results from. (required)
     * @param lang The language for any applicable localised strings. (required)
     * @param rights The rights group to limit results to. (required)
     * @param availability Whether to return all, or available programmes (required)
     * @param mixin Request additional data in the output (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHighlightsByCategoryAsync(String category, String lang, String rights, String availability, List<String> mixin, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHighlightsByCategoryValidateBeforeCall(category, lang, rights, availability, mixin, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProgrammeHighlights
     * @param lang The language for any applicable localised strings. (required)
     * @param rights The rights group to limit results to. (required)
     * @param availability Whether to return all, or available programmes (required)
     * @param mixin Request additional data in the output (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProgrammeHighlightsCall(String lang, String rights, String availability, List<String> mixin, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/home/highlights";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang", lang));
        }

        if (rights != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rights", rights));
        }

        if (availability != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("availability", availability));
        }

        if (mixin != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "mixin", mixin));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProgrammeHighlightsValidateBeforeCall(String lang, String rights, String availability, List<String> mixin, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lang' is set
        if (lang == null) {
            throw new ApiException("Missing the required parameter 'lang' when calling getProgrammeHighlights(Async)");
        }

        // verify the required parameter 'rights' is set
        if (rights == null) {
            throw new ApiException("Missing the required parameter 'rights' when calling getProgrammeHighlights(Async)");
        }

        // verify the required parameter 'availability' is set
        if (availability == null) {
            throw new ApiException("Missing the required parameter 'availability' when calling getProgrammeHighlights(Async)");
        }

        return getProgrammeHighlightsCall(lang, rights, availability, mixin, _callback);

    }

    /**
     * Get programme highlights
     * Get programme highlights
     * @param lang The language for any applicable localised strings. (required)
     * @param rights The rights group to limit results to. (required)
     * @param availability Whether to return all, or available programmes (required)
     * @param mixin Request additional data in the output (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Object getProgrammeHighlights(String lang, String rights, String availability, List<String> mixin) throws ApiException {
        ApiResponse<Object> localVarResp = getProgrammeHighlightsWithHttpInfo(lang, rights, availability, mixin);
        return localVarResp.getData();
    }

    /**
     * Get programme highlights
     * Get programme highlights
     * @param lang The language for any applicable localised strings. (required)
     * @param rights The rights group to limit results to. (required)
     * @param availability Whether to return all, or available programmes (required)
     * @param mixin Request additional data in the output (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getProgrammeHighlightsWithHttpInfo(String lang, String rights, String availability, List<String> mixin) throws ApiException {
        okhttp3.Call localVarCall = getProgrammeHighlightsValidateBeforeCall(lang, rights, availability, mixin, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get programme highlights (asynchronously)
     * Get programme highlights
     * @param lang The language for any applicable localised strings. (required)
     * @param rights The rights group to limit results to. (required)
     * @param availability Whether to return all, or available programmes (required)
     * @param mixin Request additional data in the output (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProgrammeHighlightsAsync(String lang, String rights, String availability, List<String> mixin, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProgrammeHighlightsValidateBeforeCall(lang, rights, availability, mixin, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProgrammesByCategory
     * @param category The category identifier to return results from. (required)
     * @param lang The language for any applicable localised strings. (required)
     * @param rights The rights group to limit results to. (required)
     * @param availability Whether to return all, or available programmes (required)
     * @param page The page index. (required)
     * @param perPage The number of results to return. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProgrammesByCategoryCall(String category, String lang, String rights, String availability, Long page, Long perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories/{category}/programmes"
            .replace("{" + "category" + "}", localVarApiClient.escapeString(category.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang", lang));
        }

        if (rights != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rights", rights));
        }

        if (availability != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("availability", availability));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProgrammesByCategoryValidateBeforeCall(String category, String lang, String rights, String availability, Long page, Long perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling getProgrammesByCategory(Async)");
        }

        // verify the required parameter 'lang' is set
        if (lang == null) {
            throw new ApiException("Missing the required parameter 'lang' when calling getProgrammesByCategory(Async)");
        }

        // verify the required parameter 'rights' is set
        if (rights == null) {
            throw new ApiException("Missing the required parameter 'rights' when calling getProgrammesByCategory(Async)");
        }

        // verify the required parameter 'availability' is set
        if (availability == null) {
            throw new ApiException("Missing the required parameter 'availability' when calling getProgrammesByCategory(Async)");
        }

        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling getProgrammesByCategory(Async)");
        }

        // verify the required parameter 'perPage' is set
        if (perPage == null) {
            throw new ApiException("Missing the required parameter 'perPage' when calling getProgrammesByCategory(Async)");
        }

        return getProgrammesByCategoryCall(category, lang, rights, availability, page, perPage, _callback);

    }

    /**
     * List all the programmes for a category.
     * Get the list of all the Programmes (TLEOs) for a given category in TV &amp; iPlayer.
     * @param category The category identifier to return results from. (required)
     * @param lang The language for any applicable localised strings. (required)
     * @param rights The rights group to limit results to. (required)
     * @param availability Whether to return all, or available programmes (required)
     * @param page The page index. (required)
     * @param perPage The number of results to return. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Object getProgrammesByCategory(String category, String lang, String rights, String availability, Long page, Long perPage) throws ApiException {
        ApiResponse<Object> localVarResp = getProgrammesByCategoryWithHttpInfo(category, lang, rights, availability, page, perPage);
        return localVarResp.getData();
    }

    /**
     * List all the programmes for a category.
     * Get the list of all the Programmes (TLEOs) for a given category in TV &amp; iPlayer.
     * @param category The category identifier to return results from. (required)
     * @param lang The language for any applicable localised strings. (required)
     * @param rights The rights group to limit results to. (required)
     * @param availability Whether to return all, or available programmes (required)
     * @param page The page index. (required)
     * @param perPage The number of results to return. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getProgrammesByCategoryWithHttpInfo(String category, String lang, String rights, String availability, Long page, Long perPage) throws ApiException {
        okhttp3.Call localVarCall = getProgrammesByCategoryValidateBeforeCall(category, lang, rights, availability, page, perPage, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all the programmes for a category. (asynchronously)
     * Get the list of all the Programmes (TLEOs) for a given category in TV &amp; iPlayer.
     * @param category The category identifier to return results from. (required)
     * @param lang The language for any applicable localised strings. (required)
     * @param rights The rights group to limit results to. (required)
     * @param availability Whether to return all, or available programmes (required)
     * @param page The page index. (required)
     * @param perPage The number of results to return. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProgrammesByCategoryAsync(String category, String lang, String rights, String availability, Long page, Long perPage, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProgrammesByCategoryValidateBeforeCall(category, lang, rights, availability, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProgrammesByChannel
     * @param channel The channel identifier to limit results to. (required)
     * @param lang The language for any applicable localised strings. (required)
     * @param rights The rights group to limit results to. (required)
     * @param availability Whether to return all, or available programmes (required)
     * @param page The page index. (required)
     * @param perPage The number of results to return. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProgrammesByChannelCall(String channel, String lang, String rights, String availability, Long page, Long perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channel}/programmes"
            .replace("{" + "channel" + "}", localVarApiClient.escapeString(channel.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang", lang));
        }

        if (rights != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rights", rights));
        }

        if (availability != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("availability", availability));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProgrammesByChannelValidateBeforeCall(String channel, String lang, String rights, String availability, Long page, Long perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channel' is set
        if (channel == null) {
            throw new ApiException("Missing the required parameter 'channel' when calling getProgrammesByChannel(Async)");
        }

        // verify the required parameter 'lang' is set
        if (lang == null) {
            throw new ApiException("Missing the required parameter 'lang' when calling getProgrammesByChannel(Async)");
        }

        // verify the required parameter 'rights' is set
        if (rights == null) {
            throw new ApiException("Missing the required parameter 'rights' when calling getProgrammesByChannel(Async)");
        }

        // verify the required parameter 'availability' is set
        if (availability == null) {
            throw new ApiException("Missing the required parameter 'availability' when calling getProgrammesByChannel(Async)");
        }

        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling getProgrammesByChannel(Async)");
        }

        // verify the required parameter 'perPage' is set
        if (perPage == null) {
            throw new ApiException("Missing the required parameter 'perPage' when calling getProgrammesByChannel(Async)");
        }

        return getProgrammesByChannelCall(channel, lang, rights, availability, page, perPage, _callback);

    }

    /**
     * Get programmes by channel
     * Get programmes by channel
     * @param channel The channel identifier to limit results to. (required)
     * @param lang The language for any applicable localised strings. (required)
     * @param rights The rights group to limit results to. (required)
     * @param availability Whether to return all, or available programmes (required)
     * @param page The page index. (required)
     * @param perPage The number of results to return. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Object getProgrammesByChannel(String channel, String lang, String rights, String availability, Long page, Long perPage) throws ApiException {
        ApiResponse<Object> localVarResp = getProgrammesByChannelWithHttpInfo(channel, lang, rights, availability, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get programmes by channel
     * Get programmes by channel
     * @param channel The channel identifier to limit results to. (required)
     * @param lang The language for any applicable localised strings. (required)
     * @param rights The rights group to limit results to. (required)
     * @param availability Whether to return all, or available programmes (required)
     * @param page The page index. (required)
     * @param perPage The number of results to return. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getProgrammesByChannelWithHttpInfo(String channel, String lang, String rights, String availability, Long page, Long perPage) throws ApiException {
        okhttp3.Call localVarCall = getProgrammesByChannelValidateBeforeCall(channel, lang, rights, availability, page, perPage, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get programmes by channel (asynchronously)
     * Get programmes by channel
     * @param channel The channel identifier to limit results to. (required)
     * @param lang The language for any applicable localised strings. (required)
     * @param rights The rights group to limit results to. (required)
     * @param availability Whether to return all, or available programmes (required)
     * @param page The page index. (required)
     * @param perPage The number of results to return. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProgrammesByChannelAsync(String channel, String lang, String rights, String availability, Long page, Long perPage, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProgrammesByChannelValidateBeforeCall(channel, lang, rights, availability, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProgrammesByParentPID
     * @param pid The programme identifier. (required)
     * @param rights The rights group to limit results to. (required)
     * @param availability Whether to return all, or available programmes (required)
     * @param initialChildCount The depth to return child entities. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProgrammesByParentPIDCall(String pid, String rights, String availability, Integer initialChildCount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/programmes/{pid}"
            .replace("{" + "pid" + "}", localVarApiClient.escapeString(pid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rights != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rights", rights));
        }

        if (availability != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("availability", availability));
        }

        if (initialChildCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("initial_child_count", initialChildCount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProgrammesByParentPIDValidateBeforeCall(String pid, String rights, String availability, Integer initialChildCount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pid' is set
        if (pid == null) {
            throw new ApiException("Missing the required parameter 'pid' when calling getProgrammesByParentPID(Async)");
        }

        // verify the required parameter 'rights' is set
        if (rights == null) {
            throw new ApiException("Missing the required parameter 'rights' when calling getProgrammesByParentPID(Async)");
        }

        // verify the required parameter 'availability' is set
        if (availability == null) {
            throw new ApiException("Missing the required parameter 'availability' when calling getProgrammesByParentPID(Async)");
        }

        // verify the required parameter 'initialChildCount' is set
        if (initialChildCount == null) {
            throw new ApiException("Missing the required parameter 'initialChildCount' when calling getProgrammesByParentPID(Async)");
        }

        return getProgrammesByParentPIDCall(pid, rights, availability, initialChildCount, _callback);

    }

    /**
     * Programme for a given pid.
     * Get the programme for a given programme identifier.
     * @param pid The programme identifier. (required)
     * @param rights The rights group to limit results to. (required)
     * @param availability Whether to return all, or available programmes (required)
     * @param initialChildCount The depth to return child entities. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Object getProgrammesByParentPID(String pid, String rights, String availability, Integer initialChildCount) throws ApiException {
        ApiResponse<Object> localVarResp = getProgrammesByParentPIDWithHttpInfo(pid, rights, availability, initialChildCount);
        return localVarResp.getData();
    }

    /**
     * Programme for a given pid.
     * Get the programme for a given programme identifier.
     * @param pid The programme identifier. (required)
     * @param rights The rights group to limit results to. (required)
     * @param availability Whether to return all, or available programmes (required)
     * @param initialChildCount The depth to return child entities. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getProgrammesByParentPIDWithHttpInfo(String pid, String rights, String availability, Integer initialChildCount) throws ApiException {
        okhttp3.Call localVarCall = getProgrammesByParentPIDValidateBeforeCall(pid, rights, availability, initialChildCount, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Programme for a given pid. (asynchronously)
     * Get the programme for a given programme identifier.
     * @param pid The programme identifier. (required)
     * @param rights The rights group to limit results to. (required)
     * @param availability Whether to return all, or available programmes (required)
     * @param initialChildCount The depth to return child entities. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProgrammesByParentPIDAsync(String pid, String rights, String availability, Integer initialChildCount, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProgrammesByParentPIDValidateBeforeCall(pid, rights, availability, initialChildCount, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
