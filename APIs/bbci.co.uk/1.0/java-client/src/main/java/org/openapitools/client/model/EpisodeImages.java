/*
 * BBC iPlayer Business Layer
 * The definitive iPlayer API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: ibl-team@lists.forge.bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EpisodeImages
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:15.122769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EpisodeImages {
  public static final String SERIALIZED_NAME_CHARACTER_IMAGE = "character_image";
  @SerializedName(SERIALIZED_NAME_CHARACTER_IMAGE)
  private String characterImage;

  public static final String SERIALIZED_NAME_INHERITED_FROM = "inherited_from";
  @SerializedName(SERIALIZED_NAME_INHERITED_FROM)
  private String inheritedFrom;

  public static final String SERIALIZED_NAME_LIVE = "live";
  @SerializedName(SERIALIZED_NAME_LIVE)
  private String live;

  public static final String SERIALIZED_NAME_PORTRAIT = "portrait";
  @SerializedName(SERIALIZED_NAME_PORTRAIT)
  private String portrait;

  public static final String SERIALIZED_NAME_PROMOTIONAL = "promotional";
  @SerializedName(SERIALIZED_NAME_PROMOTIONAL)
  private String promotional;

  public static final String SERIALIZED_NAME_PROMOTIONAL_WITH_LOGO = "promotional_with_logo";
  @SerializedName(SERIALIZED_NAME_PROMOTIONAL_WITH_LOGO)
  private String promotionalWithLogo;

  public static final String SERIALIZED_NAME_STANDARD = "standard";
  @SerializedName(SERIALIZED_NAME_STANDARD)
  private String standard;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    IMAGE("image");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public EpisodeImages() {
  }

  public EpisodeImages characterImage(String characterImage) {
    this.characterImage = characterImage;
    return this;
  }

  /**
   * Get characterImage
   * @return characterImage
   */
  @javax.annotation.Nullable
  public String getCharacterImage() {
    return characterImage;
  }

  public void setCharacterImage(String characterImage) {
    this.characterImage = characterImage;
  }


  public EpisodeImages inheritedFrom(String inheritedFrom) {
    this.inheritedFrom = inheritedFrom;
    return this;
  }

  /**
   * Get inheritedFrom
   * @return inheritedFrom
   */
  @javax.annotation.Nullable
  public String getInheritedFrom() {
    return inheritedFrom;
  }

  public void setInheritedFrom(String inheritedFrom) {
    this.inheritedFrom = inheritedFrom;
  }


  public EpisodeImages live(String live) {
    this.live = live;
    return this;
  }

  /**
   * Get live
   * @return live
   */
  @javax.annotation.Nullable
  public String getLive() {
    return live;
  }

  public void setLive(String live) {
    this.live = live;
  }


  public EpisodeImages portrait(String portrait) {
    this.portrait = portrait;
    return this;
  }

  /**
   * Get portrait
   * @return portrait
   */
  @javax.annotation.Nullable
  public String getPortrait() {
    return portrait;
  }

  public void setPortrait(String portrait) {
    this.portrait = portrait;
  }


  public EpisodeImages promotional(String promotional) {
    this.promotional = promotional;
    return this;
  }

  /**
   * Get promotional
   * @return promotional
   */
  @javax.annotation.Nullable
  public String getPromotional() {
    return promotional;
  }

  public void setPromotional(String promotional) {
    this.promotional = promotional;
  }


  public EpisodeImages promotionalWithLogo(String promotionalWithLogo) {
    this.promotionalWithLogo = promotionalWithLogo;
    return this;
  }

  /**
   * Get promotionalWithLogo
   * @return promotionalWithLogo
   */
  @javax.annotation.Nullable
  public String getPromotionalWithLogo() {
    return promotionalWithLogo;
  }

  public void setPromotionalWithLogo(String promotionalWithLogo) {
    this.promotionalWithLogo = promotionalWithLogo;
  }


  public EpisodeImages standard(String standard) {
    this.standard = standard;
    return this;
  }

  /**
   * Get standard
   * @return standard
   */
  @javax.annotation.Nonnull
  public String getStandard() {
    return standard;
  }

  public void setStandard(String standard) {
    this.standard = standard;
  }


  public EpisodeImages type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EpisodeImages episodeImages = (EpisodeImages) o;
    return Objects.equals(this.characterImage, episodeImages.characterImage) &&
        Objects.equals(this.inheritedFrom, episodeImages.inheritedFrom) &&
        Objects.equals(this.live, episodeImages.live) &&
        Objects.equals(this.portrait, episodeImages.portrait) &&
        Objects.equals(this.promotional, episodeImages.promotional) &&
        Objects.equals(this.promotionalWithLogo, episodeImages.promotionalWithLogo) &&
        Objects.equals(this.standard, episodeImages.standard) &&
        Objects.equals(this.type, episodeImages.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(characterImage, inheritedFrom, live, portrait, promotional, promotionalWithLogo, standard, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EpisodeImages {\n");
    sb.append("    characterImage: ").append(toIndentedString(characterImage)).append("\n");
    sb.append("    inheritedFrom: ").append(toIndentedString(inheritedFrom)).append("\n");
    sb.append("    live: ").append(toIndentedString(live)).append("\n");
    sb.append("    portrait: ").append(toIndentedString(portrait)).append("\n");
    sb.append("    promotional: ").append(toIndentedString(promotional)).append("\n");
    sb.append("    promotionalWithLogo: ").append(toIndentedString(promotionalWithLogo)).append("\n");
    sb.append("    standard: ").append(toIndentedString(standard)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("character_image");
    openapiFields.add("inherited_from");
    openapiFields.add("live");
    openapiFields.add("portrait");
    openapiFields.add("promotional");
    openapiFields.add("promotional_with_logo");
    openapiFields.add("standard");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("standard");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EpisodeImages
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EpisodeImages.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EpisodeImages is not found in the empty JSON string", EpisodeImages.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EpisodeImages.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EpisodeImages` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EpisodeImages.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("character_image") != null && !jsonObj.get("character_image").isJsonNull()) && !jsonObj.get("character_image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `character_image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("character_image").toString()));
      }
      if ((jsonObj.get("inherited_from") != null && !jsonObj.get("inherited_from").isJsonNull()) && !jsonObj.get("inherited_from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inherited_from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inherited_from").toString()));
      }
      if ((jsonObj.get("live") != null && !jsonObj.get("live").isJsonNull()) && !jsonObj.get("live").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `live` to be a primitive type in the JSON string but got `%s`", jsonObj.get("live").toString()));
      }
      if ((jsonObj.get("portrait") != null && !jsonObj.get("portrait").isJsonNull()) && !jsonObj.get("portrait").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `portrait` to be a primitive type in the JSON string but got `%s`", jsonObj.get("portrait").toString()));
      }
      if ((jsonObj.get("promotional") != null && !jsonObj.get("promotional").isJsonNull()) && !jsonObj.get("promotional").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `promotional` to be a primitive type in the JSON string but got `%s`", jsonObj.get("promotional").toString()));
      }
      if ((jsonObj.get("promotional_with_logo") != null && !jsonObj.get("promotional_with_logo").isJsonNull()) && !jsonObj.get("promotional_with_logo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `promotional_with_logo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("promotional_with_logo").toString()));
      }
      if (!jsonObj.get("standard").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `standard` to be a primitive type in the JSON string but got `%s`", jsonObj.get("standard").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EpisodeImages.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EpisodeImages' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EpisodeImages> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EpisodeImages.class));

       return (TypeAdapter<T>) new TypeAdapter<EpisodeImages>() {
           @Override
           public void write(JsonWriter out, EpisodeImages value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EpisodeImages read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EpisodeImages given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EpisodeImages
   * @throws IOException if the JSON string is invalid with respect to EpisodeImages
   */
  public static EpisodeImages fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EpisodeImages.class);
  }

  /**
   * Convert an instance of EpisodeImages to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

