/*
 * BBC iPlayer Business Layer
 * The definitive iPlayer API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: ibl-team@lists.forge.bbc.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EpisodesApi
 */
@Disabled
public class EpisodesApiTest {

    private final EpisodesApi api = new EpisodesApi();

    /**
     * Get Clips
     *
     * Get Clips
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getClipsTest() throws ApiException {
        String pid = null;
        String rights = null;
        String availability = null;
        Object response = api.getClips(pid, rights, availability);
        // TODO: test validations
    }

    /**
     * List all the episodes for a category.
     *
     * Get the list of all the episodes for a given category in TV &amp; iPlayer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEpisodesByCategoryTest() throws ApiException {
        String category = null;
        String lang = null;
        String rights = null;
        String availability = null;
        Long page = null;
        Long perPage = null;
        String sort = null;
        Object response = api.getEpisodesByCategory(category, lang, rights, availability, page, perPage, sort);
        // TODO: test validations
    }

    /**
     * Get episodes by group, brand or series
     *
     * Get episodes by group, brand or series
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEpisodesByGroupTest() throws ApiException {
        String pid = null;
        String rights = null;
        Long page = null;
        Long perPage = null;
        Integer initialChildCount = null;
        String sort = null;
        String sortDirection = null;
        String availability = null;
        List<String> mixin = null;
        Object response = api.getEpisodesByGroup(pid, rights, page, perPage, initialChildCount, sort, sortDirection, availability, mixin);
        // TODO: test validations
    }

    /**
     * Child episodes for a given programme pid.
     *
     * Get the child episodes belonging to a given programme identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEpisodesByParentPIDTest() throws ApiException {
        String pid = null;
        String rights = null;
        String availability = null;
        Integer initialChildCount = null;
        Object response = api.getEpisodesByParentPID(pid, rights, availability, initialChildCount);
        // TODO: test validations
    }

    /**
     * Get Onward Journey
     *
     * Get Onward Journey (next programme)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOnwardJourneyTest() throws ApiException {
        String pid = null;
        String rights = null;
        String availability = null;
        Object response = api.getOnwardJourney(pid, rights, availability);
        // TODO: test validations
    }

    /**
     * Get Follow-ups (post-rolls)
     *
     * Get Follow-ups (post-rolls)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPostRollsTest() throws ApiException {
        String pid = null;
        String rights = null;
        String availability = null;
        Object response = api.getPostRolls(pid, rights, availability);
        // TODO: test validations
    }

    /**
     * Episode for a given pid.
     *
     * Get the episode for a given episode identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProgrammeByPIDTest() throws ApiException {
        String pid = null;
        String rights = null;
        String availability = null;
        List<String> mixin = null;
        Object response = api.getProgrammeByPID(pid, rights, availability, mixin);
        // TODO: test validations
    }

    /**
     * Get programme recommendations
     *
     * Get programme recommendations
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProgrammeRecommendationsTest() throws ApiException {
        String pid = null;
        String rights = null;
        String availability = null;
        Long page = null;
        Long perPage = null;
        Object response = api.getProgrammeRecommendations(pid, rights, availability, page, perPage);
        // TODO: test validations
    }

    /**
     * Get programmes popular
     *
     * Get programmes popular
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProgrammesPopularTest() throws ApiException {
        String rights = null;
        Long page = null;
        Long perPage = null;
        Integer initialChildCount = null;
        String sort = null;
        String sortDirection = null;
        String availability = null;
        List<String> mixin = null;
        Object response = api.getProgrammesPopular(rights, page, perPage, initialChildCount, sort, sortDirection, availability, mixin);
        // TODO: test validations
    }

    /**
     * Get Trailers (pre-rolls)
     *
     * Get Trailers (pre-rolls)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTrailersPreRollsTest() throws ApiException {
        String pid = null;
        String rights = null;
        String availability = null;
        Object response = api.getTrailersPreRolls(pid, rights, availability);
        // TODO: test validations
    }

}
