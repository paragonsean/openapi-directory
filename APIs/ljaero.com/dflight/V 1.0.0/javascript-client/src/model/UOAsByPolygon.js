/**
 * DFlight API
 * [DFlight API](https://ljaero.com/solutions/dflight/) supplies the up-to-date information needed for compliance with UAV preflight assessment requirements. Separate endpoints are available for each of the following information categories: - Airspace - Weather - Temporary Flight Restrictions - Special Security Areas - Restricted Public Venues - Surface Obstacles - Aerodromes - UAS Operating Areas  You can define your geographic area of interest in one of three convenient ways: - Providing a latitude/longitude point and distance around that point - Providing a GeoJSON LineString defining your route - Providing an arbitrary GeoJSON Polygon defining your area of interest
 *
 * The version of the OpenAPI document: V 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UOAsByPolygon model module.
 * @module model/UOAsByPolygon
 * @version V 1.0.0
 */
class UOAsByPolygon {
    /**
     * Constructs a new <code>UOAsByPolygon</code>.
     * Geometry-defining arguments for polygon requests
     * @alias module:model/UOAsByPolygon
     * @param poly {Object} 
     */
    constructor(poly) { 
        
        UOAsByPolygon.initialize(this, poly);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, poly) { 
        obj['poly'] = poly;
    }

    /**
     * Constructs a <code>UOAsByPolygon</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UOAsByPolygon} obj Optional instance to populate.
     * @return {module:model/UOAsByPolygon} The populated <code>UOAsByPolygon</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UOAsByPolygon();

            if (data.hasOwnProperty('poly')) {
                obj['poly'] = ApiClient.convertToType(data['poly'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UOAsByPolygon</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UOAsByPolygon</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UOAsByPolygon.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

UOAsByPolygon.RequiredProperties = ["poly"];

/**
 * @member {Object} poly
 */
UOAsByPolygon.prototype['poly'] = undefined;






export default UOAsByPolygon;

