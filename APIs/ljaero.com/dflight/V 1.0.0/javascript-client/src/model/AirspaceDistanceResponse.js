/**
 * DFlight API
 * [DFlight API](https://ljaero.com/solutions/dflight/) supplies the up-to-date information needed for compliance with UAV preflight assessment requirements. Separate endpoints are available for each of the following information categories: - Airspace - Weather - Temporary Flight Restrictions - Special Security Areas - Restricted Public Venues - Surface Obstacles - Aerodromes - UAS Operating Areas  You can define your geographic area of interest in one of three convenient ways: - Providing a latitude/longitude point and distance around that point - Providing a GeoJSON LineString defining your route - Providing an arbitrary GeoJSON Polygon defining your area of interest
 *
 * The version of the OpenAPI document: V 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AirspaceDistanceResponse model module.
 * @module model/AirspaceDistanceResponse
 * @version V 1.0.0
 */
class AirspaceDistanceResponse {
    /**
     * Constructs a new <code>AirspaceDistanceResponse</code>.
     * @alias module:model/AirspaceDistanceResponse
     * @param found {Array.<Object>} 
     */
    constructor(found) { 
        
        AirspaceDistanceResponse.initialize(this, found);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, found) { 
        obj['found'] = found;
    }

    /**
     * Constructs a <code>AirspaceDistanceResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AirspaceDistanceResponse} obj Optional instance to populate.
     * @return {module:model/AirspaceDistanceResponse} The populated <code>AirspaceDistanceResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AirspaceDistanceResponse();

            if (data.hasOwnProperty('found')) {
                obj['found'] = ApiClient.convertToType(data['found'], [Object]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AirspaceDistanceResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AirspaceDistanceResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AirspaceDistanceResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['found'])) {
            throw new Error("Expected the field `found` to be an array in the JSON data but got " + data['found']);
        }

        return true;
    }


}

AirspaceDistanceResponse.RequiredProperties = ["found"];

/**
 * @member {Array.<Object>} found
 */
AirspaceDistanceResponse.prototype['found'] = undefined;






export default AirspaceDistanceResponse;

