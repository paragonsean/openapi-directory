/**
 * DFlight API
 * [DFlight API](https://ljaero.com/solutions/dflight/) supplies the up-to-date information needed for compliance with UAV preflight assessment requirements. Separate endpoints are available for each of the following information categories: - Airspace - Weather - Temporary Flight Restrictions - Special Security Areas - Restricted Public Venues - Surface Obstacles - Aerodromes - UAS Operating Areas  You can define your geographic area of interest in one of three convenient ways: - Providing a latitude/longitude point and distance around that point - Providing a GeoJSON LineString defining your route - Providing an arbitrary GeoJSON Polygon defining your area of interest
 *
 * The version of the OpenAPI document: V 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Distance from './Distance';
import Latitude from './Latitude';
import Longitude from './Longitude';

/**
 * The AirspaceByDistance model module.
 * @module model/AirspaceByDistance
 * @version V 1.0.0
 */
class AirspaceByDistance {
    /**
     * Constructs a new <code>AirspaceByDistance</code>.
     * Geometry-defining arguments for point/distance requests
     * @alias module:model/AirspaceByDistance
     * @param asptypes {Array.<String>} 
     * @param distance {module:model/Distance} 
     * @param latitude {module:model/Latitude} 
     * @param longitude {module:model/Longitude} 
     */
    constructor(asptypes, distance, latitude, longitude) { 
        
        AirspaceByDistance.initialize(this, asptypes, distance, latitude, longitude);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, asptypes, distance, latitude, longitude) { 
        obj['asptypes'] = asptypes;
        obj['distance'] = distance;
        obj['latitude'] = latitude;
        obj['longitude'] = longitude;
    }

    /**
     * Constructs a <code>AirspaceByDistance</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AirspaceByDistance} obj Optional instance to populate.
     * @return {module:model/AirspaceByDistance} The populated <code>AirspaceByDistance</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AirspaceByDistance();

            if (data.hasOwnProperty('asptypes')) {
                obj['asptypes'] = ApiClient.convertToType(data['asptypes'], ['String']);
            }
            if (data.hasOwnProperty('distance')) {
                obj['distance'] = Distance.constructFromObject(data['distance']);
            }
            if (data.hasOwnProperty('latitude')) {
                obj['latitude'] = Latitude.constructFromObject(data['latitude']);
            }
            if (data.hasOwnProperty('longitude')) {
                obj['longitude'] = Longitude.constructFromObject(data['longitude']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AirspaceByDistance</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AirspaceByDistance</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AirspaceByDistance.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['asptypes'])) {
            throw new Error("Expected the field `asptypes` to be an array in the JSON data but got " + data['asptypes']);
        }
        // validate the optional field `distance`
        if (data['distance']) { // data not null
          Distance.validateJSON(data['distance']);
        }
        // validate the optional field `latitude`
        if (data['latitude']) { // data not null
          Latitude.validateJSON(data['latitude']);
        }
        // validate the optional field `longitude`
        if (data['longitude']) { // data not null
          Longitude.validateJSON(data['longitude']);
        }

        return true;
    }


}

AirspaceByDistance.RequiredProperties = ["asptypes", "distance", "latitude", "longitude"];

/**
 * @member {Array.<String>} asptypes
 */
AirspaceByDistance.prototype['asptypes'] = undefined;

/**
 * @member {module:model/Distance} distance
 */
AirspaceByDistance.prototype['distance'] = undefined;

/**
 * @member {module:model/Latitude} latitude
 */
AirspaceByDistance.prototype['latitude'] = undefined;

/**
 * @member {module:model/Longitude} longitude
 */
AirspaceByDistance.prototype['longitude'] = undefined;






export default AirspaceByDistance;

