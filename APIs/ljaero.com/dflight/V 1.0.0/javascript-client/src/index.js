/**
 * DFlight API
 * [DFlight API](https://ljaero.com/solutions/dflight/) supplies the up-to-date information needed for compliance with UAV preflight assessment requirements. Separate endpoints are available for each of the following information categories: - Airspace - Weather - Temporary Flight Restrictions - Special Security Areas - Restricted Public Venues - Surface Obstacles - Aerodromes - UAS Operating Areas  You can define your geographic area of interest in one of three convenient ways: - Providing a latitude/longitude point and distance around that point - Providing a GeoJSON LineString defining your route - Providing an arbitrary GeoJSON Polygon defining your area of interest
 *
 * The version of the OpenAPI document: V 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import AerodromeDistanceResponse from './model/AerodromeDistanceResponse';
import AerodromePolyResponse from './model/AerodromePolyResponse';
import AerodromeRouteResponse from './model/AerodromeRouteResponse';
import AerodromesByDistance from './model/AerodromesByDistance';
import AerodromesByPolygon from './model/AerodromesByPolygon';
import AerodromesByRoute from './model/AerodromesByRoute';
import AirspaceByDistance from './model/AirspaceByDistance';
import AirspaceByPolygon from './model/AirspaceByPolygon';
import AirspaceByRoute from './model/AirspaceByRoute';
import AirspaceDistanceResponse from './model/AirspaceDistanceResponse';
import AirspacePolyResponse from './model/AirspacePolyResponse';
import AirspaceRouteResponse from './model/AirspaceRouteResponse';
import Distance from './model/Distance';
import HTTPValidationError from './model/HTTPValidationError';
import Latitude from './model/Latitude';
import LocationInner from './model/LocationInner';
import Longitude from './model/Longitude';
import NOTAMsByDistance from './model/NOTAMsByDistance';
import NOTAMsByPolygon from './model/NOTAMsByPolygon';
import NOTAMsByRoute from './model/NOTAMsByRoute';
import NOTAMsDistanceResponse from './model/NOTAMsDistanceResponse';
import NOTAMsPolyResponse from './model/NOTAMsPolyResponse';
import NOTAMsRouteResponse from './model/NOTAMsRouteResponse';
import ObstacleDistanceResponse from './model/ObstacleDistanceResponse';
import ObstaclePolyResponse from './model/ObstaclePolyResponse';
import ObstacleRouteResponse from './model/ObstacleRouteResponse';
import ObstaclesByDistance from './model/ObstaclesByDistance';
import ObstaclesByPolygon from './model/ObstaclesByPolygon';
import ObstaclesByRoute from './model/ObstaclesByRoute';
import SSAByDistance from './model/SSAByDistance';
import SSAByPolygon from './model/SSAByPolygon';
import SSAByRoute from './model/SSAByRoute';
import SSADistanceResponse from './model/SSADistanceResponse';
import SSAPolyResponse from './model/SSAPolyResponse';
import SSARouteResponse from './model/SSARouteResponse';
import UOAsByDistance from './model/UOAsByDistance';
import UOAsByPolygon from './model/UOAsByPolygon';
import UOAsByRoute from './model/UOAsByRoute';
import UOAsDistanceResponse from './model/UOAsDistanceResponse';
import UOAsPolyResponse from './model/UOAsPolyResponse';
import UOAsRouteResponse from './model/UOAsRouteResponse';
import ValidationError from './model/ValidationError';
import VenueDistanceResponse from './model/VenueDistanceResponse';
import VenuePolyResponse from './model/VenuePolyResponse';
import VenueRouteResponse from './model/VenueRouteResponse';
import VenuesByDistance from './model/VenuesByDistance';
import VenuesByPolygon from './model/VenuesByPolygon';
import VenuesByRoute from './model/VenuesByRoute';
import WxByDistance from './model/WxByDistance';
import WxByPolygon from './model/WxByPolygon';
import WxByRoute from './model/WxByRoute';
import WxDistanceResponse from './model/WxDistanceResponse';
import WxPolyResponse from './model/WxPolyResponse';
import WxRouteResponse from './model/WxRouteResponse';
import AerodromesApi from './api/AerodromesApi';
import AirspaceApi from './api/AirspaceApi';
import FlightRestrictionsApi from './api/FlightRestrictionsApi';
import RestrictedPublicVenuesApi from './api/RestrictedPublicVenuesApi';
import SpecialSecurityAreasApi from './api/SpecialSecurityAreasApi';
import SurfaceObstaclesApi from './api/SurfaceObstaclesApi';
import UASOperatingAreasApi from './api/UASOperatingAreasApi';
import WeatherApi from './api/WeatherApi';


/**
* [DFlight API](https://ljaero.com/solutions/dflight/) supplies the up-to-date information needed for compliance with UAV preflight assessment requirements. Separate endpoints are available for each of the following information categories: - Airspace - Weather - Temporary Flight Restrictions - Special Security Areas - Restricted Public Venues - Surface Obstacles - Aerodromes - UAS Operating Areas  You can define your geographic area of interest in one of three convenient ways: - Providing a latitude/longitude point and distance around that point - Providing a GeoJSON LineString defining your route - Providing an arbitrary GeoJSON Polygon defining your area of interest.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var DFlightApi = require('index'); // See note below*.
* var xxxSvc = new DFlightApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new DFlightApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new DFlightApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new DFlightApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version V 1.0.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The AerodromeDistanceResponse model constructor.
     * @property {module:model/AerodromeDistanceResponse}
     */
    AerodromeDistanceResponse,

    /**
     * The AerodromePolyResponse model constructor.
     * @property {module:model/AerodromePolyResponse}
     */
    AerodromePolyResponse,

    /**
     * The AerodromeRouteResponse model constructor.
     * @property {module:model/AerodromeRouteResponse}
     */
    AerodromeRouteResponse,

    /**
     * The AerodromesByDistance model constructor.
     * @property {module:model/AerodromesByDistance}
     */
    AerodromesByDistance,

    /**
     * The AerodromesByPolygon model constructor.
     * @property {module:model/AerodromesByPolygon}
     */
    AerodromesByPolygon,

    /**
     * The AerodromesByRoute model constructor.
     * @property {module:model/AerodromesByRoute}
     */
    AerodromesByRoute,

    /**
     * The AirspaceByDistance model constructor.
     * @property {module:model/AirspaceByDistance}
     */
    AirspaceByDistance,

    /**
     * The AirspaceByPolygon model constructor.
     * @property {module:model/AirspaceByPolygon}
     */
    AirspaceByPolygon,

    /**
     * The AirspaceByRoute model constructor.
     * @property {module:model/AirspaceByRoute}
     */
    AirspaceByRoute,

    /**
     * The AirspaceDistanceResponse model constructor.
     * @property {module:model/AirspaceDistanceResponse}
     */
    AirspaceDistanceResponse,

    /**
     * The AirspacePolyResponse model constructor.
     * @property {module:model/AirspacePolyResponse}
     */
    AirspacePolyResponse,

    /**
     * The AirspaceRouteResponse model constructor.
     * @property {module:model/AirspaceRouteResponse}
     */
    AirspaceRouteResponse,

    /**
     * The Distance model constructor.
     * @property {module:model/Distance}
     */
    Distance,

    /**
     * The HTTPValidationError model constructor.
     * @property {module:model/HTTPValidationError}
     */
    HTTPValidationError,

    /**
     * The Latitude model constructor.
     * @property {module:model/Latitude}
     */
    Latitude,

    /**
     * The LocationInner model constructor.
     * @property {module:model/LocationInner}
     */
    LocationInner,

    /**
     * The Longitude model constructor.
     * @property {module:model/Longitude}
     */
    Longitude,

    /**
     * The NOTAMsByDistance model constructor.
     * @property {module:model/NOTAMsByDistance}
     */
    NOTAMsByDistance,

    /**
     * The NOTAMsByPolygon model constructor.
     * @property {module:model/NOTAMsByPolygon}
     */
    NOTAMsByPolygon,

    /**
     * The NOTAMsByRoute model constructor.
     * @property {module:model/NOTAMsByRoute}
     */
    NOTAMsByRoute,

    /**
     * The NOTAMsDistanceResponse model constructor.
     * @property {module:model/NOTAMsDistanceResponse}
     */
    NOTAMsDistanceResponse,

    /**
     * The NOTAMsPolyResponse model constructor.
     * @property {module:model/NOTAMsPolyResponse}
     */
    NOTAMsPolyResponse,

    /**
     * The NOTAMsRouteResponse model constructor.
     * @property {module:model/NOTAMsRouteResponse}
     */
    NOTAMsRouteResponse,

    /**
     * The ObstacleDistanceResponse model constructor.
     * @property {module:model/ObstacleDistanceResponse}
     */
    ObstacleDistanceResponse,

    /**
     * The ObstaclePolyResponse model constructor.
     * @property {module:model/ObstaclePolyResponse}
     */
    ObstaclePolyResponse,

    /**
     * The ObstacleRouteResponse model constructor.
     * @property {module:model/ObstacleRouteResponse}
     */
    ObstacleRouteResponse,

    /**
     * The ObstaclesByDistance model constructor.
     * @property {module:model/ObstaclesByDistance}
     */
    ObstaclesByDistance,

    /**
     * The ObstaclesByPolygon model constructor.
     * @property {module:model/ObstaclesByPolygon}
     */
    ObstaclesByPolygon,

    /**
     * The ObstaclesByRoute model constructor.
     * @property {module:model/ObstaclesByRoute}
     */
    ObstaclesByRoute,

    /**
     * The SSAByDistance model constructor.
     * @property {module:model/SSAByDistance}
     */
    SSAByDistance,

    /**
     * The SSAByPolygon model constructor.
     * @property {module:model/SSAByPolygon}
     */
    SSAByPolygon,

    /**
     * The SSAByRoute model constructor.
     * @property {module:model/SSAByRoute}
     */
    SSAByRoute,

    /**
     * The SSADistanceResponse model constructor.
     * @property {module:model/SSADistanceResponse}
     */
    SSADistanceResponse,

    /**
     * The SSAPolyResponse model constructor.
     * @property {module:model/SSAPolyResponse}
     */
    SSAPolyResponse,

    /**
     * The SSARouteResponse model constructor.
     * @property {module:model/SSARouteResponse}
     */
    SSARouteResponse,

    /**
     * The UOAsByDistance model constructor.
     * @property {module:model/UOAsByDistance}
     */
    UOAsByDistance,

    /**
     * The UOAsByPolygon model constructor.
     * @property {module:model/UOAsByPolygon}
     */
    UOAsByPolygon,

    /**
     * The UOAsByRoute model constructor.
     * @property {module:model/UOAsByRoute}
     */
    UOAsByRoute,

    /**
     * The UOAsDistanceResponse model constructor.
     * @property {module:model/UOAsDistanceResponse}
     */
    UOAsDistanceResponse,

    /**
     * The UOAsPolyResponse model constructor.
     * @property {module:model/UOAsPolyResponse}
     */
    UOAsPolyResponse,

    /**
     * The UOAsRouteResponse model constructor.
     * @property {module:model/UOAsRouteResponse}
     */
    UOAsRouteResponse,

    /**
     * The ValidationError model constructor.
     * @property {module:model/ValidationError}
     */
    ValidationError,

    /**
     * The VenueDistanceResponse model constructor.
     * @property {module:model/VenueDistanceResponse}
     */
    VenueDistanceResponse,

    /**
     * The VenuePolyResponse model constructor.
     * @property {module:model/VenuePolyResponse}
     */
    VenuePolyResponse,

    /**
     * The VenueRouteResponse model constructor.
     * @property {module:model/VenueRouteResponse}
     */
    VenueRouteResponse,

    /**
     * The VenuesByDistance model constructor.
     * @property {module:model/VenuesByDistance}
     */
    VenuesByDistance,

    /**
     * The VenuesByPolygon model constructor.
     * @property {module:model/VenuesByPolygon}
     */
    VenuesByPolygon,

    /**
     * The VenuesByRoute model constructor.
     * @property {module:model/VenuesByRoute}
     */
    VenuesByRoute,

    /**
     * The WxByDistance model constructor.
     * @property {module:model/WxByDistance}
     */
    WxByDistance,

    /**
     * The WxByPolygon model constructor.
     * @property {module:model/WxByPolygon}
     */
    WxByPolygon,

    /**
     * The WxByRoute model constructor.
     * @property {module:model/WxByRoute}
     */
    WxByRoute,

    /**
     * The WxDistanceResponse model constructor.
     * @property {module:model/WxDistanceResponse}
     */
    WxDistanceResponse,

    /**
     * The WxPolyResponse model constructor.
     * @property {module:model/WxPolyResponse}
     */
    WxPolyResponse,

    /**
     * The WxRouteResponse model constructor.
     * @property {module:model/WxRouteResponse}
     */
    WxRouteResponse,

    /**
    * The AerodromesApi service constructor.
    * @property {module:api/AerodromesApi}
    */
    AerodromesApi,

    /**
    * The AirspaceApi service constructor.
    * @property {module:api/AirspaceApi}
    */
    AirspaceApi,

    /**
    * The FlightRestrictionsApi service constructor.
    * @property {module:api/FlightRestrictionsApi}
    */
    FlightRestrictionsApi,

    /**
    * The RestrictedPublicVenuesApi service constructor.
    * @property {module:api/RestrictedPublicVenuesApi}
    */
    RestrictedPublicVenuesApi,

    /**
    * The SpecialSecurityAreasApi service constructor.
    * @property {module:api/SpecialSecurityAreasApi}
    */
    SpecialSecurityAreasApi,

    /**
    * The SurfaceObstaclesApi service constructor.
    * @property {module:api/SurfaceObstaclesApi}
    */
    SurfaceObstaclesApi,

    /**
    * The UASOperatingAreasApi service constructor.
    * @property {module:api/UASOperatingAreasApi}
    */
    UASOperatingAreasApi,

    /**
    * The WeatherApi service constructor.
    * @property {module:api/WeatherApi}
    */
    WeatherApi
};
