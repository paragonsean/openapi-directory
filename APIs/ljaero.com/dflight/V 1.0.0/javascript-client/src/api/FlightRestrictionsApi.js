/**
 * DFlight API
 * [DFlight API](https://ljaero.com/solutions/dflight/) supplies the up-to-date information needed for compliance with UAV preflight assessment requirements. Separate endpoints are available for each of the following information categories: - Airspace - Weather - Temporary Flight Restrictions - Special Security Areas - Restricted Public Venues - Surface Obstacles - Aerodromes - UAS Operating Areas  You can define your geographic area of interest in one of three convenient ways: - Providing a latitude/longitude point and distance around that point - Providing a GeoJSON LineString defining your route - Providing an arbitrary GeoJSON Polygon defining your area of interest
 *
 * The version of the OpenAPI document: V 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HTTPValidationError from '../model/HTTPValidationError';
import NOTAMsByDistance from '../model/NOTAMsByDistance';
import NOTAMsByPolygon from '../model/NOTAMsByPolygon';
import NOTAMsByRoute from '../model/NOTAMsByRoute';
import NOTAMsDistanceResponse from '../model/NOTAMsDistanceResponse';
import NOTAMsPolyResponse from '../model/NOTAMsPolyResponse';
import NOTAMsRouteResponse from '../model/NOTAMsRouteResponse';

/**
* FlightRestrictions service.
* @module api/FlightRestrictionsApi
* @version V 1.0.0
*/
export default class FlightRestrictionsApi {

    /**
    * Constructs a new FlightRestrictionsApi. 
    * @alias module:api/FlightRestrictionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the tfrByDistanceUsV1RestrictionsDistanceQueryPost operation.
     * @callback module:api/FlightRestrictionsApi~tfrByDistanceUsV1RestrictionsDistanceQueryPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NOTAMsDistanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve flight restrictions applicable within given distance of location.
     * Retrieve Flight Restrictions applicable within given distance of a point. Request body parameters are: * latitude:  WGS84 latitude coordinate of your selected point, in decimal degrees * longitude:  WGS84 longitude coordinate of your selected point, in decimal degrees * distance:  distance in meters (max allowed value is 25000)
     * @param {module:model/NOTAMsByDistance} nOTAMsByDistance 
     * @param {Object} opts Optional parameters
     * @param {String} [xApiKey] 
     * @param {module:api/FlightRestrictionsApi~tfrByDistanceUsV1RestrictionsDistanceQueryPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NOTAMsDistanceResponse}
     */
    tfrByDistanceUsV1RestrictionsDistanceQueryPost(nOTAMsByDistance, opts, callback) {
      opts = opts || {};
      let postBody = nOTAMsByDistance;
      // verify the required parameter 'nOTAMsByDistance' is set
      if (nOTAMsByDistance === undefined || nOTAMsByDistance === null) {
        throw new Error("Missing the required parameter 'nOTAMsByDistance' when calling tfrByDistanceUsV1RestrictionsDistanceQueryPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-api-key': opts['xApiKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NOTAMsDistanceResponse;
      return this.apiClient.callApi(
        '/us/v1/restrictions/distance-query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tfrByPolyUsV1RestrictionsPolygonQueryPost operation.
     * @callback module:api/FlightRestrictionsApi~tfrByPolyUsV1RestrictionsPolygonQueryPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NOTAMsPolyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve flight restrictions applicable within given area.
     * Retrieve Flight Restrictions located within given area. Request body parameters are: * poly:  [GeoJSON Polygon](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the area. Max allowed area is 1000 km^2.
     * @param {module:model/NOTAMsByPolygon} nOTAMsByPolygon 
     * @param {Object} opts Optional parameters
     * @param {String} [xApiKey] 
     * @param {module:api/FlightRestrictionsApi~tfrByPolyUsV1RestrictionsPolygonQueryPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NOTAMsPolyResponse}
     */
    tfrByPolyUsV1RestrictionsPolygonQueryPost(nOTAMsByPolygon, opts, callback) {
      opts = opts || {};
      let postBody = nOTAMsByPolygon;
      // verify the required parameter 'nOTAMsByPolygon' is set
      if (nOTAMsByPolygon === undefined || nOTAMsByPolygon === null) {
        throw new Error("Missing the required parameter 'nOTAMsByPolygon' when calling tfrByPolyUsV1RestrictionsPolygonQueryPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-api-key': opts['xApiKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NOTAMsPolyResponse;
      return this.apiClient.callApi(
        '/us/v1/restrictions/polygon-query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tfrByRouteUsV1RestrictionsRouteQueryPost operation.
     * @callback module:api/FlightRestrictionsApi~tfrByRouteUsV1RestrictionsRouteQueryPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NOTAMsRouteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve flight restrictions applicable along route.
     * Retrieve Flight Restrictions applicable along your route. Request body parameters are: * route:  [GeoJSON Linestring](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the route. Max allowed length is 50 km.
     * @param {module:model/NOTAMsByRoute} nOTAMsByRoute 
     * @param {Object} opts Optional parameters
     * @param {String} [xApiKey] 
     * @param {module:api/FlightRestrictionsApi~tfrByRouteUsV1RestrictionsRouteQueryPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NOTAMsRouteResponse}
     */
    tfrByRouteUsV1RestrictionsRouteQueryPost(nOTAMsByRoute, opts, callback) {
      opts = opts || {};
      let postBody = nOTAMsByRoute;
      // verify the required parameter 'nOTAMsByRoute' is set
      if (nOTAMsByRoute === undefined || nOTAMsByRoute === null) {
        throw new Error("Missing the required parameter 'nOTAMsByRoute' when calling tfrByRouteUsV1RestrictionsRouteQueryPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-api-key': opts['xApiKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NOTAMsRouteResponse;
      return this.apiClient.callApi(
        '/us/v1/restrictions/route-query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
