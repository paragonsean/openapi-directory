/**
 * DFlight API
 * [DFlight API](https://ljaero.com/solutions/dflight/) supplies the up-to-date information needed for compliance with UAV preflight assessment requirements. Separate endpoints are available for each of the following information categories: - Airspace - Weather - Temporary Flight Restrictions - Special Security Areas - Restricted Public Venues - Surface Obstacles - Aerodromes - UAS Operating Areas  You can define your geographic area of interest in one of three convenient ways: - Providing a latitude/longitude point and distance around that point - Providing a GeoJSON LineString defining your route - Providing an arbitrary GeoJSON Polygon defining your area of interest
 *
 * The version of the OpenAPI document: V 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HTTPValidationError from '../model/HTTPValidationError';
import UOAsByDistance from '../model/UOAsByDistance';
import UOAsByPolygon from '../model/UOAsByPolygon';
import UOAsByRoute from '../model/UOAsByRoute';
import UOAsDistanceResponse from '../model/UOAsDistanceResponse';
import UOAsPolyResponse from '../model/UOAsPolyResponse';
import UOAsRouteResponse from '../model/UOAsRouteResponse';

/**
* UASOperatingAreas service.
* @module api/UASOperatingAreasApi
* @version V 1.0.0
*/
export default class UASOperatingAreasApi {

    /**
    * Constructs a new UASOperatingAreasApi. 
    * @alias module:api/UASOperatingAreasApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the uoaByDistanceUsV1UoaDistanceQueryPost operation.
     * @callback module:api/UASOperatingAreasApi~uoaByDistanceUsV1UoaDistanceQueryPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UOAsDistanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve UAS Operating Areas (UOAs) found within given distance of location.
     * Retrieve UAS Operating Areas (UOAs) found within given distance of a point. Request body parameters are: * latitude:  WGS84 latitude coordinate of your selected point, in decimal degrees * longitude:  WGS84 longitude coordinate of your selected point, in decimal degrees * distance:  distance in meters (max allowed value is 25000)
     * @param {module:model/UOAsByDistance} uOAsByDistance 
     * @param {Object} opts Optional parameters
     * @param {String} [xApiKey] 
     * @param {module:api/UASOperatingAreasApi~uoaByDistanceUsV1UoaDistanceQueryPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UOAsDistanceResponse}
     */
    uoaByDistanceUsV1UoaDistanceQueryPost(uOAsByDistance, opts, callback) {
      opts = opts || {};
      let postBody = uOAsByDistance;
      // verify the required parameter 'uOAsByDistance' is set
      if (uOAsByDistance === undefined || uOAsByDistance === null) {
        throw new Error("Missing the required parameter 'uOAsByDistance' when calling uoaByDistanceUsV1UoaDistanceQueryPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-api-key': opts['xApiKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UOAsDistanceResponse;
      return this.apiClient.callApi(
        '/us/v1/uoa/distance-query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uoaByPolyUsV1UoaPolygonQueryPost operation.
     * @callback module:api/UASOperatingAreasApi~uoaByPolyUsV1UoaPolygonQueryPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UOAsPolyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve UAS Operating Areas (UOAs) found within given area.
     * Retrieve UAS Operating Areas (UOAs) found within given area. Request body parameters are: * poly:  [GeoJSON Polygon](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the area. Max allowed area is 1000 km^2.
     * @param {module:model/UOAsByPolygon} uOAsByPolygon 
     * @param {Object} opts Optional parameters
     * @param {String} [xApiKey] 
     * @param {module:api/UASOperatingAreasApi~uoaByPolyUsV1UoaPolygonQueryPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UOAsPolyResponse}
     */
    uoaByPolyUsV1UoaPolygonQueryPost(uOAsByPolygon, opts, callback) {
      opts = opts || {};
      let postBody = uOAsByPolygon;
      // verify the required parameter 'uOAsByPolygon' is set
      if (uOAsByPolygon === undefined || uOAsByPolygon === null) {
        throw new Error("Missing the required parameter 'uOAsByPolygon' when calling uoaByPolyUsV1UoaPolygonQueryPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-api-key': opts['xApiKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UOAsPolyResponse;
      return this.apiClient.callApi(
        '/us/v1/uoa/polygon-query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uoaByRouteUsV1UoaRouteQueryPost operation.
     * @callback module:api/UASOperatingAreasApi~uoaByRouteUsV1UoaRouteQueryPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UOAsRouteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve UAS Operating Areas (UOAs) found along route.
     * Retrieve UAS Operating Areas (UOAs) found along your route. Request body parameters are: * route:  [GeoJSON Linestring](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the route. Max allowed length is 50 km.
     * @param {module:model/UOAsByRoute} uOAsByRoute 
     * @param {Object} opts Optional parameters
     * @param {String} [xApiKey] 
     * @param {module:api/UASOperatingAreasApi~uoaByRouteUsV1UoaRouteQueryPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UOAsRouteResponse}
     */
    uoaByRouteUsV1UoaRouteQueryPost(uOAsByRoute, opts, callback) {
      opts = opts || {};
      let postBody = uOAsByRoute;
      // verify the required parameter 'uOAsByRoute' is set
      if (uOAsByRoute === undefined || uOAsByRoute === null) {
        throw new Error("Missing the required parameter 'uOAsByRoute' when calling uoaByRouteUsV1UoaRouteQueryPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-api-key': opts['xApiKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UOAsRouteResponse;
      return this.apiClient.callApi(
        '/us/v1/uoa/route-query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
