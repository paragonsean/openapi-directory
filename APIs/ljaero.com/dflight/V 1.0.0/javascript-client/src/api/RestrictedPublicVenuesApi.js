/**
 * DFlight API
 * [DFlight API](https://ljaero.com/solutions/dflight/) supplies the up-to-date information needed for compliance with UAV preflight assessment requirements. Separate endpoints are available for each of the following information categories: - Airspace - Weather - Temporary Flight Restrictions - Special Security Areas - Restricted Public Venues - Surface Obstacles - Aerodromes - UAS Operating Areas  You can define your geographic area of interest in one of three convenient ways: - Providing a latitude/longitude point and distance around that point - Providing a GeoJSON LineString defining your route - Providing an arbitrary GeoJSON Polygon defining your area of interest
 *
 * The version of the OpenAPI document: V 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HTTPValidationError from '../model/HTTPValidationError';
import VenueDistanceResponse from '../model/VenueDistanceResponse';
import VenuePolyResponse from '../model/VenuePolyResponse';
import VenueRouteResponse from '../model/VenueRouteResponse';
import VenuesByDistance from '../model/VenuesByDistance';
import VenuesByPolygon from '../model/VenuesByPolygon';
import VenuesByRoute from '../model/VenuesByRoute';

/**
* RestrictedPublicVenues service.
* @module api/RestrictedPublicVenuesApi
* @version V 1.0.0
*/
export default class RestrictedPublicVenuesApi {

    /**
    * Constructs a new RestrictedPublicVenuesApi. 
    * @alias module:api/RestrictedPublicVenuesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the venByDistanceUsV1VenuesDistanceQueryPost operation.
     * @callback module:api/RestrictedPublicVenuesApi~venByDistanceUsV1VenuesDistanceQueryPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VenueDistanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all restricted public venues located within given distance of location.
     * Retrieve venues existing within given distance from a point. Request body parameters are: * latitude:  WGS84 latitude coordinate of your selected point, in decimal degrees * longitude:  WGS84 longitude coordinate of your selected point, in decimal degrees * distance:  distance in meters (max allowed value is 25000)
     * @param {module:model/VenuesByDistance} venuesByDistance 
     * @param {Object} opts Optional parameters
     * @param {String} [xApiKey] 
     * @param {module:api/RestrictedPublicVenuesApi~venByDistanceUsV1VenuesDistanceQueryPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VenueDistanceResponse}
     */
    venByDistanceUsV1VenuesDistanceQueryPost(venuesByDistance, opts, callback) {
      opts = opts || {};
      let postBody = venuesByDistance;
      // verify the required parameter 'venuesByDistance' is set
      if (venuesByDistance === undefined || venuesByDistance === null) {
        throw new Error("Missing the required parameter 'venuesByDistance' when calling venByDistanceUsV1VenuesDistanceQueryPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-api-key': opts['xApiKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VenueDistanceResponse;
      return this.apiClient.callApi(
        '/us/v1/venues/distance-query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the venByPolyUsV1VenuesPolygonQueryPost operation.
     * @callback module:api/RestrictedPublicVenuesApi~venByPolyUsV1VenuesPolygonQueryPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VenuePolyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all restricted public venues located within given GeoJSON Polygon.
     * Retrieve all restricted public venues located within given area. Request body parameters are: * poly:  [GeoJSON Polygon](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the area. Max allowed area is 1000 km^2.
     * @param {module:model/VenuesByPolygon} venuesByPolygon 
     * @param {Object} opts Optional parameters
     * @param {String} [xApiKey] 
     * @param {module:api/RestrictedPublicVenuesApi~venByPolyUsV1VenuesPolygonQueryPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VenuePolyResponse}
     */
    venByPolyUsV1VenuesPolygonQueryPost(venuesByPolygon, opts, callback) {
      opts = opts || {};
      let postBody = venuesByPolygon;
      // verify the required parameter 'venuesByPolygon' is set
      if (venuesByPolygon === undefined || venuesByPolygon === null) {
        throw new Error("Missing the required parameter 'venuesByPolygon' when calling venByPolyUsV1VenuesPolygonQueryPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-api-key': opts['xApiKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VenuePolyResponse;
      return this.apiClient.callApi(
        '/us/v1/venues/polygon-query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the venByRouteUsV1VenuesRouteQueryPost operation.
     * @callback module:api/RestrictedPublicVenuesApi~venByRouteUsV1VenuesRouteQueryPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VenueRouteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all restricted public venues traversed by route.
     * Retrieve all restricted public venues intersected by route. Request body parameters are: * route: [GeoJSON Linestring](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the route. Max allowed length is 50 km.
     * @param {module:model/VenuesByRoute} venuesByRoute 
     * @param {Object} opts Optional parameters
     * @param {String} [xApiKey] 
     * @param {module:api/RestrictedPublicVenuesApi~venByRouteUsV1VenuesRouteQueryPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VenueRouteResponse}
     */
    venByRouteUsV1VenuesRouteQueryPost(venuesByRoute, opts, callback) {
      opts = opts || {};
      let postBody = venuesByRoute;
      // verify the required parameter 'venuesByRoute' is set
      if (venuesByRoute === undefined || venuesByRoute === null) {
        throw new Error("Missing the required parameter 'venuesByRoute' when calling venByRouteUsV1VenuesRouteQueryPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-api-key': opts['xApiKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VenueRouteResponse;
      return this.apiClient.callApi(
        '/us/v1/venues/route-query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
