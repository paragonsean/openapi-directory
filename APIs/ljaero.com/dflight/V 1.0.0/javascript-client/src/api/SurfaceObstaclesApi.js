/**
 * DFlight API
 * [DFlight API](https://ljaero.com/solutions/dflight/) supplies the up-to-date information needed for compliance with UAV preflight assessment requirements. Separate endpoints are available for each of the following information categories: - Airspace - Weather - Temporary Flight Restrictions - Special Security Areas - Restricted Public Venues - Surface Obstacles - Aerodromes - UAS Operating Areas  You can define your geographic area of interest in one of three convenient ways: - Providing a latitude/longitude point and distance around that point - Providing a GeoJSON LineString defining your route - Providing an arbitrary GeoJSON Polygon defining your area of interest
 *
 * The version of the OpenAPI document: V 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HTTPValidationError from '../model/HTTPValidationError';
import ObstacleDistanceResponse from '../model/ObstacleDistanceResponse';
import ObstaclePolyResponse from '../model/ObstaclePolyResponse';
import ObstacleRouteResponse from '../model/ObstacleRouteResponse';
import ObstaclesByDistance from '../model/ObstaclesByDistance';
import ObstaclesByPolygon from '../model/ObstaclesByPolygon';
import ObstaclesByRoute from '../model/ObstaclesByRoute';

/**
* SurfaceObstacles service.
* @module api/SurfaceObstaclesApi
* @version V 1.0.0
*/
export default class SurfaceObstaclesApi {

    /**
    * Constructs a new SurfaceObstaclesApi. 
    * @alias module:api/SurfaceObstaclesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the obstaclesByDistanceUsV1ObstaclesDistanceQueryPost operation.
     * @callback module:api/SurfaceObstaclesApi~obstaclesByDistanceUsV1ObstaclesDistanceQueryPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObstacleDistanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve obstacles within given distance of location.
     * Retrieve obstacles within given distance of a point. Request body parameters are: * latitude:  WGS84 latitude coordinate of your selected point, in decimal degrees * longitude:  WGS84 longitude coordinate of your selected point, in decimal degrees * distance:  distance in meters (max allowed value is 25000)
     * @param {module:model/ObstaclesByDistance} obstaclesByDistance 
     * @param {Object} opts Optional parameters
     * @param {String} [xApiKey] 
     * @param {module:api/SurfaceObstaclesApi~obstaclesByDistanceUsV1ObstaclesDistanceQueryPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObstacleDistanceResponse}
     */
    obstaclesByDistanceUsV1ObstaclesDistanceQueryPost(obstaclesByDistance, opts, callback) {
      opts = opts || {};
      let postBody = obstaclesByDistance;
      // verify the required parameter 'obstaclesByDistance' is set
      if (obstaclesByDistance === undefined || obstaclesByDistance === null) {
        throw new Error("Missing the required parameter 'obstaclesByDistance' when calling obstaclesByDistanceUsV1ObstaclesDistanceQueryPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-api-key': opts['xApiKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ObstacleDistanceResponse;
      return this.apiClient.callApi(
        '/us/v1/obstacles/distance-query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the obstaclesByPolyUsV1ObstaclesPolygonQueryPost operation.
     * @callback module:api/SurfaceObstaclesApi~obstaclesByPolyUsV1ObstaclesPolygonQueryPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObstaclePolyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve obstacles located within given area.
     * Retrieve obstacles located within given area. Request body parameters are: * poly:  [GeoJSON Polygon](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the area. Max allowed area is 1000 km^2.
     * @param {module:model/ObstaclesByPolygon} obstaclesByPolygon 
     * @param {Object} opts Optional parameters
     * @param {String} [xApiKey] 
     * @param {module:api/SurfaceObstaclesApi~obstaclesByPolyUsV1ObstaclesPolygonQueryPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObstaclePolyResponse}
     */
    obstaclesByPolyUsV1ObstaclesPolygonQueryPost(obstaclesByPolygon, opts, callback) {
      opts = opts || {};
      let postBody = obstaclesByPolygon;
      // verify the required parameter 'obstaclesByPolygon' is set
      if (obstaclesByPolygon === undefined || obstaclesByPolygon === null) {
        throw new Error("Missing the required parameter 'obstaclesByPolygon' when calling obstaclesByPolyUsV1ObstaclesPolygonQueryPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-api-key': opts['xApiKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ObstaclePolyResponse;
      return this.apiClient.callApi(
        '/us/v1/obstacles/polygon-query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the obstaclesByRouteUsV1ObstaclesRouteQueryPost operation.
     * @callback module:api/SurfaceObstaclesApi~obstaclesByRouteUsV1ObstaclesRouteQueryPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObstacleRouteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve obstacles found along a route.
     * Retrieve obstacles found along a route. Request body parameters are: * route: [GeoJSON Linestring](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the route. Max allowed length is 50 km.
     * @param {module:model/ObstaclesByRoute} obstaclesByRoute 
     * @param {Object} opts Optional parameters
     * @param {String} [xApiKey] 
     * @param {module:api/SurfaceObstaclesApi~obstaclesByRouteUsV1ObstaclesRouteQueryPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObstacleRouteResponse}
     */
    obstaclesByRouteUsV1ObstaclesRouteQueryPost(obstaclesByRoute, opts, callback) {
      opts = opts || {};
      let postBody = obstaclesByRoute;
      // verify the required parameter 'obstaclesByRoute' is set
      if (obstaclesByRoute === undefined || obstaclesByRoute === null) {
        throw new Error("Missing the required parameter 'obstaclesByRoute' when calling obstaclesByRouteUsV1ObstaclesRouteQueryPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-api-key': opts['xApiKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ObstacleRouteResponse;
      return this.apiClient.callApi(
        '/us/v1/obstacles/route-query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
