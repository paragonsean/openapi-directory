/**
 * DFlight API
 * [DFlight API](https://ljaero.com/solutions/dflight/) supplies the up-to-date information needed for compliance with UAV preflight assessment requirements. Separate endpoints are available for each of the following information categories: - Airspace - Weather - Temporary Flight Restrictions - Special Security Areas - Restricted Public Venues - Surface Obstacles - Aerodromes - UAS Operating Areas  You can define your geographic area of interest in one of three convenient ways: - Providing a latitude/longitude point and distance around that point - Providing a GeoJSON LineString defining your route - Providing an arbitrary GeoJSON Polygon defining your area of interest
 *
 * The version of the OpenAPI document: V 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AerodromeDistanceResponse from '../model/AerodromeDistanceResponse';
import AerodromePolyResponse from '../model/AerodromePolyResponse';
import AerodromeRouteResponse from '../model/AerodromeRouteResponse';
import AerodromesByDistance from '../model/AerodromesByDistance';
import AerodromesByPolygon from '../model/AerodromesByPolygon';
import AerodromesByRoute from '../model/AerodromesByRoute';
import HTTPValidationError from '../model/HTTPValidationError';

/**
* Aerodromes service.
* @module api/AerodromesApi
* @version V 1.0.0
*/
export default class AerodromesApi {

    /**
    * Constructs a new AerodromesApi. 
    * @alias module:api/AerodromesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the aerodromesByDistanceUsV1AerodromesDistanceQueryPost operation.
     * @callback module:api/AerodromesApi~aerodromesByDistanceUsV1AerodromesDistanceQueryPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AerodromeDistanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve aerodromes within given distance of location.
     * Retrieve aerodromes within given distance of a point. Request body parameters are: * latitude:  WGS84 latitude coordinate of your selected point, in decimal degrees * longitude:  WGS84 longitude coordinate of your selected point, in decimal degrees * distance:  distance in meters (max allowed value is 25000)  Successful requests return a GeoJSON FeatureCollection, with a separate Feature for each Aerodrome found. All Features will include properties for the facility name, ident, type, and operational status.
     * @param {module:model/AerodromesByDistance} aerodromesByDistance 
     * @param {Object} opts Optional parameters
     * @param {String} [xApiKey] 
     * @param {module:api/AerodromesApi~aerodromesByDistanceUsV1AerodromesDistanceQueryPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AerodromeDistanceResponse}
     */
    aerodromesByDistanceUsV1AerodromesDistanceQueryPost(aerodromesByDistance, opts, callback) {
      opts = opts || {};
      let postBody = aerodromesByDistance;
      // verify the required parameter 'aerodromesByDistance' is set
      if (aerodromesByDistance === undefined || aerodromesByDistance === null) {
        throw new Error("Missing the required parameter 'aerodromesByDistance' when calling aerodromesByDistanceUsV1AerodromesDistanceQueryPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-api-key': opts['xApiKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AerodromeDistanceResponse;
      return this.apiClient.callApi(
        '/us/v1/aerodromes/distance-query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the aerodromesByPolyUsV1AerodromesPolygonQueryPost operation.
     * @callback module:api/AerodromesApi~aerodromesByPolyUsV1AerodromesPolygonQueryPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AerodromePolyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve aerodromes located within given area.
     * Retrieve aerodromes located within given area. Request body parameters are: * poly:  [GeoJSON Polygon](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the area. Max allowed area is 1000 km^2.  Successful requests return a GeoJSON FeatureCollection, with a separate Feature for each Aerodrome found. All Features will include properties for the facility name, ident, type, and operational status.
     * @param {module:model/AerodromesByPolygon} aerodromesByPolygon 
     * @param {Object} opts Optional parameters
     * @param {String} [xApiKey] 
     * @param {module:api/AerodromesApi~aerodromesByPolyUsV1AerodromesPolygonQueryPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AerodromePolyResponse}
     */
    aerodromesByPolyUsV1AerodromesPolygonQueryPost(aerodromesByPolygon, opts, callback) {
      opts = opts || {};
      let postBody = aerodromesByPolygon;
      // verify the required parameter 'aerodromesByPolygon' is set
      if (aerodromesByPolygon === undefined || aerodromesByPolygon === null) {
        throw new Error("Missing the required parameter 'aerodromesByPolygon' when calling aerodromesByPolyUsV1AerodromesPolygonQueryPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-api-key': opts['xApiKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AerodromePolyResponse;
      return this.apiClient.callApi(
        '/us/v1/aerodromes/polygon-query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the aerodromesByRouteUsV1AerodromesRouteQueryPost operation.
     * @callback module:api/AerodromesApi~aerodromesByRouteUsV1AerodromesRouteQueryPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AerodromeRouteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve aerodromes found along a route.
     * Retrieve aerodromes found along a route. Request body parameters are: * route: [GeoJSON Linestring](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the route. Max allowed length is 50 km.  Successful requests return a GeoJSON FeatureCollection, with a separate Feature for each Aerodrome found. All Features will include properties for the facility name, ident, type, and operational status.
     * @param {module:model/AerodromesByRoute} aerodromesByRoute 
     * @param {Object} opts Optional parameters
     * @param {String} [xApiKey] 
     * @param {module:api/AerodromesApi~aerodromesByRouteUsV1AerodromesRouteQueryPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AerodromeRouteResponse}
     */
    aerodromesByRouteUsV1AerodromesRouteQueryPost(aerodromesByRoute, opts, callback) {
      opts = opts || {};
      let postBody = aerodromesByRoute;
      // verify the required parameter 'aerodromesByRoute' is set
      if (aerodromesByRoute === undefined || aerodromesByRoute === null) {
        throw new Error("Missing the required parameter 'aerodromesByRoute' when calling aerodromesByRouteUsV1AerodromesRouteQueryPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-api-key': opts['xApiKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AerodromeRouteResponse;
      return this.apiClient.callApi(
        '/us/v1/aerodromes/route-query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
