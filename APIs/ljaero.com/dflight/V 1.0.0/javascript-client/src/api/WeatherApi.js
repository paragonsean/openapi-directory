/**
 * DFlight API
 * [DFlight API](https://ljaero.com/solutions/dflight/) supplies the up-to-date information needed for compliance with UAV preflight assessment requirements. Separate endpoints are available for each of the following information categories: - Airspace - Weather - Temporary Flight Restrictions - Special Security Areas - Restricted Public Venues - Surface Obstacles - Aerodromes - UAS Operating Areas  You can define your geographic area of interest in one of three convenient ways: - Providing a latitude/longitude point and distance around that point - Providing a GeoJSON LineString defining your route - Providing an arbitrary GeoJSON Polygon defining your area of interest
 *
 * The version of the OpenAPI document: V 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HTTPValidationError from '../model/HTTPValidationError';
import WxByDistance from '../model/WxByDistance';
import WxByPolygon from '../model/WxByPolygon';
import WxByRoute from '../model/WxByRoute';
import WxDistanceResponse from '../model/WxDistanceResponse';
import WxPolyResponse from '../model/WxPolyResponse';
import WxRouteResponse from '../model/WxRouteResponse';

/**
* Weather service.
* @module api/WeatherApi
* @version V 1.0.0
*/
export default class WeatherApi {

    /**
    * Constructs a new WeatherApi. 
    * @alias module:api/WeatherApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the wxByDistanceUsV1WxForecastDistanceQueryPost operation.
     * @callback module:api/WeatherApi~wxByDistanceUsV1WxForecastDistanceQueryPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WxDistanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve forecast values within given distance of location for all requested weather elements and time periods.
     * Retrieve forecast values for selected weather elements and time period. Request body parameters are: * latitude:  WGS84 latitude coordinate of your selected point, in decimal degrees * longitude:  WGS84 longitude coordinate of your selected point, in decimal degrees * distance:  distance in meters (max allowed value is 25000) * wxtypes:  list of one or more weather forecast elements you wish to retrieve. Allowed values are \"CIG\", \"DEWPT\", \"SKY\", \"TEMP\", \"VIS\", \"WINDDIR\", \"WINDGUST\", \"WINDSPEED\". * hours:  number of hourly forecasts to return (1-24). For current hour only you should enter value of 1. To also retrieve values for each of the next n hours, enter n.   The response will consist of a GeoJSON FeatureCollection with one Feature for each forecast location found within requested area, properties of which will include an ordered list of forecast values for each requested weather element, for each requested hour. Units for each element are as follows: * CIG: meters AGL * DEWPT: degrees Celsius * SKY: % cloud cover * TEMP: degrees Celsius * VIS: meters * WINDDIR: degrees true * WINDGUST: meters/sec * WINDSPEED: meters/sec
     * @param {module:model/WxByDistance} wxByDistance 
     * @param {Object} opts Optional parameters
     * @param {String} [xApiKey] 
     * @param {module:api/WeatherApi~wxByDistanceUsV1WxForecastDistanceQueryPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WxDistanceResponse}
     */
    wxByDistanceUsV1WxForecastDistanceQueryPost(wxByDistance, opts, callback) {
      opts = opts || {};
      let postBody = wxByDistance;
      // verify the required parameter 'wxByDistance' is set
      if (wxByDistance === undefined || wxByDistance === null) {
        throw new Error("Missing the required parameter 'wxByDistance' when calling wxByDistanceUsV1WxForecastDistanceQueryPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-api-key': opts['xApiKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WxDistanceResponse;
      return this.apiClient.callApi(
        '/us/v1/wx-forecast/distance-query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the wxByPolyUsV1WxForecastPolygonQueryPost operation.
     * @callback module:api/WeatherApi~wxByPolyUsV1WxForecastPolygonQueryPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WxPolyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve forecast values within given GeoJSON polygon for all requested weather elements and time periods.
     * Retrieve forecast values located within given area for requested weather elements and time period. Request body parameters are: * poly:  [GeoJSON Polygon](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the area. Max allowed area is 1000 km^2. * wxtypes:  list of one or more weather forecast elements you wish to retrieve. Allowed values are \"CIG\", \"DEWPT\", \"SKY\", \"TEMP\", \"VIS\", \"WINDDIR\", \"WINDGUST\", \"WINDSPEED\". * hours:  number of hourly forecasts to return (1-24). For current hour only you should enter value of 1. To also retrieve values for each of the next n hours, enter n.   The response will consist of a GeoJSON FeatureCollection with one Feature for each forecast location found within requested area, properties of which will include an ordered list of forecast values for each requested weather element, for each requested hour. Units for each element are as follows: * CIG: meters AGL * DEWPT: degrees Celsius * SKY: % cloud cover * TEMP: degrees Celsius * VIS: meters * WINDDIR: degrees true * WINDGUST: meters/sec * WINDSPEED: meters/sec
     * @param {module:model/WxByPolygon} wxByPolygon 
     * @param {Object} opts Optional parameters
     * @param {String} [xApiKey] 
     * @param {module:api/WeatherApi~wxByPolyUsV1WxForecastPolygonQueryPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WxPolyResponse}
     */
    wxByPolyUsV1WxForecastPolygonQueryPost(wxByPolygon, opts, callback) {
      opts = opts || {};
      let postBody = wxByPolygon;
      // verify the required parameter 'wxByPolygon' is set
      if (wxByPolygon === undefined || wxByPolygon === null) {
        throw new Error("Missing the required parameter 'wxByPolygon' when calling wxByPolyUsV1WxForecastPolygonQueryPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-api-key': opts['xApiKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WxPolyResponse;
      return this.apiClient.callApi(
        '/us/v1/wx-forecast/polygon-query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the wxByRouteUsV1WxForecastRouteQueryPost operation.
     * @callback module:api/WeatherApi~wxByRouteUsV1WxForecastRouteQueryPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WxRouteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve forecast values along a route for all requested weather elements and time periods.
     * Retrieve forecast values along route for requested weather elements and time period. Request body parameters are: * route:  [GeoJSON Linestring](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the route. Max allowed length is 50 km. * wxtypes:  list of one or more weather forecast elements you wish to retrieve. Allowed values are \"CIG\", \"DEWPT\", \"SKY\", \"TEMP\", \"VIS\", \"WINDDIR\", \"WINDGUST\", \"WINDSPEED\". * hours:  number of hourly forecasts to return (1-24). For current hour only you should enter value of 1. To also retrieve values for each of the next n hours, enter n.   The response will consist of a GeoJSON FeatureCollection with one Feature for each forecast location found within requested area, properties of which will include an ordered list of forecast values for each requested weather element, for each requested hour. Units for each element are as follows: * CIG: meters AGL * DEWPT: degrees Celsius * SKY: % cloud cover * TEMP: degrees Celsius * VIS: meters * WINDDIR: degrees true * WINDGUST: meters/sec * WINDSPEED: meters/sec
     * @param {module:model/WxByRoute} wxByRoute 
     * @param {Object} opts Optional parameters
     * @param {String} [xApiKey] 
     * @param {module:api/WeatherApi~wxByRouteUsV1WxForecastRouteQueryPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WxRouteResponse}
     */
    wxByRouteUsV1WxForecastRouteQueryPost(wxByRoute, opts, callback) {
      opts = opts || {};
      let postBody = wxByRoute;
      // verify the required parameter 'wxByRoute' is set
      if (wxByRoute === undefined || wxByRoute === null) {
        throw new Error("Missing the required parameter 'wxByRoute' when calling wxByRouteUsV1WxForecastRouteQueryPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-api-key': opts['xApiKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WxRouteResponse;
      return this.apiClient.callApi(
        '/us/v1/wx-forecast/route-query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
