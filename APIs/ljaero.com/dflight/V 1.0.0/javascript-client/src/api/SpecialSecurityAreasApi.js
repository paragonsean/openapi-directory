/**
 * DFlight API
 * [DFlight API](https://ljaero.com/solutions/dflight/) supplies the up-to-date information needed for compliance with UAV preflight assessment requirements. Separate endpoints are available for each of the following information categories: - Airspace - Weather - Temporary Flight Restrictions - Special Security Areas - Restricted Public Venues - Surface Obstacles - Aerodromes - UAS Operating Areas  You can define your geographic area of interest in one of three convenient ways: - Providing a latitude/longitude point and distance around that point - Providing a GeoJSON LineString defining your route - Providing an arbitrary GeoJSON Polygon defining your area of interest
 *
 * The version of the OpenAPI document: V 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HTTPValidationError from '../model/HTTPValidationError';
import SSAByDistance from '../model/SSAByDistance';
import SSAByPolygon from '../model/SSAByPolygon';
import SSAByRoute from '../model/SSAByRoute';
import SSADistanceResponse from '../model/SSADistanceResponse';
import SSAPolyResponse from '../model/SSAPolyResponse';
import SSARouteResponse from '../model/SSARouteResponse';

/**
* SpecialSecurityAreas service.
* @module api/SpecialSecurityAreasApi
* @version V 1.0.0
*/
export default class SpecialSecurityAreasApi {

    /**
    * Constructs a new SpecialSecurityAreasApi. 
    * @alias module:api/SpecialSecurityAreasApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the ssaByDistanceUsV1SsaDistanceQueryPost operation.
     * @callback module:api/SpecialSecurityAreasApi~ssaByDistanceUsV1SsaDistanceQueryPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SSADistanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all special security areas located within given distance of location.
     * Retrieve special security areas existing within given distance from a point. Request body parameters are: * latitude:  WGS84 latitude coordinate of your selected point, in decimal degrees * longitude:  WGS84 longitude coordinate of your selected point, in decimal degrees * distance:  distance in meters (max allowed value is 25000)
     * @param {module:model/SSAByDistance} sSAByDistance 
     * @param {Object} opts Optional parameters
     * @param {String} [xApiKey] 
     * @param {module:api/SpecialSecurityAreasApi~ssaByDistanceUsV1SsaDistanceQueryPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SSADistanceResponse}
     */
    ssaByDistanceUsV1SsaDistanceQueryPost(sSAByDistance, opts, callback) {
      opts = opts || {};
      let postBody = sSAByDistance;
      // verify the required parameter 'sSAByDistance' is set
      if (sSAByDistance === undefined || sSAByDistance === null) {
        throw new Error("Missing the required parameter 'sSAByDistance' when calling ssaByDistanceUsV1SsaDistanceQueryPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-api-key': opts['xApiKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SSADistanceResponse;
      return this.apiClient.callApi(
        '/us/v1/ssa/distance-query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ssaByPolyUsV1SsaPolygonQueryPost operation.
     * @callback module:api/SpecialSecurityAreasApi~ssaByPolyUsV1SsaPolygonQueryPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SSAPolyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all special security areas located within given GeoJSON Polygon.
     * Retrieve all special security areas located within given area. Request body parameters are: * poly:  [GeoJSON Polygon](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the area. Max allowed area is 1000 km^2.
     * @param {module:model/SSAByPolygon} sSAByPolygon 
     * @param {Object} opts Optional parameters
     * @param {String} [xApiKey] 
     * @param {module:api/SpecialSecurityAreasApi~ssaByPolyUsV1SsaPolygonQueryPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SSAPolyResponse}
     */
    ssaByPolyUsV1SsaPolygonQueryPost(sSAByPolygon, opts, callback) {
      opts = opts || {};
      let postBody = sSAByPolygon;
      // verify the required parameter 'sSAByPolygon' is set
      if (sSAByPolygon === undefined || sSAByPolygon === null) {
        throw new Error("Missing the required parameter 'sSAByPolygon' when calling ssaByPolyUsV1SsaPolygonQueryPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-api-key': opts['xApiKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SSAPolyResponse;
      return this.apiClient.callApi(
        '/us/v1/ssa/polygon-query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ssaByRouteUsV1SsaRouteQueryPost operation.
     * @callback module:api/SpecialSecurityAreasApi~ssaByRouteUsV1SsaRouteQueryPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SSARouteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all special security areas traversed by route.
     * Retrieve all special security areas intersected by route. Request body parameters are: * route: [GeoJSON Linestring](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the route. Max allowed length is 50 km.
     * @param {module:model/SSAByRoute} sSAByRoute 
     * @param {Object} opts Optional parameters
     * @param {String} [xApiKey] 
     * @param {module:api/SpecialSecurityAreasApi~ssaByRouteUsV1SsaRouteQueryPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SSARouteResponse}
     */
    ssaByRouteUsV1SsaRouteQueryPost(sSAByRoute, opts, callback) {
      opts = opts || {};
      let postBody = sSAByRoute;
      // verify the required parameter 'sSAByRoute' is set
      if (sSAByRoute === undefined || sSAByRoute === null) {
        throw new Error("Missing the required parameter 'sSAByRoute' when calling ssaByRouteUsV1SsaRouteQueryPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-api-key': opts['xApiKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SSARouteResponse;
      return this.apiClient.callApi(
        '/us/v1/ssa/route-query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
