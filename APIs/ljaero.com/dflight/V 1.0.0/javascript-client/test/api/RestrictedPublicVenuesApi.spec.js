/**
 * DFlight API
 * [DFlight API](https://ljaero.com/solutions/dflight/) supplies the up-to-date information needed for compliance with UAV preflight assessment requirements. Separate endpoints are available for each of the following information categories: - Airspace - Weather - Temporary Flight Restrictions - Special Security Areas - Restricted Public Venues - Surface Obstacles - Aerodromes - UAS Operating Areas  You can define your geographic area of interest in one of three convenient ways: - Providing a latitude/longitude point and distance around that point - Providing a GeoJSON LineString defining your route - Providing an arbitrary GeoJSON Polygon defining your area of interest
 *
 * The version of the OpenAPI document: V 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DFlightApi);
  }
}(this, function(expect, DFlightApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DFlightApi.RestrictedPublicVenuesApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('RestrictedPublicVenuesApi', function() {
    describe('venByDistanceUsV1VenuesDistanceQueryPost', function() {
      it('should call venByDistanceUsV1VenuesDistanceQueryPost successfully', function(done) {
        //uncomment below and update the code to test venByDistanceUsV1VenuesDistanceQueryPost
        //instance.venByDistanceUsV1VenuesDistanceQueryPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('venByPolyUsV1VenuesPolygonQueryPost', function() {
      it('should call venByPolyUsV1VenuesPolygonQueryPost successfully', function(done) {
        //uncomment below and update the code to test venByPolyUsV1VenuesPolygonQueryPost
        //instance.venByPolyUsV1VenuesPolygonQueryPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('venByRouteUsV1VenuesRouteQueryPost', function() {
      it('should call venByRouteUsV1VenuesRouteQueryPost successfully', function(done) {
        //uncomment below and update the code to test venByRouteUsV1VenuesRouteQueryPost
        //instance.venByRouteUsV1VenuesRouteQueryPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
