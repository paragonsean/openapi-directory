# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AirspaceByPolygon(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asptypes: List[str]=None, poly: object=None):
        """AirspaceByPolygon - a model defined in OpenAPI

        :param asptypes: The asptypes of this AirspaceByPolygon.
        :param poly: The poly of this AirspaceByPolygon.
        """
        self.openapi_types = {
            'asptypes': List[str],
            'poly': object
        }

        self.attribute_map = {
            'asptypes': 'asptypes',
            'poly': 'poly'
        }

        self._asptypes = asptypes
        self._poly = poly

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AirspaceByPolygon':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AirspaceByPolygon of this AirspaceByPolygon.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asptypes(self):
        """Gets the asptypes of this AirspaceByPolygon.


        :return: The asptypes of this AirspaceByPolygon.
        :rtype: List[str]
        """
        return self._asptypes

    @asptypes.setter
    def asptypes(self, asptypes):
        """Sets the asptypes of this AirspaceByPolygon.


        :param asptypes: The asptypes of this AirspaceByPolygon.
        :type asptypes: List[str]
        """
        if asptypes is None:
            raise ValueError("Invalid value for `asptypes`, must not be `None`")

        self._asptypes = asptypes

    @property
    def poly(self):
        """Gets the poly of this AirspaceByPolygon.


        :return: The poly of this AirspaceByPolygon.
        :rtype: object
        """
        return self._poly

    @poly.setter
    def poly(self, poly):
        """Sets the poly of this AirspaceByPolygon.


        :param poly: The poly of this AirspaceByPolygon.
        :type poly: object
        """
        if poly is None:
            raise ValueError("Invalid value for `poly`, must not be `None`")

        self._poly = poly
