# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.distance import Distance
from openapi_server.models.latitude import Latitude
from openapi_server.models.longitude import Longitude
from openapi_server import util


class WxByDistance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, distance: Distance=None, hours: int=None, latitude: Latitude=None, longitude: Longitude=None, wxtypes: List[str]=None):
        """WxByDistance - a model defined in OpenAPI

        :param distance: The distance of this WxByDistance.
        :param hours: The hours of this WxByDistance.
        :param latitude: The latitude of this WxByDistance.
        :param longitude: The longitude of this WxByDistance.
        :param wxtypes: The wxtypes of this WxByDistance.
        """
        self.openapi_types = {
            'distance': Distance,
            'hours': int,
            'latitude': Latitude,
            'longitude': Longitude,
            'wxtypes': List[str]
        }

        self.attribute_map = {
            'distance': 'distance',
            'hours': 'hours',
            'latitude': 'latitude',
            'longitude': 'longitude',
            'wxtypes': 'wxtypes'
        }

        self._distance = distance
        self._hours = hours
        self._latitude = latitude
        self._longitude = longitude
        self._wxtypes = wxtypes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WxByDistance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WxByDistance of this WxByDistance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def distance(self):
        """Gets the distance of this WxByDistance.


        :return: The distance of this WxByDistance.
        :rtype: Distance
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this WxByDistance.


        :param distance: The distance of this WxByDistance.
        :type distance: Distance
        """
        if distance is None:
            raise ValueError("Invalid value for `distance`, must not be `None`")

        self._distance = distance

    @property
    def hours(self):
        """Gets the hours of this WxByDistance.


        :return: The hours of this WxByDistance.
        :rtype: int
        """
        return self._hours

    @hours.setter
    def hours(self, hours):
        """Sets the hours of this WxByDistance.


        :param hours: The hours of this WxByDistance.
        :type hours: int
        """
        if hours is None:
            raise ValueError("Invalid value for `hours`, must not be `None`")

        self._hours = hours

    @property
    def latitude(self):
        """Gets the latitude of this WxByDistance.


        :return: The latitude of this WxByDistance.
        :rtype: Latitude
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this WxByDistance.


        :param latitude: The latitude of this WxByDistance.
        :type latitude: Latitude
        """
        if latitude is None:
            raise ValueError("Invalid value for `latitude`, must not be `None`")

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this WxByDistance.


        :return: The longitude of this WxByDistance.
        :rtype: Longitude
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this WxByDistance.


        :param longitude: The longitude of this WxByDistance.
        :type longitude: Longitude
        """
        if longitude is None:
            raise ValueError("Invalid value for `longitude`, must not be `None`")

        self._longitude = longitude

    @property
    def wxtypes(self):
        """Gets the wxtypes of this WxByDistance.


        :return: The wxtypes of this WxByDistance.
        :rtype: List[str]
        """
        return self._wxtypes

    @wxtypes.setter
    def wxtypes(self, wxtypes):
        """Sets the wxtypes of this WxByDistance.


        :param wxtypes: The wxtypes of this WxByDistance.
        :type wxtypes: List[str]
        """
        if wxtypes is None:
            raise ValueError("Invalid value for `wxtypes`, must not be `None`")

        self._wxtypes = wxtypes
