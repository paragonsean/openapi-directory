# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WxByRoute(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hours: int=None, route: object=None, wxtypes: List[str]=None):
        """WxByRoute - a model defined in OpenAPI

        :param hours: The hours of this WxByRoute.
        :param route: The route of this WxByRoute.
        :param wxtypes: The wxtypes of this WxByRoute.
        """
        self.openapi_types = {
            'hours': int,
            'route': object,
            'wxtypes': List[str]
        }

        self.attribute_map = {
            'hours': 'hours',
            'route': 'route',
            'wxtypes': 'wxtypes'
        }

        self._hours = hours
        self._route = route
        self._wxtypes = wxtypes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WxByRoute':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WxByRoute of this WxByRoute.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hours(self):
        """Gets the hours of this WxByRoute.


        :return: The hours of this WxByRoute.
        :rtype: int
        """
        return self._hours

    @hours.setter
    def hours(self, hours):
        """Sets the hours of this WxByRoute.


        :param hours: The hours of this WxByRoute.
        :type hours: int
        """
        if hours is None:
            raise ValueError("Invalid value for `hours`, must not be `None`")

        self._hours = hours

    @property
    def route(self):
        """Gets the route of this WxByRoute.


        :return: The route of this WxByRoute.
        :rtype: object
        """
        return self._route

    @route.setter
    def route(self, route):
        """Sets the route of this WxByRoute.


        :param route: The route of this WxByRoute.
        :type route: object
        """
        if route is None:
            raise ValueError("Invalid value for `route`, must not be `None`")

        self._route = route

    @property
    def wxtypes(self):
        """Gets the wxtypes of this WxByRoute.


        :return: The wxtypes of this WxByRoute.
        :rtype: List[str]
        """
        return self._wxtypes

    @wxtypes.setter
    def wxtypes(self, wxtypes):
        """Sets the wxtypes of this WxByRoute.


        :param wxtypes: The wxtypes of this WxByRoute.
        :type wxtypes: List[str]
        """
        if wxtypes is None:
            raise ValueError("Invalid value for `wxtypes`, must not be `None`")

        self._wxtypes = wxtypes
