# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.distance import Distance
from openapi_server.models.latitude import Latitude
from openapi_server.models.longitude import Longitude
from openapi_server import util


class AerodromesByDistance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, distance: Distance=None, latitude: Latitude=None, longitude: Longitude=None):
        """AerodromesByDistance - a model defined in OpenAPI

        :param distance: The distance of this AerodromesByDistance.
        :param latitude: The latitude of this AerodromesByDistance.
        :param longitude: The longitude of this AerodromesByDistance.
        """
        self.openapi_types = {
            'distance': Distance,
            'latitude': Latitude,
            'longitude': Longitude
        }

        self.attribute_map = {
            'distance': 'distance',
            'latitude': 'latitude',
            'longitude': 'longitude'
        }

        self._distance = distance
        self._latitude = latitude
        self._longitude = longitude

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AerodromesByDistance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AerodromesByDistance of this AerodromesByDistance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def distance(self):
        """Gets the distance of this AerodromesByDistance.


        :return: The distance of this AerodromesByDistance.
        :rtype: Distance
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this AerodromesByDistance.


        :param distance: The distance of this AerodromesByDistance.
        :type distance: Distance
        """
        if distance is None:
            raise ValueError("Invalid value for `distance`, must not be `None`")

        self._distance = distance

    @property
    def latitude(self):
        """Gets the latitude of this AerodromesByDistance.


        :return: The latitude of this AerodromesByDistance.
        :rtype: Latitude
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this AerodromesByDistance.


        :param latitude: The latitude of this AerodromesByDistance.
        :type latitude: Latitude
        """
        if latitude is None:
            raise ValueError("Invalid value for `latitude`, must not be `None`")

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this AerodromesByDistance.


        :return: The longitude of this AerodromesByDistance.
        :rtype: Longitude
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this AerodromesByDistance.


        :param longitude: The longitude of this AerodromesByDistance.
        :type longitude: Longitude
        """
        if longitude is None:
            raise ValueError("Invalid value for `longitude`, must not be `None`")

        self._longitude = longitude
