# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VenuesByPolygon(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, poly: object=None):
        """VenuesByPolygon - a model defined in OpenAPI

        :param poly: The poly of this VenuesByPolygon.
        """
        self.openapi_types = {
            'poly': object
        }

        self.attribute_map = {
            'poly': 'poly'
        }

        self._poly = poly

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VenuesByPolygon':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VenuesByPolygon of this VenuesByPolygon.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def poly(self):
        """Gets the poly of this VenuesByPolygon.


        :return: The poly of this VenuesByPolygon.
        :rtype: object
        """
        return self._poly

    @poly.setter
    def poly(self, poly):
        """Sets the poly of this VenuesByPolygon.


        :param poly: The poly of this VenuesByPolygon.
        :type poly: object
        """
        if poly is None:
            raise ValueError("Invalid value for `poly`, must not be `None`")

        self._poly = poly
