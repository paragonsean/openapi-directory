# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NOTAMsPolyResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, found: object=None):
        """NOTAMsPolyResponse - a model defined in OpenAPI

        :param found: The found of this NOTAMsPolyResponse.
        """
        self.openapi_types = {
            'found': object
        }

        self.attribute_map = {
            'found': 'found'
        }

        self._found = found

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NOTAMsPolyResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NOTAMsPolyResponse of this NOTAMsPolyResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def found(self):
        """Gets the found of this NOTAMsPolyResponse.


        :return: The found of this NOTAMsPolyResponse.
        :rtype: object
        """
        return self._found

    @found.setter
    def found(self, found):
        """Sets the found of this NOTAMsPolyResponse.


        :param found: The found of this NOTAMsPolyResponse.
        :type found: object
        """
        if found is None:
            raise ValueError("Invalid value for `found`, must not be `None`")

        self._found = found
