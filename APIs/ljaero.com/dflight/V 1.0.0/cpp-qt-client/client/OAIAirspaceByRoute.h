/**
 * DFlight API
 * [DFlight API](https://ljaero.com/solutions/dflight/) supplies the up-to-date information needed for compliance with UAV preflight assessment requirements. Separate endpoints are available for each of the following information categories: - Airspace - Weather - Temporary Flight Restrictions - Special Security Areas - Restricted Public Venues - Surface Obstacles - Aerodromes - UAS Operating Areas  You can define your geographic area of interest in one of three convenient ways: - Providing a latitude/longitude point and distance around that point - Providing a GeoJSON LineString defining your route - Providing an arbitrary GeoJSON Polygon defining your area of interest
 *
 * The version of the OpenAPI document: V 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAirspaceByRoute.h
 *
 * Geometry-defining arguments for along-route requests
 */

#ifndef OAIAirspaceByRoute_H
#define OAIAirspaceByRoute_H

#include <QJsonObject>

#include "OAIObject.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAirspaceByRoute : public OAIObject {
public:
    OAIAirspaceByRoute();
    OAIAirspaceByRoute(QString json);
    ~OAIAirspaceByRoute() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getAsptypes() const;
    void setAsptypes(const QList<QString> &asptypes);
    bool is_asptypes_Set() const;
    bool is_asptypes_Valid() const;

    OAIObject getRoute() const;
    void setRoute(const OAIObject &route);
    bool is_route_Set() const;
    bool is_route_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_asptypes;
    bool m_asptypes_isSet;
    bool m_asptypes_isValid;

    OAIObject m_route;
    bool m_route_isSet;
    bool m_route_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAirspaceByRoute)

#endif // OAIAirspaceByRoute_H
