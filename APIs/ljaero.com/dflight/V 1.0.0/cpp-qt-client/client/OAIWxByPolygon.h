/**
 * DFlight API
 * [DFlight API](https://ljaero.com/solutions/dflight/) supplies the up-to-date information needed for compliance with UAV preflight assessment requirements. Separate endpoints are available for each of the following information categories: - Airspace - Weather - Temporary Flight Restrictions - Special Security Areas - Restricted Public Venues - Surface Obstacles - Aerodromes - UAS Operating Areas  You can define your geographic area of interest in one of three convenient ways: - Providing a latitude/longitude point and distance around that point - Providing a GeoJSON LineString defining your route - Providing an arbitrary GeoJSON Polygon defining your area of interest
 *
 * The version of the OpenAPI document: V 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIWxByPolygon.h
 *
 * Geometry-defining arguments for polygon requests
 */

#ifndef OAIWxByPolygon_H
#define OAIWxByPolygon_H

#include <QJsonObject>

#include "OAIObject.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIWxByPolygon : public OAIObject {
public:
    OAIWxByPolygon();
    OAIWxByPolygon(QString json);
    ~OAIWxByPolygon() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getHours() const;
    void setHours(const qint32 &hours);
    bool is_hours_Set() const;
    bool is_hours_Valid() const;

    OAIObject getPoly() const;
    void setPoly(const OAIObject &poly);
    bool is_poly_Set() const;
    bool is_poly_Valid() const;

    QList<QString> getWxtypes() const;
    void setWxtypes(const QList<QString> &wxtypes);
    bool is_wxtypes_Set() const;
    bool is_wxtypes_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_hours;
    bool m_hours_isSet;
    bool m_hours_isValid;

    OAIObject m_poly;
    bool m_poly_isSet;
    bool m_poly_isValid;

    QList<QString> m_wxtypes;
    bool m_wxtypes_isSet;
    bool m_wxtypes_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIWxByPolygon)

#endif // OAIWxByPolygon_H
