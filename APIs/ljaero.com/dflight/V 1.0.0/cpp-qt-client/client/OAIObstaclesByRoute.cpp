/**
 * DFlight API
 * [DFlight API](https://ljaero.com/solutions/dflight/) supplies the up-to-date information needed for compliance with UAV preflight assessment requirements. Separate endpoints are available for each of the following information categories: - Airspace - Weather - Temporary Flight Restrictions - Special Security Areas - Restricted Public Venues - Surface Obstacles - Aerodromes - UAS Operating Areas  You can define your geographic area of interest in one of three convenient ways: - Providing a latitude/longitude point and distance around that point - Providing a GeoJSON LineString defining your route - Providing an arbitrary GeoJSON Polygon defining your area of interest
 *
 * The version of the OpenAPI document: V 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIObstaclesByRoute.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIObstaclesByRoute::OAIObstaclesByRoute(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIObstaclesByRoute::OAIObstaclesByRoute() {
    this->initializeModel();
}

OAIObstaclesByRoute::~OAIObstaclesByRoute() {}

void OAIObstaclesByRoute::initializeModel() {

    m_route_isSet = false;
    m_route_isValid = false;
}

void OAIObstaclesByRoute::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIObstaclesByRoute::fromJsonObject(QJsonObject json) {

    m_route_isValid = ::OpenAPI::fromJsonValue(m_route, json[QString("route")]);
    m_route_isSet = !json[QString("route")].isNull() && m_route_isValid;
}

QString OAIObstaclesByRoute::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIObstaclesByRoute::asJsonObject() const {
    QJsonObject obj;
    if (m_route_isSet) {
        obj.insert(QString("route"), ::OpenAPI::toJsonValue(m_route));
    }
    return obj;
}

OAIObject OAIObstaclesByRoute::getRoute() const {
    return m_route;
}
void OAIObstaclesByRoute::setRoute(const OAIObject &route) {
    m_route = route;
    m_route_isSet = true;
}

bool OAIObstaclesByRoute::is_route_Set() const{
    return m_route_isSet;
}

bool OAIObstaclesByRoute::is_route_Valid() const{
    return m_route_isValid;
}

bool OAIObstaclesByRoute::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_route_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIObstaclesByRoute::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_route_isValid && true;
}

} // namespace OpenAPI
