/**
 * DFlight API
 * [DFlight API](https://ljaero.com/solutions/dflight/) supplies the up-to-date information needed for compliance with UAV preflight assessment requirements. Separate endpoints are available for each of the following information categories: - Airspace - Weather - Temporary Flight Restrictions - Special Security Areas - Restricted Public Venues - Surface Obstacles - Aerodromes - UAS Operating Areas  You can define your geographic area of interest in one of three convenient ways: - Providing a latitude/longitude point and distance around that point - Providing a GeoJSON LineString defining your route - Providing an arbitrary GeoJSON Polygon defining your area of interest
 *
 * The version of the OpenAPI document: V 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISSAByPolygon.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISSAByPolygon::OAISSAByPolygon(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISSAByPolygon::OAISSAByPolygon() {
    this->initializeModel();
}

OAISSAByPolygon::~OAISSAByPolygon() {}

void OAISSAByPolygon::initializeModel() {

    m_poly_isSet = false;
    m_poly_isValid = false;
}

void OAISSAByPolygon::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISSAByPolygon::fromJsonObject(QJsonObject json) {

    m_poly_isValid = ::OpenAPI::fromJsonValue(m_poly, json[QString("poly")]);
    m_poly_isSet = !json[QString("poly")].isNull() && m_poly_isValid;
}

QString OAISSAByPolygon::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISSAByPolygon::asJsonObject() const {
    QJsonObject obj;
    if (m_poly_isSet) {
        obj.insert(QString("poly"), ::OpenAPI::toJsonValue(m_poly));
    }
    return obj;
}

OAIObject OAISSAByPolygon::getPoly() const {
    return m_poly;
}
void OAISSAByPolygon::setPoly(const OAIObject &poly) {
    m_poly = poly;
    m_poly_isSet = true;
}

bool OAISSAByPolygon::is_poly_Set() const{
    return m_poly_isSet;
}

bool OAISSAByPolygon::is_poly_Valid() const{
    return m_poly_isValid;
}

bool OAISSAByPolygon::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_poly_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISSAByPolygon::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_poly_isValid && true;
}

} // namespace OpenAPI
