/**
 * DFlight API
 * [DFlight API](https://ljaero.com/solutions/dflight/) supplies the up-to-date information needed for compliance with UAV preflight assessment requirements. Separate endpoints are available for each of the following information categories: - Airspace - Weather - Temporary Flight Restrictions - Special Security Areas - Restricted Public Venues - Surface Obstacles - Aerodromes - UAS Operating Areas  You can define your geographic area of interest in one of three convenient ways: - Providing a latitude/longitude point and distance around that point - Providing a GeoJSON LineString defining your route - Providing an arbitrary GeoJSON Polygon defining your area of interest
 *
 * The version of the OpenAPI document: V 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAerodromesByDistance.h
 *
 * Geometry-defining arguments for point/distance requests
 */

#ifndef OAIAerodromesByDistance_H
#define OAIAerodromesByDistance_H

#include <QJsonObject>

#include "OAIDistance.h"
#include "OAILatitude.h"
#include "OAILongitude.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAerodromesByDistance : public OAIObject {
public:
    OAIAerodromesByDistance();
    OAIAerodromesByDistance(QString json);
    ~OAIAerodromesByDistance() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIDistance getDistance() const;
    void setDistance(const OAIDistance &distance);
    bool is_distance_Set() const;
    bool is_distance_Valid() const;

    OAILatitude getLatitude() const;
    void setLatitude(const OAILatitude &latitude);
    bool is_latitude_Set() const;
    bool is_latitude_Valid() const;

    OAILongitude getLongitude() const;
    void setLongitude(const OAILongitude &longitude);
    bool is_longitude_Set() const;
    bool is_longitude_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIDistance m_distance;
    bool m_distance_isSet;
    bool m_distance_isValid;

    OAILatitude m_latitude;
    bool m_latitude_isSet;
    bool m_latitude_isValid;

    OAILongitude m_longitude;
    bool m_longitude_isSet;
    bool m_longitude_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAerodromesByDistance)

#endif // OAIAerodromesByDistance_H
