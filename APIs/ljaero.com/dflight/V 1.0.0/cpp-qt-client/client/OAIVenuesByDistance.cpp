/**
 * DFlight API
 * [DFlight API](https://ljaero.com/solutions/dflight/) supplies the up-to-date information needed for compliance with UAV preflight assessment requirements. Separate endpoints are available for each of the following information categories: - Airspace - Weather - Temporary Flight Restrictions - Special Security Areas - Restricted Public Venues - Surface Obstacles - Aerodromes - UAS Operating Areas  You can define your geographic area of interest in one of three convenient ways: - Providing a latitude/longitude point and distance around that point - Providing a GeoJSON LineString defining your route - Providing an arbitrary GeoJSON Polygon defining your area of interest
 *
 * The version of the OpenAPI document: V 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVenuesByDistance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVenuesByDistance::OAIVenuesByDistance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVenuesByDistance::OAIVenuesByDistance() {
    this->initializeModel();
}

OAIVenuesByDistance::~OAIVenuesByDistance() {}

void OAIVenuesByDistance::initializeModel() {

    m_distance_isSet = false;
    m_distance_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;
}

void OAIVenuesByDistance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVenuesByDistance::fromJsonObject(QJsonObject json) {

    m_distance_isValid = ::OpenAPI::fromJsonValue(m_distance, json[QString("distance")]);
    m_distance_isSet = !json[QString("distance")].isNull() && m_distance_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("latitude")]);
    m_latitude_isSet = !json[QString("latitude")].isNull() && m_latitude_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("longitude")]);
    m_longitude_isSet = !json[QString("longitude")].isNull() && m_longitude_isValid;
}

QString OAIVenuesByDistance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVenuesByDistance::asJsonObject() const {
    QJsonObject obj;
    if (m_distance.isSet()) {
        obj.insert(QString("distance"), ::OpenAPI::toJsonValue(m_distance));
    }
    if (m_latitude.isSet()) {
        obj.insert(QString("latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_longitude.isSet()) {
        obj.insert(QString("longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    return obj;
}

OAIDistance OAIVenuesByDistance::getDistance() const {
    return m_distance;
}
void OAIVenuesByDistance::setDistance(const OAIDistance &distance) {
    m_distance = distance;
    m_distance_isSet = true;
}

bool OAIVenuesByDistance::is_distance_Set() const{
    return m_distance_isSet;
}

bool OAIVenuesByDistance::is_distance_Valid() const{
    return m_distance_isValid;
}

OAILatitude OAIVenuesByDistance::getLatitude() const {
    return m_latitude;
}
void OAIVenuesByDistance::setLatitude(const OAILatitude &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAIVenuesByDistance::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAIVenuesByDistance::is_latitude_Valid() const{
    return m_latitude_isValid;
}

OAILongitude OAIVenuesByDistance::getLongitude() const {
    return m_longitude;
}
void OAIVenuesByDistance::setLongitude(const OAILongitude &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAIVenuesByDistance::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAIVenuesByDistance::is_longitude_Valid() const{
    return m_longitude_isValid;
}

bool OAIVenuesByDistance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_distance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVenuesByDistance::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_distance_isValid && m_latitude_isValid && m_longitude_isValid && true;
}

} // namespace OpenAPI
