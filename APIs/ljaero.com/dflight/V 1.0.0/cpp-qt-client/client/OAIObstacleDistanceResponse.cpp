/**
 * DFlight API
 * [DFlight API](https://ljaero.com/solutions/dflight/) supplies the up-to-date information needed for compliance with UAV preflight assessment requirements. Separate endpoints are available for each of the following information categories: - Airspace - Weather - Temporary Flight Restrictions - Special Security Areas - Restricted Public Venues - Surface Obstacles - Aerodromes - UAS Operating Areas  You can define your geographic area of interest in one of three convenient ways: - Providing a latitude/longitude point and distance around that point - Providing a GeoJSON LineString defining your route - Providing an arbitrary GeoJSON Polygon defining your area of interest
 *
 * The version of the OpenAPI document: V 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIObstacleDistanceResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIObstacleDistanceResponse::OAIObstacleDistanceResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIObstacleDistanceResponse::OAIObstacleDistanceResponse() {
    this->initializeModel();
}

OAIObstacleDistanceResponse::~OAIObstacleDistanceResponse() {}

void OAIObstacleDistanceResponse::initializeModel() {

    m_found_isSet = false;
    m_found_isValid = false;
}

void OAIObstacleDistanceResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIObstacleDistanceResponse::fromJsonObject(QJsonObject json) {

    m_found_isValid = ::OpenAPI::fromJsonValue(m_found, json[QString("found")]);
    m_found_isSet = !json[QString("found")].isNull() && m_found_isValid;
}

QString OAIObstacleDistanceResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIObstacleDistanceResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_found_isSet) {
        obj.insert(QString("found"), ::OpenAPI::toJsonValue(m_found));
    }
    return obj;
}

OAIObject OAIObstacleDistanceResponse::getFound() const {
    return m_found;
}
void OAIObstacleDistanceResponse::setFound(const OAIObject &found) {
    m_found = found;
    m_found_isSet = true;
}

bool OAIObstacleDistanceResponse::is_found_Set() const{
    return m_found_isSet;
}

bool OAIObstacleDistanceResponse::is_found_Valid() const{
    return m_found_isValid;
}

bool OAIObstacleDistanceResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_found_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIObstacleDistanceResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_found_isValid && true;
}

} // namespace OpenAPI
