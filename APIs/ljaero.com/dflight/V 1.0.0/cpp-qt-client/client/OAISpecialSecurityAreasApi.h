/**
 * DFlight API
 * [DFlight API](https://ljaero.com/solutions/dflight/) supplies the up-to-date information needed for compliance with UAV preflight assessment requirements. Separate endpoints are available for each of the following information categories: - Airspace - Weather - Temporary Flight Restrictions - Special Security Areas - Restricted Public Venues - Surface Obstacles - Aerodromes - UAS Operating Areas  You can define your geographic area of interest in one of three convenient ways: - Providing a latitude/longitude point and distance around that point - Providing a GeoJSON LineString defining your route - Providing an arbitrary GeoJSON Polygon defining your area of interest
 *
 * The version of the OpenAPI document: V 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISpecialSecurityAreasApi_H
#define OAI_OAISpecialSecurityAreasApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIHTTPValidationError.h"
#include "OAISSAByDistance.h"
#include "OAISSAByPolygon.h"
#include "OAISSAByRoute.h"
#include "OAISSADistanceResponse.h"
#include "OAISSAPolyResponse.h"
#include "OAISSARouteResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISpecialSecurityAreasApi : public QObject {
    Q_OBJECT

public:
    OAISpecialSecurityAreasApi(const int timeOut = 0);
    ~OAISpecialSecurityAreasApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oaissaby_distance OAISSAByDistance [required]
    * @param[in]  x_api_key QString [optional]
    */
    virtual void ssaByDistanceUsV1SsaDistanceQueryPost(const OAISSAByDistance &oaissaby_distance, const ::OpenAPI::OptionalParam<QString> &x_api_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oaissaby_polygon OAISSAByPolygon [required]
    * @param[in]  x_api_key QString [optional]
    */
    virtual void ssaByPolyUsV1SsaPolygonQueryPost(const OAISSAByPolygon &oaissaby_polygon, const ::OpenAPI::OptionalParam<QString> &x_api_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oaissaby_route OAISSAByRoute [required]
    * @param[in]  x_api_key QString [optional]
    */
    virtual void ssaByRouteUsV1SsaRouteQueryPost(const OAISSAByRoute &oaissaby_route, const ::OpenAPI::OptionalParam<QString> &x_api_key = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void ssaByDistanceUsV1SsaDistanceQueryPostCallback(OAIHttpRequestWorker *worker);
    void ssaByPolyUsV1SsaPolygonQueryPostCallback(OAIHttpRequestWorker *worker);
    void ssaByRouteUsV1SsaRouteQueryPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void ssaByDistanceUsV1SsaDistanceQueryPostSignal(OAISSADistanceResponse summary);
    void ssaByPolyUsV1SsaPolygonQueryPostSignal(OAISSAPolyResponse summary);
    void ssaByRouteUsV1SsaRouteQueryPostSignal(OAISSARouteResponse summary);


    void ssaByDistanceUsV1SsaDistanceQueryPostSignalFull(OAIHttpRequestWorker *worker, OAISSADistanceResponse summary);
    void ssaByPolyUsV1SsaPolygonQueryPostSignalFull(OAIHttpRequestWorker *worker, OAISSAPolyResponse summary);
    void ssaByRouteUsV1SsaRouteQueryPostSignalFull(OAIHttpRequestWorker *worker, OAISSARouteResponse summary);

    Q_DECL_DEPRECATED_X("Use ssaByDistanceUsV1SsaDistanceQueryPostSignalError() instead")
    void ssaByDistanceUsV1SsaDistanceQueryPostSignalE(OAISSADistanceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ssaByDistanceUsV1SsaDistanceQueryPostSignalError(OAISSADistanceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ssaByPolyUsV1SsaPolygonQueryPostSignalError() instead")
    void ssaByPolyUsV1SsaPolygonQueryPostSignalE(OAISSAPolyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ssaByPolyUsV1SsaPolygonQueryPostSignalError(OAISSAPolyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ssaByRouteUsV1SsaRouteQueryPostSignalError() instead")
    void ssaByRouteUsV1SsaRouteQueryPostSignalE(OAISSARouteResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ssaByRouteUsV1SsaRouteQueryPostSignalError(OAISSARouteResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use ssaByDistanceUsV1SsaDistanceQueryPostSignalErrorFull() instead")
    void ssaByDistanceUsV1SsaDistanceQueryPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ssaByDistanceUsV1SsaDistanceQueryPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ssaByPolyUsV1SsaPolygonQueryPostSignalErrorFull() instead")
    void ssaByPolyUsV1SsaPolygonQueryPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ssaByPolyUsV1SsaPolygonQueryPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ssaByRouteUsV1SsaRouteQueryPostSignalErrorFull() instead")
    void ssaByRouteUsV1SsaRouteQueryPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ssaByRouteUsV1SsaRouteQueryPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
