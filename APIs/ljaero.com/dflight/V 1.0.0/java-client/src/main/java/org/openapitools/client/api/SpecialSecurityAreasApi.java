/*
 * DFlight API
 * [DFlight API](https://ljaero.com/solutions/dflight/) supplies the up-to-date information needed for compliance with UAV preflight assessment requirements. Separate endpoints are available for each of the following information categories: - Airspace - Weather - Temporary Flight Restrictions - Special Security Areas - Restricted Public Venues - Surface Obstacles - Aerodromes - UAS Operating Areas  You can define your geographic area of interest in one of three convenient ways: - Providing a latitude/longitude point and distance around that point - Providing a GeoJSON LineString defining your route - Providing an arbitrary GeoJSON Polygon defining your area of interest
 *
 * The version of the OpenAPI document: V 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.HTTPValidationError;
import org.openapitools.client.model.SSAByDistance;
import org.openapitools.client.model.SSAByPolygon;
import org.openapitools.client.model.SSAByRoute;
import org.openapitools.client.model.SSADistanceResponse;
import org.openapitools.client.model.SSAPolyResponse;
import org.openapitools.client.model.SSARouteResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SpecialSecurityAreasApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SpecialSecurityAreasApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SpecialSecurityAreasApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for ssaByDistanceUsV1SsaDistanceQueryPost
     * @param ssAByDistance  (required)
     * @param xApiKey  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A GeoJSON FeatureCollection, one Feature for each area found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ssaByDistanceUsV1SsaDistanceQueryPostCall(SSAByDistance ssAByDistance, String xApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ssAByDistance;

        // create path and map variables
        String localVarPath = "/us/v1/ssa/distance-query";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiKey != null) {
            localVarHeaderParams.put("x-api-key", localVarApiClient.parameterToString(xApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ssaByDistanceUsV1SsaDistanceQueryPostValidateBeforeCall(SSAByDistance ssAByDistance, String xApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ssAByDistance' is set
        if (ssAByDistance == null) {
            throw new ApiException("Missing the required parameter 'ssAByDistance' when calling ssaByDistanceUsV1SsaDistanceQueryPost(Async)");
        }

        return ssaByDistanceUsV1SsaDistanceQueryPostCall(ssAByDistance, xApiKey, _callback);

    }

    /**
     * Retrieve all special security areas located within given distance of location.
     * Retrieve special security areas existing within given distance from a point. Request body parameters are: * latitude:  WGS84 latitude coordinate of your selected point, in decimal degrees * longitude:  WGS84 longitude coordinate of your selected point, in decimal degrees * distance:  distance in meters (max allowed value is 25000)
     * @param ssAByDistance  (required)
     * @param xApiKey  (optional)
     * @return SSADistanceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A GeoJSON FeatureCollection, one Feature for each area found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public SSADistanceResponse ssaByDistanceUsV1SsaDistanceQueryPost(SSAByDistance ssAByDistance, String xApiKey) throws ApiException {
        ApiResponse<SSADistanceResponse> localVarResp = ssaByDistanceUsV1SsaDistanceQueryPostWithHttpInfo(ssAByDistance, xApiKey);
        return localVarResp.getData();
    }

    /**
     * Retrieve all special security areas located within given distance of location.
     * Retrieve special security areas existing within given distance from a point. Request body parameters are: * latitude:  WGS84 latitude coordinate of your selected point, in decimal degrees * longitude:  WGS84 longitude coordinate of your selected point, in decimal degrees * distance:  distance in meters (max allowed value is 25000)
     * @param ssAByDistance  (required)
     * @param xApiKey  (optional)
     * @return ApiResponse&lt;SSADistanceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A GeoJSON FeatureCollection, one Feature for each area found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SSADistanceResponse> ssaByDistanceUsV1SsaDistanceQueryPostWithHttpInfo(SSAByDistance ssAByDistance, String xApiKey) throws ApiException {
        okhttp3.Call localVarCall = ssaByDistanceUsV1SsaDistanceQueryPostValidateBeforeCall(ssAByDistance, xApiKey, null);
        Type localVarReturnType = new TypeToken<SSADistanceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve all special security areas located within given distance of location. (asynchronously)
     * Retrieve special security areas existing within given distance from a point. Request body parameters are: * latitude:  WGS84 latitude coordinate of your selected point, in decimal degrees * longitude:  WGS84 longitude coordinate of your selected point, in decimal degrees * distance:  distance in meters (max allowed value is 25000)
     * @param ssAByDistance  (required)
     * @param xApiKey  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A GeoJSON FeatureCollection, one Feature for each area found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ssaByDistanceUsV1SsaDistanceQueryPostAsync(SSAByDistance ssAByDistance, String xApiKey, final ApiCallback<SSADistanceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = ssaByDistanceUsV1SsaDistanceQueryPostValidateBeforeCall(ssAByDistance, xApiKey, _callback);
        Type localVarReturnType = new TypeToken<SSADistanceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ssaByPolyUsV1SsaPolygonQueryPost
     * @param ssAByPolygon  (required)
     * @param xApiKey  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A GeoJSON FeatureCollection, one Feature for each area found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ssaByPolyUsV1SsaPolygonQueryPostCall(SSAByPolygon ssAByPolygon, String xApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ssAByPolygon;

        // create path and map variables
        String localVarPath = "/us/v1/ssa/polygon-query";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiKey != null) {
            localVarHeaderParams.put("x-api-key", localVarApiClient.parameterToString(xApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ssaByPolyUsV1SsaPolygonQueryPostValidateBeforeCall(SSAByPolygon ssAByPolygon, String xApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ssAByPolygon' is set
        if (ssAByPolygon == null) {
            throw new ApiException("Missing the required parameter 'ssAByPolygon' when calling ssaByPolyUsV1SsaPolygonQueryPost(Async)");
        }

        return ssaByPolyUsV1SsaPolygonQueryPostCall(ssAByPolygon, xApiKey, _callback);

    }

    /**
     * Retrieve all special security areas located within given GeoJSON Polygon.
     * Retrieve all special security areas located within given area. Request body parameters are: * poly:  [GeoJSON Polygon](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the area. Max allowed area is 1000 km^2.
     * @param ssAByPolygon  (required)
     * @param xApiKey  (optional)
     * @return SSAPolyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A GeoJSON FeatureCollection, one Feature for each area found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public SSAPolyResponse ssaByPolyUsV1SsaPolygonQueryPost(SSAByPolygon ssAByPolygon, String xApiKey) throws ApiException {
        ApiResponse<SSAPolyResponse> localVarResp = ssaByPolyUsV1SsaPolygonQueryPostWithHttpInfo(ssAByPolygon, xApiKey);
        return localVarResp.getData();
    }

    /**
     * Retrieve all special security areas located within given GeoJSON Polygon.
     * Retrieve all special security areas located within given area. Request body parameters are: * poly:  [GeoJSON Polygon](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the area. Max allowed area is 1000 km^2.
     * @param ssAByPolygon  (required)
     * @param xApiKey  (optional)
     * @return ApiResponse&lt;SSAPolyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A GeoJSON FeatureCollection, one Feature for each area found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SSAPolyResponse> ssaByPolyUsV1SsaPolygonQueryPostWithHttpInfo(SSAByPolygon ssAByPolygon, String xApiKey) throws ApiException {
        okhttp3.Call localVarCall = ssaByPolyUsV1SsaPolygonQueryPostValidateBeforeCall(ssAByPolygon, xApiKey, null);
        Type localVarReturnType = new TypeToken<SSAPolyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve all special security areas located within given GeoJSON Polygon. (asynchronously)
     * Retrieve all special security areas located within given area. Request body parameters are: * poly:  [GeoJSON Polygon](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the area. Max allowed area is 1000 km^2.
     * @param ssAByPolygon  (required)
     * @param xApiKey  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A GeoJSON FeatureCollection, one Feature for each area found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ssaByPolyUsV1SsaPolygonQueryPostAsync(SSAByPolygon ssAByPolygon, String xApiKey, final ApiCallback<SSAPolyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = ssaByPolyUsV1SsaPolygonQueryPostValidateBeforeCall(ssAByPolygon, xApiKey, _callback);
        Type localVarReturnType = new TypeToken<SSAPolyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ssaByRouteUsV1SsaRouteQueryPost
     * @param ssAByRoute  (required)
     * @param xApiKey  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A GeoJSON FeatureCollection, one Feature for each area found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ssaByRouteUsV1SsaRouteQueryPostCall(SSAByRoute ssAByRoute, String xApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ssAByRoute;

        // create path and map variables
        String localVarPath = "/us/v1/ssa/route-query";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiKey != null) {
            localVarHeaderParams.put("x-api-key", localVarApiClient.parameterToString(xApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ssaByRouteUsV1SsaRouteQueryPostValidateBeforeCall(SSAByRoute ssAByRoute, String xApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ssAByRoute' is set
        if (ssAByRoute == null) {
            throw new ApiException("Missing the required parameter 'ssAByRoute' when calling ssaByRouteUsV1SsaRouteQueryPost(Async)");
        }

        return ssaByRouteUsV1SsaRouteQueryPostCall(ssAByRoute, xApiKey, _callback);

    }

    /**
     * Retrieve all special security areas traversed by route.
     * Retrieve all special security areas intersected by route. Request body parameters are: * route: [GeoJSON Linestring](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the route. Max allowed length is 50 km.
     * @param ssAByRoute  (required)
     * @param xApiKey  (optional)
     * @return SSARouteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A GeoJSON FeatureCollection, one Feature for each area found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public SSARouteResponse ssaByRouteUsV1SsaRouteQueryPost(SSAByRoute ssAByRoute, String xApiKey) throws ApiException {
        ApiResponse<SSARouteResponse> localVarResp = ssaByRouteUsV1SsaRouteQueryPostWithHttpInfo(ssAByRoute, xApiKey);
        return localVarResp.getData();
    }

    /**
     * Retrieve all special security areas traversed by route.
     * Retrieve all special security areas intersected by route. Request body parameters are: * route: [GeoJSON Linestring](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the route. Max allowed length is 50 km.
     * @param ssAByRoute  (required)
     * @param xApiKey  (optional)
     * @return ApiResponse&lt;SSARouteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A GeoJSON FeatureCollection, one Feature for each area found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SSARouteResponse> ssaByRouteUsV1SsaRouteQueryPostWithHttpInfo(SSAByRoute ssAByRoute, String xApiKey) throws ApiException {
        okhttp3.Call localVarCall = ssaByRouteUsV1SsaRouteQueryPostValidateBeforeCall(ssAByRoute, xApiKey, null);
        Type localVarReturnType = new TypeToken<SSARouteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve all special security areas traversed by route. (asynchronously)
     * Retrieve all special security areas intersected by route. Request body parameters are: * route: [GeoJSON Linestring](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the route. Max allowed length is 50 km.
     * @param ssAByRoute  (required)
     * @param xApiKey  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A GeoJSON FeatureCollection, one Feature for each area found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ssaByRouteUsV1SsaRouteQueryPostAsync(SSAByRoute ssAByRoute, String xApiKey, final ApiCallback<SSARouteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = ssaByRouteUsV1SsaRouteQueryPostValidateBeforeCall(ssAByRoute, xApiKey, _callback);
        Type localVarReturnType = new TypeToken<SSARouteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
