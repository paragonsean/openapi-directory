/*
 * DFlight API
 * [DFlight API](https://ljaero.com/solutions/dflight/) supplies the up-to-date information needed for compliance with UAV preflight assessment requirements. Separate endpoints are available for each of the following information categories: - Airspace - Weather - Temporary Flight Restrictions - Special Security Areas - Restricted Public Venues - Surface Obstacles - Aerodromes - UAS Operating Areas  You can define your geographic area of interest in one of three convenient ways: - Providing a latitude/longitude point and distance around that point - Providing a GeoJSON LineString defining your route - Providing an arbitrary GeoJSON Polygon defining your area of interest
 *
 * The version of the OpenAPI document: V 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.HTTPValidationError;
import org.openapitools.client.model.VenueDistanceResponse;
import org.openapitools.client.model.VenuePolyResponse;
import org.openapitools.client.model.VenueRouteResponse;
import org.openapitools.client.model.VenuesByDistance;
import org.openapitools.client.model.VenuesByPolygon;
import org.openapitools.client.model.VenuesByRoute;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RestrictedPublicVenuesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RestrictedPublicVenuesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RestrictedPublicVenuesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for venByDistanceUsV1VenuesDistanceQueryPost
     * @param venuesByDistance  (required)
     * @param xApiKey  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A GeoJSON FeatureCollection, one Feature for each venue found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call venByDistanceUsV1VenuesDistanceQueryPostCall(VenuesByDistance venuesByDistance, String xApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = venuesByDistance;

        // create path and map variables
        String localVarPath = "/us/v1/venues/distance-query";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiKey != null) {
            localVarHeaderParams.put("x-api-key", localVarApiClient.parameterToString(xApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call venByDistanceUsV1VenuesDistanceQueryPostValidateBeforeCall(VenuesByDistance venuesByDistance, String xApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'venuesByDistance' is set
        if (venuesByDistance == null) {
            throw new ApiException("Missing the required parameter 'venuesByDistance' when calling venByDistanceUsV1VenuesDistanceQueryPost(Async)");
        }

        return venByDistanceUsV1VenuesDistanceQueryPostCall(venuesByDistance, xApiKey, _callback);

    }

    /**
     * Retrieve all restricted public venues located within given distance of location.
     * Retrieve venues existing within given distance from a point. Request body parameters are: * latitude:  WGS84 latitude coordinate of your selected point, in decimal degrees * longitude:  WGS84 longitude coordinate of your selected point, in decimal degrees * distance:  distance in meters (max allowed value is 25000)
     * @param venuesByDistance  (required)
     * @param xApiKey  (optional)
     * @return VenueDistanceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A GeoJSON FeatureCollection, one Feature for each venue found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public VenueDistanceResponse venByDistanceUsV1VenuesDistanceQueryPost(VenuesByDistance venuesByDistance, String xApiKey) throws ApiException {
        ApiResponse<VenueDistanceResponse> localVarResp = venByDistanceUsV1VenuesDistanceQueryPostWithHttpInfo(venuesByDistance, xApiKey);
        return localVarResp.getData();
    }

    /**
     * Retrieve all restricted public venues located within given distance of location.
     * Retrieve venues existing within given distance from a point. Request body parameters are: * latitude:  WGS84 latitude coordinate of your selected point, in decimal degrees * longitude:  WGS84 longitude coordinate of your selected point, in decimal degrees * distance:  distance in meters (max allowed value is 25000)
     * @param venuesByDistance  (required)
     * @param xApiKey  (optional)
     * @return ApiResponse&lt;VenueDistanceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A GeoJSON FeatureCollection, one Feature for each venue found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VenueDistanceResponse> venByDistanceUsV1VenuesDistanceQueryPostWithHttpInfo(VenuesByDistance venuesByDistance, String xApiKey) throws ApiException {
        okhttp3.Call localVarCall = venByDistanceUsV1VenuesDistanceQueryPostValidateBeforeCall(venuesByDistance, xApiKey, null);
        Type localVarReturnType = new TypeToken<VenueDistanceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve all restricted public venues located within given distance of location. (asynchronously)
     * Retrieve venues existing within given distance from a point. Request body parameters are: * latitude:  WGS84 latitude coordinate of your selected point, in decimal degrees * longitude:  WGS84 longitude coordinate of your selected point, in decimal degrees * distance:  distance in meters (max allowed value is 25000)
     * @param venuesByDistance  (required)
     * @param xApiKey  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A GeoJSON FeatureCollection, one Feature for each venue found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call venByDistanceUsV1VenuesDistanceQueryPostAsync(VenuesByDistance venuesByDistance, String xApiKey, final ApiCallback<VenueDistanceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = venByDistanceUsV1VenuesDistanceQueryPostValidateBeforeCall(venuesByDistance, xApiKey, _callback);
        Type localVarReturnType = new TypeToken<VenueDistanceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for venByPolyUsV1VenuesPolygonQueryPost
     * @param venuesByPolygon  (required)
     * @param xApiKey  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A GeoJSON FeatureCollection, one Feature for each venue found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call venByPolyUsV1VenuesPolygonQueryPostCall(VenuesByPolygon venuesByPolygon, String xApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = venuesByPolygon;

        // create path and map variables
        String localVarPath = "/us/v1/venues/polygon-query";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiKey != null) {
            localVarHeaderParams.put("x-api-key", localVarApiClient.parameterToString(xApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call venByPolyUsV1VenuesPolygonQueryPostValidateBeforeCall(VenuesByPolygon venuesByPolygon, String xApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'venuesByPolygon' is set
        if (venuesByPolygon == null) {
            throw new ApiException("Missing the required parameter 'venuesByPolygon' when calling venByPolyUsV1VenuesPolygonQueryPost(Async)");
        }

        return venByPolyUsV1VenuesPolygonQueryPostCall(venuesByPolygon, xApiKey, _callback);

    }

    /**
     * Retrieve all restricted public venues located within given GeoJSON Polygon.
     * Retrieve all restricted public venues located within given area. Request body parameters are: * poly:  [GeoJSON Polygon](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the area. Max allowed area is 1000 km^2.
     * @param venuesByPolygon  (required)
     * @param xApiKey  (optional)
     * @return VenuePolyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A GeoJSON FeatureCollection, one Feature for each venue found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public VenuePolyResponse venByPolyUsV1VenuesPolygonQueryPost(VenuesByPolygon venuesByPolygon, String xApiKey) throws ApiException {
        ApiResponse<VenuePolyResponse> localVarResp = venByPolyUsV1VenuesPolygonQueryPostWithHttpInfo(venuesByPolygon, xApiKey);
        return localVarResp.getData();
    }

    /**
     * Retrieve all restricted public venues located within given GeoJSON Polygon.
     * Retrieve all restricted public venues located within given area. Request body parameters are: * poly:  [GeoJSON Polygon](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the area. Max allowed area is 1000 km^2.
     * @param venuesByPolygon  (required)
     * @param xApiKey  (optional)
     * @return ApiResponse&lt;VenuePolyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A GeoJSON FeatureCollection, one Feature for each venue found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VenuePolyResponse> venByPolyUsV1VenuesPolygonQueryPostWithHttpInfo(VenuesByPolygon venuesByPolygon, String xApiKey) throws ApiException {
        okhttp3.Call localVarCall = venByPolyUsV1VenuesPolygonQueryPostValidateBeforeCall(venuesByPolygon, xApiKey, null);
        Type localVarReturnType = new TypeToken<VenuePolyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve all restricted public venues located within given GeoJSON Polygon. (asynchronously)
     * Retrieve all restricted public venues located within given area. Request body parameters are: * poly:  [GeoJSON Polygon](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the area. Max allowed area is 1000 km^2.
     * @param venuesByPolygon  (required)
     * @param xApiKey  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A GeoJSON FeatureCollection, one Feature for each venue found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call venByPolyUsV1VenuesPolygonQueryPostAsync(VenuesByPolygon venuesByPolygon, String xApiKey, final ApiCallback<VenuePolyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = venByPolyUsV1VenuesPolygonQueryPostValidateBeforeCall(venuesByPolygon, xApiKey, _callback);
        Type localVarReturnType = new TypeToken<VenuePolyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for venByRouteUsV1VenuesRouteQueryPost
     * @param venuesByRoute  (required)
     * @param xApiKey  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A GeoJSON FeatureCollection, one Feature for each venue found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call venByRouteUsV1VenuesRouteQueryPostCall(VenuesByRoute venuesByRoute, String xApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = venuesByRoute;

        // create path and map variables
        String localVarPath = "/us/v1/venues/route-query";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiKey != null) {
            localVarHeaderParams.put("x-api-key", localVarApiClient.parameterToString(xApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call venByRouteUsV1VenuesRouteQueryPostValidateBeforeCall(VenuesByRoute venuesByRoute, String xApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'venuesByRoute' is set
        if (venuesByRoute == null) {
            throw new ApiException("Missing the required parameter 'venuesByRoute' when calling venByRouteUsV1VenuesRouteQueryPost(Async)");
        }

        return venByRouteUsV1VenuesRouteQueryPostCall(venuesByRoute, xApiKey, _callback);

    }

    /**
     * Retrieve all restricted public venues traversed by route.
     * Retrieve all restricted public venues intersected by route. Request body parameters are: * route: [GeoJSON Linestring](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the route. Max allowed length is 50 km.
     * @param venuesByRoute  (required)
     * @param xApiKey  (optional)
     * @return VenueRouteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A GeoJSON FeatureCollection, one Feature for each venue found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public VenueRouteResponse venByRouteUsV1VenuesRouteQueryPost(VenuesByRoute venuesByRoute, String xApiKey) throws ApiException {
        ApiResponse<VenueRouteResponse> localVarResp = venByRouteUsV1VenuesRouteQueryPostWithHttpInfo(venuesByRoute, xApiKey);
        return localVarResp.getData();
    }

    /**
     * Retrieve all restricted public venues traversed by route.
     * Retrieve all restricted public venues intersected by route. Request body parameters are: * route: [GeoJSON Linestring](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the route. Max allowed length is 50 km.
     * @param venuesByRoute  (required)
     * @param xApiKey  (optional)
     * @return ApiResponse&lt;VenueRouteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A GeoJSON FeatureCollection, one Feature for each venue found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VenueRouteResponse> venByRouteUsV1VenuesRouteQueryPostWithHttpInfo(VenuesByRoute venuesByRoute, String xApiKey) throws ApiException {
        okhttp3.Call localVarCall = venByRouteUsV1VenuesRouteQueryPostValidateBeforeCall(venuesByRoute, xApiKey, null);
        Type localVarReturnType = new TypeToken<VenueRouteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve all restricted public venues traversed by route. (asynchronously)
     * Retrieve all restricted public venues intersected by route. Request body parameters are: * route: [GeoJSON Linestring](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the route. Max allowed length is 50 km.
     * @param venuesByRoute  (required)
     * @param xApiKey  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A GeoJSON FeatureCollection, one Feature for each venue found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call venByRouteUsV1VenuesRouteQueryPostAsync(VenuesByRoute venuesByRoute, String xApiKey, final ApiCallback<VenueRouteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = venByRouteUsV1VenuesRouteQueryPostValidateBeforeCall(venuesByRoute, xApiKey, _callback);
        Type localVarReturnType = new TypeToken<VenueRouteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
