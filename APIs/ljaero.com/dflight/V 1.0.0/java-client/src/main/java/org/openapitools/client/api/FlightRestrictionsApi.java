/*
 * DFlight API
 * [DFlight API](https://ljaero.com/solutions/dflight/) supplies the up-to-date information needed for compliance with UAV preflight assessment requirements. Separate endpoints are available for each of the following information categories: - Airspace - Weather - Temporary Flight Restrictions - Special Security Areas - Restricted Public Venues - Surface Obstacles - Aerodromes - UAS Operating Areas  You can define your geographic area of interest in one of three convenient ways: - Providing a latitude/longitude point and distance around that point - Providing a GeoJSON LineString defining your route - Providing an arbitrary GeoJSON Polygon defining your area of interest
 *
 * The version of the OpenAPI document: V 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.HTTPValidationError;
import org.openapitools.client.model.NOTAMsByDistance;
import org.openapitools.client.model.NOTAMsByPolygon;
import org.openapitools.client.model.NOTAMsByRoute;
import org.openapitools.client.model.NOTAMsDistanceResponse;
import org.openapitools.client.model.NOTAMsPolyResponse;
import org.openapitools.client.model.NOTAMsRouteResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FlightRestrictionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FlightRestrictionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FlightRestrictionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for tfrByDistanceUsV1RestrictionsDistanceQueryPost
     * @param noTAMsByDistance  (required)
     * @param xApiKey  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A GeoJSON FeatureCollection, one Feature for each restriction. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tfrByDistanceUsV1RestrictionsDistanceQueryPostCall(NOTAMsByDistance noTAMsByDistance, String xApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = noTAMsByDistance;

        // create path and map variables
        String localVarPath = "/us/v1/restrictions/distance-query";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiKey != null) {
            localVarHeaderParams.put("x-api-key", localVarApiClient.parameterToString(xApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tfrByDistanceUsV1RestrictionsDistanceQueryPostValidateBeforeCall(NOTAMsByDistance noTAMsByDistance, String xApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'noTAMsByDistance' is set
        if (noTAMsByDistance == null) {
            throw new ApiException("Missing the required parameter 'noTAMsByDistance' when calling tfrByDistanceUsV1RestrictionsDistanceQueryPost(Async)");
        }

        return tfrByDistanceUsV1RestrictionsDistanceQueryPostCall(noTAMsByDistance, xApiKey, _callback);

    }

    /**
     * Retrieve flight restrictions applicable within given distance of location.
     * Retrieve Flight Restrictions applicable within given distance of a point. Request body parameters are: * latitude:  WGS84 latitude coordinate of your selected point, in decimal degrees * longitude:  WGS84 longitude coordinate of your selected point, in decimal degrees * distance:  distance in meters (max allowed value is 25000)
     * @param noTAMsByDistance  (required)
     * @param xApiKey  (optional)
     * @return NOTAMsDistanceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A GeoJSON FeatureCollection, one Feature for each restriction. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public NOTAMsDistanceResponse tfrByDistanceUsV1RestrictionsDistanceQueryPost(NOTAMsByDistance noTAMsByDistance, String xApiKey) throws ApiException {
        ApiResponse<NOTAMsDistanceResponse> localVarResp = tfrByDistanceUsV1RestrictionsDistanceQueryPostWithHttpInfo(noTAMsByDistance, xApiKey);
        return localVarResp.getData();
    }

    /**
     * Retrieve flight restrictions applicable within given distance of location.
     * Retrieve Flight Restrictions applicable within given distance of a point. Request body parameters are: * latitude:  WGS84 latitude coordinate of your selected point, in decimal degrees * longitude:  WGS84 longitude coordinate of your selected point, in decimal degrees * distance:  distance in meters (max allowed value is 25000)
     * @param noTAMsByDistance  (required)
     * @param xApiKey  (optional)
     * @return ApiResponse&lt;NOTAMsDistanceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A GeoJSON FeatureCollection, one Feature for each restriction. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NOTAMsDistanceResponse> tfrByDistanceUsV1RestrictionsDistanceQueryPostWithHttpInfo(NOTAMsByDistance noTAMsByDistance, String xApiKey) throws ApiException {
        okhttp3.Call localVarCall = tfrByDistanceUsV1RestrictionsDistanceQueryPostValidateBeforeCall(noTAMsByDistance, xApiKey, null);
        Type localVarReturnType = new TypeToken<NOTAMsDistanceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve flight restrictions applicable within given distance of location. (asynchronously)
     * Retrieve Flight Restrictions applicable within given distance of a point. Request body parameters are: * latitude:  WGS84 latitude coordinate of your selected point, in decimal degrees * longitude:  WGS84 longitude coordinate of your selected point, in decimal degrees * distance:  distance in meters (max allowed value is 25000)
     * @param noTAMsByDistance  (required)
     * @param xApiKey  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A GeoJSON FeatureCollection, one Feature for each restriction. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tfrByDistanceUsV1RestrictionsDistanceQueryPostAsync(NOTAMsByDistance noTAMsByDistance, String xApiKey, final ApiCallback<NOTAMsDistanceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = tfrByDistanceUsV1RestrictionsDistanceQueryPostValidateBeforeCall(noTAMsByDistance, xApiKey, _callback);
        Type localVarReturnType = new TypeToken<NOTAMsDistanceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tfrByPolyUsV1RestrictionsPolygonQueryPost
     * @param noTAMsByPolygon  (required)
     * @param xApiKey  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A GeoJSON FeatureCollection, one Feature for each restriction. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tfrByPolyUsV1RestrictionsPolygonQueryPostCall(NOTAMsByPolygon noTAMsByPolygon, String xApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = noTAMsByPolygon;

        // create path and map variables
        String localVarPath = "/us/v1/restrictions/polygon-query";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiKey != null) {
            localVarHeaderParams.put("x-api-key", localVarApiClient.parameterToString(xApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tfrByPolyUsV1RestrictionsPolygonQueryPostValidateBeforeCall(NOTAMsByPolygon noTAMsByPolygon, String xApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'noTAMsByPolygon' is set
        if (noTAMsByPolygon == null) {
            throw new ApiException("Missing the required parameter 'noTAMsByPolygon' when calling tfrByPolyUsV1RestrictionsPolygonQueryPost(Async)");
        }

        return tfrByPolyUsV1RestrictionsPolygonQueryPostCall(noTAMsByPolygon, xApiKey, _callback);

    }

    /**
     * Retrieve flight restrictions applicable within given area.
     * Retrieve Flight Restrictions located within given area. Request body parameters are: * poly:  [GeoJSON Polygon](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the area. Max allowed area is 1000 km^2.
     * @param noTAMsByPolygon  (required)
     * @param xApiKey  (optional)
     * @return NOTAMsPolyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A GeoJSON FeatureCollection, one Feature for each restriction. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public NOTAMsPolyResponse tfrByPolyUsV1RestrictionsPolygonQueryPost(NOTAMsByPolygon noTAMsByPolygon, String xApiKey) throws ApiException {
        ApiResponse<NOTAMsPolyResponse> localVarResp = tfrByPolyUsV1RestrictionsPolygonQueryPostWithHttpInfo(noTAMsByPolygon, xApiKey);
        return localVarResp.getData();
    }

    /**
     * Retrieve flight restrictions applicable within given area.
     * Retrieve Flight Restrictions located within given area. Request body parameters are: * poly:  [GeoJSON Polygon](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the area. Max allowed area is 1000 km^2.
     * @param noTAMsByPolygon  (required)
     * @param xApiKey  (optional)
     * @return ApiResponse&lt;NOTAMsPolyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A GeoJSON FeatureCollection, one Feature for each restriction. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NOTAMsPolyResponse> tfrByPolyUsV1RestrictionsPolygonQueryPostWithHttpInfo(NOTAMsByPolygon noTAMsByPolygon, String xApiKey) throws ApiException {
        okhttp3.Call localVarCall = tfrByPolyUsV1RestrictionsPolygonQueryPostValidateBeforeCall(noTAMsByPolygon, xApiKey, null);
        Type localVarReturnType = new TypeToken<NOTAMsPolyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve flight restrictions applicable within given area. (asynchronously)
     * Retrieve Flight Restrictions located within given area. Request body parameters are: * poly:  [GeoJSON Polygon](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the area. Max allowed area is 1000 km^2.
     * @param noTAMsByPolygon  (required)
     * @param xApiKey  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A GeoJSON FeatureCollection, one Feature for each restriction. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tfrByPolyUsV1RestrictionsPolygonQueryPostAsync(NOTAMsByPolygon noTAMsByPolygon, String xApiKey, final ApiCallback<NOTAMsPolyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = tfrByPolyUsV1RestrictionsPolygonQueryPostValidateBeforeCall(noTAMsByPolygon, xApiKey, _callback);
        Type localVarReturnType = new TypeToken<NOTAMsPolyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tfrByRouteUsV1RestrictionsRouteQueryPost
     * @param noTAMsByRoute  (required)
     * @param xApiKey  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A GeoJSON FeatureCollection, one Feature for each restriction. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tfrByRouteUsV1RestrictionsRouteQueryPostCall(NOTAMsByRoute noTAMsByRoute, String xApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = noTAMsByRoute;

        // create path and map variables
        String localVarPath = "/us/v1/restrictions/route-query";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiKey != null) {
            localVarHeaderParams.put("x-api-key", localVarApiClient.parameterToString(xApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tfrByRouteUsV1RestrictionsRouteQueryPostValidateBeforeCall(NOTAMsByRoute noTAMsByRoute, String xApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'noTAMsByRoute' is set
        if (noTAMsByRoute == null) {
            throw new ApiException("Missing the required parameter 'noTAMsByRoute' when calling tfrByRouteUsV1RestrictionsRouteQueryPost(Async)");
        }

        return tfrByRouteUsV1RestrictionsRouteQueryPostCall(noTAMsByRoute, xApiKey, _callback);

    }

    /**
     * Retrieve flight restrictions applicable along route.
     * Retrieve Flight Restrictions applicable along your route. Request body parameters are: * route:  [GeoJSON Linestring](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the route. Max allowed length is 50 km.
     * @param noTAMsByRoute  (required)
     * @param xApiKey  (optional)
     * @return NOTAMsRouteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A GeoJSON FeatureCollection, one Feature for each restriction. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public NOTAMsRouteResponse tfrByRouteUsV1RestrictionsRouteQueryPost(NOTAMsByRoute noTAMsByRoute, String xApiKey) throws ApiException {
        ApiResponse<NOTAMsRouteResponse> localVarResp = tfrByRouteUsV1RestrictionsRouteQueryPostWithHttpInfo(noTAMsByRoute, xApiKey);
        return localVarResp.getData();
    }

    /**
     * Retrieve flight restrictions applicable along route.
     * Retrieve Flight Restrictions applicable along your route. Request body parameters are: * route:  [GeoJSON Linestring](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the route. Max allowed length is 50 km.
     * @param noTAMsByRoute  (required)
     * @param xApiKey  (optional)
     * @return ApiResponse&lt;NOTAMsRouteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A GeoJSON FeatureCollection, one Feature for each restriction. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NOTAMsRouteResponse> tfrByRouteUsV1RestrictionsRouteQueryPostWithHttpInfo(NOTAMsByRoute noTAMsByRoute, String xApiKey) throws ApiException {
        okhttp3.Call localVarCall = tfrByRouteUsV1RestrictionsRouteQueryPostValidateBeforeCall(noTAMsByRoute, xApiKey, null);
        Type localVarReturnType = new TypeToken<NOTAMsRouteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve flight restrictions applicable along route. (asynchronously)
     * Retrieve Flight Restrictions applicable along your route. Request body parameters are: * route:  [GeoJSON Linestring](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the route. Max allowed length is 50 km.
     * @param noTAMsByRoute  (required)
     * @param xApiKey  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A GeoJSON FeatureCollection, one Feature for each restriction. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tfrByRouteUsV1RestrictionsRouteQueryPostAsync(NOTAMsByRoute noTAMsByRoute, String xApiKey, final ApiCallback<NOTAMsRouteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = tfrByRouteUsV1RestrictionsRouteQueryPostValidateBeforeCall(noTAMsByRoute, xApiKey, _callback);
        Type localVarReturnType = new TypeToken<NOTAMsRouteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
