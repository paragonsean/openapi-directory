/*
 * DFlight API
 * [DFlight API](https://ljaero.com/solutions/dflight/) supplies the up-to-date information needed for compliance with UAV preflight assessment requirements. Separate endpoints are available for each of the following information categories: - Airspace - Weather - Temporary Flight Restrictions - Special Security Areas - Restricted Public Venues - Surface Obstacles - Aerodromes - UAS Operating Areas  You can define your geographic area of interest in one of three convenient ways: - Providing a latitude/longitude point and distance around that point - Providing a GeoJSON LineString defining your route - Providing an arbitrary GeoJSON Polygon defining your area of interest
 *
 * The version of the OpenAPI document: V 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Distance;
import org.openapitools.client.model.Latitude;
import org.openapitools.client.model.Longitude;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Geometry-defining arguments for point/distance requests
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:21:37.911855-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WxByDistance {
  public static final String SERIALIZED_NAME_DISTANCE = "distance";
  @SerializedName(SERIALIZED_NAME_DISTANCE)
  private Distance distance;

  public static final String SERIALIZED_NAME_HOURS = "hours";
  @SerializedName(SERIALIZED_NAME_HOURS)
  private Integer hours;

  public static final String SERIALIZED_NAME_LATITUDE = "latitude";
  @SerializedName(SERIALIZED_NAME_LATITUDE)
  private Latitude latitude;

  public static final String SERIALIZED_NAME_LONGITUDE = "longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  private Longitude longitude;

  public static final String SERIALIZED_NAME_WXTYPES = "wxtypes";
  @SerializedName(SERIALIZED_NAME_WXTYPES)
  private List<String> wxtypes = new ArrayList<>();

  public WxByDistance() {
  }

  public WxByDistance distance(Distance distance) {
    this.distance = distance;
    return this;
  }

  /**
   * Get distance
   * @return distance
   */
  @javax.annotation.Nonnull
  public Distance getDistance() {
    return distance;
  }

  public void setDistance(Distance distance) {
    this.distance = distance;
  }


  public WxByDistance hours(Integer hours) {
    this.hours = hours;
    return this;
  }

  /**
   * Get hours
   * @return hours
   */
  @javax.annotation.Nonnull
  public Integer getHours() {
    return hours;
  }

  public void setHours(Integer hours) {
    this.hours = hours;
  }


  public WxByDistance latitude(Latitude latitude) {
    this.latitude = latitude;
    return this;
  }

  /**
   * Get latitude
   * @return latitude
   */
  @javax.annotation.Nonnull
  public Latitude getLatitude() {
    return latitude;
  }

  public void setLatitude(Latitude latitude) {
    this.latitude = latitude;
  }


  public WxByDistance longitude(Longitude longitude) {
    this.longitude = longitude;
    return this;
  }

  /**
   * Get longitude
   * @return longitude
   */
  @javax.annotation.Nonnull
  public Longitude getLongitude() {
    return longitude;
  }

  public void setLongitude(Longitude longitude) {
    this.longitude = longitude;
  }


  public WxByDistance wxtypes(List<String> wxtypes) {
    this.wxtypes = wxtypes;
    return this;
  }

  public WxByDistance addWxtypesItem(String wxtypesItem) {
    if (this.wxtypes == null) {
      this.wxtypes = new ArrayList<>();
    }
    this.wxtypes.add(wxtypesItem);
    return this;
  }

  /**
   * Get wxtypes
   * @return wxtypes
   */
  @javax.annotation.Nonnull
  public List<String> getWxtypes() {
    return wxtypes;
  }

  public void setWxtypes(List<String> wxtypes) {
    this.wxtypes = wxtypes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WxByDistance wxByDistance = (WxByDistance) o;
    return Objects.equals(this.distance, wxByDistance.distance) &&
        Objects.equals(this.hours, wxByDistance.hours) &&
        Objects.equals(this.latitude, wxByDistance.latitude) &&
        Objects.equals(this.longitude, wxByDistance.longitude) &&
        Objects.equals(this.wxtypes, wxByDistance.wxtypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(distance, hours, latitude, longitude, wxtypes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WxByDistance {\n");
    sb.append("    distance: ").append(toIndentedString(distance)).append("\n");
    sb.append("    hours: ").append(toIndentedString(hours)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    wxtypes: ").append(toIndentedString(wxtypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("distance");
    openapiFields.add("hours");
    openapiFields.add("latitude");
    openapiFields.add("longitude");
    openapiFields.add("wxtypes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("distance");
    openapiRequiredFields.add("hours");
    openapiRequiredFields.add("latitude");
    openapiRequiredFields.add("longitude");
    openapiRequiredFields.add("wxtypes");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WxByDistance
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WxByDistance.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WxByDistance is not found in the empty JSON string", WxByDistance.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WxByDistance.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WxByDistance` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WxByDistance.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `distance`
      Distance.validateJsonElement(jsonObj.get("distance"));
      // validate the required field `latitude`
      Latitude.validateJsonElement(jsonObj.get("latitude"));
      // validate the required field `longitude`
      Longitude.validateJsonElement(jsonObj.get("longitude"));
      // ensure the required json array is present
      if (jsonObj.get("wxtypes") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("wxtypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `wxtypes` to be an array in the JSON string but got `%s`", jsonObj.get("wxtypes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WxByDistance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WxByDistance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WxByDistance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WxByDistance.class));

       return (TypeAdapter<T>) new TypeAdapter<WxByDistance>() {
           @Override
           public void write(JsonWriter out, WxByDistance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WxByDistance read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WxByDistance given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WxByDistance
   * @throws IOException if the JSON string is invalid with respect to WxByDistance
   */
  public static WxByDistance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WxByDistance.class);
  }

  /**
   * Convert an instance of WxByDistance to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

