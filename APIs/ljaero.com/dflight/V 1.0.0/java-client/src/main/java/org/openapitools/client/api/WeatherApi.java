/*
 * DFlight API
 * [DFlight API](https://ljaero.com/solutions/dflight/) supplies the up-to-date information needed for compliance with UAV preflight assessment requirements. Separate endpoints are available for each of the following information categories: - Airspace - Weather - Temporary Flight Restrictions - Special Security Areas - Restricted Public Venues - Surface Obstacles - Aerodromes - UAS Operating Areas  You can define your geographic area of interest in one of three convenient ways: - Providing a latitude/longitude point and distance around that point - Providing a GeoJSON LineString defining your route - Providing an arbitrary GeoJSON Polygon defining your area of interest
 *
 * The version of the OpenAPI document: V 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.HTTPValidationError;
import org.openapitools.client.model.WxByDistance;
import org.openapitools.client.model.WxByPolygon;
import org.openapitools.client.model.WxByRoute;
import org.openapitools.client.model.WxDistanceResponse;
import org.openapitools.client.model.WxPolyResponse;
import org.openapitools.client.model.WxRouteResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WeatherApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WeatherApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WeatherApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for wxByDistanceUsV1WxForecastDistanceQueryPost
     * @param wxByDistance  (required)
     * @param xApiKey  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A GeoJSON FeatureCollection with one Feature for each forecast location found within requested area. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wxByDistanceUsV1WxForecastDistanceQueryPostCall(WxByDistance wxByDistance, String xApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wxByDistance;

        // create path and map variables
        String localVarPath = "/us/v1/wx-forecast/distance-query";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiKey != null) {
            localVarHeaderParams.put("x-api-key", localVarApiClient.parameterToString(xApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call wxByDistanceUsV1WxForecastDistanceQueryPostValidateBeforeCall(WxByDistance wxByDistance, String xApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'wxByDistance' is set
        if (wxByDistance == null) {
            throw new ApiException("Missing the required parameter 'wxByDistance' when calling wxByDistanceUsV1WxForecastDistanceQueryPost(Async)");
        }

        return wxByDistanceUsV1WxForecastDistanceQueryPostCall(wxByDistance, xApiKey, _callback);

    }

    /**
     * Retrieve forecast values within given distance of location for all requested weather elements and time periods.
     * Retrieve forecast values for selected weather elements and time period. Request body parameters are: * latitude:  WGS84 latitude coordinate of your selected point, in decimal degrees * longitude:  WGS84 longitude coordinate of your selected point, in decimal degrees * distance:  distance in meters (max allowed value is 25000) * wxtypes:  list of one or more weather forecast elements you wish to retrieve. Allowed values are \&quot;CIG\&quot;, \&quot;DEWPT\&quot;, \&quot;SKY\&quot;, \&quot;TEMP\&quot;, \&quot;VIS\&quot;, \&quot;WINDDIR\&quot;, \&quot;WINDGUST\&quot;, \&quot;WINDSPEED\&quot;. * hours:  number of hourly forecasts to return (1-24). For current hour only you should enter value of 1. To also retrieve values for each of the next n hours, enter n.   The response will consist of a GeoJSON FeatureCollection with one Feature for each forecast location found within requested area, properties of which will include an ordered list of forecast values for each requested weather element, for each requested hour. Units for each element are as follows: * CIG: meters AGL * DEWPT: degrees Celsius * SKY: % cloud cover * TEMP: degrees Celsius * VIS: meters * WINDDIR: degrees true * WINDGUST: meters/sec * WINDSPEED: meters/sec
     * @param wxByDistance  (required)
     * @param xApiKey  (optional)
     * @return WxDistanceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A GeoJSON FeatureCollection with one Feature for each forecast location found within requested area. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public WxDistanceResponse wxByDistanceUsV1WxForecastDistanceQueryPost(WxByDistance wxByDistance, String xApiKey) throws ApiException {
        ApiResponse<WxDistanceResponse> localVarResp = wxByDistanceUsV1WxForecastDistanceQueryPostWithHttpInfo(wxByDistance, xApiKey);
        return localVarResp.getData();
    }

    /**
     * Retrieve forecast values within given distance of location for all requested weather elements and time periods.
     * Retrieve forecast values for selected weather elements and time period. Request body parameters are: * latitude:  WGS84 latitude coordinate of your selected point, in decimal degrees * longitude:  WGS84 longitude coordinate of your selected point, in decimal degrees * distance:  distance in meters (max allowed value is 25000) * wxtypes:  list of one or more weather forecast elements you wish to retrieve. Allowed values are \&quot;CIG\&quot;, \&quot;DEWPT\&quot;, \&quot;SKY\&quot;, \&quot;TEMP\&quot;, \&quot;VIS\&quot;, \&quot;WINDDIR\&quot;, \&quot;WINDGUST\&quot;, \&quot;WINDSPEED\&quot;. * hours:  number of hourly forecasts to return (1-24). For current hour only you should enter value of 1. To also retrieve values for each of the next n hours, enter n.   The response will consist of a GeoJSON FeatureCollection with one Feature for each forecast location found within requested area, properties of which will include an ordered list of forecast values for each requested weather element, for each requested hour. Units for each element are as follows: * CIG: meters AGL * DEWPT: degrees Celsius * SKY: % cloud cover * TEMP: degrees Celsius * VIS: meters * WINDDIR: degrees true * WINDGUST: meters/sec * WINDSPEED: meters/sec
     * @param wxByDistance  (required)
     * @param xApiKey  (optional)
     * @return ApiResponse&lt;WxDistanceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A GeoJSON FeatureCollection with one Feature for each forecast location found within requested area. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WxDistanceResponse> wxByDistanceUsV1WxForecastDistanceQueryPostWithHttpInfo(WxByDistance wxByDistance, String xApiKey) throws ApiException {
        okhttp3.Call localVarCall = wxByDistanceUsV1WxForecastDistanceQueryPostValidateBeforeCall(wxByDistance, xApiKey, null);
        Type localVarReturnType = new TypeToken<WxDistanceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve forecast values within given distance of location for all requested weather elements and time periods. (asynchronously)
     * Retrieve forecast values for selected weather elements and time period. Request body parameters are: * latitude:  WGS84 latitude coordinate of your selected point, in decimal degrees * longitude:  WGS84 longitude coordinate of your selected point, in decimal degrees * distance:  distance in meters (max allowed value is 25000) * wxtypes:  list of one or more weather forecast elements you wish to retrieve. Allowed values are \&quot;CIG\&quot;, \&quot;DEWPT\&quot;, \&quot;SKY\&quot;, \&quot;TEMP\&quot;, \&quot;VIS\&quot;, \&quot;WINDDIR\&quot;, \&quot;WINDGUST\&quot;, \&quot;WINDSPEED\&quot;. * hours:  number of hourly forecasts to return (1-24). For current hour only you should enter value of 1. To also retrieve values for each of the next n hours, enter n.   The response will consist of a GeoJSON FeatureCollection with one Feature for each forecast location found within requested area, properties of which will include an ordered list of forecast values for each requested weather element, for each requested hour. Units for each element are as follows: * CIG: meters AGL * DEWPT: degrees Celsius * SKY: % cloud cover * TEMP: degrees Celsius * VIS: meters * WINDDIR: degrees true * WINDGUST: meters/sec * WINDSPEED: meters/sec
     * @param wxByDistance  (required)
     * @param xApiKey  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A GeoJSON FeatureCollection with one Feature for each forecast location found within requested area. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wxByDistanceUsV1WxForecastDistanceQueryPostAsync(WxByDistance wxByDistance, String xApiKey, final ApiCallback<WxDistanceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = wxByDistanceUsV1WxForecastDistanceQueryPostValidateBeforeCall(wxByDistance, xApiKey, _callback);
        Type localVarReturnType = new TypeToken<WxDistanceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for wxByPolyUsV1WxForecastPolygonQueryPost
     * @param wxByPolygon  (required)
     * @param xApiKey  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A GeoJSON FeatureCollection with one Feature for each forecast location found within requested area. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wxByPolyUsV1WxForecastPolygonQueryPostCall(WxByPolygon wxByPolygon, String xApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wxByPolygon;

        // create path and map variables
        String localVarPath = "/us/v1/wx-forecast/polygon-query";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiKey != null) {
            localVarHeaderParams.put("x-api-key", localVarApiClient.parameterToString(xApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call wxByPolyUsV1WxForecastPolygonQueryPostValidateBeforeCall(WxByPolygon wxByPolygon, String xApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'wxByPolygon' is set
        if (wxByPolygon == null) {
            throw new ApiException("Missing the required parameter 'wxByPolygon' when calling wxByPolyUsV1WxForecastPolygonQueryPost(Async)");
        }

        return wxByPolyUsV1WxForecastPolygonQueryPostCall(wxByPolygon, xApiKey, _callback);

    }

    /**
     * Retrieve forecast values within given GeoJSON polygon for all requested weather elements and time periods.
     * Retrieve forecast values located within given area for requested weather elements and time period. Request body parameters are: * poly:  [GeoJSON Polygon](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the area. Max allowed area is 1000 km^2. * wxtypes:  list of one or more weather forecast elements you wish to retrieve. Allowed values are \&quot;CIG\&quot;, \&quot;DEWPT\&quot;, \&quot;SKY\&quot;, \&quot;TEMP\&quot;, \&quot;VIS\&quot;, \&quot;WINDDIR\&quot;, \&quot;WINDGUST\&quot;, \&quot;WINDSPEED\&quot;. * hours:  number of hourly forecasts to return (1-24). For current hour only you should enter value of 1. To also retrieve values for each of the next n hours, enter n.   The response will consist of a GeoJSON FeatureCollection with one Feature for each forecast location found within requested area, properties of which will include an ordered list of forecast values for each requested weather element, for each requested hour. Units for each element are as follows: * CIG: meters AGL * DEWPT: degrees Celsius * SKY: % cloud cover * TEMP: degrees Celsius * VIS: meters * WINDDIR: degrees true * WINDGUST: meters/sec * WINDSPEED: meters/sec
     * @param wxByPolygon  (required)
     * @param xApiKey  (optional)
     * @return WxPolyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A GeoJSON FeatureCollection with one Feature for each forecast location found within requested area. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public WxPolyResponse wxByPolyUsV1WxForecastPolygonQueryPost(WxByPolygon wxByPolygon, String xApiKey) throws ApiException {
        ApiResponse<WxPolyResponse> localVarResp = wxByPolyUsV1WxForecastPolygonQueryPostWithHttpInfo(wxByPolygon, xApiKey);
        return localVarResp.getData();
    }

    /**
     * Retrieve forecast values within given GeoJSON polygon for all requested weather elements and time periods.
     * Retrieve forecast values located within given area for requested weather elements and time period. Request body parameters are: * poly:  [GeoJSON Polygon](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the area. Max allowed area is 1000 km^2. * wxtypes:  list of one or more weather forecast elements you wish to retrieve. Allowed values are \&quot;CIG\&quot;, \&quot;DEWPT\&quot;, \&quot;SKY\&quot;, \&quot;TEMP\&quot;, \&quot;VIS\&quot;, \&quot;WINDDIR\&quot;, \&quot;WINDGUST\&quot;, \&quot;WINDSPEED\&quot;. * hours:  number of hourly forecasts to return (1-24). For current hour only you should enter value of 1. To also retrieve values for each of the next n hours, enter n.   The response will consist of a GeoJSON FeatureCollection with one Feature for each forecast location found within requested area, properties of which will include an ordered list of forecast values for each requested weather element, for each requested hour. Units for each element are as follows: * CIG: meters AGL * DEWPT: degrees Celsius * SKY: % cloud cover * TEMP: degrees Celsius * VIS: meters * WINDDIR: degrees true * WINDGUST: meters/sec * WINDSPEED: meters/sec
     * @param wxByPolygon  (required)
     * @param xApiKey  (optional)
     * @return ApiResponse&lt;WxPolyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A GeoJSON FeatureCollection with one Feature for each forecast location found within requested area. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WxPolyResponse> wxByPolyUsV1WxForecastPolygonQueryPostWithHttpInfo(WxByPolygon wxByPolygon, String xApiKey) throws ApiException {
        okhttp3.Call localVarCall = wxByPolyUsV1WxForecastPolygonQueryPostValidateBeforeCall(wxByPolygon, xApiKey, null);
        Type localVarReturnType = new TypeToken<WxPolyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve forecast values within given GeoJSON polygon for all requested weather elements and time periods. (asynchronously)
     * Retrieve forecast values located within given area for requested weather elements and time period. Request body parameters are: * poly:  [GeoJSON Polygon](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the area. Max allowed area is 1000 km^2. * wxtypes:  list of one or more weather forecast elements you wish to retrieve. Allowed values are \&quot;CIG\&quot;, \&quot;DEWPT\&quot;, \&quot;SKY\&quot;, \&quot;TEMP\&quot;, \&quot;VIS\&quot;, \&quot;WINDDIR\&quot;, \&quot;WINDGUST\&quot;, \&quot;WINDSPEED\&quot;. * hours:  number of hourly forecasts to return (1-24). For current hour only you should enter value of 1. To also retrieve values for each of the next n hours, enter n.   The response will consist of a GeoJSON FeatureCollection with one Feature for each forecast location found within requested area, properties of which will include an ordered list of forecast values for each requested weather element, for each requested hour. Units for each element are as follows: * CIG: meters AGL * DEWPT: degrees Celsius * SKY: % cloud cover * TEMP: degrees Celsius * VIS: meters * WINDDIR: degrees true * WINDGUST: meters/sec * WINDSPEED: meters/sec
     * @param wxByPolygon  (required)
     * @param xApiKey  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A GeoJSON FeatureCollection with one Feature for each forecast location found within requested area. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wxByPolyUsV1WxForecastPolygonQueryPostAsync(WxByPolygon wxByPolygon, String xApiKey, final ApiCallback<WxPolyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = wxByPolyUsV1WxForecastPolygonQueryPostValidateBeforeCall(wxByPolygon, xApiKey, _callback);
        Type localVarReturnType = new TypeToken<WxPolyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for wxByRouteUsV1WxForecastRouteQueryPost
     * @param wxByRoute  (required)
     * @param xApiKey  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A GeoJSON FeatureCollection with one Feature for each forecast location found within requested area. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wxByRouteUsV1WxForecastRouteQueryPostCall(WxByRoute wxByRoute, String xApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wxByRoute;

        // create path and map variables
        String localVarPath = "/us/v1/wx-forecast/route-query";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiKey != null) {
            localVarHeaderParams.put("x-api-key", localVarApiClient.parameterToString(xApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call wxByRouteUsV1WxForecastRouteQueryPostValidateBeforeCall(WxByRoute wxByRoute, String xApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'wxByRoute' is set
        if (wxByRoute == null) {
            throw new ApiException("Missing the required parameter 'wxByRoute' when calling wxByRouteUsV1WxForecastRouteQueryPost(Async)");
        }

        return wxByRouteUsV1WxForecastRouteQueryPostCall(wxByRoute, xApiKey, _callback);

    }

    /**
     * Retrieve forecast values along a route for all requested weather elements and time periods.
     * Retrieve forecast values along route for requested weather elements and time period. Request body parameters are: * route:  [GeoJSON Linestring](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the route. Max allowed length is 50 km. * wxtypes:  list of one or more weather forecast elements you wish to retrieve. Allowed values are \&quot;CIG\&quot;, \&quot;DEWPT\&quot;, \&quot;SKY\&quot;, \&quot;TEMP\&quot;, \&quot;VIS\&quot;, \&quot;WINDDIR\&quot;, \&quot;WINDGUST\&quot;, \&quot;WINDSPEED\&quot;. * hours:  number of hourly forecasts to return (1-24). For current hour only you should enter value of 1. To also retrieve values for each of the next n hours, enter n.   The response will consist of a GeoJSON FeatureCollection with one Feature for each forecast location found within requested area, properties of which will include an ordered list of forecast values for each requested weather element, for each requested hour. Units for each element are as follows: * CIG: meters AGL * DEWPT: degrees Celsius * SKY: % cloud cover * TEMP: degrees Celsius * VIS: meters * WINDDIR: degrees true * WINDGUST: meters/sec * WINDSPEED: meters/sec
     * @param wxByRoute  (required)
     * @param xApiKey  (optional)
     * @return WxRouteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A GeoJSON FeatureCollection with one Feature for each forecast location found within requested area. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public WxRouteResponse wxByRouteUsV1WxForecastRouteQueryPost(WxByRoute wxByRoute, String xApiKey) throws ApiException {
        ApiResponse<WxRouteResponse> localVarResp = wxByRouteUsV1WxForecastRouteQueryPostWithHttpInfo(wxByRoute, xApiKey);
        return localVarResp.getData();
    }

    /**
     * Retrieve forecast values along a route for all requested weather elements and time periods.
     * Retrieve forecast values along route for requested weather elements and time period. Request body parameters are: * route:  [GeoJSON Linestring](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the route. Max allowed length is 50 km. * wxtypes:  list of one or more weather forecast elements you wish to retrieve. Allowed values are \&quot;CIG\&quot;, \&quot;DEWPT\&quot;, \&quot;SKY\&quot;, \&quot;TEMP\&quot;, \&quot;VIS\&quot;, \&quot;WINDDIR\&quot;, \&quot;WINDGUST\&quot;, \&quot;WINDSPEED\&quot;. * hours:  number of hourly forecasts to return (1-24). For current hour only you should enter value of 1. To also retrieve values for each of the next n hours, enter n.   The response will consist of a GeoJSON FeatureCollection with one Feature for each forecast location found within requested area, properties of which will include an ordered list of forecast values for each requested weather element, for each requested hour. Units for each element are as follows: * CIG: meters AGL * DEWPT: degrees Celsius * SKY: % cloud cover * TEMP: degrees Celsius * VIS: meters * WINDDIR: degrees true * WINDGUST: meters/sec * WINDSPEED: meters/sec
     * @param wxByRoute  (required)
     * @param xApiKey  (optional)
     * @return ApiResponse&lt;WxRouteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A GeoJSON FeatureCollection with one Feature for each forecast location found within requested area. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WxRouteResponse> wxByRouteUsV1WxForecastRouteQueryPostWithHttpInfo(WxByRoute wxByRoute, String xApiKey) throws ApiException {
        okhttp3.Call localVarCall = wxByRouteUsV1WxForecastRouteQueryPostValidateBeforeCall(wxByRoute, xApiKey, null);
        Type localVarReturnType = new TypeToken<WxRouteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve forecast values along a route for all requested weather elements and time periods. (asynchronously)
     * Retrieve forecast values along route for requested weather elements and time period. Request body parameters are: * route:  [GeoJSON Linestring](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the route. Max allowed length is 50 km. * wxtypes:  list of one or more weather forecast elements you wish to retrieve. Allowed values are \&quot;CIG\&quot;, \&quot;DEWPT\&quot;, \&quot;SKY\&quot;, \&quot;TEMP\&quot;, \&quot;VIS\&quot;, \&quot;WINDDIR\&quot;, \&quot;WINDGUST\&quot;, \&quot;WINDSPEED\&quot;. * hours:  number of hourly forecasts to return (1-24). For current hour only you should enter value of 1. To also retrieve values for each of the next n hours, enter n.   The response will consist of a GeoJSON FeatureCollection with one Feature for each forecast location found within requested area, properties of which will include an ordered list of forecast values for each requested weather element, for each requested hour. Units for each element are as follows: * CIG: meters AGL * DEWPT: degrees Celsius * SKY: % cloud cover * TEMP: degrees Celsius * VIS: meters * WINDDIR: degrees true * WINDGUST: meters/sec * WINDSPEED: meters/sec
     * @param wxByRoute  (required)
     * @param xApiKey  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A GeoJSON FeatureCollection with one Feature for each forecast location found within requested area. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wxByRouteUsV1WxForecastRouteQueryPostAsync(WxByRoute wxByRoute, String xApiKey, final ApiCallback<WxRouteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = wxByRouteUsV1WxForecastRouteQueryPostValidateBeforeCall(wxByRoute, xApiKey, _callback);
        Type localVarReturnType = new TypeToken<WxRouteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
