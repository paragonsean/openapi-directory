/*
 * DFlight API
 * [DFlight API](https://ljaero.com/solutions/dflight/) supplies the up-to-date information needed for compliance with UAV preflight assessment requirements. Separate endpoints are available for each of the following information categories: - Airspace - Weather - Temporary Flight Restrictions - Special Security Areas - Restricted Public Venues - Surface Obstacles - Aerodromes - UAS Operating Areas  You can define your geographic area of interest in one of three convenient ways: - Providing a latitude/longitude point and distance around that point - Providing a GeoJSON LineString defining your route - Providing an arbitrary GeoJSON Polygon defining your area of interest
 *
 * The version of the OpenAPI document: V 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.HTTPValidationError;
import org.openapitools.client.model.VenueDistanceResponse;
import org.openapitools.client.model.VenuePolyResponse;
import org.openapitools.client.model.VenueRouteResponse;
import org.openapitools.client.model.VenuesByDistance;
import org.openapitools.client.model.VenuesByPolygon;
import org.openapitools.client.model.VenuesByRoute;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RestrictedPublicVenuesApi
 */
@Disabled
public class RestrictedPublicVenuesApiTest {

    private final RestrictedPublicVenuesApi api = new RestrictedPublicVenuesApi();

    /**
     * Retrieve all restricted public venues located within given distance of location.
     *
     * Retrieve venues existing within given distance from a point. Request body parameters are: * latitude:  WGS84 latitude coordinate of your selected point, in decimal degrees * longitude:  WGS84 longitude coordinate of your selected point, in decimal degrees * distance:  distance in meters (max allowed value is 25000)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void venByDistanceUsV1VenuesDistanceQueryPostTest() throws ApiException {
        VenuesByDistance venuesByDistance = null;
        String xApiKey = null;
        VenueDistanceResponse response = api.venByDistanceUsV1VenuesDistanceQueryPost(venuesByDistance, xApiKey);
        // TODO: test validations
    }

    /**
     * Retrieve all restricted public venues located within given GeoJSON Polygon.
     *
     * Retrieve all restricted public venues located within given area. Request body parameters are: * poly:  [GeoJSON Polygon](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the area. Max allowed area is 1000 km^2.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void venByPolyUsV1VenuesPolygonQueryPostTest() throws ApiException {
        VenuesByPolygon venuesByPolygon = null;
        String xApiKey = null;
        VenuePolyResponse response = api.venByPolyUsV1VenuesPolygonQueryPost(venuesByPolygon, xApiKey);
        // TODO: test validations
    }

    /**
     * Retrieve all restricted public venues traversed by route.
     *
     * Retrieve all restricted public venues intersected by route. Request body parameters are: * route: [GeoJSON Linestring](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the route. Max allowed length is 50 km.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void venByRouteUsV1VenuesRouteQueryPostTest() throws ApiException {
        VenuesByRoute venuesByRoute = null;
        String xApiKey = null;
        VenueRouteResponse response = api.venByRouteUsV1VenuesRouteQueryPost(venuesByRoute, xApiKey);
        // TODO: test validations
    }

}
