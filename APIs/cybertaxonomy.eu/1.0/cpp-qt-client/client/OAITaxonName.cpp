/**
 * EU BON UTIS
 * The Unified Taxonomic Information Service (UTIS) is the taxonomic backbone for the EU-BON project
 *
 * The version of the OpenAPI document: 1.0
 * Contact: EditSupport@bgbm.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITaxonName.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITaxonName::OAITaxonName(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITaxonName::OAITaxonName() {
    this->initializeModel();
}

OAITaxonName::~OAITaxonName() {}

void OAITaxonName::initializeModel() {

    m_atomised_name_isSet = false;
    m_atomised_name_isValid = false;

    m_authorship_isSet = false;
    m_authorship_isValid = false;

    m_canonical_name_isSet = false;
    m_canonical_name_isValid = false;

    m_nomenclatural_reference_isSet = false;
    m_nomenclatural_reference_isValid = false;

    m_rank_isSet = false;
    m_rank_isValid = false;

    m_scientific_name_isSet = false;
    m_scientific_name_isValid = false;
}

void OAITaxonName::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITaxonName::fromJsonObject(QJsonObject json) {

    m_atomised_name_isValid = ::OpenAPI::fromJsonValue(m_atomised_name, json[QString("atomisedName")]);
    m_atomised_name_isSet = !json[QString("atomisedName")].isNull() && m_atomised_name_isValid;

    m_authorship_isValid = ::OpenAPI::fromJsonValue(m_authorship, json[QString("authorship")]);
    m_authorship_isSet = !json[QString("authorship")].isNull() && m_authorship_isValid;

    m_canonical_name_isValid = ::OpenAPI::fromJsonValue(m_canonical_name, json[QString("canonicalName")]);
    m_canonical_name_isSet = !json[QString("canonicalName")].isNull() && m_canonical_name_isValid;

    m_nomenclatural_reference_isValid = ::OpenAPI::fromJsonValue(m_nomenclatural_reference, json[QString("nomenclaturalReference")]);
    m_nomenclatural_reference_isSet = !json[QString("nomenclaturalReference")].isNull() && m_nomenclatural_reference_isValid;

    m_rank_isValid = ::OpenAPI::fromJsonValue(m_rank, json[QString("rank")]);
    m_rank_isSet = !json[QString("rank")].isNull() && m_rank_isValid;

    m_scientific_name_isValid = ::OpenAPI::fromJsonValue(m_scientific_name, json[QString("scientificName")]);
    m_scientific_name_isSet = !json[QString("scientificName")].isNull() && m_scientific_name_isValid;
}

QString OAITaxonName::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITaxonName::asJsonObject() const {
    QJsonObject obj;
    if (m_atomised_name.isSet()) {
        obj.insert(QString("atomisedName"), ::OpenAPI::toJsonValue(m_atomised_name));
    }
    if (m_authorship_isSet) {
        obj.insert(QString("authorship"), ::OpenAPI::toJsonValue(m_authorship));
    }
    if (m_canonical_name_isSet) {
        obj.insert(QString("canonicalName"), ::OpenAPI::toJsonValue(m_canonical_name));
    }
    if (m_nomenclatural_reference_isSet) {
        obj.insert(QString("nomenclaturalReference"), ::OpenAPI::toJsonValue(m_nomenclatural_reference));
    }
    if (m_rank_isSet) {
        obj.insert(QString("rank"), ::OpenAPI::toJsonValue(m_rank));
    }
    if (m_scientific_name_isSet) {
        obj.insert(QString("scientificName"), ::OpenAPI::toJsonValue(m_scientific_name));
    }
    return obj;
}

OAIAtomisedName OAITaxonName::getAtomisedName() const {
    return m_atomised_name;
}
void OAITaxonName::setAtomisedName(const OAIAtomisedName &atomised_name) {
    m_atomised_name = atomised_name;
    m_atomised_name_isSet = true;
}

bool OAITaxonName::is_atomised_name_Set() const{
    return m_atomised_name_isSet;
}

bool OAITaxonName::is_atomised_name_Valid() const{
    return m_atomised_name_isValid;
}

QString OAITaxonName::getAuthorship() const {
    return m_authorship;
}
void OAITaxonName::setAuthorship(const QString &authorship) {
    m_authorship = authorship;
    m_authorship_isSet = true;
}

bool OAITaxonName::is_authorship_Set() const{
    return m_authorship_isSet;
}

bool OAITaxonName::is_authorship_Valid() const{
    return m_authorship_isValid;
}

QString OAITaxonName::getCanonicalName() const {
    return m_canonical_name;
}
void OAITaxonName::setCanonicalName(const QString &canonical_name) {
    m_canonical_name = canonical_name;
    m_canonical_name_isSet = true;
}

bool OAITaxonName::is_canonical_name_Set() const{
    return m_canonical_name_isSet;
}

bool OAITaxonName::is_canonical_name_Valid() const{
    return m_canonical_name_isValid;
}

QString OAITaxonName::getNomenclaturalReference() const {
    return m_nomenclatural_reference;
}
void OAITaxonName::setNomenclaturalReference(const QString &nomenclatural_reference) {
    m_nomenclatural_reference = nomenclatural_reference;
    m_nomenclatural_reference_isSet = true;
}

bool OAITaxonName::is_nomenclatural_reference_Set() const{
    return m_nomenclatural_reference_isSet;
}

bool OAITaxonName::is_nomenclatural_reference_Valid() const{
    return m_nomenclatural_reference_isValid;
}

QString OAITaxonName::getRank() const {
    return m_rank;
}
void OAITaxonName::setRank(const QString &rank) {
    m_rank = rank;
    m_rank_isSet = true;
}

bool OAITaxonName::is_rank_Set() const{
    return m_rank_isSet;
}

bool OAITaxonName::is_rank_Valid() const{
    return m_rank_isValid;
}

QString OAITaxonName::getScientificName() const {
    return m_scientific_name;
}
void OAITaxonName::setScientificName(const QString &scientific_name) {
    m_scientific_name = scientific_name;
    m_scientific_name_isSet = true;
}

bool OAITaxonName::is_scientific_name_Set() const{
    return m_scientific_name_isSet;
}

bool OAITaxonName::is_scientific_name_Valid() const{
    return m_scientific_name_isValid;
}

bool OAITaxonName::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_atomised_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorship_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_canonical_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nomenclatural_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rank_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scientific_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITaxonName::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
