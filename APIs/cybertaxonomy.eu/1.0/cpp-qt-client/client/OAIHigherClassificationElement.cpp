/**
 * EU BON UTIS
 * The Unified Taxonomic Information Service (UTIS) is the taxonomic backbone for the EU-BON project
 *
 * The version of the OpenAPI document: 1.0
 * Contact: EditSupport@bgbm.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHigherClassificationElement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHigherClassificationElement::OAIHigherClassificationElement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHigherClassificationElement::OAIHigherClassificationElement() {
    this->initializeModel();
}

OAIHigherClassificationElement::~OAIHigherClassificationElement() {}

void OAIHigherClassificationElement::initializeModel() {

    m_rank_isSet = false;
    m_rank_isValid = false;

    m_scientific_name_isSet = false;
    m_scientific_name_isValid = false;

    m_taxon_id_isSet = false;
    m_taxon_id_isValid = false;
}

void OAIHigherClassificationElement::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHigherClassificationElement::fromJsonObject(QJsonObject json) {

    m_rank_isValid = ::OpenAPI::fromJsonValue(m_rank, json[QString("rank")]);
    m_rank_isSet = !json[QString("rank")].isNull() && m_rank_isValid;

    m_scientific_name_isValid = ::OpenAPI::fromJsonValue(m_scientific_name, json[QString("scientificName")]);
    m_scientific_name_isSet = !json[QString("scientificName")].isNull() && m_scientific_name_isValid;

    m_taxon_id_isValid = ::OpenAPI::fromJsonValue(m_taxon_id, json[QString("taxonID")]);
    m_taxon_id_isSet = !json[QString("taxonID")].isNull() && m_taxon_id_isValid;
}

QString OAIHigherClassificationElement::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHigherClassificationElement::asJsonObject() const {
    QJsonObject obj;
    if (m_rank_isSet) {
        obj.insert(QString("rank"), ::OpenAPI::toJsonValue(m_rank));
    }
    if (m_scientific_name_isSet) {
        obj.insert(QString("scientificName"), ::OpenAPI::toJsonValue(m_scientific_name));
    }
    if (m_taxon_id_isSet) {
        obj.insert(QString("taxonID"), ::OpenAPI::toJsonValue(m_taxon_id));
    }
    return obj;
}

QString OAIHigherClassificationElement::getRank() const {
    return m_rank;
}
void OAIHigherClassificationElement::setRank(const QString &rank) {
    m_rank = rank;
    m_rank_isSet = true;
}

bool OAIHigherClassificationElement::is_rank_Set() const{
    return m_rank_isSet;
}

bool OAIHigherClassificationElement::is_rank_Valid() const{
    return m_rank_isValid;
}

QString OAIHigherClassificationElement::getScientificName() const {
    return m_scientific_name;
}
void OAIHigherClassificationElement::setScientificName(const QString &scientific_name) {
    m_scientific_name = scientific_name;
    m_scientific_name_isSet = true;
}

bool OAIHigherClassificationElement::is_scientific_name_Set() const{
    return m_scientific_name_isSet;
}

bool OAIHigherClassificationElement::is_scientific_name_Valid() const{
    return m_scientific_name_isValid;
}

QString OAIHigherClassificationElement::getTaxonId() const {
    return m_taxon_id;
}
void OAIHigherClassificationElement::setTaxonId(const QString &taxon_id) {
    m_taxon_id = taxon_id;
    m_taxon_id_isSet = true;
}

bool OAIHigherClassificationElement::is_taxon_id_Set() const{
    return m_taxon_id_isSet;
}

bool OAIHigherClassificationElement::is_taxon_id_Valid() const{
    return m_taxon_id_isValid;
}

bool OAIHigherClassificationElement::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rank_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scientific_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_taxon_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHigherClassificationElement::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
