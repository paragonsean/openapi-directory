/**
 * EU BON UTIS
 * The Unified Taxonomic Information Service (UTIS) is the taxonomic backbone for the EU-BON project
 *
 * The version of the OpenAPI document: 1.0
 * Contact: EditSupport@bgbm.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRequest::OAIRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRequest::OAIRequest() {
    this->initializeModel();
}

OAIRequest::~OAIRequest() {}

void OAIRequest::initializeModel() {

    m_add_synonymy_isSet = false;
    m_add_synonymy_isValid = false;

    m_query_string_isSet = false;
    m_query_string_isValid = false;

    m_search_mode_isSet = false;
    m_search_mode_isValid = false;
}

void OAIRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRequest::fromJsonObject(QJsonObject json) {

    m_add_synonymy_isValid = ::OpenAPI::fromJsonValue(m_add_synonymy, json[QString("addSynonymy")]);
    m_add_synonymy_isSet = !json[QString("addSynonymy")].isNull() && m_add_synonymy_isValid;

    m_query_string_isValid = ::OpenAPI::fromJsonValue(m_query_string, json[QString("queryString")]);
    m_query_string_isSet = !json[QString("queryString")].isNull() && m_query_string_isValid;

    m_search_mode_isValid = ::OpenAPI::fromJsonValue(m_search_mode, json[QString("searchMode")]);
    m_search_mode_isSet = !json[QString("searchMode")].isNull() && m_search_mode_isValid;
}

QString OAIRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_add_synonymy_isSet) {
        obj.insert(QString("addSynonymy"), ::OpenAPI::toJsonValue(m_add_synonymy));
    }
    if (m_query_string_isSet) {
        obj.insert(QString("queryString"), ::OpenAPI::toJsonValue(m_query_string));
    }
    if (m_search_mode_isSet) {
        obj.insert(QString("searchMode"), ::OpenAPI::toJsonValue(m_search_mode));
    }
    return obj;
}

bool OAIRequest::isAddSynonymy() const {
    return m_add_synonymy;
}
void OAIRequest::setAddSynonymy(const bool &add_synonymy) {
    m_add_synonymy = add_synonymy;
    m_add_synonymy_isSet = true;
}

bool OAIRequest::is_add_synonymy_Set() const{
    return m_add_synonymy_isSet;
}

bool OAIRequest::is_add_synonymy_Valid() const{
    return m_add_synonymy_isValid;
}

QString OAIRequest::getQueryString() const {
    return m_query_string;
}
void OAIRequest::setQueryString(const QString &query_string) {
    m_query_string = query_string;
    m_query_string_isSet = true;
}

bool OAIRequest::is_query_string_Set() const{
    return m_query_string_isSet;
}

bool OAIRequest::is_query_string_Valid() const{
    return m_query_string_isValid;
}

QString OAIRequest::getSearchMode() const {
    return m_search_mode;
}
void OAIRequest::setSearchMode(const QString &search_mode) {
    m_search_mode = search_mode;
    m_search_mode_isSet = true;
}

bool OAIRequest::is_search_mode_Set() const{
    return m_search_mode_isSet;
}

bool OAIRequest::is_search_mode_Valid() const{
    return m_search_mode_isValid;
}

bool OAIRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_add_synonymy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_mode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
