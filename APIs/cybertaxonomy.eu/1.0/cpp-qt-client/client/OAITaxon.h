/**
 * EU BON UTIS
 * The Unified Taxonomic Information Service (UTIS) is the taxonomic backbone for the EU-BON project
 *
 * The version of the OpenAPI document: 1.0
 * Contact: EditSupport@bgbm.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITaxon.h
 *
 * 
 */

#ifndef OAITaxon_H
#define OAITaxon_H

#include <QJsonObject>

#include "OAIHigherClassificationElement.h"
#include "OAISource.h"
#include "OAITaxonName.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIHigherClassificationElement;
class OAISource;
class OAITaxonName;

class OAITaxon : public OAIObject {
public:
    OAITaxon();
    OAITaxon(QString json);
    ~OAITaxon() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAccordingTo() const;
    void setAccordingTo(const QString &according_to);
    bool is_according_to_Set() const;
    bool is_according_to_Valid() const;

    QList<OAIHigherClassificationElement> getHigherClassification() const;
    void setHigherClassification(const QList<OAIHigherClassificationElement> &higher_classification);
    bool is_higher_classification_Set() const;
    bool is_higher_classification_Valid() const;

    QString getIdentifier() const;
    void setIdentifier(const QString &identifier);
    bool is_identifier_Set() const;
    bool is_identifier_Valid() const;

    QList<OAISource> getSources() const;
    void setSources(const QList<OAISource> &sources);
    bool is_sources_Set() const;
    bool is_sources_Valid() const;

    OAITaxonName getTaxonName() const;
    void setTaxonName(const OAITaxonName &taxon_name);
    bool is_taxon_name_Set() const;
    bool is_taxon_name_Valid() const;

    QString getTaxonomicStatus() const;
    void setTaxonomicStatus(const QString &taxonomic_status);
    bool is_taxonomic_status_Set() const;
    bool is_taxonomic_status_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_according_to;
    bool m_according_to_isSet;
    bool m_according_to_isValid;

    QList<OAIHigherClassificationElement> m_higher_classification;
    bool m_higher_classification_isSet;
    bool m_higher_classification_isValid;

    QString m_identifier;
    bool m_identifier_isSet;
    bool m_identifier_isValid;

    QList<OAISource> m_sources;
    bool m_sources_isSet;
    bool m_sources_isValid;

    OAITaxonName m_taxon_name;
    bool m_taxon_name_isSet;
    bool m_taxon_name_isValid;

    QString m_taxonomic_status;
    bool m_taxonomic_status_isSet;
    bool m_taxonomic_status_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITaxon)

#endif // OAITaxon_H
