/**
 * EU BON UTIS
 * The Unified Taxonomic Information Service (UTIS) is the taxonomic backbone for the EU-BON project
 *
 * The version of the OpenAPI document: 1.0
 * Contact: EditSupport@bgbm.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceProviderInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceProviderInfo::OAIServiceProviderInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceProviderInfo::OAIServiceProviderInfo() {
    this->initializeModel();
}

OAIServiceProviderInfo::~OAIServiceProviderInfo() {}

void OAIServiceProviderInfo::initializeModel() {

    m_copyright_url_isSet = false;
    m_copyright_url_isValid = false;

    m_documentation_url_isSet = false;
    m_documentation_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_search_modes_isSet = false;
    m_search_modes_isValid = false;

    m_sub_checklists_isSet = false;
    m_sub_checklists_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIServiceProviderInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceProviderInfo::fromJsonObject(QJsonObject json) {

    m_copyright_url_isValid = ::OpenAPI::fromJsonValue(m_copyright_url, json[QString("copyrightUrl")]);
    m_copyright_url_isSet = !json[QString("copyrightUrl")].isNull() && m_copyright_url_isValid;

    m_documentation_url_isValid = ::OpenAPI::fromJsonValue(m_documentation_url, json[QString("documentationUrl")]);
    m_documentation_url_isSet = !json[QString("documentationUrl")].isNull() && m_documentation_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_search_modes_isValid = ::OpenAPI::fromJsonValue(m_search_modes, json[QString("searchModes")]);
    m_search_modes_isSet = !json[QString("searchModes")].isNull() && m_search_modes_isValid;

    m_sub_checklists_isValid = ::OpenAPI::fromJsonValue(m_sub_checklists, json[QString("subChecklists")]);
    m_sub_checklists_isSet = !json[QString("subChecklists")].isNull() && m_sub_checklists_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIServiceProviderInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceProviderInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_copyright_url_isSet) {
        obj.insert(QString("copyrightUrl"), ::OpenAPI::toJsonValue(m_copyright_url));
    }
    if (m_documentation_url_isSet) {
        obj.insert(QString("documentationUrl"), ::OpenAPI::toJsonValue(m_documentation_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_search_modes.size() > 0) {
        obj.insert(QString("searchModes"), ::OpenAPI::toJsonValue(m_search_modes));
    }
    if (m_sub_checklists.size() > 0) {
        obj.insert(QString("subChecklists"), ::OpenAPI::toJsonValue(m_sub_checklists));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIServiceProviderInfo::getCopyrightUrl() const {
    return m_copyright_url;
}
void OAIServiceProviderInfo::setCopyrightUrl(const QString &copyright_url) {
    m_copyright_url = copyright_url;
    m_copyright_url_isSet = true;
}

bool OAIServiceProviderInfo::is_copyright_url_Set() const{
    return m_copyright_url_isSet;
}

bool OAIServiceProviderInfo::is_copyright_url_Valid() const{
    return m_copyright_url_isValid;
}

QString OAIServiceProviderInfo::getDocumentationUrl() const {
    return m_documentation_url;
}
void OAIServiceProviderInfo::setDocumentationUrl(const QString &documentation_url) {
    m_documentation_url = documentation_url;
    m_documentation_url_isSet = true;
}

bool OAIServiceProviderInfo::is_documentation_url_Set() const{
    return m_documentation_url_isSet;
}

bool OAIServiceProviderInfo::is_documentation_url_Valid() const{
    return m_documentation_url_isValid;
}

QString OAIServiceProviderInfo::getId() const {
    return m_id;
}
void OAIServiceProviderInfo::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIServiceProviderInfo::is_id_Set() const{
    return m_id_isSet;
}

bool OAIServiceProviderInfo::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIServiceProviderInfo::getLabel() const {
    return m_label;
}
void OAIServiceProviderInfo::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIServiceProviderInfo::is_label_Set() const{
    return m_label_isSet;
}

bool OAIServiceProviderInfo::is_label_Valid() const{
    return m_label_isValid;
}

QSet<QString> OAIServiceProviderInfo::getSearchModes() const {
    return m_search_modes;
}
void OAIServiceProviderInfo::setSearchModes(const QSet<QString> &search_modes) {
    m_search_modes = search_modes;
    m_search_modes_isSet = true;
}

bool OAIServiceProviderInfo::is_search_modes_Set() const{
    return m_search_modes_isSet;
}

bool OAIServiceProviderInfo::is_search_modes_Valid() const{
    return m_search_modes_isValid;
}

QList<OAIServiceProviderInfo> OAIServiceProviderInfo::getSubChecklists() const {
    return m_sub_checklists;
}
void OAIServiceProviderInfo::setSubChecklists(const QList<OAIServiceProviderInfo> &sub_checklists) {
    m_sub_checklists = sub_checklists;
    m_sub_checklists_isSet = true;
}

bool OAIServiceProviderInfo::is_sub_checklists_Set() const{
    return m_sub_checklists_isSet;
}

bool OAIServiceProviderInfo::is_sub_checklists_Valid() const{
    return m_sub_checklists_isValid;
}

QString OAIServiceProviderInfo::getVersion() const {
    return m_version;
}
void OAIServiceProviderInfo::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIServiceProviderInfo::is_version_Set() const{
    return m_version_isSet;
}

bool OAIServiceProviderInfo::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIServiceProviderInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_copyright_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_documentation_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_modes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_checklists.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceProviderInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
