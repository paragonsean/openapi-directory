/**
 * EU BON UTIS
 * The Unified Taxonomic Information Service (UTIS) is the taxonomic backbone for the EU-BON project
 *
 * The version of the OpenAPI document: 1.0
 * Contact: EditSupport@bgbm.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAtomisedName.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAtomisedName::OAIAtomisedName(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAtomisedName::OAIAtomisedName() {
    this->initializeModel();
}

OAIAtomisedName::~OAIAtomisedName() {}

void OAIAtomisedName::initializeModel() {

    m_genus_or_uninomial_isSet = false;
    m_genus_or_uninomial_isValid = false;

    m_infrageneric_epithet_isSet = false;
    m_infrageneric_epithet_isValid = false;

    m_infraspecific_epithet_isSet = false;
    m_infraspecific_epithet_isValid = false;

    m_specific_epithet_isSet = false;
    m_specific_epithet_isValid = false;
}

void OAIAtomisedName::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAtomisedName::fromJsonObject(QJsonObject json) {

    m_genus_or_uninomial_isValid = ::OpenAPI::fromJsonValue(m_genus_or_uninomial, json[QString("genusOrUninomial")]);
    m_genus_or_uninomial_isSet = !json[QString("genusOrUninomial")].isNull() && m_genus_or_uninomial_isValid;

    m_infrageneric_epithet_isValid = ::OpenAPI::fromJsonValue(m_infrageneric_epithet, json[QString("infragenericEpithet")]);
    m_infrageneric_epithet_isSet = !json[QString("infragenericEpithet")].isNull() && m_infrageneric_epithet_isValid;

    m_infraspecific_epithet_isValid = ::OpenAPI::fromJsonValue(m_infraspecific_epithet, json[QString("infraspecificEpithet")]);
    m_infraspecific_epithet_isSet = !json[QString("infraspecificEpithet")].isNull() && m_infraspecific_epithet_isValid;

    m_specific_epithet_isValid = ::OpenAPI::fromJsonValue(m_specific_epithet, json[QString("specificEpithet")]);
    m_specific_epithet_isSet = !json[QString("specificEpithet")].isNull() && m_specific_epithet_isValid;
}

QString OAIAtomisedName::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAtomisedName::asJsonObject() const {
    QJsonObject obj;
    if (m_genus_or_uninomial_isSet) {
        obj.insert(QString("genusOrUninomial"), ::OpenAPI::toJsonValue(m_genus_or_uninomial));
    }
    if (m_infrageneric_epithet_isSet) {
        obj.insert(QString("infragenericEpithet"), ::OpenAPI::toJsonValue(m_infrageneric_epithet));
    }
    if (m_infraspecific_epithet_isSet) {
        obj.insert(QString("infraspecificEpithet"), ::OpenAPI::toJsonValue(m_infraspecific_epithet));
    }
    if (m_specific_epithet_isSet) {
        obj.insert(QString("specificEpithet"), ::OpenAPI::toJsonValue(m_specific_epithet));
    }
    return obj;
}

QString OAIAtomisedName::getGenusOrUninomial() const {
    return m_genus_or_uninomial;
}
void OAIAtomisedName::setGenusOrUninomial(const QString &genus_or_uninomial) {
    m_genus_or_uninomial = genus_or_uninomial;
    m_genus_or_uninomial_isSet = true;
}

bool OAIAtomisedName::is_genus_or_uninomial_Set() const{
    return m_genus_or_uninomial_isSet;
}

bool OAIAtomisedName::is_genus_or_uninomial_Valid() const{
    return m_genus_or_uninomial_isValid;
}

QString OAIAtomisedName::getInfragenericEpithet() const {
    return m_infrageneric_epithet;
}
void OAIAtomisedName::setInfragenericEpithet(const QString &infrageneric_epithet) {
    m_infrageneric_epithet = infrageneric_epithet;
    m_infrageneric_epithet_isSet = true;
}

bool OAIAtomisedName::is_infrageneric_epithet_Set() const{
    return m_infrageneric_epithet_isSet;
}

bool OAIAtomisedName::is_infrageneric_epithet_Valid() const{
    return m_infrageneric_epithet_isValid;
}

QString OAIAtomisedName::getInfraspecificEpithet() const {
    return m_infraspecific_epithet;
}
void OAIAtomisedName::setInfraspecificEpithet(const QString &infraspecific_epithet) {
    m_infraspecific_epithet = infraspecific_epithet;
    m_infraspecific_epithet_isSet = true;
}

bool OAIAtomisedName::is_infraspecific_epithet_Set() const{
    return m_infraspecific_epithet_isSet;
}

bool OAIAtomisedName::is_infraspecific_epithet_Valid() const{
    return m_infraspecific_epithet_isValid;
}

QString OAIAtomisedName::getSpecificEpithet() const {
    return m_specific_epithet;
}
void OAIAtomisedName::setSpecificEpithet(const QString &specific_epithet) {
    m_specific_epithet = specific_epithet;
    m_specific_epithet_isSet = true;
}

bool OAIAtomisedName::is_specific_epithet_Set() const{
    return m_specific_epithet_isSet;
}

bool OAIAtomisedName::is_specific_epithet_Valid() const{
    return m_specific_epithet_isValid;
}

bool OAIAtomisedName::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_genus_or_uninomial_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_infrageneric_epithet_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_infraspecific_epithet_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_specific_epithet_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAtomisedName::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
