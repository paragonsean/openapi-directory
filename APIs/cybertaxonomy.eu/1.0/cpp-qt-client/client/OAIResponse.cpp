/**
 * EU BON UTIS
 * The Unified Taxonomic Information Service (UTIS) is the taxonomic backbone for the EU-BON project
 *
 * The version of the OpenAPI document: 1.0
 * Contact: EditSupport@bgbm.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResponse::OAIResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResponse::OAIResponse() {
    this->initializeModel();
}

OAIResponse::~OAIResponse() {}

void OAIResponse::initializeModel() {

    m_checklist_isSet = false;
    m_checklist_isValid = false;

    m_checklist_citation_isSet = false;
    m_checklist_citation_isValid = false;

    m_checklist_id_isSet = false;
    m_checklist_id_isValid = false;

    m_checklist_url_isSet = false;
    m_checklist_url_isValid = false;

    m_checklist_version_isSet = false;
    m_checklist_version_isValid = false;

    m_matching_name_string_isSet = false;
    m_matching_name_string_isValid = false;

    m_matching_name_type_isSet = false;
    m_matching_name_type_isValid = false;

    m_other_names_isSet = false;
    m_other_names_isValid = false;

    m_synonyms_isSet = false;
    m_synonyms_isValid = false;

    m_taxon_isSet = false;
    m_taxon_isValid = false;

    m_vernacular_names_isSet = false;
    m_vernacular_names_isValid = false;
}

void OAIResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResponse::fromJsonObject(QJsonObject json) {

    m_checklist_isValid = ::OpenAPI::fromJsonValue(m_checklist, json[QString("checklist")]);
    m_checklist_isSet = !json[QString("checklist")].isNull() && m_checklist_isValid;

    m_checklist_citation_isValid = ::OpenAPI::fromJsonValue(m_checklist_citation, json[QString("checklistCitation")]);
    m_checklist_citation_isSet = !json[QString("checklistCitation")].isNull() && m_checklist_citation_isValid;

    m_checklist_id_isValid = ::OpenAPI::fromJsonValue(m_checklist_id, json[QString("checklistId")]);
    m_checklist_id_isSet = !json[QString("checklistId")].isNull() && m_checklist_id_isValid;

    m_checklist_url_isValid = ::OpenAPI::fromJsonValue(m_checklist_url, json[QString("checklistUrl")]);
    m_checklist_url_isSet = !json[QString("checklistUrl")].isNull() && m_checklist_url_isValid;

    m_checklist_version_isValid = ::OpenAPI::fromJsonValue(m_checklist_version, json[QString("checklistVersion")]);
    m_checklist_version_isSet = !json[QString("checklistVersion")].isNull() && m_checklist_version_isValid;

    m_matching_name_string_isValid = ::OpenAPI::fromJsonValue(m_matching_name_string, json[QString("matchingNameString")]);
    m_matching_name_string_isSet = !json[QString("matchingNameString")].isNull() && m_matching_name_string_isValid;

    m_matching_name_type_isValid = ::OpenAPI::fromJsonValue(m_matching_name_type, json[QString("matchingNameType")]);
    m_matching_name_type_isSet = !json[QString("matchingNameType")].isNull() && m_matching_name_type_isValid;

    m_other_names_isValid = ::OpenAPI::fromJsonValue(m_other_names, json[QString("otherNames")]);
    m_other_names_isSet = !json[QString("otherNames")].isNull() && m_other_names_isValid;

    m_synonyms_isValid = ::OpenAPI::fromJsonValue(m_synonyms, json[QString("synonyms")]);
    m_synonyms_isSet = !json[QString("synonyms")].isNull() && m_synonyms_isValid;

    m_taxon_isValid = ::OpenAPI::fromJsonValue(m_taxon, json[QString("taxon")]);
    m_taxon_isSet = !json[QString("taxon")].isNull() && m_taxon_isValid;

    m_vernacular_names_isValid = ::OpenAPI::fromJsonValue(m_vernacular_names, json[QString("vernacularNames")]);
    m_vernacular_names_isSet = !json[QString("vernacularNames")].isNull() && m_vernacular_names_isValid;
}

QString OAIResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_checklist_isSet) {
        obj.insert(QString("checklist"), ::OpenAPI::toJsonValue(m_checklist));
    }
    if (m_checklist_citation_isSet) {
        obj.insert(QString("checklistCitation"), ::OpenAPI::toJsonValue(m_checklist_citation));
    }
    if (m_checklist_id_isSet) {
        obj.insert(QString("checklistId"), ::OpenAPI::toJsonValue(m_checklist_id));
    }
    if (m_checklist_url_isSet) {
        obj.insert(QString("checklistUrl"), ::OpenAPI::toJsonValue(m_checklist_url));
    }
    if (m_checklist_version_isSet) {
        obj.insert(QString("checklistVersion"), ::OpenAPI::toJsonValue(m_checklist_version));
    }
    if (m_matching_name_string_isSet) {
        obj.insert(QString("matchingNameString"), ::OpenAPI::toJsonValue(m_matching_name_string));
    }
    if (m_matching_name_type_isSet) {
        obj.insert(QString("matchingNameType"), ::OpenAPI::toJsonValue(m_matching_name_type));
    }
    if (m_other_names.size() > 0) {
        obj.insert(QString("otherNames"), ::OpenAPI::toJsonValue(m_other_names));
    }
    if (m_synonyms.size() > 0) {
        obj.insert(QString("synonyms"), ::OpenAPI::toJsonValue(m_synonyms));
    }
    if (m_taxon.isSet()) {
        obj.insert(QString("taxon"), ::OpenAPI::toJsonValue(m_taxon));
    }
    if (m_vernacular_names.size() > 0) {
        obj.insert(QString("vernacularNames"), ::OpenAPI::toJsonValue(m_vernacular_names));
    }
    return obj;
}

QString OAIResponse::getChecklist() const {
    return m_checklist;
}
void OAIResponse::setChecklist(const QString &checklist) {
    m_checklist = checklist;
    m_checklist_isSet = true;
}

bool OAIResponse::is_checklist_Set() const{
    return m_checklist_isSet;
}

bool OAIResponse::is_checklist_Valid() const{
    return m_checklist_isValid;
}

QString OAIResponse::getChecklistCitation() const {
    return m_checklist_citation;
}
void OAIResponse::setChecklistCitation(const QString &checklist_citation) {
    m_checklist_citation = checklist_citation;
    m_checklist_citation_isSet = true;
}

bool OAIResponse::is_checklist_citation_Set() const{
    return m_checklist_citation_isSet;
}

bool OAIResponse::is_checklist_citation_Valid() const{
    return m_checklist_citation_isValid;
}

QString OAIResponse::getChecklistId() const {
    return m_checklist_id;
}
void OAIResponse::setChecklistId(const QString &checklist_id) {
    m_checklist_id = checklist_id;
    m_checklist_id_isSet = true;
}

bool OAIResponse::is_checklist_id_Set() const{
    return m_checklist_id_isSet;
}

bool OAIResponse::is_checklist_id_Valid() const{
    return m_checklist_id_isValid;
}

QString OAIResponse::getChecklistUrl() const {
    return m_checklist_url;
}
void OAIResponse::setChecklistUrl(const QString &checklist_url) {
    m_checklist_url = checklist_url;
    m_checklist_url_isSet = true;
}

bool OAIResponse::is_checklist_url_Set() const{
    return m_checklist_url_isSet;
}

bool OAIResponse::is_checklist_url_Valid() const{
    return m_checklist_url_isValid;
}

QString OAIResponse::getChecklistVersion() const {
    return m_checklist_version;
}
void OAIResponse::setChecklistVersion(const QString &checklist_version) {
    m_checklist_version = checklist_version;
    m_checklist_version_isSet = true;
}

bool OAIResponse::is_checklist_version_Set() const{
    return m_checklist_version_isSet;
}

bool OAIResponse::is_checklist_version_Valid() const{
    return m_checklist_version_isValid;
}

QString OAIResponse::getMatchingNameString() const {
    return m_matching_name_string;
}
void OAIResponse::setMatchingNameString(const QString &matching_name_string) {
    m_matching_name_string = matching_name_string;
    m_matching_name_string_isSet = true;
}

bool OAIResponse::is_matching_name_string_Set() const{
    return m_matching_name_string_isSet;
}

bool OAIResponse::is_matching_name_string_Valid() const{
    return m_matching_name_string_isValid;
}

QString OAIResponse::getMatchingNameType() const {
    return m_matching_name_type;
}
void OAIResponse::setMatchingNameType(const QString &matching_name_type) {
    m_matching_name_type = matching_name_type;
    m_matching_name_type_isSet = true;
}

bool OAIResponse::is_matching_name_type_Set() const{
    return m_matching_name_type_isSet;
}

bool OAIResponse::is_matching_name_type_Valid() const{
    return m_matching_name_type_isValid;
}

QList<OAIOtherNames> OAIResponse::getOtherNames() const {
    return m_other_names;
}
void OAIResponse::setOtherNames(const QList<OAIOtherNames> &other_names) {
    m_other_names = other_names;
    m_other_names_isSet = true;
}

bool OAIResponse::is_other_names_Set() const{
    return m_other_names_isSet;
}

bool OAIResponse::is_other_names_Valid() const{
    return m_other_names_isValid;
}

QList<OAISynonym> OAIResponse::getSynonyms() const {
    return m_synonyms;
}
void OAIResponse::setSynonyms(const QList<OAISynonym> &synonyms) {
    m_synonyms = synonyms;
    m_synonyms_isSet = true;
}

bool OAIResponse::is_synonyms_Set() const{
    return m_synonyms_isSet;
}

bool OAIResponse::is_synonyms_Valid() const{
    return m_synonyms_isValid;
}

OAITaxon OAIResponse::getTaxon() const {
    return m_taxon;
}
void OAIResponse::setTaxon(const OAITaxon &taxon) {
    m_taxon = taxon;
    m_taxon_isSet = true;
}

bool OAIResponse::is_taxon_Set() const{
    return m_taxon_isSet;
}

bool OAIResponse::is_taxon_Valid() const{
    return m_taxon_isValid;
}

QList<QString> OAIResponse::getVernacularNames() const {
    return m_vernacular_names;
}
void OAIResponse::setVernacularNames(const QList<QString> &vernacular_names) {
    m_vernacular_names = vernacular_names;
    m_vernacular_names_isSet = true;
}

bool OAIResponse::is_vernacular_names_Set() const{
    return m_vernacular_names_isSet;
}

bool OAIResponse::is_vernacular_names_Valid() const{
    return m_vernacular_names_isValid;
}

bool OAIResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_checklist_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_checklist_citation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_checklist_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_checklist_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_checklist_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_matching_name_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_matching_name_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_synonyms.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_taxon.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vernacular_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
