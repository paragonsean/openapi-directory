/**
 * EU BON UTIS
 * The Unified Taxonomic Information Service (UTIS) is the taxonomic backbone for the EU-BON project
 *
 * The version of the OpenAPI document: 1.0
 * Contact: EditSupport@bgbm.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITaxon.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITaxon::OAITaxon(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITaxon::OAITaxon() {
    this->initializeModel();
}

OAITaxon::~OAITaxon() {}

void OAITaxon::initializeModel() {

    m_according_to_isSet = false;
    m_according_to_isValid = false;

    m_higher_classification_isSet = false;
    m_higher_classification_isValid = false;

    m_identifier_isSet = false;
    m_identifier_isValid = false;

    m_sources_isSet = false;
    m_sources_isValid = false;

    m_taxon_name_isSet = false;
    m_taxon_name_isValid = false;

    m_taxonomic_status_isSet = false;
    m_taxonomic_status_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAITaxon::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITaxon::fromJsonObject(QJsonObject json) {

    m_according_to_isValid = ::OpenAPI::fromJsonValue(m_according_to, json[QString("accordingTo")]);
    m_according_to_isSet = !json[QString("accordingTo")].isNull() && m_according_to_isValid;

    m_higher_classification_isValid = ::OpenAPI::fromJsonValue(m_higher_classification, json[QString("higherClassification")]);
    m_higher_classification_isSet = !json[QString("higherClassification")].isNull() && m_higher_classification_isValid;

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("identifier")]);
    m_identifier_isSet = !json[QString("identifier")].isNull() && m_identifier_isValid;

    m_sources_isValid = ::OpenAPI::fromJsonValue(m_sources, json[QString("sources")]);
    m_sources_isSet = !json[QString("sources")].isNull() && m_sources_isValid;

    m_taxon_name_isValid = ::OpenAPI::fromJsonValue(m_taxon_name, json[QString("taxonName")]);
    m_taxon_name_isSet = !json[QString("taxonName")].isNull() && m_taxon_name_isValid;

    m_taxonomic_status_isValid = ::OpenAPI::fromJsonValue(m_taxonomic_status, json[QString("taxonomicStatus")]);
    m_taxonomic_status_isSet = !json[QString("taxonomicStatus")].isNull() && m_taxonomic_status_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAITaxon::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITaxon::asJsonObject() const {
    QJsonObject obj;
    if (m_according_to_isSet) {
        obj.insert(QString("accordingTo"), ::OpenAPI::toJsonValue(m_according_to));
    }
    if (m_higher_classification.size() > 0) {
        obj.insert(QString("higherClassification"), ::OpenAPI::toJsonValue(m_higher_classification));
    }
    if (m_identifier_isSet) {
        obj.insert(QString("identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    if (m_sources.size() > 0) {
        obj.insert(QString("sources"), ::OpenAPI::toJsonValue(m_sources));
    }
    if (m_taxon_name.isSet()) {
        obj.insert(QString("taxonName"), ::OpenAPI::toJsonValue(m_taxon_name));
    }
    if (m_taxonomic_status_isSet) {
        obj.insert(QString("taxonomicStatus"), ::OpenAPI::toJsonValue(m_taxonomic_status));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAITaxon::getAccordingTo() const {
    return m_according_to;
}
void OAITaxon::setAccordingTo(const QString &according_to) {
    m_according_to = according_to;
    m_according_to_isSet = true;
}

bool OAITaxon::is_according_to_Set() const{
    return m_according_to_isSet;
}

bool OAITaxon::is_according_to_Valid() const{
    return m_according_to_isValid;
}

QList<OAIHigherClassificationElement> OAITaxon::getHigherClassification() const {
    return m_higher_classification;
}
void OAITaxon::setHigherClassification(const QList<OAIHigherClassificationElement> &higher_classification) {
    m_higher_classification = higher_classification;
    m_higher_classification_isSet = true;
}

bool OAITaxon::is_higher_classification_Set() const{
    return m_higher_classification_isSet;
}

bool OAITaxon::is_higher_classification_Valid() const{
    return m_higher_classification_isValid;
}

QString OAITaxon::getIdentifier() const {
    return m_identifier;
}
void OAITaxon::setIdentifier(const QString &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAITaxon::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAITaxon::is_identifier_Valid() const{
    return m_identifier_isValid;
}

QList<OAISource> OAITaxon::getSources() const {
    return m_sources;
}
void OAITaxon::setSources(const QList<OAISource> &sources) {
    m_sources = sources;
    m_sources_isSet = true;
}

bool OAITaxon::is_sources_Set() const{
    return m_sources_isSet;
}

bool OAITaxon::is_sources_Valid() const{
    return m_sources_isValid;
}

OAITaxonName OAITaxon::getTaxonName() const {
    return m_taxon_name;
}
void OAITaxon::setTaxonName(const OAITaxonName &taxon_name) {
    m_taxon_name = taxon_name;
    m_taxon_name_isSet = true;
}

bool OAITaxon::is_taxon_name_Set() const{
    return m_taxon_name_isSet;
}

bool OAITaxon::is_taxon_name_Valid() const{
    return m_taxon_name_isValid;
}

QString OAITaxon::getTaxonomicStatus() const {
    return m_taxonomic_status;
}
void OAITaxon::setTaxonomicStatus(const QString &taxonomic_status) {
    m_taxonomic_status = taxonomic_status;
    m_taxonomic_status_isSet = true;
}

bool OAITaxon::is_taxonomic_status_Set() const{
    return m_taxonomic_status_isSet;
}

bool OAITaxon::is_taxonomic_status_Valid() const{
    return m_taxonomic_status_isValid;
}

QString OAITaxon::getUrl() const {
    return m_url;
}
void OAITaxon::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAITaxon::is_url_Set() const{
    return m_url_isSet;
}

bool OAITaxon::is_url_Valid() const{
    return m_url_isValid;
}

bool OAITaxon::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_according_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_higher_classification.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sources.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_taxon_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_taxonomic_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITaxon::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
