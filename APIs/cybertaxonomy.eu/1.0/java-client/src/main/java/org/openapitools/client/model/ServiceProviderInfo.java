/*
 * EU BON UTIS
 * The Unified Taxonomic Information Service (UTIS) is the taxonomic backbone for the EU-BON project
 *
 * The version of the OpenAPI document: 1.0
 * Contact: EditSupport@bgbm.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ServiceProviderInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:52.596892-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServiceProviderInfo {
  public static final String SERIALIZED_NAME_COPYRIGHT_URL = "copyrightUrl";
  @SerializedName(SERIALIZED_NAME_COPYRIGHT_URL)
  private String copyrightUrl;

  public static final String SERIALIZED_NAME_DOCUMENTATION_URL = "documentationUrl";
  @SerializedName(SERIALIZED_NAME_DOCUMENTATION_URL)
  private String documentationUrl;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_SEARCH_MODES = "searchModes";
  @SerializedName(SERIALIZED_NAME_SEARCH_MODES)
  private Set<String> searchModes = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_SUB_CHECKLISTS = "subChecklists";
  @SerializedName(SERIALIZED_NAME_SUB_CHECKLISTS)
  private List<ServiceProviderInfo> subChecklists = new ArrayList<>();

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public ServiceProviderInfo() {
  }

  public ServiceProviderInfo copyrightUrl(String copyrightUrl) {
    this.copyrightUrl = copyrightUrl;
    return this;
  }

  /**
   * Get copyrightUrl
   * @return copyrightUrl
   */
  @javax.annotation.Nullable
  public String getCopyrightUrl() {
    return copyrightUrl;
  }

  public void setCopyrightUrl(String copyrightUrl) {
    this.copyrightUrl = copyrightUrl;
  }


  public ServiceProviderInfo documentationUrl(String documentationUrl) {
    this.documentationUrl = documentationUrl;
    return this;
  }

  /**
   * Get documentationUrl
   * @return documentationUrl
   */
  @javax.annotation.Nullable
  public String getDocumentationUrl() {
    return documentationUrl;
  }

  public void setDocumentationUrl(String documentationUrl) {
    this.documentationUrl = documentationUrl;
  }


  public ServiceProviderInfo id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ServiceProviderInfo label(String label) {
    this.label = label;
    return this;
  }

  /**
   * Get label
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  public ServiceProviderInfo searchModes(Set<String> searchModes) {
    this.searchModes = searchModes;
    return this;
  }

  public ServiceProviderInfo addSearchModesItem(String searchModesItem) {
    if (this.searchModes == null) {
      this.searchModes = new LinkedHashSet<>();
    }
    this.searchModes.add(searchModesItem);
    return this;
  }

  /**
   * Set of the different SearchModes supported by the service provider and client implementation.Possible search modes are: scientificNameExact, scientificNameLike, vernacularName
   * @return searchModes
   */
  @javax.annotation.Nullable
  public Set<String> getSearchModes() {
    return searchModes;
  }

  public void setSearchModes(Set<String> searchModes) {
    this.searchModes = searchModes;
  }


  public ServiceProviderInfo subChecklists(List<ServiceProviderInfo> subChecklists) {
    this.subChecklists = subChecklists;
    return this;
  }

  public ServiceProviderInfo addSubChecklistsItem(ServiceProviderInfo subChecklistsItem) {
    if (this.subChecklists == null) {
      this.subChecklists = new ArrayList<>();
    }
    this.subChecklists.add(subChecklistsItem);
    return this;
  }

  /**
   * Get subChecklists
   * @return subChecklists
   */
  @javax.annotation.Nullable
  public List<ServiceProviderInfo> getSubChecklists() {
    return subChecklists;
  }

  public void setSubChecklists(List<ServiceProviderInfo> subChecklists) {
    this.subChecklists = subChecklists;
  }


  public ServiceProviderInfo version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceProviderInfo serviceProviderInfo = (ServiceProviderInfo) o;
    return Objects.equals(this.copyrightUrl, serviceProviderInfo.copyrightUrl) &&
        Objects.equals(this.documentationUrl, serviceProviderInfo.documentationUrl) &&
        Objects.equals(this.id, serviceProviderInfo.id) &&
        Objects.equals(this.label, serviceProviderInfo.label) &&
        Objects.equals(this.searchModes, serviceProviderInfo.searchModes) &&
        Objects.equals(this.subChecklists, serviceProviderInfo.subChecklists) &&
        Objects.equals(this.version, serviceProviderInfo.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(copyrightUrl, documentationUrl, id, label, searchModes, subChecklists, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceProviderInfo {\n");
    sb.append("    copyrightUrl: ").append(toIndentedString(copyrightUrl)).append("\n");
    sb.append("    documentationUrl: ").append(toIndentedString(documentationUrl)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    searchModes: ").append(toIndentedString(searchModes)).append("\n");
    sb.append("    subChecklists: ").append(toIndentedString(subChecklists)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("copyrightUrl");
    openapiFields.add("documentationUrl");
    openapiFields.add("id");
    openapiFields.add("label");
    openapiFields.add("searchModes");
    openapiFields.add("subChecklists");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServiceProviderInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServiceProviderInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceProviderInfo is not found in the empty JSON string", ServiceProviderInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServiceProviderInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServiceProviderInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("copyrightUrl") != null && !jsonObj.get("copyrightUrl").isJsonNull()) && !jsonObj.get("copyrightUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `copyrightUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("copyrightUrl").toString()));
      }
      if ((jsonObj.get("documentationUrl") != null && !jsonObj.get("documentationUrl").isJsonNull()) && !jsonObj.get("documentationUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentationUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentationUrl").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("searchModes") != null && !jsonObj.get("searchModes").isJsonNull() && !jsonObj.get("searchModes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `searchModes` to be an array in the JSON string but got `%s`", jsonObj.get("searchModes").toString()));
      }
      if (jsonObj.get("subChecklists") != null && !jsonObj.get("subChecklists").isJsonNull()) {
        JsonArray jsonArraysubChecklists = jsonObj.getAsJsonArray("subChecklists");
        if (jsonArraysubChecklists != null) {
          // ensure the json data is an array
          if (!jsonObj.get("subChecklists").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `subChecklists` to be an array in the JSON string but got `%s`", jsonObj.get("subChecklists").toString()));
          }

          // validate the optional field `subChecklists` (array)
          for (int i = 0; i < jsonArraysubChecklists.size(); i++) {
            ServiceProviderInfo.validateJsonElement(jsonArraysubChecklists.get(i));
          };
        }
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServiceProviderInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServiceProviderInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServiceProviderInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServiceProviderInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<ServiceProviderInfo>() {
           @Override
           public void write(JsonWriter out, ServiceProviderInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServiceProviderInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServiceProviderInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServiceProviderInfo
   * @throws IOException if the JSON string is invalid with respect to ServiceProviderInfo
   */
  public static ServiceProviderInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceProviderInfo.class);
  }

  /**
   * Convert an instance of ServiceProviderInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

