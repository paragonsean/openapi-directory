/*
 * EU BON UTIS
 * The Unified Taxonomic Information Service (UTIS) is the taxonomic backbone for the EU-BON project
 *
 * The version of the OpenAPI document: 1.0
 * Contact: EditSupport@bgbm.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ClientStatus;
import org.openapitools.client.model.Request;
import org.openapitools.client.model.Response;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Query
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:52.596892-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Query {
  public static final String SERIALIZED_NAME_CLIENT_STATUS = "clientStatus";
  @SerializedName(SERIALIZED_NAME_CLIENT_STATUS)
  private List<ClientStatus> clientStatus = new ArrayList<>();

  public static final String SERIALIZED_NAME_REQUEST = "request";
  @SerializedName(SERIALIZED_NAME_REQUEST)
  private Request request;

  public static final String SERIALIZED_NAME_RESPONSE = "response";
  @SerializedName(SERIALIZED_NAME_RESPONSE)
  private List<Response> response = new ArrayList<>();

  public Query() {
  }

  public Query clientStatus(List<ClientStatus> clientStatus) {
    this.clientStatus = clientStatus;
    return this;
  }

  public Query addClientStatusItem(ClientStatus clientStatusItem) {
    if (this.clientStatus == null) {
      this.clientStatus = new ArrayList<>();
    }
    this.clientStatus.add(clientStatusItem);
    return this;
  }

  /**
   * Get clientStatus
   * @return clientStatus
   */
  @javax.annotation.Nullable
  public List<ClientStatus> getClientStatus() {
    return clientStatus;
  }

  public void setClientStatus(List<ClientStatus> clientStatus) {
    this.clientStatus = clientStatus;
  }


  public Query request(Request request) {
    this.request = request;
    return this;
  }

  /**
   * Get request
   * @return request
   */
  @javax.annotation.Nullable
  public Request getRequest() {
    return request;
  }

  public void setRequest(Request request) {
    this.request = request;
  }


  public Query response(List<Response> response) {
    this.response = response;
    return this;
  }

  public Query addResponseItem(Response responseItem) {
    if (this.response == null) {
      this.response = new ArrayList<>();
    }
    this.response.add(responseItem);
    return this;
  }

  /**
   * Get response
   * @return response
   */
  @javax.annotation.Nullable
  public List<Response> getResponse() {
    return response;
  }

  public void setResponse(List<Response> response) {
    this.response = response;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Query query = (Query) o;
    return Objects.equals(this.clientStatus, query.clientStatus) &&
        Objects.equals(this.request, query.request) &&
        Objects.equals(this.response, query.response);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientStatus, request, response);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Query {\n");
    sb.append("    clientStatus: ").append(toIndentedString(clientStatus)).append("\n");
    sb.append("    request: ").append(toIndentedString(request)).append("\n");
    sb.append("    response: ").append(toIndentedString(response)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clientStatus");
    openapiFields.add("request");
    openapiFields.add("response");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Query
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Query.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Query is not found in the empty JSON string", Query.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Query.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Query` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("clientStatus") != null && !jsonObj.get("clientStatus").isJsonNull()) {
        JsonArray jsonArrayclientStatus = jsonObj.getAsJsonArray("clientStatus");
        if (jsonArrayclientStatus != null) {
          // ensure the json data is an array
          if (!jsonObj.get("clientStatus").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `clientStatus` to be an array in the JSON string but got `%s`", jsonObj.get("clientStatus").toString()));
          }

          // validate the optional field `clientStatus` (array)
          for (int i = 0; i < jsonArrayclientStatus.size(); i++) {
            ClientStatus.validateJsonElement(jsonArrayclientStatus.get(i));
          };
        }
      }
      // validate the optional field `request`
      if (jsonObj.get("request") != null && !jsonObj.get("request").isJsonNull()) {
        Request.validateJsonElement(jsonObj.get("request"));
      }
      if (jsonObj.get("response") != null && !jsonObj.get("response").isJsonNull()) {
        JsonArray jsonArrayresponse = jsonObj.getAsJsonArray("response");
        if (jsonArrayresponse != null) {
          // ensure the json data is an array
          if (!jsonObj.get("response").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `response` to be an array in the JSON string but got `%s`", jsonObj.get("response").toString()));
          }

          // validate the optional field `response` (array)
          for (int i = 0; i < jsonArrayresponse.size(); i++) {
            Response.validateJsonElement(jsonArrayresponse.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Query.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Query' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Query> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Query.class));

       return (TypeAdapter<T>) new TypeAdapter<Query>() {
           @Override
           public void write(JsonWriter out, Query value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Query read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Query given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Query
   * @throws IOException if the JSON string is invalid with respect to Query
   */
  public static Query fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Query.class);
  }

  /**
   * Convert an instance of Query to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

