/*
 * EU BON UTIS
 * The Unified Taxonomic Information Service (UTIS) is the taxonomic backbone for the EU-BON project
 *
 * The version of the OpenAPI document: 1.0
 * Contact: EditSupport@bgbm.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AtomisedName;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TaxonName
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:52.596892-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TaxonName {
  public static final String SERIALIZED_NAME_ATOMISED_NAME = "atomisedName";
  @SerializedName(SERIALIZED_NAME_ATOMISED_NAME)
  private AtomisedName atomisedName;

  public static final String SERIALIZED_NAME_AUTHORSHIP = "authorship";
  @SerializedName(SERIALIZED_NAME_AUTHORSHIP)
  private String authorship;

  public static final String SERIALIZED_NAME_CANONICAL_NAME = "canonicalName";
  @SerializedName(SERIALIZED_NAME_CANONICAL_NAME)
  private String canonicalName;

  public static final String SERIALIZED_NAME_NOMENCLATURAL_REFERENCE = "nomenclaturalReference";
  @SerializedName(SERIALIZED_NAME_NOMENCLATURAL_REFERENCE)
  private String nomenclaturalReference;

  public static final String SERIALIZED_NAME_RANK = "rank";
  @SerializedName(SERIALIZED_NAME_RANK)
  private String rank;

  public static final String SERIALIZED_NAME_SCIENTIFIC_NAME = "scientificName";
  @SerializedName(SERIALIZED_NAME_SCIENTIFIC_NAME)
  private String scientificName;

  public TaxonName() {
  }

  public TaxonName atomisedName(AtomisedName atomisedName) {
    this.atomisedName = atomisedName;
    return this;
  }

  /**
   * Get atomisedName
   * @return atomisedName
   */
  @javax.annotation.Nullable
  public AtomisedName getAtomisedName() {
    return atomisedName;
  }

  public void setAtomisedName(AtomisedName atomisedName) {
    this.atomisedName = atomisedName;
  }


  public TaxonName authorship(String authorship) {
    this.authorship = authorship;
    return this;
  }

  /**
   * Get authorship
   * @return authorship
   */
  @javax.annotation.Nullable
  public String getAuthorship() {
    return authorship;
  }

  public void setAuthorship(String authorship) {
    this.authorship = authorship;
  }


  public TaxonName canonicalName(String canonicalName) {
    this.canonicalName = canonicalName;
    return this;
  }

  /**
   * Canonical name string consisting of only nomenclatural information, i.e. no authorship or taxonomic hierarchy information with the exception of the necessary placements within Genus or Species.
   * @return canonicalName
   */
  @javax.annotation.Nullable
  public String getCanonicalName() {
    return canonicalName;
  }

  public void setCanonicalName(String canonicalName) {
    this.canonicalName = canonicalName;
  }


  public TaxonName nomenclaturalReference(String nomenclaturalReference) {
    this.nomenclaturalReference = nomenclaturalReference;
    return this;
  }

  /**
   * A reference for the publication in which the scientificName was originally established under the rules of the associated nomenclaturalCode.
   * @return nomenclaturalReference
   */
  @javax.annotation.Nullable
  public String getNomenclaturalReference() {
    return nomenclaturalReference;
  }

  public void setNomenclaturalReference(String nomenclaturalReference) {
    this.nomenclaturalReference = nomenclaturalReference;
  }


  public TaxonName rank(String rank) {
    this.rank = rank;
    return this;
  }

  /**
   * Get rank
   * @return rank
   */
  @javax.annotation.Nullable
  public String getRank() {
    return rank;
  }

  public void setRank(String rank) {
    this.rank = rank;
  }


  public TaxonName scientificName(String scientificName) {
    this.scientificName = scientificName;
    return this;
  }

  /**
   * The full scientific name, with authorship, publication date information and potentially further taxonomic information.
   * @return scientificName
   */
  @javax.annotation.Nullable
  public String getScientificName() {
    return scientificName;
  }

  public void setScientificName(String scientificName) {
    this.scientificName = scientificName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaxonName taxonName = (TaxonName) o;
    return Objects.equals(this.atomisedName, taxonName.atomisedName) &&
        Objects.equals(this.authorship, taxonName.authorship) &&
        Objects.equals(this.canonicalName, taxonName.canonicalName) &&
        Objects.equals(this.nomenclaturalReference, taxonName.nomenclaturalReference) &&
        Objects.equals(this.rank, taxonName.rank) &&
        Objects.equals(this.scientificName, taxonName.scientificName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(atomisedName, authorship, canonicalName, nomenclaturalReference, rank, scientificName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaxonName {\n");
    sb.append("    atomisedName: ").append(toIndentedString(atomisedName)).append("\n");
    sb.append("    authorship: ").append(toIndentedString(authorship)).append("\n");
    sb.append("    canonicalName: ").append(toIndentedString(canonicalName)).append("\n");
    sb.append("    nomenclaturalReference: ").append(toIndentedString(nomenclaturalReference)).append("\n");
    sb.append("    rank: ").append(toIndentedString(rank)).append("\n");
    sb.append("    scientificName: ").append(toIndentedString(scientificName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("atomisedName");
    openapiFields.add("authorship");
    openapiFields.add("canonicalName");
    openapiFields.add("nomenclaturalReference");
    openapiFields.add("rank");
    openapiFields.add("scientificName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TaxonName
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TaxonName.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TaxonName is not found in the empty JSON string", TaxonName.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TaxonName.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TaxonName` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `atomisedName`
      if (jsonObj.get("atomisedName") != null && !jsonObj.get("atomisedName").isJsonNull()) {
        AtomisedName.validateJsonElement(jsonObj.get("atomisedName"));
      }
      if ((jsonObj.get("authorship") != null && !jsonObj.get("authorship").isJsonNull()) && !jsonObj.get("authorship").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorship` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorship").toString()));
      }
      if ((jsonObj.get("canonicalName") != null && !jsonObj.get("canonicalName").isJsonNull()) && !jsonObj.get("canonicalName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `canonicalName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("canonicalName").toString()));
      }
      if ((jsonObj.get("nomenclaturalReference") != null && !jsonObj.get("nomenclaturalReference").isJsonNull()) && !jsonObj.get("nomenclaturalReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nomenclaturalReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nomenclaturalReference").toString()));
      }
      if ((jsonObj.get("rank") != null && !jsonObj.get("rank").isJsonNull()) && !jsonObj.get("rank").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rank` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rank").toString()));
      }
      if ((jsonObj.get("scientificName") != null && !jsonObj.get("scientificName").isJsonNull()) && !jsonObj.get("scientificName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scientificName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scientificName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TaxonName.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TaxonName' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TaxonName> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TaxonName.class));

       return (TypeAdapter<T>) new TypeAdapter<TaxonName>() {
           @Override
           public void write(JsonWriter out, TaxonName value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TaxonName read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TaxonName given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TaxonName
   * @throws IOException if the JSON string is invalid with respect to TaxonName
   */
  public static TaxonName fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TaxonName.class);
  }

  /**
   * Convert an instance of TaxonName to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

