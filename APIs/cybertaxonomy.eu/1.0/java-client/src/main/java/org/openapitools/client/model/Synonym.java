/*
 * EU BON UTIS
 * The Unified Taxonomic Information Service (UTIS) is the taxonomic backbone for the EU-BON project
 *
 * The version of the OpenAPI document: 1.0
 * Contact: EditSupport@bgbm.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Source;
import org.openapitools.client.model.TaxonName;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Synonym
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:52.596892-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Synonym {
  public static final String SERIALIZED_NAME_ACCORDING_TO = "accordingTo";
  @SerializedName(SERIALIZED_NAME_ACCORDING_TO)
  private String accordingTo;

  public static final String SERIALIZED_NAME_SOURCES = "sources";
  @SerializedName(SERIALIZED_NAME_SOURCES)
  private List<Source> sources = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAXON_NAME = "taxonName";
  @SerializedName(SERIALIZED_NAME_TAXON_NAME)
  private TaxonName taxonName;

  public static final String SERIALIZED_NAME_TAXONOMIC_STATUS = "taxonomicStatus";
  @SerializedName(SERIALIZED_NAME_TAXONOMIC_STATUS)
  private String taxonomicStatus;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public Synonym() {
  }

  public Synonym accordingTo(String accordingTo) {
    this.accordingTo = accordingTo;
    return this;
  }

  /**
   * The reference to the source in which the specific taxon concept circumscription is defined or implied - traditionally signified by the Latin &#39;sensu&#39; or &#39;sec.&#39; (from secundum, meaning &#39;according to&#39;).
   * @return accordingTo
   */
  @javax.annotation.Nullable
  public String getAccordingTo() {
    return accordingTo;
  }

  public void setAccordingTo(String accordingTo) {
    this.accordingTo = accordingTo;
  }


  public Synonym sources(List<Source> sources) {
    this.sources = sources;
    return this;
  }

  public Synonym addSourcesItem(Source sourcesItem) {
    if (this.sources == null) {
      this.sources = new ArrayList<>();
    }
    this.sources.add(sourcesItem);
    return this;
  }

  /**
   * Get sources
   * @return sources
   */
  @javax.annotation.Nullable
  public List<Source> getSources() {
    return sources;
  }

  public void setSources(List<Source> sources) {
    this.sources = sources;
  }


  public Synonym taxonName(TaxonName taxonName) {
    this.taxonName = taxonName;
    return this;
  }

  /**
   * Get taxonName
   * @return taxonName
   */
  @javax.annotation.Nullable
  public TaxonName getTaxonName() {
    return taxonName;
  }

  public void setTaxonName(TaxonName taxonName) {
    this.taxonName = taxonName;
  }


  public Synonym taxonomicStatus(String taxonomicStatus) {
    this.taxonomicStatus = taxonomicStatus;
    return this;
  }

  /**
   * The taxonomic status string like &#39;invalid&#39;, &#39;misapplied&#39;, &#39;homotypic synonym&#39;, &#39;accepted&#39;, &#39;synonym&#39;. Corresponds to http://rs.tdwg.org/dwc/terms/taxonomicStatus
   * @return taxonomicStatus
   */
  @javax.annotation.Nullable
  public String getTaxonomicStatus() {
    return taxonomicStatus;
  }

  public void setTaxonomicStatus(String taxonomicStatus) {
    this.taxonomicStatus = taxonomicStatus;
  }


  public Synonym url(String url) {
    this.url = url;
    return this;
  }

  /**
   * The URL pointing to the original record of the checklist provider.
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Synonym synonym = (Synonym) o;
    return Objects.equals(this.accordingTo, synonym.accordingTo) &&
        Objects.equals(this.sources, synonym.sources) &&
        Objects.equals(this.taxonName, synonym.taxonName) &&
        Objects.equals(this.taxonomicStatus, synonym.taxonomicStatus) &&
        Objects.equals(this.url, synonym.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accordingTo, sources, taxonName, taxonomicStatus, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Synonym {\n");
    sb.append("    accordingTo: ").append(toIndentedString(accordingTo)).append("\n");
    sb.append("    sources: ").append(toIndentedString(sources)).append("\n");
    sb.append("    taxonName: ").append(toIndentedString(taxonName)).append("\n");
    sb.append("    taxonomicStatus: ").append(toIndentedString(taxonomicStatus)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accordingTo");
    openapiFields.add("sources");
    openapiFields.add("taxonName");
    openapiFields.add("taxonomicStatus");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Synonym
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Synonym.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Synonym is not found in the empty JSON string", Synonym.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Synonym.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Synonym` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accordingTo") != null && !jsonObj.get("accordingTo").isJsonNull()) && !jsonObj.get("accordingTo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accordingTo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accordingTo").toString()));
      }
      if (jsonObj.get("sources") != null && !jsonObj.get("sources").isJsonNull()) {
        JsonArray jsonArraysources = jsonObj.getAsJsonArray("sources");
        if (jsonArraysources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sources` to be an array in the JSON string but got `%s`", jsonObj.get("sources").toString()));
          }

          // validate the optional field `sources` (array)
          for (int i = 0; i < jsonArraysources.size(); i++) {
            Source.validateJsonElement(jsonArraysources.get(i));
          };
        }
      }
      // validate the optional field `taxonName`
      if (jsonObj.get("taxonName") != null && !jsonObj.get("taxonName").isJsonNull()) {
        TaxonName.validateJsonElement(jsonObj.get("taxonName"));
      }
      if ((jsonObj.get("taxonomicStatus") != null && !jsonObj.get("taxonomicStatus").isJsonNull()) && !jsonObj.get("taxonomicStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxonomicStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxonomicStatus").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Synonym.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Synonym' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Synonym> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Synonym.class));

       return (TypeAdapter<T>) new TypeAdapter<Synonym>() {
           @Override
           public void write(JsonWriter out, Synonym value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Synonym read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Synonym given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Synonym
   * @throws IOException if the JSON string is invalid with respect to Synonym
   */
  public static Synonym fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Synonym.class);
  }

  /**
   * Convert an instance of Synonym to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

