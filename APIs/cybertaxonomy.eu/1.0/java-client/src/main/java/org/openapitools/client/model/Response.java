/*
 * EU BON UTIS
 * The Unified Taxonomic Information Service (UTIS) is the taxonomic backbone for the EU-BON project
 *
 * The version of the OpenAPI document: 1.0
 * Contact: EditSupport@bgbm.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OtherNames;
import org.openapitools.client.model.Synonym;
import org.openapitools.client.model.Taxon;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:52.596892-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Response {
  public static final String SERIALIZED_NAME_CHECKLIST = "checklist";
  @SerializedName(SERIALIZED_NAME_CHECKLIST)
  private String checklist;

  public static final String SERIALIZED_NAME_CHECKLIST_CITATION = "checklistCitation";
  @SerializedName(SERIALIZED_NAME_CHECKLIST_CITATION)
  private String checklistCitation;

  public static final String SERIALIZED_NAME_CHECKLIST_ID = "checklistId";
  @SerializedName(SERIALIZED_NAME_CHECKLIST_ID)
  private String checklistId;

  public static final String SERIALIZED_NAME_CHECKLIST_URL = "checklistUrl";
  @SerializedName(SERIALIZED_NAME_CHECKLIST_URL)
  private String checklistUrl;

  public static final String SERIALIZED_NAME_CHECKLIST_VERSION = "checklistVersion";
  @SerializedName(SERIALIZED_NAME_CHECKLIST_VERSION)
  private String checklistVersion;

  public static final String SERIALIZED_NAME_MATCHING_NAME_STRING = "matchingNameString";
  @SerializedName(SERIALIZED_NAME_MATCHING_NAME_STRING)
  private String matchingNameString;

  /**
   * Reports which of the names was matching the query string:  &#39;taxon&#39;, &#39;synonym&#39;, &#39;vernacularName&#39;, or &#39;otherName&#39;
   */
  @JsonAdapter(MatchingNameTypeEnum.Adapter.class)
  public enum MatchingNameTypeEnum {
    TAXON("TAXON"),
    
    SYNONYM("SYNONYM"),
    
    VERNACULAR_NAME("VERNACULAR_NAME"),
    
    OTHER_NAME("OTHER_NAME");

    private String value;

    MatchingNameTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MatchingNameTypeEnum fromValue(String value) {
      for (MatchingNameTypeEnum b : MatchingNameTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MatchingNameTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MatchingNameTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MatchingNameTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MatchingNameTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MatchingNameTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MATCHING_NAME_TYPE = "matchingNameType";
  @SerializedName(SERIALIZED_NAME_MATCHING_NAME_TYPE)
  private MatchingNameTypeEnum matchingNameType;

  public static final String SERIALIZED_NAME_OTHER_NAMES = "otherNames";
  @SerializedName(SERIALIZED_NAME_OTHER_NAMES)
  private List<OtherNames> otherNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_SYNONYMS = "synonyms";
  @SerializedName(SERIALIZED_NAME_SYNONYMS)
  private List<Synonym> synonyms = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAXON = "taxon";
  @SerializedName(SERIALIZED_NAME_TAXON)
  private Taxon taxon;

  public static final String SERIALIZED_NAME_VERNACULAR_NAMES = "vernacularNames";
  @SerializedName(SERIALIZED_NAME_VERNACULAR_NAMES)
  private List<String> vernacularNames = new ArrayList<>();

  public Response() {
  }

  public Response checklist(String checklist) {
    this.checklist = checklist;
    return this;
  }

  /**
   * Get checklist
   * @return checklist
   */
  @javax.annotation.Nullable
  public String getChecklist() {
    return checklist;
  }

  public void setChecklist(String checklist) {
    this.checklist = checklist;
  }


  public Response checklistCitation(String checklistCitation) {
    this.checklistCitation = checklistCitation;
    return this;
  }

  /**
   * Get checklistCitation
   * @return checklistCitation
   */
  @javax.annotation.Nullable
  public String getChecklistCitation() {
    return checklistCitation;
  }

  public void setChecklistCitation(String checklistCitation) {
    this.checklistCitation = checklistCitation;
  }


  public Response checklistId(String checklistId) {
    this.checklistId = checklistId;
    return this;
  }

  /**
   * Get checklistId
   * @return checklistId
   */
  @javax.annotation.Nullable
  public String getChecklistId() {
    return checklistId;
  }

  public void setChecklistId(String checklistId) {
    this.checklistId = checklistId;
  }


  public Response checklistUrl(String checklistUrl) {
    this.checklistUrl = checklistUrl;
    return this;
  }

  /**
   * Get checklistUrl
   * @return checklistUrl
   */
  @javax.annotation.Nullable
  public String getChecklistUrl() {
    return checklistUrl;
  }

  public void setChecklistUrl(String checklistUrl) {
    this.checklistUrl = checklistUrl;
  }


  public Response checklistVersion(String checklistVersion) {
    this.checklistVersion = checklistVersion;
    return this;
  }

  /**
   * Get checklistVersion
   * @return checklistVersion
   */
  @javax.annotation.Nullable
  public String getChecklistVersion() {
    return checklistVersion;
  }

  public void setChecklistVersion(String checklistVersion) {
    this.checklistVersion = checklistVersion;
  }


  public Response matchingNameString(String matchingNameString) {
    this.matchingNameString = matchingNameString;
    return this;
  }

  /**
   * Refers to the name string of the accepted taxon, synonym or otherName which was matching the query string
   * @return matchingNameString
   */
  @javax.annotation.Nullable
  public String getMatchingNameString() {
    return matchingNameString;
  }

  public void setMatchingNameString(String matchingNameString) {
    this.matchingNameString = matchingNameString;
  }


  public Response matchingNameType(MatchingNameTypeEnum matchingNameType) {
    this.matchingNameType = matchingNameType;
    return this;
  }

  /**
   * Reports which of the names was matching the query string:  &#39;taxon&#39;, &#39;synonym&#39;, &#39;vernacularName&#39;, or &#39;otherName&#39;
   * @return matchingNameType
   */
  @javax.annotation.Nullable
  public MatchingNameTypeEnum getMatchingNameType() {
    return matchingNameType;
  }

  public void setMatchingNameType(MatchingNameTypeEnum matchingNameType) {
    this.matchingNameType = matchingNameType;
  }


  public Response otherNames(List<OtherNames> otherNames) {
    this.otherNames = otherNames;
    return this;
  }

  public Response addOtherNamesItem(OtherNames otherNamesItem) {
    if (this.otherNames == null) {
      this.otherNames = new ArrayList<>();
    }
    this.otherNames.add(otherNamesItem);
    return this;
  }

  /**
   * Get otherNames
   * @return otherNames
   */
  @javax.annotation.Nullable
  public List<OtherNames> getOtherNames() {
    return otherNames;
  }

  public void setOtherNames(List<OtherNames> otherNames) {
    this.otherNames = otherNames;
  }


  public Response synonyms(List<Synonym> synonyms) {
    this.synonyms = synonyms;
    return this;
  }

  public Response addSynonymsItem(Synonym synonymsItem) {
    if (this.synonyms == null) {
      this.synonyms = new ArrayList<>();
    }
    this.synonyms.add(synonymsItem);
    return this;
  }

  /**
   * The list synonyms related to the accepted taxon
   * @return synonyms
   */
  @javax.annotation.Nullable
  public List<Synonym> getSynonyms() {
    return synonyms;
  }

  public void setSynonyms(List<Synonym> synonyms) {
    this.synonyms = synonyms;
  }


  public Response taxon(Taxon taxon) {
    this.taxon = taxon;
    return this;
  }

  /**
   * Get taxon
   * @return taxon
   */
  @javax.annotation.Nullable
  public Taxon getTaxon() {
    return taxon;
  }

  public void setTaxon(Taxon taxon) {
    this.taxon = taxon;
  }


  public Response vernacularNames(List<String> vernacularNames) {
    this.vernacularNames = vernacularNames;
    return this;
  }

  public Response addVernacularNamesItem(String vernacularNamesItem) {
    if (this.vernacularNames == null) {
      this.vernacularNames = new ArrayList<>();
    }
    this.vernacularNames.add(vernacularNamesItem);
    return this;
  }

  /**
   * A common or vernacular name.
   * @return vernacularNames
   */
  @javax.annotation.Nullable
  public List<String> getVernacularNames() {
    return vernacularNames;
  }

  public void setVernacularNames(List<String> vernacularNames) {
    this.vernacularNames = vernacularNames;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Response response = (Response) o;
    return Objects.equals(this.checklist, response.checklist) &&
        Objects.equals(this.checklistCitation, response.checklistCitation) &&
        Objects.equals(this.checklistId, response.checklistId) &&
        Objects.equals(this.checklistUrl, response.checklistUrl) &&
        Objects.equals(this.checklistVersion, response.checklistVersion) &&
        Objects.equals(this.matchingNameString, response.matchingNameString) &&
        Objects.equals(this.matchingNameType, response.matchingNameType) &&
        Objects.equals(this.otherNames, response.otherNames) &&
        Objects.equals(this.synonyms, response.synonyms) &&
        Objects.equals(this.taxon, response.taxon) &&
        Objects.equals(this.vernacularNames, response.vernacularNames);
  }

  @Override
  public int hashCode() {
    return Objects.hash(checklist, checklistCitation, checklistId, checklistUrl, checklistVersion, matchingNameString, matchingNameType, otherNames, synonyms, taxon, vernacularNames);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Response {\n");
    sb.append("    checklist: ").append(toIndentedString(checklist)).append("\n");
    sb.append("    checklistCitation: ").append(toIndentedString(checklistCitation)).append("\n");
    sb.append("    checklistId: ").append(toIndentedString(checklistId)).append("\n");
    sb.append("    checklistUrl: ").append(toIndentedString(checklistUrl)).append("\n");
    sb.append("    checklistVersion: ").append(toIndentedString(checklistVersion)).append("\n");
    sb.append("    matchingNameString: ").append(toIndentedString(matchingNameString)).append("\n");
    sb.append("    matchingNameType: ").append(toIndentedString(matchingNameType)).append("\n");
    sb.append("    otherNames: ").append(toIndentedString(otherNames)).append("\n");
    sb.append("    synonyms: ").append(toIndentedString(synonyms)).append("\n");
    sb.append("    taxon: ").append(toIndentedString(taxon)).append("\n");
    sb.append("    vernacularNames: ").append(toIndentedString(vernacularNames)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("checklist");
    openapiFields.add("checklistCitation");
    openapiFields.add("checklistId");
    openapiFields.add("checklistUrl");
    openapiFields.add("checklistVersion");
    openapiFields.add("matchingNameString");
    openapiFields.add("matchingNameType");
    openapiFields.add("otherNames");
    openapiFields.add("synonyms");
    openapiFields.add("taxon");
    openapiFields.add("vernacularNames");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Response is not found in the empty JSON string", Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("checklist") != null && !jsonObj.get("checklist").isJsonNull()) && !jsonObj.get("checklist").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `checklist` to be a primitive type in the JSON string but got `%s`", jsonObj.get("checklist").toString()));
      }
      if ((jsonObj.get("checklistCitation") != null && !jsonObj.get("checklistCitation").isJsonNull()) && !jsonObj.get("checklistCitation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `checklistCitation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("checklistCitation").toString()));
      }
      if ((jsonObj.get("checklistId") != null && !jsonObj.get("checklistId").isJsonNull()) && !jsonObj.get("checklistId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `checklistId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("checklistId").toString()));
      }
      if ((jsonObj.get("checklistUrl") != null && !jsonObj.get("checklistUrl").isJsonNull()) && !jsonObj.get("checklistUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `checklistUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("checklistUrl").toString()));
      }
      if ((jsonObj.get("checklistVersion") != null && !jsonObj.get("checklistVersion").isJsonNull()) && !jsonObj.get("checklistVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `checklistVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("checklistVersion").toString()));
      }
      if ((jsonObj.get("matchingNameString") != null && !jsonObj.get("matchingNameString").isJsonNull()) && !jsonObj.get("matchingNameString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `matchingNameString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("matchingNameString").toString()));
      }
      if ((jsonObj.get("matchingNameType") != null && !jsonObj.get("matchingNameType").isJsonNull()) && !jsonObj.get("matchingNameType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `matchingNameType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("matchingNameType").toString()));
      }
      // validate the optional field `matchingNameType`
      if (jsonObj.get("matchingNameType") != null && !jsonObj.get("matchingNameType").isJsonNull()) {
        MatchingNameTypeEnum.validateJsonElement(jsonObj.get("matchingNameType"));
      }
      if (jsonObj.get("otherNames") != null && !jsonObj.get("otherNames").isJsonNull()) {
        JsonArray jsonArrayotherNames = jsonObj.getAsJsonArray("otherNames");
        if (jsonArrayotherNames != null) {
          // ensure the json data is an array
          if (!jsonObj.get("otherNames").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `otherNames` to be an array in the JSON string but got `%s`", jsonObj.get("otherNames").toString()));
          }

          // validate the optional field `otherNames` (array)
          for (int i = 0; i < jsonArrayotherNames.size(); i++) {
            OtherNames.validateJsonElement(jsonArrayotherNames.get(i));
          };
        }
      }
      if (jsonObj.get("synonyms") != null && !jsonObj.get("synonyms").isJsonNull()) {
        JsonArray jsonArraysynonyms = jsonObj.getAsJsonArray("synonyms");
        if (jsonArraysynonyms != null) {
          // ensure the json data is an array
          if (!jsonObj.get("synonyms").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `synonyms` to be an array in the JSON string but got `%s`", jsonObj.get("synonyms").toString()));
          }

          // validate the optional field `synonyms` (array)
          for (int i = 0; i < jsonArraysynonyms.size(); i++) {
            Synonym.validateJsonElement(jsonArraysynonyms.get(i));
          };
        }
      }
      // validate the optional field `taxon`
      if (jsonObj.get("taxon") != null && !jsonObj.get("taxon").isJsonNull()) {
        Taxon.validateJsonElement(jsonObj.get("taxon"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("vernacularNames") != null && !jsonObj.get("vernacularNames").isJsonNull() && !jsonObj.get("vernacularNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `vernacularNames` to be an array in the JSON string but got `%s`", jsonObj.get("vernacularNames").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Response.class));

       return (TypeAdapter<T>) new TypeAdapter<Response>() {
           @Override
           public void write(JsonWriter out, Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Response
   * @throws IOException if the JSON string is invalid with respect to Response
   */
  public static Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Response.class);
  }

  /**
   * Convert an instance of Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

