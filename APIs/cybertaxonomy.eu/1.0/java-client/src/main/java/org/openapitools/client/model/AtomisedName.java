/*
 * EU BON UTIS
 * The Unified Taxonomic Information Service (UTIS) is the taxonomic backbone for the EU-BON project
 *
 * The version of the OpenAPI document: 1.0
 * Contact: EditSupport@bgbm.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AtomisedName
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:52.596892-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AtomisedName {
  public static final String SERIALIZED_NAME_GENUS_OR_UNINOMIAL = "genusOrUninomial";
  @SerializedName(SERIALIZED_NAME_GENUS_OR_UNINOMIAL)
  private String genusOrUninomial;

  public static final String SERIALIZED_NAME_INFRAGENERIC_EPITHET = "infragenericEpithet";
  @SerializedName(SERIALIZED_NAME_INFRAGENERIC_EPITHET)
  private String infragenericEpithet;

  public static final String SERIALIZED_NAME_INFRASPECIFIC_EPITHET = "infraspecificEpithet";
  @SerializedName(SERIALIZED_NAME_INFRASPECIFIC_EPITHET)
  private String infraspecificEpithet;

  public static final String SERIALIZED_NAME_SPECIFIC_EPITHET = "specificEpithet";
  @SerializedName(SERIALIZED_NAME_SPECIFIC_EPITHET)
  private String specificEpithet;

  public AtomisedName() {
  }

  public AtomisedName genusOrUninomial(String genusOrUninomial) {
    this.genusOrUninomial = genusOrUninomial;
    return this;
  }

  /**
   * Get genusOrUninomial
   * @return genusOrUninomial
   */
  @javax.annotation.Nullable
  public String getGenusOrUninomial() {
    return genusOrUninomial;
  }

  public void setGenusOrUninomial(String genusOrUninomial) {
    this.genusOrUninomial = genusOrUninomial;
  }


  public AtomisedName infragenericEpithet(String infragenericEpithet) {
    this.infragenericEpithet = infragenericEpithet;
    return this;
  }

  /**
   * Get infragenericEpithet
   * @return infragenericEpithet
   */
  @javax.annotation.Nullable
  public String getInfragenericEpithet() {
    return infragenericEpithet;
  }

  public void setInfragenericEpithet(String infragenericEpithet) {
    this.infragenericEpithet = infragenericEpithet;
  }


  public AtomisedName infraspecificEpithet(String infraspecificEpithet) {
    this.infraspecificEpithet = infraspecificEpithet;
    return this;
  }

  /**
   * Get infraspecificEpithet
   * @return infraspecificEpithet
   */
  @javax.annotation.Nullable
  public String getInfraspecificEpithet() {
    return infraspecificEpithet;
  }

  public void setInfraspecificEpithet(String infraspecificEpithet) {
    this.infraspecificEpithet = infraspecificEpithet;
  }


  public AtomisedName specificEpithet(String specificEpithet) {
    this.specificEpithet = specificEpithet;
    return this;
  }

  /**
   * Get specificEpithet
   * @return specificEpithet
   */
  @javax.annotation.Nullable
  public String getSpecificEpithet() {
    return specificEpithet;
  }

  public void setSpecificEpithet(String specificEpithet) {
    this.specificEpithet = specificEpithet;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AtomisedName atomisedName = (AtomisedName) o;
    return Objects.equals(this.genusOrUninomial, atomisedName.genusOrUninomial) &&
        Objects.equals(this.infragenericEpithet, atomisedName.infragenericEpithet) &&
        Objects.equals(this.infraspecificEpithet, atomisedName.infraspecificEpithet) &&
        Objects.equals(this.specificEpithet, atomisedName.specificEpithet);
  }

  @Override
  public int hashCode() {
    return Objects.hash(genusOrUninomial, infragenericEpithet, infraspecificEpithet, specificEpithet);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AtomisedName {\n");
    sb.append("    genusOrUninomial: ").append(toIndentedString(genusOrUninomial)).append("\n");
    sb.append("    infragenericEpithet: ").append(toIndentedString(infragenericEpithet)).append("\n");
    sb.append("    infraspecificEpithet: ").append(toIndentedString(infraspecificEpithet)).append("\n");
    sb.append("    specificEpithet: ").append(toIndentedString(specificEpithet)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("genusOrUninomial");
    openapiFields.add("infragenericEpithet");
    openapiFields.add("infraspecificEpithet");
    openapiFields.add("specificEpithet");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AtomisedName
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AtomisedName.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AtomisedName is not found in the empty JSON string", AtomisedName.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AtomisedName.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AtomisedName` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("genusOrUninomial") != null && !jsonObj.get("genusOrUninomial").isJsonNull()) && !jsonObj.get("genusOrUninomial").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `genusOrUninomial` to be a primitive type in the JSON string but got `%s`", jsonObj.get("genusOrUninomial").toString()));
      }
      if ((jsonObj.get("infragenericEpithet") != null && !jsonObj.get("infragenericEpithet").isJsonNull()) && !jsonObj.get("infragenericEpithet").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `infragenericEpithet` to be a primitive type in the JSON string but got `%s`", jsonObj.get("infragenericEpithet").toString()));
      }
      if ((jsonObj.get("infraspecificEpithet") != null && !jsonObj.get("infraspecificEpithet").isJsonNull()) && !jsonObj.get("infraspecificEpithet").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `infraspecificEpithet` to be a primitive type in the JSON string but got `%s`", jsonObj.get("infraspecificEpithet").toString()));
      }
      if ((jsonObj.get("specificEpithet") != null && !jsonObj.get("specificEpithet").isJsonNull()) && !jsonObj.get("specificEpithet").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `specificEpithet` to be a primitive type in the JSON string but got `%s`", jsonObj.get("specificEpithet").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AtomisedName.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AtomisedName' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AtomisedName> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AtomisedName.class));

       return (TypeAdapter<T>) new TypeAdapter<AtomisedName>() {
           @Override
           public void write(JsonWriter out, AtomisedName value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AtomisedName read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AtomisedName given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AtomisedName
   * @throws IOException if the JSON string is invalid with respect to AtomisedName
   */
  public static AtomisedName fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AtomisedName.class);
  }

  /**
   * Convert an instance of AtomisedName to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

