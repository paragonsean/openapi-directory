/**
 * EU BON UTIS
 * The Unified Taxonomic Information Service (UTIS) is the taxonomic backbone for the EU-BON project
 *
 * The version of the OpenAPI document: 1.0
 * Contact: EditSupport@bgbm.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Source from './Source';
import TaxonName from './TaxonName';

/**
 * The Synonym model module.
 * @module model/Synonym
 * @version 1.0
 */
class Synonym {
    /**
     * Constructs a new <code>Synonym</code>.
     * @alias module:model/Synonym
     */
    constructor() { 
        
        Synonym.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Synonym</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Synonym} obj Optional instance to populate.
     * @return {module:model/Synonym} The populated <code>Synonym</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Synonym();

            if (data.hasOwnProperty('accordingTo')) {
                obj['accordingTo'] = ApiClient.convertToType(data['accordingTo'], 'String');
            }
            if (data.hasOwnProperty('sources')) {
                obj['sources'] = ApiClient.convertToType(data['sources'], [Source]);
            }
            if (data.hasOwnProperty('taxonName')) {
                obj['taxonName'] = TaxonName.constructFromObject(data['taxonName']);
            }
            if (data.hasOwnProperty('taxonomicStatus')) {
                obj['taxonomicStatus'] = ApiClient.convertToType(data['taxonomicStatus'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Synonym</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Synonym</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accordingTo'] && !(typeof data['accordingTo'] === 'string' || data['accordingTo'] instanceof String)) {
            throw new Error("Expected the field `accordingTo` to be a primitive type in the JSON string but got " + data['accordingTo']);
        }
        if (data['sources']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sources'])) {
                throw new Error("Expected the field `sources` to be an array in the JSON data but got " + data['sources']);
            }
            // validate the optional field `sources` (array)
            for (const item of data['sources']) {
                Source.validateJSON(item);
            };
        }
        // validate the optional field `taxonName`
        if (data['taxonName']) { // data not null
          TaxonName.validateJSON(data['taxonName']);
        }
        // ensure the json data is a string
        if (data['taxonomicStatus'] && !(typeof data['taxonomicStatus'] === 'string' || data['taxonomicStatus'] instanceof String)) {
            throw new Error("Expected the field `taxonomicStatus` to be a primitive type in the JSON string but got " + data['taxonomicStatus']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * The reference to the source in which the specific taxon concept circumscription is defined or implied - traditionally signified by the Latin 'sensu' or 'sec.' (from secundum, meaning 'according to').
 * @member {String} accordingTo
 */
Synonym.prototype['accordingTo'] = undefined;

/**
 * @member {Array.<module:model/Source>} sources
 */
Synonym.prototype['sources'] = undefined;

/**
 * @member {module:model/TaxonName} taxonName
 */
Synonym.prototype['taxonName'] = undefined;

/**
 * The taxonomic status string like 'invalid', 'misapplied', 'homotypic synonym', 'accepted', 'synonym'. Corresponds to http://rs.tdwg.org/dwc/terms/taxonomicStatus
 * @member {String} taxonomicStatus
 */
Synonym.prototype['taxonomicStatus'] = undefined;

/**
 * The URL pointing to the original record of the checklist provider.
 * @member {String} url
 */
Synonym.prototype['url'] = undefined;






export default Synonym;

