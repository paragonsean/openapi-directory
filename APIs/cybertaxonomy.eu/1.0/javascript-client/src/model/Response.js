/**
 * EU BON UTIS
 * The Unified Taxonomic Information Service (UTIS) is the taxonomic backbone for the EU-BON project
 *
 * The version of the OpenAPI document: 1.0
 * Contact: EditSupport@bgbm.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OtherNames from './OtherNames';
import Synonym from './Synonym';
import Taxon from './Taxon';

/**
 * The Response model module.
 * @module model/Response
 * @version 1.0
 */
class Response {
    /**
     * Constructs a new <code>Response</code>.
     * @alias module:model/Response
     */
    constructor() { 
        
        Response.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Response} obj Optional instance to populate.
     * @return {module:model/Response} The populated <code>Response</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Response();

            if (data.hasOwnProperty('checklist')) {
                obj['checklist'] = ApiClient.convertToType(data['checklist'], 'String');
            }
            if (data.hasOwnProperty('checklistCitation')) {
                obj['checklistCitation'] = ApiClient.convertToType(data['checklistCitation'], 'String');
            }
            if (data.hasOwnProperty('checklistId')) {
                obj['checklistId'] = ApiClient.convertToType(data['checklistId'], 'String');
            }
            if (data.hasOwnProperty('checklistUrl')) {
                obj['checklistUrl'] = ApiClient.convertToType(data['checklistUrl'], 'String');
            }
            if (data.hasOwnProperty('checklistVersion')) {
                obj['checklistVersion'] = ApiClient.convertToType(data['checklistVersion'], 'String');
            }
            if (data.hasOwnProperty('matchingNameString')) {
                obj['matchingNameString'] = ApiClient.convertToType(data['matchingNameString'], 'String');
            }
            if (data.hasOwnProperty('matchingNameType')) {
                obj['matchingNameType'] = ApiClient.convertToType(data['matchingNameType'], 'String');
            }
            if (data.hasOwnProperty('otherNames')) {
                obj['otherNames'] = ApiClient.convertToType(data['otherNames'], [OtherNames]);
            }
            if (data.hasOwnProperty('synonyms')) {
                obj['synonyms'] = ApiClient.convertToType(data['synonyms'], [Synonym]);
            }
            if (data.hasOwnProperty('taxon')) {
                obj['taxon'] = Taxon.constructFromObject(data['taxon']);
            }
            if (data.hasOwnProperty('vernacularNames')) {
                obj['vernacularNames'] = ApiClient.convertToType(data['vernacularNames'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Response</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Response</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['checklist'] && !(typeof data['checklist'] === 'string' || data['checklist'] instanceof String)) {
            throw new Error("Expected the field `checklist` to be a primitive type in the JSON string but got " + data['checklist']);
        }
        // ensure the json data is a string
        if (data['checklistCitation'] && !(typeof data['checklistCitation'] === 'string' || data['checklistCitation'] instanceof String)) {
            throw new Error("Expected the field `checklistCitation` to be a primitive type in the JSON string but got " + data['checklistCitation']);
        }
        // ensure the json data is a string
        if (data['checklistId'] && !(typeof data['checklistId'] === 'string' || data['checklistId'] instanceof String)) {
            throw new Error("Expected the field `checklistId` to be a primitive type in the JSON string but got " + data['checklistId']);
        }
        // ensure the json data is a string
        if (data['checklistUrl'] && !(typeof data['checklistUrl'] === 'string' || data['checklistUrl'] instanceof String)) {
            throw new Error("Expected the field `checklistUrl` to be a primitive type in the JSON string but got " + data['checklistUrl']);
        }
        // ensure the json data is a string
        if (data['checklistVersion'] && !(typeof data['checklistVersion'] === 'string' || data['checklistVersion'] instanceof String)) {
            throw new Error("Expected the field `checklistVersion` to be a primitive type in the JSON string but got " + data['checklistVersion']);
        }
        // ensure the json data is a string
        if (data['matchingNameString'] && !(typeof data['matchingNameString'] === 'string' || data['matchingNameString'] instanceof String)) {
            throw new Error("Expected the field `matchingNameString` to be a primitive type in the JSON string but got " + data['matchingNameString']);
        }
        // ensure the json data is a string
        if (data['matchingNameType'] && !(typeof data['matchingNameType'] === 'string' || data['matchingNameType'] instanceof String)) {
            throw new Error("Expected the field `matchingNameType` to be a primitive type in the JSON string but got " + data['matchingNameType']);
        }
        if (data['otherNames']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['otherNames'])) {
                throw new Error("Expected the field `otherNames` to be an array in the JSON data but got " + data['otherNames']);
            }
            // validate the optional field `otherNames` (array)
            for (const item of data['otherNames']) {
                OtherNames.validateJSON(item);
            };
        }
        if (data['synonyms']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['synonyms'])) {
                throw new Error("Expected the field `synonyms` to be an array in the JSON data but got " + data['synonyms']);
            }
            // validate the optional field `synonyms` (array)
            for (const item of data['synonyms']) {
                Synonym.validateJSON(item);
            };
        }
        // validate the optional field `taxon`
        if (data['taxon']) { // data not null
          Taxon.validateJSON(data['taxon']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['vernacularNames'])) {
            throw new Error("Expected the field `vernacularNames` to be an array in the JSON data but got " + data['vernacularNames']);
        }

        return true;
    }


}



/**
 * @member {String} checklist
 */
Response.prototype['checklist'] = undefined;

/**
 * @member {String} checklistCitation
 */
Response.prototype['checklistCitation'] = undefined;

/**
 * @member {String} checklistId
 */
Response.prototype['checklistId'] = undefined;

/**
 * @member {String} checklistUrl
 */
Response.prototype['checklistUrl'] = undefined;

/**
 * @member {String} checklistVersion
 */
Response.prototype['checklistVersion'] = undefined;

/**
 * Refers to the name string of the accepted taxon, synonym or otherName which was matching the query string
 * @member {String} matchingNameString
 */
Response.prototype['matchingNameString'] = undefined;

/**
 * Reports which of the names was matching the query string:  'taxon', 'synonym', 'vernacularName', or 'otherName'
 * @member {module:model/Response.MatchingNameTypeEnum} matchingNameType
 */
Response.prototype['matchingNameType'] = undefined;

/**
 * @member {Array.<module:model/OtherNames>} otherNames
 */
Response.prototype['otherNames'] = undefined;

/**
 * The list synonyms related to the accepted taxon
 * @member {Array.<module:model/Synonym>} synonyms
 */
Response.prototype['synonyms'] = undefined;

/**
 * @member {module:model/Taxon} taxon
 */
Response.prototype['taxon'] = undefined;

/**
 * A common or vernacular name.
 * @member {Array.<String>} vernacularNames
 */
Response.prototype['vernacularNames'] = undefined;





/**
 * Allowed values for the <code>matchingNameType</code> property.
 * @enum {String}
 * @readonly
 */
Response['MatchingNameTypeEnum'] = {

    /**
     * value: "TAXON"
     * @const
     */
    "TAXON": "TAXON",

    /**
     * value: "SYNONYM"
     * @const
     */
    "SYNONYM": "SYNONYM",

    /**
     * value: "VERNACULAR_NAME"
     * @const
     */
    "VERNACULAR_NAME": "VERNACULAR_NAME",

    /**
     * value: "OTHER_NAME"
     * @const
     */
    "OTHER_NAME": "OTHER_NAME"
};



export default Response;

