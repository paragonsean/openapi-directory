/**
 * EU BON UTIS
 * The Unified Taxonomic Information Service (UTIS) is the taxonomic backbone for the EU-BON project
 *
 * The version of the OpenAPI document: 1.0
 * Contact: EditSupport@bgbm.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AtomisedName model module.
 * @module model/AtomisedName
 * @version 1.0
 */
class AtomisedName {
    /**
     * Constructs a new <code>AtomisedName</code>.
     * @alias module:model/AtomisedName
     */
    constructor() { 
        
        AtomisedName.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AtomisedName</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AtomisedName} obj Optional instance to populate.
     * @return {module:model/AtomisedName} The populated <code>AtomisedName</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AtomisedName();

            if (data.hasOwnProperty('genusOrUninomial')) {
                obj['genusOrUninomial'] = ApiClient.convertToType(data['genusOrUninomial'], 'String');
            }
            if (data.hasOwnProperty('infragenericEpithet')) {
                obj['infragenericEpithet'] = ApiClient.convertToType(data['infragenericEpithet'], 'String');
            }
            if (data.hasOwnProperty('infraspecificEpithet')) {
                obj['infraspecificEpithet'] = ApiClient.convertToType(data['infraspecificEpithet'], 'String');
            }
            if (data.hasOwnProperty('specificEpithet')) {
                obj['specificEpithet'] = ApiClient.convertToType(data['specificEpithet'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AtomisedName</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AtomisedName</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['genusOrUninomial'] && !(typeof data['genusOrUninomial'] === 'string' || data['genusOrUninomial'] instanceof String)) {
            throw new Error("Expected the field `genusOrUninomial` to be a primitive type in the JSON string but got " + data['genusOrUninomial']);
        }
        // ensure the json data is a string
        if (data['infragenericEpithet'] && !(typeof data['infragenericEpithet'] === 'string' || data['infragenericEpithet'] instanceof String)) {
            throw new Error("Expected the field `infragenericEpithet` to be a primitive type in the JSON string but got " + data['infragenericEpithet']);
        }
        // ensure the json data is a string
        if (data['infraspecificEpithet'] && !(typeof data['infraspecificEpithet'] === 'string' || data['infraspecificEpithet'] instanceof String)) {
            throw new Error("Expected the field `infraspecificEpithet` to be a primitive type in the JSON string but got " + data['infraspecificEpithet']);
        }
        // ensure the json data is a string
        if (data['specificEpithet'] && !(typeof data['specificEpithet'] === 'string' || data['specificEpithet'] instanceof String)) {
            throw new Error("Expected the field `specificEpithet` to be a primitive type in the JSON string but got " + data['specificEpithet']);
        }

        return true;
    }


}



/**
 * @member {String} genusOrUninomial
 */
AtomisedName.prototype['genusOrUninomial'] = undefined;

/**
 * @member {String} infragenericEpithet
 */
AtomisedName.prototype['infragenericEpithet'] = undefined;

/**
 * @member {String} infraspecificEpithet
 */
AtomisedName.prototype['infraspecificEpithet'] = undefined;

/**
 * @member {String} specificEpithet
 */
AtomisedName.prototype['specificEpithet'] = undefined;






export default AtomisedName;

