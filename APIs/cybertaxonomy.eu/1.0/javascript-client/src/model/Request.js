/**
 * EU BON UTIS
 * The Unified Taxonomic Information Service (UTIS) is the taxonomic backbone for the EU-BON project
 *
 * The version of the OpenAPI document: 1.0
 * Contact: EditSupport@bgbm.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Request model module.
 * @module model/Request
 * @version 1.0
 */
class Request {
    /**
     * Constructs a new <code>Request</code>.
     * @alias module:model/Request
     */
    constructor() { 
        
        Request.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Request</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Request} obj Optional instance to populate.
     * @return {module:model/Request} The populated <code>Request</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Request();

            if (data.hasOwnProperty('addSynonymy')) {
                obj['addSynonymy'] = ApiClient.convertToType(data['addSynonymy'], 'Boolean');
            }
            if (data.hasOwnProperty('queryString')) {
                obj['queryString'] = ApiClient.convertToType(data['queryString'], 'String');
            }
            if (data.hasOwnProperty('searchMode')) {
                obj['searchMode'] = ApiClient.convertToType(data['searchMode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Request</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Request</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['queryString'] && !(typeof data['queryString'] === 'string' || data['queryString'] instanceof String)) {
            throw new Error("Expected the field `queryString` to be a primitive type in the JSON string but got " + data['queryString']);
        }
        // ensure the json data is a string
        if (data['searchMode'] && !(typeof data['searchMode'] === 'string' || data['searchMode'] instanceof String)) {
            throw new Error("Expected the field `searchMode` to be a primitive type in the JSON string but got " + data['searchMode']);
        }

        return true;
    }


}



/**
 * Indicates whether the synonymy of the accepted taxon should be included into the response. Turning this option on may lead to an increased response time.
 * @member {Boolean} addSynonymy
 */
Request.prototype['addSynonymy'] = undefined;

/**
 * The query string to match a scientific name, vernacular name or identifier depending on the searchMode
 * @member {String} queryString
 */
Request.prototype['queryString'] = undefined;

/**
 * Specified the search mode to be usedPossible search modes are: scientificNameExact, scientificNameLike (begins with), vernacularNameExact, vernacularNameLike (contains).
 * @member {String} searchMode
 */
Request.prototype['searchMode'] = undefined;






export default Request;

