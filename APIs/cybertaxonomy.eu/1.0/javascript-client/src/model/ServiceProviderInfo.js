/**
 * EU BON UTIS
 * The Unified Taxonomic Information Service (UTIS) is the taxonomic backbone for the EU-BON project
 *
 * The version of the OpenAPI document: 1.0
 * Contact: EditSupport@bgbm.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ServiceProviderInfo model module.
 * @module model/ServiceProviderInfo
 * @version 1.0
 */
class ServiceProviderInfo {
    /**
     * Constructs a new <code>ServiceProviderInfo</code>.
     * @alias module:model/ServiceProviderInfo
     */
    constructor() { 
        
        ServiceProviderInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ServiceProviderInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServiceProviderInfo} obj Optional instance to populate.
     * @return {module:model/ServiceProviderInfo} The populated <code>ServiceProviderInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServiceProviderInfo();

            if (data.hasOwnProperty('copyrightUrl')) {
                obj['copyrightUrl'] = ApiClient.convertToType(data['copyrightUrl'], 'String');
            }
            if (data.hasOwnProperty('documentationUrl')) {
                obj['documentationUrl'] = ApiClient.convertToType(data['documentationUrl'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('searchModes')) {
                obj['searchModes'] = ApiClient.convertToType(data['searchModes'], ['String']);
            }
            if (data.hasOwnProperty('subChecklists')) {
                obj['subChecklists'] = ApiClient.convertToType(data['subChecklists'], [ServiceProviderInfo]);
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServiceProviderInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServiceProviderInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['copyrightUrl'] && !(typeof data['copyrightUrl'] === 'string' || data['copyrightUrl'] instanceof String)) {
            throw new Error("Expected the field `copyrightUrl` to be a primitive type in the JSON string but got " + data['copyrightUrl']);
        }
        // ensure the json data is a string
        if (data['documentationUrl'] && !(typeof data['documentationUrl'] === 'string' || data['documentationUrl'] instanceof String)) {
            throw new Error("Expected the field `documentationUrl` to be a primitive type in the JSON string but got " + data['documentationUrl']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['searchModes'])) {
            throw new Error("Expected the field `searchModes` to be an array in the JSON data but got " + data['searchModes']);
        }
        if (data['subChecklists']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['subChecklists'])) {
                throw new Error("Expected the field `subChecklists` to be an array in the JSON data but got " + data['subChecklists']);
            }
            // validate the optional field `subChecklists` (array)
            for (const item of data['subChecklists']) {
                ServiceProviderInfo.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}



/**
 * @member {String} copyrightUrl
 */
ServiceProviderInfo.prototype['copyrightUrl'] = undefined;

/**
 * @member {String} documentationUrl
 */
ServiceProviderInfo.prototype['documentationUrl'] = undefined;

/**
 * @member {String} id
 */
ServiceProviderInfo.prototype['id'] = undefined;

/**
 * @member {String} label
 */
ServiceProviderInfo.prototype['label'] = undefined;

/**
 * Set of the different SearchModes supported by the service provider and client implementation.Possible search modes are: scientificNameExact, scientificNameLike, vernacularName
 * @member {Array.<String>} searchModes
 */
ServiceProviderInfo.prototype['searchModes'] = undefined;

/**
 * @member {Array.<module:model/ServiceProviderInfo>} subChecklists
 */
ServiceProviderInfo.prototype['subChecklists'] = undefined;

/**
 * @member {String} version
 */
ServiceProviderInfo.prototype['version'] = undefined;






export default ServiceProviderInfo;

