/**
 * EU BON UTIS
 * The Unified Taxonomic Information Service (UTIS) is the taxonomic backbone for the EU-BON project
 *
 * The version of the OpenAPI document: 1.0
 * Contact: EditSupport@bgbm.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AtomisedName from './AtomisedName';

/**
 * The TaxonName model module.
 * @module model/TaxonName
 * @version 1.0
 */
class TaxonName {
    /**
     * Constructs a new <code>TaxonName</code>.
     * @alias module:model/TaxonName
     */
    constructor() { 
        
        TaxonName.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TaxonName</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TaxonName} obj Optional instance to populate.
     * @return {module:model/TaxonName} The populated <code>TaxonName</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TaxonName();

            if (data.hasOwnProperty('atomisedName')) {
                obj['atomisedName'] = AtomisedName.constructFromObject(data['atomisedName']);
            }
            if (data.hasOwnProperty('authorship')) {
                obj['authorship'] = ApiClient.convertToType(data['authorship'], 'String');
            }
            if (data.hasOwnProperty('canonicalName')) {
                obj['canonicalName'] = ApiClient.convertToType(data['canonicalName'], 'String');
            }
            if (data.hasOwnProperty('nomenclaturalReference')) {
                obj['nomenclaturalReference'] = ApiClient.convertToType(data['nomenclaturalReference'], 'String');
            }
            if (data.hasOwnProperty('rank')) {
                obj['rank'] = ApiClient.convertToType(data['rank'], 'String');
            }
            if (data.hasOwnProperty('scientificName')) {
                obj['scientificName'] = ApiClient.convertToType(data['scientificName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TaxonName</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TaxonName</code>.
     */
    static validateJSON(data) {
        // validate the optional field `atomisedName`
        if (data['atomisedName']) { // data not null
          AtomisedName.validateJSON(data['atomisedName']);
        }
        // ensure the json data is a string
        if (data['authorship'] && !(typeof data['authorship'] === 'string' || data['authorship'] instanceof String)) {
            throw new Error("Expected the field `authorship` to be a primitive type in the JSON string but got " + data['authorship']);
        }
        // ensure the json data is a string
        if (data['canonicalName'] && !(typeof data['canonicalName'] === 'string' || data['canonicalName'] instanceof String)) {
            throw new Error("Expected the field `canonicalName` to be a primitive type in the JSON string but got " + data['canonicalName']);
        }
        // ensure the json data is a string
        if (data['nomenclaturalReference'] && !(typeof data['nomenclaturalReference'] === 'string' || data['nomenclaturalReference'] instanceof String)) {
            throw new Error("Expected the field `nomenclaturalReference` to be a primitive type in the JSON string but got " + data['nomenclaturalReference']);
        }
        // ensure the json data is a string
        if (data['rank'] && !(typeof data['rank'] === 'string' || data['rank'] instanceof String)) {
            throw new Error("Expected the field `rank` to be a primitive type in the JSON string but got " + data['rank']);
        }
        // ensure the json data is a string
        if (data['scientificName'] && !(typeof data['scientificName'] === 'string' || data['scientificName'] instanceof String)) {
            throw new Error("Expected the field `scientificName` to be a primitive type in the JSON string but got " + data['scientificName']);
        }

        return true;
    }


}



/**
 * @member {module:model/AtomisedName} atomisedName
 */
TaxonName.prototype['atomisedName'] = undefined;

/**
 * @member {String} authorship
 */
TaxonName.prototype['authorship'] = undefined;

/**
 * Canonical name string consisting of only nomenclatural information, i.e. no authorship or taxonomic hierarchy information with the exception of the necessary placements within Genus or Species.
 * @member {String} canonicalName
 */
TaxonName.prototype['canonicalName'] = undefined;

/**
 * A reference for the publication in which the scientificName was originally established under the rules of the associated nomenclaturalCode.
 * @member {String} nomenclaturalReference
 */
TaxonName.prototype['nomenclaturalReference'] = undefined;

/**
 * @member {String} rank
 */
TaxonName.prototype['rank'] = undefined;

/**
 * The full scientific name, with authorship, publication date information and potentially further taxonomic information.
 * @member {String} scientificName
 */
TaxonName.prototype['scientificName'] = undefined;






export default TaxonName;

