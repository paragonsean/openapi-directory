/**
 * EU BON UTIS
 * The Unified Taxonomic Information Service (UTIS) is the taxonomic backbone for the EU-BON project
 *
 * The version of the OpenAPI document: 1.0
 * Contact: EditSupport@bgbm.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ClientStatus from './ClientStatus';
import Request from './Request';
import Response from './Response';

/**
 * The Query model module.
 * @module model/Query
 * @version 1.0
 */
class Query {
    /**
     * Constructs a new <code>Query</code>.
     * @alias module:model/Query
     */
    constructor() { 
        
        Query.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Query</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Query} obj Optional instance to populate.
     * @return {module:model/Query} The populated <code>Query</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Query();

            if (data.hasOwnProperty('clientStatus')) {
                obj['clientStatus'] = ApiClient.convertToType(data['clientStatus'], [ClientStatus]);
            }
            if (data.hasOwnProperty('request')) {
                obj['request'] = Request.constructFromObject(data['request']);
            }
            if (data.hasOwnProperty('response')) {
                obj['response'] = ApiClient.convertToType(data['response'], [Response]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Query</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Query</code>.
     */
    static validateJSON(data) {
        if (data['clientStatus']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['clientStatus'])) {
                throw new Error("Expected the field `clientStatus` to be an array in the JSON data but got " + data['clientStatus']);
            }
            // validate the optional field `clientStatus` (array)
            for (const item of data['clientStatus']) {
                ClientStatus.validateJSON(item);
            };
        }
        // validate the optional field `request`
        if (data['request']) { // data not null
          Request.validateJSON(data['request']);
        }
        if (data['response']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['response'])) {
                throw new Error("Expected the field `response` to be an array in the JSON data but got " + data['response']);
            }
            // validate the optional field `response` (array)
            for (const item of data['response']) {
                Response.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/ClientStatus>} clientStatus
 */
Query.prototype['clientStatus'] = undefined;

/**
 * @member {module:model/Request} request
 */
Query.prototype['request'] = undefined;

/**
 * @member {Array.<module:model/Response>} response
 */
Query.prototype['response'] = undefined;






export default Query;

