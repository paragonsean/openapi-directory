/**
 * EU BON UTIS
 * The Unified Taxonomic Information Service (UTIS) is the taxonomic backbone for the EU-BON project
 *
 * The version of the OpenAPI document: 1.0
 * Contact: EditSupport@bgbm.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import AtomisedName from './model/AtomisedName';
import ClientStatus from './model/ClientStatus';
import HigherClassificationElement from './model/HigherClassificationElement';
import OtherNames from './model/OtherNames';
import Query from './model/Query';
import Request from './model/Request';
import Response from './model/Response';
import ServiceProviderInfo from './model/ServiceProviderInfo';
import Source from './model/Source';
import Synonym from './model/Synonym';
import Taxon from './model/Taxon';
import TaxonName from './model/TaxonName';
import TnrMsg from './model/TnrMsg';
import UtisControllerApi from './api/UtisControllerApi';


/**
* The Unified Taxonomic Information Service (UTIS) is the taxonomic backbone for the EU-BON project.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var EuBonUtis = require('index'); // See note below*.
* var xxxSvc = new EuBonUtis.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new EuBonUtis.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new EuBonUtis.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new EuBonUtis.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The AtomisedName model constructor.
     * @property {module:model/AtomisedName}
     */
    AtomisedName,

    /**
     * The ClientStatus model constructor.
     * @property {module:model/ClientStatus}
     */
    ClientStatus,

    /**
     * The HigherClassificationElement model constructor.
     * @property {module:model/HigherClassificationElement}
     */
    HigherClassificationElement,

    /**
     * The OtherNames model constructor.
     * @property {module:model/OtherNames}
     */
    OtherNames,

    /**
     * The Query model constructor.
     * @property {module:model/Query}
     */
    Query,

    /**
     * The Request model constructor.
     * @property {module:model/Request}
     */
    Request,

    /**
     * The Response model constructor.
     * @property {module:model/Response}
     */
    Response,

    /**
     * The ServiceProviderInfo model constructor.
     * @property {module:model/ServiceProviderInfo}
     */
    ServiceProviderInfo,

    /**
     * The Source model constructor.
     * @property {module:model/Source}
     */
    Source,

    /**
     * The Synonym model constructor.
     * @property {module:model/Synonym}
     */
    Synonym,

    /**
     * The Taxon model constructor.
     * @property {module:model/Taxon}
     */
    Taxon,

    /**
     * The TaxonName model constructor.
     * @property {module:model/TaxonName}
     */
    TaxonName,

    /**
     * The TnrMsg model constructor.
     * @property {module:model/TnrMsg}
     */
    TnrMsg,

    /**
    * The UtisControllerApi service constructor.
    * @property {module:api/UtisControllerApi}
    */
    UtisControllerApi
};
