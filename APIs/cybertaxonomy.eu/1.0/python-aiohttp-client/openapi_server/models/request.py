# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Request(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, add_synonymy: bool=None, query_string: str=None, search_mode: str=None):
        """Request - a model defined in OpenAPI

        :param add_synonymy: The add_synonymy of this Request.
        :param query_string: The query_string of this Request.
        :param search_mode: The search_mode of this Request.
        """
        self.openapi_types = {
            'add_synonymy': bool,
            'query_string': str,
            'search_mode': str
        }

        self.attribute_map = {
            'add_synonymy': 'addSynonymy',
            'query_string': 'queryString',
            'search_mode': 'searchMode'
        }

        self._add_synonymy = add_synonymy
        self._query_string = query_string
        self._search_mode = search_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Request':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Request of this Request.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def add_synonymy(self):
        """Gets the add_synonymy of this Request.

        Indicates whether the synonymy of the accepted taxon should be included into the response. Turning this option on may lead to an increased response time.

        :return: The add_synonymy of this Request.
        :rtype: bool
        """
        return self._add_synonymy

    @add_synonymy.setter
    def add_synonymy(self, add_synonymy):
        """Sets the add_synonymy of this Request.

        Indicates whether the synonymy of the accepted taxon should be included into the response. Turning this option on may lead to an increased response time.

        :param add_synonymy: The add_synonymy of this Request.
        :type add_synonymy: bool
        """

        self._add_synonymy = add_synonymy

    @property
    def query_string(self):
        """Gets the query_string of this Request.

        The query string to match a scientific name, vernacular name or identifier depending on the searchMode

        :return: The query_string of this Request.
        :rtype: str
        """
        return self._query_string

    @query_string.setter
    def query_string(self, query_string):
        """Sets the query_string of this Request.

        The query string to match a scientific name, vernacular name or identifier depending on the searchMode

        :param query_string: The query_string of this Request.
        :type query_string: str
        """

        self._query_string = query_string

    @property
    def search_mode(self):
        """Gets the search_mode of this Request.

        Specified the search mode to be usedPossible search modes are: scientificNameExact, scientificNameLike (begins with), vernacularNameExact, vernacularNameLike (contains).

        :return: The search_mode of this Request.
        :rtype: str
        """
        return self._search_mode

    @search_mode.setter
    def search_mode(self, search_mode):
        """Sets the search_mode of this Request.

        Specified the search mode to be usedPossible search modes are: scientificNameExact, scientificNameLike (begins with), vernacularNameExact, vernacularNameLike (contains).

        :param search_mode: The search_mode of this Request.
        :type search_mode: str
        """

        self._search_mode = search_mode
