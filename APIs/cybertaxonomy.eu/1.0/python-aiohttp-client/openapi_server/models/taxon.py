# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.higher_classification_element import HigherClassificationElement
from openapi_server.models.source import Source
from openapi_server.models.taxon_name import TaxonName
from openapi_server import util


class Taxon(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, according_to: str=None, higher_classification: List[HigherClassificationElement]=None, identifier: str=None, sources: List[Source]=None, taxon_name: TaxonName=None, taxonomic_status: str=None, url: str=None):
        """Taxon - a model defined in OpenAPI

        :param according_to: The according_to of this Taxon.
        :param higher_classification: The higher_classification of this Taxon.
        :param identifier: The identifier of this Taxon.
        :param sources: The sources of this Taxon.
        :param taxon_name: The taxon_name of this Taxon.
        :param taxonomic_status: The taxonomic_status of this Taxon.
        :param url: The url of this Taxon.
        """
        self.openapi_types = {
            'according_to': str,
            'higher_classification': List[HigherClassificationElement],
            'identifier': str,
            'sources': List[Source],
            'taxon_name': TaxonName,
            'taxonomic_status': str,
            'url': str
        }

        self.attribute_map = {
            'according_to': 'accordingTo',
            'higher_classification': 'higherClassification',
            'identifier': 'identifier',
            'sources': 'sources',
            'taxon_name': 'taxonName',
            'taxonomic_status': 'taxonomicStatus',
            'url': 'url'
        }

        self._according_to = according_to
        self._higher_classification = higher_classification
        self._identifier = identifier
        self._sources = sources
        self._taxon_name = taxon_name
        self._taxonomic_status = taxonomic_status
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Taxon':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Taxon of this Taxon.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def according_to(self):
        """Gets the according_to of this Taxon.

        The reference to the source in which the specific taxon concept circumscription is defined or implied - traditionally signified by the Latin 'sensu' or 'sec.' (from secundum, meaning 'according to').

        :return: The according_to of this Taxon.
        :rtype: str
        """
        return self._according_to

    @according_to.setter
    def according_to(self, according_to):
        """Sets the according_to of this Taxon.

        The reference to the source in which the specific taxon concept circumscription is defined or implied - traditionally signified by the Latin 'sensu' or 'sec.' (from secundum, meaning 'according to').

        :param according_to: The according_to of this Taxon.
        :type according_to: str
        """

        self._according_to = according_to

    @property
    def higher_classification(self):
        """Gets the higher_classification of this Taxon.


        :return: The higher_classification of this Taxon.
        :rtype: List[HigherClassificationElement]
        """
        return self._higher_classification

    @higher_classification.setter
    def higher_classification(self, higher_classification):
        """Sets the higher_classification of this Taxon.


        :param higher_classification: The higher_classification of this Taxon.
        :type higher_classification: List[HigherClassificationElement]
        """

        self._higher_classification = higher_classification

    @property
    def identifier(self):
        """Gets the identifier of this Taxon.


        :return: The identifier of this Taxon.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this Taxon.


        :param identifier: The identifier of this Taxon.
        :type identifier: str
        """

        self._identifier = identifier

    @property
    def sources(self):
        """Gets the sources of this Taxon.


        :return: The sources of this Taxon.
        :rtype: List[Source]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this Taxon.


        :param sources: The sources of this Taxon.
        :type sources: List[Source]
        """

        self._sources = sources

    @property
    def taxon_name(self):
        """Gets the taxon_name of this Taxon.


        :return: The taxon_name of this Taxon.
        :rtype: TaxonName
        """
        return self._taxon_name

    @taxon_name.setter
    def taxon_name(self, taxon_name):
        """Sets the taxon_name of this Taxon.


        :param taxon_name: The taxon_name of this Taxon.
        :type taxon_name: TaxonName
        """

        self._taxon_name = taxon_name

    @property
    def taxonomic_status(self):
        """Gets the taxonomic_status of this Taxon.

        The taxonomic status string like 'invalid', 'misapplied', 'homotypic synonym', 'accepted', 'synonym'. Corresponds to http://rs.tdwg.org/dwc/terms/taxonomicStatus

        :return: The taxonomic_status of this Taxon.
        :rtype: str
        """
        return self._taxonomic_status

    @taxonomic_status.setter
    def taxonomic_status(self, taxonomic_status):
        """Sets the taxonomic_status of this Taxon.

        The taxonomic status string like 'invalid', 'misapplied', 'homotypic synonym', 'accepted', 'synonym'. Corresponds to http://rs.tdwg.org/dwc/terms/taxonomicStatus

        :param taxonomic_status: The taxonomic_status of this Taxon.
        :type taxonomic_status: str
        """

        self._taxonomic_status = taxonomic_status

    @property
    def url(self):
        """Gets the url of this Taxon.

        The URL pointing to the original record of the checklist provider.

        :return: The url of this Taxon.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Taxon.

        The URL pointing to the original record of the checklist provider.

        :param url: The url of this Taxon.
        :type url: str
        """

        self._url = url
