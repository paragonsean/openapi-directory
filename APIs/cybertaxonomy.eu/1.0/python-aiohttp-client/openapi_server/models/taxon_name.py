# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.atomised_name import AtomisedName
from openapi_server import util


class TaxonName(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, atomised_name: AtomisedName=None, authorship: str=None, canonical_name: str=None, nomenclatural_reference: str=None, rank: str=None, scientific_name: str=None):
        """TaxonName - a model defined in OpenAPI

        :param atomised_name: The atomised_name of this TaxonName.
        :param authorship: The authorship of this TaxonName.
        :param canonical_name: The canonical_name of this TaxonName.
        :param nomenclatural_reference: The nomenclatural_reference of this TaxonName.
        :param rank: The rank of this TaxonName.
        :param scientific_name: The scientific_name of this TaxonName.
        """
        self.openapi_types = {
            'atomised_name': AtomisedName,
            'authorship': str,
            'canonical_name': str,
            'nomenclatural_reference': str,
            'rank': str,
            'scientific_name': str
        }

        self.attribute_map = {
            'atomised_name': 'atomisedName',
            'authorship': 'authorship',
            'canonical_name': 'canonicalName',
            'nomenclatural_reference': 'nomenclaturalReference',
            'rank': 'rank',
            'scientific_name': 'scientificName'
        }

        self._atomised_name = atomised_name
        self._authorship = authorship
        self._canonical_name = canonical_name
        self._nomenclatural_reference = nomenclatural_reference
        self._rank = rank
        self._scientific_name = scientific_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaxonName':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TaxonName of this TaxonName.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def atomised_name(self):
        """Gets the atomised_name of this TaxonName.


        :return: The atomised_name of this TaxonName.
        :rtype: AtomisedName
        """
        return self._atomised_name

    @atomised_name.setter
    def atomised_name(self, atomised_name):
        """Sets the atomised_name of this TaxonName.


        :param atomised_name: The atomised_name of this TaxonName.
        :type atomised_name: AtomisedName
        """

        self._atomised_name = atomised_name

    @property
    def authorship(self):
        """Gets the authorship of this TaxonName.


        :return: The authorship of this TaxonName.
        :rtype: str
        """
        return self._authorship

    @authorship.setter
    def authorship(self, authorship):
        """Sets the authorship of this TaxonName.


        :param authorship: The authorship of this TaxonName.
        :type authorship: str
        """

        self._authorship = authorship

    @property
    def canonical_name(self):
        """Gets the canonical_name of this TaxonName.

        Canonical name string consisting of only nomenclatural information, i.e. no authorship or taxonomic hierarchy information with the exception of the necessary placements within Genus or Species.

        :return: The canonical_name of this TaxonName.
        :rtype: str
        """
        return self._canonical_name

    @canonical_name.setter
    def canonical_name(self, canonical_name):
        """Sets the canonical_name of this TaxonName.

        Canonical name string consisting of only nomenclatural information, i.e. no authorship or taxonomic hierarchy information with the exception of the necessary placements within Genus or Species.

        :param canonical_name: The canonical_name of this TaxonName.
        :type canonical_name: str
        """

        self._canonical_name = canonical_name

    @property
    def nomenclatural_reference(self):
        """Gets the nomenclatural_reference of this TaxonName.

        A reference for the publication in which the scientificName was originally established under the rules of the associated nomenclaturalCode.

        :return: The nomenclatural_reference of this TaxonName.
        :rtype: str
        """
        return self._nomenclatural_reference

    @nomenclatural_reference.setter
    def nomenclatural_reference(self, nomenclatural_reference):
        """Sets the nomenclatural_reference of this TaxonName.

        A reference for the publication in which the scientificName was originally established under the rules of the associated nomenclaturalCode.

        :param nomenclatural_reference: The nomenclatural_reference of this TaxonName.
        :type nomenclatural_reference: str
        """

        self._nomenclatural_reference = nomenclatural_reference

    @property
    def rank(self):
        """Gets the rank of this TaxonName.


        :return: The rank of this TaxonName.
        :rtype: str
        """
        return self._rank

    @rank.setter
    def rank(self, rank):
        """Sets the rank of this TaxonName.


        :param rank: The rank of this TaxonName.
        :type rank: str
        """

        self._rank = rank

    @property
    def scientific_name(self):
        """Gets the scientific_name of this TaxonName.

        The full scientific name, with authorship, publication date information and potentially further taxonomic information.

        :return: The scientific_name of this TaxonName.
        :rtype: str
        """
        return self._scientific_name

    @scientific_name.setter
    def scientific_name(self, scientific_name):
        """Sets the scientific_name of this TaxonName.

        The full scientific name, with authorship, publication date information and potentially further taxonomic information.

        :param scientific_name: The scientific_name of this TaxonName.
        :type scientific_name: str
        """

        self._scientific_name = scientific_name
