# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ServiceProviderInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, copyright_url: str=None, documentation_url: str=None, id: str=None, label: str=None, search_modes: list[str]=None, sub_checklists: List[ServiceProviderInfo]=None, version: str=None):
        """ServiceProviderInfo - a model defined in OpenAPI

        :param copyright_url: The copyright_url of this ServiceProviderInfo.
        :param documentation_url: The documentation_url of this ServiceProviderInfo.
        :param id: The id of this ServiceProviderInfo.
        :param label: The label of this ServiceProviderInfo.
        :param search_modes: The search_modes of this ServiceProviderInfo.
        :param sub_checklists: The sub_checklists of this ServiceProviderInfo.
        :param version: The version of this ServiceProviderInfo.
        """
        self.openapi_types = {
            'copyright_url': str,
            'documentation_url': str,
            'id': str,
            'label': str,
            'search_modes': list[str],
            'sub_checklists': List[ServiceProviderInfo],
            'version': str
        }

        self.attribute_map = {
            'copyright_url': 'copyrightUrl',
            'documentation_url': 'documentationUrl',
            'id': 'id',
            'label': 'label',
            'search_modes': 'searchModes',
            'sub_checklists': 'subChecklists',
            'version': 'version'
        }

        self._copyright_url = copyright_url
        self._documentation_url = documentation_url
        self._id = id
        self._label = label
        self._search_modes = search_modes
        self._sub_checklists = sub_checklists
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceProviderInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceProviderInfo of this ServiceProviderInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def copyright_url(self):
        """Gets the copyright_url of this ServiceProviderInfo.


        :return: The copyright_url of this ServiceProviderInfo.
        :rtype: str
        """
        return self._copyright_url

    @copyright_url.setter
    def copyright_url(self, copyright_url):
        """Sets the copyright_url of this ServiceProviderInfo.


        :param copyright_url: The copyright_url of this ServiceProviderInfo.
        :type copyright_url: str
        """

        self._copyright_url = copyright_url

    @property
    def documentation_url(self):
        """Gets the documentation_url of this ServiceProviderInfo.


        :return: The documentation_url of this ServiceProviderInfo.
        :rtype: str
        """
        return self._documentation_url

    @documentation_url.setter
    def documentation_url(self, documentation_url):
        """Sets the documentation_url of this ServiceProviderInfo.


        :param documentation_url: The documentation_url of this ServiceProviderInfo.
        :type documentation_url: str
        """

        self._documentation_url = documentation_url

    @property
    def id(self):
        """Gets the id of this ServiceProviderInfo.


        :return: The id of this ServiceProviderInfo.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ServiceProviderInfo.


        :param id: The id of this ServiceProviderInfo.
        :type id: str
        """

        self._id = id

    @property
    def label(self):
        """Gets the label of this ServiceProviderInfo.


        :return: The label of this ServiceProviderInfo.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this ServiceProviderInfo.


        :param label: The label of this ServiceProviderInfo.
        :type label: str
        """

        self._label = label

    @property
    def search_modes(self):
        """Gets the search_modes of this ServiceProviderInfo.

        Set of the different SearchModes supported by the service provider and client implementation.Possible search modes are: scientificNameExact, scientificNameLike, vernacularName

        :return: The search_modes of this ServiceProviderInfo.
        :rtype: list[str]
        """
        return self._search_modes

    @search_modes.setter
    def search_modes(self, search_modes):
        """Sets the search_modes of this ServiceProviderInfo.

        Set of the different SearchModes supported by the service provider and client implementation.Possible search modes are: scientificNameExact, scientificNameLike, vernacularName

        :param search_modes: The search_modes of this ServiceProviderInfo.
        :type search_modes: list[str]
        """

        self._search_modes = search_modes

    @property
    def sub_checklists(self):
        """Gets the sub_checklists of this ServiceProviderInfo.


        :return: The sub_checklists of this ServiceProviderInfo.
        :rtype: List[ServiceProviderInfo]
        """
        return self._sub_checklists

    @sub_checklists.setter
    def sub_checklists(self, sub_checklists):
        """Sets the sub_checklists of this ServiceProviderInfo.


        :param sub_checklists: The sub_checklists of this ServiceProviderInfo.
        :type sub_checklists: List[ServiceProviderInfo]
        """

        self._sub_checklists = sub_checklists

    @property
    def version(self):
        """Gets the version of this ServiceProviderInfo.


        :return: The version of this ServiceProviderInfo.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ServiceProviderInfo.


        :param version: The version of this ServiceProviderInfo.
        :type version: str
        """

        self._version = version
