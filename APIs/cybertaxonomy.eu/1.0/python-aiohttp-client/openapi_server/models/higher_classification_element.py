# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HigherClassificationElement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rank: str=None, scientific_name: str=None, taxon_id: str=None):
        """HigherClassificationElement - a model defined in OpenAPI

        :param rank: The rank of this HigherClassificationElement.
        :param scientific_name: The scientific_name of this HigherClassificationElement.
        :param taxon_id: The taxon_id of this HigherClassificationElement.
        """
        self.openapi_types = {
            'rank': str,
            'scientific_name': str,
            'taxon_id': str
        }

        self.attribute_map = {
            'rank': 'rank',
            'scientific_name': 'scientificName',
            'taxon_id': 'taxonID'
        }

        self._rank = rank
        self._scientific_name = scientific_name
        self._taxon_id = taxon_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HigherClassificationElement':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HigherClassificationElement of this HigherClassificationElement.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rank(self):
        """Gets the rank of this HigherClassificationElement.


        :return: The rank of this HigherClassificationElement.
        :rtype: str
        """
        return self._rank

    @rank.setter
    def rank(self, rank):
        """Sets the rank of this HigherClassificationElement.


        :param rank: The rank of this HigherClassificationElement.
        :type rank: str
        """

        self._rank = rank

    @property
    def scientific_name(self):
        """Gets the scientific_name of this HigherClassificationElement.


        :return: The scientific_name of this HigherClassificationElement.
        :rtype: str
        """
        return self._scientific_name

    @scientific_name.setter
    def scientific_name(self, scientific_name):
        """Sets the scientific_name of this HigherClassificationElement.


        :param scientific_name: The scientific_name of this HigherClassificationElement.
        :type scientific_name: str
        """

        self._scientific_name = scientific_name

    @property
    def taxon_id(self):
        """Gets the taxon_id of this HigherClassificationElement.


        :return: The taxon_id of this HigherClassificationElement.
        :rtype: str
        """
        return self._taxon_id

    @taxon_id.setter
    def taxon_id(self, taxon_id):
        """Sets the taxon_id of this HigherClassificationElement.


        :param taxon_id: The taxon_id of this HigherClassificationElement.
        :type taxon_id: str
        """

        self._taxon_id = taxon_id
