# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AtomisedName(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, genus_or_uninomial: str=None, infrageneric_epithet: str=None, infraspecific_epithet: str=None, specific_epithet: str=None):
        """AtomisedName - a model defined in OpenAPI

        :param genus_or_uninomial: The genus_or_uninomial of this AtomisedName.
        :param infrageneric_epithet: The infrageneric_epithet of this AtomisedName.
        :param infraspecific_epithet: The infraspecific_epithet of this AtomisedName.
        :param specific_epithet: The specific_epithet of this AtomisedName.
        """
        self.openapi_types = {
            'genus_or_uninomial': str,
            'infrageneric_epithet': str,
            'infraspecific_epithet': str,
            'specific_epithet': str
        }

        self.attribute_map = {
            'genus_or_uninomial': 'genusOrUninomial',
            'infrageneric_epithet': 'infragenericEpithet',
            'infraspecific_epithet': 'infraspecificEpithet',
            'specific_epithet': 'specificEpithet'
        }

        self._genus_or_uninomial = genus_or_uninomial
        self._infrageneric_epithet = infrageneric_epithet
        self._infraspecific_epithet = infraspecific_epithet
        self._specific_epithet = specific_epithet

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AtomisedName':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AtomisedName of this AtomisedName.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def genus_or_uninomial(self):
        """Gets the genus_or_uninomial of this AtomisedName.


        :return: The genus_or_uninomial of this AtomisedName.
        :rtype: str
        """
        return self._genus_or_uninomial

    @genus_or_uninomial.setter
    def genus_or_uninomial(self, genus_or_uninomial):
        """Sets the genus_or_uninomial of this AtomisedName.


        :param genus_or_uninomial: The genus_or_uninomial of this AtomisedName.
        :type genus_or_uninomial: str
        """

        self._genus_or_uninomial = genus_or_uninomial

    @property
    def infrageneric_epithet(self):
        """Gets the infrageneric_epithet of this AtomisedName.


        :return: The infrageneric_epithet of this AtomisedName.
        :rtype: str
        """
        return self._infrageneric_epithet

    @infrageneric_epithet.setter
    def infrageneric_epithet(self, infrageneric_epithet):
        """Sets the infrageneric_epithet of this AtomisedName.


        :param infrageneric_epithet: The infrageneric_epithet of this AtomisedName.
        :type infrageneric_epithet: str
        """

        self._infrageneric_epithet = infrageneric_epithet

    @property
    def infraspecific_epithet(self):
        """Gets the infraspecific_epithet of this AtomisedName.


        :return: The infraspecific_epithet of this AtomisedName.
        :rtype: str
        """
        return self._infraspecific_epithet

    @infraspecific_epithet.setter
    def infraspecific_epithet(self, infraspecific_epithet):
        """Sets the infraspecific_epithet of this AtomisedName.


        :param infraspecific_epithet: The infraspecific_epithet of this AtomisedName.
        :type infraspecific_epithet: str
        """

        self._infraspecific_epithet = infraspecific_epithet

    @property
    def specific_epithet(self):
        """Gets the specific_epithet of this AtomisedName.


        :return: The specific_epithet of this AtomisedName.
        :rtype: str
        """
        return self._specific_epithet

    @specific_epithet.setter
    def specific_epithet(self, specific_epithet):
        """Sets the specific_epithet of this AtomisedName.


        :param specific_epithet: The specific_epithet of this AtomisedName.
        :type specific_epithet: str
        """

        self._specific_epithet = specific_epithet
