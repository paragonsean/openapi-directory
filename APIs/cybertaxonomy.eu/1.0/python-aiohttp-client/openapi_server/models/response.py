# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.other_names import OtherNames
from openapi_server.models.synonym import Synonym
from openapi_server.models.taxon import Taxon
from openapi_server import util


class Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, checklist: str=None, checklist_citation: str=None, checklist_id: str=None, checklist_url: str=None, checklist_version: str=None, matching_name_string: str=None, matching_name_type: str=None, other_names: List[OtherNames]=None, synonyms: List[Synonym]=None, taxon: Taxon=None, vernacular_names: List[str]=None):
        """Response - a model defined in OpenAPI

        :param checklist: The checklist of this Response.
        :param checklist_citation: The checklist_citation of this Response.
        :param checklist_id: The checklist_id of this Response.
        :param checklist_url: The checklist_url of this Response.
        :param checklist_version: The checklist_version of this Response.
        :param matching_name_string: The matching_name_string of this Response.
        :param matching_name_type: The matching_name_type of this Response.
        :param other_names: The other_names of this Response.
        :param synonyms: The synonyms of this Response.
        :param taxon: The taxon of this Response.
        :param vernacular_names: The vernacular_names of this Response.
        """
        self.openapi_types = {
            'checklist': str,
            'checklist_citation': str,
            'checklist_id': str,
            'checklist_url': str,
            'checklist_version': str,
            'matching_name_string': str,
            'matching_name_type': str,
            'other_names': List[OtherNames],
            'synonyms': List[Synonym],
            'taxon': Taxon,
            'vernacular_names': List[str]
        }

        self.attribute_map = {
            'checklist': 'checklist',
            'checklist_citation': 'checklistCitation',
            'checklist_id': 'checklistId',
            'checklist_url': 'checklistUrl',
            'checklist_version': 'checklistVersion',
            'matching_name_string': 'matchingNameString',
            'matching_name_type': 'matchingNameType',
            'other_names': 'otherNames',
            'synonyms': 'synonyms',
            'taxon': 'taxon',
            'vernacular_names': 'vernacularNames'
        }

        self._checklist = checklist
        self._checklist_citation = checklist_citation
        self._checklist_id = checklist_id
        self._checklist_url = checklist_url
        self._checklist_version = checklist_version
        self._matching_name_string = matching_name_string
        self._matching_name_type = matching_name_type
        self._other_names = other_names
        self._synonyms = synonyms
        self._taxon = taxon
        self._vernacular_names = vernacular_names

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Response of this Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def checklist(self):
        """Gets the checklist of this Response.


        :return: The checklist of this Response.
        :rtype: str
        """
        return self._checklist

    @checklist.setter
    def checklist(self, checklist):
        """Sets the checklist of this Response.


        :param checklist: The checklist of this Response.
        :type checklist: str
        """

        self._checklist = checklist

    @property
    def checklist_citation(self):
        """Gets the checklist_citation of this Response.


        :return: The checklist_citation of this Response.
        :rtype: str
        """
        return self._checklist_citation

    @checklist_citation.setter
    def checklist_citation(self, checklist_citation):
        """Sets the checklist_citation of this Response.


        :param checklist_citation: The checklist_citation of this Response.
        :type checklist_citation: str
        """

        self._checklist_citation = checklist_citation

    @property
    def checklist_id(self):
        """Gets the checklist_id of this Response.


        :return: The checklist_id of this Response.
        :rtype: str
        """
        return self._checklist_id

    @checklist_id.setter
    def checklist_id(self, checklist_id):
        """Sets the checklist_id of this Response.


        :param checklist_id: The checklist_id of this Response.
        :type checklist_id: str
        """

        self._checklist_id = checklist_id

    @property
    def checklist_url(self):
        """Gets the checklist_url of this Response.


        :return: The checklist_url of this Response.
        :rtype: str
        """
        return self._checklist_url

    @checklist_url.setter
    def checklist_url(self, checklist_url):
        """Sets the checklist_url of this Response.


        :param checklist_url: The checklist_url of this Response.
        :type checklist_url: str
        """

        self._checklist_url = checklist_url

    @property
    def checklist_version(self):
        """Gets the checklist_version of this Response.


        :return: The checklist_version of this Response.
        :rtype: str
        """
        return self._checklist_version

    @checklist_version.setter
    def checklist_version(self, checklist_version):
        """Sets the checklist_version of this Response.


        :param checklist_version: The checklist_version of this Response.
        :type checklist_version: str
        """

        self._checklist_version = checklist_version

    @property
    def matching_name_string(self):
        """Gets the matching_name_string of this Response.

        Refers to the name string of the accepted taxon, synonym or otherName which was matching the query string

        :return: The matching_name_string of this Response.
        :rtype: str
        """
        return self._matching_name_string

    @matching_name_string.setter
    def matching_name_string(self, matching_name_string):
        """Sets the matching_name_string of this Response.

        Refers to the name string of the accepted taxon, synonym or otherName which was matching the query string

        :param matching_name_string: The matching_name_string of this Response.
        :type matching_name_string: str
        """

        self._matching_name_string = matching_name_string

    @property
    def matching_name_type(self):
        """Gets the matching_name_type of this Response.

        Reports which of the names was matching the query string:  'taxon', 'synonym', 'vernacularName', or 'otherName'

        :return: The matching_name_type of this Response.
        :rtype: str
        """
        return self._matching_name_type

    @matching_name_type.setter
    def matching_name_type(self, matching_name_type):
        """Sets the matching_name_type of this Response.

        Reports which of the names was matching the query string:  'taxon', 'synonym', 'vernacularName', or 'otherName'

        :param matching_name_type: The matching_name_type of this Response.
        :type matching_name_type: str
        """
        allowed_values = ["TAXON", "SYNONYM", "VERNACULAR_NAME", "OTHER_NAME"]  # noqa: E501
        if matching_name_type not in allowed_values:
            raise ValueError(
                "Invalid value for `matching_name_type` ({0}), must be one of {1}"
                .format(matching_name_type, allowed_values)
            )

        self._matching_name_type = matching_name_type

    @property
    def other_names(self):
        """Gets the other_names of this Response.


        :return: The other_names of this Response.
        :rtype: List[OtherNames]
        """
        return self._other_names

    @other_names.setter
    def other_names(self, other_names):
        """Sets the other_names of this Response.


        :param other_names: The other_names of this Response.
        :type other_names: List[OtherNames]
        """

        self._other_names = other_names

    @property
    def synonyms(self):
        """Gets the synonyms of this Response.

        The list synonyms related to the accepted taxon

        :return: The synonyms of this Response.
        :rtype: List[Synonym]
        """
        return self._synonyms

    @synonyms.setter
    def synonyms(self, synonyms):
        """Sets the synonyms of this Response.

        The list synonyms related to the accepted taxon

        :param synonyms: The synonyms of this Response.
        :type synonyms: List[Synonym]
        """

        self._synonyms = synonyms

    @property
    def taxon(self):
        """Gets the taxon of this Response.


        :return: The taxon of this Response.
        :rtype: Taxon
        """
        return self._taxon

    @taxon.setter
    def taxon(self, taxon):
        """Sets the taxon of this Response.


        :param taxon: The taxon of this Response.
        :type taxon: Taxon
        """

        self._taxon = taxon

    @property
    def vernacular_names(self):
        """Gets the vernacular_names of this Response.

        A common or vernacular name.

        :return: The vernacular_names of this Response.
        :rtype: List[str]
        """
        return self._vernacular_names

    @vernacular_names.setter
    def vernacular_names(self, vernacular_names):
        """Sets the vernacular_names of this Response.

        A common or vernacular name.

        :param vernacular_names: The vernacular_names of this Response.
        :type vernacular_names: List[str]
        """

        self._vernacular_names = vernacular_names
