/**
 * SpectroCoin Merchant
 * This is an API designed for merchants who are using SpectroCoin services and wishes to integrate them locally.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The OrderInformationClass model module.
 * @module model/OrderInformationClass
 * @version 1.0.0
 */
class OrderInformationClass {
    /**
     * Constructs a new <code>OrderInformationClass</code>.
     * @alias module:model/OrderInformationClass
     * @param depositAddress {String} Payment deposit address
     * @param orderId {String} Merchant provided or generated order id
     * @param orderRequestId {Number} Generated unique order request id
     * @param payAmount {Number} Amount of payment currency to be paid by merchant customer
     * @param payCurrency {String} Currency to be paid with
     * @param receiveAmount {Number} Amount of receive currency to be funded to merchant account
     * @param receiveCurrency {String} Currency to be funded to merchant account
     * @param redirectUrl {String} SpectroCoin payment window url where merchant customer may be redirected
     * @param validUntil {Number} Timestamp until when order is valid
     */
    constructor(depositAddress, orderId, orderRequestId, payAmount, payCurrency, receiveAmount, receiveCurrency, redirectUrl, validUntil) { 
        
        OrderInformationClass.initialize(this, depositAddress, orderId, orderRequestId, payAmount, payCurrency, receiveAmount, receiveCurrency, redirectUrl, validUntil);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, depositAddress, orderId, orderRequestId, payAmount, payCurrency, receiveAmount, receiveCurrency, redirectUrl, validUntil) { 
        obj['depositAddress'] = depositAddress;
        obj['orderId'] = orderId;
        obj['orderRequestId'] = orderRequestId;
        obj['payAmount'] = payAmount;
        obj['payCurrency'] = payCurrency;
        obj['receiveAmount'] = receiveAmount;
        obj['receiveCurrency'] = receiveCurrency;
        obj['redirectUrl'] = redirectUrl;
        obj['validUntil'] = validUntil;
    }

    /**
     * Constructs a <code>OrderInformationClass</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrderInformationClass} obj Optional instance to populate.
     * @return {module:model/OrderInformationClass} The populated <code>OrderInformationClass</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrderInformationClass();

            if (data.hasOwnProperty('depositAddress')) {
                obj['depositAddress'] = ApiClient.convertToType(data['depositAddress'], 'String');
            }
            if (data.hasOwnProperty('orderId')) {
                obj['orderId'] = ApiClient.convertToType(data['orderId'], 'String');
            }
            if (data.hasOwnProperty('orderRequestId')) {
                obj['orderRequestId'] = ApiClient.convertToType(data['orderRequestId'], 'Number');
            }
            if (data.hasOwnProperty('payAmount')) {
                obj['payAmount'] = ApiClient.convertToType(data['payAmount'], 'Number');
            }
            if (data.hasOwnProperty('payCurrency')) {
                obj['payCurrency'] = ApiClient.convertToType(data['payCurrency'], 'String');
            }
            if (data.hasOwnProperty('receiveAmount')) {
                obj['receiveAmount'] = ApiClient.convertToType(data['receiveAmount'], 'Number');
            }
            if (data.hasOwnProperty('receiveCurrency')) {
                obj['receiveCurrency'] = ApiClient.convertToType(data['receiveCurrency'], 'String');
            }
            if (data.hasOwnProperty('redirectUrl')) {
                obj['redirectUrl'] = ApiClient.convertToType(data['redirectUrl'], 'String');
            }
            if (data.hasOwnProperty('validUntil')) {
                obj['validUntil'] = ApiClient.convertToType(data['validUntil'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrderInformationClass</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrderInformationClass</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OrderInformationClass.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['depositAddress'] && !(typeof data['depositAddress'] === 'string' || data['depositAddress'] instanceof String)) {
            throw new Error("Expected the field `depositAddress` to be a primitive type in the JSON string but got " + data['depositAddress']);
        }
        // ensure the json data is a string
        if (data['orderId'] && !(typeof data['orderId'] === 'string' || data['orderId'] instanceof String)) {
            throw new Error("Expected the field `orderId` to be a primitive type in the JSON string but got " + data['orderId']);
        }
        // ensure the json data is a string
        if (data['payCurrency'] && !(typeof data['payCurrency'] === 'string' || data['payCurrency'] instanceof String)) {
            throw new Error("Expected the field `payCurrency` to be a primitive type in the JSON string but got " + data['payCurrency']);
        }
        // ensure the json data is a string
        if (data['receiveCurrency'] && !(typeof data['receiveCurrency'] === 'string' || data['receiveCurrency'] instanceof String)) {
            throw new Error("Expected the field `receiveCurrency` to be a primitive type in the JSON string but got " + data['receiveCurrency']);
        }
        // ensure the json data is a string
        if (data['redirectUrl'] && !(typeof data['redirectUrl'] === 'string' || data['redirectUrl'] instanceof String)) {
            throw new Error("Expected the field `redirectUrl` to be a primitive type in the JSON string but got " + data['redirectUrl']);
        }

        return true;
    }


}

OrderInformationClass.RequiredProperties = ["depositAddress", "orderId", "orderRequestId", "payAmount", "payCurrency", "receiveAmount", "receiveCurrency", "redirectUrl", "validUntil"];

/**
 * Payment deposit address
 * @member {String} depositAddress
 */
OrderInformationClass.prototype['depositAddress'] = undefined;

/**
 * Merchant provided or generated order id
 * @member {String} orderId
 */
OrderInformationClass.prototype['orderId'] = undefined;

/**
 * Generated unique order request id
 * @member {Number} orderRequestId
 */
OrderInformationClass.prototype['orderRequestId'] = undefined;

/**
 * Amount of payment currency to be paid by merchant customer
 * @member {Number} payAmount
 */
OrderInformationClass.prototype['payAmount'] = undefined;

/**
 * Currency to be paid with
 * @member {String} payCurrency
 */
OrderInformationClass.prototype['payCurrency'] = undefined;

/**
 * Amount of receive currency to be funded to merchant account
 * @member {Number} receiveAmount
 */
OrderInformationClass.prototype['receiveAmount'] = undefined;

/**
 * Currency to be funded to merchant account
 * @member {String} receiveCurrency
 */
OrderInformationClass.prototype['receiveCurrency'] = undefined;

/**
 * SpectroCoin payment window url where merchant customer may be redirected
 * @member {String} redirectUrl
 */
OrderInformationClass.prototype['redirectUrl'] = undefined;

/**
 * Timestamp until when order is valid
 * @member {Number} validUntil
 */
OrderInformationClass.prototype['validUntil'] = undefined;






export default OrderInformationClass;

