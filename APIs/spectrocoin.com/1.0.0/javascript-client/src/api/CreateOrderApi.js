/**
 * SpectroCoin Merchant
 * This is an API designed for merchants who are using SpectroCoin services and wishes to integrate them locally.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import OrderInformationClass from '../model/OrderInformationClass';

/**
* CreateOrder service.
* @module api/CreateOrderApi
* @version 1.0.0
*/
export default class CreateOrderApi {

    /**
    * Constructs a new CreateOrderApi. 
    * @alias module:api/CreateOrderApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createOrder operation.
     * @callback module:api/CreateOrderApi~createOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderInformationClass} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create merchant order
     * @param {Number} apiId API ID of specific API you have configured on your merchant account
     * @param {Number} merchantId Merchant ID assigned to your account
     * @param {String} payCurrency Currency of pay amount
     * @param {String} receiveCurrency Currency of receive amount
     * @param {String} sign Signature required for signing create order request
     * @param {Object} opts Optional parameters
     * @param {String} [callbackUrl] Url of merchant endpoint callback about order status to be returned
     * @param {module:model/String} [culture] Merchant customer culture payment window to be presented
     * @param {String} [description] Order description. Will be presented for merchant customer at payment window
     * @param {String} [failureUrl] Url of merchant page customer should be redirected after unsuccessful payment
     * @param {String} [orderId] Custom order ID. Must be unique per API. If not provided it will be generated.
     * @param {Number} [payAmount] Pay amount in pay currency of value which should be paid by merchant customer. If not provided receive amount will be used to calculate pay amount
     * @param {String} [payerEmail] Specified payer email.
     * @param {String} [payerName] Specified payer name.
     * @param {String} [payerSurname] Specified payer surname.
     * @param {Number} [receiveAmount] Receive amount in receive currency of value that merchant will be funded after merchant customers payment approval. If not provided pay amount will be used to calculate receive amount
     * @param {String} [successUrl] Url of merchant page customer should be redirected after successful payment
     * @param {module:api/CreateOrderApi~createOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderInformationClass}
     */
    createOrder(apiId, merchantId, payCurrency, receiveCurrency, sign, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling createOrder");
      }
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling createOrder");
      }
      // verify the required parameter 'payCurrency' is set
      if (payCurrency === undefined || payCurrency === null) {
        throw new Error("Missing the required parameter 'payCurrency' when calling createOrder");
      }
      // verify the required parameter 'receiveCurrency' is set
      if (receiveCurrency === undefined || receiveCurrency === null) {
        throw new Error("Missing the required parameter 'receiveCurrency' when calling createOrder");
      }
      // verify the required parameter 'sign' is set
      if (sign === undefined || sign === null) {
        throw new Error("Missing the required parameter 'sign' when calling createOrder");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'apiId': apiId,
        'callbackUrl': opts['callbackUrl'],
        'culture': opts['culture'],
        'description': opts['description'],
        'failureUrl': opts['failureUrl'],
        'merchantId': merchantId,
        'orderId': opts['orderId'],
        'payAmount': opts['payAmount'],
        'payCurrency': payCurrency,
        'payerEmail': opts['payerEmail'],
        'payerName': opts['payerName'],
        'payerSurname': opts['payerSurname'],
        'receiveAmount': opts['receiveAmount'],
        'receiveCurrency': receiveCurrency,
        'sign': sign,
        'successUrl': opts['successUrl']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = OrderInformationClass;
      return this.apiClient.callApi(
        '/api/createOrder', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
