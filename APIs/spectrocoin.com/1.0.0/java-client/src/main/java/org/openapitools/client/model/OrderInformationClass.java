/*
 * SpectroCoin Merchant
 * This is an API designed for merchants who are using SpectroCoin services and wishes to integrate them locally.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OrderInformationClass
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:45.110637-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OrderInformationClass {
  public static final String SERIALIZED_NAME_DEPOSIT_ADDRESS = "depositAddress";
  @SerializedName(SERIALIZED_NAME_DEPOSIT_ADDRESS)
  private String depositAddress;

  public static final String SERIALIZED_NAME_ORDER_ID = "orderId";
  @SerializedName(SERIALIZED_NAME_ORDER_ID)
  private String orderId;

  public static final String SERIALIZED_NAME_ORDER_REQUEST_ID = "orderRequestId";
  @SerializedName(SERIALIZED_NAME_ORDER_REQUEST_ID)
  private Long orderRequestId;

  public static final String SERIALIZED_NAME_PAY_AMOUNT = "payAmount";
  @SerializedName(SERIALIZED_NAME_PAY_AMOUNT)
  private BigDecimal payAmount;

  public static final String SERIALIZED_NAME_PAY_CURRENCY = "payCurrency";
  @SerializedName(SERIALIZED_NAME_PAY_CURRENCY)
  private String payCurrency;

  public static final String SERIALIZED_NAME_RECEIVE_AMOUNT = "receiveAmount";
  @SerializedName(SERIALIZED_NAME_RECEIVE_AMOUNT)
  private BigDecimal receiveAmount;

  public static final String SERIALIZED_NAME_RECEIVE_CURRENCY = "receiveCurrency";
  @SerializedName(SERIALIZED_NAME_RECEIVE_CURRENCY)
  private String receiveCurrency;

  public static final String SERIALIZED_NAME_REDIRECT_URL = "redirectUrl";
  @SerializedName(SERIALIZED_NAME_REDIRECT_URL)
  private String redirectUrl;

  public static final String SERIALIZED_NAME_VALID_UNTIL = "validUntil";
  @SerializedName(SERIALIZED_NAME_VALID_UNTIL)
  private Long validUntil;

  public OrderInformationClass() {
  }

  public OrderInformationClass depositAddress(String depositAddress) {
    this.depositAddress = depositAddress;
    return this;
  }

  /**
   * Payment deposit address
   * @return depositAddress
   */
  @javax.annotation.Nonnull
  public String getDepositAddress() {
    return depositAddress;
  }

  public void setDepositAddress(String depositAddress) {
    this.depositAddress = depositAddress;
  }


  public OrderInformationClass orderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

  /**
   * Merchant provided or generated order id
   * @return orderId
   */
  @javax.annotation.Nonnull
  public String getOrderId() {
    return orderId;
  }

  public void setOrderId(String orderId) {
    this.orderId = orderId;
  }


  public OrderInformationClass orderRequestId(Long orderRequestId) {
    this.orderRequestId = orderRequestId;
    return this;
  }

  /**
   * Generated unique order request id
   * @return orderRequestId
   */
  @javax.annotation.Nonnull
  public Long getOrderRequestId() {
    return orderRequestId;
  }

  public void setOrderRequestId(Long orderRequestId) {
    this.orderRequestId = orderRequestId;
  }


  public OrderInformationClass payAmount(BigDecimal payAmount) {
    this.payAmount = payAmount;
    return this;
  }

  /**
   * Amount of payment currency to be paid by merchant customer
   * @return payAmount
   */
  @javax.annotation.Nonnull
  public BigDecimal getPayAmount() {
    return payAmount;
  }

  public void setPayAmount(BigDecimal payAmount) {
    this.payAmount = payAmount;
  }


  public OrderInformationClass payCurrency(String payCurrency) {
    this.payCurrency = payCurrency;
    return this;
  }

  /**
   * Currency to be paid with
   * @return payCurrency
   */
  @javax.annotation.Nonnull
  public String getPayCurrency() {
    return payCurrency;
  }

  public void setPayCurrency(String payCurrency) {
    this.payCurrency = payCurrency;
  }


  public OrderInformationClass receiveAmount(BigDecimal receiveAmount) {
    this.receiveAmount = receiveAmount;
    return this;
  }

  /**
   * Amount of receive currency to be funded to merchant account
   * @return receiveAmount
   */
  @javax.annotation.Nonnull
  public BigDecimal getReceiveAmount() {
    return receiveAmount;
  }

  public void setReceiveAmount(BigDecimal receiveAmount) {
    this.receiveAmount = receiveAmount;
  }


  public OrderInformationClass receiveCurrency(String receiveCurrency) {
    this.receiveCurrency = receiveCurrency;
    return this;
  }

  /**
   * Currency to be funded to merchant account
   * @return receiveCurrency
   */
  @javax.annotation.Nonnull
  public String getReceiveCurrency() {
    return receiveCurrency;
  }

  public void setReceiveCurrency(String receiveCurrency) {
    this.receiveCurrency = receiveCurrency;
  }


  public OrderInformationClass redirectUrl(String redirectUrl) {
    this.redirectUrl = redirectUrl;
    return this;
  }

  /**
   * SpectroCoin payment window url where merchant customer may be redirected
   * @return redirectUrl
   */
  @javax.annotation.Nonnull
  public String getRedirectUrl() {
    return redirectUrl;
  }

  public void setRedirectUrl(String redirectUrl) {
    this.redirectUrl = redirectUrl;
  }


  public OrderInformationClass validUntil(Long validUntil) {
    this.validUntil = validUntil;
    return this;
  }

  /**
   * Timestamp until when order is valid
   * @return validUntil
   */
  @javax.annotation.Nonnull
  public Long getValidUntil() {
    return validUntil;
  }

  public void setValidUntil(Long validUntil) {
    this.validUntil = validUntil;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderInformationClass orderInformationClass = (OrderInformationClass) o;
    return Objects.equals(this.depositAddress, orderInformationClass.depositAddress) &&
        Objects.equals(this.orderId, orderInformationClass.orderId) &&
        Objects.equals(this.orderRequestId, orderInformationClass.orderRequestId) &&
        Objects.equals(this.payAmount, orderInformationClass.payAmount) &&
        Objects.equals(this.payCurrency, orderInformationClass.payCurrency) &&
        Objects.equals(this.receiveAmount, orderInformationClass.receiveAmount) &&
        Objects.equals(this.receiveCurrency, orderInformationClass.receiveCurrency) &&
        Objects.equals(this.redirectUrl, orderInformationClass.redirectUrl) &&
        Objects.equals(this.validUntil, orderInformationClass.validUntil);
  }

  @Override
  public int hashCode() {
    return Objects.hash(depositAddress, orderId, orderRequestId, payAmount, payCurrency, receiveAmount, receiveCurrency, redirectUrl, validUntil);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderInformationClass {\n");
    sb.append("    depositAddress: ").append(toIndentedString(depositAddress)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    orderRequestId: ").append(toIndentedString(orderRequestId)).append("\n");
    sb.append("    payAmount: ").append(toIndentedString(payAmount)).append("\n");
    sb.append("    payCurrency: ").append(toIndentedString(payCurrency)).append("\n");
    sb.append("    receiveAmount: ").append(toIndentedString(receiveAmount)).append("\n");
    sb.append("    receiveCurrency: ").append(toIndentedString(receiveCurrency)).append("\n");
    sb.append("    redirectUrl: ").append(toIndentedString(redirectUrl)).append("\n");
    sb.append("    validUntil: ").append(toIndentedString(validUntil)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("depositAddress");
    openapiFields.add("orderId");
    openapiFields.add("orderRequestId");
    openapiFields.add("payAmount");
    openapiFields.add("payCurrency");
    openapiFields.add("receiveAmount");
    openapiFields.add("receiveCurrency");
    openapiFields.add("redirectUrl");
    openapiFields.add("validUntil");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("depositAddress");
    openapiRequiredFields.add("orderId");
    openapiRequiredFields.add("orderRequestId");
    openapiRequiredFields.add("payAmount");
    openapiRequiredFields.add("payCurrency");
    openapiRequiredFields.add("receiveAmount");
    openapiRequiredFields.add("receiveCurrency");
    openapiRequiredFields.add("redirectUrl");
    openapiRequiredFields.add("validUntil");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrderInformationClass
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderInformationClass.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderInformationClass is not found in the empty JSON string", OrderInformationClass.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrderInformationClass.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderInformationClass` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OrderInformationClass.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("depositAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `depositAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("depositAddress").toString()));
      }
      if (!jsonObj.get("orderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderId").toString()));
      }
      if (!jsonObj.get("payCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payCurrency").toString()));
      }
      if (!jsonObj.get("receiveCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receiveCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receiveCurrency").toString()));
      }
      if (!jsonObj.get("redirectUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirectUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redirectUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderInformationClass.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderInformationClass' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderInformationClass> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderInformationClass.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderInformationClass>() {
           @Override
           public void write(JsonWriter out, OrderInformationClass value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderInformationClass read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrderInformationClass given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrderInformationClass
   * @throws IOException if the JSON string is invalid with respect to OrderInformationClass
   */
  public static OrderInformationClass fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderInformationClass.class);
  }

  /**
   * Convert an instance of OrderInformationClass to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

