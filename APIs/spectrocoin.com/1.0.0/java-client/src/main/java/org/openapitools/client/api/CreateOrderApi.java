/*
 * SpectroCoin Merchant
 * This is an API designed for merchants who are using SpectroCoin services and wishes to integrate them locally.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.OrderInformationClass;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CreateOrderApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CreateOrderApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CreateOrderApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createOrder
     * @param apiId API ID of specific API you have configured on your merchant account (required)
     * @param merchantId Merchant ID assigned to your account (required)
     * @param payCurrency Currency of pay amount (required)
     * @param receiveCurrency Currency of receive amount (required)
     * @param sign Signature required for signing create order request (required)
     * @param callbackUrl Url of merchant endpoint callback about order status to be returned (optional)
     * @param culture Merchant customer culture payment window to be presented (optional)
     * @param description Order description. Will be presented for merchant customer at payment window (optional)
     * @param failureUrl Url of merchant page customer should be redirected after unsuccessful payment (optional)
     * @param orderId Custom order ID. Must be unique per API. If not provided it will be generated. (optional)
     * @param payAmount Pay amount in pay currency of value which should be paid by merchant customer. If not provided receive amount will be used to calculate pay amount (optional)
     * @param payerEmail Specified payer email. (optional)
     * @param payerName Specified payer name. (optional)
     * @param payerSurname Specified payer surname. (optional)
     * @param receiveAmount Receive amount in receive currency of value that merchant will be funded after merchant customers payment approval. If not provided pay amount will be used to calculate receive amount (optional)
     * @param successUrl Url of merchant page customer should be redirected after successful payment (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrderCall(Long apiId, Long merchantId, String payCurrency, String receiveCurrency, String sign, String callbackUrl, String culture, String description, String failureUrl, String orderId, BigDecimal payAmount, String payerEmail, String payerName, String payerSurname, BigDecimal receiveAmount, String successUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/createOrder";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiId != null) {
            localVarFormParams.put("apiId", apiId);
        }

        if (callbackUrl != null) {
            localVarFormParams.put("callbackUrl", callbackUrl);
        }

        if (culture != null) {
            localVarFormParams.put("culture", culture);
        }

        if (description != null) {
            localVarFormParams.put("description", description);
        }

        if (failureUrl != null) {
            localVarFormParams.put("failureUrl", failureUrl);
        }

        if (merchantId != null) {
            localVarFormParams.put("merchantId", merchantId);
        }

        if (orderId != null) {
            localVarFormParams.put("orderId", orderId);
        }

        if (payAmount != null) {
            localVarFormParams.put("payAmount", payAmount);
        }

        if (payCurrency != null) {
            localVarFormParams.put("payCurrency", payCurrency);
        }

        if (payerEmail != null) {
            localVarFormParams.put("payerEmail", payerEmail);
        }

        if (payerName != null) {
            localVarFormParams.put("payerName", payerName);
        }

        if (payerSurname != null) {
            localVarFormParams.put("payerSurname", payerSurname);
        }

        if (receiveAmount != null) {
            localVarFormParams.put("receiveAmount", receiveAmount);
        }

        if (receiveCurrency != null) {
            localVarFormParams.put("receiveCurrency", receiveCurrency);
        }

        if (sign != null) {
            localVarFormParams.put("sign", sign);
        }

        if (successUrl != null) {
            localVarFormParams.put("successUrl", successUrl);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrderValidateBeforeCall(Long apiId, Long merchantId, String payCurrency, String receiveCurrency, String sign, String callbackUrl, String culture, String description, String failureUrl, String orderId, BigDecimal payAmount, String payerEmail, String payerName, String payerSurname, BigDecimal receiveAmount, String successUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiId' is set
        if (apiId == null) {
            throw new ApiException("Missing the required parameter 'apiId' when calling createOrder(Async)");
        }

        // verify the required parameter 'merchantId' is set
        if (merchantId == null) {
            throw new ApiException("Missing the required parameter 'merchantId' when calling createOrder(Async)");
        }

        // verify the required parameter 'payCurrency' is set
        if (payCurrency == null) {
            throw new ApiException("Missing the required parameter 'payCurrency' when calling createOrder(Async)");
        }

        // verify the required parameter 'receiveCurrency' is set
        if (receiveCurrency == null) {
            throw new ApiException("Missing the required parameter 'receiveCurrency' when calling createOrder(Async)");
        }

        // verify the required parameter 'sign' is set
        if (sign == null) {
            throw new ApiException("Missing the required parameter 'sign' when calling createOrder(Async)");
        }

        return createOrderCall(apiId, merchantId, payCurrency, receiveCurrency, sign, callbackUrl, culture, description, failureUrl, orderId, payAmount, payerEmail, payerName, payerSurname, receiveAmount, successUrl, _callback);

    }

    /**
     * Create merchant order
     * 
     * @param apiId API ID of specific API you have configured on your merchant account (required)
     * @param merchantId Merchant ID assigned to your account (required)
     * @param payCurrency Currency of pay amount (required)
     * @param receiveCurrency Currency of receive amount (required)
     * @param sign Signature required for signing create order request (required)
     * @param callbackUrl Url of merchant endpoint callback about order status to be returned (optional)
     * @param culture Merchant customer culture payment window to be presented (optional)
     * @param description Order description. Will be presented for merchant customer at payment window (optional)
     * @param failureUrl Url of merchant page customer should be redirected after unsuccessful payment (optional)
     * @param orderId Custom order ID. Must be unique per API. If not provided it will be generated. (optional)
     * @param payAmount Pay amount in pay currency of value which should be paid by merchant customer. If not provided receive amount will be used to calculate pay amount (optional)
     * @param payerEmail Specified payer email. (optional)
     * @param payerName Specified payer name. (optional)
     * @param payerSurname Specified payer surname. (optional)
     * @param receiveAmount Receive amount in receive currency of value that merchant will be funded after merchant customers payment approval. If not provided pay amount will be used to calculate receive amount (optional)
     * @param successUrl Url of merchant page customer should be redirected after successful payment (optional)
     * @return OrderInformationClass
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public OrderInformationClass createOrder(Long apiId, Long merchantId, String payCurrency, String receiveCurrency, String sign, String callbackUrl, String culture, String description, String failureUrl, String orderId, BigDecimal payAmount, String payerEmail, String payerName, String payerSurname, BigDecimal receiveAmount, String successUrl) throws ApiException {
        ApiResponse<OrderInformationClass> localVarResp = createOrderWithHttpInfo(apiId, merchantId, payCurrency, receiveCurrency, sign, callbackUrl, culture, description, failureUrl, orderId, payAmount, payerEmail, payerName, payerSurname, receiveAmount, successUrl);
        return localVarResp.getData();
    }

    /**
     * Create merchant order
     * 
     * @param apiId API ID of specific API you have configured on your merchant account (required)
     * @param merchantId Merchant ID assigned to your account (required)
     * @param payCurrency Currency of pay amount (required)
     * @param receiveCurrency Currency of receive amount (required)
     * @param sign Signature required for signing create order request (required)
     * @param callbackUrl Url of merchant endpoint callback about order status to be returned (optional)
     * @param culture Merchant customer culture payment window to be presented (optional)
     * @param description Order description. Will be presented for merchant customer at payment window (optional)
     * @param failureUrl Url of merchant page customer should be redirected after unsuccessful payment (optional)
     * @param orderId Custom order ID. Must be unique per API. If not provided it will be generated. (optional)
     * @param payAmount Pay amount in pay currency of value which should be paid by merchant customer. If not provided receive amount will be used to calculate pay amount (optional)
     * @param payerEmail Specified payer email. (optional)
     * @param payerName Specified payer name. (optional)
     * @param payerSurname Specified payer surname. (optional)
     * @param receiveAmount Receive amount in receive currency of value that merchant will be funded after merchant customers payment approval. If not provided pay amount will be used to calculate receive amount (optional)
     * @param successUrl Url of merchant page customer should be redirected after successful payment (optional)
     * @return ApiResponse&lt;OrderInformationClass&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrderInformationClass> createOrderWithHttpInfo(Long apiId, Long merchantId, String payCurrency, String receiveCurrency, String sign, String callbackUrl, String culture, String description, String failureUrl, String orderId, BigDecimal payAmount, String payerEmail, String payerName, String payerSurname, BigDecimal receiveAmount, String successUrl) throws ApiException {
        okhttp3.Call localVarCall = createOrderValidateBeforeCall(apiId, merchantId, payCurrency, receiveCurrency, sign, callbackUrl, culture, description, failureUrl, orderId, payAmount, payerEmail, payerName, payerSurname, receiveAmount, successUrl, null);
        Type localVarReturnType = new TypeToken<OrderInformationClass>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create merchant order (asynchronously)
     * 
     * @param apiId API ID of specific API you have configured on your merchant account (required)
     * @param merchantId Merchant ID assigned to your account (required)
     * @param payCurrency Currency of pay amount (required)
     * @param receiveCurrency Currency of receive amount (required)
     * @param sign Signature required for signing create order request (required)
     * @param callbackUrl Url of merchant endpoint callback about order status to be returned (optional)
     * @param culture Merchant customer culture payment window to be presented (optional)
     * @param description Order description. Will be presented for merchant customer at payment window (optional)
     * @param failureUrl Url of merchant page customer should be redirected after unsuccessful payment (optional)
     * @param orderId Custom order ID. Must be unique per API. If not provided it will be generated. (optional)
     * @param payAmount Pay amount in pay currency of value which should be paid by merchant customer. If not provided receive amount will be used to calculate pay amount (optional)
     * @param payerEmail Specified payer email. (optional)
     * @param payerName Specified payer name. (optional)
     * @param payerSurname Specified payer surname. (optional)
     * @param receiveAmount Receive amount in receive currency of value that merchant will be funded after merchant customers payment approval. If not provided pay amount will be used to calculate receive amount (optional)
     * @param successUrl Url of merchant page customer should be redirected after successful payment (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrderAsync(Long apiId, Long merchantId, String payCurrency, String receiveCurrency, String sign, String callbackUrl, String culture, String description, String failureUrl, String orderId, BigDecimal payAmount, String payerEmail, String payerName, String payerSurname, BigDecimal receiveAmount, String successUrl, final ApiCallback<OrderInformationClass> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrderValidateBeforeCall(apiId, merchantId, payCurrency, receiveCurrency, sign, callbackUrl, culture, description, failureUrl, orderId, payAmount, payerEmail, payerName, payerSurname, receiveAmount, successUrl, _callback);
        Type localVarReturnType = new TypeToken<OrderInformationClass>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
