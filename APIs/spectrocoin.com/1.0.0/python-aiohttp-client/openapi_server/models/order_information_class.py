# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OrderInformationClass(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deposit_address: str=None, order_id: str=None, order_request_id: int=None, pay_amount: float=None, pay_currency: str=None, receive_amount: float=None, receive_currency: str=None, redirect_url: str=None, valid_until: int=None):
        """OrderInformationClass - a model defined in OpenAPI

        :param deposit_address: The deposit_address of this OrderInformationClass.
        :param order_id: The order_id of this OrderInformationClass.
        :param order_request_id: The order_request_id of this OrderInformationClass.
        :param pay_amount: The pay_amount of this OrderInformationClass.
        :param pay_currency: The pay_currency of this OrderInformationClass.
        :param receive_amount: The receive_amount of this OrderInformationClass.
        :param receive_currency: The receive_currency of this OrderInformationClass.
        :param redirect_url: The redirect_url of this OrderInformationClass.
        :param valid_until: The valid_until of this OrderInformationClass.
        """
        self.openapi_types = {
            'deposit_address': str,
            'order_id': str,
            'order_request_id': int,
            'pay_amount': float,
            'pay_currency': str,
            'receive_amount': float,
            'receive_currency': str,
            'redirect_url': str,
            'valid_until': int
        }

        self.attribute_map = {
            'deposit_address': 'depositAddress',
            'order_id': 'orderId',
            'order_request_id': 'orderRequestId',
            'pay_amount': 'payAmount',
            'pay_currency': 'payCurrency',
            'receive_amount': 'receiveAmount',
            'receive_currency': 'receiveCurrency',
            'redirect_url': 'redirectUrl',
            'valid_until': 'validUntil'
        }

        self._deposit_address = deposit_address
        self._order_id = order_id
        self._order_request_id = order_request_id
        self._pay_amount = pay_amount
        self._pay_currency = pay_currency
        self._receive_amount = receive_amount
        self._receive_currency = receive_currency
        self._redirect_url = redirect_url
        self._valid_until = valid_until

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderInformationClass':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Order_information_class of this OrderInformationClass.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deposit_address(self):
        """Gets the deposit_address of this OrderInformationClass.

        Payment deposit address

        :return: The deposit_address of this OrderInformationClass.
        :rtype: str
        """
        return self._deposit_address

    @deposit_address.setter
    def deposit_address(self, deposit_address):
        """Sets the deposit_address of this OrderInformationClass.

        Payment deposit address

        :param deposit_address: The deposit_address of this OrderInformationClass.
        :type deposit_address: str
        """
        if deposit_address is None:
            raise ValueError("Invalid value for `deposit_address`, must not be `None`")

        self._deposit_address = deposit_address

    @property
    def order_id(self):
        """Gets the order_id of this OrderInformationClass.

        Merchant provided or generated order id

        :return: The order_id of this OrderInformationClass.
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this OrderInformationClass.

        Merchant provided or generated order id

        :param order_id: The order_id of this OrderInformationClass.
        :type order_id: str
        """
        if order_id is None:
            raise ValueError("Invalid value for `order_id`, must not be `None`")

        self._order_id = order_id

    @property
    def order_request_id(self):
        """Gets the order_request_id of this OrderInformationClass.

        Generated unique order request id

        :return: The order_request_id of this OrderInformationClass.
        :rtype: int
        """
        return self._order_request_id

    @order_request_id.setter
    def order_request_id(self, order_request_id):
        """Sets the order_request_id of this OrderInformationClass.

        Generated unique order request id

        :param order_request_id: The order_request_id of this OrderInformationClass.
        :type order_request_id: int
        """
        if order_request_id is None:
            raise ValueError("Invalid value for `order_request_id`, must not be `None`")

        self._order_request_id = order_request_id

    @property
    def pay_amount(self):
        """Gets the pay_amount of this OrderInformationClass.

        Amount of payment currency to be paid by merchant customer

        :return: The pay_amount of this OrderInformationClass.
        :rtype: float
        """
        return self._pay_amount

    @pay_amount.setter
    def pay_amount(self, pay_amount):
        """Sets the pay_amount of this OrderInformationClass.

        Amount of payment currency to be paid by merchant customer

        :param pay_amount: The pay_amount of this OrderInformationClass.
        :type pay_amount: float
        """
        if pay_amount is None:
            raise ValueError("Invalid value for `pay_amount`, must not be `None`")

        self._pay_amount = pay_amount

    @property
    def pay_currency(self):
        """Gets the pay_currency of this OrderInformationClass.

        Currency to be paid with

        :return: The pay_currency of this OrderInformationClass.
        :rtype: str
        """
        return self._pay_currency

    @pay_currency.setter
    def pay_currency(self, pay_currency):
        """Sets the pay_currency of this OrderInformationClass.

        Currency to be paid with

        :param pay_currency: The pay_currency of this OrderInformationClass.
        :type pay_currency: str
        """
        if pay_currency is None:
            raise ValueError("Invalid value for `pay_currency`, must not be `None`")

        self._pay_currency = pay_currency

    @property
    def receive_amount(self):
        """Gets the receive_amount of this OrderInformationClass.

        Amount of receive currency to be funded to merchant account

        :return: The receive_amount of this OrderInformationClass.
        :rtype: float
        """
        return self._receive_amount

    @receive_amount.setter
    def receive_amount(self, receive_amount):
        """Sets the receive_amount of this OrderInformationClass.

        Amount of receive currency to be funded to merchant account

        :param receive_amount: The receive_amount of this OrderInformationClass.
        :type receive_amount: float
        """
        if receive_amount is None:
            raise ValueError("Invalid value for `receive_amount`, must not be `None`")

        self._receive_amount = receive_amount

    @property
    def receive_currency(self):
        """Gets the receive_currency of this OrderInformationClass.

        Currency to be funded to merchant account

        :return: The receive_currency of this OrderInformationClass.
        :rtype: str
        """
        return self._receive_currency

    @receive_currency.setter
    def receive_currency(self, receive_currency):
        """Sets the receive_currency of this OrderInformationClass.

        Currency to be funded to merchant account

        :param receive_currency: The receive_currency of this OrderInformationClass.
        :type receive_currency: str
        """
        if receive_currency is None:
            raise ValueError("Invalid value for `receive_currency`, must not be `None`")

        self._receive_currency = receive_currency

    @property
    def redirect_url(self):
        """Gets the redirect_url of this OrderInformationClass.

        SpectroCoin payment window url where merchant customer may be redirected

        :return: The redirect_url of this OrderInformationClass.
        :rtype: str
        """
        return self._redirect_url

    @redirect_url.setter
    def redirect_url(self, redirect_url):
        """Sets the redirect_url of this OrderInformationClass.

        SpectroCoin payment window url where merchant customer may be redirected

        :param redirect_url: The redirect_url of this OrderInformationClass.
        :type redirect_url: str
        """
        if redirect_url is None:
            raise ValueError("Invalid value for `redirect_url`, must not be `None`")

        self._redirect_url = redirect_url

    @property
    def valid_until(self):
        """Gets the valid_until of this OrderInformationClass.

        Timestamp until when order is valid

        :return: The valid_until of this OrderInformationClass.
        :rtype: int
        """
        return self._valid_until

    @valid_until.setter
    def valid_until(self, valid_until):
        """Sets the valid_until of this OrderInformationClass.

        Timestamp until when order is valid

        :param valid_until: The valid_until of this OrderInformationClass.
        :type valid_until: int
        """
        if valid_until is None:
            raise ValueError("Invalid value for `valid_until`, must not be `None`")

        self._valid_until = valid_until
