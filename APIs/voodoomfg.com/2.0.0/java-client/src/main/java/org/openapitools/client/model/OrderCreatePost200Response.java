/*
 * Voodoo Manufacturing 3D Print API
 * Welcome to the Voodoo Manufacturing API docs!  Your Voodoo Manufacturing API key must be included with each request to the API. The API will look for the key in the \"api_key\" header of the request. <a href=\"https://voodoomfg.com/3d-print-api#get-access\" target=\"_blank\">You can request a key here.</a>  This API provides a programmatic interface for submitting printing orders to Voodoo Manufacturing. The general process for creating an order is as follows:   - Get a list of the available materials with the /materials endpoint   - Upload models to the API with the /models endpoint   - Get quotes for shipping methods with the /order/shipping endpoint   - Get a quote for an order with the /order/create endpoint   - Confirm the order with the /order/confirm endpoint  Uploaded models and orders can be retrieved either in bulk or by id at the /model and /order endpoints, respectively.  In some cases, you may wish to get a quote for a specific model without the context of an order. In this case, you may use the /model/quote (if you've already uploaded the model to the API) or the /model/quote_attrs (lets you quote based on calculated model attributes) endpoints. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@voodoomfg.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Print;
import org.openapitools.client.model.Quote;
import org.openapitools.client.model.ShippingAddress;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OrderCreatePost200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:02:36.543601-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OrderCreatePost200Response {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private ShippingAddress address;

  public static final String SERIALIZED_NAME_DELIVERY_DATE = "delivery_date";
  @SerializedName(SERIALIZED_NAME_DELIVERY_DATE)
  private String deliveryDate;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_ORDER_ITEMS = "order_items";
  @SerializedName(SERIALIZED_NAME_ORDER_ITEMS)
  private List<Print> orderItems = new ArrayList<>();

  public static final String SERIALIZED_NAME_QUOTE = "quote";
  @SerializedName(SERIALIZED_NAME_QUOTE)
  private Quote quote;

  public static final String SERIALIZED_NAME_QUOTE_ID = "quote_id";
  @SerializedName(SERIALIZED_NAME_QUOTE_ID)
  private String quoteId;

  public static final String SERIALIZED_NAME_SHIPPING_SERVICE = "shipping_service";
  @SerializedName(SERIALIZED_NAME_SHIPPING_SERVICE)
  private String shippingService;

  public OrderCreatePost200Response() {
  }

  public OrderCreatePost200Response address(ShippingAddress address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public ShippingAddress getAddress() {
    return address;
  }

  public void setAddress(ShippingAddress address) {
    this.address = address;
  }


  public OrderCreatePost200Response deliveryDate(String deliveryDate) {
    this.deliveryDate = deliveryDate;
    return this;
  }

  /**
   * The target delivery date for the shipping method. Formatted as a datetime string.
   * @return deliveryDate
   */
  @javax.annotation.Nullable
  public String getDeliveryDate() {
    return deliveryDate;
  }

  public void setDeliveryDate(String deliveryDate) {
    this.deliveryDate = deliveryDate;
  }


  public OrderCreatePost200Response notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * Get notes
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  public OrderCreatePost200Response orderItems(List<Print> orderItems) {
    this.orderItems = orderItems;
    return this;
  }

  public OrderCreatePost200Response addOrderItemsItem(Print orderItemsItem) {
    if (this.orderItems == null) {
      this.orderItems = new ArrayList<>();
    }
    this.orderItems.add(orderItemsItem);
    return this;
  }

  /**
   * Get orderItems
   * @return orderItems
   */
  @javax.annotation.Nullable
  public List<Print> getOrderItems() {
    return orderItems;
  }

  public void setOrderItems(List<Print> orderItems) {
    this.orderItems = orderItems;
  }


  public OrderCreatePost200Response quote(Quote quote) {
    this.quote = quote;
    return this;
  }

  /**
   * Get quote
   * @return quote
   */
  @javax.annotation.Nullable
  public Quote getQuote() {
    return quote;
  }

  public void setQuote(Quote quote) {
    this.quote = quote;
  }


  public OrderCreatePost200Response quoteId(String quoteId) {
    this.quoteId = quoteId;
    return this;
  }

  /**
   * Unique identifier for confirming this order. Use this value with /order/confirm place the order.
   * @return quoteId
   */
  @javax.annotation.Nullable
  public String getQuoteId() {
    return quoteId;
  }

  public void setQuoteId(String quoteId) {
    this.quoteId = quoteId;
  }


  public OrderCreatePost200Response shippingService(String shippingService) {
    this.shippingService = shippingService;
    return this;
  }

  /**
   * Service identifier string pulled from a specific rate returned by /order/shipping.
   * @return shippingService
   */
  @javax.annotation.Nullable
  public String getShippingService() {
    return shippingService;
  }

  public void setShippingService(String shippingService) {
    this.shippingService = shippingService;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderCreatePost200Response orderCreatePost200Response = (OrderCreatePost200Response) o;
    return Objects.equals(this.address, orderCreatePost200Response.address) &&
        Objects.equals(this.deliveryDate, orderCreatePost200Response.deliveryDate) &&
        Objects.equals(this.notes, orderCreatePost200Response.notes) &&
        Objects.equals(this.orderItems, orderCreatePost200Response.orderItems) &&
        Objects.equals(this.quote, orderCreatePost200Response.quote) &&
        Objects.equals(this.quoteId, orderCreatePost200Response.quoteId) &&
        Objects.equals(this.shippingService, orderCreatePost200Response.shippingService);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, deliveryDate, notes, orderItems, quote, quoteId, shippingService);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderCreatePost200Response {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    deliveryDate: ").append(toIndentedString(deliveryDate)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    orderItems: ").append(toIndentedString(orderItems)).append("\n");
    sb.append("    quote: ").append(toIndentedString(quote)).append("\n");
    sb.append("    quoteId: ").append(toIndentedString(quoteId)).append("\n");
    sb.append("    shippingService: ").append(toIndentedString(shippingService)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("delivery_date");
    openapiFields.add("notes");
    openapiFields.add("order_items");
    openapiFields.add("quote");
    openapiFields.add("quote_id");
    openapiFields.add("shipping_service");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrderCreatePost200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderCreatePost200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderCreatePost200Response is not found in the empty JSON string", OrderCreatePost200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrderCreatePost200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderCreatePost200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `address`
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        ShippingAddress.validateJsonElement(jsonObj.get("address"));
      }
      if ((jsonObj.get("delivery_date") != null && !jsonObj.get("delivery_date").isJsonNull()) && !jsonObj.get("delivery_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `delivery_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("delivery_date").toString()));
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      if (jsonObj.get("order_items") != null && !jsonObj.get("order_items").isJsonNull()) {
        JsonArray jsonArrayorderItems = jsonObj.getAsJsonArray("order_items");
        if (jsonArrayorderItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("order_items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `order_items` to be an array in the JSON string but got `%s`", jsonObj.get("order_items").toString()));
          }

          // validate the optional field `order_items` (array)
          for (int i = 0; i < jsonArrayorderItems.size(); i++) {
            Print.validateJsonElement(jsonArrayorderItems.get(i));
          };
        }
      }
      // validate the optional field `quote`
      if (jsonObj.get("quote") != null && !jsonObj.get("quote").isJsonNull()) {
        Quote.validateJsonElement(jsonObj.get("quote"));
      }
      if ((jsonObj.get("quote_id") != null && !jsonObj.get("quote_id").isJsonNull()) && !jsonObj.get("quote_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quote_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quote_id").toString()));
      }
      if ((jsonObj.get("shipping_service") != null && !jsonObj.get("shipping_service").isJsonNull()) && !jsonObj.get("shipping_service").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipping_service` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipping_service").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderCreatePost200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderCreatePost200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderCreatePost200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderCreatePost200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderCreatePost200Response>() {
           @Override
           public void write(JsonWriter out, OrderCreatePost200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderCreatePost200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrderCreatePost200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrderCreatePost200Response
   * @throws IOException if the JSON string is invalid with respect to OrderCreatePost200Response
   */
  public static OrderCreatePost200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderCreatePost200Response.class);
  }

  /**
   * Convert an instance of OrderCreatePost200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

