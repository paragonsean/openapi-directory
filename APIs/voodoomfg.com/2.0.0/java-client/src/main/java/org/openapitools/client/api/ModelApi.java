/*
 * Voodoo Manufacturing 3D Print API
 * Welcome to the Voodoo Manufacturing API docs!  Your Voodoo Manufacturing API key must be included with each request to the API. The API will look for the key in the \"api_key\" header of the request. <a href=\"https://voodoomfg.com/3d-print-api#get-access\" target=\"_blank\">You can request a key here.</a>  This API provides a programmatic interface for submitting printing orders to Voodoo Manufacturing. The general process for creating an order is as follows:   - Get a list of the available materials with the /materials endpoint   - Upload models to the API with the /models endpoint   - Get quotes for shipping methods with the /order/shipping endpoint   - Get a quote for an order with the /order/create endpoint   - Confirm the order with the /order/confirm endpoint  Uploaded models and orders can be retrieved either in bulk or by id at the /model and /order endpoints, respectively.  In some cases, you may wish to get a quote for a specific model without the context of an order. In this case, you may use the /model/quote (if you've already uploaded the model to the API) or the /model/quote_attrs (lets you quote based on calculated model attributes) endpoints. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@voodoomfg.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.CreateModelBody;
import org.openapitools.client.model.Model;
import org.openapitools.client.model.ModelQuote;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ModelApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ModelApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ModelApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for modelGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of models </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/model";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Voodoo Manufacturing API Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return modelGetCall(_callback);

    }

    /**
     * Retrieve the models you&#39;ve created. 
     * Lists all of the models you&#39;ve created. 
     * @return List&lt;Model&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of models </td><td>  -  </td></tr>
     </table>
     */
    public List<Model> modelGet() throws ApiException {
        ApiResponse<List<Model>> localVarResp = modelGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Retrieve the models you&#39;ve created. 
     * Lists all of the models you&#39;ve created. 
     * @return ApiResponse&lt;List&lt;Model&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of models </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Model>> modelGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = modelGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Model>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve the models you&#39;ve created.  (asynchronously)
     * Lists all of the models you&#39;ve created. 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of models </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelGetAsync(final ApiCallback<List<Model>> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Model>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelModelIdGet
     * @param modelId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Model object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelModelIdGetCall(Integer modelId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/model/{model_id}"
            .replace("{" + "model_id" + "}", localVarApiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Voodoo Manufacturing API Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelModelIdGetValidateBeforeCall(Integer modelId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling modelModelIdGet(Async)");
        }

        return modelModelIdGetCall(modelId, _callback);

    }

    /**
     * Retrieve a previously created model by its id. 
     * In cases where you&#39;re ordering models you&#39;ve created previously, you can fetch a specific model by its id. 
     * @param modelId  (required)
     * @return Model
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Model object </td><td>  -  </td></tr>
     </table>
     */
    public Model modelModelIdGet(Integer modelId) throws ApiException {
        ApiResponse<Model> localVarResp = modelModelIdGetWithHttpInfo(modelId);
        return localVarResp.getData();
    }

    /**
     * Retrieve a previously created model by its id. 
     * In cases where you&#39;re ordering models you&#39;ve created previously, you can fetch a specific model by its id. 
     * @param modelId  (required)
     * @return ApiResponse&lt;Model&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Model object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Model> modelModelIdGetWithHttpInfo(Integer modelId) throws ApiException {
        okhttp3.Call localVarCall = modelModelIdGetValidateBeforeCall(modelId, null);
        Type localVarReturnType = new TypeToken<Model>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a previously created model by its id.  (asynchronously)
     * In cases where you&#39;re ordering models you&#39;ve created previously, you can fetch a specific model by its id. 
     * @param modelId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Model object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelModelIdGetAsync(Integer modelId, final ApiCallback<Model> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelModelIdGetValidateBeforeCall(modelId, _callback);
        Type localVarReturnType = new TypeToken<Model>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelPost
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Model object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelPostCall(CreateModelBody body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/model";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Voodoo Manufacturing API Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelPostValidateBeforeCall(CreateModelBody body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling modelPost(Async)");
        }

        return modelPostCall(body, _callback);

    }

    /**
     * Models represent 3D design files that you&#39;d like to produce. Creating models is generally the first step in creating an order. 
     * Downloads the model data from the URL specified by file_url and saves it as a model. As a part of the model upload process, the file is run through a program that repairs the mesh (closing holes, flipping inverted normals, etc). In some cases, this may alter the geometry of your model. If you&#39;re noticing bad results for your created models, you might consider repairing your files before submitting them. 
     * @param body  (required)
     * @return Model
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Model object </td><td>  -  </td></tr>
     </table>
     */
    public Model modelPost(CreateModelBody body) throws ApiException {
        ApiResponse<Model> localVarResp = modelPostWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Models represent 3D design files that you&#39;d like to produce. Creating models is generally the first step in creating an order. 
     * Downloads the model data from the URL specified by file_url and saves it as a model. As a part of the model upload process, the file is run through a program that repairs the mesh (closing holes, flipping inverted normals, etc). In some cases, this may alter the geometry of your model. If you&#39;re noticing bad results for your created models, you might consider repairing your files before submitting them. 
     * @param body  (required)
     * @return ApiResponse&lt;Model&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Model object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Model> modelPostWithHttpInfo(CreateModelBody body) throws ApiException {
        okhttp3.Call localVarCall = modelPostValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Model>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Models represent 3D design files that you&#39;d like to produce. Creating models is generally the first step in creating an order.  (asynchronously)
     * Downloads the model data from the URL specified by file_url and saves it as a model. As a part of the model upload process, the file is run through a program that repairs the mesh (closing holes, flipping inverted normals, etc). In some cases, this may alter the geometry of your model. If you&#39;re noticing bad results for your created models, you might consider repairing your files before submitting them. 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Model object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelPostAsync(CreateModelBody body, final ApiCallback<Model> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelPostValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Model>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelQuoteAttrsGet
     * @param x The calculated unitless x dimension of this model&#39;s bounding box. (required)
     * @param y The calculated unitless y dimension of this model&#39;s bounding box. (required)
     * @param z The calculated unitless z dimension of this model&#39;s bounding box. (required)
     * @param volume The calculated unitless volume of the model. (required)
     * @param surfaceArea The calculated unitless surface area of the model. (required)
     * @param materialId The unique id of the desired material. (required)
     * @param quantity The number of units in this quote. (required)
     * @param units The units of the model file. Either \&quot;mm\&quot;, \&quot;cm\&quot;, or \&quot;in\&quot;. The correct value to pass here depends on which design program you&#39;re using. Defaults to \&quot;mm\&quot;. (required)
     * @param optionsOrientation Indicates whether or not this model needs to be oriented prior to printing. If your model is already oriented for 3D printing, you can omit this flag (or set it to false) and it will not be re-oriented prior to printing. If true, it will be re-oriented prior to printing. If you&#39;re not sure if your model is oriented, you should set this flag to true. There is an additional charge for orientation. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Quote for model with attributes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelQuoteAttrsGetCall(BigDecimal x, BigDecimal y, BigDecimal z, BigDecimal volume, BigDecimal surfaceArea, BigDecimal materialId, BigDecimal quantity, String units, Boolean optionsOrientation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/model/quote_attrs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (x != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("x", x));
        }

        if (y != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("y", y));
        }

        if (z != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("z", z));
        }

        if (volume != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("volume", volume));
        }

        if (surfaceArea != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("surface_area", surfaceArea));
        }

        if (materialId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("material_id", materialId));
        }

        if (quantity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quantity", quantity));
        }

        if (units != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("units", units));
        }

        if (optionsOrientation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("options[orientation]", optionsOrientation));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Voodoo Manufacturing API Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelQuoteAttrsGetValidateBeforeCall(BigDecimal x, BigDecimal y, BigDecimal z, BigDecimal volume, BigDecimal surfaceArea, BigDecimal materialId, BigDecimal quantity, String units, Boolean optionsOrientation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'x' is set
        if (x == null) {
            throw new ApiException("Missing the required parameter 'x' when calling modelQuoteAttrsGet(Async)");
        }

        // verify the required parameter 'y' is set
        if (y == null) {
            throw new ApiException("Missing the required parameter 'y' when calling modelQuoteAttrsGet(Async)");
        }

        // verify the required parameter 'z' is set
        if (z == null) {
            throw new ApiException("Missing the required parameter 'z' when calling modelQuoteAttrsGet(Async)");
        }

        // verify the required parameter 'volume' is set
        if (volume == null) {
            throw new ApiException("Missing the required parameter 'volume' when calling modelQuoteAttrsGet(Async)");
        }

        // verify the required parameter 'surfaceArea' is set
        if (surfaceArea == null) {
            throw new ApiException("Missing the required parameter 'surfaceArea' when calling modelQuoteAttrsGet(Async)");
        }

        // verify the required parameter 'materialId' is set
        if (materialId == null) {
            throw new ApiException("Missing the required parameter 'materialId' when calling modelQuoteAttrsGet(Async)");
        }

        // verify the required parameter 'quantity' is set
        if (quantity == null) {
            throw new ApiException("Missing the required parameter 'quantity' when calling modelQuoteAttrsGet(Async)");
        }

        // verify the required parameter 'units' is set
        if (units == null) {
            throw new ApiException("Missing the required parameter 'units' when calling modelQuoteAttrsGet(Async)");
        }

        return modelQuoteAttrsGetCall(x, y, z, volume, surfaceArea, materialId, quantity, units, optionsOrientation, _callback);

    }

    /**
     * Get a quote for a model with the given attributes. 
     * This endpoint will provide a quote for a model matching the submitted parameters. Note that this quote may be different than the quote provided by /model/quote in the case that your attribute calculations differ from the ones used by Voodoo Manufacturing. 
     * @param x The calculated unitless x dimension of this model&#39;s bounding box. (required)
     * @param y The calculated unitless y dimension of this model&#39;s bounding box. (required)
     * @param z The calculated unitless z dimension of this model&#39;s bounding box. (required)
     * @param volume The calculated unitless volume of the model. (required)
     * @param surfaceArea The calculated unitless surface area of the model. (required)
     * @param materialId The unique id of the desired material. (required)
     * @param quantity The number of units in this quote. (required)
     * @param units The units of the model file. Either \&quot;mm\&quot;, \&quot;cm\&quot;, or \&quot;in\&quot;. The correct value to pass here depends on which design program you&#39;re using. Defaults to \&quot;mm\&quot;. (required)
     * @param optionsOrientation Indicates whether or not this model needs to be oriented prior to printing. If your model is already oriented for 3D printing, you can omit this flag (or set it to false) and it will not be re-oriented prior to printing. If true, it will be re-oriented prior to printing. If you&#39;re not sure if your model is oriented, you should set this flag to true. There is an additional charge for orientation. (optional)
     * @return ModelQuote
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Quote for model with attributes </td><td>  -  </td></tr>
     </table>
     */
    public ModelQuote modelQuoteAttrsGet(BigDecimal x, BigDecimal y, BigDecimal z, BigDecimal volume, BigDecimal surfaceArea, BigDecimal materialId, BigDecimal quantity, String units, Boolean optionsOrientation) throws ApiException {
        ApiResponse<ModelQuote> localVarResp = modelQuoteAttrsGetWithHttpInfo(x, y, z, volume, surfaceArea, materialId, quantity, units, optionsOrientation);
        return localVarResp.getData();
    }

    /**
     * Get a quote for a model with the given attributes. 
     * This endpoint will provide a quote for a model matching the submitted parameters. Note that this quote may be different than the quote provided by /model/quote in the case that your attribute calculations differ from the ones used by Voodoo Manufacturing. 
     * @param x The calculated unitless x dimension of this model&#39;s bounding box. (required)
     * @param y The calculated unitless y dimension of this model&#39;s bounding box. (required)
     * @param z The calculated unitless z dimension of this model&#39;s bounding box. (required)
     * @param volume The calculated unitless volume of the model. (required)
     * @param surfaceArea The calculated unitless surface area of the model. (required)
     * @param materialId The unique id of the desired material. (required)
     * @param quantity The number of units in this quote. (required)
     * @param units The units of the model file. Either \&quot;mm\&quot;, \&quot;cm\&quot;, or \&quot;in\&quot;. The correct value to pass here depends on which design program you&#39;re using. Defaults to \&quot;mm\&quot;. (required)
     * @param optionsOrientation Indicates whether or not this model needs to be oriented prior to printing. If your model is already oriented for 3D printing, you can omit this flag (or set it to false) and it will not be re-oriented prior to printing. If true, it will be re-oriented prior to printing. If you&#39;re not sure if your model is oriented, you should set this flag to true. There is an additional charge for orientation. (optional)
     * @return ApiResponse&lt;ModelQuote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Quote for model with attributes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelQuote> modelQuoteAttrsGetWithHttpInfo(BigDecimal x, BigDecimal y, BigDecimal z, BigDecimal volume, BigDecimal surfaceArea, BigDecimal materialId, BigDecimal quantity, String units, Boolean optionsOrientation) throws ApiException {
        okhttp3.Call localVarCall = modelQuoteAttrsGetValidateBeforeCall(x, y, z, volume, surfaceArea, materialId, quantity, units, optionsOrientation, null);
        Type localVarReturnType = new TypeToken<ModelQuote>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a quote for a model with the given attributes.  (asynchronously)
     * This endpoint will provide a quote for a model matching the submitted parameters. Note that this quote may be different than the quote provided by /model/quote in the case that your attribute calculations differ from the ones used by Voodoo Manufacturing. 
     * @param x The calculated unitless x dimension of this model&#39;s bounding box. (required)
     * @param y The calculated unitless y dimension of this model&#39;s bounding box. (required)
     * @param z The calculated unitless z dimension of this model&#39;s bounding box. (required)
     * @param volume The calculated unitless volume of the model. (required)
     * @param surfaceArea The calculated unitless surface area of the model. (required)
     * @param materialId The unique id of the desired material. (required)
     * @param quantity The number of units in this quote. (required)
     * @param units The units of the model file. Either \&quot;mm\&quot;, \&quot;cm\&quot;, or \&quot;in\&quot;. The correct value to pass here depends on which design program you&#39;re using. Defaults to \&quot;mm\&quot;. (required)
     * @param optionsOrientation Indicates whether or not this model needs to be oriented prior to printing. If your model is already oriented for 3D printing, you can omit this flag (or set it to false) and it will not be re-oriented prior to printing. If true, it will be re-oriented prior to printing. If you&#39;re not sure if your model is oriented, you should set this flag to true. There is an additional charge for orientation. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Quote for model with attributes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelQuoteAttrsGetAsync(BigDecimal x, BigDecimal y, BigDecimal z, BigDecimal volume, BigDecimal surfaceArea, BigDecimal materialId, BigDecimal quantity, String units, Boolean optionsOrientation, final ApiCallback<ModelQuote> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelQuoteAttrsGetValidateBeforeCall(x, y, z, volume, surfaceArea, materialId, quantity, units, optionsOrientation, _callback);
        Type localVarReturnType = new TypeToken<ModelQuote>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelQuoteGet
     * @param modelId The unique id of the model you&#39;d like to quote. (required)
     * @param materialId The unique id of the desired material. (required)
     * @param quantity The number of units in this quote. (required)
     * @param units The units of the model file. Either \&quot;mm\&quot;, \&quot;cm\&quot;, or \&quot;in\&quot;. The correct value to pass here depends on which design program you&#39;re using. Defaults to \&quot;mm\&quot;. (required)
     * @param optionsOrientation Indicates whether or not this model needs to be oriented prior to printing. If your model is already oriented for 3D printing, you can omit this flag (or set it to false) and it will not be re-oriented prior to printing. If true, it will be re-oriented prior to printing. If you&#39;re not sure if your model is oriented, you should set this flag to true. There is an additional charge for orientation. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Quote for model with attributes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelQuoteGetCall(Integer modelId, BigDecimal materialId, BigDecimal quantity, String units, Boolean optionsOrientation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/model/quote";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (modelId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model_id", modelId));
        }

        if (materialId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("material_id", materialId));
        }

        if (quantity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quantity", quantity));
        }

        if (units != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("units", units));
        }

        if (optionsOrientation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("options[orientation]", optionsOrientation));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Voodoo Manufacturing API Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelQuoteGetValidateBeforeCall(Integer modelId, BigDecimal materialId, BigDecimal quantity, String units, Boolean optionsOrientation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling modelQuoteGet(Async)");
        }

        // verify the required parameter 'materialId' is set
        if (materialId == null) {
            throw new ApiException("Missing the required parameter 'materialId' when calling modelQuoteGet(Async)");
        }

        // verify the required parameter 'quantity' is set
        if (quantity == null) {
            throw new ApiException("Missing the required parameter 'quantity' when calling modelQuoteGet(Async)");
        }

        // verify the required parameter 'units' is set
        if (units == null) {
            throw new ApiException("Missing the required parameter 'units' when calling modelQuoteGet(Async)");
        }

        return modelQuoteGetCall(modelId, materialId, quantity, units, optionsOrientation, _callback);

    }

    /**
     * Get a quote a given model id. 
     * Calculates a quote for the given model in the given material and quantity. This endpoint required that you&#39;ve already uploaded the model to our servers -- to get a quote for a model you haven&#39;t yet uploaded, you can try /model/quote_attrs. 
     * @param modelId The unique id of the model you&#39;d like to quote. (required)
     * @param materialId The unique id of the desired material. (required)
     * @param quantity The number of units in this quote. (required)
     * @param units The units of the model file. Either \&quot;mm\&quot;, \&quot;cm\&quot;, or \&quot;in\&quot;. The correct value to pass here depends on which design program you&#39;re using. Defaults to \&quot;mm\&quot;. (required)
     * @param optionsOrientation Indicates whether or not this model needs to be oriented prior to printing. If your model is already oriented for 3D printing, you can omit this flag (or set it to false) and it will not be re-oriented prior to printing. If true, it will be re-oriented prior to printing. If you&#39;re not sure if your model is oriented, you should set this flag to true. There is an additional charge for orientation. (optional)
     * @return ModelQuote
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Quote for model with attributes </td><td>  -  </td></tr>
     </table>
     */
    public ModelQuote modelQuoteGet(Integer modelId, BigDecimal materialId, BigDecimal quantity, String units, Boolean optionsOrientation) throws ApiException {
        ApiResponse<ModelQuote> localVarResp = modelQuoteGetWithHttpInfo(modelId, materialId, quantity, units, optionsOrientation);
        return localVarResp.getData();
    }

    /**
     * Get a quote a given model id. 
     * Calculates a quote for the given model in the given material and quantity. This endpoint required that you&#39;ve already uploaded the model to our servers -- to get a quote for a model you haven&#39;t yet uploaded, you can try /model/quote_attrs. 
     * @param modelId The unique id of the model you&#39;d like to quote. (required)
     * @param materialId The unique id of the desired material. (required)
     * @param quantity The number of units in this quote. (required)
     * @param units The units of the model file. Either \&quot;mm\&quot;, \&quot;cm\&quot;, or \&quot;in\&quot;. The correct value to pass here depends on which design program you&#39;re using. Defaults to \&quot;mm\&quot;. (required)
     * @param optionsOrientation Indicates whether or not this model needs to be oriented prior to printing. If your model is already oriented for 3D printing, you can omit this flag (or set it to false) and it will not be re-oriented prior to printing. If true, it will be re-oriented prior to printing. If you&#39;re not sure if your model is oriented, you should set this flag to true. There is an additional charge for orientation. (optional)
     * @return ApiResponse&lt;ModelQuote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Quote for model with attributes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelQuote> modelQuoteGetWithHttpInfo(Integer modelId, BigDecimal materialId, BigDecimal quantity, String units, Boolean optionsOrientation) throws ApiException {
        okhttp3.Call localVarCall = modelQuoteGetValidateBeforeCall(modelId, materialId, quantity, units, optionsOrientation, null);
        Type localVarReturnType = new TypeToken<ModelQuote>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a quote a given model id.  (asynchronously)
     * Calculates a quote for the given model in the given material and quantity. This endpoint required that you&#39;ve already uploaded the model to our servers -- to get a quote for a model you haven&#39;t yet uploaded, you can try /model/quote_attrs. 
     * @param modelId The unique id of the model you&#39;d like to quote. (required)
     * @param materialId The unique id of the desired material. (required)
     * @param quantity The number of units in this quote. (required)
     * @param units The units of the model file. Either \&quot;mm\&quot;, \&quot;cm\&quot;, or \&quot;in\&quot;. The correct value to pass here depends on which design program you&#39;re using. Defaults to \&quot;mm\&quot;. (required)
     * @param optionsOrientation Indicates whether or not this model needs to be oriented prior to printing. If your model is already oriented for 3D printing, you can omit this flag (or set it to false) and it will not be re-oriented prior to printing. If true, it will be re-oriented prior to printing. If you&#39;re not sure if your model is oriented, you should set this flag to true. There is an additional charge for orientation. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Quote for model with attributes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelQuoteGetAsync(Integer modelId, BigDecimal materialId, BigDecimal quantity, String units, Boolean optionsOrientation, final ApiCallback<ModelQuote> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelQuoteGetValidateBeforeCall(modelId, materialId, quantity, units, optionsOrientation, _callback);
        Type localVarReturnType = new TypeToken<ModelQuote>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
