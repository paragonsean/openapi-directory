/**
 * Voodoo Manufacturing 3D Print API
 * Welcome to the Voodoo Manufacturing API docs!  Your Voodoo Manufacturing API key must be included with each request to the API. The API will look for the key in the \"api_key\" header of the request. <a href=\"https://voodoomfg.com/3d-print-api#get-access\" target=\"_blank\">You can request a key here.</a>  This API provides a programmatic interface for submitting printing orders to Voodoo Manufacturing. The general process for creating an order is as follows:   - Get a list of the available materials with the /materials endpoint   - Upload models to the API with the /models endpoint   - Get quotes for shipping methods with the /order/shipping endpoint   - Get a quote for an order with the /order/create endpoint   - Confirm the order with the /order/confirm endpoint  Uploaded models and orders can be retrieved either in bulk or by id at the /model and /order endpoints, respectively.  In some cases, you may wish to get a quote for a specific model without the context of an order. In this case, you may use the /model/quote (if you've already uploaded the model to the API) or the /model/quote_attrs (lets you quote based on calculated model attributes) endpoints. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@voodoomfg.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIModelApi_H
#define OAI_OAIModelApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateModelBody.h"
#include "OAIModel.h"
#include "OAIModelQuote.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIModelApi : public QObject {
    Q_OBJECT

public:
    OAIModelApi(const int timeOut = 0);
    ~OAIModelApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void modelGet();

    /**
    * @param[in]  model_id qint32 [required]
    */
    virtual void modelModelIdGet(const qint32 &model_id);

    /**
    * @param[in]  body OAICreateModelBody [required]
    */
    virtual void modelPost(const OAICreateModelBody &body);

    /**
    * @param[in]  x double [required]
    * @param[in]  y double [required]
    * @param[in]  z double [required]
    * @param[in]  volume double [required]
    * @param[in]  surface_area double [required]
    * @param[in]  material_id double [required]
    * @param[in]  quantity double [required]
    * @param[in]  units QString [required]
    * @param[in]  options_orientation bool [optional]
    */
    virtual void modelQuoteAttrsGet(const double &x, const double &y, const double &z, const double &volume, const double &surface_area, const double &material_id, const double &quantity, const QString &units, const ::OpenAPI::OptionalParam<bool> &options_orientation = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  model_id qint32 [required]
    * @param[in]  material_id double [required]
    * @param[in]  quantity double [required]
    * @param[in]  units QString [required]
    * @param[in]  options_orientation bool [optional]
    */
    virtual void modelQuoteGet(const qint32 &model_id, const double &material_id, const double &quantity, const QString &units, const ::OpenAPI::OptionalParam<bool> &options_orientation = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void modelGetCallback(OAIHttpRequestWorker *worker);
    void modelModelIdGetCallback(OAIHttpRequestWorker *worker);
    void modelPostCallback(OAIHttpRequestWorker *worker);
    void modelQuoteAttrsGetCallback(OAIHttpRequestWorker *worker);
    void modelQuoteGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void modelGetSignal(QList<OAIModel> summary);
    void modelModelIdGetSignal(OAIModel summary);
    void modelPostSignal(OAIModel summary);
    void modelQuoteAttrsGetSignal(OAIModelQuote summary);
    void modelQuoteGetSignal(OAIModelQuote summary);


    void modelGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIModel> summary);
    void modelModelIdGetSignalFull(OAIHttpRequestWorker *worker, OAIModel summary);
    void modelPostSignalFull(OAIHttpRequestWorker *worker, OAIModel summary);
    void modelQuoteAttrsGetSignalFull(OAIHttpRequestWorker *worker, OAIModelQuote summary);
    void modelQuoteGetSignalFull(OAIHttpRequestWorker *worker, OAIModelQuote summary);

    Q_DECL_DEPRECATED_X("Use modelGetSignalError() instead")
    void modelGetSignalE(QList<OAIModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelGetSignalError(QList<OAIModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelModelIdGetSignalError() instead")
    void modelModelIdGetSignalE(OAIModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelModelIdGetSignalError(OAIModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelPostSignalError() instead")
    void modelPostSignalE(OAIModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelPostSignalError(OAIModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelQuoteAttrsGetSignalError() instead")
    void modelQuoteAttrsGetSignalE(OAIModelQuote summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelQuoteAttrsGetSignalError(OAIModelQuote summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelQuoteGetSignalError() instead")
    void modelQuoteGetSignalE(OAIModelQuote summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelQuoteGetSignalError(OAIModelQuote summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use modelGetSignalErrorFull() instead")
    void modelGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelModelIdGetSignalErrorFull() instead")
    void modelModelIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelModelIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelPostSignalErrorFull() instead")
    void modelPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelQuoteAttrsGetSignalErrorFull() instead")
    void modelQuoteAttrsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelQuoteAttrsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelQuoteGetSignalErrorFull() instead")
    void modelQuoteGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelQuoteGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
