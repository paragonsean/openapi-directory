/**
 * Voodoo Manufacturing 3D Print API
 * Welcome to the Voodoo Manufacturing API docs!  Your Voodoo Manufacturing API key must be included with each request to the API. The API will look for the key in the \"api_key\" header of the request. <a href=\"https://voodoomfg.com/3d-print-api#get-access\" target=\"_blank\">You can request a key here.</a>  This API provides a programmatic interface for submitting printing orders to Voodoo Manufacturing. The general process for creating an order is as follows:   - Get a list of the available materials with the /materials endpoint   - Upload models to the API with the /models endpoint   - Get quotes for shipping methods with the /order/shipping endpoint   - Get a quote for an order with the /order/create endpoint   - Confirm the order with the /order/confirm endpoint  Uploaded models and orders can be retrieved either in bulk or by id at the /model and /order endpoints, respectively.  In some cases, you may wish to get a quote for a specific model without the context of an order. In this case, you may use the /model/quote (if you've already uploaded the model to the API) or the /model/quote_attrs (lets you quote based on calculated model attributes) endpoints. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@voodoomfg.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateOrderBody.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateOrderBody::OAICreateOrderBody(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateOrderBody::OAICreateOrderBody() {
    this->initializeModel();
}

OAICreateOrderBody::~OAICreateOrderBody() {}

void OAICreateOrderBody::initializeModel() {

    m_models_isSet = false;
    m_models_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_shipping_address_isSet = false;
    m_shipping_address_isValid = false;

    m_shipping_service_isSet = false;
    m_shipping_service_isValid = false;
}

void OAICreateOrderBody::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateOrderBody::fromJsonObject(QJsonObject json) {

    m_models_isValid = ::OpenAPI::fromJsonValue(m_models, json[QString("models")]);
    m_models_isSet = !json[QString("models")].isNull() && m_models_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_shipping_address_isValid = ::OpenAPI::fromJsonValue(m_shipping_address, json[QString("shipping_address")]);
    m_shipping_address_isSet = !json[QString("shipping_address")].isNull() && m_shipping_address_isValid;

    m_shipping_service_isValid = ::OpenAPI::fromJsonValue(m_shipping_service, json[QString("shipping_service")]);
    m_shipping_service_isSet = !json[QString("shipping_service")].isNull() && m_shipping_service_isValid;
}

QString OAICreateOrderBody::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateOrderBody::asJsonObject() const {
    QJsonObject obj;
    if (m_models.size() > 0) {
        obj.insert(QString("models"), ::OpenAPI::toJsonValue(m_models));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_shipping_address.isSet()) {
        obj.insert(QString("shipping_address"), ::OpenAPI::toJsonValue(m_shipping_address));
    }
    if (m_shipping_service_isSet) {
        obj.insert(QString("shipping_service"), ::OpenAPI::toJsonValue(m_shipping_service));
    }
    return obj;
}

QList<OAIPrint> OAICreateOrderBody::getModels() const {
    return m_models;
}
void OAICreateOrderBody::setModels(const QList<OAIPrint> &models) {
    m_models = models;
    m_models_isSet = true;
}

bool OAICreateOrderBody::is_models_Set() const{
    return m_models_isSet;
}

bool OAICreateOrderBody::is_models_Valid() const{
    return m_models_isValid;
}

QString OAICreateOrderBody::getNotes() const {
    return m_notes;
}
void OAICreateOrderBody::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAICreateOrderBody::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAICreateOrderBody::is_notes_Valid() const{
    return m_notes_isValid;
}

OAIShippingAddress OAICreateOrderBody::getShippingAddress() const {
    return m_shipping_address;
}
void OAICreateOrderBody::setShippingAddress(const OAIShippingAddress &shipping_address) {
    m_shipping_address = shipping_address;
    m_shipping_address_isSet = true;
}

bool OAICreateOrderBody::is_shipping_address_Set() const{
    return m_shipping_address_isSet;
}

bool OAICreateOrderBody::is_shipping_address_Valid() const{
    return m_shipping_address_isValid;
}

QString OAICreateOrderBody::getShippingService() const {
    return m_shipping_service;
}
void OAICreateOrderBody::setShippingService(const QString &shipping_service) {
    m_shipping_service = shipping_service;
    m_shipping_service_isSet = true;
}

bool OAICreateOrderBody::is_shipping_service_Set() const{
    return m_shipping_service_isSet;
}

bool OAICreateOrderBody::is_shipping_service_Valid() const{
    return m_shipping_service_isValid;
}

bool OAICreateOrderBody::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_models.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_service_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateOrderBody::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
