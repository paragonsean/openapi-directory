/**
 * Voodoo Manufacturing 3D Print API
 * Welcome to the Voodoo Manufacturing API docs!  Your Voodoo Manufacturing API key must be included with each request to the API. The API will look for the key in the \"api_key\" header of the request. <a href=\"https://voodoomfg.com/3d-print-api#get-access\" target=\"_blank\">You can request a key here.</a>  This API provides a programmatic interface for submitting printing orders to Voodoo Manufacturing. The general process for creating an order is as follows:   - Get a list of the available materials with the /materials endpoint   - Upload models to the API with the /models endpoint   - Get quotes for shipping methods with the /order/shipping endpoint   - Get a quote for an order with the /order/create endpoint   - Confirm the order with the /order/confirm endpoint  Uploaded models and orders can be retrieved either in bulk or by id at the /model and /order endpoints, respectively.  In some cases, you may wish to get a quote for a specific model without the context of an order. In this case, you may use the /model/quote (if you've already uploaded the model to the API) or the /model/quote_attrs (lets you quote based on calculated model attributes) endpoints. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@voodoomfg.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShippingAddress.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShippingAddress::OAIShippingAddress(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShippingAddress::OAIShippingAddress() {
    this->initializeModel();
}

OAIShippingAddress::~OAIShippingAddress() {}

void OAIShippingAddress::initializeModel() {

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_street1_isSet = false;
    m_street1_isValid = false;

    m_street2_isSet = false;
    m_street2_isValid = false;

    m_zip_isSet = false;
    m_zip_isValid = false;
}

void OAIShippingAddress::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShippingAddress::fromJsonObject(QJsonObject json) {

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_street1_isValid = ::OpenAPI::fromJsonValue(m_street1, json[QString("street1")]);
    m_street1_isSet = !json[QString("street1")].isNull() && m_street1_isValid;

    m_street2_isValid = ::OpenAPI::fromJsonValue(m_street2, json[QString("street2")]);
    m_street2_isSet = !json[QString("street2")].isNull() && m_street2_isValid;

    m_zip_isValid = ::OpenAPI::fromJsonValue(m_zip, json[QString("zip")]);
    m_zip_isSet = !json[QString("zip")].isNull() && m_zip_isValid;
}

QString OAIShippingAddress::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShippingAddress::asJsonObject() const {
    QJsonObject obj;
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_street1_isSet) {
        obj.insert(QString("street1"), ::OpenAPI::toJsonValue(m_street1));
    }
    if (m_street2_isSet) {
        obj.insert(QString("street2"), ::OpenAPI::toJsonValue(m_street2));
    }
    if (m_zip_isSet) {
        obj.insert(QString("zip"), ::OpenAPI::toJsonValue(m_zip));
    }
    return obj;
}

QString OAIShippingAddress::getCity() const {
    return m_city;
}
void OAIShippingAddress::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIShippingAddress::is_city_Set() const{
    return m_city_isSet;
}

bool OAIShippingAddress::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIShippingAddress::getCountry() const {
    return m_country;
}
void OAIShippingAddress::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIShippingAddress::is_country_Set() const{
    return m_country_isSet;
}

bool OAIShippingAddress::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIShippingAddress::getEmail() const {
    return m_email;
}
void OAIShippingAddress::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIShippingAddress::is_email_Set() const{
    return m_email_isSet;
}

bool OAIShippingAddress::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIShippingAddress::getName() const {
    return m_name;
}
void OAIShippingAddress::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIShippingAddress::is_name_Set() const{
    return m_name_isSet;
}

bool OAIShippingAddress::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIShippingAddress::getState() const {
    return m_state;
}
void OAIShippingAddress::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIShippingAddress::is_state_Set() const{
    return m_state_isSet;
}

bool OAIShippingAddress::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIShippingAddress::getStreet1() const {
    return m_street1;
}
void OAIShippingAddress::setStreet1(const QString &street1) {
    m_street1 = street1;
    m_street1_isSet = true;
}

bool OAIShippingAddress::is_street1_Set() const{
    return m_street1_isSet;
}

bool OAIShippingAddress::is_street1_Valid() const{
    return m_street1_isValid;
}

QString OAIShippingAddress::getStreet2() const {
    return m_street2;
}
void OAIShippingAddress::setStreet2(const QString &street2) {
    m_street2 = street2;
    m_street2_isSet = true;
}

bool OAIShippingAddress::is_street2_Set() const{
    return m_street2_isSet;
}

bool OAIShippingAddress::is_street2_Valid() const{
    return m_street2_isValid;
}

QString OAIShippingAddress::getZip() const {
    return m_zip;
}
void OAIShippingAddress::setZip(const QString &zip) {
    m_zip = zip;
    m_zip_isSet = true;
}

bool OAIShippingAddress::is_zip_Set() const{
    return m_zip_isSet;
}

bool OAIShippingAddress::is_zip_Valid() const{
    return m_zip_isValid;
}

bool OAIShippingAddress::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShippingAddress::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
