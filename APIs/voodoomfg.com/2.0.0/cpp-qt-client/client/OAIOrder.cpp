/**
 * Voodoo Manufacturing 3D Print API
 * Welcome to the Voodoo Manufacturing API docs!  Your Voodoo Manufacturing API key must be included with each request to the API. The API will look for the key in the \"api_key\" header of the request. <a href=\"https://voodoomfg.com/3d-print-api#get-access\" target=\"_blank\">You can request a key here.</a>  This API provides a programmatic interface for submitting printing orders to Voodoo Manufacturing. The general process for creating an order is as follows:   - Get a list of the available materials with the /materials endpoint   - Upload models to the API with the /models endpoint   - Get quotes for shipping methods with the /order/shipping endpoint   - Get a quote for an order with the /order/create endpoint   - Confirm the order with the /order/confirm endpoint  Uploaded models and orders can be retrieved either in bulk or by id at the /model and /order endpoints, respectively.  In some cases, you may wish to get a quote for a specific model without the context of an order. In this case, you may use the /model/quote (if you've already uploaded the model to the API) or the /model/quote_attrs (lets you quote based on calculated model attributes) endpoints. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@voodoomfg.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrder.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrder::OAIOrder(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrder::OAIOrder() {
    this->initializeModel();
}

OAIOrder::~OAIOrder() {}

void OAIOrder::initializeModel() {

    m_customer_contact_email_isSet = false;
    m_customer_contact_email_isValid = false;

    m_customer_name_isSet = false;
    m_customer_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_prints_isSet = false;
    m_prints_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;

    m_ship_by_isSet = false;
    m_ship_by_isValid = false;

    m_shipping_address_isSet = false;
    m_shipping_address_isValid = false;
}

void OAIOrder::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrder::fromJsonObject(QJsonObject json) {

    m_customer_contact_email_isValid = ::OpenAPI::fromJsonValue(m_customer_contact_email, json[QString("customer_contact_email")]);
    m_customer_contact_email_isSet = !json[QString("customer_contact_email")].isNull() && m_customer_contact_email_isValid;

    m_customer_name_isValid = ::OpenAPI::fromJsonValue(m_customer_name, json[QString("customer_name")]);
    m_customer_name_isSet = !json[QString("customer_name")].isNull() && m_customer_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_prints_isValid = ::OpenAPI::fromJsonValue(m_prints, json[QString("prints")]);
    m_prints_isSet = !json[QString("prints")].isNull() && m_prints_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("reference")]);
    m_reference_isSet = !json[QString("reference")].isNull() && m_reference_isValid;

    m_ship_by_isValid = ::OpenAPI::fromJsonValue(m_ship_by, json[QString("ship_by")]);
    m_ship_by_isSet = !json[QString("ship_by")].isNull() && m_ship_by_isValid;

    m_shipping_address_isValid = ::OpenAPI::fromJsonValue(m_shipping_address, json[QString("shipping_address")]);
    m_shipping_address_isSet = !json[QString("shipping_address")].isNull() && m_shipping_address_isValid;
}

QString OAIOrder::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrder::asJsonObject() const {
    QJsonObject obj;
    if (m_customer_contact_email_isSet) {
        obj.insert(QString("customer_contact_email"), ::OpenAPI::toJsonValue(m_customer_contact_email));
    }
    if (m_customer_name_isSet) {
        obj.insert(QString("customer_name"), ::OpenAPI::toJsonValue(m_customer_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_prints.size() > 0) {
        obj.insert(QString("prints"), ::OpenAPI::toJsonValue(m_prints));
    }
    if (m_reference_isSet) {
        obj.insert(QString("reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    if (m_ship_by_isSet) {
        obj.insert(QString("ship_by"), ::OpenAPI::toJsonValue(m_ship_by));
    }
    if (m_shipping_address.isSet()) {
        obj.insert(QString("shipping_address"), ::OpenAPI::toJsonValue(m_shipping_address));
    }
    return obj;
}

QString OAIOrder::getCustomerContactEmail() const {
    return m_customer_contact_email;
}
void OAIOrder::setCustomerContactEmail(const QString &customer_contact_email) {
    m_customer_contact_email = customer_contact_email;
    m_customer_contact_email_isSet = true;
}

bool OAIOrder::is_customer_contact_email_Set() const{
    return m_customer_contact_email_isSet;
}

bool OAIOrder::is_customer_contact_email_Valid() const{
    return m_customer_contact_email_isValid;
}

QString OAIOrder::getCustomerName() const {
    return m_customer_name;
}
void OAIOrder::setCustomerName(const QString &customer_name) {
    m_customer_name = customer_name;
    m_customer_name_isSet = true;
}

bool OAIOrder::is_customer_name_Set() const{
    return m_customer_name_isSet;
}

bool OAIOrder::is_customer_name_Valid() const{
    return m_customer_name_isValid;
}

qint32 OAIOrder::getId() const {
    return m_id;
}
void OAIOrder::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOrder::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOrder::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIOrder::getNotes() const {
    return m_notes;
}
void OAIOrder::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIOrder::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIOrder::is_notes_Valid() const{
    return m_notes_isValid;
}

QList<OAIOrderPrint> OAIOrder::getPrints() const {
    return m_prints;
}
void OAIOrder::setPrints(const QList<OAIOrderPrint> &prints) {
    m_prints = prints;
    m_prints_isSet = true;
}

bool OAIOrder::is_prints_Set() const{
    return m_prints_isSet;
}

bool OAIOrder::is_prints_Valid() const{
    return m_prints_isValid;
}

QString OAIOrder::getReference() const {
    return m_reference;
}
void OAIOrder::setReference(const QString &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAIOrder::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAIOrder::is_reference_Valid() const{
    return m_reference_isValid;
}

QString OAIOrder::getShipBy() const {
    return m_ship_by;
}
void OAIOrder::setShipBy(const QString &ship_by) {
    m_ship_by = ship_by;
    m_ship_by_isSet = true;
}

bool OAIOrder::is_ship_by_Set() const{
    return m_ship_by_isSet;
}

bool OAIOrder::is_ship_by_Valid() const{
    return m_ship_by_isValid;
}

OAIShippingAddress OAIOrder::getShippingAddress() const {
    return m_shipping_address;
}
void OAIOrder::setShippingAddress(const OAIShippingAddress &shipping_address) {
    m_shipping_address = shipping_address;
    m_shipping_address_isSet = true;
}

bool OAIOrder::is_shipping_address_Set() const{
    return m_shipping_address_isSet;
}

bool OAIOrder::is_shipping_address_Valid() const{
    return m_shipping_address_isValid;
}

bool OAIOrder::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_customer_contact_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prints.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ship_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_address.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrder::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
