/**
 * Voodoo Manufacturing 3D Print API
 * Welcome to the Voodoo Manufacturing API docs!  Your Voodoo Manufacturing API key must be included with each request to the API. The API will look for the key in the \"api_key\" header of the request. <a href=\"https://voodoomfg.com/3d-print-api#get-access\" target=\"_blank\">You can request a key here.</a>  This API provides a programmatic interface for submitting printing orders to Voodoo Manufacturing. The general process for creating an order is as follows:   - Get a list of the available materials with the /materials endpoint   - Upload models to the API with the /models endpoint   - Get quotes for shipping methods with the /order/shipping endpoint   - Get a quote for an order with the /order/create endpoint   - Confirm the order with the /order/confirm endpoint  Uploaded models and orders can be retrieved either in bulk or by id at the /model and /order endpoints, respectively.  In some cases, you may wish to get a quote for a specific model without the context of an order. In this case, you may use the /model/quote (if you've already uploaded the model to the API) or the /model/quote_attrs (lets you quote based on calculated model attributes) endpoints. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@voodoomfg.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOrderApi_H
#define OAI_OAIOrderApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIConfirmOrderBody.h"
#include "OAICreateOrderBody.h"
#include "OAIOrder.h"
#include "OAIShippingOptionsBody.h"
#include "OAI_order_confirm_post_200_response.h"
#include "OAI_order_create_post_200_response.h"
#include "OAI_order_shipping_post_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOrderApi : public QObject {
    Q_OBJECT

public:
    OAIOrderApi(const int timeOut = 0);
    ~OAIOrderApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  body OAIConfirmOrderBody [required]
    */
    virtual void orderConfirmPost(const OAIConfirmOrderBody &body);

    /**
    * @param[in]  body OAICreateOrderBody [required]
    */
    virtual void orderCreatePost(const OAICreateOrderBody &body);


    virtual void orderGet();

    /**
    * @param[in]  order_id QString [required]
    */
    virtual void orderOrderIdGet(const QString &order_id);

    /**
    * @param[in]  body OAIShippingOptionsBody [required]
    */
    virtual void orderShippingPost(const OAIShippingOptionsBody &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void orderConfirmPostCallback(OAIHttpRequestWorker *worker);
    void orderCreatePostCallback(OAIHttpRequestWorker *worker);
    void orderGetCallback(OAIHttpRequestWorker *worker);
    void orderOrderIdGetCallback(OAIHttpRequestWorker *worker);
    void orderShippingPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void orderConfirmPostSignal(OAI_order_confirm_post_200_response summary);
    void orderCreatePostSignal(OAI_order_create_post_200_response summary);
    void orderGetSignal(QList<OAIOrder> summary);
    void orderOrderIdGetSignal(OAIOrder summary);
    void orderShippingPostSignal(OAI_order_shipping_post_200_response summary);


    void orderConfirmPostSignalFull(OAIHttpRequestWorker *worker, OAI_order_confirm_post_200_response summary);
    void orderCreatePostSignalFull(OAIHttpRequestWorker *worker, OAI_order_create_post_200_response summary);
    void orderGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIOrder> summary);
    void orderOrderIdGetSignalFull(OAIHttpRequestWorker *worker, OAIOrder summary);
    void orderShippingPostSignalFull(OAIHttpRequestWorker *worker, OAI_order_shipping_post_200_response summary);

    Q_DECL_DEPRECATED_X("Use orderConfirmPostSignalError() instead")
    void orderConfirmPostSignalE(OAI_order_confirm_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orderConfirmPostSignalError(OAI_order_confirm_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderCreatePostSignalError() instead")
    void orderCreatePostSignalE(OAI_order_create_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orderCreatePostSignalError(OAI_order_create_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderGetSignalError() instead")
    void orderGetSignalE(QList<OAIOrder> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orderGetSignalError(QList<OAIOrder> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderOrderIdGetSignalError() instead")
    void orderOrderIdGetSignalE(OAIOrder summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orderOrderIdGetSignalError(OAIOrder summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderShippingPostSignalError() instead")
    void orderShippingPostSignalE(OAI_order_shipping_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orderShippingPostSignalError(OAI_order_shipping_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use orderConfirmPostSignalErrorFull() instead")
    void orderConfirmPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orderConfirmPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderCreatePostSignalErrorFull() instead")
    void orderCreatePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orderCreatePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderGetSignalErrorFull() instead")
    void orderGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orderGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderOrderIdGetSignalErrorFull() instead")
    void orderOrderIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orderOrderIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderShippingPostSignalErrorFull() instead")
    void orderShippingPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orderShippingPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
