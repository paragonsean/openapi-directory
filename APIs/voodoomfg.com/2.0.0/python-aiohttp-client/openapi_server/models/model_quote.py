# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.production_options_costs import ProductionOptionsCosts
from openapi_server import util


class ModelQuote(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, material_id: int=None, model_id: int=None, options: ProductionOptionsCosts=None, quote: float=None, unit_cost: float=None, units: str=None):
        """ModelQuote - a model defined in OpenAPI

        :param material_id: The material_id of this ModelQuote.
        :param model_id: The model_id of this ModelQuote.
        :param options: The options of this ModelQuote.
        :param quote: The quote of this ModelQuote.
        :param unit_cost: The unit_cost of this ModelQuote.
        :param units: The units of this ModelQuote.
        """
        self.openapi_types = {
            'material_id': int,
            'model_id': int,
            'options': ProductionOptionsCosts,
            'quote': float,
            'unit_cost': float,
            'units': str
        }

        self.attribute_map = {
            'material_id': 'material_id',
            'model_id': 'model_id',
            'options': 'options',
            'quote': 'quote',
            'unit_cost': 'unit_cost',
            'units': 'units'
        }

        self._material_id = material_id
        self._model_id = model_id
        self._options = options
        self._quote = quote
        self._unit_cost = unit_cost
        self._units = units

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModelQuote':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ModelQuote of this ModelQuote.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def material_id(self):
        """Gets the material_id of this ModelQuote.

        Requested material id.

        :return: The material_id of this ModelQuote.
        :rtype: int
        """
        return self._material_id

    @material_id.setter
    def material_id(self, material_id):
        """Sets the material_id of this ModelQuote.

        Requested material id.

        :param material_id: The material_id of this ModelQuote.
        :type material_id: int
        """

        self._material_id = material_id

    @property
    def model_id(self):
        """Gets the model_id of this ModelQuote.

        Requested model id. Not present on the response from /model/quote_attrs.

        :return: The model_id of this ModelQuote.
        :rtype: int
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this ModelQuote.

        Requested model id. Not present on the response from /model/quote_attrs.

        :param model_id: The model_id of this ModelQuote.
        :type model_id: int
        """

        self._model_id = model_id

    @property
    def options(self):
        """Gets the options of this ModelQuote.


        :return: The options of this ModelQuote.
        :rtype: ProductionOptionsCosts
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this ModelQuote.


        :param options: The options of this ModelQuote.
        :type options: ProductionOptionsCosts
        """

        self._options = options

    @property
    def quote(self):
        """Gets the quote of this ModelQuote.

        The cost for printing the model in the requested quantity, before any additional services.

        :return: The quote of this ModelQuote.
        :rtype: float
        """
        return self._quote

    @quote.setter
    def quote(self, quote):
        """Sets the quote of this ModelQuote.

        The cost for printing the model in the requested quantity, before any additional services.

        :param quote: The quote of this ModelQuote.
        :type quote: float
        """

        self._quote = quote

    @property
    def unit_cost(self):
        """Gets the unit_cost of this ModelQuote.

        The cost of a single print of the specified model.

        :return: The unit_cost of this ModelQuote.
        :rtype: float
        """
        return self._unit_cost

    @unit_cost.setter
    def unit_cost(self, unit_cost):
        """Sets the unit_cost of this ModelQuote.

        The cost of a single print of the specified model.

        :param unit_cost: The unit_cost of this ModelQuote.
        :type unit_cost: float
        """

        self._unit_cost = unit_cost

    @property
    def units(self):
        """Gets the units of this ModelQuote.

        Units for the requested print. One of \"mm\", \"cm\", or \"in\".

        :return: The units of this ModelQuote.
        :rtype: str
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this ModelQuote.

        Units for the requested print. One of \"mm\", \"cm\", or \"in\".

        :param units: The units of this ModelQuote.
        :type units: str
        """

        self._units = units
