# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ShippingAddress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city: str=None, country: str=None, email: str=None, name: str=None, state: str=None, street1: str=None, street2: str=None, zip: str=None):
        """ShippingAddress - a model defined in OpenAPI

        :param city: The city of this ShippingAddress.
        :param country: The country of this ShippingAddress.
        :param email: The email of this ShippingAddress.
        :param name: The name of this ShippingAddress.
        :param state: The state of this ShippingAddress.
        :param street1: The street1 of this ShippingAddress.
        :param street2: The street2 of this ShippingAddress.
        :param zip: The zip of this ShippingAddress.
        """
        self.openapi_types = {
            'city': str,
            'country': str,
            'email': str,
            'name': str,
            'state': str,
            'street1': str,
            'street2': str,
            'zip': str
        }

        self.attribute_map = {
            'city': 'city',
            'country': 'country',
            'email': 'email',
            'name': 'name',
            'state': 'state',
            'street1': 'street1',
            'street2': 'street2',
            'zip': 'zip'
        }

        self._city = city
        self._country = country
        self._email = email
        self._name = name
        self._state = state
        self._street1 = street1
        self._street2 = street2
        self._zip = zip

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ShippingAddress':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ShippingAddress of this ShippingAddress.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city(self):
        """Gets the city of this ShippingAddress.


        :return: The city of this ShippingAddress.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this ShippingAddress.


        :param city: The city of this ShippingAddress.
        :type city: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this ShippingAddress.


        :return: The country of this ShippingAddress.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this ShippingAddress.


        :param country: The country of this ShippingAddress.
        :type country: str
        """

        self._country = country

    @property
    def email(self):
        """Gets the email of this ShippingAddress.

        Contact email address for the recipient.

        :return: The email of this ShippingAddress.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ShippingAddress.

        Contact email address for the recipient.

        :param email: The email of this ShippingAddress.
        :type email: str
        """

        self._email = email

    @property
    def name(self):
        """Gets the name of this ShippingAddress.

        Name of the recipient.

        :return: The name of this ShippingAddress.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ShippingAddress.

        Name of the recipient.

        :param name: The name of this ShippingAddress.
        :type name: str
        """

        self._name = name

    @property
    def state(self):
        """Gets the state of this ShippingAddress.


        :return: The state of this ShippingAddress.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ShippingAddress.


        :param state: The state of this ShippingAddress.
        :type state: str
        """

        self._state = state

    @property
    def street1(self):
        """Gets the street1 of this ShippingAddress.

        First line of the street address.

        :return: The street1 of this ShippingAddress.
        :rtype: str
        """
        return self._street1

    @street1.setter
    def street1(self, street1):
        """Sets the street1 of this ShippingAddress.

        First line of the street address.

        :param street1: The street1 of this ShippingAddress.
        :type street1: str
        """

        self._street1 = street1

    @property
    def street2(self):
        """Gets the street2 of this ShippingAddress.

        Second line of the street address (Apartment or Suite number, etc). Optional.

        :return: The street2 of this ShippingAddress.
        :rtype: str
        """
        return self._street2

    @street2.setter
    def street2(self, street2):
        """Sets the street2 of this ShippingAddress.

        Second line of the street address (Apartment or Suite number, etc). Optional.

        :param street2: The street2 of this ShippingAddress.
        :type street2: str
        """

        self._street2 = street2

    @property
    def zip(self):
        """Gets the zip of this ShippingAddress.


        :return: The zip of this ShippingAddress.
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """Sets the zip of this ShippingAddress.


        :param zip: The zip of this ShippingAddress.
        :type zip: str
        """

        self._zip = zip
