# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.production_options_costs import ProductionOptionsCosts
from openapi_server import util


class Quote(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, errors: List[str]=None, grand_total: float=None, items: float=None, options: ProductionOptionsCosts=None, shipping: float=None, tax: float=None, total: float=None):
        """Quote - a model defined in OpenAPI

        :param errors: The errors of this Quote.
        :param grand_total: The grand_total of this Quote.
        :param items: The items of this Quote.
        :param options: The options of this Quote.
        :param shipping: The shipping of this Quote.
        :param tax: The tax of this Quote.
        :param total: The total of this Quote.
        """
        self.openapi_types = {
            'errors': List[str],
            'grand_total': float,
            'items': float,
            'options': ProductionOptionsCosts,
            'shipping': float,
            'tax': float,
            'total': float
        }

        self.attribute_map = {
            'errors': 'errors',
            'grand_total': 'grand_total',
            'items': 'items',
            'options': 'options',
            'shipping': 'shipping',
            'tax': 'tax',
            'total': 'total'
        }

        self._errors = errors
        self._grand_total = grand_total
        self._items = items
        self._options = options
        self._shipping = shipping
        self._tax = tax
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Quote':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Quote of this Quote.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def errors(self):
        """Gets the errors of this Quote.

        List of any issues quoting your order.

        :return: The errors of this Quote.
        :rtype: List[str]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this Quote.

        List of any issues quoting your order.

        :param errors: The errors of this Quote.
        :type errors: List[str]
        """

        self._errors = errors

    @property
    def grand_total(self):
        """Gets the grand_total of this Quote.

        Sum of items, shipping costs, and any calculated tax.

        :return: The grand_total of this Quote.
        :rtype: float
        """
        return self._grand_total

    @grand_total.setter
    def grand_total(self, grand_total):
        """Sets the grand_total of this Quote.

        Sum of items, shipping costs, and any calculated tax.

        :param grand_total: The grand_total of this Quote.
        :type grand_total: float
        """

        self._grand_total = grand_total

    @property
    def items(self):
        """Gets the items of this Quote.

        Cost to make the specified models in the specified materials and quantities.

        :return: The items of this Quote.
        :rtype: float
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this Quote.

        Cost to make the specified models in the specified materials and quantities.

        :param items: The items of this Quote.
        :type items: float
        """

        self._items = items

    @property
    def options(self):
        """Gets the options of this Quote.


        :return: The options of this Quote.
        :rtype: ProductionOptionsCosts
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this Quote.


        :param options: The options of this Quote.
        :type options: ProductionOptionsCosts
        """

        self._options = options

    @property
    def shipping(self):
        """Gets the shipping of this Quote.

        Cost of the selected shipping method.

        :return: The shipping of this Quote.
        :rtype: float
        """
        return self._shipping

    @shipping.setter
    def shipping(self, shipping):
        """Sets the shipping of this Quote.

        Cost of the selected shipping method.

        :param shipping: The shipping of this Quote.
        :type shipping: float
        """

        self._shipping = shipping

    @property
    def tax(self):
        """Gets the tax of this Quote.

        The tax calculated for the given order. Tax is not applied to all orders.

        :return: The tax of this Quote.
        :rtype: float
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """Sets the tax of this Quote.

        The tax calculated for the given order. Tax is not applied to all orders.

        :param tax: The tax of this Quote.
        :type tax: float
        """

        self._tax = tax

    @property
    def total(self):
        """Gets the total of this Quote.

        Sum of items and shipping costs. This is the taxable subtotal.

        :return: The total of this Quote.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this Quote.

        Sum of items and shipping costs. This is the taxable subtotal.

        :param total: The total of this Quote.
        :type total: float
        """

        self._total = total
