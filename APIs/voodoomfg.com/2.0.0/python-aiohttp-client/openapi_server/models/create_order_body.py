# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.model_print import ModelPrint
from openapi_server.models.shipping_address import ShippingAddress
from openapi_server import util


class CreateOrderBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, models: List[ModelPrint]=None, notes: str=None, shipping_address: ShippingAddress=None, shipping_service: str=None):
        """CreateOrderBody - a model defined in OpenAPI

        :param models: The models of this CreateOrderBody.
        :param notes: The notes of this CreateOrderBody.
        :param shipping_address: The shipping_address of this CreateOrderBody.
        :param shipping_service: The shipping_service of this CreateOrderBody.
        """
        self.openapi_types = {
            'models': List[ModelPrint],
            'notes': str,
            'shipping_address': ShippingAddress,
            'shipping_service': str
        }

        self.attribute_map = {
            'models': 'models',
            'notes': 'notes',
            'shipping_address': 'shipping_address',
            'shipping_service': 'shipping_service'
        }

        self._models = models
        self._notes = notes
        self._shipping_address = shipping_address
        self._shipping_service = shipping_service

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateOrderBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateOrderBody of this CreateOrderBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def models(self):
        """Gets the models of this CreateOrderBody.


        :return: The models of this CreateOrderBody.
        :rtype: List[ModelPrint]
        """
        return self._models

    @models.setter
    def models(self, models):
        """Sets the models of this CreateOrderBody.


        :param models: The models of this CreateOrderBody.
        :type models: List[ModelPrint]
        """

        self._models = models

    @property
    def notes(self):
        """Gets the notes of this CreateOrderBody.

        Any notes about this order. This field is always returned when reading the order back.

        :return: The notes of this CreateOrderBody.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this CreateOrderBody.

        Any notes about this order. This field is always returned when reading the order back.

        :param notes: The notes of this CreateOrderBody.
        :type notes: str
        """

        self._notes = notes

    @property
    def shipping_address(self):
        """Gets the shipping_address of this CreateOrderBody.


        :return: The shipping_address of this CreateOrderBody.
        :rtype: ShippingAddress
        """
        return self._shipping_address

    @shipping_address.setter
    def shipping_address(self, shipping_address):
        """Sets the shipping_address of this CreateOrderBody.


        :param shipping_address: The shipping_address of this CreateOrderBody.
        :type shipping_address: ShippingAddress
        """

        self._shipping_address = shipping_address

    @property
    def shipping_service(self):
        """Gets the shipping_service of this CreateOrderBody.

        Service identifier string pulled from a specific rate returned by /order/shipping.

        :return: The shipping_service of this CreateOrderBody.
        :rtype: str
        """
        return self._shipping_service

    @shipping_service.setter
    def shipping_service(self, shipping_service):
        """Sets the shipping_service of this CreateOrderBody.

        Service identifier string pulled from a specific rate returned by /order/shipping.

        :param shipping_service: The shipping_service of this CreateOrderBody.
        :type shipping_service: str
        """

        self._shipping_service = shipping_service
