# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Material(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, color: str=None, color_sample: str=None, id: int=None, type: str=None):
        """Material - a model defined in OpenAPI

        :param color: The color of this Material.
        :param color_sample: The color_sample of this Material.
        :param id: The id of this Material.
        :param type: The type of this Material.
        """
        self.openapi_types = {
            'color': str,
            'color_sample': str,
            'id': int,
            'type': str
        }

        self.attribute_map = {
            'color': 'color',
            'color_sample': 'color_sample',
            'id': 'id',
            'type': 'type'
        }

        self._color = color
        self._color_sample = color_sample
        self._id = id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Material':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Material of this Material.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def color(self):
        """Gets the color of this Material.

        Name for the color of this material. This field is for display only and is not required for creating an order (use the material's id).

        :return: The color of this Material.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this Material.

        Name for the color of this material. This field is for display only and is not required for creating an order (use the material's id).

        :param color: The color of this Material.
        :type color: str
        """

        self._color = color

    @property
    def color_sample(self):
        """Gets the color_sample of this Material.

        A hex value providing an approximate visual sample of this color.

        :return: The color_sample of this Material.
        :rtype: str
        """
        return self._color_sample

    @color_sample.setter
    def color_sample(self, color_sample):
        """Sets the color_sample of this Material.

        A hex value providing an approximate visual sample of this color.

        :param color_sample: The color_sample of this Material.
        :type color_sample: str
        """

        self._color_sample = color_sample

    @property
    def id(self):
        """Gets the id of this Material.

        The unique identifier for this material. Use this value when submitting order items to specify that an ordered model should be printed with a specific material.

        :return: The id of this Material.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Material.

        The unique identifier for this material. Use this value when submitting order items to specify that an ordered model should be printed with a specific material.

        :param id: The id of this Material.
        :type id: int
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this Material.

        Type of material, excluding color. Will be one of \"PLA\", \"Semi-flex TPU\", or \"Full-flex TPU\". This field is for display only and is not required for creating an order (use the material's id).

        :return: The type of this Material.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Material.

        Type of material, excluding color. Will be one of \"PLA\", \"Semi-flex TPU\", or \"Full-flex TPU\". This field is for display only and is not required for creating an order (use the material's id).

        :param type: The type of this Material.
        :type type: str
        """

        self._type = type
