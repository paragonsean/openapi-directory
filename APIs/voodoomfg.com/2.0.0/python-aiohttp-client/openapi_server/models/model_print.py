# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.production_options import ProductionOptions
from openapi_server import util


class ModelPrint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, material_id: int=None, model_id: int=None, options: ProductionOptions=None, quantity: int=None, units: str=None):
        """ModelPrint - a model defined in OpenAPI

        :param material_id: The material_id of this ModelPrint.
        :param model_id: The model_id of this ModelPrint.
        :param options: The options of this ModelPrint.
        :param quantity: The quantity of this ModelPrint.
        :param units: The units of this ModelPrint.
        """
        self.openapi_types = {
            'material_id': int,
            'model_id': int,
            'options': ProductionOptions,
            'quantity': int,
            'units': str
        }

        self.attribute_map = {
            'material_id': 'material_id',
            'model_id': 'model_id',
            'options': 'options',
            'quantity': 'quantity',
            'units': 'units'
        }

        self._material_id = material_id
        self._model_id = model_id
        self._options = options
        self._quantity = quantity
        self._units = units

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModelPrint':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Print of this ModelPrint.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def material_id(self):
        """Gets the material_id of this ModelPrint.

        The unique identifier of the material you'd like to print in. This value comes from the id field of the material object.

        :return: The material_id of this ModelPrint.
        :rtype: int
        """
        return self._material_id

    @material_id.setter
    def material_id(self, material_id):
        """Sets the material_id of this ModelPrint.

        The unique identifier of the material you'd like to print in. This value comes from the id field of the material object.

        :param material_id: The material_id of this ModelPrint.
        :type material_id: int
        """

        self._material_id = material_id

    @property
    def model_id(self):
        """Gets the model_id of this ModelPrint.

        The unique identifier of the model you'd like to print. This value comes from the id field of the model object.

        :return: The model_id of this ModelPrint.
        :rtype: int
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this ModelPrint.

        The unique identifier of the model you'd like to print. This value comes from the id field of the model object.

        :param model_id: The model_id of this ModelPrint.
        :type model_id: int
        """

        self._model_id = model_id

    @property
    def options(self):
        """Gets the options of this ModelPrint.


        :return: The options of this ModelPrint.
        :rtype: ProductionOptions
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this ModelPrint.


        :param options: The options of this ModelPrint.
        :type options: ProductionOptions
        """

        self._options = options

    @property
    def quantity(self):
        """Gets the quantity of this ModelPrint.

        The number of prints to order for this material/model pair.

        :return: The quantity of this ModelPrint.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this ModelPrint.

        The number of prints to order for this material/model pair.

        :param quantity: The quantity of this ModelPrint.
        :type quantity: int
        """

        self._quantity = quantity

    @property
    def units(self):
        """Gets the units of this ModelPrint.

        The units of the model file. Either \"mm\", \"cm\", or \"in\". The correct value to pass here depends on which design program you're using. Defaults to \"mm\".

        :return: The units of this ModelPrint.
        :rtype: str
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this ModelPrint.

        The units of the model file. Either \"mm\", \"cm\", or \"in\". The correct value to pass here depends on which design program you're using. Defaults to \"mm\".

        :param units: The units of this ModelPrint.
        :type units: str
        """

        self._units = units
