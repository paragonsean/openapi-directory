# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Model(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, rendering_url: str=None, surface_area: float=None, volume: float=None, x: float=None, y: float=None, z: float=None):
        """Model - a model defined in OpenAPI

        :param id: The id of this Model.
        :param rendering_url: The rendering_url of this Model.
        :param surface_area: The surface_area of this Model.
        :param volume: The volume of this Model.
        :param x: The x of this Model.
        :param y: The y of this Model.
        :param z: The z of this Model.
        """
        self.openapi_types = {
            'id': int,
            'rendering_url': str,
            'surface_area': float,
            'volume': float,
            'x': float,
            'y': float,
            'z': float
        }

        self.attribute_map = {
            'id': 'id',
            'rendering_url': 'rendering_url',
            'surface_area': 'surface_area',
            'volume': 'volume',
            'x': 'x',
            'y': 'y',
            'z': 'z'
        }

        self._id = id
        self._rendering_url = rendering_url
        self._surface_area = surface_area
        self._volume = volume
        self._x = x
        self._y = y
        self._z = z

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Model':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Model of this Model.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Model.

        The unique identifier for this model. Use this value when submitting an order to specify the model you want to print.

        :return: The id of this Model.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Model.

        The unique identifier for this model. Use this value when submitting an order to specify the model you want to print.

        :param id: The id of this Model.
        :type id: int
        """

        self._id = id

    @property
    def rendering_url(self):
        """Gets the rendering_url of this Model.

        (reserved) URL with a rendering of the model. Value is null until the rendering is completed.

        :return: The rendering_url of this Model.
        :rtype: str
        """
        return self._rendering_url

    @rendering_url.setter
    def rendering_url(self, rendering_url):
        """Sets the rendering_url of this Model.

        (reserved) URL with a rendering of the model. Value is null until the rendering is completed.

        :param rendering_url: The rendering_url of this Model.
        :type rendering_url: str
        """

        self._rendering_url = rendering_url

    @property
    def surface_area(self):
        """Gets the surface_area of this Model.

        The unitless surface area of the submitted model. This is calculated when the model is created.

        :return: The surface_area of this Model.
        :rtype: float
        """
        return self._surface_area

    @surface_area.setter
    def surface_area(self, surface_area):
        """Sets the surface_area of this Model.

        The unitless surface area of the submitted model. This is calculated when the model is created.

        :param surface_area: The surface_area of this Model.
        :type surface_area: float
        """

        self._surface_area = surface_area

    @property
    def volume(self):
        """Gets the volume of this Model.

        The unitless volume of the submitted model. This is calculated when the model is created.

        :return: The volume of this Model.
        :rtype: float
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this Model.

        The unitless volume of the submitted model. This is calculated when the model is created.

        :param volume: The volume of this Model.
        :type volume: float
        """

        self._volume = volume

    @property
    def x(self):
        """Gets the x of this Model.

        The unitless x-axis length of the model's bounding box. This is calculated when the model is created.

        :return: The x of this Model.
        :rtype: float
        """
        return self._x

    @x.setter
    def x(self, x):
        """Sets the x of this Model.

        The unitless x-axis length of the model's bounding box. This is calculated when the model is created.

        :param x: The x of this Model.
        :type x: float
        """

        self._x = x

    @property
    def y(self):
        """Gets the y of this Model.

        The unitless y-axis length of the model's bounding box. This is calculated when the model is created.

        :return: The y of this Model.
        :rtype: float
        """
        return self._y

    @y.setter
    def y(self, y):
        """Sets the y of this Model.

        The unitless y-axis length of the model's bounding box. This is calculated when the model is created.

        :param y: The y of this Model.
        :type y: float
        """

        self._y = y

    @property
    def z(self):
        """Gets the z of this Model.

        The unitless z-axis length of the model's bounding box. This is calculated when the model is created.

        :return: The z of this Model.
        :rtype: float
        """
        return self._z

    @z.setter
    def z(self, z):
        """Sets the z of this Model.

        The unitless z-axis length of the model's bounding box. This is calculated when the model is created.

        :param z: The z of this Model.
        :type z: float
        """

        self._z = z
