/**
 * Voodoo Manufacturing 3D Print API
 * Welcome to the Voodoo Manufacturing API docs!  Your Voodoo Manufacturing API key must be included with each request to the API. The API will look for the key in the \"api_key\" header of the request. <a href=\"https://voodoomfg.com/3d-print-api#get-access\" target=\"_blank\">You can request a key here.</a>  This API provides a programmatic interface for submitting printing orders to Voodoo Manufacturing. The general process for creating an order is as follows:   - Get a list of the available materials with the /materials endpoint   - Upload models to the API with the /models endpoint   - Get quotes for shipping methods with the /order/shipping endpoint   - Get a quote for an order with the /order/create endpoint   - Confirm the order with the /order/confirm endpoint  Uploaded models and orders can be retrieved either in bulk or by id at the /model and /order endpoints, respectively.  In some cases, you may wish to get a quote for a specific model without the context of an order. In this case, you may use the /model/quote (if you've already uploaded the model to the API) or the /model/quote_attrs (lets you quote based on calculated model attributes) endpoints. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@voodoomfg.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Print from './Print';
import Quote from './Quote';
import ShippingAddress from './ShippingAddress';

/**
 * The OrderConfirmPost200Response model module.
 * @module model/OrderConfirmPost200Response
 * @version 2.0.0
 */
class OrderConfirmPost200Response {
    /**
     * Constructs a new <code>OrderConfirmPost200Response</code>.
     * @alias module:model/OrderConfirmPost200Response
     */
    constructor() { 
        
        OrderConfirmPost200Response.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OrderConfirmPost200Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrderConfirmPost200Response} obj Optional instance to populate.
     * @return {module:model/OrderConfirmPost200Response} The populated <code>OrderConfirmPost200Response</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrderConfirmPost200Response();

            if (data.hasOwnProperty('address')) {
                obj['address'] = ShippingAddress.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('delivery_date')) {
                obj['delivery_date'] = ApiClient.convertToType(data['delivery_date'], 'String');
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('order_id')) {
                obj['order_id'] = ApiClient.convertToType(data['order_id'], 'String');
            }
            if (data.hasOwnProperty('order_items')) {
                obj['order_items'] = ApiClient.convertToType(data['order_items'], [Print]);
            }
            if (data.hasOwnProperty('purchased')) {
                obj['purchased'] = ApiClient.convertToType(data['purchased'], 'Boolean');
            }
            if (data.hasOwnProperty('quote')) {
                obj['quote'] = Quote.constructFromObject(data['quote']);
            }
            if (data.hasOwnProperty('shipping_service')) {
                obj['shipping_service'] = ApiClient.convertToType(data['shipping_service'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrderConfirmPost200Response</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrderConfirmPost200Response</code>.
     */
    static validateJSON(data) {
        // validate the optional field `address`
        if (data['address']) { // data not null
          ShippingAddress.validateJSON(data['address']);
        }
        // ensure the json data is a string
        if (data['delivery_date'] && !(typeof data['delivery_date'] === 'string' || data['delivery_date'] instanceof String)) {
            throw new Error("Expected the field `delivery_date` to be a primitive type in the JSON string but got " + data['delivery_date']);
        }
        // ensure the json data is a string
        if (data['notes'] && !(typeof data['notes'] === 'string' || data['notes'] instanceof String)) {
            throw new Error("Expected the field `notes` to be a primitive type in the JSON string but got " + data['notes']);
        }
        // ensure the json data is a string
        if (data['order_id'] && !(typeof data['order_id'] === 'string' || data['order_id'] instanceof String)) {
            throw new Error("Expected the field `order_id` to be a primitive type in the JSON string but got " + data['order_id']);
        }
        if (data['order_items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['order_items'])) {
                throw new Error("Expected the field `order_items` to be an array in the JSON data but got " + data['order_items']);
            }
            // validate the optional field `order_items` (array)
            for (const item of data['order_items']) {
                Print.validateJSON(item);
            };
        }
        // validate the optional field `quote`
        if (data['quote']) { // data not null
          Quote.validateJSON(data['quote']);
        }
        // ensure the json data is a string
        if (data['shipping_service'] && !(typeof data['shipping_service'] === 'string' || data['shipping_service'] instanceof String)) {
            throw new Error("Expected the field `shipping_service` to be a primitive type in the JSON string but got " + data['shipping_service']);
        }

        return true;
    }


}



/**
 * @member {module:model/ShippingAddress} address
 */
OrderConfirmPost200Response.prototype['address'] = undefined;

/**
 * The target delivery date for the shipping method. Formatted as a datetime string.
 * @member {String} delivery_date
 */
OrderConfirmPost200Response.prototype['delivery_date'] = undefined;

/**
 * @member {String} notes
 */
OrderConfirmPost200Response.prototype['notes'] = undefined;

/**
 * Unique identifier for referencing this order.
 * @member {String} order_id
 */
OrderConfirmPost200Response.prototype['order_id'] = undefined;

/**
 * @member {Array.<module:model/Print>} order_items
 */
OrderConfirmPost200Response.prototype['order_items'] = undefined;

/**
 * true if the purchase was completed successfully.
 * @member {Boolean} purchased
 */
OrderConfirmPost200Response.prototype['purchased'] = undefined;

/**
 * @member {module:model/Quote} quote
 */
OrderConfirmPost200Response.prototype['quote'] = undefined;

/**
 * Service identifier string pulled from a specific rate returned by /order/shipping.
 * @member {String} shipping_service
 */
OrderConfirmPost200Response.prototype['shipping_service'] = undefined;






export default OrderConfirmPost200Response;

