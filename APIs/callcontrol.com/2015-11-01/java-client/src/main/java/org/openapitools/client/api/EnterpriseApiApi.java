/*
 * Call Control API
 * API for blocking phone calls with Call Control. Data is from crowdsourced community blacklist from 12+ million users and government agencies (FTC, FCC, IRS) Try with api_key 'demo', hit explore above, and then try phone numbers 18008472911,13157244022,17275567300,18008276655,12061231234.
 *
 * The version of the OpenAPI document: 2015-11-01
 * Contact: info@kedlin.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CallControlUser;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EnterpriseApiApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EnterpriseApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EnterpriseApiApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for enterpriseApiGetUser
     * @param phoneNumber  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User Object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (invalid phone number) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enterpriseApiGetUserCall(String phoneNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2015-11-01/Enterprise/GetUser/{phoneNumber}"
            .replace("{" + "phoneNumber" + "}", localVarApiClient.escapeString(phoneNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseApiGetUserValidateBeforeCall(String phoneNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'phoneNumber' is set
        if (phoneNumber == null) {
            throw new ApiException("Missing the required parameter 'phoneNumber' when calling enterpriseApiGetUser(Async)");
        }

        return enterpriseApiGetUserCall(phoneNumber, _callback);

    }

    /**
     * Enterprise  GET: GetUser  Returns the current information from the user;  try 12066194123 as demo
     * 
     * @param phoneNumber  (required)
     * @return CallControlUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User Object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (invalid phone number) </td><td>  -  </td></tr>
     </table>
     */
    public CallControlUser enterpriseApiGetUser(String phoneNumber) throws ApiException {
        ApiResponse<CallControlUser> localVarResp = enterpriseApiGetUserWithHttpInfo(phoneNumber);
        return localVarResp.getData();
    }

    /**
     * Enterprise  GET: GetUser  Returns the current information from the user;  try 12066194123 as demo
     * 
     * @param phoneNumber  (required)
     * @return ApiResponse&lt;CallControlUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User Object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (invalid phone number) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CallControlUser> enterpriseApiGetUserWithHttpInfo(String phoneNumber) throws ApiException {
        okhttp3.Call localVarCall = enterpriseApiGetUserValidateBeforeCall(phoneNumber, null);
        Type localVarReturnType = new TypeToken<CallControlUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Enterprise  GET: GetUser  Returns the current information from the user;  try 12066194123 as demo (asynchronously)
     * 
     * @param phoneNumber  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User Object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (invalid phone number) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enterpriseApiGetUserAsync(String phoneNumber, final ApiCallback<CallControlUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseApiGetUserValidateBeforeCall(phoneNumber, _callback);
        Type localVarReturnType = new TypeToken<CallControlUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseApiShouldBlock
     * @param phoneNumber phone number to search (required)
     * @param userPhoneNumber (OPTIONAL) phone number of user to look up block rules (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> true(block) false (no block) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (invalid phone number) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enterpriseApiShouldBlockCall(String phoneNumber, String userPhoneNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2015-11-01/Enterprise/ShouldBlock/{phoneNumber}/{userPhoneNumber}"
            .replace("{" + "phoneNumber" + "}", localVarApiClient.escapeString(phoneNumber.toString()))
            .replace("{" + "userPhoneNumber" + "}", localVarApiClient.escapeString(userPhoneNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseApiShouldBlockValidateBeforeCall(String phoneNumber, String userPhoneNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'phoneNumber' is set
        if (phoneNumber == null) {
            throw new ApiException("Missing the required parameter 'phoneNumber' when calling enterpriseApiShouldBlock(Async)");
        }

        // verify the required parameter 'userPhoneNumber' is set
        if (userPhoneNumber == null) {
            throw new ApiException("Missing the required parameter 'userPhoneNumber' when calling enterpriseApiShouldBlock(Async)");
        }

        return enterpriseApiShouldBlockCall(phoneNumber, userPhoneNumber, _callback);

    }

    /**
     * Enterprise  GET: ShouldBlock  Simple Enteprise which returns a call block proceed decision.
     * This returns information required to perform basic call blocking behaviors              Try with api_key &#39;demo&#39; and phone numbers 18008472911, 13157244022, 17275567300, 18008276655, and 12061231234 (last one not spam)
     * @param phoneNumber phone number to search (required)
     * @param userPhoneNumber (OPTIONAL) phone number of user to look up block rules (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> true(block) false (no block) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (invalid phone number) </td><td>  -  </td></tr>
     </table>
     */
    public String enterpriseApiShouldBlock(String phoneNumber, String userPhoneNumber) throws ApiException {
        ApiResponse<String> localVarResp = enterpriseApiShouldBlockWithHttpInfo(phoneNumber, userPhoneNumber);
        return localVarResp.getData();
    }

    /**
     * Enterprise  GET: ShouldBlock  Simple Enteprise which returns a call block proceed decision.
     * This returns information required to perform basic call blocking behaviors              Try with api_key &#39;demo&#39; and phone numbers 18008472911, 13157244022, 17275567300, 18008276655, and 12061231234 (last one not spam)
     * @param phoneNumber phone number to search (required)
     * @param userPhoneNumber (OPTIONAL) phone number of user to look up block rules (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> true(block) false (no block) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (invalid phone number) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> enterpriseApiShouldBlockWithHttpInfo(String phoneNumber, String userPhoneNumber) throws ApiException {
        okhttp3.Call localVarCall = enterpriseApiShouldBlockValidateBeforeCall(phoneNumber, userPhoneNumber, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Enterprise  GET: ShouldBlock  Simple Enteprise which returns a call block proceed decision. (asynchronously)
     * This returns information required to perform basic call blocking behaviors              Try with api_key &#39;demo&#39; and phone numbers 18008472911, 13157244022, 17275567300, 18008276655, and 12061231234 (last one not spam)
     * @param phoneNumber phone number to search (required)
     * @param userPhoneNumber (OPTIONAL) phone number of user to look up block rules (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> true(block) false (no block) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (invalid phone number) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enterpriseApiShouldBlockAsync(String phoneNumber, String userPhoneNumber, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseApiShouldBlockValidateBeforeCall(phoneNumber, userPhoneNumber, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseApiUpsertUser
     * @param user [FromBody] User               &lt;remarks&gt;This returns information required to perform basic call blocking behaviors.  The demo key will return ok, but will not save the data.&lt;br /&gt;&lt;/remarks&gt; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (eg. invalid phone nubmer) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enterpriseApiUpsertUserCall(CallControlUser user, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = user;

        // create path and map variables
        String localVarPath = "/api/2015-11-01/Enterprise/UpsertUser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseApiUpsertUserValidateBeforeCall(CallControlUser user, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling enterpriseApiUpsertUser(Async)");
        }

        return enterpriseApiUpsertUserCall(user, _callback);

    }

    /**
     * UpsertUser: insert or update all properties from a user  PhoneNumber  WhiteList (list of phone numbers to whitelist)  BlackList (list of phone numbers to blacklist)  QuietHourList (list of quiet hour objects)  UseCommunityBlacklist (enable / disable community blacklist) default true  BreakThroughQhWithMultipleCalls (break through quiet hours with two calls in 3 minutes)  WhiteListBreaksQh (break through quiet hours for whitelist)
     * 
     * @param user [FromBody] User               &lt;remarks&gt;This returns information required to perform basic call blocking behaviors.  The demo key will return ok, but will not save the data.&lt;br /&gt;&lt;/remarks&gt; (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (eg. invalid phone nubmer) </td><td>  -  </td></tr>
     </table>
     */
    public Object enterpriseApiUpsertUser(CallControlUser user) throws ApiException {
        ApiResponse<Object> localVarResp = enterpriseApiUpsertUserWithHttpInfo(user);
        return localVarResp.getData();
    }

    /**
     * UpsertUser: insert or update all properties from a user  PhoneNumber  WhiteList (list of phone numbers to whitelist)  BlackList (list of phone numbers to blacklist)  QuietHourList (list of quiet hour objects)  UseCommunityBlacklist (enable / disable community blacklist) default true  BreakThroughQhWithMultipleCalls (break through quiet hours with two calls in 3 minutes)  WhiteListBreaksQh (break through quiet hours for whitelist)
     * 
     * @param user [FromBody] User               &lt;remarks&gt;This returns information required to perform basic call blocking behaviors.  The demo key will return ok, but will not save the data.&lt;br /&gt;&lt;/remarks&gt; (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (eg. invalid phone nubmer) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> enterpriseApiUpsertUserWithHttpInfo(CallControlUser user) throws ApiException {
        okhttp3.Call localVarCall = enterpriseApiUpsertUserValidateBeforeCall(user, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * UpsertUser: insert or update all properties from a user  PhoneNumber  WhiteList (list of phone numbers to whitelist)  BlackList (list of phone numbers to blacklist)  QuietHourList (list of quiet hour objects)  UseCommunityBlacklist (enable / disable community blacklist) default true  BreakThroughQhWithMultipleCalls (break through quiet hours with two calls in 3 minutes)  WhiteListBreaksQh (break through quiet hours for whitelist) (asynchronously)
     * 
     * @param user [FromBody] User               &lt;remarks&gt;This returns information required to perform basic call blocking behaviors.  The demo key will return ok, but will not save the data.&lt;br /&gt;&lt;/remarks&gt; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (eg. invalid phone nubmer) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enterpriseApiUpsertUserAsync(CallControlUser user, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseApiUpsertUserValidateBeforeCall(user, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
