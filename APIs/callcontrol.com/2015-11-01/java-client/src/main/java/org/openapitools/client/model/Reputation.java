/*
 * Call Control API
 * API for blocking phone calls with Call Control. Data is from crowdsourced community blacklist from 12+ million users and government agencies (FTC, FCC, IRS) Try with api_key 'demo', hit explore above, and then try phone numbers 18008472911,13157244022,17275567300,18008276655,12061231234.
 *
 * The version of the OpenAPI document: 2015-11-01
 * Contact: info@kedlin.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Reputation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:21.946009-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Reputation {
  public static final String SERIALIZED_NAME_CALL_TYPE = "CallType";
  @SerializedName(SERIALIZED_NAME_CALL_TYPE)
  private String callType;

  public static final String SERIALIZED_NAME_CONFIDENCE = "Confidence";
  @SerializedName(SERIALIZED_NAME_CONFIDENCE)
  private Integer confidence;

  public static final String SERIALIZED_NAME_IS_SPAM = "IsSpam";
  @SerializedName(SERIALIZED_NAME_IS_SPAM)
  private Boolean isSpam;

  public static final String SERIALIZED_NAME_LAST_COMPLAINT_DATE = "LastComplaintDate";
  @SerializedName(SERIALIZED_NAME_LAST_COMPLAINT_DATE)
  private OffsetDateTime lastComplaintDate;

  public static final String SERIALIZED_NAME_REPORTED_CALLER_NAME = "ReportedCallerName";
  @SerializedName(SERIALIZED_NAME_REPORTED_CALLER_NAME)
  private String reportedCallerName;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public Reputation() {
  }

  public Reputation(
     String callType
  ) {
    this();
    this.callType = callType;
  }

  /**
   * Get callType
   * @return callType
   */
  @javax.annotation.Nullable
  public String getCallType() {
    return callType;
  }



  public Reputation confidence(Integer confidence) {
    this.confidence = confidence;
    return this;
  }

  /**
   * Get confidence
   * @return confidence
   */
  @javax.annotation.Nullable
  public Integer getConfidence() {
    return confidence;
  }

  public void setConfidence(Integer confidence) {
    this.confidence = confidence;
  }


  public Reputation isSpam(Boolean isSpam) {
    this.isSpam = isSpam;
    return this;
  }

  /**
   * Get isSpam
   * @return isSpam
   */
  @javax.annotation.Nullable
  public Boolean getIsSpam() {
    return isSpam;
  }

  public void setIsSpam(Boolean isSpam) {
    this.isSpam = isSpam;
  }


  public Reputation lastComplaintDate(OffsetDateTime lastComplaintDate) {
    this.lastComplaintDate = lastComplaintDate;
    return this;
  }

  /**
   * Get lastComplaintDate
   * @return lastComplaintDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastComplaintDate() {
    return lastComplaintDate;
  }

  public void setLastComplaintDate(OffsetDateTime lastComplaintDate) {
    this.lastComplaintDate = lastComplaintDate;
  }


  public Reputation reportedCallerName(String reportedCallerName) {
    this.reportedCallerName = reportedCallerName;
    return this;
  }

  /**
   * Get reportedCallerName
   * @return reportedCallerName
   */
  @javax.annotation.Nullable
  public String getReportedCallerName() {
    return reportedCallerName;
  }

  public void setReportedCallerName(String reportedCallerName) {
    this.reportedCallerName = reportedCallerName;
  }


  public Reputation tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public Reputation addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Reputation reputation = (Reputation) o;
    return Objects.equals(this.callType, reputation.callType) &&
        Objects.equals(this.confidence, reputation.confidence) &&
        Objects.equals(this.isSpam, reputation.isSpam) &&
        Objects.equals(this.lastComplaintDate, reputation.lastComplaintDate) &&
        Objects.equals(this.reportedCallerName, reputation.reportedCallerName) &&
        Objects.equals(this.tags, reputation.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(callType, confidence, isSpam, lastComplaintDate, reportedCallerName, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Reputation {\n");
    sb.append("    callType: ").append(toIndentedString(callType)).append("\n");
    sb.append("    confidence: ").append(toIndentedString(confidence)).append("\n");
    sb.append("    isSpam: ").append(toIndentedString(isSpam)).append("\n");
    sb.append("    lastComplaintDate: ").append(toIndentedString(lastComplaintDate)).append("\n");
    sb.append("    reportedCallerName: ").append(toIndentedString(reportedCallerName)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CallType");
    openapiFields.add("Confidence");
    openapiFields.add("IsSpam");
    openapiFields.add("LastComplaintDate");
    openapiFields.add("ReportedCallerName");
    openapiFields.add("Tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Reputation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Reputation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Reputation is not found in the empty JSON string", Reputation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Reputation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Reputation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("CallType") != null && !jsonObj.get("CallType").isJsonNull()) && !jsonObj.get("CallType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CallType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CallType").toString()));
      }
      if ((jsonObj.get("ReportedCallerName") != null && !jsonObj.get("ReportedCallerName").isJsonNull()) && !jsonObj.get("ReportedCallerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReportedCallerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReportedCallerName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull() && !jsonObj.get("Tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Tags` to be an array in the JSON string but got `%s`", jsonObj.get("Tags").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Reputation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Reputation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Reputation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Reputation.class));

       return (TypeAdapter<T>) new TypeAdapter<Reputation>() {
           @Override
           public void write(JsonWriter out, Reputation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Reputation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Reputation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Reputation
   * @throws IOException if the JSON string is invalid with respect to Reputation
   */
  public static Reputation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Reputation.class);
  }

  /**
   * Convert an instance of Reputation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

