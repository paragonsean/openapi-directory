/*
 * Call Control API
 * API for blocking phone calls with Call Control. Data is from crowdsourced community blacklist from 12+ million users and government agencies (FTC, FCC, IRS) Try with api_key 'demo', hit explore above, and then try phone numbers 18008472911,13157244022,17275567300,18008276655,12061231234.
 *
 * The version of the OpenAPI document: 2015-11-01
 * Contact: info@kedlin.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * QuietHour
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:21.946009-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class QuietHour {
  /**
   * Gets or Sets dayOfWeekList
   */
  @JsonAdapter(DayOfWeekListEnum.Adapter.class)
  public enum DayOfWeekListEnum {
    SUNDAY("Sunday"),
    
    MONDAY("Monday"),
    
    TUESDAY("Tuesday"),
    
    WEDNESDAY("Wednesday"),
    
    THURSDAY("Thursday"),
    
    FRIDAY("Friday"),
    
    SATURDAY("Saturday");

    private String value;

    DayOfWeekListEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DayOfWeekListEnum fromValue(String value) {
      for (DayOfWeekListEnum b : DayOfWeekListEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DayOfWeekListEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DayOfWeekListEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DayOfWeekListEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DayOfWeekListEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DayOfWeekListEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DAY_OF_WEEK_LIST = "DayOfWeekList";
  @SerializedName(SERIALIZED_NAME_DAY_OF_WEEK_LIST)
  private List<DayOfWeekListEnum> dayOfWeekList = new ArrayList<>();

  public static final String SERIALIZED_NAME_DURATION_MIN = "DurationMin";
  @SerializedName(SERIALIZED_NAME_DURATION_MIN)
  private Integer durationMin;

  public static final String SERIALIZED_NAME_START_HOUR_LOCAL = "StartHourLocal";
  @SerializedName(SERIALIZED_NAME_START_HOUR_LOCAL)
  private Integer startHourLocal;

  public static final String SERIALIZED_NAME_START_MIN_LOCAL = "StartMinLocal";
  @SerializedName(SERIALIZED_NAME_START_MIN_LOCAL)
  private Integer startMinLocal;

  public static final String SERIALIZED_NAME_TIME_ZONE_NAME = "TimeZoneName";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE_NAME)
  private String timeZoneName;

  public QuietHour() {
  }

  public QuietHour dayOfWeekList(List<DayOfWeekListEnum> dayOfWeekList) {
    this.dayOfWeekList = dayOfWeekList;
    return this;
  }

  public QuietHour addDayOfWeekListItem(DayOfWeekListEnum dayOfWeekListItem) {
    if (this.dayOfWeekList == null) {
      this.dayOfWeekList = new ArrayList<>();
    }
    this.dayOfWeekList.add(dayOfWeekListItem);
    return this;
  }

  /**
   * Get dayOfWeekList
   * @return dayOfWeekList
   */
  @javax.annotation.Nullable
  public List<DayOfWeekListEnum> getDayOfWeekList() {
    return dayOfWeekList;
  }

  public void setDayOfWeekList(List<DayOfWeekListEnum> dayOfWeekList) {
    this.dayOfWeekList = dayOfWeekList;
  }


  public QuietHour durationMin(Integer durationMin) {
    this.durationMin = durationMin;
    return this;
  }

  /**
   * Get durationMin
   * @return durationMin
   */
  @javax.annotation.Nullable
  public Integer getDurationMin() {
    return durationMin;
  }

  public void setDurationMin(Integer durationMin) {
    this.durationMin = durationMin;
  }


  public QuietHour startHourLocal(Integer startHourLocal) {
    this.startHourLocal = startHourLocal;
    return this;
  }

  /**
   * Get startHourLocal
   * @return startHourLocal
   */
  @javax.annotation.Nullable
  public Integer getStartHourLocal() {
    return startHourLocal;
  }

  public void setStartHourLocal(Integer startHourLocal) {
    this.startHourLocal = startHourLocal;
  }


  public QuietHour startMinLocal(Integer startMinLocal) {
    this.startMinLocal = startMinLocal;
    return this;
  }

  /**
   * Get startMinLocal
   * @return startMinLocal
   */
  @javax.annotation.Nullable
  public Integer getStartMinLocal() {
    return startMinLocal;
  }

  public void setStartMinLocal(Integer startMinLocal) {
    this.startMinLocal = startMinLocal;
  }


  public QuietHour timeZoneName(String timeZoneName) {
    this.timeZoneName = timeZoneName;
    return this;
  }

  /**
   * Get timeZoneName
   * @return timeZoneName
   */
  @javax.annotation.Nullable
  public String getTimeZoneName() {
    return timeZoneName;
  }

  public void setTimeZoneName(String timeZoneName) {
    this.timeZoneName = timeZoneName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QuietHour quietHour = (QuietHour) o;
    return Objects.equals(this.dayOfWeekList, quietHour.dayOfWeekList) &&
        Objects.equals(this.durationMin, quietHour.durationMin) &&
        Objects.equals(this.startHourLocal, quietHour.startHourLocal) &&
        Objects.equals(this.startMinLocal, quietHour.startMinLocal) &&
        Objects.equals(this.timeZoneName, quietHour.timeZoneName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dayOfWeekList, durationMin, startHourLocal, startMinLocal, timeZoneName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QuietHour {\n");
    sb.append("    dayOfWeekList: ").append(toIndentedString(dayOfWeekList)).append("\n");
    sb.append("    durationMin: ").append(toIndentedString(durationMin)).append("\n");
    sb.append("    startHourLocal: ").append(toIndentedString(startHourLocal)).append("\n");
    sb.append("    startMinLocal: ").append(toIndentedString(startMinLocal)).append("\n");
    sb.append("    timeZoneName: ").append(toIndentedString(timeZoneName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DayOfWeekList");
    openapiFields.add("DurationMin");
    openapiFields.add("StartHourLocal");
    openapiFields.add("StartMinLocal");
    openapiFields.add("TimeZoneName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QuietHour
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QuietHour.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QuietHour is not found in the empty JSON string", QuietHour.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QuietHour.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QuietHour` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("DayOfWeekList") != null && !jsonObj.get("DayOfWeekList").isJsonNull() && !jsonObj.get("DayOfWeekList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `DayOfWeekList` to be an array in the JSON string but got `%s`", jsonObj.get("DayOfWeekList").toString()));
      }
      if ((jsonObj.get("TimeZoneName") != null && !jsonObj.get("TimeZoneName").isJsonNull()) && !jsonObj.get("TimeZoneName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TimeZoneName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TimeZoneName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QuietHour.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QuietHour' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QuietHour> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QuietHour.class));

       return (TypeAdapter<T>) new TypeAdapter<QuietHour>() {
           @Override
           public void write(JsonWriter out, QuietHour value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QuietHour read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QuietHour given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QuietHour
   * @throws IOException if the JSON string is invalid with respect to QuietHour
   */
  public static QuietHour fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QuietHour.class);
  }

  /**
   * Convert an instance of QuietHour to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

