/*
 * Call Control API
 * API for blocking phone calls with Call Control. Data is from crowdsourced community blacklist from 12+ million users and government agencies (FTC, FCC, IRS) Try with api_key 'demo', hit explore above, and then try phone numbers 18008472911,13157244022,17275567300,18008276655,12061231234.
 *
 * The version of the OpenAPI document: 2015-11-01
 * Contact: info@kedlin.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Call Report  PhoneNumber,   Caller name(optional),   Call category(optional),   Comment or tags(free text) (optional),   Unwanted call  - yes/no(optional),
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:21.946009-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CallReport {
  public static final String SERIALIZED_NAME_CALL_TIME = "CallTime";
  @SerializedName(SERIALIZED_NAME_CALL_TIME)
  private OffsetDateTime callTime;

  /**
   * Gets or Sets callerType
   */
  @JsonAdapter(CallerTypeEnum.Adapter.class)
  public enum CallerTypeEnum {
    UNKNOWN("Unknown"),
    
    TELEMARKETING("Telemarketing"),
    
    COLLECTION_AGENCY("Collection_Agency"),
    
    POLITICAL("Political"),
    
    SURVEYOR("Surveyor"),
    
    PRANK_CALL("Prank_Call"),
    
    FUND_RAISER("Fund_Raiser"),
    
    OTHER_COMMERCIAL("Other_Commercial"),
    
    SCAM("Scam"),
    
    VOIP("VOIP"),
    
    BUSINESS("Business"),
    
    REMINDER_NOTIFICATION_CALL("Reminder_Notification_Call"),
    
    JUNK_FAX("Junk_Fax"),
    
    FAX_MACHINE("Fax_Machine"),
    
    SPAM_TEXT("Spam_Text"),
    
    ROBO_CALL("RoboCall"),
    
    NOT_SPAM("NotSpam"),
    
    CALLBACK("Callback");

    private String value;

    CallerTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CallerTypeEnum fromValue(String value) {
      for (CallerTypeEnum b : CallerTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CallerTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CallerTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CallerTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CallerTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CallerTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CALLER_TYPE = "CallerType";
  @SerializedName(SERIALIZED_NAME_CALLER_TYPE)
  private CallerTypeEnum callerType;

  public static final String SERIALIZED_NAME_COMMENT = "Comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_IP_ADDRESS = "IpAddress";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private String ipAddress;

  public static final String SERIALIZED_NAME_LATITUDE = "Latitude";
  @SerializedName(SERIALIZED_NAME_LATITUDE)
  private Double latitude;

  public static final String SERIALIZED_NAME_LONGITUDE = "Longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  private Double longitude;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "PhoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private String phoneNumber;

  public static final String SERIALIZED_NAME_REPORTED_CALLER_ID = "ReportedCallerId";
  @SerializedName(SERIALIZED_NAME_REPORTED_CALLER_ID)
  private String reportedCallerId;

  public static final String SERIALIZED_NAME_REPORTED_CALLER_NAME = "ReportedCallerName";
  @SerializedName(SERIALIZED_NAME_REPORTED_CALLER_NAME)
  private String reportedCallerName;

  public static final String SERIALIZED_NAME_REPORTER = "Reporter";
  @SerializedName(SERIALIZED_NAME_REPORTER)
  private String reporter;

  public static final String SERIALIZED_NAME_UNWANTED_CALL = "UnwantedCall";
  @SerializedName(SERIALIZED_NAME_UNWANTED_CALL)
  private Boolean unwantedCall;

  public CallReport() {
  }

  public CallReport callTime(OffsetDateTime callTime) {
    this.callTime = callTime;
    return this;
  }

  /**
   * Get callTime
   * @return callTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCallTime() {
    return callTime;
  }

  public void setCallTime(OffsetDateTime callTime) {
    this.callTime = callTime;
  }


  public CallReport callerType(CallerTypeEnum callerType) {
    this.callerType = callerType;
    return this;
  }

  /**
   * Get callerType
   * @return callerType
   */
  @javax.annotation.Nullable
  public CallerTypeEnum getCallerType() {
    return callerType;
  }

  public void setCallerType(CallerTypeEnum callerType) {
    this.callerType = callerType;
  }


  public CallReport comment(String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Get comment
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }


  public CallReport ipAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

  /**
   * Get ipAddress
   * @return ipAddress
   */
  @javax.annotation.Nullable
  public String getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }


  public CallReport latitude(Double latitude) {
    this.latitude = latitude;
    return this;
  }

  /**
   * Get latitude
   * @return latitude
   */
  @javax.annotation.Nullable
  public Double getLatitude() {
    return latitude;
  }

  public void setLatitude(Double latitude) {
    this.latitude = latitude;
  }


  public CallReport longitude(Double longitude) {
    this.longitude = longitude;
    return this;
  }

  /**
   * Get longitude
   * @return longitude
   */
  @javax.annotation.Nullable
  public Double getLongitude() {
    return longitude;
  }

  public void setLongitude(Double longitude) {
    this.longitude = longitude;
  }


  public CallReport phoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * Get phoneNumber
   * @return phoneNumber
   */
  @javax.annotation.Nullable
  public String getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public CallReport reportedCallerId(String reportedCallerId) {
    this.reportedCallerId = reportedCallerId;
    return this;
  }

  /**
   * Get reportedCallerId
   * @return reportedCallerId
   */
  @javax.annotation.Nullable
  public String getReportedCallerId() {
    return reportedCallerId;
  }

  public void setReportedCallerId(String reportedCallerId) {
    this.reportedCallerId = reportedCallerId;
  }


  public CallReport reportedCallerName(String reportedCallerName) {
    this.reportedCallerName = reportedCallerName;
    return this;
  }

  /**
   * Get reportedCallerName
   * @return reportedCallerName
   */
  @javax.annotation.Nullable
  public String getReportedCallerName() {
    return reportedCallerName;
  }

  public void setReportedCallerName(String reportedCallerName) {
    this.reportedCallerName = reportedCallerName;
  }


  public CallReport reporter(String reporter) {
    this.reporter = reporter;
    return this;
  }

  /**
   * Get reporter
   * @return reporter
   */
  @javax.annotation.Nullable
  public String getReporter() {
    return reporter;
  }

  public void setReporter(String reporter) {
    this.reporter = reporter;
  }


  public CallReport unwantedCall(Boolean unwantedCall) {
    this.unwantedCall = unwantedCall;
    return this;
  }

  /**
   * Get unwantedCall
   * @return unwantedCall
   */
  @javax.annotation.Nullable
  public Boolean getUnwantedCall() {
    return unwantedCall;
  }

  public void setUnwantedCall(Boolean unwantedCall) {
    this.unwantedCall = unwantedCall;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CallReport callReport = (CallReport) o;
    return Objects.equals(this.callTime, callReport.callTime) &&
        Objects.equals(this.callerType, callReport.callerType) &&
        Objects.equals(this.comment, callReport.comment) &&
        Objects.equals(this.ipAddress, callReport.ipAddress) &&
        Objects.equals(this.latitude, callReport.latitude) &&
        Objects.equals(this.longitude, callReport.longitude) &&
        Objects.equals(this.phoneNumber, callReport.phoneNumber) &&
        Objects.equals(this.reportedCallerId, callReport.reportedCallerId) &&
        Objects.equals(this.reportedCallerName, callReport.reportedCallerName) &&
        Objects.equals(this.reporter, callReport.reporter) &&
        Objects.equals(this.unwantedCall, callReport.unwantedCall);
  }

  @Override
  public int hashCode() {
    return Objects.hash(callTime, callerType, comment, ipAddress, latitude, longitude, phoneNumber, reportedCallerId, reportedCallerName, reporter, unwantedCall);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CallReport {\n");
    sb.append("    callTime: ").append(toIndentedString(callTime)).append("\n");
    sb.append("    callerType: ").append(toIndentedString(callerType)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    reportedCallerId: ").append(toIndentedString(reportedCallerId)).append("\n");
    sb.append("    reportedCallerName: ").append(toIndentedString(reportedCallerName)).append("\n");
    sb.append("    reporter: ").append(toIndentedString(reporter)).append("\n");
    sb.append("    unwantedCall: ").append(toIndentedString(unwantedCall)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CallTime");
    openapiFields.add("CallerType");
    openapiFields.add("Comment");
    openapiFields.add("IpAddress");
    openapiFields.add("Latitude");
    openapiFields.add("Longitude");
    openapiFields.add("PhoneNumber");
    openapiFields.add("ReportedCallerId");
    openapiFields.add("ReportedCallerName");
    openapiFields.add("Reporter");
    openapiFields.add("UnwantedCall");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CallReport
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CallReport.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CallReport is not found in the empty JSON string", CallReport.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CallReport.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CallReport` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("CallerType") != null && !jsonObj.get("CallerType").isJsonNull()) && !jsonObj.get("CallerType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CallerType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CallerType").toString()));
      }
      // validate the optional field `CallerType`
      if (jsonObj.get("CallerType") != null && !jsonObj.get("CallerType").isJsonNull()) {
        CallerTypeEnum.validateJsonElement(jsonObj.get("CallerType"));
      }
      if ((jsonObj.get("Comment") != null && !jsonObj.get("Comment").isJsonNull()) && !jsonObj.get("Comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Comment").toString()));
      }
      if ((jsonObj.get("IpAddress") != null && !jsonObj.get("IpAddress").isJsonNull()) && !jsonObj.get("IpAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IpAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IpAddress").toString()));
      }
      if ((jsonObj.get("PhoneNumber") != null && !jsonObj.get("PhoneNumber").isJsonNull()) && !jsonObj.get("PhoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PhoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PhoneNumber").toString()));
      }
      if ((jsonObj.get("ReportedCallerId") != null && !jsonObj.get("ReportedCallerId").isJsonNull()) && !jsonObj.get("ReportedCallerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReportedCallerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReportedCallerId").toString()));
      }
      if ((jsonObj.get("ReportedCallerName") != null && !jsonObj.get("ReportedCallerName").isJsonNull()) && !jsonObj.get("ReportedCallerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReportedCallerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReportedCallerName").toString()));
      }
      if ((jsonObj.get("Reporter") != null && !jsonObj.get("Reporter").isJsonNull()) && !jsonObj.get("Reporter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Reporter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Reporter").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CallReport.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CallReport' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CallReport> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CallReport.class));

       return (TypeAdapter<T>) new TypeAdapter<CallReport>() {
           @Override
           public void write(JsonWriter out, CallReport value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CallReport read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CallReport given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CallReport
   * @throws IOException if the JSON string is invalid with respect to CallReport
   */
  public static CallReport fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CallReport.class);
  }

  /**
   * Convert an instance of CallReport to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

