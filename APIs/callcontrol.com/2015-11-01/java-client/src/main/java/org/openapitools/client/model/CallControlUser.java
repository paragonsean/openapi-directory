/*
 * Call Control API
 * API for blocking phone calls with Call Control. Data is from crowdsourced community blacklist from 12+ million users and government agencies (FTC, FCC, IRS) Try with api_key 'demo', hit explore above, and then try phone numbers 18008472911,13157244022,17275567300,18008276655,12061231234.
 *
 * The version of the OpenAPI document: 2015-11-01
 * Contact: info@kedlin.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.QuietHour;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CallControlUser
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:21.946009-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CallControlUser {
  public static final String SERIALIZED_NAME_AGE = "Age";
  @SerializedName(SERIALIZED_NAME_AGE)
  private Integer age;

  public static final String SERIALIZED_NAME_BLACK_LIST = "BlackList";
  @SerializedName(SERIALIZED_NAME_BLACK_LIST)
  private List<String> blackList = new ArrayList<>();

  /**
   * Gets or Sets blockBehavior
   */
  @JsonAdapter(BlockBehaviorEnum.Adapter.class)
  public enum BlockBehaviorEnum {
    ALLOW("allow"),
    
    VOICE_MAIL("voiceMail"),
    
    BLOCK("block");

    private String value;

    BlockBehaviorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BlockBehaviorEnum fromValue(String value) {
      for (BlockBehaviorEnum b : BlockBehaviorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BlockBehaviorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BlockBehaviorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BlockBehaviorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BlockBehaviorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BlockBehaviorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BLOCK_BEHAVIOR = "BlockBehavior";
  @SerializedName(SERIALIZED_NAME_BLOCK_BEHAVIOR)
  private BlockBehaviorEnum blockBehavior;

  public static final String SERIALIZED_NAME_BREAK_THROUGH_QH_WITH_MULTIPLE_CALLS = "BreakThroughQhWithMultipleCalls";
  @SerializedName(SERIALIZED_NAME_BREAK_THROUGH_QH_WITH_MULTIPLE_CALLS)
  private Boolean breakThroughQhWithMultipleCalls;

  public static final String SERIALIZED_NAME_EMAIL = "Email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_FIRST_NAME = "FirstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_GENDER = "Gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  private String gender;

  public static final String SERIALIZED_NAME_LAST_NAME = "LastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_MIDDLE_NAME = "MiddleName";
  @SerializedName(SERIALIZED_NAME_MIDDLE_NAME)
  private String middleName;

  public static final String SERIALIZED_NAME_PHONE_NUMBE_REGION = "PhoneNumbeRegion";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBE_REGION)
  private String phoneNumbeRegion;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "PhoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private String phoneNumber;

  public static final String SERIALIZED_NAME_QUIET_HOUR_LIST = "QuietHourList";
  @SerializedName(SERIALIZED_NAME_QUIET_HOUR_LIST)
  private List<QuietHour> quietHourList = new ArrayList<>();

  public static final String SERIALIZED_NAME_SALUTATION = "Salutation";
  @SerializedName(SERIALIZED_NAME_SALUTATION)
  private String salutation;

  public static final String SERIALIZED_NAME_SUFFIX = "Suffix";
  @SerializedName(SERIALIZED_NAME_SUFFIX)
  private String suffix;

  public static final String SERIALIZED_NAME_USE_COMMUNITY_BLACKLIST = "UseCommunityBlacklist";
  @SerializedName(SERIALIZED_NAME_USE_COMMUNITY_BLACKLIST)
  private Boolean useCommunityBlacklist;

  public static final String SERIALIZED_NAME_WHITE_LIST = "WhiteList";
  @SerializedName(SERIALIZED_NAME_WHITE_LIST)
  private List<String> whiteList = new ArrayList<>();

  public static final String SERIALIZED_NAME_WHITE_LIST_BREAKS_QH = "WhiteListBreaksQh";
  @SerializedName(SERIALIZED_NAME_WHITE_LIST_BREAKS_QH)
  private Boolean whiteListBreaksQh;

  public CallControlUser() {
  }

  public CallControlUser age(Integer age) {
    this.age = age;
    return this;
  }

  /**
   * Get age
   * @return age
   */
  @javax.annotation.Nullable
  public Integer getAge() {
    return age;
  }

  public void setAge(Integer age) {
    this.age = age;
  }


  public CallControlUser blackList(List<String> blackList) {
    this.blackList = blackList;
    return this;
  }

  public CallControlUser addBlackListItem(String blackListItem) {
    if (this.blackList == null) {
      this.blackList = new ArrayList<>();
    }
    this.blackList.add(blackListItem);
    return this;
  }

  /**
   * Get blackList
   * @return blackList
   */
  @javax.annotation.Nullable
  public List<String> getBlackList() {
    return blackList;
  }

  public void setBlackList(List<String> blackList) {
    this.blackList = blackList;
  }


  public CallControlUser blockBehavior(BlockBehaviorEnum blockBehavior) {
    this.blockBehavior = blockBehavior;
    return this;
  }

  /**
   * Get blockBehavior
   * @return blockBehavior
   */
  @javax.annotation.Nullable
  public BlockBehaviorEnum getBlockBehavior() {
    return blockBehavior;
  }

  public void setBlockBehavior(BlockBehaviorEnum blockBehavior) {
    this.blockBehavior = blockBehavior;
  }


  public CallControlUser breakThroughQhWithMultipleCalls(Boolean breakThroughQhWithMultipleCalls) {
    this.breakThroughQhWithMultipleCalls = breakThroughQhWithMultipleCalls;
    return this;
  }

  /**
   * Get breakThroughQhWithMultipleCalls
   * @return breakThroughQhWithMultipleCalls
   */
  @javax.annotation.Nullable
  public Boolean getBreakThroughQhWithMultipleCalls() {
    return breakThroughQhWithMultipleCalls;
  }

  public void setBreakThroughQhWithMultipleCalls(Boolean breakThroughQhWithMultipleCalls) {
    this.breakThroughQhWithMultipleCalls = breakThroughQhWithMultipleCalls;
  }


  public CallControlUser email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public CallControlUser firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * Get firstName
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public CallControlUser gender(String gender) {
    this.gender = gender;
    return this;
  }

  /**
   * Get gender
   * @return gender
   */
  @javax.annotation.Nullable
  public String getGender() {
    return gender;
  }

  public void setGender(String gender) {
    this.gender = gender;
  }


  public CallControlUser lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * Get lastName
   * @return lastName
   */
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public CallControlUser middleName(String middleName) {
    this.middleName = middleName;
    return this;
  }

  /**
   * Get middleName
   * @return middleName
   */
  @javax.annotation.Nullable
  public String getMiddleName() {
    return middleName;
  }

  public void setMiddleName(String middleName) {
    this.middleName = middleName;
  }


  public CallControlUser phoneNumbeRegion(String phoneNumbeRegion) {
    this.phoneNumbeRegion = phoneNumbeRegion;
    return this;
  }

  /**
   * Get phoneNumbeRegion
   * @return phoneNumbeRegion
   */
  @javax.annotation.Nullable
  public String getPhoneNumbeRegion() {
    return phoneNumbeRegion;
  }

  public void setPhoneNumbeRegion(String phoneNumbeRegion) {
    this.phoneNumbeRegion = phoneNumbeRegion;
  }


  public CallControlUser phoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * Get phoneNumber
   * @return phoneNumber
   */
  @javax.annotation.Nullable
  public String getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public CallControlUser quietHourList(List<QuietHour> quietHourList) {
    this.quietHourList = quietHourList;
    return this;
  }

  public CallControlUser addQuietHourListItem(QuietHour quietHourListItem) {
    if (this.quietHourList == null) {
      this.quietHourList = new ArrayList<>();
    }
    this.quietHourList.add(quietHourListItem);
    return this;
  }

  /**
   * Get quietHourList
   * @return quietHourList
   */
  @javax.annotation.Nullable
  public List<QuietHour> getQuietHourList() {
    return quietHourList;
  }

  public void setQuietHourList(List<QuietHour> quietHourList) {
    this.quietHourList = quietHourList;
  }


  public CallControlUser salutation(String salutation) {
    this.salutation = salutation;
    return this;
  }

  /**
   * Get salutation
   * @return salutation
   */
  @javax.annotation.Nullable
  public String getSalutation() {
    return salutation;
  }

  public void setSalutation(String salutation) {
    this.salutation = salutation;
  }


  public CallControlUser suffix(String suffix) {
    this.suffix = suffix;
    return this;
  }

  /**
   * Get suffix
   * @return suffix
   */
  @javax.annotation.Nullable
  public String getSuffix() {
    return suffix;
  }

  public void setSuffix(String suffix) {
    this.suffix = suffix;
  }


  public CallControlUser useCommunityBlacklist(Boolean useCommunityBlacklist) {
    this.useCommunityBlacklist = useCommunityBlacklist;
    return this;
  }

  /**
   * Get useCommunityBlacklist
   * @return useCommunityBlacklist
   */
  @javax.annotation.Nullable
  public Boolean getUseCommunityBlacklist() {
    return useCommunityBlacklist;
  }

  public void setUseCommunityBlacklist(Boolean useCommunityBlacklist) {
    this.useCommunityBlacklist = useCommunityBlacklist;
  }


  public CallControlUser whiteList(List<String> whiteList) {
    this.whiteList = whiteList;
    return this;
  }

  public CallControlUser addWhiteListItem(String whiteListItem) {
    if (this.whiteList == null) {
      this.whiteList = new ArrayList<>();
    }
    this.whiteList.add(whiteListItem);
    return this;
  }

  /**
   * Get whiteList
   * @return whiteList
   */
  @javax.annotation.Nullable
  public List<String> getWhiteList() {
    return whiteList;
  }

  public void setWhiteList(List<String> whiteList) {
    this.whiteList = whiteList;
  }


  public CallControlUser whiteListBreaksQh(Boolean whiteListBreaksQh) {
    this.whiteListBreaksQh = whiteListBreaksQh;
    return this;
  }

  /**
   * Get whiteListBreaksQh
   * @return whiteListBreaksQh
   */
  @javax.annotation.Nullable
  public Boolean getWhiteListBreaksQh() {
    return whiteListBreaksQh;
  }

  public void setWhiteListBreaksQh(Boolean whiteListBreaksQh) {
    this.whiteListBreaksQh = whiteListBreaksQh;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CallControlUser callControlUser = (CallControlUser) o;
    return Objects.equals(this.age, callControlUser.age) &&
        Objects.equals(this.blackList, callControlUser.blackList) &&
        Objects.equals(this.blockBehavior, callControlUser.blockBehavior) &&
        Objects.equals(this.breakThroughQhWithMultipleCalls, callControlUser.breakThroughQhWithMultipleCalls) &&
        Objects.equals(this.email, callControlUser.email) &&
        Objects.equals(this.firstName, callControlUser.firstName) &&
        Objects.equals(this.gender, callControlUser.gender) &&
        Objects.equals(this.lastName, callControlUser.lastName) &&
        Objects.equals(this.middleName, callControlUser.middleName) &&
        Objects.equals(this.phoneNumbeRegion, callControlUser.phoneNumbeRegion) &&
        Objects.equals(this.phoneNumber, callControlUser.phoneNumber) &&
        Objects.equals(this.quietHourList, callControlUser.quietHourList) &&
        Objects.equals(this.salutation, callControlUser.salutation) &&
        Objects.equals(this.suffix, callControlUser.suffix) &&
        Objects.equals(this.useCommunityBlacklist, callControlUser.useCommunityBlacklist) &&
        Objects.equals(this.whiteList, callControlUser.whiteList) &&
        Objects.equals(this.whiteListBreaksQh, callControlUser.whiteListBreaksQh);
  }

  @Override
  public int hashCode() {
    return Objects.hash(age, blackList, blockBehavior, breakThroughQhWithMultipleCalls, email, firstName, gender, lastName, middleName, phoneNumbeRegion, phoneNumber, quietHourList, salutation, suffix, useCommunityBlacklist, whiteList, whiteListBreaksQh);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CallControlUser {\n");
    sb.append("    age: ").append(toIndentedString(age)).append("\n");
    sb.append("    blackList: ").append(toIndentedString(blackList)).append("\n");
    sb.append("    blockBehavior: ").append(toIndentedString(blockBehavior)).append("\n");
    sb.append("    breakThroughQhWithMultipleCalls: ").append(toIndentedString(breakThroughQhWithMultipleCalls)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    middleName: ").append(toIndentedString(middleName)).append("\n");
    sb.append("    phoneNumbeRegion: ").append(toIndentedString(phoneNumbeRegion)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    quietHourList: ").append(toIndentedString(quietHourList)).append("\n");
    sb.append("    salutation: ").append(toIndentedString(salutation)).append("\n");
    sb.append("    suffix: ").append(toIndentedString(suffix)).append("\n");
    sb.append("    useCommunityBlacklist: ").append(toIndentedString(useCommunityBlacklist)).append("\n");
    sb.append("    whiteList: ").append(toIndentedString(whiteList)).append("\n");
    sb.append("    whiteListBreaksQh: ").append(toIndentedString(whiteListBreaksQh)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Age");
    openapiFields.add("BlackList");
    openapiFields.add("BlockBehavior");
    openapiFields.add("BreakThroughQhWithMultipleCalls");
    openapiFields.add("Email");
    openapiFields.add("FirstName");
    openapiFields.add("Gender");
    openapiFields.add("LastName");
    openapiFields.add("MiddleName");
    openapiFields.add("PhoneNumbeRegion");
    openapiFields.add("PhoneNumber");
    openapiFields.add("QuietHourList");
    openapiFields.add("Salutation");
    openapiFields.add("Suffix");
    openapiFields.add("UseCommunityBlacklist");
    openapiFields.add("WhiteList");
    openapiFields.add("WhiteListBreaksQh");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CallControlUser
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CallControlUser.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CallControlUser is not found in the empty JSON string", CallControlUser.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CallControlUser.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CallControlUser` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("BlackList") != null && !jsonObj.get("BlackList").isJsonNull() && !jsonObj.get("BlackList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `BlackList` to be an array in the JSON string but got `%s`", jsonObj.get("BlackList").toString()));
      }
      if ((jsonObj.get("BlockBehavior") != null && !jsonObj.get("BlockBehavior").isJsonNull()) && !jsonObj.get("BlockBehavior").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BlockBehavior` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BlockBehavior").toString()));
      }
      // validate the optional field `BlockBehavior`
      if (jsonObj.get("BlockBehavior") != null && !jsonObj.get("BlockBehavior").isJsonNull()) {
        BlockBehaviorEnum.validateJsonElement(jsonObj.get("BlockBehavior"));
      }
      if ((jsonObj.get("Email") != null && !jsonObj.get("Email").isJsonNull()) && !jsonObj.get("Email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Email").toString()));
      }
      if ((jsonObj.get("FirstName") != null && !jsonObj.get("FirstName").isJsonNull()) && !jsonObj.get("FirstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FirstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FirstName").toString()));
      }
      if ((jsonObj.get("Gender") != null && !jsonObj.get("Gender").isJsonNull()) && !jsonObj.get("Gender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Gender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Gender").toString()));
      }
      if ((jsonObj.get("LastName") != null && !jsonObj.get("LastName").isJsonNull()) && !jsonObj.get("LastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LastName").toString()));
      }
      if ((jsonObj.get("MiddleName") != null && !jsonObj.get("MiddleName").isJsonNull()) && !jsonObj.get("MiddleName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MiddleName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MiddleName").toString()));
      }
      if ((jsonObj.get("PhoneNumbeRegion") != null && !jsonObj.get("PhoneNumbeRegion").isJsonNull()) && !jsonObj.get("PhoneNumbeRegion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PhoneNumbeRegion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PhoneNumbeRegion").toString()));
      }
      if ((jsonObj.get("PhoneNumber") != null && !jsonObj.get("PhoneNumber").isJsonNull()) && !jsonObj.get("PhoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PhoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PhoneNumber").toString()));
      }
      if (jsonObj.get("QuietHourList") != null && !jsonObj.get("QuietHourList").isJsonNull()) {
        JsonArray jsonArrayquietHourList = jsonObj.getAsJsonArray("QuietHourList");
        if (jsonArrayquietHourList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("QuietHourList").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `QuietHourList` to be an array in the JSON string but got `%s`", jsonObj.get("QuietHourList").toString()));
          }

          // validate the optional field `QuietHourList` (array)
          for (int i = 0; i < jsonArrayquietHourList.size(); i++) {
            QuietHour.validateJsonElement(jsonArrayquietHourList.get(i));
          };
        }
      }
      if ((jsonObj.get("Salutation") != null && !jsonObj.get("Salutation").isJsonNull()) && !jsonObj.get("Salutation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Salutation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Salutation").toString()));
      }
      if ((jsonObj.get("Suffix") != null && !jsonObj.get("Suffix").isJsonNull()) && !jsonObj.get("Suffix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Suffix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Suffix").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("WhiteList") != null && !jsonObj.get("WhiteList").isJsonNull() && !jsonObj.get("WhiteList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `WhiteList` to be an array in the JSON string but got `%s`", jsonObj.get("WhiteList").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CallControlUser.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CallControlUser' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CallControlUser> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CallControlUser.class));

       return (TypeAdapter<T>) new TypeAdapter<CallControlUser>() {
           @Override
           public void write(JsonWriter out, CallControlUser value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CallControlUser read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CallControlUser given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CallControlUser
   * @throws IOException if the JSON string is invalid with respect to CallControlUser
   */
  public static CallControlUser fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CallControlUser.class);
  }

  /**
   * Convert an instance of CallControlUser to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

