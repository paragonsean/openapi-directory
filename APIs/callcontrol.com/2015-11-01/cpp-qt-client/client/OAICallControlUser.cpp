/**
 * Call Control API
 * API for blocking phone calls with Call Control. Data is from crowdsourced community blacklist from 12+ million users and government agencies (FTC, FCC, IRS) Try with api_key 'demo', hit explore above, and then try phone numbers 18008472911,13157244022,17275567300,18008276655,12061231234.
 *
 * The version of the OpenAPI document: 2015-11-01
 * Contact: info@kedlin.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICallControlUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICallControlUser::OAICallControlUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICallControlUser::OAICallControlUser() {
    this->initializeModel();
}

OAICallControlUser::~OAICallControlUser() {}

void OAICallControlUser::initializeModel() {

    m_age_isSet = false;
    m_age_isValid = false;

    m_black_list_isSet = false;
    m_black_list_isValid = false;

    m_block_behavior_isSet = false;
    m_block_behavior_isValid = false;

    m_break_through_qh_with_multiple_calls_isSet = false;
    m_break_through_qh_with_multiple_calls_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_gender_isSet = false;
    m_gender_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_middle_name_isSet = false;
    m_middle_name_isValid = false;

    m_phone_numbe_region_isSet = false;
    m_phone_numbe_region_isValid = false;

    m_phone_number_isSet = false;
    m_phone_number_isValid = false;

    m_quiet_hour_list_isSet = false;
    m_quiet_hour_list_isValid = false;

    m_salutation_isSet = false;
    m_salutation_isValid = false;

    m_suffix_isSet = false;
    m_suffix_isValid = false;

    m_use_community_blacklist_isSet = false;
    m_use_community_blacklist_isValid = false;

    m_white_list_isSet = false;
    m_white_list_isValid = false;

    m_white_list_breaks_qh_isSet = false;
    m_white_list_breaks_qh_isValid = false;
}

void OAICallControlUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICallControlUser::fromJsonObject(QJsonObject json) {

    m_age_isValid = ::OpenAPI::fromJsonValue(m_age, json[QString("Age")]);
    m_age_isSet = !json[QString("Age")].isNull() && m_age_isValid;

    m_black_list_isValid = ::OpenAPI::fromJsonValue(m_black_list, json[QString("BlackList")]);
    m_black_list_isSet = !json[QString("BlackList")].isNull() && m_black_list_isValid;

    m_block_behavior_isValid = ::OpenAPI::fromJsonValue(m_block_behavior, json[QString("BlockBehavior")]);
    m_block_behavior_isSet = !json[QString("BlockBehavior")].isNull() && m_block_behavior_isValid;

    m_break_through_qh_with_multiple_calls_isValid = ::OpenAPI::fromJsonValue(m_break_through_qh_with_multiple_calls, json[QString("BreakThroughQhWithMultipleCalls")]);
    m_break_through_qh_with_multiple_calls_isSet = !json[QString("BreakThroughQhWithMultipleCalls")].isNull() && m_break_through_qh_with_multiple_calls_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("Email")]);
    m_email_isSet = !json[QString("Email")].isNull() && m_email_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("FirstName")]);
    m_first_name_isSet = !json[QString("FirstName")].isNull() && m_first_name_isValid;

    m_gender_isValid = ::OpenAPI::fromJsonValue(m_gender, json[QString("Gender")]);
    m_gender_isSet = !json[QString("Gender")].isNull() && m_gender_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("LastName")]);
    m_last_name_isSet = !json[QString("LastName")].isNull() && m_last_name_isValid;

    m_middle_name_isValid = ::OpenAPI::fromJsonValue(m_middle_name, json[QString("MiddleName")]);
    m_middle_name_isSet = !json[QString("MiddleName")].isNull() && m_middle_name_isValid;

    m_phone_numbe_region_isValid = ::OpenAPI::fromJsonValue(m_phone_numbe_region, json[QString("PhoneNumbeRegion")]);
    m_phone_numbe_region_isSet = !json[QString("PhoneNumbeRegion")].isNull() && m_phone_numbe_region_isValid;

    m_phone_number_isValid = ::OpenAPI::fromJsonValue(m_phone_number, json[QString("PhoneNumber")]);
    m_phone_number_isSet = !json[QString("PhoneNumber")].isNull() && m_phone_number_isValid;

    m_quiet_hour_list_isValid = ::OpenAPI::fromJsonValue(m_quiet_hour_list, json[QString("QuietHourList")]);
    m_quiet_hour_list_isSet = !json[QString("QuietHourList")].isNull() && m_quiet_hour_list_isValid;

    m_salutation_isValid = ::OpenAPI::fromJsonValue(m_salutation, json[QString("Salutation")]);
    m_salutation_isSet = !json[QString("Salutation")].isNull() && m_salutation_isValid;

    m_suffix_isValid = ::OpenAPI::fromJsonValue(m_suffix, json[QString("Suffix")]);
    m_suffix_isSet = !json[QString("Suffix")].isNull() && m_suffix_isValid;

    m_use_community_blacklist_isValid = ::OpenAPI::fromJsonValue(m_use_community_blacklist, json[QString("UseCommunityBlacklist")]);
    m_use_community_blacklist_isSet = !json[QString("UseCommunityBlacklist")].isNull() && m_use_community_blacklist_isValid;

    m_white_list_isValid = ::OpenAPI::fromJsonValue(m_white_list, json[QString("WhiteList")]);
    m_white_list_isSet = !json[QString("WhiteList")].isNull() && m_white_list_isValid;

    m_white_list_breaks_qh_isValid = ::OpenAPI::fromJsonValue(m_white_list_breaks_qh, json[QString("WhiteListBreaksQh")]);
    m_white_list_breaks_qh_isSet = !json[QString("WhiteListBreaksQh")].isNull() && m_white_list_breaks_qh_isValid;
}

QString OAICallControlUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICallControlUser::asJsonObject() const {
    QJsonObject obj;
    if (m_age_isSet) {
        obj.insert(QString("Age"), ::OpenAPI::toJsonValue(m_age));
    }
    if (m_black_list.size() > 0) {
        obj.insert(QString("BlackList"), ::OpenAPI::toJsonValue(m_black_list));
    }
    if (m_block_behavior_isSet) {
        obj.insert(QString("BlockBehavior"), ::OpenAPI::toJsonValue(m_block_behavior));
    }
    if (m_break_through_qh_with_multiple_calls_isSet) {
        obj.insert(QString("BreakThroughQhWithMultipleCalls"), ::OpenAPI::toJsonValue(m_break_through_qh_with_multiple_calls));
    }
    if (m_email_isSet) {
        obj.insert(QString("Email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("FirstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_gender_isSet) {
        obj.insert(QString("Gender"), ::OpenAPI::toJsonValue(m_gender));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("LastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_middle_name_isSet) {
        obj.insert(QString("MiddleName"), ::OpenAPI::toJsonValue(m_middle_name));
    }
    if (m_phone_numbe_region_isSet) {
        obj.insert(QString("PhoneNumbeRegion"), ::OpenAPI::toJsonValue(m_phone_numbe_region));
    }
    if (m_phone_number_isSet) {
        obj.insert(QString("PhoneNumber"), ::OpenAPI::toJsonValue(m_phone_number));
    }
    if (m_quiet_hour_list.size() > 0) {
        obj.insert(QString("QuietHourList"), ::OpenAPI::toJsonValue(m_quiet_hour_list));
    }
    if (m_salutation_isSet) {
        obj.insert(QString("Salutation"), ::OpenAPI::toJsonValue(m_salutation));
    }
    if (m_suffix_isSet) {
        obj.insert(QString("Suffix"), ::OpenAPI::toJsonValue(m_suffix));
    }
    if (m_use_community_blacklist_isSet) {
        obj.insert(QString("UseCommunityBlacklist"), ::OpenAPI::toJsonValue(m_use_community_blacklist));
    }
    if (m_white_list.size() > 0) {
        obj.insert(QString("WhiteList"), ::OpenAPI::toJsonValue(m_white_list));
    }
    if (m_white_list_breaks_qh_isSet) {
        obj.insert(QString("WhiteListBreaksQh"), ::OpenAPI::toJsonValue(m_white_list_breaks_qh));
    }
    return obj;
}

qint32 OAICallControlUser::getAge() const {
    return m_age;
}
void OAICallControlUser::setAge(const qint32 &age) {
    m_age = age;
    m_age_isSet = true;
}

bool OAICallControlUser::is_age_Set() const{
    return m_age_isSet;
}

bool OAICallControlUser::is_age_Valid() const{
    return m_age_isValid;
}

QList<QString> OAICallControlUser::getBlackList() const {
    return m_black_list;
}
void OAICallControlUser::setBlackList(const QList<QString> &black_list) {
    m_black_list = black_list;
    m_black_list_isSet = true;
}

bool OAICallControlUser::is_black_list_Set() const{
    return m_black_list_isSet;
}

bool OAICallControlUser::is_black_list_Valid() const{
    return m_black_list_isValid;
}

QString OAICallControlUser::getBlockBehavior() const {
    return m_block_behavior;
}
void OAICallControlUser::setBlockBehavior(const QString &block_behavior) {
    m_block_behavior = block_behavior;
    m_block_behavior_isSet = true;
}

bool OAICallControlUser::is_block_behavior_Set() const{
    return m_block_behavior_isSet;
}

bool OAICallControlUser::is_block_behavior_Valid() const{
    return m_block_behavior_isValid;
}

bool OAICallControlUser::isBreakThroughQhWithMultipleCalls() const {
    return m_break_through_qh_with_multiple_calls;
}
void OAICallControlUser::setBreakThroughQhWithMultipleCalls(const bool &break_through_qh_with_multiple_calls) {
    m_break_through_qh_with_multiple_calls = break_through_qh_with_multiple_calls;
    m_break_through_qh_with_multiple_calls_isSet = true;
}

bool OAICallControlUser::is_break_through_qh_with_multiple_calls_Set() const{
    return m_break_through_qh_with_multiple_calls_isSet;
}

bool OAICallControlUser::is_break_through_qh_with_multiple_calls_Valid() const{
    return m_break_through_qh_with_multiple_calls_isValid;
}

QString OAICallControlUser::getEmail() const {
    return m_email;
}
void OAICallControlUser::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAICallControlUser::is_email_Set() const{
    return m_email_isSet;
}

bool OAICallControlUser::is_email_Valid() const{
    return m_email_isValid;
}

QString OAICallControlUser::getFirstName() const {
    return m_first_name;
}
void OAICallControlUser::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAICallControlUser::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAICallControlUser::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAICallControlUser::getGender() const {
    return m_gender;
}
void OAICallControlUser::setGender(const QString &gender) {
    m_gender = gender;
    m_gender_isSet = true;
}

bool OAICallControlUser::is_gender_Set() const{
    return m_gender_isSet;
}

bool OAICallControlUser::is_gender_Valid() const{
    return m_gender_isValid;
}

QString OAICallControlUser::getLastName() const {
    return m_last_name;
}
void OAICallControlUser::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAICallControlUser::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAICallControlUser::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QString OAICallControlUser::getMiddleName() const {
    return m_middle_name;
}
void OAICallControlUser::setMiddleName(const QString &middle_name) {
    m_middle_name = middle_name;
    m_middle_name_isSet = true;
}

bool OAICallControlUser::is_middle_name_Set() const{
    return m_middle_name_isSet;
}

bool OAICallControlUser::is_middle_name_Valid() const{
    return m_middle_name_isValid;
}

QString OAICallControlUser::getPhoneNumbeRegion() const {
    return m_phone_numbe_region;
}
void OAICallControlUser::setPhoneNumbeRegion(const QString &phone_numbe_region) {
    m_phone_numbe_region = phone_numbe_region;
    m_phone_numbe_region_isSet = true;
}

bool OAICallControlUser::is_phone_numbe_region_Set() const{
    return m_phone_numbe_region_isSet;
}

bool OAICallControlUser::is_phone_numbe_region_Valid() const{
    return m_phone_numbe_region_isValid;
}

QString OAICallControlUser::getPhoneNumber() const {
    return m_phone_number;
}
void OAICallControlUser::setPhoneNumber(const QString &phone_number) {
    m_phone_number = phone_number;
    m_phone_number_isSet = true;
}

bool OAICallControlUser::is_phone_number_Set() const{
    return m_phone_number_isSet;
}

bool OAICallControlUser::is_phone_number_Valid() const{
    return m_phone_number_isValid;
}

QList<OAIQuietHour> OAICallControlUser::getQuietHourList() const {
    return m_quiet_hour_list;
}
void OAICallControlUser::setQuietHourList(const QList<OAIQuietHour> &quiet_hour_list) {
    m_quiet_hour_list = quiet_hour_list;
    m_quiet_hour_list_isSet = true;
}

bool OAICallControlUser::is_quiet_hour_list_Set() const{
    return m_quiet_hour_list_isSet;
}

bool OAICallControlUser::is_quiet_hour_list_Valid() const{
    return m_quiet_hour_list_isValid;
}

QString OAICallControlUser::getSalutation() const {
    return m_salutation;
}
void OAICallControlUser::setSalutation(const QString &salutation) {
    m_salutation = salutation;
    m_salutation_isSet = true;
}

bool OAICallControlUser::is_salutation_Set() const{
    return m_salutation_isSet;
}

bool OAICallControlUser::is_salutation_Valid() const{
    return m_salutation_isValid;
}

QString OAICallControlUser::getSuffix() const {
    return m_suffix;
}
void OAICallControlUser::setSuffix(const QString &suffix) {
    m_suffix = suffix;
    m_suffix_isSet = true;
}

bool OAICallControlUser::is_suffix_Set() const{
    return m_suffix_isSet;
}

bool OAICallControlUser::is_suffix_Valid() const{
    return m_suffix_isValid;
}

bool OAICallControlUser::isUseCommunityBlacklist() const {
    return m_use_community_blacklist;
}
void OAICallControlUser::setUseCommunityBlacklist(const bool &use_community_blacklist) {
    m_use_community_blacklist = use_community_blacklist;
    m_use_community_blacklist_isSet = true;
}

bool OAICallControlUser::is_use_community_blacklist_Set() const{
    return m_use_community_blacklist_isSet;
}

bool OAICallControlUser::is_use_community_blacklist_Valid() const{
    return m_use_community_blacklist_isValid;
}

QList<QString> OAICallControlUser::getWhiteList() const {
    return m_white_list;
}
void OAICallControlUser::setWhiteList(const QList<QString> &white_list) {
    m_white_list = white_list;
    m_white_list_isSet = true;
}

bool OAICallControlUser::is_white_list_Set() const{
    return m_white_list_isSet;
}

bool OAICallControlUser::is_white_list_Valid() const{
    return m_white_list_isValid;
}

bool OAICallControlUser::isWhiteListBreaksQh() const {
    return m_white_list_breaks_qh;
}
void OAICallControlUser::setWhiteListBreaksQh(const bool &white_list_breaks_qh) {
    m_white_list_breaks_qh = white_list_breaks_qh;
    m_white_list_breaks_qh_isSet = true;
}

bool OAICallControlUser::is_white_list_breaks_qh_Set() const{
    return m_white_list_breaks_qh_isSet;
}

bool OAICallControlUser::is_white_list_breaks_qh_Valid() const{
    return m_white_list_breaks_qh_isValid;
}

bool OAICallControlUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_age_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_black_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_block_behavior_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_break_through_qh_with_multiple_calls_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gender_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_middle_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_numbe_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quiet_hour_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_salutation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suffix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_community_blacklist_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_white_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_white_list_breaks_qh_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICallControlUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
