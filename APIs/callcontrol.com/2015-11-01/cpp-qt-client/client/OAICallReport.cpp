/**
 * Call Control API
 * API for blocking phone calls with Call Control. Data is from crowdsourced community blacklist from 12+ million users and government agencies (FTC, FCC, IRS) Try with api_key 'demo', hit explore above, and then try phone numbers 18008472911,13157244022,17275567300,18008276655,12061231234.
 *
 * The version of the OpenAPI document: 2015-11-01
 * Contact: info@kedlin.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICallReport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICallReport::OAICallReport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICallReport::OAICallReport() {
    this->initializeModel();
}

OAICallReport::~OAICallReport() {}

void OAICallReport::initializeModel() {

    m_call_time_isSet = false;
    m_call_time_isValid = false;

    m_caller_type_isSet = false;
    m_caller_type_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;

    m_phone_number_isSet = false;
    m_phone_number_isValid = false;

    m_reported_caller_id_isSet = false;
    m_reported_caller_id_isValid = false;

    m_reported_caller_name_isSet = false;
    m_reported_caller_name_isValid = false;

    m_reporter_isSet = false;
    m_reporter_isValid = false;

    m_unwanted_call_isSet = false;
    m_unwanted_call_isValid = false;
}

void OAICallReport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICallReport::fromJsonObject(QJsonObject json) {

    m_call_time_isValid = ::OpenAPI::fromJsonValue(m_call_time, json[QString("CallTime")]);
    m_call_time_isSet = !json[QString("CallTime")].isNull() && m_call_time_isValid;

    m_caller_type_isValid = ::OpenAPI::fromJsonValue(m_caller_type, json[QString("CallerType")]);
    m_caller_type_isSet = !json[QString("CallerType")].isNull() && m_caller_type_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("Comment")]);
    m_comment_isSet = !json[QString("Comment")].isNull() && m_comment_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("IpAddress")]);
    m_ip_address_isSet = !json[QString("IpAddress")].isNull() && m_ip_address_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("Latitude")]);
    m_latitude_isSet = !json[QString("Latitude")].isNull() && m_latitude_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("Longitude")]);
    m_longitude_isSet = !json[QString("Longitude")].isNull() && m_longitude_isValid;

    m_phone_number_isValid = ::OpenAPI::fromJsonValue(m_phone_number, json[QString("PhoneNumber")]);
    m_phone_number_isSet = !json[QString("PhoneNumber")].isNull() && m_phone_number_isValid;

    m_reported_caller_id_isValid = ::OpenAPI::fromJsonValue(m_reported_caller_id, json[QString("ReportedCallerId")]);
    m_reported_caller_id_isSet = !json[QString("ReportedCallerId")].isNull() && m_reported_caller_id_isValid;

    m_reported_caller_name_isValid = ::OpenAPI::fromJsonValue(m_reported_caller_name, json[QString("ReportedCallerName")]);
    m_reported_caller_name_isSet = !json[QString("ReportedCallerName")].isNull() && m_reported_caller_name_isValid;

    m_reporter_isValid = ::OpenAPI::fromJsonValue(m_reporter, json[QString("Reporter")]);
    m_reporter_isSet = !json[QString("Reporter")].isNull() && m_reporter_isValid;

    m_unwanted_call_isValid = ::OpenAPI::fromJsonValue(m_unwanted_call, json[QString("UnwantedCall")]);
    m_unwanted_call_isSet = !json[QString("UnwantedCall")].isNull() && m_unwanted_call_isValid;
}

QString OAICallReport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICallReport::asJsonObject() const {
    QJsonObject obj;
    if (m_call_time_isSet) {
        obj.insert(QString("CallTime"), ::OpenAPI::toJsonValue(m_call_time));
    }
    if (m_caller_type_isSet) {
        obj.insert(QString("CallerType"), ::OpenAPI::toJsonValue(m_caller_type));
    }
    if (m_comment_isSet) {
        obj.insert(QString("Comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("IpAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("Latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("Longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    if (m_phone_number_isSet) {
        obj.insert(QString("PhoneNumber"), ::OpenAPI::toJsonValue(m_phone_number));
    }
    if (m_reported_caller_id_isSet) {
        obj.insert(QString("ReportedCallerId"), ::OpenAPI::toJsonValue(m_reported_caller_id));
    }
    if (m_reported_caller_name_isSet) {
        obj.insert(QString("ReportedCallerName"), ::OpenAPI::toJsonValue(m_reported_caller_name));
    }
    if (m_reporter_isSet) {
        obj.insert(QString("Reporter"), ::OpenAPI::toJsonValue(m_reporter));
    }
    if (m_unwanted_call_isSet) {
        obj.insert(QString("UnwantedCall"), ::OpenAPI::toJsonValue(m_unwanted_call));
    }
    return obj;
}

QDateTime OAICallReport::getCallTime() const {
    return m_call_time;
}
void OAICallReport::setCallTime(const QDateTime &call_time) {
    m_call_time = call_time;
    m_call_time_isSet = true;
}

bool OAICallReport::is_call_time_Set() const{
    return m_call_time_isSet;
}

bool OAICallReport::is_call_time_Valid() const{
    return m_call_time_isValid;
}

QString OAICallReport::getCallerType() const {
    return m_caller_type;
}
void OAICallReport::setCallerType(const QString &caller_type) {
    m_caller_type = caller_type;
    m_caller_type_isSet = true;
}

bool OAICallReport::is_caller_type_Set() const{
    return m_caller_type_isSet;
}

bool OAICallReport::is_caller_type_Valid() const{
    return m_caller_type_isValid;
}

QString OAICallReport::getComment() const {
    return m_comment;
}
void OAICallReport::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAICallReport::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAICallReport::is_comment_Valid() const{
    return m_comment_isValid;
}

QString OAICallReport::getIpAddress() const {
    return m_ip_address;
}
void OAICallReport::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAICallReport::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAICallReport::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

double OAICallReport::getLatitude() const {
    return m_latitude;
}
void OAICallReport::setLatitude(const double &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAICallReport::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAICallReport::is_latitude_Valid() const{
    return m_latitude_isValid;
}

double OAICallReport::getLongitude() const {
    return m_longitude;
}
void OAICallReport::setLongitude(const double &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAICallReport::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAICallReport::is_longitude_Valid() const{
    return m_longitude_isValid;
}

QString OAICallReport::getPhoneNumber() const {
    return m_phone_number;
}
void OAICallReport::setPhoneNumber(const QString &phone_number) {
    m_phone_number = phone_number;
    m_phone_number_isSet = true;
}

bool OAICallReport::is_phone_number_Set() const{
    return m_phone_number_isSet;
}

bool OAICallReport::is_phone_number_Valid() const{
    return m_phone_number_isValid;
}

QString OAICallReport::getReportedCallerId() const {
    return m_reported_caller_id;
}
void OAICallReport::setReportedCallerId(const QString &reported_caller_id) {
    m_reported_caller_id = reported_caller_id;
    m_reported_caller_id_isSet = true;
}

bool OAICallReport::is_reported_caller_id_Set() const{
    return m_reported_caller_id_isSet;
}

bool OAICallReport::is_reported_caller_id_Valid() const{
    return m_reported_caller_id_isValid;
}

QString OAICallReport::getReportedCallerName() const {
    return m_reported_caller_name;
}
void OAICallReport::setReportedCallerName(const QString &reported_caller_name) {
    m_reported_caller_name = reported_caller_name;
    m_reported_caller_name_isSet = true;
}

bool OAICallReport::is_reported_caller_name_Set() const{
    return m_reported_caller_name_isSet;
}

bool OAICallReport::is_reported_caller_name_Valid() const{
    return m_reported_caller_name_isValid;
}

QString OAICallReport::getReporter() const {
    return m_reporter;
}
void OAICallReport::setReporter(const QString &reporter) {
    m_reporter = reporter;
    m_reporter_isSet = true;
}

bool OAICallReport::is_reporter_Set() const{
    return m_reporter_isSet;
}

bool OAICallReport::is_reporter_Valid() const{
    return m_reporter_isValid;
}

bool OAICallReport::isUnwantedCall() const {
    return m_unwanted_call;
}
void OAICallReport::setUnwantedCall(const bool &unwanted_call) {
    m_unwanted_call = unwanted_call;
    m_unwanted_call_isSet = true;
}

bool OAICallReport::is_unwanted_call_Set() const{
    return m_unwanted_call_isSet;
}

bool OAICallReport::is_unwanted_call_Valid() const{
    return m_unwanted_call_isValid;
}

bool OAICallReport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_call_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_caller_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reported_caller_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reported_caller_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reporter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unwanted_call_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICallReport::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
