/**
 * Call Control API
 * API for blocking phone calls with Call Control. Data is from crowdsourced community blacklist from 12+ million users and government agencies (FTC, FCC, IRS) Try with api_key 'demo', hit explore above, and then try phone numbers 18008472911,13157244022,17275567300,18008276655,12061231234.
 *
 * The version of the OpenAPI document: 2015-11-01
 * Contact: info@kedlin.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComplaints.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComplaints::OAIComplaints(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComplaints::OAIComplaints() {
    this->initializeModel();
}

OAIComplaints::~OAIComplaints() {}

void OAIComplaints::initializeModel() {

    m_complaints_by_entity_isSet = false;
    m_complaints_by_entity_isValid = false;

    m_last_complaint_date_isSet = false;
    m_last_complaint_date_isValid = false;

    m_reported_caller_name_isSet = false;
    m_reported_caller_name_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_total_number_of_complaints_isSet = false;
    m_total_number_of_complaints_isValid = false;
}

void OAIComplaints::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComplaints::fromJsonObject(QJsonObject json) {

    m_complaints_by_entity_isValid = ::OpenAPI::fromJsonValue(m_complaints_by_entity, json[QString("ComplaintsByEntity")]);
    m_complaints_by_entity_isSet = !json[QString("ComplaintsByEntity")].isNull() && m_complaints_by_entity_isValid;

    m_last_complaint_date_isValid = ::OpenAPI::fromJsonValue(m_last_complaint_date, json[QString("LastComplaintDate")]);
    m_last_complaint_date_isSet = !json[QString("LastComplaintDate")].isNull() && m_last_complaint_date_isValid;

    m_reported_caller_name_isValid = ::OpenAPI::fromJsonValue(m_reported_caller_name, json[QString("ReportedCallerName")]);
    m_reported_caller_name_isSet = !json[QString("ReportedCallerName")].isNull() && m_reported_caller_name_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_total_number_of_complaints_isValid = ::OpenAPI::fromJsonValue(m_total_number_of_complaints, json[QString("TotalNumberOfComplaints")]);
    m_total_number_of_complaints_isSet = !json[QString("TotalNumberOfComplaints")].isNull() && m_total_number_of_complaints_isValid;
}

QString OAIComplaints::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComplaints::asJsonObject() const {
    QJsonObject obj;
    if (m_complaints_by_entity.size() > 0) {
        obj.insert(QString("ComplaintsByEntity"), ::OpenAPI::toJsonValue(m_complaints_by_entity));
    }
    if (m_last_complaint_date_isSet) {
        obj.insert(QString("LastComplaintDate"), ::OpenAPI::toJsonValue(m_last_complaint_date));
    }
    if (m_reported_caller_name_isSet) {
        obj.insert(QString("ReportedCallerName"), ::OpenAPI::toJsonValue(m_reported_caller_name));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_total_number_of_complaints_isSet) {
        obj.insert(QString("TotalNumberOfComplaints"), ::OpenAPI::toJsonValue(m_total_number_of_complaints));
    }
    return obj;
}

QMap<QString, qint32> OAIComplaints::getComplaintsByEntity() const {
    return m_complaints_by_entity;
}
void OAIComplaints::setComplaintsByEntity(const QMap<QString, qint32> &complaints_by_entity) {
    m_complaints_by_entity = complaints_by_entity;
    m_complaints_by_entity_isSet = true;
}

bool OAIComplaints::is_complaints_by_entity_Set() const{
    return m_complaints_by_entity_isSet;
}

bool OAIComplaints::is_complaints_by_entity_Valid() const{
    return m_complaints_by_entity_isValid;
}

QDateTime OAIComplaints::getLastComplaintDate() const {
    return m_last_complaint_date;
}
void OAIComplaints::setLastComplaintDate(const QDateTime &last_complaint_date) {
    m_last_complaint_date = last_complaint_date;
    m_last_complaint_date_isSet = true;
}

bool OAIComplaints::is_last_complaint_date_Set() const{
    return m_last_complaint_date_isSet;
}

bool OAIComplaints::is_last_complaint_date_Valid() const{
    return m_last_complaint_date_isValid;
}

QString OAIComplaints::getReportedCallerName() const {
    return m_reported_caller_name;
}
void OAIComplaints::setReportedCallerName(const QString &reported_caller_name) {
    m_reported_caller_name = reported_caller_name;
    m_reported_caller_name_isSet = true;
}

bool OAIComplaints::is_reported_caller_name_Set() const{
    return m_reported_caller_name_isSet;
}

bool OAIComplaints::is_reported_caller_name_Valid() const{
    return m_reported_caller_name_isValid;
}

QList<QString> OAIComplaints::getTags() const {
    return m_tags;
}
void OAIComplaints::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIComplaints::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIComplaints::is_tags_Valid() const{
    return m_tags_isValid;
}

qint32 OAIComplaints::getTotalNumberOfComplaints() const {
    return m_total_number_of_complaints;
}
void OAIComplaints::setTotalNumberOfComplaints(const qint32 &total_number_of_complaints) {
    m_total_number_of_complaints = total_number_of_complaints;
    m_total_number_of_complaints_isSet = true;
}

bool OAIComplaints::is_total_number_of_complaints_Set() const{
    return m_total_number_of_complaints_isSet;
}

bool OAIComplaints::is_total_number_of_complaints_Valid() const{
    return m_total_number_of_complaints_isValid;
}

bool OAIComplaints::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_complaints_by_entity.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_complaint_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reported_caller_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_number_of_complaints_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComplaints::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
