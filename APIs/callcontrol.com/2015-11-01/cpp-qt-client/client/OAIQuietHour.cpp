/**
 * Call Control API
 * API for blocking phone calls with Call Control. Data is from crowdsourced community blacklist from 12+ million users and government agencies (FTC, FCC, IRS) Try with api_key 'demo', hit explore above, and then try phone numbers 18008472911,13157244022,17275567300,18008276655,12061231234.
 *
 * The version of the OpenAPI document: 2015-11-01
 * Contact: info@kedlin.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQuietHour.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQuietHour::OAIQuietHour(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQuietHour::OAIQuietHour() {
    this->initializeModel();
}

OAIQuietHour::~OAIQuietHour() {}

void OAIQuietHour::initializeModel() {

    m_day_of_week_list_isSet = false;
    m_day_of_week_list_isValid = false;

    m_duration_min_isSet = false;
    m_duration_min_isValid = false;

    m_start_hour_local_isSet = false;
    m_start_hour_local_isValid = false;

    m_start_min_local_isSet = false;
    m_start_min_local_isValid = false;

    m_time_zone_name_isSet = false;
    m_time_zone_name_isValid = false;
}

void OAIQuietHour::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQuietHour::fromJsonObject(QJsonObject json) {

    m_day_of_week_list_isValid = ::OpenAPI::fromJsonValue(m_day_of_week_list, json[QString("DayOfWeekList")]);
    m_day_of_week_list_isSet = !json[QString("DayOfWeekList")].isNull() && m_day_of_week_list_isValid;

    m_duration_min_isValid = ::OpenAPI::fromJsonValue(m_duration_min, json[QString("DurationMin")]);
    m_duration_min_isSet = !json[QString("DurationMin")].isNull() && m_duration_min_isValid;

    m_start_hour_local_isValid = ::OpenAPI::fromJsonValue(m_start_hour_local, json[QString("StartHourLocal")]);
    m_start_hour_local_isSet = !json[QString("StartHourLocal")].isNull() && m_start_hour_local_isValid;

    m_start_min_local_isValid = ::OpenAPI::fromJsonValue(m_start_min_local, json[QString("StartMinLocal")]);
    m_start_min_local_isSet = !json[QString("StartMinLocal")].isNull() && m_start_min_local_isValid;

    m_time_zone_name_isValid = ::OpenAPI::fromJsonValue(m_time_zone_name, json[QString("TimeZoneName")]);
    m_time_zone_name_isSet = !json[QString("TimeZoneName")].isNull() && m_time_zone_name_isValid;
}

QString OAIQuietHour::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQuietHour::asJsonObject() const {
    QJsonObject obj;
    if (m_day_of_week_list.size() > 0) {
        obj.insert(QString("DayOfWeekList"), ::OpenAPI::toJsonValue(m_day_of_week_list));
    }
    if (m_duration_min_isSet) {
        obj.insert(QString("DurationMin"), ::OpenAPI::toJsonValue(m_duration_min));
    }
    if (m_start_hour_local_isSet) {
        obj.insert(QString("StartHourLocal"), ::OpenAPI::toJsonValue(m_start_hour_local));
    }
    if (m_start_min_local_isSet) {
        obj.insert(QString("StartMinLocal"), ::OpenAPI::toJsonValue(m_start_min_local));
    }
    if (m_time_zone_name_isSet) {
        obj.insert(QString("TimeZoneName"), ::OpenAPI::toJsonValue(m_time_zone_name));
    }
    return obj;
}

QList<QString> OAIQuietHour::getDayOfWeekList() const {
    return m_day_of_week_list;
}
void OAIQuietHour::setDayOfWeekList(const QList<QString> &day_of_week_list) {
    m_day_of_week_list = day_of_week_list;
    m_day_of_week_list_isSet = true;
}

bool OAIQuietHour::is_day_of_week_list_Set() const{
    return m_day_of_week_list_isSet;
}

bool OAIQuietHour::is_day_of_week_list_Valid() const{
    return m_day_of_week_list_isValid;
}

qint32 OAIQuietHour::getDurationMin() const {
    return m_duration_min;
}
void OAIQuietHour::setDurationMin(const qint32 &duration_min) {
    m_duration_min = duration_min;
    m_duration_min_isSet = true;
}

bool OAIQuietHour::is_duration_min_Set() const{
    return m_duration_min_isSet;
}

bool OAIQuietHour::is_duration_min_Valid() const{
    return m_duration_min_isValid;
}

qint32 OAIQuietHour::getStartHourLocal() const {
    return m_start_hour_local;
}
void OAIQuietHour::setStartHourLocal(const qint32 &start_hour_local) {
    m_start_hour_local = start_hour_local;
    m_start_hour_local_isSet = true;
}

bool OAIQuietHour::is_start_hour_local_Set() const{
    return m_start_hour_local_isSet;
}

bool OAIQuietHour::is_start_hour_local_Valid() const{
    return m_start_hour_local_isValid;
}

qint32 OAIQuietHour::getStartMinLocal() const {
    return m_start_min_local;
}
void OAIQuietHour::setStartMinLocal(const qint32 &start_min_local) {
    m_start_min_local = start_min_local;
    m_start_min_local_isSet = true;
}

bool OAIQuietHour::is_start_min_local_Set() const{
    return m_start_min_local_isSet;
}

bool OAIQuietHour::is_start_min_local_Valid() const{
    return m_start_min_local_isValid;
}

QString OAIQuietHour::getTimeZoneName() const {
    return m_time_zone_name;
}
void OAIQuietHour::setTimeZoneName(const QString &time_zone_name) {
    m_time_zone_name = time_zone_name;
    m_time_zone_name_isSet = true;
}

bool OAIQuietHour::is_time_zone_name_Set() const{
    return m_time_zone_name_isSet;
}

bool OAIQuietHour::is_time_zone_name_Valid() const{
    return m_time_zone_name_isValid;
}

bool OAIQuietHour::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_day_of_week_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_min_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_hour_local_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_min_local_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQuietHour::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
