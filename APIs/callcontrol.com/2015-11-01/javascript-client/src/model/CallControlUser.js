/**
 * Call Control API
 * API for blocking phone calls with Call Control. Data is from crowdsourced community blacklist from 12+ million users and government agencies (FTC, FCC, IRS) Try with api_key 'demo', hit explore above, and then try phone numbers 18008472911,13157244022,17275567300,18008276655,12061231234.
 *
 * The version of the OpenAPI document: 2015-11-01
 * Contact: info@kedlin.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import QuietHour from './QuietHour';

/**
 * The CallControlUser model module.
 * @module model/CallControlUser
 * @version 2015-11-01
 */
class CallControlUser {
    /**
     * Constructs a new <code>CallControlUser</code>.
     * @alias module:model/CallControlUser
     */
    constructor() { 
        
        CallControlUser.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CallControlUser</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CallControlUser} obj Optional instance to populate.
     * @return {module:model/CallControlUser} The populated <code>CallControlUser</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CallControlUser();

            if (data.hasOwnProperty('Age')) {
                obj['Age'] = ApiClient.convertToType(data['Age'], 'Number');
            }
            if (data.hasOwnProperty('BlackList')) {
                obj['BlackList'] = ApiClient.convertToType(data['BlackList'], ['String']);
            }
            if (data.hasOwnProperty('BlockBehavior')) {
                obj['BlockBehavior'] = ApiClient.convertToType(data['BlockBehavior'], 'String');
            }
            if (data.hasOwnProperty('BreakThroughQhWithMultipleCalls')) {
                obj['BreakThroughQhWithMultipleCalls'] = ApiClient.convertToType(data['BreakThroughQhWithMultipleCalls'], 'Boolean');
            }
            if (data.hasOwnProperty('Email')) {
                obj['Email'] = ApiClient.convertToType(data['Email'], 'String');
            }
            if (data.hasOwnProperty('FirstName')) {
                obj['FirstName'] = ApiClient.convertToType(data['FirstName'], 'String');
            }
            if (data.hasOwnProperty('Gender')) {
                obj['Gender'] = ApiClient.convertToType(data['Gender'], 'String');
            }
            if (data.hasOwnProperty('LastName')) {
                obj['LastName'] = ApiClient.convertToType(data['LastName'], 'String');
            }
            if (data.hasOwnProperty('MiddleName')) {
                obj['MiddleName'] = ApiClient.convertToType(data['MiddleName'], 'String');
            }
            if (data.hasOwnProperty('PhoneNumbeRegion')) {
                obj['PhoneNumbeRegion'] = ApiClient.convertToType(data['PhoneNumbeRegion'], 'String');
            }
            if (data.hasOwnProperty('PhoneNumber')) {
                obj['PhoneNumber'] = ApiClient.convertToType(data['PhoneNumber'], 'String');
            }
            if (data.hasOwnProperty('QuietHourList')) {
                obj['QuietHourList'] = ApiClient.convertToType(data['QuietHourList'], [QuietHour]);
            }
            if (data.hasOwnProperty('Salutation')) {
                obj['Salutation'] = ApiClient.convertToType(data['Salutation'], 'String');
            }
            if (data.hasOwnProperty('Suffix')) {
                obj['Suffix'] = ApiClient.convertToType(data['Suffix'], 'String');
            }
            if (data.hasOwnProperty('UseCommunityBlacklist')) {
                obj['UseCommunityBlacklist'] = ApiClient.convertToType(data['UseCommunityBlacklist'], 'Boolean');
            }
            if (data.hasOwnProperty('WhiteList')) {
                obj['WhiteList'] = ApiClient.convertToType(data['WhiteList'], ['String']);
            }
            if (data.hasOwnProperty('WhiteListBreaksQh')) {
                obj['WhiteListBreaksQh'] = ApiClient.convertToType(data['WhiteListBreaksQh'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CallControlUser</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CallControlUser</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['BlackList'])) {
            throw new Error("Expected the field `BlackList` to be an array in the JSON data but got " + data['BlackList']);
        }
        // ensure the json data is a string
        if (data['BlockBehavior'] && !(typeof data['BlockBehavior'] === 'string' || data['BlockBehavior'] instanceof String)) {
            throw new Error("Expected the field `BlockBehavior` to be a primitive type in the JSON string but got " + data['BlockBehavior']);
        }
        // ensure the json data is a string
        if (data['Email'] && !(typeof data['Email'] === 'string' || data['Email'] instanceof String)) {
            throw new Error("Expected the field `Email` to be a primitive type in the JSON string but got " + data['Email']);
        }
        // ensure the json data is a string
        if (data['FirstName'] && !(typeof data['FirstName'] === 'string' || data['FirstName'] instanceof String)) {
            throw new Error("Expected the field `FirstName` to be a primitive type in the JSON string but got " + data['FirstName']);
        }
        // ensure the json data is a string
        if (data['Gender'] && !(typeof data['Gender'] === 'string' || data['Gender'] instanceof String)) {
            throw new Error("Expected the field `Gender` to be a primitive type in the JSON string but got " + data['Gender']);
        }
        // ensure the json data is a string
        if (data['LastName'] && !(typeof data['LastName'] === 'string' || data['LastName'] instanceof String)) {
            throw new Error("Expected the field `LastName` to be a primitive type in the JSON string but got " + data['LastName']);
        }
        // ensure the json data is a string
        if (data['MiddleName'] && !(typeof data['MiddleName'] === 'string' || data['MiddleName'] instanceof String)) {
            throw new Error("Expected the field `MiddleName` to be a primitive type in the JSON string but got " + data['MiddleName']);
        }
        // ensure the json data is a string
        if (data['PhoneNumbeRegion'] && !(typeof data['PhoneNumbeRegion'] === 'string' || data['PhoneNumbeRegion'] instanceof String)) {
            throw new Error("Expected the field `PhoneNumbeRegion` to be a primitive type in the JSON string but got " + data['PhoneNumbeRegion']);
        }
        // ensure the json data is a string
        if (data['PhoneNumber'] && !(typeof data['PhoneNumber'] === 'string' || data['PhoneNumber'] instanceof String)) {
            throw new Error("Expected the field `PhoneNumber` to be a primitive type in the JSON string but got " + data['PhoneNumber']);
        }
        if (data['QuietHourList']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['QuietHourList'])) {
                throw new Error("Expected the field `QuietHourList` to be an array in the JSON data but got " + data['QuietHourList']);
            }
            // validate the optional field `QuietHourList` (array)
            for (const item of data['QuietHourList']) {
                QuietHour.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['Salutation'] && !(typeof data['Salutation'] === 'string' || data['Salutation'] instanceof String)) {
            throw new Error("Expected the field `Salutation` to be a primitive type in the JSON string but got " + data['Salutation']);
        }
        // ensure the json data is a string
        if (data['Suffix'] && !(typeof data['Suffix'] === 'string' || data['Suffix'] instanceof String)) {
            throw new Error("Expected the field `Suffix` to be a primitive type in the JSON string but got " + data['Suffix']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['WhiteList'])) {
            throw new Error("Expected the field `WhiteList` to be an array in the JSON data but got " + data['WhiteList']);
        }

        return true;
    }


}



/**
 * @member {Number} Age
 */
CallControlUser.prototype['Age'] = undefined;

/**
 * @member {Array.<String>} BlackList
 */
CallControlUser.prototype['BlackList'] = undefined;

/**
 * @member {module:model/CallControlUser.BlockBehaviorEnum} BlockBehavior
 */
CallControlUser.prototype['BlockBehavior'] = undefined;

/**
 * @member {Boolean} BreakThroughQhWithMultipleCalls
 */
CallControlUser.prototype['BreakThroughQhWithMultipleCalls'] = undefined;

/**
 * @member {String} Email
 */
CallControlUser.prototype['Email'] = undefined;

/**
 * @member {String} FirstName
 */
CallControlUser.prototype['FirstName'] = undefined;

/**
 * @member {String} Gender
 */
CallControlUser.prototype['Gender'] = undefined;

/**
 * @member {String} LastName
 */
CallControlUser.prototype['LastName'] = undefined;

/**
 * @member {String} MiddleName
 */
CallControlUser.prototype['MiddleName'] = undefined;

/**
 * @member {String} PhoneNumbeRegion
 */
CallControlUser.prototype['PhoneNumbeRegion'] = undefined;

/**
 * @member {String} PhoneNumber
 */
CallControlUser.prototype['PhoneNumber'] = undefined;

/**
 * @member {Array.<module:model/QuietHour>} QuietHourList
 */
CallControlUser.prototype['QuietHourList'] = undefined;

/**
 * @member {String} Salutation
 */
CallControlUser.prototype['Salutation'] = undefined;

/**
 * @member {String} Suffix
 */
CallControlUser.prototype['Suffix'] = undefined;

/**
 * @member {Boolean} UseCommunityBlacklist
 */
CallControlUser.prototype['UseCommunityBlacklist'] = undefined;

/**
 * @member {Array.<String>} WhiteList
 */
CallControlUser.prototype['WhiteList'] = undefined;

/**
 * @member {Boolean} WhiteListBreaksQh
 */
CallControlUser.prototype['WhiteListBreaksQh'] = undefined;





/**
 * Allowed values for the <code>BlockBehavior</code> property.
 * @enum {String}
 * @readonly
 */
CallControlUser['BlockBehaviorEnum'] = {

    /**
     * value: "allow"
     * @const
     */
    "allow": "allow",

    /**
     * value: "voiceMail"
     * @const
     */
    "voiceMail": "voiceMail",

    /**
     * value: "block"
     * @const
     */
    "block": "block"
};



export default CallControlUser;

