/**
 * Call Control API
 * API for blocking phone calls with Call Control. Data is from crowdsourced community blacklist from 12+ million users and government agencies (FTC, FCC, IRS) Try with api_key 'demo', hit explore above, and then try phone numbers 18008472911,13157244022,17275567300,18008276655,12061231234.
 *
 * The version of the OpenAPI document: 2015-11-01
 * Contact: info@kedlin.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CallReport model module.
 * @module model/CallReport
 * @version 2015-11-01
 */
class CallReport {
    /**
     * Constructs a new <code>CallReport</code>.
     * Call Report  PhoneNumber,   Caller name(optional),   Call category(optional),   Comment or tags(free text) (optional),   Unwanted call  - yes/no(optional),
     * @alias module:model/CallReport
     */
    constructor() { 
        
        CallReport.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CallReport</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CallReport} obj Optional instance to populate.
     * @return {module:model/CallReport} The populated <code>CallReport</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CallReport();

            if (data.hasOwnProperty('CallTime')) {
                obj['CallTime'] = ApiClient.convertToType(data['CallTime'], 'Date');
            }
            if (data.hasOwnProperty('CallerType')) {
                obj['CallerType'] = ApiClient.convertToType(data['CallerType'], 'String');
            }
            if (data.hasOwnProperty('Comment')) {
                obj['Comment'] = ApiClient.convertToType(data['Comment'], 'String');
            }
            if (data.hasOwnProperty('IpAddress')) {
                obj['IpAddress'] = ApiClient.convertToType(data['IpAddress'], 'String');
            }
            if (data.hasOwnProperty('Latitude')) {
                obj['Latitude'] = ApiClient.convertToType(data['Latitude'], 'Number');
            }
            if (data.hasOwnProperty('Longitude')) {
                obj['Longitude'] = ApiClient.convertToType(data['Longitude'], 'Number');
            }
            if (data.hasOwnProperty('PhoneNumber')) {
                obj['PhoneNumber'] = ApiClient.convertToType(data['PhoneNumber'], 'String');
            }
            if (data.hasOwnProperty('ReportedCallerId')) {
                obj['ReportedCallerId'] = ApiClient.convertToType(data['ReportedCallerId'], 'String');
            }
            if (data.hasOwnProperty('ReportedCallerName')) {
                obj['ReportedCallerName'] = ApiClient.convertToType(data['ReportedCallerName'], 'String');
            }
            if (data.hasOwnProperty('Reporter')) {
                obj['Reporter'] = ApiClient.convertToType(data['Reporter'], 'String');
            }
            if (data.hasOwnProperty('UnwantedCall')) {
                obj['UnwantedCall'] = ApiClient.convertToType(data['UnwantedCall'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CallReport</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CallReport</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['CallerType'] && !(typeof data['CallerType'] === 'string' || data['CallerType'] instanceof String)) {
            throw new Error("Expected the field `CallerType` to be a primitive type in the JSON string but got " + data['CallerType']);
        }
        // ensure the json data is a string
        if (data['Comment'] && !(typeof data['Comment'] === 'string' || data['Comment'] instanceof String)) {
            throw new Error("Expected the field `Comment` to be a primitive type in the JSON string but got " + data['Comment']);
        }
        // ensure the json data is a string
        if (data['IpAddress'] && !(typeof data['IpAddress'] === 'string' || data['IpAddress'] instanceof String)) {
            throw new Error("Expected the field `IpAddress` to be a primitive type in the JSON string but got " + data['IpAddress']);
        }
        // ensure the json data is a string
        if (data['PhoneNumber'] && !(typeof data['PhoneNumber'] === 'string' || data['PhoneNumber'] instanceof String)) {
            throw new Error("Expected the field `PhoneNumber` to be a primitive type in the JSON string but got " + data['PhoneNumber']);
        }
        // ensure the json data is a string
        if (data['ReportedCallerId'] && !(typeof data['ReportedCallerId'] === 'string' || data['ReportedCallerId'] instanceof String)) {
            throw new Error("Expected the field `ReportedCallerId` to be a primitive type in the JSON string but got " + data['ReportedCallerId']);
        }
        // ensure the json data is a string
        if (data['ReportedCallerName'] && !(typeof data['ReportedCallerName'] === 'string' || data['ReportedCallerName'] instanceof String)) {
            throw new Error("Expected the field `ReportedCallerName` to be a primitive type in the JSON string but got " + data['ReportedCallerName']);
        }
        // ensure the json data is a string
        if (data['Reporter'] && !(typeof data['Reporter'] === 'string' || data['Reporter'] instanceof String)) {
            throw new Error("Expected the field `Reporter` to be a primitive type in the JSON string but got " + data['Reporter']);
        }

        return true;
    }


}



/**
 * @member {Date} CallTime
 */
CallReport.prototype['CallTime'] = undefined;

/**
 * @member {module:model/CallReport.CallerTypeEnum} CallerType
 */
CallReport.prototype['CallerType'] = undefined;

/**
 * @member {String} Comment
 */
CallReport.prototype['Comment'] = undefined;

/**
 * @member {String} IpAddress
 */
CallReport.prototype['IpAddress'] = undefined;

/**
 * @member {Number} Latitude
 */
CallReport.prototype['Latitude'] = undefined;

/**
 * @member {Number} Longitude
 */
CallReport.prototype['Longitude'] = undefined;

/**
 * @member {String} PhoneNumber
 */
CallReport.prototype['PhoneNumber'] = undefined;

/**
 * @member {String} ReportedCallerId
 */
CallReport.prototype['ReportedCallerId'] = undefined;

/**
 * @member {String} ReportedCallerName
 */
CallReport.prototype['ReportedCallerName'] = undefined;

/**
 * @member {String} Reporter
 */
CallReport.prototype['Reporter'] = undefined;

/**
 * @member {Boolean} UnwantedCall
 */
CallReport.prototype['UnwantedCall'] = undefined;





/**
 * Allowed values for the <code>CallerType</code> property.
 * @enum {String}
 * @readonly
 */
CallReport['CallerTypeEnum'] = {

    /**
     * value: "Unknown"
     * @const
     */
    "Unknown": "Unknown",

    /**
     * value: "Telemarketing"
     * @const
     */
    "Telemarketing": "Telemarketing",

    /**
     * value: "Collection_Agency"
     * @const
     */
    "Collection_Agency": "Collection_Agency",

    /**
     * value: "Political"
     * @const
     */
    "Political": "Political",

    /**
     * value: "Surveyor"
     * @const
     */
    "Surveyor": "Surveyor",

    /**
     * value: "Prank_Call"
     * @const
     */
    "Prank_Call": "Prank_Call",

    /**
     * value: "Fund_Raiser"
     * @const
     */
    "Fund_Raiser": "Fund_Raiser",

    /**
     * value: "Other_Commercial"
     * @const
     */
    "Other_Commercial": "Other_Commercial",

    /**
     * value: "Scam"
     * @const
     */
    "Scam": "Scam",

    /**
     * value: "VOIP"
     * @const
     */
    "VOIP": "VOIP",

    /**
     * value: "Business"
     * @const
     */
    "Business": "Business",

    /**
     * value: "Reminder_Notification_Call"
     * @const
     */
    "Reminder_Notification_Call": "Reminder_Notification_Call",

    /**
     * value: "Junk_Fax"
     * @const
     */
    "Junk_Fax": "Junk_Fax",

    /**
     * value: "Fax_Machine"
     * @const
     */
    "Fax_Machine": "Fax_Machine",

    /**
     * value: "Spam_Text"
     * @const
     */
    "Spam_Text": "Spam_Text",

    /**
     * value: "RoboCall"
     * @const
     */
    "RoboCall": "RoboCall",

    /**
     * value: "NotSpam"
     * @const
     */
    "NotSpam": "NotSpam",

    /**
     * value: "Callback"
     * @const
     */
    "Callback": "Callback"
};



export default CallReport;

