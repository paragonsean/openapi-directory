/**
 * Call Control API
 * API for blocking phone calls with Call Control. Data is from crowdsourced community blacklist from 12+ million users and government agencies (FTC, FCC, IRS) Try with api_key 'demo', hit explore above, and then try phone numbers 18008472911,13157244022,17275567300,18008276655,12061231234.
 *
 * The version of the OpenAPI document: 2015-11-01
 * Contact: info@kedlin.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CallControlApi);
  }
}(this, function(expect, CallControlApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CallControlApi.CallControlUser();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CallControlUser', function() {
    it('should create an instance of CallControlUser', function() {
      // uncomment below and update the code to test CallControlUser
      //var instance = new CallControlApi.CallControlUser();
      //expect(instance).to.be.a(CallControlApi.CallControlUser);
    });

    it('should have the property age (base name: "Age")', function() {
      // uncomment below and update the code to test the property age
      //var instance = new CallControlApi.CallControlUser();
      //expect(instance).to.be();
    });

    it('should have the property blackList (base name: "BlackList")', function() {
      // uncomment below and update the code to test the property blackList
      //var instance = new CallControlApi.CallControlUser();
      //expect(instance).to.be();
    });

    it('should have the property blockBehavior (base name: "BlockBehavior")', function() {
      // uncomment below and update the code to test the property blockBehavior
      //var instance = new CallControlApi.CallControlUser();
      //expect(instance).to.be();
    });

    it('should have the property breakThroughQhWithMultipleCalls (base name: "BreakThroughQhWithMultipleCalls")', function() {
      // uncomment below and update the code to test the property breakThroughQhWithMultipleCalls
      //var instance = new CallControlApi.CallControlUser();
      //expect(instance).to.be();
    });

    it('should have the property email (base name: "Email")', function() {
      // uncomment below and update the code to test the property email
      //var instance = new CallControlApi.CallControlUser();
      //expect(instance).to.be();
    });

    it('should have the property firstName (base name: "FirstName")', function() {
      // uncomment below and update the code to test the property firstName
      //var instance = new CallControlApi.CallControlUser();
      //expect(instance).to.be();
    });

    it('should have the property gender (base name: "Gender")', function() {
      // uncomment below and update the code to test the property gender
      //var instance = new CallControlApi.CallControlUser();
      //expect(instance).to.be();
    });

    it('should have the property lastName (base name: "LastName")', function() {
      // uncomment below and update the code to test the property lastName
      //var instance = new CallControlApi.CallControlUser();
      //expect(instance).to.be();
    });

    it('should have the property middleName (base name: "MiddleName")', function() {
      // uncomment below and update the code to test the property middleName
      //var instance = new CallControlApi.CallControlUser();
      //expect(instance).to.be();
    });

    it('should have the property phoneNumbeRegion (base name: "PhoneNumbeRegion")', function() {
      // uncomment below and update the code to test the property phoneNumbeRegion
      //var instance = new CallControlApi.CallControlUser();
      //expect(instance).to.be();
    });

    it('should have the property phoneNumber (base name: "PhoneNumber")', function() {
      // uncomment below and update the code to test the property phoneNumber
      //var instance = new CallControlApi.CallControlUser();
      //expect(instance).to.be();
    });

    it('should have the property quietHourList (base name: "QuietHourList")', function() {
      // uncomment below and update the code to test the property quietHourList
      //var instance = new CallControlApi.CallControlUser();
      //expect(instance).to.be();
    });

    it('should have the property salutation (base name: "Salutation")', function() {
      // uncomment below and update the code to test the property salutation
      //var instance = new CallControlApi.CallControlUser();
      //expect(instance).to.be();
    });

    it('should have the property suffix (base name: "Suffix")', function() {
      // uncomment below and update the code to test the property suffix
      //var instance = new CallControlApi.CallControlUser();
      //expect(instance).to.be();
    });

    it('should have the property useCommunityBlacklist (base name: "UseCommunityBlacklist")', function() {
      // uncomment below and update the code to test the property useCommunityBlacklist
      //var instance = new CallControlApi.CallControlUser();
      //expect(instance).to.be();
    });

    it('should have the property whiteList (base name: "WhiteList")', function() {
      // uncomment below and update the code to test the property whiteList
      //var instance = new CallControlApi.CallControlUser();
      //expect(instance).to.be();
    });

    it('should have the property whiteListBreaksQh (base name: "WhiteListBreaksQh")', function() {
      // uncomment below and update the code to test the property whiteListBreaksQh
      //var instance = new CallControlApi.CallControlUser();
      //expect(instance).to.be();
    });

  });

}));
