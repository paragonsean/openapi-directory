# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.quiet_hour import QuietHour
from openapi_server import util


class CallControlUser(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, age: int=None, black_list: List[str]=None, block_behavior: str=None, break_through_qh_with_multiple_calls: bool=None, email: str=None, first_name: str=None, gender: str=None, last_name: str=None, middle_name: str=None, phone_numbe_region: str=None, phone_number: str=None, quiet_hour_list: List[QuietHour]=None, salutation: str=None, suffix: str=None, use_community_blacklist: bool=None, white_list: List[str]=None, white_list_breaks_qh: bool=None):
        """CallControlUser - a model defined in OpenAPI

        :param age: The age of this CallControlUser.
        :param black_list: The black_list of this CallControlUser.
        :param block_behavior: The block_behavior of this CallControlUser.
        :param break_through_qh_with_multiple_calls: The break_through_qh_with_multiple_calls of this CallControlUser.
        :param email: The email of this CallControlUser.
        :param first_name: The first_name of this CallControlUser.
        :param gender: The gender of this CallControlUser.
        :param last_name: The last_name of this CallControlUser.
        :param middle_name: The middle_name of this CallControlUser.
        :param phone_numbe_region: The phone_numbe_region of this CallControlUser.
        :param phone_number: The phone_number of this CallControlUser.
        :param quiet_hour_list: The quiet_hour_list of this CallControlUser.
        :param salutation: The salutation of this CallControlUser.
        :param suffix: The suffix of this CallControlUser.
        :param use_community_blacklist: The use_community_blacklist of this CallControlUser.
        :param white_list: The white_list of this CallControlUser.
        :param white_list_breaks_qh: The white_list_breaks_qh of this CallControlUser.
        """
        self.openapi_types = {
            'age': int,
            'black_list': List[str],
            'block_behavior': str,
            'break_through_qh_with_multiple_calls': bool,
            'email': str,
            'first_name': str,
            'gender': str,
            'last_name': str,
            'middle_name': str,
            'phone_numbe_region': str,
            'phone_number': str,
            'quiet_hour_list': List[QuietHour],
            'salutation': str,
            'suffix': str,
            'use_community_blacklist': bool,
            'white_list': List[str],
            'white_list_breaks_qh': bool
        }

        self.attribute_map = {
            'age': 'Age',
            'black_list': 'BlackList',
            'block_behavior': 'BlockBehavior',
            'break_through_qh_with_multiple_calls': 'BreakThroughQhWithMultipleCalls',
            'email': 'Email',
            'first_name': 'FirstName',
            'gender': 'Gender',
            'last_name': 'LastName',
            'middle_name': 'MiddleName',
            'phone_numbe_region': 'PhoneNumbeRegion',
            'phone_number': 'PhoneNumber',
            'quiet_hour_list': 'QuietHourList',
            'salutation': 'Salutation',
            'suffix': 'Suffix',
            'use_community_blacklist': 'UseCommunityBlacklist',
            'white_list': 'WhiteList',
            'white_list_breaks_qh': 'WhiteListBreaksQh'
        }

        self._age = age
        self._black_list = black_list
        self._block_behavior = block_behavior
        self._break_through_qh_with_multiple_calls = break_through_qh_with_multiple_calls
        self._email = email
        self._first_name = first_name
        self._gender = gender
        self._last_name = last_name
        self._middle_name = middle_name
        self._phone_numbe_region = phone_numbe_region
        self._phone_number = phone_number
        self._quiet_hour_list = quiet_hour_list
        self._salutation = salutation
        self._suffix = suffix
        self._use_community_blacklist = use_community_blacklist
        self._white_list = white_list
        self._white_list_breaks_qh = white_list_breaks_qh

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CallControlUser':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CallControlUser of this CallControlUser.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def age(self):
        """Gets the age of this CallControlUser.


        :return: The age of this CallControlUser.
        :rtype: int
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this CallControlUser.


        :param age: The age of this CallControlUser.
        :type age: int
        """

        self._age = age

    @property
    def black_list(self):
        """Gets the black_list of this CallControlUser.


        :return: The black_list of this CallControlUser.
        :rtype: List[str]
        """
        return self._black_list

    @black_list.setter
    def black_list(self, black_list):
        """Sets the black_list of this CallControlUser.


        :param black_list: The black_list of this CallControlUser.
        :type black_list: List[str]
        """

        self._black_list = black_list

    @property
    def block_behavior(self):
        """Gets the block_behavior of this CallControlUser.


        :return: The block_behavior of this CallControlUser.
        :rtype: str
        """
        return self._block_behavior

    @block_behavior.setter
    def block_behavior(self, block_behavior):
        """Sets the block_behavior of this CallControlUser.


        :param block_behavior: The block_behavior of this CallControlUser.
        :type block_behavior: str
        """
        allowed_values = ["allow", "voiceMail", "block"]  # noqa: E501
        if block_behavior not in allowed_values:
            raise ValueError(
                "Invalid value for `block_behavior` ({0}), must be one of {1}"
                .format(block_behavior, allowed_values)
            )

        self._block_behavior = block_behavior

    @property
    def break_through_qh_with_multiple_calls(self):
        """Gets the break_through_qh_with_multiple_calls of this CallControlUser.


        :return: The break_through_qh_with_multiple_calls of this CallControlUser.
        :rtype: bool
        """
        return self._break_through_qh_with_multiple_calls

    @break_through_qh_with_multiple_calls.setter
    def break_through_qh_with_multiple_calls(self, break_through_qh_with_multiple_calls):
        """Sets the break_through_qh_with_multiple_calls of this CallControlUser.


        :param break_through_qh_with_multiple_calls: The break_through_qh_with_multiple_calls of this CallControlUser.
        :type break_through_qh_with_multiple_calls: bool
        """

        self._break_through_qh_with_multiple_calls = break_through_qh_with_multiple_calls

    @property
    def email(self):
        """Gets the email of this CallControlUser.


        :return: The email of this CallControlUser.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CallControlUser.


        :param email: The email of this CallControlUser.
        :type email: str
        """

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this CallControlUser.


        :return: The first_name of this CallControlUser.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this CallControlUser.


        :param first_name: The first_name of this CallControlUser.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def gender(self):
        """Gets the gender of this CallControlUser.


        :return: The gender of this CallControlUser.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this CallControlUser.


        :param gender: The gender of this CallControlUser.
        :type gender: str
        """

        self._gender = gender

    @property
    def last_name(self):
        """Gets the last_name of this CallControlUser.


        :return: The last_name of this CallControlUser.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this CallControlUser.


        :param last_name: The last_name of this CallControlUser.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def middle_name(self):
        """Gets the middle_name of this CallControlUser.


        :return: The middle_name of this CallControlUser.
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this CallControlUser.


        :param middle_name: The middle_name of this CallControlUser.
        :type middle_name: str
        """

        self._middle_name = middle_name

    @property
    def phone_numbe_region(self):
        """Gets the phone_numbe_region of this CallControlUser.


        :return: The phone_numbe_region of this CallControlUser.
        :rtype: str
        """
        return self._phone_numbe_region

    @phone_numbe_region.setter
    def phone_numbe_region(self, phone_numbe_region):
        """Sets the phone_numbe_region of this CallControlUser.


        :param phone_numbe_region: The phone_numbe_region of this CallControlUser.
        :type phone_numbe_region: str
        """

        self._phone_numbe_region = phone_numbe_region

    @property
    def phone_number(self):
        """Gets the phone_number of this CallControlUser.


        :return: The phone_number of this CallControlUser.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this CallControlUser.


        :param phone_number: The phone_number of this CallControlUser.
        :type phone_number: str
        """

        self._phone_number = phone_number

    @property
    def quiet_hour_list(self):
        """Gets the quiet_hour_list of this CallControlUser.


        :return: The quiet_hour_list of this CallControlUser.
        :rtype: List[QuietHour]
        """
        return self._quiet_hour_list

    @quiet_hour_list.setter
    def quiet_hour_list(self, quiet_hour_list):
        """Sets the quiet_hour_list of this CallControlUser.


        :param quiet_hour_list: The quiet_hour_list of this CallControlUser.
        :type quiet_hour_list: List[QuietHour]
        """

        self._quiet_hour_list = quiet_hour_list

    @property
    def salutation(self):
        """Gets the salutation of this CallControlUser.


        :return: The salutation of this CallControlUser.
        :rtype: str
        """
        return self._salutation

    @salutation.setter
    def salutation(self, salutation):
        """Sets the salutation of this CallControlUser.


        :param salutation: The salutation of this CallControlUser.
        :type salutation: str
        """

        self._salutation = salutation

    @property
    def suffix(self):
        """Gets the suffix of this CallControlUser.


        :return: The suffix of this CallControlUser.
        :rtype: str
        """
        return self._suffix

    @suffix.setter
    def suffix(self, suffix):
        """Sets the suffix of this CallControlUser.


        :param suffix: The suffix of this CallControlUser.
        :type suffix: str
        """

        self._suffix = suffix

    @property
    def use_community_blacklist(self):
        """Gets the use_community_blacklist of this CallControlUser.


        :return: The use_community_blacklist of this CallControlUser.
        :rtype: bool
        """
        return self._use_community_blacklist

    @use_community_blacklist.setter
    def use_community_blacklist(self, use_community_blacklist):
        """Sets the use_community_blacklist of this CallControlUser.


        :param use_community_blacklist: The use_community_blacklist of this CallControlUser.
        :type use_community_blacklist: bool
        """

        self._use_community_blacklist = use_community_blacklist

    @property
    def white_list(self):
        """Gets the white_list of this CallControlUser.


        :return: The white_list of this CallControlUser.
        :rtype: List[str]
        """
        return self._white_list

    @white_list.setter
    def white_list(self, white_list):
        """Sets the white_list of this CallControlUser.


        :param white_list: The white_list of this CallControlUser.
        :type white_list: List[str]
        """

        self._white_list = white_list

    @property
    def white_list_breaks_qh(self):
        """Gets the white_list_breaks_qh of this CallControlUser.


        :return: The white_list_breaks_qh of this CallControlUser.
        :rtype: bool
        """
        return self._white_list_breaks_qh

    @white_list_breaks_qh.setter
    def white_list_breaks_qh(self, white_list_breaks_qh):
        """Sets the white_list_breaks_qh of this CallControlUser.


        :param white_list_breaks_qh: The white_list_breaks_qh of this CallControlUser.
        :type white_list_breaks_qh: bool
        """

        self._white_list_breaks_qh = white_list_breaks_qh
