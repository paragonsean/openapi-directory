# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CallReport(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, call_time: datetime=None, caller_type: str=None, comment: str=None, ip_address: str=None, latitude: float=None, longitude: float=None, phone_number: str=None, reported_caller_id: str=None, reported_caller_name: str=None, reporter: str=None, unwanted_call: bool=None):
        """CallReport - a model defined in OpenAPI

        :param call_time: The call_time of this CallReport.
        :param caller_type: The caller_type of this CallReport.
        :param comment: The comment of this CallReport.
        :param ip_address: The ip_address of this CallReport.
        :param latitude: The latitude of this CallReport.
        :param longitude: The longitude of this CallReport.
        :param phone_number: The phone_number of this CallReport.
        :param reported_caller_id: The reported_caller_id of this CallReport.
        :param reported_caller_name: The reported_caller_name of this CallReport.
        :param reporter: The reporter of this CallReport.
        :param unwanted_call: The unwanted_call of this CallReport.
        """
        self.openapi_types = {
            'call_time': datetime,
            'caller_type': str,
            'comment': str,
            'ip_address': str,
            'latitude': float,
            'longitude': float,
            'phone_number': str,
            'reported_caller_id': str,
            'reported_caller_name': str,
            'reporter': str,
            'unwanted_call': bool
        }

        self.attribute_map = {
            'call_time': 'CallTime',
            'caller_type': 'CallerType',
            'comment': 'Comment',
            'ip_address': 'IpAddress',
            'latitude': 'Latitude',
            'longitude': 'Longitude',
            'phone_number': 'PhoneNumber',
            'reported_caller_id': 'ReportedCallerId',
            'reported_caller_name': 'ReportedCallerName',
            'reporter': 'Reporter',
            'unwanted_call': 'UnwantedCall'
        }

        self._call_time = call_time
        self._caller_type = caller_type
        self._comment = comment
        self._ip_address = ip_address
        self._latitude = latitude
        self._longitude = longitude
        self._phone_number = phone_number
        self._reported_caller_id = reported_caller_id
        self._reported_caller_name = reported_caller_name
        self._reporter = reporter
        self._unwanted_call = unwanted_call

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CallReport':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CallReport of this CallReport.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def call_time(self):
        """Gets the call_time of this CallReport.


        :return: The call_time of this CallReport.
        :rtype: datetime
        """
        return self._call_time

    @call_time.setter
    def call_time(self, call_time):
        """Sets the call_time of this CallReport.


        :param call_time: The call_time of this CallReport.
        :type call_time: datetime
        """

        self._call_time = call_time

    @property
    def caller_type(self):
        """Gets the caller_type of this CallReport.


        :return: The caller_type of this CallReport.
        :rtype: str
        """
        return self._caller_type

    @caller_type.setter
    def caller_type(self, caller_type):
        """Sets the caller_type of this CallReport.


        :param caller_type: The caller_type of this CallReport.
        :type caller_type: str
        """
        allowed_values = ["Unknown", "Telemarketing", "Collection_Agency", "Political", "Surveyor", "Prank_Call", "Fund_Raiser", "Other_Commercial", "Scam", "VOIP", "Business", "Reminder_Notification_Call", "Junk_Fax", "Fax_Machine", "Spam_Text", "RoboCall", "NotSpam", "Callback"]  # noqa: E501
        if caller_type not in allowed_values:
            raise ValueError(
                "Invalid value for `caller_type` ({0}), must be one of {1}"
                .format(caller_type, allowed_values)
            )

        self._caller_type = caller_type

    @property
    def comment(self):
        """Gets the comment of this CallReport.


        :return: The comment of this CallReport.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this CallReport.


        :param comment: The comment of this CallReport.
        :type comment: str
        """

        self._comment = comment

    @property
    def ip_address(self):
        """Gets the ip_address of this CallReport.


        :return: The ip_address of this CallReport.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this CallReport.


        :param ip_address: The ip_address of this CallReport.
        :type ip_address: str
        """

        self._ip_address = ip_address

    @property
    def latitude(self):
        """Gets the latitude of this CallReport.


        :return: The latitude of this CallReport.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this CallReport.


        :param latitude: The latitude of this CallReport.
        :type latitude: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this CallReport.


        :return: The longitude of this CallReport.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this CallReport.


        :param longitude: The longitude of this CallReport.
        :type longitude: float
        """

        self._longitude = longitude

    @property
    def phone_number(self):
        """Gets the phone_number of this CallReport.


        :return: The phone_number of this CallReport.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this CallReport.


        :param phone_number: The phone_number of this CallReport.
        :type phone_number: str
        """

        self._phone_number = phone_number

    @property
    def reported_caller_id(self):
        """Gets the reported_caller_id of this CallReport.


        :return: The reported_caller_id of this CallReport.
        :rtype: str
        """
        return self._reported_caller_id

    @reported_caller_id.setter
    def reported_caller_id(self, reported_caller_id):
        """Sets the reported_caller_id of this CallReport.


        :param reported_caller_id: The reported_caller_id of this CallReport.
        :type reported_caller_id: str
        """

        self._reported_caller_id = reported_caller_id

    @property
    def reported_caller_name(self):
        """Gets the reported_caller_name of this CallReport.


        :return: The reported_caller_name of this CallReport.
        :rtype: str
        """
        return self._reported_caller_name

    @reported_caller_name.setter
    def reported_caller_name(self, reported_caller_name):
        """Sets the reported_caller_name of this CallReport.


        :param reported_caller_name: The reported_caller_name of this CallReport.
        :type reported_caller_name: str
        """

        self._reported_caller_name = reported_caller_name

    @property
    def reporter(self):
        """Gets the reporter of this CallReport.


        :return: The reporter of this CallReport.
        :rtype: str
        """
        return self._reporter

    @reporter.setter
    def reporter(self, reporter):
        """Sets the reporter of this CallReport.


        :param reporter: The reporter of this CallReport.
        :type reporter: str
        """

        self._reporter = reporter

    @property
    def unwanted_call(self):
        """Gets the unwanted_call of this CallReport.


        :return: The unwanted_call of this CallReport.
        :rtype: bool
        """
        return self._unwanted_call

    @unwanted_call.setter
    def unwanted_call(self, unwanted_call):
        """Sets the unwanted_call of this CallReport.


        :param unwanted_call: The unwanted_call of this CallReport.
        :type unwanted_call: bool
        """

        self._unwanted_call = unwanted_call
