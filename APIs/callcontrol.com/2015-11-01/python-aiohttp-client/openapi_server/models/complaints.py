# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Complaints(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, complaints_by_entity: Dict[str, int]=None, last_complaint_date: datetime=None, reported_caller_name: str=None, tags: List[str]=None, total_number_of_complaints: int=None):
        """Complaints - a model defined in OpenAPI

        :param complaints_by_entity: The complaints_by_entity of this Complaints.
        :param last_complaint_date: The last_complaint_date of this Complaints.
        :param reported_caller_name: The reported_caller_name of this Complaints.
        :param tags: The tags of this Complaints.
        :param total_number_of_complaints: The total_number_of_complaints of this Complaints.
        """
        self.openapi_types = {
            'complaints_by_entity': Dict[str, int],
            'last_complaint_date': datetime,
            'reported_caller_name': str,
            'tags': List[str],
            'total_number_of_complaints': int
        }

        self.attribute_map = {
            'complaints_by_entity': 'ComplaintsByEntity',
            'last_complaint_date': 'LastComplaintDate',
            'reported_caller_name': 'ReportedCallerName',
            'tags': 'Tags',
            'total_number_of_complaints': 'TotalNumberOfComplaints'
        }

        self._complaints_by_entity = complaints_by_entity
        self._last_complaint_date = last_complaint_date
        self._reported_caller_name = reported_caller_name
        self._tags = tags
        self._total_number_of_complaints = total_number_of_complaints

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Complaints':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Complaints of this Complaints.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def complaints_by_entity(self):
        """Gets the complaints_by_entity of this Complaints.


        :return: The complaints_by_entity of this Complaints.
        :rtype: Dict[str, int]
        """
        return self._complaints_by_entity

    @complaints_by_entity.setter
    def complaints_by_entity(self, complaints_by_entity):
        """Sets the complaints_by_entity of this Complaints.


        :param complaints_by_entity: The complaints_by_entity of this Complaints.
        :type complaints_by_entity: Dict[str, int]
        """

        self._complaints_by_entity = complaints_by_entity

    @property
    def last_complaint_date(self):
        """Gets the last_complaint_date of this Complaints.


        :return: The last_complaint_date of this Complaints.
        :rtype: datetime
        """
        return self._last_complaint_date

    @last_complaint_date.setter
    def last_complaint_date(self, last_complaint_date):
        """Sets the last_complaint_date of this Complaints.


        :param last_complaint_date: The last_complaint_date of this Complaints.
        :type last_complaint_date: datetime
        """

        self._last_complaint_date = last_complaint_date

    @property
    def reported_caller_name(self):
        """Gets the reported_caller_name of this Complaints.

        Reported Caller Name

        :return: The reported_caller_name of this Complaints.
        :rtype: str
        """
        return self._reported_caller_name

    @reported_caller_name.setter
    def reported_caller_name(self, reported_caller_name):
        """Sets the reported_caller_name of this Complaints.

        Reported Caller Name

        :param reported_caller_name: The reported_caller_name of this Complaints.
        :type reported_caller_name: str
        """
        if reported_caller_name is not None and len(reported_caller_name) > 255:
            raise ValueError("Invalid value for `reported_caller_name`, length must be less than or equal to `255`")
        if reported_caller_name is not None and len(reported_caller_name) < 0:
            raise ValueError("Invalid value for `reported_caller_name`, length must be greater than or equal to `0`")

        self._reported_caller_name = reported_caller_name

    @property
    def tags(self):
        """Gets the tags of this Complaints.


        :return: The tags of this Complaints.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Complaints.


        :param tags: The tags of this Complaints.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def total_number_of_complaints(self):
        """Gets the total_number_of_complaints of this Complaints.


        :return: The total_number_of_complaints of this Complaints.
        :rtype: int
        """
        return self._total_number_of_complaints

    @total_number_of_complaints.setter
    def total_number_of_complaints(self, total_number_of_complaints):
        """Sets the total_number_of_complaints of this Complaints.


        :param total_number_of_complaints: The total_number_of_complaints of this Complaints.
        :type total_number_of_complaints: int
        """

        self._total_number_of_complaints = total_number_of_complaints
