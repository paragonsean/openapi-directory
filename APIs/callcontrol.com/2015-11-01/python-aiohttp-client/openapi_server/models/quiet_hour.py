# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class QuietHour(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, day_of_week_list: List[str]=None, duration_min: int=None, start_hour_local: int=None, start_min_local: int=None, time_zone_name: str=None):
        """QuietHour - a model defined in OpenAPI

        :param day_of_week_list: The day_of_week_list of this QuietHour.
        :param duration_min: The duration_min of this QuietHour.
        :param start_hour_local: The start_hour_local of this QuietHour.
        :param start_min_local: The start_min_local of this QuietHour.
        :param time_zone_name: The time_zone_name of this QuietHour.
        """
        self.openapi_types = {
            'day_of_week_list': List[str],
            'duration_min': int,
            'start_hour_local': int,
            'start_min_local': int,
            'time_zone_name': str
        }

        self.attribute_map = {
            'day_of_week_list': 'DayOfWeekList',
            'duration_min': 'DurationMin',
            'start_hour_local': 'StartHourLocal',
            'start_min_local': 'StartMinLocal',
            'time_zone_name': 'TimeZoneName'
        }

        self._day_of_week_list = day_of_week_list
        self._duration_min = duration_min
        self._start_hour_local = start_hour_local
        self._start_min_local = start_min_local
        self._time_zone_name = time_zone_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QuietHour':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QuietHour of this QuietHour.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def day_of_week_list(self):
        """Gets the day_of_week_list of this QuietHour.


        :return: The day_of_week_list of this QuietHour.
        :rtype: List[str]
        """
        return self._day_of_week_list

    @day_of_week_list.setter
    def day_of_week_list(self, day_of_week_list):
        """Sets the day_of_week_list of this QuietHour.


        :param day_of_week_list: The day_of_week_list of this QuietHour.
        :type day_of_week_list: List[str]
        """
        allowed_values = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]  # noqa: E501
        if not set(day_of_week_list).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `day_of_week_list` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(day_of_week_list) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._day_of_week_list = day_of_week_list

    @property
    def duration_min(self):
        """Gets the duration_min of this QuietHour.


        :return: The duration_min of this QuietHour.
        :rtype: int
        """
        return self._duration_min

    @duration_min.setter
    def duration_min(self, duration_min):
        """Sets the duration_min of this QuietHour.


        :param duration_min: The duration_min of this QuietHour.
        :type duration_min: int
        """

        self._duration_min = duration_min

    @property
    def start_hour_local(self):
        """Gets the start_hour_local of this QuietHour.


        :return: The start_hour_local of this QuietHour.
        :rtype: int
        """
        return self._start_hour_local

    @start_hour_local.setter
    def start_hour_local(self, start_hour_local):
        """Sets the start_hour_local of this QuietHour.


        :param start_hour_local: The start_hour_local of this QuietHour.
        :type start_hour_local: int
        """

        self._start_hour_local = start_hour_local

    @property
    def start_min_local(self):
        """Gets the start_min_local of this QuietHour.


        :return: The start_min_local of this QuietHour.
        :rtype: int
        """
        return self._start_min_local

    @start_min_local.setter
    def start_min_local(self, start_min_local):
        """Sets the start_min_local of this QuietHour.


        :param start_min_local: The start_min_local of this QuietHour.
        :type start_min_local: int
        """

        self._start_min_local = start_min_local

    @property
    def time_zone_name(self):
        """Gets the time_zone_name of this QuietHour.


        :return: The time_zone_name of this QuietHour.
        :rtype: str
        """
        return self._time_zone_name

    @time_zone_name.setter
    def time_zone_name(self, time_zone_name):
        """Sets the time_zone_name of this QuietHour.


        :param time_zone_name: The time_zone_name of this QuietHour.
        :type time_zone_name: str
        """

        self._time_zone_name = time_zone_name
