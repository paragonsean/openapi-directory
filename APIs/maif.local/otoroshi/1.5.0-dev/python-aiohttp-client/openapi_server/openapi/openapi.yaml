openapi: 3.0.0
info:
  contact:
    email: oss@maif.fr
    name: Otoroshi Team
  description: Admin API of the Otoroshi reverse proxy
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Otoroshi Admin API
  version: 1.5.0-dev
  x-apisguru-categories:
  - developer_tools
  x-logo:
    backgroundColor: '#FFFFFF'
    url: https://maif.github.io/otoroshi/assets/images/svg/otoroshi_logo.svg
  x-origin:
  - format: openapi
    url: https://raw.githubusercontent.com/MAIF/otoroshi/master/docs/manual/code/swagger.json
    version: "3.0"
  x-providerName: maif.local
  x-serviceName: otoroshi
externalDocs:
  description: Find out more about Otoroshi
  url: https://maif.github.io/otoroshi/
servers:
- url: http://otoroshi-api.oto.tools/
- url: http://maif.local
tags:
- description: Everything about Otoroshi global configuration
  name: configuration
- description: Everything about Otoroshi import/export
  name: import
- description: Everything about Otoroshi entities templates
  name: templates
- description: Everything about Otoroshi Environments
  name: environments
- description: Everything about Otoroshi service groups
  name: groups
- description: Everything about Otoroshi api keys
  name: apikeys
- description: Everything about Otoroshi service descriptors
  name: services
- description: Everything about Otoroshi stats
  name: stats
- description: Everything about Otoroshi Snow Monkey
  name: snowmonkey
- description: Everything about Otoroshi health status
  name: health
- description: Everything about Otoroshi global JWT token verifiers
  name: jwt-verifiers
- description: Everything about Otoroshi global auth. module config
  name: auth-config
- description: Everything about Otoroshi request transformer scripts
  name: scripts
- description: Everything about Otoroshi SSL/TLS certificates
  name: certificates
- description: Everything about Otoroshi validation authorities
  name: validation-authorities
- description: Everything about Otoroshi data exporters
  name: data-exporter-configs
paths:
  /api/apikeys:
    get:
      deprecated: false
      description: Get all api keys
      operationId: all_api_keys
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiKey'
                type: array
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Get all api keys
      tags:
      - apikeys
      x-openapi-router-controller: openapi_server.controllers.apikeys_controller
  /api/auths:
    get:
      deprecated: false
      description: Get all global auth. module configs
      operationId: find_all_global_auth_modules
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/findAllGlobalAuthModules_200_response_inner'
                type: array
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Get all global auth. module configs
      tags:
      - auth-config
      x-openapi-router-controller: openapi_server.controllers.auth_config_controller
    post:
      deprecated: false
      description: Create one global auth. module config
      operationId: create_global_auth_module
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/findAllGlobalAuthModules_200_response_inner'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/findAllGlobalAuthModules_200_response_inner'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Create one global auth. module config
      tags:
      - auth-config
      x-openapi-router-controller: openapi_server.controllers.auth_config_controller
      x-codegen-request-body-name: body
  /api/auths/{id}:
    delete:
      deprecated: false
      description: Delete one global auth. module config
      operationId: delete_global_auth_module
      parameters:
      - description: The auth. config id id
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deleted'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Delete one global auth. module config
      tags:
      - auth-config
      x-openapi-router-controller: openapi_server.controllers.auth_config_controller
    get:
      deprecated: false
      description: Get one global auth. module configs
      operationId: find_global_auth_module_by_id
      parameters:
      - description: The auth. config id
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/findAllGlobalAuthModules_200_response_inner'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Get one global auth. module configs
      tags:
      - auth-config
      x-openapi-router-controller: openapi_server.controllers.auth_config_controller
    patch:
      deprecated: false
      description: Update one global auth. module config
      operationId: patch_global_auth_module
      parameters:
      - description: The auth. config id
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Patch'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/findAllGlobalAuthModules_200_response_inner'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Update one global auth. module config
      tags:
      - auth-config
      x-openapi-router-controller: openapi_server.controllers.auth_config_controller
      x-codegen-request-body-name: body
    put:
      deprecated: false
      description: Update one global auth. module config
      operationId: update_global_auth_module
      parameters:
      - description: The auth. config id
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/findAllGlobalAuthModules_200_response_inner'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/findAllGlobalAuthModules_200_response_inner'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Update one global auth. module config
      tags:
      - auth-config
      x-openapi-router-controller: openapi_server.controllers.auth_config_controller
      x-codegen-request-body-name: body
  /api/certificates:
    get:
      deprecated: false
      description: Get all certificates
      operationId: all_certs
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Certificate'
                type: array
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Get all certificates
      tags:
      - certificates
      x-openapi-router-controller: openapi_server.controllers.certificates_controller
    post:
      deprecated: false
      description: Create one certificate
      operationId: create_cert
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Certificate'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certificate'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Create one certificate
      tags:
      - certificates
      x-openapi-router-controller: openapi_server.controllers.certificates_controller
      x-codegen-request-body-name: body
  /api/certificates/{id}:
    delete:
      deprecated: false
      description: Delete one certificate by id
      operationId: delete_cert
      parameters:
      - description: The certificate id
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deleted'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Delete one certificate by id
      tags:
      - certificates
      x-openapi-router-controller: openapi_server.controllers.certificates_controller
    get:
      deprecated: false
      description: Get one certificate by id
      operationId: one_cert
      parameters:
      - description: The auth. config id
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certificate'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Get one certificate by id
      tags:
      - certificates
      x-openapi-router-controller: openapi_server.controllers.certificates_controller
    patch:
      deprecated: false
      description: Update one certificate by id
      operationId: patch_cert
      parameters:
      - description: The certificate id
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Patch'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certificate'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Update one certificate by id
      tags:
      - certificates
      x-openapi-router-controller: openapi_server.controllers.certificates_controller
      x-codegen-request-body-name: body
    put:
      deprecated: false
      description: Update one certificate by id
      operationId: put_cert
      parameters:
      - description: The certificate id
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Certificate'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certificate'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Update one certificate by id
      tags:
      - certificates
      x-openapi-router-controller: openapi_server.controllers.certificates_controller
      x-codegen-request-body-name: body
  /api/client-validators:
    get:
      deprecated: false
      description: Get all validation authoritiess
      operationId: find_all_client_validators
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ValidationAuthority'
                type: array
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Get all validation authoritiess
      tags:
      - validation-authorities
      x-openapi-router-controller: openapi_server.controllers.validation_authorities_controller
    post:
      deprecated: false
      description: Create one validation authorities
      operationId: create_client_validator
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidationAuthority'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationAuthority'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Create one validation authorities
      tags:
      - validation-authorities
      x-openapi-router-controller: openapi_server.controllers.validation_authorities_controller
      x-codegen-request-body-name: body
  /api/client-validators/{id}:
    delete:
      deprecated: false
      description: Delete one validation authorities by id
      operationId: delete_client_validator
      parameters:
      - description: The validation authorities id
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deleted'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Delete one validation authorities by id
      tags:
      - validation-authorities
      x-openapi-router-controller: openapi_server.controllers.validation_authorities_controller
    get:
      deprecated: false
      description: Get one validation authorities by id
      operationId: find_client_validator_by_id
      parameters:
      - description: The auth. config id
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationAuthority'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Get one validation authorities by id
      tags:
      - validation-authorities
      x-openapi-router-controller: openapi_server.controllers.validation_authorities_controller
    patch:
      deprecated: false
      description: Update one validation authorities by id
      operationId: patch_client_validator
      parameters:
      - description: The validation authorities id
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Patch'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationAuthority'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Update one validation authorities by id
      tags:
      - validation-authorities
      x-openapi-router-controller: openapi_server.controllers.validation_authorities_controller
      x-codegen-request-body-name: body
    put:
      deprecated: false
      description: Update one validation authorities by id
      operationId: update_client_validator
      parameters:
      - description: The validation authorities id
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidationAuthority'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationAuthority'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Update one validation authorities by id
      tags:
      - validation-authorities
      x-openapi-router-controller: openapi_server.controllers.validation_authorities_controller
      x-codegen-request-body-name: body
  /api/data-exporter-configs:
    get:
      deprecated: false
      description: Get all data exporter configs
      operationId: find_all_data_exporters
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/DataExporterConfig'
                type: array
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Get all data exporter configs
      tags:
      - data-exporter-configs
      x-openapi-router-controller: openapi_server.controllers.data_exporter_configs_controller
    post:
      deprecated: false
      description: Create a new data exporter config
      operationId: create_data_exporter_config
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataExporterConfig'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataExporterConfig'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Create a new data exporter config
      tags:
      - data-exporter-configs
      x-openapi-router-controller: openapi_server.controllers.data_exporter_configs_controller
      x-codegen-request-body-name: body
  /api/data-exporter-configs/_bulk:
    delete:
      deprecated: false
      description: Delete a data exporter config
      operationId: deletebulk_data_exporter_config
      parameters: []
      requestBody:
        content:
          application/ndjson:
            schema:
              $ref: '#/components/schemas/Patch'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/deletebulkDataExporterConfig_200_response_inner'
                type: array
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Delete a data exporter config
      tags:
      - data-exporter-configs
      x-openapi-router-controller: openapi_server.controllers.data_exporter_configs_controller
      x-codegen-request-body-name: body
    patch:
      deprecated: false
      description: Update a data exporter configs with a diff
      operationId: patch_bulk_data_exporter_config
      parameters: []
      requestBody:
        content:
          application/ndjson:
            schema:
              $ref: '#/components/schemas/Patch'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/updateBulkDataExporterConfig_200_response_inner'
                type: array
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Update a data exporter configs with a diff
      tags:
      - data-exporter-configs
      x-openapi-router-controller: openapi_server.controllers.data_exporter_configs_controller
      x-codegen-request-body-name: body
    post:
      deprecated: false
      description: Create a new data exporter configs
      operationId: create_bulk_data_exporter_configs
      parameters: []
      requestBody:
        content:
          application/ndjson:
            schema:
              $ref: '#/components/schemas/DataExporterConfig'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/createBulkDataExporterConfigs_200_response_inner'
                type: array
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Create a new data exporter configs
      tags:
      - data-exporter-configs
      x-openapi-router-controller: openapi_server.controllers.data_exporter_configs_controller
      x-codegen-request-body-name: body
    put:
      deprecated: false
      description: Update a data exporter configs
      operationId: update_bulk_data_exporter_config
      parameters: []
      requestBody:
        content:
          application/ndjson:
            schema:
              $ref: '#/components/schemas/DataExporterConfig'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/updateBulkDataExporterConfig_200_response_inner'
                type: array
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Update a data exporter configs
      tags:
      - data-exporter-configs
      x-openapi-router-controller: openapi_server.controllers.data_exporter_configs_controller
      x-codegen-request-body-name: body
  /api/data-exporter-configs/_template:
    get:
      deprecated: false
      description: Get all data exporter configs
      operationId: data_exporter_template
      parameters:
      - description: The data exporter config type
        explode: true
        in: query
        name: type
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataExporterConfig'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Get all data exporter configs
      tags:
      - data-exporter-configs
      x-openapi-router-controller: openapi_server.controllers.data_exporter_configs_controller
  /api/data-exporter-configs/{dataExporterConfigId}:
    delete:
      deprecated: false
      description: Delete a data exporter config
      operationId: delete_data_exporter_config
      parameters:
      - description: The data exporter config id
        explode: false
        in: path
        name: dataExporterConfigId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deleted'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Delete a data exporter config
      tags:
      - data-exporter-configs
      x-openapi-router-controller: openapi_server.controllers.data_exporter_configs_controller
    get:
      deprecated: false
      description: Get a data exporter config
      operationId: find_data_exporter_config_by_id
      parameters:
      - description: The data exporter config id
        explode: false
        in: path
        name: dataExporterConfigId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataExporterConfig'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Get a data exporter config
      tags:
      - data-exporter-configs
      x-openapi-router-controller: openapi_server.controllers.data_exporter_configs_controller
    patch:
      deprecated: false
      description: Update a data exporter config with a diff
      operationId: patch_data_exporter_config
      parameters:
      - description: The data exporter config id
        explode: false
        in: path
        name: dataExporterConfigId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Patch'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataExporterConfig'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Update a data exporter config with a diff
      tags:
      - data-exporter-configs
      x-openapi-router-controller: openapi_server.controllers.data_exporter_configs_controller
      x-codegen-request-body-name: body
    put:
      deprecated: false
      description: Update a data exporter config
      operationId: update_data_exporter_config
      parameters:
      - description: The data exporter config id
        explode: false
        in: path
        name: dataExporterConfigId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataExporterConfig'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataExporterConfig'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Update a data exporter config
      tags:
      - data-exporter-configs
      x-openapi-router-controller: openapi_server.controllers.data_exporter_configs_controller
      x-codegen-request-body-name: body
  /api/globalconfig:
    get:
      deprecated: false
      description: Get the full configuration of Otoroshi
      operationId: global_config
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalConfig'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Get the full configuration of Otoroshi
      tags:
      - configuration
      x-openapi-router-controller: openapi_server.controllers.configuration_controller
    patch:
      deprecated: false
      description: Update the global configuration with a diff
      operationId: patch_global_config
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Patch'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalConfig'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Update the global configuration with a diff
      tags:
      - configuration
      x-openapi-router-controller: openapi_server.controllers.configuration_controller
      x-codegen-request-body-name: body
    put:
      deprecated: false
      description: Update the global configuration
      operationId: put_global_config
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GlobalConfig'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalConfig'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Update the global configuration
      tags:
      - configuration
      x-openapi-router-controller: openapi_server.controllers.configuration_controller
      x-codegen-request-body-name: body
  /api/groups:
    get:
      deprecated: false
      description: Get all service groups
      operationId: all_service_groups
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Group'
                type: array
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Get all service groups
      tags:
      - groups
      x-openapi-router-controller: openapi_server.controllers.groups_controller
    post:
      deprecated: false
      description: Create a new service group
      operationId: create_group
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Create a new service group
      tags:
      - groups
      x-openapi-router-controller: openapi_server.controllers.groups_controller
      x-codegen-request-body-name: body
  /api/groups/{groupId}/apikeys:
    get:
      deprecated: false
      description: Get all api keys for the group of a service
      operationId: api_keys_from_group
      parameters:
      - description: The api key group id
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiKey'
                type: array
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Get all api keys for the group of a service
      tags:
      - apikeys
      x-openapi-router-controller: openapi_server.controllers.apikeys_controller
    post:
      deprecated: false
      description: Create a new api key for a group
      operationId: create_api_key_from_group
      parameters:
      - description: The api key group id
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiKey'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Create a new api key for a group
      tags:
      - apikeys
      x-openapi-router-controller: openapi_server.controllers.apikeys_controller
      x-codegen-request-body-name: body
  /api/groups/{groupId}/apikeys/{clientId}:
    delete:
      deprecated: false
      description: Delete an api key for a specified service group
      operationId: delete_api_key_from_group
      parameters:
      - description: The api key group id
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: string
        style: simple
      - description: the api key id
        explode: false
        in: path
        name: clientId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deleted'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Delete an api key
      tags:
      - apikeys
      x-openapi-router-controller: openapi_server.controllers.apikeys_controller
    get:
      deprecated: false
      description: Get an api key for a specified service group
      operationId: api_key_from_group
      parameters:
      - description: The api key group id
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: string
        style: simple
      - description: the api key id
        explode: false
        in: path
        name: clientId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Get an api key
      tags:
      - apikeys
      x-openapi-router-controller: openapi_server.controllers.apikeys_controller
    patch:
      deprecated: false
      description: Update an api key for a specified service descriptor with a diff
      operationId: patch_api_key_from_group
      parameters:
      - description: The api key group id
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: string
        style: simple
      - description: the api key id
        explode: false
        in: path
        name: clientId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Patch'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Update an api key with a diff
      tags:
      - apikeys
      x-openapi-router-controller: openapi_server.controllers.apikeys_controller
      x-codegen-request-body-name: body
    put:
      deprecated: false
      description: Update an api key for a specified service group
      operationId: update_api_key_from_group
      parameters:
      - description: The api key group id
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: string
        style: simple
      - description: the api key id
        explode: false
        in: path
        name: clientId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiKey'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Update an api key
      tags:
      - apikeys
      x-openapi-router-controller: openapi_server.controllers.apikeys_controller
      x-codegen-request-body-name: body
  /api/groups/{groupId}/apikeys/{clientId}/quotas:
    delete:
      deprecated: false
      description: Reset the quota state of an api key
      operationId: reset_api_key_from_group_quotas
      parameters:
      - description: The api key group id
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: string
        style: simple
      - description: the api key id
        explode: false
        in: path
        name: clientId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quotas'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Reset the quota state of an api key
      tags:
      - apikeys
      x-openapi-router-controller: openapi_server.controllers.apikeys_controller
    get:
      deprecated: false
      description: Get the quota state of an api key
      operationId: api_key_from_group_quotas
      parameters:
      - description: The api key group id
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: string
        style: simple
      - description: the api key id
        explode: false
        in: path
        name: clientId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quotas'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Get the quota state of an api key
      tags:
      - apikeys
      x-openapi-router-controller: openapi_server.controllers.apikeys_controller
  /api/groups/{serviceGroupId}:
    delete:
      deprecated: false
      description: Delete a service group
      operationId: delete_group
      parameters:
      - description: The service group id
        explode: false
        in: path
        name: serviceGroupId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deleted'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Delete a service group
      tags:
      - groups
      x-openapi-router-controller: openapi_server.controllers.groups_controller
    get:
      deprecated: false
      description: Get a service group
      operationId: service_group
      parameters:
      - description: The service group id
        explode: false
        in: path
        name: serviceGroupId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Get a service group
      tags:
      - groups
      x-openapi-router-controller: openapi_server.controllers.groups_controller
    patch:
      deprecated: false
      description: Update a service group with a diff
      operationId: patch_group
      parameters:
      - description: The service group id
        explode: false
        in: path
        name: serviceGroupId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Patch'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Update a service group with a diff
      tags:
      - groups
      x-openapi-router-controller: openapi_server.controllers.groups_controller
      x-codegen-request-body-name: body
    put:
      deprecated: false
      description: Update a service group
      operationId: update_group
      parameters:
      - description: The service group id
        explode: false
        in: path
        name: serviceGroupId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Update a service group
      tags:
      - groups
      x-openapi-router-controller: openapi_server.controllers.groups_controller
      x-codegen-request-body-name: body
  /api/groups/{serviceGroupId}/services:
    get:
      deprecated: false
      description: Get all services descriptor for a group
      operationId: service_group_services
      parameters:
      - description: The service group id
        explode: false
        in: path
        name: serviceGroupId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiKey'
                type: array
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Get all services descriptor for a group
      tags:
      - services
      x-openapi-router-controller: openapi_server.controllers.services_controller
  /api/import:
    post:
      deprecated: false
      description: Import the full state of Otoroshi as a file
      operationId: full_import_from_file
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportExport'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Done'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Import the full state of Otoroshi as a file
      tags:
      - import
      x-openapi-router-controller: openapi_server.controllers.import_controller
      x-codegen-request-body-name: body
  /api/live:
    get:
      deprecated: false
      description: Get global otoroshi stats
      operationId: global_live_stats
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stats'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Get global otoroshi stats
      tags:
      - stats
      x-openapi-router-controller: openapi_server.controllers.stats_controller
  /api/live/{id}:
    get:
      deprecated: false
      description: "Get live feed of global otoroshi stats (global) or for a service\
        \ {id}"
      operationId: service_live_stats
      parameters:
      - description: The service id or global for otoroshi stats
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stats'
            text/event-stream:
              schema:
                $ref: '#/components/schemas/Stats'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Get live feed of otoroshi stats
      tags:
      - stats
      x-openapi-router-controller: openapi_server.controllers.stats_controller
  /api/otoroshi.json:
    get:
      deprecated: false
      description: Export the full state of Otoroshi
      operationId: full_export
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportExport'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Export the full state of Otoroshi
      tags:
      - import
      x-openapi-router-controller: openapi_server.controllers.import_controller
    post:
      deprecated: false
      description: Import the full state of Otoroshi
      operationId: full_import
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportExport'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Done'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Import the full state of Otoroshi
      tags:
      - import
      x-openapi-router-controller: openapi_server.controllers.import_controller
      x-codegen-request-body-name: body
  /api/scripts:
    get:
      deprecated: false
      description: Get all scripts
      operationId: find_all_scripts
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Script'
                type: array
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Get all scripts
      tags:
      - scripts
      x-openapi-router-controller: openapi_server.controllers.scripts_controller
    post:
      deprecated: false
      description: Create a new script
      operationId: create_script
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Script'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Script'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Create a new script
      tags:
      - scripts
      x-openapi-router-controller: openapi_server.controllers.scripts_controller
      x-codegen-request-body-name: body
  /api/scripts/_compile:
    post:
      deprecated: false
      description: Compile a script
      operationId: compile_script
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Script'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScriptCompilationResult'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Compile a script
      tags:
      - scripts
      x-openapi-router-controller: openapi_server.controllers.scripts_controller
      x-codegen-request-body-name: body
  /api/scripts/{scriptId}:
    delete:
      deprecated: false
      description: Delete a script
      operationId: delete_script
      parameters:
      - description: The script id
        explode: false
        in: path
        name: scriptId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deleted'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Delete a script
      tags:
      - scripts
      x-openapi-router-controller: openapi_server.controllers.scripts_controller
    get:
      deprecated: false
      description: Get a script
      operationId: find_script_by_id
      parameters:
      - description: The script id
        explode: false
        in: path
        name: scriptId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Script'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Get a script
      tags:
      - scripts
      x-openapi-router-controller: openapi_server.controllers.scripts_controller
    patch:
      deprecated: false
      description: Update a script with a diff
      operationId: patch_script
      parameters:
      - description: The script id
        explode: false
        in: path
        name: scriptId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Patch'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Script'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Update a script with a diff
      tags:
      - scripts
      x-openapi-router-controller: openapi_server.controllers.scripts_controller
      x-codegen-request-body-name: body
    put:
      deprecated: false
      description: Update a script
      operationId: update_script
      parameters:
      - description: The script id
        explode: false
        in: path
        name: scriptId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Script'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Script'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Update a script
      tags:
      - scripts
      x-openapi-router-controller: openapi_server.controllers.scripts_controller
      x-codegen-request-body-name: body
  /api/services:
    get:
      deprecated: false
      description: Get all services
      operationId: all_services
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Service'
                type: array
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Get all services
      tags:
      - services
      x-openapi-router-controller: openapi_server.controllers.services_controller
    post:
      deprecated: false
      description: Create a new service descriptor
      operationId: create_service
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Create a new service descriptor
      tags:
      - services
      x-openapi-router-controller: openapi_server.controllers.services_controller
      x-codegen-request-body-name: body
  /api/services/{serviceId}:
    delete:
      deprecated: false
      description: Delete a service descriptor
      operationId: delete_service
      parameters:
      - description: The service id
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deleted'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Delete a service descriptor
      tags:
      - services
      x-openapi-router-controller: openapi_server.controllers.services_controller
    get:
      deprecated: false
      description: Get a service descriptor
      operationId: service
      parameters:
      - description: The service id
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Get a service descriptor
      tags:
      - services
      x-openapi-router-controller: openapi_server.controllers.services_controller
    patch:
      deprecated: false
      description: Update a service descriptor with a diff
      operationId: patch_service
      parameters:
      - description: The service id
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Patch'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Update a service descriptor with a diff
      tags:
      - services
      x-openapi-router-controller: openapi_server.controllers.services_controller
      x-codegen-request-body-name: body
    put:
      deprecated: false
      description: Update a service descriptor
      operationId: update_service
      parameters:
      - description: The service id
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Update a service descriptor
      tags:
      - services
      x-openapi-router-controller: openapi_server.controllers.services_controller
      x-codegen-request-body-name: body
  /api/services/{serviceId}/apikeys:
    get:
      deprecated: false
      description: Get all api keys for the group of a service
      operationId: api_keys
      parameters:
      - description: The api key service id
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiKey'
                type: array
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Get all api keys for the group of a service
      tags:
      - apikeys
      x-openapi-router-controller: openapi_server.controllers.apikeys_controller
    post:
      deprecated: false
      description: ""
      operationId: create_api_key
      parameters:
      - description: The api key service id
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiKey'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Create a new api key for a service
      tags:
      - apikeys
      x-openapi-router-controller: openapi_server.controllers.apikeys_controller
      x-codegen-request-body-name: body
  /api/services/{serviceId}/apikeys/{clientId}:
    delete:
      deprecated: false
      description: Delete an api key for a specified service descriptor
      operationId: delete_api_key
      parameters:
      - description: The api key service id
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      - description: the api key id
        explode: false
        in: path
        name: clientId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deleted'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Delete an api key
      tags:
      - apikeys
      x-openapi-router-controller: openapi_server.controllers.apikeys_controller
    get:
      deprecated: false
      description: Get an api key for a specified service descriptor
      operationId: api_key
      parameters:
      - description: The api key service id
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      - description: the api key id
        explode: false
        in: path
        name: clientId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Get an api key
      tags:
      - apikeys
      x-openapi-router-controller: openapi_server.controllers.apikeys_controller
    patch:
      deprecated: false
      description: Update an api key for a specified service descriptor with a diff
      operationId: patch_api_key
      parameters:
      - description: The api key service id
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      - description: the api key id
        explode: false
        in: path
        name: clientId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Patch'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Update an api key with a diff
      tags:
      - apikeys
      x-openapi-router-controller: openapi_server.controllers.apikeys_controller
      x-codegen-request-body-name: body
    put:
      deprecated: false
      description: Update an api key for a specified service descriptor
      operationId: update_api_key
      parameters:
      - description: The api key service id
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      - description: the api key id
        explode: false
        in: path
        name: clientId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiKey'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Update an api key
      tags:
      - apikeys
      x-openapi-router-controller: openapi_server.controllers.apikeys_controller
      x-codegen-request-body-name: body
  /api/services/{serviceId}/apikeys/{clientId}/group:
    get:
      deprecated: false
      description: Get the group of an api key
      operationId: api_key_group
      parameters:
      - description: The api key service id
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      - description: the api key id
        explode: false
        in: path
        name: clientId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Get the group of an api key
      tags:
      - apikeys
      x-openapi-router-controller: openapi_server.controllers.apikeys_controller
  /api/services/{serviceId}/apikeys/{clientId}/quotas:
    delete:
      deprecated: false
      description: Reset the quota state of an api key
      operationId: reset_api_key_quotas
      parameters:
      - description: The api key service id
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      - description: the api key id
        explode: false
        in: path
        name: clientId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quotas'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Reset the quota state of an api key
      tags:
      - apikeys
      x-openapi-router-controller: openapi_server.controllers.apikeys_controller
    get:
      deprecated: false
      description: Get the quota state of an api key
      operationId: api_key_quotas
      parameters:
      - description: The api key service id
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      - description: the api key id
        explode: false
        in: path
        name: clientId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quotas'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Get the quota state of an api key
      tags:
      - apikeys
      x-openapi-router-controller: openapi_server.controllers.apikeys_controller
  /api/services/{serviceId}/targets:
    delete:
      deprecated: false
      description: Delete a service descriptor target
      operationId: service_delete_target
      parameters:
      - description: The service id
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Target'
                type: array
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Delete a service descriptor target
      tags:
      - services
      x-openapi-router-controller: openapi_server.controllers.services_controller
    get:
      deprecated: false
      description: Get a service descriptor targets
      operationId: service_targets
      parameters:
      - description: The service id
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Target'
                type: array
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Get a service descriptor targets
      tags:
      - services
      x-openapi-router-controller: openapi_server.controllers.services_controller
    patch:
      deprecated: false
      description: Update a service descriptor targets
      operationId: update_service_targets
      parameters:
      - description: The service id
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Patch'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Target'
                type: array
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Update a service descriptor targets
      tags:
      - services
      x-openapi-router-controller: openapi_server.controllers.services_controller
      x-codegen-request-body-name: body
    post:
      deprecated: false
      description: Add a target to a service descriptor
      operationId: service_add_target
      parameters:
      - description: The service id
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Target'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Target'
                type: array
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Add a target to a service descriptor
      tags:
      - services
      x-openapi-router-controller: openapi_server.controllers.services_controller
      x-codegen-request-body-name: body
  /api/services/{serviceId}/template:
    delete:
      deprecated: false
      description: Delete a service descriptor error template
      operationId: delete_service_template
      parameters:
      - description: The service id
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deleted'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Delete a service descriptor error template
      tags:
      - services
      x-openapi-router-controller: openapi_server.controllers.services_controller
    get:
      deprecated: false
      description: Get a service descriptor error template
      operationId: service_template
      parameters:
      - description: The service id
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorTemplate'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Get a service descriptor error template
      tags:
      - services
      x-openapi-router-controller: openapi_server.controllers.services_controller
    post:
      deprecated: false
      description: Update a service descriptor targets
      operationId: create_service_template
      parameters:
      - description: The service id
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorTemplate'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorTemplate'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Create a service descriptor error template
      tags:
      - services
      x-openapi-router-controller: openapi_server.controllers.services_controller
      x-codegen-request-body-name: body
    put:
      deprecated: false
      description: Update an error template to a service descriptor
      operationId: update_service_template
      parameters:
      - description: The service id
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorTemplate'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorTemplate'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Update an error template to a service descriptor
      tags:
      - services
      x-openapi-router-controller: openapi_server.controllers.services_controller
      x-codegen-request-body-name: body
  /api/snowmonkey/_start:
    post:
      deprecated: false
      description: Start the Snow Monkey
      operationId: start_snow_monkey
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Done'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Start the Snow Monkey
      tags:
      - snowmonkey
      x-openapi-router-controller: openapi_server.controllers.snowmonkey_controller
  /api/snowmonkey/_stop:
    post:
      deprecated: false
      description: Stop the Snow Monkey
      operationId: stop_snow_monkey
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Done'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Stop the Snow Monkey
      tags:
      - snowmonkey
      x-openapi-router-controller: openapi_server.controllers.snowmonkey_controller
  /api/snowmonkey/config:
    get:
      deprecated: false
      description: Get current Snow Monkey config
      operationId: get_snow_monkey_config
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnowMonkeyConfig'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Get current Snow Monkey config
      tags:
      - snowmonkey
      x-openapi-router-controller: openapi_server.controllers.snowmonkey_controller
    patch:
      deprecated: false
      description: Update current Snow Monkey config
      operationId: patch_snow_monkey
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnowMonkeyConfig'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Update current Snow Monkey config
      tags:
      - snowmonkey
      x-openapi-router-controller: openapi_server.controllers.snowmonkey_controller
      x-codegen-request-body-name: body
    put:
      deprecated: false
      description: Update current Snow Monkey config
      operationId: update_snow_monkey
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnowMonkeyConfig'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Update current Snow Monkey config
      tags:
      - snowmonkey
      x-openapi-router-controller: openapi_server.controllers.snowmonkey_controller
      x-codegen-request-body-name: body
  /api/snowmonkey/outages:
    delete:
      deprecated: false
      description: Reset Snow Monkey Outages for the day
      operationId: reset_snow_monkey
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Done'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Reset Snow Monkey Outages for the day
      tags:
      - snowmonkey
      x-openapi-router-controller: openapi_server.controllers.snowmonkey_controller
    get:
      deprecated: false
      description: Get all current Snow Monkey ourages
      operationId: get_snow_monkey_outages
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Outage'
                type: array
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Get all current Snow Monkey ourages
      tags:
      - snowmonkey
      x-openapi-router-controller: openapi_server.controllers.snowmonkey_controller
  /api/verifiers:
    get:
      deprecated: false
      description: Get all global JWT verifiers
      operationId: find_all_global_jwt_verifiers
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/GlobalJwtVerifier'
                type: array
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Get all global JWT verifiers
      tags:
      - jwt-verifiers
      x-openapi-router-controller: openapi_server.controllers.jwt_verifiers_controller
    post:
      deprecated: false
      description: Create one global JWT verifiers
      operationId: create_global_jwt_verifier
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GlobalJwtVerifier'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalJwtVerifier'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Create one global JWT verifiers
      tags:
      - jwt-verifiers
      x-openapi-router-controller: openapi_server.controllers.jwt_verifiers_controller
      x-codegen-request-body-name: body
  /api/verifiers/{verifierId}:
    delete:
      deprecated: false
      description: Delete one global JWT verifiers
      operationId: delete_global_jwt_verifier
      parameters:
      - description: The jwt verifier id
        explode: false
        in: path
        name: verifierId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deleted'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Delete one global JWT verifiers
      tags:
      - jwt-verifiers
      x-openapi-router-controller: openapi_server.controllers.jwt_verifiers_controller
    get:
      deprecated: false
      description: Get one global JWT verifiers
      operationId: find_global_jwt_verifiers_by_id
      parameters:
      - description: The jwt verifier id
        explode: false
        in: path
        name: verifierId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalJwtVerifier'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Get one global JWT verifiers
      tags:
      - jwt-verifiers
      x-openapi-router-controller: openapi_server.controllers.jwt_verifiers_controller
    patch:
      deprecated: false
      description: Update one global JWT verifiers
      operationId: patch_global_jwt_verifier
      parameters:
      - description: The jwt verifier id
        explode: false
        in: path
        name: verifierId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Patch'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalJwtVerifier'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Update one global JWT verifiers
      tags:
      - jwt-verifiers
      x-openapi-router-controller: openapi_server.controllers.jwt_verifiers_controller
      x-codegen-request-body-name: body
    put:
      deprecated: false
      description: Update one global JWT verifiers
      operationId: update_global_jwt_verifier
      parameters:
      - description: The jwt verifier id
        explode: false
        in: path
        name: verifierId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GlobalJwtVerifier'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalJwtVerifier'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Update one global JWT verifiers
      tags:
      - jwt-verifiers
      x-openapi-router-controller: openapi_server.controllers.jwt_verifiers_controller
      x-codegen-request-body-name: body
  /health:
    get:
      deprecated: false
      description: Import the full state of Otoroshi as a file
      operationId: health
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OtoroshiHealth'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "404":
          description: Resource not found or does not exist
      summary: Return current Otoroshi health
      tags:
      - health
      x-openapi-router-controller: openapi_server.controllers.health_controller
  /lines:
    get:
      deprecated: false
      description: Get all environments provided by the current Otoroshi instance
      operationId: all_lines
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Environment'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Get all environments
      tags:
      - environments
      x-openapi-router-controller: openapi_server.controllers.environments_controller
  /lines/{line}/services:
    get:
      deprecated: false
      description: Get all services for an environment provided by the current Otoroshi
        instance
      operationId: services_for_a_line
      parameters:
      - description: The environment where to find services
        explode: false
        in: path
        name: line
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Service'
                type: array
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Get all services for an environment
      tags:
      - environments
      x-openapi-router-controller: openapi_server.controllers.environments_controller
  /new/apikey:
    get:
      deprecated: false
      description: Get a template of an Otoroshi Api Key. The generated entity is
        not persisted
      operationId: initiate_api_key
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Get a template of an Otoroshi Api Key
      tags:
      - templates
      x-openapi-router-controller: openapi_server.controllers.templates_controller
  /new/group:
    get:
      deprecated: false
      description: Get a template of an Otoroshi service group. The generated entity
        is not persisted
      operationId: initiate_service_group
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Get a template of an Otoroshi service group
      tags:
      - templates
      x-openapi-router-controller: openapi_server.controllers.templates_controller
  /new/service:
    get:
      deprecated: false
      description: Get a template of an Otoroshi service descriptor. The generated
        entity is not persisted
      operationId: initiate_service
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
          description: Successful operation
        "400":
          description: "Bad resource format. Take another look to the swagger, or\
            \ open an issue :)"
        "401":
          description: "You have to provide an Api Key. Api Key can be passed with\
            \ 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic\
            \ http authentication"
        "404":
          description: Resource not found or does not exist
      security:
      - otoroshi_auth: []
      summary: Get a template of an Otoroshi service descriptor
      tags:
      - templates
      x-openapi-router-controller: openapi_server.controllers.templates_controller
components:
  schemas:
    ApiKey:
      description: An Otoroshi Api Key. An Api Key is defined for a group of services
        to allow usage of the same Api Key for multiple services.
      example:
        metadata:
          key: value
        clientId: a string value
        monthlyQuota: 123
        throttlingQuota: 123
        clientName: a string value
        authorizedEntities:
        - a string value
        clientSecret: a string value
        dailyQuota: 123
        enabled: true
      properties:
        authorizedEntities:
          description: The group/service ids (prefixed by group_ or service_ on which
            the key is authorized
          example:
          - a string value
          items:
            example: a string value
            type: string
          title: authorizedEntities
          type: array
        clientId:
          description: "The unique id of the Api Key. Usually 16 random alpha numerical\
            \ characters, but can be anything"
          example: a string value
          title: clientId
          type: string
        clientName:
          description: "The name of the api key, for humans ;-)"
          example: a string value
          title: clientName
          type: string
        clientSecret:
          description: "The secret of the Api Key. Usually 64 random alpha numerical\
            \ characters, but can be anything"
          example: a string value
          title: clientSecret
          type: string
        dailyQuota:
          description: Authorized number of calls per day
          example: 123
          format: int64
          title: dailyQuota
          type: integer
        enabled:
          description: "Whether or not the key is enabled. If disabled, resources\
            \ won't be available to calls using this key"
          example: true
          title: enabled
          type: boolean
        metadata:
          additionalProperties:
            type: string
          description: Bunch of metadata for the key
          example:
            key: value
          title: metadata
          type: object
        monthlyQuota:
          description: Authorized number of calls per month
          example: 123
          format: int64
          title: monthlyQuota
          type: integer
        throttlingQuota:
          description: "Authorized number of calls per second, measured on 10 seconds"
          example: 123
          format: int64
          title: throttlingQuota
          type: integer
      required:
      - authorizedEntities
      - clientId
      - clientName
      - clientSecret
      - enabled
      title: ApiKey
      type: object
    Auth0Config:
      description: Configuration for Auth0 domain
      example:
        clientId: a string value
        domain: a string value
        callbackUrl: a string value
        clientSecret: a string value
      properties:
        callbackUrl:
          description: Auth0 callback URL
          example: a string value
          title: callbackUrl
          type: string
        clientId:
          description: Auth0 client id
          example: a string value
          title: clientId
          type: string
        clientSecret:
          description: Auth0 client secret
          example: a string value
          title: clientSecret
          type: string
        domain:
          description: Auth0 domain
          example: a string value
          title: domain
          type: string
      required:
      - callbackUrl
      - clientId
      - clientSecret
      - domain
      title: Auth0Config
      type: object
    BadResponse:
      description: An HTTP response that is not supposed to be returned by a service
      example:
        headers:
          key: value
        body: a string value
        status: 123123
      properties:
        body:
          description: The body of the HTTP response
          example: a string value
          title: body
          type: string
        headers:
          additionalProperties:
            type: string
          description: The HTTP headers of the response
          example:
            key: value
          title: headers
          type: object
        status:
          description: The HTTP status for the response
          example: 123123
          format: int32
          title: status
          type: integer
      required:
      - body
      - headers
      - status
      title: BadResponse
      type: object
    BadResponsesFaultConfig:
      description: Config for bad requests injection fault
      example:
        responses:
        - headers:
            key: value
          body: a string value
          status: 123123
        - headers:
            key: value
          body: a string value
          status: 123123
        ratio: 42.2
      properties:
        ratio:
          description: The percentage of requests affected by this fault. Value should
            be between 0.0 and 1.0
          example: 42.2
          format: double
          title: ratio
          type: number
        responses:
          description: The possibles responses
          items:
            $ref: '#/components/schemas/BadResponse'
          title: responses
          type: array
      required:
      - ratio
      - responses
      title: BadResponsesFaultConfig
      type: object
    Canary:
      description: The configuration of the canary mode for a service descriptor
      example:
        root: a string value
        targets:
        - scheme: a string value
          host: www.google.com
        - scheme: a string value
          host: www.google.com
        enabled: true
        traffic: 123123
      properties:
        enabled:
          description: Use canary mode for this service
          example: true
          title: enabled
          type: boolean
        root:
          description: "Otoroshi will append this root to any target choosen. If the\
            \ specified root is '/api/foo', then a request to https://yyyyyyy/bar\
            \ will actually hit https://xxxxxxxxx/api/foo/bar"
          example: a string value
          title: root
          type: string
        targets:
          description: The list of target that Otoroshi will proxy and expose through
            the subdomain defined before. Otoroshi will do round-robin load balancing
            between all those targets with circuit breaker mecanism to avoid cascading
            failures
          items:
            $ref: '#/components/schemas/Target'
          title: targets
          type: array
        traffic:
          description: Ratio of traffic that will be sent to canary targets.
          example: 123123
          format: int32
          title: traffic
          type: integer
      required:
      - enabled
      - root
      - targets
      - traffic
      title: Canary
      type: object
    Certificate:
      description: A SSL/TLS X509 certificate
      example:
        valid: a string value
        privateKey: a string value
        chain: a string value
        caRef: a string value
        subject: a string value
        domain: a string value
        autoRenew: a string value
        from: a string value
        selfSigned: a string value
        id: a string value
        to: a string value
        ca: a string value
      properties:
        autoRenew:
          description: Allow Otoroshi to renew the certificate (if self signed)
          example: a string value
          title: autoRenew
          type: string
        ca:
          description: Certificate is a CA (read only)
          example: a string value
          title: ca
          type: string
        caRef:
          description: Reference for a CA certificate in otoroshi
          example: a string value
          title: caRef
          type: string
        chain:
          description: Certificate chain of trust in PEM format
          example: a string value
          title: chain
          type: string
        domain:
          description: Domain of the certificate (read only)
          example: a string value
          title: domain
          type: string
        from:
          description: Start date of validity
          example: a string value
          title: from
          type: string
        id:
          description: Id of the certificate
          example: a string value
          title: id
          type: string
        privateKey:
          description: PKCS8 private key in PEM format
          example: a string value
          title: privateKey
          type: string
        selfSigned:
          description: Certificate is self signed  read only)
          example: a string value
          title: selfSigned
          type: string
        subject:
          description: Subject of the certificate (read only)
          example: a string value
          title: subject
          type: string
        to:
          description: End date of validity
          example: a string value
          title: to
          type: string
        valid:
          description: Certificate is valid (read only)
          example: a string value
          title: valid
          type: string
      required:
      - autoRenew
      - ca
      - caRef
      - chain
      - domain
      - from
      - id
      - privateKey
      - selfSigned
      - subject
      - to
      - valid
      title: Certificate
      type: object
    ChaosConfig:
      description: Configuration for the faults that can be injected in requests
      example:
        badResponsesFaultConfig:
          responses:
          - headers:
              key: value
            body: a string value
            status: 123123
          - headers:
              key: value
            body: a string value
            status: 123123
          ratio: 42.2
        largeResponseFaultConfig:
          additionalRequestSize: 123123
          ratio: 42.2
        latencyInjectionFaultConfig:
          from: 123123
          to: 123123
          ratio: 42.2
        largeRequestFaultConfig:
          additionalRequestSize: 123123
          ratio: 42.2
        enabled: true
      properties:
        badResponsesFaultConfig:
          $ref: '#/components/schemas/BadResponsesFaultConfig'
        enabled:
          description: Whether or not this config is enabled
          example: true
          title: enabled
          type: boolean
        largeRequestFaultConfig:
          $ref: '#/components/schemas/LargeRequestFaultConfig'
        largeResponseFaultConfig:
          $ref: '#/components/schemas/LargeResponseFaultConfig'
        latencyInjectionFaultConfig:
          $ref: '#/components/schemas/LatencyInjectionFaultConfig'
      required:
      - enabled
      title: ChaosConfig
      type: object
    CleverSettings:
      description: Configuration for CleverCloud client
      example:
        consumerSecret: a string value
        orgaId: a string value
        secret: a string value
        consumerKey: a string value
        token: a string value
      properties:
        consumerKey:
          description: CleverCloud consumer key
          example: a string value
          title: consumerKey
          type: string
        consumerSecret:
          description: CleverCloud consumer token
          example: a string value
          title: consumerSecret
          type: string
        orgaId:
          description: CleverCloud organization id
          example: a string value
          title: orgaId
          type: string
        secret:
          description: CleverCloud oauth secret
          example: a string value
          title: secret
          type: string
        token:
          description: CleverCloud oauth token
          example: a string value
          title: token
          type: string
      required:
      - consumerKey
      - consumerSecret
      - orgaId
      - secret
      - token
      title: CleverSettings
      type: object
    ClientConfig:
      description: The configuration of the circuit breaker for a service descriptor
      example:
        retries: 123123
        sampleInterval: 123123
        useCircuitBreaker: true
        backoffFactor: 123123
        maxErrors: 123123
        retryInitialDelay: 123123
        callTimeout: 123123
        globalTimeout: 123123
      properties:
        backoffFactor:
          description: Specify the factor to multiply the delay for each retry
          example: 123123
          format: int32
          title: backoffFactor
          type: integer
        callTimeout:
          description: Specify how long each call should last at most in milliseconds
          example: 123123
          format: int32
          title: callTimeout
          type: integer
        globalTimeout:
          description: Specify how long the global call (with retries) should last
            at most in milliseconds
          example: 123123
          format: int32
          title: globalTimeout
          type: integer
        maxErrors:
          description: Specify how many errors can pass before opening the circuit
            breaker
          example: 123123
          format: int32
          title: maxErrors
          type: integer
        retries:
          description: Specify how many times the client will try to fetch the result
            of the request after an error before giving up.
          example: 123123
          format: int32
          title: retries
          type: integer
        retryInitialDelay:
          description: "Specify the delay between two retries. Each retry, the delay\
            \ is multiplied by the backoff factor"
          example: 123123
          format: int32
          title: retryInitialDelay
          type: integer
        sampleInterval:
          description: "Specify the sliding window time for the circuit breaker in\
            \ milliseconds, after this time, error count will be reseted"
          example: 123123
          format: int32
          title: sampleInterval
          type: integer
        useCircuitBreaker:
          description: Use a circuit breaker to avoid cascading failure when calling
            chains of services. Highly recommended !
          example: true
          title: useCircuitBreaker
          type: boolean
      required:
      - backoffFactor
      - callTimeout
      - globalTimeout
      - maxErrors
      - retries
      - retryInitialDelay
      - sampleInterval
      - useCircuitBreaker
      title: ClientConfig
      type: object
    ConsoleDataExporterConfig:
      properties: {}
      type: object
    CorsSettings:
      description: The configuration for cors support
      example:
        excludedPatterns:
        - a string value
        - a string value
        allowMethods:
        - a string value
        - a string value
        allowHeaders:
        - a string value
        - a string value
        exposeHeaders:
        - a string value
        - a string value
        maxAge: 123123
        allowCredentials: true
        enabled: true
        allowOrigin: a string value
      properties:
        allowCredentials:
          description: Allow to pass credentials
          example: true
          title: allowCredentials
          type: boolean
        allowHeaders:
          description: The cors allowed headers
          items:
            example: a string value
            type: string
          title: allowHeaders
          type: array
        allowMethods:
          description: The cors allowed methods
          items:
            example: a string value
            type: string
          title: allowMethods
          type: array
        allowOrigin:
          description: The cors allowed origin
          example: a string value
          title: allowOrigin
          type: string
        enabled:
          description: Whether or not cors is enabled
          example: true
          title: enabled
          type: boolean
        excludedPatterns:
          description: The cors excluded patterns
          items:
            example: a string value
            type: string
          title: excludedPatterns
          type: array
        exposeHeaders:
          description: The cors exposed header
          items:
            example: a string value
            type: string
          title: exposeHeaders
          type: array
        maxAge:
          description: Cors max age
          example: 123123
          format: int32
          title: maxAge
          type: integer
      required:
      - allowCredentials
      - allowHeaders
      - allowMethods
      - allowOrigin
      - enabled
      - excludedPatterns
      - exposeHeaders
      - maxAge
      title: CorsSettings
      type: object
    CustomDataExporterConfig:
      properties:
        config:
          additionalProperties:
            type: string
          description: Custom data exporter config
          example:
            key: value
          title: config
          type: object
        ref:
          description: Script Ref
          example: a string value
          title: ref
          type: string
      required:
      - config
      - ref
      title: CustomDataExporterConfig
      type: object
    DataExporterConfig:
      description: Settings to export Otorshi events
      example:
        metadata:
          key: value
        typ: kafka
        enabled: a string value
        groupDuration: 123
        jsonWorkers: 123123
        name: a string value
        groupSize: 123123
        location:
          teams:
          - key: value
          - key: value
          tenant: a string value
        id: a string value
        projection:
          key: value
        config:
          clusterUri: a string value
          headers:
            key: value
          password: a string value
          index: a string value
          type: a string value
          user: a string value
        filtering:
          include:
          - key: value
          - key: value
          exclude:
          - key: value
          - key: value
        sendWorkers: 123123
        bufferSize: 123123
        desc: a string value
      properties:
        bufferSize:
          description: buffer size
          example: 123123
          format: int32
          title: bufferSize
          type: integer
        config:
          $ref: '#/components/schemas/DataExporterConfig_config'
        desc:
          description: Description
          example: a string value
          title: desc
          type: string
        enabled:
          description: Boolean
          example: a string value
          title: enabled
          type: string
        filtering:
          $ref: '#/components/schemas/Filtering'
        groupDuration:
          description: duration
          example: 123
          format: int64
          title: groupDuration
          type: integer
        groupSize:
          description: Group size
          example: 123123
          format: int32
          title: groupSize
          type: integer
        id:
          description: Id
          example: a string value
          title: id
          type: string
        jsonWorkers:
          description: nb workers
          example: 123123
          format: int32
          title: jsonWorkers
          type: integer
        location:
          $ref: '#/components/schemas/Location'
        metadata:
          additionalProperties:
            type: string
          description: Metadata
          example:
            key: value
          title: metadata
          type: object
        name:
          description: Name
          example: a string value
          title: name
          type: string
        projection:
          additionalProperties:
            type: string
          description: projection
          example:
            key: value
          title: projection
          type: object
        sendWorkers:
          description: send workers
          example: 123123
          format: int32
          title: sendWorkers
          type: integer
        typ:
          description: Type of data exporter
          enum:
          - kafka
          - pulsar
          - file
          - mailer
          - elastic
          - console
          - custom
          title: typ
          type: string
      title: DataExporterConfig
      type: object
    Deleted:
      example:
        deleted: true
      properties:
        deleted:
          example: true
          title: deleted
          type: boolean
      required:
      - deleted
      title: Deleted
      type: object
    Done:
      example:
        done: true
      properties:
        done:
          example: true
          title: done
          type: boolean
      required:
      - done
      title: Done
      type: object
    ESAlgoSettings:
      description: Settings for an EC + SHA signing algorithm
      properties:
        privateKey:
          description: The private key for the RSA function
          example: a string value
          title: privateKey
          type: string
        publicKey:
          description: The public key for the RSA function
          example: a string value
          title: publicKey
          type: string
        size:
          description: "Size for SHA function. can be 256, 384 or 512"
          example: 123123
          format: int32
          title: size
          type: integer
        type:
          description: String with value ESAlgoSettings
          example: a string value
          title: type
          type: string
      required:
      - publicKey
      - size
      - type
      title: ESAlgoSettings
      type: object
    ElasticConfig:
      description: The configuration for elastic access
      example:
        clusterUri: a string value
        headers:
          key: value
        password: a string value
        index: a string value
        type: a string value
        user: a string value
      properties:
        clusterUri:
          description: URL of the elastic cluster
          example: a string value
          title: clusterUri
          type: string
        headers:
          additionalProperties:
            type: string
          description: Additionnal http headers
          example:
            key: value
          title: headers
          type: object
        index:
          description: Index for events. Default is otoroshi-events
          example: a string value
          title: index
          type: string
        password:
          description: Optional password
          example: a string value
          title: password
          type: string
        type:
          description: Type of events. Default is event
          example: a string value
          title: type
          type: string
        user:
          description: Optional user
          example: a string value
          title: user
          type: string
      required:
      - clusterUri
      - headers
      - index
      - password
      - type
      - user
      title: ElasticConfig
      type: object
    Environment:
      description: The name of the environment for service descriptors
      example: prod
      type: string
    ErrorTemplate:
      description: Error templates for a service descriptor
      example:
        templateMaintenance: a string value
        templateBuild: a string value
        messages:
          key: value
        template50x: a string value
        template40x: a string value
        serviceId: a string value
      properties:
        messages:
          additionalProperties:
            type: string
          description: Map for custom messages
          example:
            key: value
          title: messages
          type: object
        serviceId:
          description: The Id of the service for which the error template is enabled
          example: a string value
          title: serviceId
          type: string
        template40x:
          description: The html template for 40x errors
          example: a string value
          title: template40x
          type: string
        template50x:
          description: The html template for 50x errors
          example: a string value
          title: template50x
          type: string
        templateBuild:
          description: The html template for build page
          example: a string value
          title: templateBuild
          type: string
        templateMaintenance:
          description: The html template for maintenance page
          example: a string value
          title: templateMaintenance
          type: string
      required:
      - messages
      - serviceId
      - template40x
      - template50x
      - templateBuild
      - templateMaintenance
      title: ErrorTemplate
      type: object
    ExposedApi:
      description: The Open API configuration for your service (if one)
      example:
        exposeApi: true
        openApiDescriptorUrl: http://www.google.com
      properties:
        exposeApi:
          description: Whether or not the current service expose an API with an Open
            API descriptor
          example: true
          title: exposeApi
          type: boolean
        openApiDescriptorUrl:
          description: The URL of the Open API descriptor
          example: http://www.google.com
          format: uri
          title: openApiDescriptorUrl
          type: string
      required:
      - exposeApi
      title: ExposedApi
      type: object
    FileDataExporterConfig:
      properties:
        path:
          description: Path to file
          example: a string value
          title: path
          type: string
      required:
      - path
      title: FileDataExporterConfig
      type: object
    Filtering:
      example:
        include:
        - key: value
        - key: value
        exclude:
        - key: value
        - key: value
      properties:
        exclude:
          description: Excluding pattern
          items:
            additionalProperties:
              type: string
            example:
              key: value
            type: object
          title: exclude
          type: array
        include:
          description: Including pattern
          items:
            additionalProperties:
              type: string
            example:
              key: value
            type: object
          title: include
          type: array
      required:
      - "include, exclude"
      title: Filtering
      type: object
    GenericOauth2ModuleConfig:
      description: Settings to authenticate users using a generic OAuth2 provider
      properties:
        accessTokenField:
          description: Field name to get access token
          example: a string value
          title: accessTokenField
          type: string
        authorizeUrl:
          description: OAuth authorize URL
          example: a string value
          title: authorizeUrl
          type: string
        callbackUrl:
          description: Otoroshi callback URL
          example: a string value
          title: callbackUrl
          type: string
        claims:
          description: The claims of the token
          example: a string value
          title: claims
          type: string
        clientId:
          description: OAuth Client id
          example: a string value
          title: clientId
          type: string
        clientSecret:
          description: OAuth Client secret
          example: a string value
          title: clientSecret
          type: string
        desc:
          description: Description of the config
          example: a string value
          title: desc
          type: string
        emailField:
          description: Field name to get email from user profile
          example: a string value
          title: emailField
          type: string
        id:
          description: Unique id of the config
          example: a string value
          title: id
          type: string
        jwtVerifier:
          $ref: '#/components/schemas/GenericOauth2ModuleConfig_jwtVerifier'
        loginUrl:
          description: OAuth login URL
          example: a string value
          title: loginUrl
          type: string
        logoutUrl:
          description: OAuth logout URL
          example: a string value
          title: logoutUrl
          type: string
        name:
          description: Name of the config
          example: a string value
          title: name
          type: string
        nameField:
          description: Field name to get name from user profile
          example: a string value
          title: nameField
          type: string
        oidConfig:
          description: URL of the OIDC config. file
          example: a string value
          title: oidConfig
          type: string
        otoroshiDataField:
          description: Field name to get otoroshi metadata from. You can specify sub
            fields using | as separator
          example: a string value
          title: otoroshiDataField
          type: string
        readProfileFromToken:
          description: The user profile will be read from the JWT token in id_token
          example: true
          title: readProfileFromToken
          type: boolean
        scope:
          description: The scope of the token
          example: a string value
          title: scope
          type: string
        sessionMaxAge:
          description: Max age of the session
          example: 123123
          format: int32
          title: sessionMaxAge
          type: integer
        tokenUrl:
          description: OAuth token URL
          example: a string value
          title: tokenUrl
          type: string
        type:
          description: Type of settings. value is oauth2
          example: a string value
          title: type
          type: string
        useCookies:
          description: Use for redirection to actual service
          example: true
          title: useCookies
          type: boolean
        useJson:
          description: Use JSON or URL Form Encoded as payload with the OAuth provider
          example: true
          title: useJson
          type: boolean
        userInfoUrl:
          description: OAuth userinfo to get user profile
          example: a string value
          title: userInfoUrl
          type: string
      required:
      - accessTokenField
      - authorizeUrl
      - callbackUrl
      - clientId
      - clientSecret
      - desc
      - emailField
      - id
      - loginUrl
      - logoutUrl
      - name
      - nameField
      - otoroshiDataField
      - sessionMaxAge
      - tokenUrl
      - type
      - userInfoUrl
      title: GenericOauth2ModuleConfig
      type: object
    GlobalConfig:
      description: "The global config object of Otoroshi, used to customize settings\
        \ of the current Otoroshi instance"
      example:
        maxLogsSize: 123123
        apiReadOnly: true
        analyticsWebhooks:
        - headers:
            key: value
          url: http://www.google.com
        - headers:
            key: value
          url: http://www.google.com
        elasticReadsConfig:
          clusterUri: a string value
          headers:
            key: value
          password: a string value
          index: a string value
          type: a string value
          user: a string value
        limitConcurrentRequests: true
        maxConcurrentRequests: 123
        endlessIpAddresses:
        - 192.192.192.192
        - 192.192.192.192
        maxHttp10ResponseSize: 123
        streamEntityOnly: true
        backofficeAuth0Config:
          clientId: a string value
          domain: a string value
          callbackUrl: a string value
          clientSecret: a string value
        alertsEmails:
        - admin@otoroshi.io
        - admin@otoroshi.io
        autoLinkToDefaultGroup: true
        alertsWebhooks:
        - headers:
            key: value
          url: http://www.google.com
        - headers:
            key: value
          url: http://www.google.com
        middleFingers: true
        privateAppsAuth0Config:
          clientId: a string value
          domain: a string value
          callbackUrl: a string value
          clientSecret: a string value
        throttlingQuota: 123
        cleverSettings:
          consumerSecret: a string value
          orgaId: a string value
          secret: a string value
          consumerKey: a string value
          token: a string value
        u2fLoginOnly: true
        ipFiltering:
          blacklist:
          - 192.192.192.192
          - 192.192.192.192
          whitelist:
          - 192.192.192.192
          - 192.192.192.192
        mailerSettings:
          eu: true
          apiKey: a string value
          domain: a string value
          apiKeyPrivate: a string value
          header:
            key: value
          apiKeyPublic: a string value
          type: a string value
          url: a string value
        perIpThrottlingQuota: 123
        elasticWritesConfigs:
        - clusterUri: a string value
          headers:
            key: value
          password: a string value
          index: a string value
          type: a string value
          user: a string value
        - clusterUri: a string value
          headers:
            key: value
          password: a string value
          index: a string value
          type: a string value
          user: a string value
        lines:
        - a string value
        - a string value
        useCircuitBreakers: true
      properties:
        alertsEmails:
          description: Email addresses that will receive all Otoroshi alert events
          items:
            example: admin@otoroshi.io
            format: email
            type: string
          title: alertsEmails
          type: array
        alertsWebhooks:
          description: Webhook that will receive all Otoroshi alert events
          items:
            $ref: '#/components/schemas/Webhook'
          title: alertsWebhooks
          type: array
        analyticsWebhooks:
          description: Webhook that will receive all internal Otoroshi events
          items:
            $ref: '#/components/schemas/Webhook'
          title: analyticsWebhooks
          type: array
        apiReadOnly:
          description: "If enabled, Admin API won't be able to write/update/delete\
            \ entities"
          example: true
          title: apiReadOnly
          type: boolean
        autoLinkToDefaultGroup:
          description: "If not defined, every new service descriptor will be added\
            \ to the default group"
          example: true
          title: autoLinkToDefaultGroup
          type: boolean
        backofficeAuth0Config:
          $ref: '#/components/schemas/Auth0Config'
        cleverSettings:
          $ref: '#/components/schemas/CleverSettings'
        elasticReadsConfig:
          $ref: '#/components/schemas/ElasticConfig'
        elasticWritesConfigs:
          description: Configs. for Elastic writes
          items:
            $ref: '#/components/schemas/ElasticConfig'
          title: elasticWritesConfigs
          type: array
        endlessIpAddresses:
          description: IP addresses for which any request to Otoroshi will respond
            with 128 Gb of zeros
          items:
            example: 192.192.192.192
            format: ipv4
            type: string
          title: endlessIpAddresses
          type: array
        ipFiltering:
          $ref: '#/components/schemas/IpFiltering'
        limitConcurrentRequests:
          description: "If enabled, Otoroshi will reject new request if too much at\
            \ the same time"
          example: true
          title: limitConcurrentRequests
          type: boolean
        lines:
          description: Possibles lines for Otoroshi
          items:
            example: a string value
            type: string
          title: lines
          type: array
        mailerSettings:
          $ref: '#/components/schemas/MailerSettings'
        maxConcurrentRequests:
          description: The number of authorized request processed at the same time
          example: 123
          format: int64
          title: maxConcurrentRequests
          type: integer
        maxHttp10ResponseSize:
          description: The max size in bytes of an HTTP 1.0 response
          example: 123
          format: int64
          title: maxHttp10ResponseSize
          type: integer
        maxLogsSize:
          description: Number of events kept locally
          example: 123123
          format: int32
          title: maxLogsSize
          type: integer
        middleFingers:
          description: Use middle finger emoji as a response character for endless
            HTTP responses
          example: true
          title: middleFingers
          type: boolean
        perIpThrottlingQuota:
          description: "Authorized number of calls per second globally per IP address,\
            \ measured on 10 seconds"
          example: 123
          format: int64
          title: perIpThrottlingQuota
          type: integer
        privateAppsAuth0Config:
          $ref: '#/components/schemas/Auth0Config'
        streamEntityOnly:
          description: HTTP will be streamed only. Doesn't work with old browsers
          example: true
          title: streamEntityOnly
          type: boolean
        throttlingQuota:
          description: "Authorized number of calls per second globally, measured on\
            \ 10 seconds"
          example: 123
          format: int64
          title: throttlingQuota
          type: integer
        u2fLoginOnly:
          description: "If enabled, login to backoffice through Auth0 will be disabled"
          example: true
          title: u2fLoginOnly
          type: boolean
        useCircuitBreakers:
          description: "If enabled, services will be authorized to use circuit breakers"
          example: true
          title: useCircuitBreakers
          type: boolean
      required:
      - alertsEmails
      - alertsWebhooks
      - analyticsWebhooks
      - apiReadOnly
      - autoLinkToDefaultGroup
      - endlessIpAddresses
      - ipFiltering
      - limitConcurrentRequests
      - maxConcurrentRequests
      - perIpThrottlingQuota
      - streamEntityOnly
      - throttlingQuota
      - u2fLoginOnly
      - useCircuitBreakers
      title: GlobalConfig
      type: object
    GlobalJwtVerifier:
      description: A JWT verifier used by multiple service descriptor
      example:
        algoSettings:
          size: 123123
          secret: a string value
          type: a string value
        name: a string value
        id: a string value
        source:
          name: a string value
          type: a string value
        strategy:
          verificationSettings:
            mappingSettings:
              values:
                key: value
              map:
                key: value
              remove:
              - a string value
              - a string value
            fields:
              key: value
          type: a string value
        strict: true
        enabled: true
        desc: a string value
      properties:
        algoSettings:
          $ref: '#/components/schemas/GlobalJwtVerifier_algoSettings'
        desc:
          description: Verifier description
          example: a string value
          title: desc
          type: string
        enabled:
          description: Is it enabled
          example: true
          title: enabled
          type: boolean
        id:
          description: Verifier id
          example: a string value
          title: id
          type: string
        name:
          description: Verifier name
          example: a string value
          title: name
          type: string
        source:
          $ref: '#/components/schemas/GlobalJwtVerifier_source'
        strategy:
          $ref: '#/components/schemas/GlobalJwtVerifier_strategy'
        strict:
          description: Does it fail if JWT not found
          example: true
          title: strict
          type: boolean
      required:
      - algoSettings
      - desc
      - enabled
      - id
      - name
      - source
      - strategy
      - strict
      - type
      title: GlobalJwtVerifier
      type: object
    Group:
      description: An Otoroshi service group is just a group of service descriptor.
        It is useful to be able to define Api Keys for the whole group
      example:
        name: a string value
        description: a string value
        id: a string value
      properties:
        description:
          description: The descriptoin of the group
          example: a string value
          title: description
          type: string
        id:
          description: "The unique id of the group. Usually 64 random alpha numerical\
            \ characters, but can be anything"
          example: a string value
          title: id
          type: string
        name:
          description: The name of the group
          example: a string value
          title: name
          type: string
      required:
      - id
      - name
      title: Group
      type: object
    Gzip:
      description: Configuration for gzip of service responses
      example:
        excludedPatterns:
        - a string value
        - a string value
        blackList:
        - a string value
        - a string value
        whiteList:
        - a string value
        - a string value
        chunkedThreshold: 123
        compressionLevel: 123123
        enabled: true
        bufferSize: 123
      properties:
        blackList:
          description: Blacklisted mime types. Wildcard supported
          items:
            example: a string value
            type: string
          title: blackList
          type: array
        bufferSize:
          description: Size of the GZip buffer
          example: 123
          format: int64
          title: bufferSize
          type: integer
        chunkedThreshold:
          description: Threshold for chunking data
          example: 123
          format: int64
          title: chunkedThreshold
          type: integer
        compressionLevel:
          description: Compression level. From 0 to 9
          example: 123123
          format: int32
          title: compressionLevel
          type: integer
        enabled:
          description: Whether gzip compression is enabled or not
          example: true
          title: enabled
          type: boolean
        excludedPatterns:
          description: Patterns that are excluded from gzipping
          items:
            example: a string value
            type: string
          title: excludedPatterns
          type: array
        whiteList:
          description: Whitelisted mime types. Wildcard supported
          items:
            example: a string value
            type: string
          title: whiteList
          type: array
      required:
      - blackList
      - bufferSize
      - chunkedThreshold
      - compressionLevel
      - enabled
      - excludedPatterns
      - whiteList
      title: Gzip
      type: object
    HSAlgoSettings:
      description: Settings for an HMAC + SHA signing algorithm
      example:
        size: 123123
        secret: a string value
        type: a string value
      properties:
        secret:
          description: The secret value for the HMAC function
          example: a string value
          title: secret
          type: string
        size:
          description: "Size for SHA function. can be 256, 384 or 512"
          example: 123123
          format: int32
          title: size
          type: integer
        type:
          description: String with value HSAlgoSettings
          example: a string value
          title: type
          type: string
      required:
      - secret
      - size
      - type
      title: HSAlgoSettings
      type: object
    HealthCheck:
      description: The configuration for checking health of a service. Otoroshi will
        perform GET call on the URL to check if the service is still alive
      example:
        enabled: true
        url: http://www.google.com
      properties:
        enabled:
          description: Whether or not healthcheck is enabled on the current service
            descriptor
          example: true
          title: enabled
          type: boolean
        url:
          description: The URL to check
          example: http://www.google.com
          format: uri
          title: url
          type: string
      required:
      - enabled
      title: HealthCheck
      type: object
    ImportExport:
      description: The structure that can be imported to or exported from Otoroshi.
        It represent the memory state of Otoroshi
      example:
        date: 2017-07-21T17:32:28Z
        errorTemplates:
        - templateMaintenance: a string value
          templateBuild: a string value
          messages:
            key: value
          template50x: a string value
          template40x: a string value
          serviceId: a string value
        - templateMaintenance: a string value
          templateBuild: a string value
          messages:
            key: value
          template50x: a string value
          template40x: a string value
          serviceId: a string value
        serviceDescriptors:
        - metadata:
            key: value
          cors:
            excludedPatterns:
            - a string value
            - a string value
            allowMethods:
            - a string value
            - a string value
            allowHeaders:
            - a string value
            - a string value
            exposeHeaders:
            - a string value
            - a string value
            maxAge: 123123
            allowCredentials: true
            enabled: true
            allowOrigin: a string value
          forceHttps: true
          matchingRoot: a string value
          buildMode: true
          chaosConfig:
            badResponsesFaultConfig:
              responses:
              - headers:
                  key: value
                body: a string value
                status: 123123
              - headers:
                  key: value
                body: a string value
                status: 123123
              ratio: 42.2
            largeResponseFaultConfig:
              additionalRequestSize: 123123
              ratio: 42.2
            latencyInjectionFaultConfig:
              from: 123123
              to: 123123
              ratio: 42.2
            largeRequestFaultConfig:
              additionalRequestSize: 123123
              ratio: 42.2
            enabled: true
          secComSettings: null
          targets:
          - scheme: a string value
            host: www.google.com
          - scheme: a string value
            host: www.google.com
          enabled: true
          localHost: a string value
          root: a string value
          additionalHeaders:
            key: value
          api:
            exposeApi: true
            openApiDescriptorUrl: http://www.google.com
          id: 110e8400-e29b-11d4-a716-446655440000
          ipFiltering:
            blacklist:
            - 192.192.192.192
            - 192.192.192.192
            whitelist:
            - 192.192.192.192
            - 192.192.192.192
          sendOtoroshiHeadersBack: true
          redirection:
            code: 123123
            to: a string value
            enabled: true
          headersVerification:
            key: value
          redirectToLocal: true
          userFacing: true
          authConfigRef: a string value
          secComExcludedPatterns:
          - a string value
          - a string value
          xForwardedHeaders: true
          transformerRef: a string value
          Canary:
            root: a string value
            targets:
            - scheme: a string value
              host: www.google.com
            - scheme: a string value
              host: www.google.com
            enabled: true
            traffic: 123123
          groups:
          - a string value
          privatePatterns:
          - a string value
          - a string value
          gzip:
            excludedPatterns:
            - a string value
            - a string value
            blackList:
            - a string value
            - a string value
            whiteList:
            - a string value
            - a string value
            chunkedThreshold: 123
            compressionLevel: 123123
            enabled: true
            bufferSize: 123
          clientConfig:
            retries: 123123
            sampleInterval: 123123
            useCircuitBreaker: true
            backoffFactor: 123123
            maxErrors: 123123
            retryInitialDelay: 123123
            callTimeout: 123123
            globalTimeout: 123123
          env: a string value
          enforceSecureCommunication: true
          jwtVerifier:
            algoSettings:
              size: 123123
              secret: a string value
              type: a string value
            source:
              name: a string value
              type: a string value
            strategy:
              verificationSettings:
                mappingSettings:
                  values:
                    key: value
                  map:
                    key: value
                  remove:
                  - a string value
                  - a string value
                fields:
                  key: value
              type: a string value
            strict: true
            type: a string value
            enabled: true
          clientValidatorRef: a string value
          publicPatterns:
          - a string value
          - a string value
          localScheme: a string value
          privateApp: true
          domain: a string value
          healthCheck:
            enabled: true
            url: http://www.google.com
          name: a string value
          statsdConfig:
            port: 123123
            datadog: true
            host: a string value
          matchingHeaders:
            key: value
          subdomain: a string value
          overrideHost: true
          maintenanceMode: true
        - metadata:
            key: value
          cors:
            excludedPatterns:
            - a string value
            - a string value
            allowMethods:
            - a string value
            - a string value
            allowHeaders:
            - a string value
            - a string value
            exposeHeaders:
            - a string value
            - a string value
            maxAge: 123123
            allowCredentials: true
            enabled: true
            allowOrigin: a string value
          forceHttps: true
          matchingRoot: a string value
          buildMode: true
          chaosConfig:
            badResponsesFaultConfig:
              responses:
              - headers:
                  key: value
                body: a string value
                status: 123123
              - headers:
                  key: value
                body: a string value
                status: 123123
              ratio: 42.2
            largeResponseFaultConfig:
              additionalRequestSize: 123123
              ratio: 42.2
            latencyInjectionFaultConfig:
              from: 123123
              to: 123123
              ratio: 42.2
            largeRequestFaultConfig:
              additionalRequestSize: 123123
              ratio: 42.2
            enabled: true
          secComSettings: null
          targets:
          - scheme: a string value
            host: www.google.com
          - scheme: a string value
            host: www.google.com
          enabled: true
          localHost: a string value
          root: a string value
          additionalHeaders:
            key: value
          api:
            exposeApi: true
            openApiDescriptorUrl: http://www.google.com
          id: 110e8400-e29b-11d4-a716-446655440000
          ipFiltering:
            blacklist:
            - 192.192.192.192
            - 192.192.192.192
            whitelist:
            - 192.192.192.192
            - 192.192.192.192
          sendOtoroshiHeadersBack: true
          redirection:
            code: 123123
            to: a string value
            enabled: true
          headersVerification:
            key: value
          redirectToLocal: true
          userFacing: true
          authConfigRef: a string value
          secComExcludedPatterns:
          - a string value
          - a string value
          xForwardedHeaders: true
          transformerRef: a string value
          Canary:
            root: a string value
            targets:
            - scheme: a string value
              host: www.google.com
            - scheme: a string value
              host: www.google.com
            enabled: true
            traffic: 123123
          groups:
          - a string value
          privatePatterns:
          - a string value
          - a string value
          gzip:
            excludedPatterns:
            - a string value
            - a string value
            blackList:
            - a string value
            - a string value
            whiteList:
            - a string value
            - a string value
            chunkedThreshold: 123
            compressionLevel: 123123
            enabled: true
            bufferSize: 123
          clientConfig:
            retries: 123123
            sampleInterval: 123123
            useCircuitBreaker: true
            backoffFactor: 123123
            maxErrors: 123123
            retryInitialDelay: 123123
            callTimeout: 123123
            globalTimeout: 123123
          env: a string value
          enforceSecureCommunication: true
          jwtVerifier:
            algoSettings:
              size: 123123
              secret: a string value
              type: a string value
            source:
              name: a string value
              type: a string value
            strategy:
              verificationSettings:
                mappingSettings:
                  values:
                    key: value
                  map:
                    key: value
                  remove:
                  - a string value
                  - a string value
                fields:
                  key: value
              type: a string value
            strict: true
            type: a string value
            enabled: true
          clientValidatorRef: a string value
          publicPatterns:
          - a string value
          - a string value
          localScheme: a string value
          privateApp: true
          domain: a string value
          healthCheck:
            enabled: true
            url: http://www.google.com
          name: a string value
          statsdConfig:
            port: 123123
            datadog: true
            host: a string value
          matchingHeaders:
            key: value
          subdomain: a string value
          overrideHost: true
          maintenanceMode: true
        appConfig:
          key: value
        simpleAdmins:
        - createdAt: 123
          password: a string value
          label: a string value
          username: a string value
        - createdAt: 123
          password: a string value
          label: a string value
          username: a string value
        stats:
          dataOut: 123
          calls: 123
          dataIn: 123
        apiKeys:
        - metadata:
            key: value
          clientId: a string value
          monthlyQuota: 123
          throttlingQuota: 123
          clientName: a string value
          authorizedEntities:
          - a string value
          clientSecret: a string value
          dailyQuota: 123
          enabled: true
        - metadata:
            key: value
          clientId: a string value
          monthlyQuota: 123
          throttlingQuota: 123
          clientName: a string value
          authorizedEntities:
          - a string value
          clientSecret: a string value
          dailyQuota: 123
          enabled: true
        serviceGroups:
        - name: a string value
          description: a string value
          id: a string value
        - name: a string value
          description: a string value
          id: a string value
        label: a string value
        config:
          maxLogsSize: 123123
          apiReadOnly: true
          analyticsWebhooks:
          - headers:
              key: value
            url: http://www.google.com
          - headers:
              key: value
            url: http://www.google.com
          elasticReadsConfig:
            clusterUri: a string value
            headers:
              key: value
            password: a string value
            index: a string value
            type: a string value
            user: a string value
          limitConcurrentRequests: true
          maxConcurrentRequests: 123
          endlessIpAddresses:
          - 192.192.192.192
          - 192.192.192.192
          maxHttp10ResponseSize: 123
          streamEntityOnly: true
          backofficeAuth0Config:
            clientId: a string value
            domain: a string value
            callbackUrl: a string value
            clientSecret: a string value
          alertsEmails:
          - admin@otoroshi.io
          - admin@otoroshi.io
          autoLinkToDefaultGroup: true
          alertsWebhooks:
          - headers:
              key: value
            url: http://www.google.com
          - headers:
              key: value
            url: http://www.google.com
          middleFingers: true
          privateAppsAuth0Config:
            clientId: a string value
            domain: a string value
            callbackUrl: a string value
            clientSecret: a string value
          throttlingQuota: 123
          cleverSettings:
            consumerSecret: a string value
            orgaId: a string value
            secret: a string value
            consumerKey: a string value
            token: a string value
          u2fLoginOnly: true
          ipFiltering:
            blacklist:
            - 192.192.192.192
            - 192.192.192.192
            whitelist:
            - 192.192.192.192
            - 192.192.192.192
          mailerSettings:
            eu: true
            apiKey: a string value
            domain: a string value
            apiKeyPrivate: a string value
            header:
              key: value
            apiKeyPublic: a string value
            type: a string value
            url: a string value
          perIpThrottlingQuota: 123
          elasticWritesConfigs:
          - clusterUri: a string value
            headers:
              key: value
            password: a string value
            index: a string value
            type: a string value
            user: a string value
          - clusterUri: a string value
            headers:
              key: value
            password: a string value
            index: a string value
            type: a string value
            user: a string value
          lines:
          - a string value
          - a string value
          useCircuitBreakers: true
        dateRaw: 123
        admins:
        - createdAt: 123
          password: a string value
          registration:
            key: value
          label: a string value
          username: a string value
        - createdAt: 123
          password: a string value
          registration:
            key: value
          label: a string value
          username: a string value
      properties:
        admins:
          description: Current U2F admin at the time of export
          items:
            $ref: '#/components/schemas/ImportExport_admins_inner'
          title: admins
          type: array
        apiKeys:
          description: Current apik keys at the time of export
          items:
            $ref: '#/components/schemas/ImportExport_apiKeys_inner'
          title: apiKeys
          type: array
        appConfig:
          additionalProperties:
            type: string
          description: Current env variables at the time of export
          example:
            key: value
          title: appConfig
          type: object
        config:
          $ref: '#/components/schemas/GlobalConfig'
        date:
          example: 2017-07-21T17:32:28Z
          format: date-time
          title: date
          type: string
        dateRaw:
          example: 123
          format: int64
          title: dateRaw
          type: integer
        errorTemplates:
          description: Current error templates at the time of export
          items:
            $ref: '#/components/schemas/ImportExport_errorTemplates_inner'
          title: errorTemplates
          type: array
        label:
          example: a string value
          title: label
          type: string
        serviceDescriptors:
          description: Current service descriptors at the time of export
          items:
            $ref: '#/components/schemas/ImportExport_serviceDescriptors_inner'
          title: serviceDescriptors
          type: array
        serviceGroups:
          description: Current service groups at the time of export
          items:
            $ref: '#/components/schemas/ImportExport_serviceGroups_inner'
          title: serviceGroups
          type: array
        simpleAdmins:
          description: Current simple admins at the time of export
          items:
            $ref: '#/components/schemas/ImportExport_simpleAdmins_inner'
          title: simpleAdmins
          type: array
        stats:
          $ref: '#/components/schemas/ImportExportStats'
      required:
      - admins
      - apiKeys
      - config
      - date
      - dateRaw
      - errorTemplates
      - label
      - serviceDescriptors
      - serviceGroups
      - simpleAdmins
      - stats
      title: ImportExport
      type: object
    ImportExportStats:
      description: Global stats for the current Otoroshi instances
      example:
        dataOut: 123
        calls: 123
        dataIn: 123
      properties:
        calls:
          description: Number of calls to Otoroshi globally
          example: 123
          format: int64
          title: calls
          type: integer
        dataIn:
          description: The amount of data sent to Otoroshi globally
          example: 123
          format: int64
          title: dataIn
          type: integer
        dataOut:
          description: The amount of data sent from Otoroshi globally
          example: 123
          format: int64
          title: dataOut
          type: integer
      required:
      - calls
      - dataIn
      - dataOut
      title: ImportExportStats
      type: object
    InCookie:
      description: JWT location in a cookie
      properties:
        name:
          description: Name of the cookie
          example: a string value
          title: name
          type: string
        type:
          description: String with value InCookie
          example: a string value
          title: type
          type: string
      required:
      - name
      - type
      title: InCookie
      type: object
    InHeader:
      description: JWT location in a header
      properties:
        name:
          description: Name of the header
          example: a string value
          title: name
          type: string
        remove:
          description: "Remove regex inside the value, like 'Bearer '"
          example: a string value
          title: remove
          type: string
        type:
          description: String with value InHeader
          example: a string value
          title: type
          type: string
      required:
      - name
      - remove
      - type
      title: InHeader
      type: object
    InMemoryAuthModuleConfig:
      description: Settings to authenticate users using the in memory user store
      properties:
        desc:
          description: Description of the config
          example: a string value
          title: desc
          type: string
        id:
          description: Unique id of the config
          example: a string value
          title: id
          type: string
        name:
          description: Name of the config
          example: a string value
          title: name
          type: string
        sessionMaxAge:
          description: Max age of the session
          example: a string value
          title: sessionMaxAge
          type: string
        type:
          description: Type of settings. value is basic
          example: a string value
          title: type
          type: string
        users:
          description: List of users
          items:
            $ref: '#/components/schemas/InMemoryUser'
          title: users
          type: array
      required:
      - desc
      - id
      - name
      - sessionMaxAge
      - type
      - users
      title: InMemoryAuthModuleConfig
      type: object
    InMemoryUser:
      description: A user
      properties:
        email:
          description: Email of the user
          example: a string value
          title: email
          type: string
        metadata:
          additionalProperties:
            type: string
          description: Metadata of the user
          example:
            key: value
          title: metadata
          type: object
        name:
          description: Name of the user
          example: a string value
          title: name
          type: string
        password:
          description: Password of the user (BCrypt hash)
          example: a string value
          title: password
          type: string
      required:
      - email
      - metadata
      - name
      - password
      title: InMemoryUser
      type: object
    InQueryParam:
      description: JWT location in a query param
      example:
        name: a string value
        type: a string value
      properties:
        name:
          description: Name of the query param
          example: a string value
          title: name
          type: string
        type:
          description: String with value InQueryParam
          example: a string value
          title: type
          type: string
      required:
      - name
      - type
      title: InQueryParam
      type: object
    IpFiltering:
      description: The filtering configuration block for a service of globally.
      example:
        blacklist:
        - 192.192.192.192
        - 192.192.192.192
        whitelist:
        - 192.192.192.192
        - 192.192.192.192
      properties:
        blacklist:
          description: Blacklisted IP addresses
          items:
            example: 192.192.192.192
            format: ipv4
            type: string
          title: blacklist
          type: array
        whitelist:
          description: Whitelisted IP addresses
          items:
            example: 192.192.192.192
            format: ipv4
            type: string
          title: whitelist
          type: array
      required:
      - blacklist
      - whitelist
      title: IpFiltering
      type: object
    JWKSAlgoSettings:
      description: Settings for a JWK set
      properties:
        headers:
          additionalProperties:
            type: string
          description: The headers for the http call
          example:
            key: value
          title: headers
          type: object
        kty:
          description: "The type of key: RSA or EC"
          example: a string value
          title: kty
          type: string
        timeout:
          description: The timeout of the http call
          example: 123
          format: int64
          title: timeout
          type: integer
        ttl:
          description: The ttl of the keyset
          example: 123
          format: int64
          title: ttl
          type: integer
        type:
          description: String with value JWKSAlgoSettings
          example: a string value
          title: type
          type: string
        url:
          description: The url for the http call
          example: a string value
          title: url
          type: string
      required:
      - publicKey
      - size
      - type
      title: JWKSAlgoSettings
      type: object
    KafkaConfig:
      description: The configuration for kafka access
      properties:
        keyPass:
          description: Optional keypass
          example: a string value
          title: keyPass
          type: string
        keyStore:
          description: Optional path to keystore
          example: a string value
          title: keyStore
          type: string
        servers:
          description: URLs of the kafka servers
          items:
            example: a string value
            type: string
          title: servers
          type: array
        topic:
          description: Optional kafka topic (otoroshi-events by default)
          example: a string value
          title: topic
          type: string
        trustore:
          description: Optional path to trustore
          example: a string value
          title: trustore
          type: string
      required:
      - servers
      title: KafkaConfig
      type: object
    LargeRequestFaultConfig:
      description: Config for large request injection fault
      example:
        additionalRequestSize: 123123
        ratio: 42.2
      properties:
        additionalRequestSize:
          description: The size added to the request body in bytes. Added payload
            will be spaces only.
          example: 123123
          format: int32
          title: additionalRequestSize
          type: integer
        ratio:
          description: The percentage of requests affected by this fault. Value should
            be between 0.0 and 1.0
          example: 42.2
          format: double
          title: ratio
          type: number
      required:
      - additionalRequestSize
      - ratio
      title: LargeRequestFaultConfig
      type: object
    LargeResponseFaultConfig:
      description: Config for large response injection fault
      example:
        additionalRequestSize: 123123
        ratio: 42.2
      properties:
        additionalRequestSize:
          description: The size added to the response body in bytes. Added payload
            will be spaces only.
          example: 123123
          format: int32
          title: additionalRequestSize
          type: integer
        ratio:
          description: The percentage of requests affected by this fault. Value should
            be between 0.0 and 1.0
          example: 42.2
          format: double
          title: ratio
          type: number
      required:
      - additionalResponseSize
      - ratio
      title: LargeResponseFaultConfig
      type: object
    LatencyInjectionFaultConfig:
      description: Config for large latency injection fault
      example:
        from: 123123
        to: 123123
        ratio: 42.2
      properties:
        from:
          description: The start range of latency added to the request
          example: 123123
          format: int32
          title: from
          type: integer
        ratio:
          description: The percentage of requests affected by this fault. Value should
            be between 0.0 and 1.0
          example: 42.2
          format: double
          title: ratio
          type: number
        to:
          description: The end range of latency added to the request
          example: 123123
          format: int32
          title: to
          type: integer
      required:
      - from
      - ratio
      - to
      title: LatencyInjectionFaultConfig
      type: object
    LdapAuthModuleConfig:
      description: Settings to authenticate users using a generic OAuth2 provider
      example:
        groupFilter: a string value
        searchBase: a string value
        nameField: a string value
        userBase: a string value
        emailField: a string value
        otoroshiDataField: a string value
        type: a string value
        adminUsername: a string value
        sessionMaxAge: 123123
        serverUrl: a string value
        name: a string value
        id: a string value
        adminPassword: a string value
        desc: a string value
        searchFilter: a string value
      properties:
        adminPassword:
          description: The admin password
          example: a string value
          title: adminPassword
          type: string
        adminUsername:
          description: The admin username
          example: a string value
          title: adminUsername
          type: string
        desc:
          description: Description of the config
          example: a string value
          title: desc
          type: string
        emailField:
          description: Field name to get email from user profile
          example: a string value
          title: emailField
          type: string
        groupFilter:
          description: Filter for groups
          example: a string value
          title: groupFilter
          type: string
        id:
          description: Unique id of the config
          example: a string value
          title: id
          type: string
        name:
          description: Name of the config
          example: a string value
          title: name
          type: string
        nameField:
          description: Field name to get name from user profile
          example: a string value
          title: nameField
          type: string
        otoroshiDataField:
          description: Field name to get otoroshi metadata from. You can specify sub
            fields using | as separator
          example: a string value
          title: otoroshiDataField
          type: string
        searchBase:
          description: LDAP search base
          example: a string value
          title: searchBase
          type: string
        searchFilter:
          description: Filter for users
          example: a string value
          title: searchFilter
          type: string
        serverUrl:
          description: URL of the ldap server
          example: a string value
          title: serverUrl
          type: string
        sessionMaxAge:
          description: Max age of the session
          example: 123123
          format: int32
          title: sessionMaxAge
          type: integer
        type:
          description: Type of settings. value is ldap
          example: a string value
          title: type
          type: string
        userBase:
          description: LDAP user base DN
          example: a string value
          title: userBase
          type: string
      required:
      - adminPassword
      - adminUsername
      - desc
      - emailField
      - groupFilter
      - id
      - metadataField
      - name
      - nameField
      - searchBase
      - searchFilter
      - serverUrl
      - sessionMaxAge
      - type
      - userBase
      title: LdapAuthModuleConfig
      type: object
    LdapUser:
      description: A user
      properties:
        email:
          description: Email of the user
          example: a string value
          type: string
        metadata:
          additionalProperties:
            type: string
          description: Metadata of the user
          example:
            key: value
          type: object
        name:
          description: Name of the user
          example: a string value
          type: string
      required:
      - email
      - metadata
      - name
      type: object
    LocalJwtVerifier:
      description: A JWT verifier used only for the current service descriptor
      example:
        algoSettings:
          size: 123123
          secret: a string value
          type: a string value
        source:
          name: a string value
          type: a string value
        strategy:
          verificationSettings:
            mappingSettings:
              values:
                key: value
              map:
                key: value
              remove:
              - a string value
              - a string value
            fields:
              key: value
          type: a string value
        strict: true
        type: a string value
        enabled: true
      properties:
        algoSettings:
          $ref: '#/components/schemas/GlobalJwtVerifier_algoSettings'
        enabled:
          description: Is it enabled
          example: true
          title: enabled
          type: boolean
        source:
          $ref: '#/components/schemas/GlobalJwtVerifier_source'
        strategy:
          $ref: '#/components/schemas/GlobalJwtVerifier_strategy'
        strict:
          description: Does it fail if JWT not found
          example: true
          title: strict
          type: boolean
        type:
          description: A string with value 'local'
          example: a string value
          title: type
          type: string
      required:
      - algoSettings
      - enabled
      - source
      - strategy
      - strict
      - type
      title: LocalJwtVerifier
      type: object
    Location:
      example:
        teams:
        - key: value
        - key: value
        tenant: a string value
      properties:
        teams:
          description: Team ids
          items:
            additionalProperties:
              type: string
            example:
              key: value
            type: object
          title: teams
          type: array
        tenant:
          description: Tenant id
          example: a string value
          title: tenant
          type: string
      required:
      - teams
      - tenant
      title: Location
      type: object
    MailerConsoleExporterConfig:
      properties:
        type:
          description: Type of mailer
          enum:
          - generic
          title: type
          type: string
      title: MailerConsoleExporterConfig
      type: object
    MailerGenericExporterConfig:
      properties:
        headers:
          additionalProperties:
            type: string
          description: Optional headers
          example:
            key: value
          title: headers
          type: object
        to:
          description: Email adresses of recipents
          items:
            example: a string value
            type: string
          title: to
          type: array
        type:
          description: Type of mailer
          enum:
          - generic
          title: type
          type: string
        url:
          description: Url of mailer
          example: a string value
          title: url
          type: string
      required:
      - type
      title: MailerGenericExporterConfig
      type: object
    MailerMailgunExporterConfig:
      properties:
        apiKey:
          description: Mailgun apiKey
          example: a string value
          title: apiKey
          type: string
        domain:
          description: Mailgun domain
          example: a string value
          title: domain
          type: string
        eu:
          description: Whether the mailgun server is european
          example: true
          title: eu
          type: boolean
        to:
          description: Email adresses of recipents
          items:
            example: admin@otoroshi.io
            format: email
            type: string
          title: to
          type: array
        type:
          description: Type of mailer
          enum:
          - mailgun
          title: type
          type: string
      required:
      - type
      title: MailerMailgunExporterConfig
      type: object
    MailerMailjetExporterConfig:
      properties:
        apiKeyPrivate:
          description: Mailjet private apiKey
          example: a string value
          title: apiKeyPrivate
          type: string
        apiKeyPublic:
          description: Mailjet public apiKey
          example: a string value
          title: apiKeyPublic
          type: string
        to:
          description: Email adresses of recipents
          items:
            example: admin@otoroshi.io
            format: email
            type: string
          title: to
          type: array
        type:
          description: Type of mailer
          enum:
          - mailjet
          title: type
          type: string
      required:
      - type
      title: MailerMailjetExporterConfig
      type: object
    MailerSendgridExporterConfig:
      properties:
        apiKeyPublic:
          description: Sendgrid apiKey
          example: a string value
          title: apiKeyPublic
          type: string
        to:
          description: Email adresses of recipents
          items:
            example: admin@otoroshi.io
            format: email
            type: string
          title: to
          type: array
        type:
          description: Type of mailer
          enum:
          - sendgrid
          title: type
          type: string
      required:
      - type
      title: MailerSendgridExporterConfig
      type: object
    MailerSettings:
      description: Configuration for mailgun api client
      example:
        eu: true
        apiKey: a string value
        domain: a string value
        apiKeyPrivate: a string value
        header:
          key: value
        apiKeyPublic: a string value
        type: a string value
        url: a string value
      properties:
        apiKey:
          description: Mailgun mailer api key
          example: a string value
          title: apiKey
          type: string
        apiKeyPrivate:
          description: Mailjet mailer private api key
          example: a string value
          title: apiKeyPrivate
          type: string
        apiKeyPublic:
          description: Mailjet mailer public api key
          example: a string value
          title: apiKeyPublic
          type: string
        domain:
          description: Mailgun mailer domain
          example: a string value
          title: domain
          type: string
        eu:
          description: "Mailgun mailer, use EU tenant api"
          example: true
          title: eu
          type: boolean
        header:
          additionalProperties:
            type: string
          description: Generic mailer headers
          example:
            key: value
          title: header
          type: object
        type:
          description: "Type of the mailer: console, generic, mailgun, mailjet"
          example: a string value
          title: type
          type: string
        url:
          description: Generic mailer url
          example: a string value
          title: url
          type: string
      required:
      - apiKey
      - domain
      title: MailerSettings
      type: object
    MappingSettings:
      description: Settings to change fields of a JWT token
      example:
        values:
          key: value
        map:
          key: value
        remove:
        - a string value
        - a string value
      properties:
        map:
          additionalProperties:
            type: string
          description: Fields to rename
          example:
            key: value
          title: map
          type: object
        remove:
          description: Fields to remove
          items:
            example: a string value
            type: string
          title: remove
          type: array
        values:
          additionalProperties:
            type: string
          description: Fields to set
          example:
            key: value
          title: values
          type: object
      required:
      - map
      - remove
      - values
      title: MappingSettings
      type: object
    OtoroshiHealth:
      description: The structure that represent current Otoroshi health
      example:
        otoroshi: healthy
        datastore: healthy
      properties:
        datastore:
          enum:
          - healthy
          - unhealthy
          - unreachable
          title: datastore
          type: string
        otoroshi:
          enum:
          - healthy
          - unhealthy
          - down
          title: otoroshi
          type: string
      required:
      - datastore
      - label
      - otoroshi
      title: OtoroshiHealth
      type: object
    Outage:
      description: An outage by the Snow Monkey on a service
      example:
        duration: 123123
        descriptorId: a string value
        until: "63148.0"
        descriptorName: a string value
      properties:
        descriptorId:
          description: The service impacted by outage
          example: a string value
          title: descriptorId
          type: string
        descriptorName:
          description: The name of service impacted by outage
          example: a string value
          title: descriptorName
          type: string
        duration:
          description: The duration of the outage
          example: 123123
          format: int32
          title: duration
          type: integer
        until:
          description: The end of the outage
          example: "63148.0"
          format: time
          title: until
          type: string
      required:
      - descriptorId
      - descriptorName
      - duration
      - until
      title: Outage
      type: object
    OutageStrategy:
      enum:
      - OneServicePerGroup
      - AllServicesPerGroup
      title: OutageStrategy
      type: string
    PassThrough:
      description: Strategy where only signature and field values are verified
      example:
        verificationSettings:
          mappingSettings:
            values:
              key: value
            map:
              key: value
            remove:
            - a string value
            - a string value
          fields:
            key: value
        type: a string value
      properties:
        type:
          description: String with value PassThrough
          example: a string value
          title: type
          type: string
        verificationSettings:
          $ref: '#/components/schemas/VerificationSettings'
      required:
      - type
      - verificationSettings
      title: PassThrough
      type: object
    Patch:
      description: "A set of changes described in JSON Patch format: http://jsonpatch.com/\
        \ (RFC 6902)"
      items:
        $ref: '#/components/schemas/Patch_inner'
      type: array
    PulsarDataExporterConfig:
      description: The configuration for kafka access
      properties:
        namespace:
          description: Namespace
          example: a string value
          title: namespace
          type: string
        tenant:
          description: Tenant
          example: a string value
          title: tenant
          type: string
        topic:
          description: Topic
          example: a string value
          title: topic
          type: string
        uri:
          description: URI of the pulsar server
          items:
            example: a string value
            type: string
          title: uri
          type: array
      required:
      - namespace
      - tenant
      - topic
      - uri
      title: PulsarDataExporterConfig
      type: object
    Quotas:
      description: Quotas state for an api key on a service group
      example:
        remainingCallsPerDay: 123
        authorizedCallsPerMonth: 123
        currentCallsPerSec: 123
        authorizedCallsPerSec: 123
        remainingCallsPerMonth: 123
        remainingCallsPerSec: 123
        authorizedCallsPerDay: 123
        currentCallsPerDay: 123
        currentCallsPerMonth: 123
      properties:
        authorizedCallsPerDay:
          description: The number of authorized calls per day
          example: 123
          format: int64
          title: authorizedCallsPerDay
          type: integer
        authorizedCallsPerMonth:
          description: The number of authorized calls per month
          example: 123
          format: int64
          title: authorizedCallsPerMonth
          type: integer
        authorizedCallsPerSec:
          description: The number of authorized calls per second
          example: 123
          format: int64
          title: authorizedCallsPerSec
          type: integer
        currentCallsPerDay:
          description: The current number of calls per day
          example: 123
          format: int64
          title: currentCallsPerDay
          type: integer
        currentCallsPerMonth:
          description: The current number of calls per month
          example: 123
          format: int64
          title: currentCallsPerMonth
          type: integer
        currentCallsPerSec:
          description: The current number of calls per second
          example: 123
          format: int64
          title: currentCallsPerSec
          type: integer
        remainingCallsPerDay:
          description: The remaining number of calls per day
          example: 123
          format: int64
          title: remainingCallsPerDay
          type: integer
        remainingCallsPerMonth:
          description: The number of authorized calls per month
          example: 123
          format: int64
          title: remainingCallsPerMonth
          type: integer
        remainingCallsPerSec:
          description: The remaining number of calls per second
          example: 123
          format: int64
          title: remainingCallsPerSec
          type: integer
      required:
      - authorizedCallsPerDay
      - authorizedCallsPerMonth
      - authorizedCallsPerSec
      - currentCallsPerDay
      - currentCallsPerMonth
      - currentCallsPerSec
      - remainingCallsPerDay
      - remainingCallsPerMonth
      - remainingCallsPerSec
      title: Quotas
      type: object
    RSAlgoSettings:
      description: Settings for an HMAC + SHA signing algorithm
      properties:
        privateKey:
          description: The private key for the RSA function
          example: a string value
          title: privateKey
          type: string
        publicKey:
          description: The public key for the RSA function
          example: a string value
          title: publicKey
          type: string
        size:
          description: "Size for SHA function. can be 256, 384 or 512"
          example: 123123
          format: int32
          title: size
          type: integer
        type:
          description: String with value RSAlgoSettings
          example: a string value
          title: type
          type: string
      required:
      - publicKey
      - size
      - type
      title: RSAlgoSettings
      type: object
    RedirectionSettings:
      description: The configuration for redirection per service
      example:
        code: 123123
        to: a string value
        enabled: true
      properties:
        code:
          description: The http redirect code
          example: 123123
          format: int32
          title: code
          type: integer
        enabled:
          description: Whether or not redirection is enabled
          example: true
          title: enabled
          type: boolean
        to:
          description: The location for redirection
          example: a string value
          title: to
          type: string
      required:
      - code
      - enabled
      - to
      title: RedirectionSettings
      type: object
    RefJwtVerifier:
      description: Reference to a global JWT verifier
      properties:
        enabled:
          description: Is it enabled
          example: true
          title: enabled
          type: boolean
        id:
          description: The id of the GlobalJWTVerifier
          example: a string value
          title: id
          type: string
        type:
          description: A string with value 'ref'
          example: a string value
          title: type
          type: string
      required:
      - enabled
      - id
      - type
      title: RefJwtVerifier
      type: object
    Script:
      description: 'A script to transformer otoroshi requests '
      example:
        code:
          key: value
        name: a string value
        id: a string value
        desc:
          key: value
      properties:
        code:
          additionalProperties:
            type: string
          description: The code of the script
          example:
            key: value
          title: code
          type: object
        desc:
          additionalProperties:
            type: string
          description: The description of the script
          example:
            key: value
          title: desc
          type: object
        id:
          description: The id of the script
          example: a string value
          title: id
          type: string
        name:
          description: The name of the script
          example: a string value
          title: name
          type: string
      required:
      - code
      - desc
      - id
      - name
      title: Script
      type: object
    ScriptCompilationError:
      description: The error of the compilation of a Script
      example:
        file:
          key: value
        line: a string value
        column: a string value
        message:
          key: value
        rawMessage:
          key: value
      properties:
        column:
          description: The column of the error
          example: a string value
          title: column
          type: string
        file:
          additionalProperties:
            type: string
          description: The file where the error is located
          example:
            key: value
          title: file
          type: object
        line:
          description: The line of the error
          example: a string value
          title: line
          type: string
        message:
          additionalProperties:
            type: string
          description: The message to display for the error
          example:
            key: value
          title: message
          type: object
        rawMessage:
          additionalProperties:
            type: string
          description: The raw message from the compiler
          example:
            key: value
          title: rawMessage
          type: object
      required:
      - column
      - file
      - line
      - message
      - rawMessage
      title: ScriptCompilationError
      type: object
    ScriptCompilationResult:
      description: The result of the compilation of a Script
      example:
        error:
          file:
            key: value
          line: a string value
          column: a string value
          message:
            key: value
          rawMessage:
            key: value
        done: true
      properties:
        done:
          description: Is the task done or not
          example: true
          title: done
          type: boolean
        error:
          $ref: '#/components/schemas/ScriptCompilationError'
      required:
      - done
      title: ScriptCompilationResult
      type: object
    Service:
      description: An otoroshi service descriptor. Represent a forward HTTP call on
        a domain to another location with some optional api management mecanism
      example:
        metadata:
          key: value
        cors:
          excludedPatterns:
          - a string value
          - a string value
          allowMethods:
          - a string value
          - a string value
          allowHeaders:
          - a string value
          - a string value
          exposeHeaders:
          - a string value
          - a string value
          maxAge: 123123
          allowCredentials: true
          enabled: true
          allowOrigin: a string value
        forceHttps: true
        matchingRoot: a string value
        buildMode: true
        chaosConfig:
          badResponsesFaultConfig:
            responses:
            - headers:
                key: value
              body: a string value
              status: 123123
            - headers:
                key: value
              body: a string value
              status: 123123
            ratio: 42.2
          largeResponseFaultConfig:
            additionalRequestSize: 123123
            ratio: 42.2
          latencyInjectionFaultConfig:
            from: 123123
            to: 123123
            ratio: 42.2
          largeRequestFaultConfig:
            additionalRequestSize: 123123
            ratio: 42.2
          enabled: true
        secComSettings:
          size: 123123
          secret: a string value
          type: a string value
        targets:
        - scheme: a string value
          host: www.google.com
        - scheme: a string value
          host: www.google.com
        enabled: true
        localHost: a string value
        root: a string value
        additionalHeaders:
          key: value
        api:
          exposeApi: true
          openApiDescriptorUrl: http://www.google.com
        id: 110e8400-e29b-11d4-a716-446655440000
        ipFiltering:
          blacklist:
          - 192.192.192.192
          - 192.192.192.192
          whitelist:
          - 192.192.192.192
          - 192.192.192.192
        sendOtoroshiHeadersBack: true
        redirection:
          code: 123123
          to: a string value
          enabled: true
        headersVerification:
          key: value
        redirectToLocal: true
        userFacing: true
        authConfigRef: a string value
        secComExcludedPatterns:
        - a string value
        - a string value
        xForwardedHeaders: true
        transformerRef: a string value
        Canary:
          root: a string value
          targets:
          - scheme: a string value
            host: www.google.com
          - scheme: a string value
            host: www.google.com
          enabled: true
          traffic: 123123
        groups:
        - a string value
        privatePatterns:
        - a string value
        - a string value
        gzip:
          excludedPatterns:
          - a string value
          - a string value
          blackList:
          - a string value
          - a string value
          whiteList:
          - a string value
          - a string value
          chunkedThreshold: 123
          compressionLevel: 123123
          enabled: true
          bufferSize: 123
        clientConfig:
          retries: 123123
          sampleInterval: 123123
          useCircuitBreaker: true
          backoffFactor: 123123
          maxErrors: 123123
          retryInitialDelay: 123123
          callTimeout: 123123
          globalTimeout: 123123
        env: a string value
        enforceSecureCommunication: true
        jwtVerifier:
          algoSettings:
            size: 123123
            secret: a string value
            type: a string value
          source:
            name: a string value
            type: a string value
          strategy:
            verificationSettings:
              mappingSettings:
                values:
                  key: value
                map:
                  key: value
                remove:
                - a string value
                - a string value
              fields:
                key: value
            type: a string value
          strict: true
          type: a string value
          enabled: true
        clientValidatorRef: a string value
        publicPatterns:
        - a string value
        - a string value
        localScheme: a string value
        privateApp: true
        domain: a string value
        healthCheck:
          enabled: true
          url: http://www.google.com
        name: a string value
        statsdConfig:
          port: 123123
          datadog: true
          host: a string value
        matchingHeaders:
          key: value
        subdomain: a string value
        overrideHost: true
        maintenanceMode: true
      properties:
        Canary:
          $ref: '#/components/schemas/Canary'
        additionalHeaders:
          additionalProperties:
            type: string
          description: Specify headers that will be added to each client request.
            Useful to add authentication
          example:
            key: value
          title: additionalHeaders
          type: object
        api:
          $ref: '#/components/schemas/ExposedApi'
        authConfigRef:
          description: A reference to a global auth module config
          example: a string value
          title: authConfigRef
          type: string
        buildMode:
          description: Display a construction page when a user try to use the service
          example: true
          title: buildMode
          type: boolean
        chaosConfig:
          $ref: '#/components/schemas/ChaosConfig'
        clientConfig:
          $ref: '#/components/schemas/ClientConfig'
        clientValidatorRef:
          description: A reference to validation authority
          example: a string value
          title: clientValidatorRef
          type: string
        cors:
          $ref: '#/components/schemas/CorsSettings'
        domain:
          description: The domain on which the service is available.
          example: a string value
          title: domain
          type: string
        enabled:
          description: "Activate or deactivate your service. Once disabled, users\
            \ will get an error page saying the service does not exist"
          example: true
          title: enabled
          type: boolean
        enforceSecureCommunication:
          description: "When enabled, Otoroshi will try to exchange headers with downstream\
            \ service to ensure no one else can use the service from outside"
          example: true
          title: enforceSecureCommunication
          type: boolean
        env:
          description: "The line on which the service is available. Based on that\
            \ value, the name of the line will be appended to the subdomain. For line\
            \ prod, nothing will be appended. For example, if the subdomain is 'foo'\
            \ and line is 'preprod', then the exposed service will be available at\
            \ 'foo.preprod.mydomain'"
          example: a string value
          title: env
          type: string
        forceHttps:
          description: Will force redirection to https:// if not present
          example: true
          title: forceHttps
          type: boolean
        groups:
          description: Each service descriptor is attached to groups. A group can
            have one or more services. Each API key is linked to a group and allow
            access to every service in the group
          example:
          - a string value
          items:
            example: a string value
            type: string
          title: groups
          type: array
        gzip:
          $ref: '#/components/schemas/Gzip'
        headersVerification:
          additionalProperties:
            type: string
          description: Specify headers that will be verified after routing.
          example:
            key: value
          title: headersVerification
          type: object
        healthCheck:
          $ref: '#/components/schemas/HealthCheck'
        id:
          description: A unique random string to identify your service
          example: 110e8400-e29b-11d4-a716-446655440000
          format: uuid
          title: id
          type: string
        ipFiltering:
          $ref: '#/components/schemas/IpFiltering'
        jwtVerifier:
          $ref: '#/components/schemas/ImportExport_serviceDescriptors_inner_jwtVerifier'
        localHost:
          description: "The host used localy, mainly localhost:xxxx"
          example: a string value
          title: localHost
          type: string
        localScheme:
          description: "The scheme used localy, mainly http"
          example: a string value
          title: localScheme
          type: string
        maintenanceMode:
          description: Display a maintainance page when a user try to use the service
          example: true
          title: maintenanceMode
          type: boolean
        matchingHeaders:
          additionalProperties:
            type: string
          description: Specify headers that MUST be present on client request to route
            it. Useful to implement versioning
          example:
            key: value
          title: matchingHeaders
          type: object
        matchingRoot:
          description: The root path on which the service is available
          example: a string value
          title: matchingRoot
          type: string
        metadata:
          additionalProperties:
            type: string
          description: Just a bunch of random properties
          example:
            key: value
          title: metadata
          type: object
        name:
          description: The name of your service. Only for debug and human readability
            purposes
          example: a string value
          title: name
          type: string
        overrideHost:
          description: Host header will be overriden with Host of the target
          example: true
          title: overrideHost
          type: boolean
        privateApp:
          description: "When enabled, user will be allowed to use the service (UI)\
            \ only if they are registered users of the private apps domain"
          example: true
          title: privateApp
          type: boolean
        privatePatterns:
          description: "If you define a public pattern that is a little bit too much,\
            \ you can make some of public URL private again"
          items:
            example: a string value
            type: string
          title: privatePatterns
          type: array
        publicPatterns:
          description: "By default, every services are private only and you'll need\
            \ an API key to access it. However, if you want to expose a public UI,\
            \ you can define one or more public patterns (regex) to allow access to\
            \ anybody. For example if you want to allow anybody on any URL, just use\
            \ '/.*'"
          items:
            example: a string value
            type: string
          title: publicPatterns
          type: array
        redirectToLocal:
          description: "If you work locally with Otoroshi, you may want to use that\
            \ feature to redirect one particuliar service to a local host. For example,\
            \ you can relocate https://foo.preprod.bar.com to http://localhost:8080\
            \ to make some tests"
          example: true
          title: redirectToLocal
          type: boolean
        redirection:
          $ref: '#/components/schemas/RedirectionSettings'
        root:
          description: "Otoroshi will append this root to any target choosen. If the\
            \ specified root is '/api/foo', then a request to https://yyyyyyy/bar\
            \ will actually hit https://xxxxxxxxx/api/foo/bar"
          example: a string value
          title: root
          type: string
        secComExcludedPatterns:
          description: URI patterns excluded from secured communications
          items:
            example: a string value
            type: string
          title: secComExcludedPatterns
          type: array
        secComSettings:
          $ref: '#/components/schemas/GlobalJwtVerifier_algoSettings'
        sendOtoroshiHeadersBack:
          description: "When enabled, Otoroshi will send headers to consumer like\
            \ request id, client latency, overhead, etc ..."
          example: true
          title: sendOtoroshiHeadersBack
          type: boolean
        statsdConfig:
          $ref: '#/components/schemas/StatsdConfig'
        subdomain:
          description: The subdomain on which the service is available
          example: a string value
          title: subdomain
          type: string
        targets:
          description: The list of target that Otoroshi will proxy and expose through
            the subdomain defined before. Otoroshi will do round-robin load balancing
            between all those targets with circuit breaker mecanism to avoid cascading
            failures
          items:
            $ref: '#/components/schemas/Target'
          title: targets
          type: array
        transformerRef:
          description: A reference to a request transformer
          example: a string value
          title: transformerRef
          type: string
        userFacing:
          description: The fact that this service will be seen by users and cannot
            be impacted by the Snow Monkey
          example: true
          title: userFacing
          type: boolean
        xForwardedHeaders:
          description: Send X-Forwarded-* headers
          example: true
          title: xForwardedHeaders
          type: boolean
      required:
      - buildMode
      - domain
      - enabled
      - enforceSecureCommunication
      - env
      - forceHttps
      - groups
      - id
      - maintenanceMode
      - name
      - privateApp
      - root
      - subdomain
      - targets
      title: Service
      type: object
    Sign:
      description: "Strategy where signature and field values are verified, and then\
        \ token si re-signed"
      properties:
        algoSettings:
          $ref: '#/components/schemas/GlobalJwtVerifier_algoSettings'
        type:
          description: String with value Sign
          example: a string value
          title: type
          type: string
        verificationSettings:
          $ref: '#/components/schemas/VerificationSettings'
      required:
      - algoSettings
      - type
      - verificationSettings
      title: Sign
      type: object
    SimpleAdmin:
      description: Administrator using just login/password tuple to access Otoroshi
      properties:
        createdAt:
          description: The creation date of the user
          example: 123
          format: int64
          type: integer
        label:
          description: The label for the user
          example: a string value
          type: string
        password:
          description: The hashed password of the user
          example: a string value
          type: string
        username:
          description: The email address of the user
          example: a string value
          type: string
      required:
      - createdAt
      - label
      - password
      - username
      type: object
    SnowMonkeyConfig:
      description: Configuration for the faults that can be injected in requests.
        The name Snow Monkey is an hommage to Netflix's Chaos Monkey 😉
      example:
        dryRun: true
        targetGroups:
        - a string value
        - a string value
        includeUserFacingDescriptors: true
        outageDurationTo: 123123
        chaosConfig:
          badResponsesFaultConfig:
            responses:
            - headers:
                key: value
              body: a string value
              status: 123123
            - headers:
                key: value
              body: a string value
              status: 123123
            ratio: 42.2
          largeResponseFaultConfig:
            additionalRequestSize: 123123
            ratio: 42.2
          latencyInjectionFaultConfig:
            from: 123123
            to: 123123
            ratio: 42.2
          largeRequestFaultConfig:
            additionalRequestSize: 123123
            ratio: 42.2
          enabled: true
        outageDurationFrom: 123123
        startTime: "63148.0"
        stopTime: "63148.0"
        timesPerDay: 123123
        outageStrategy: OneServicePerGroup
        enabled: true
      properties:
        chaosConfig:
          $ref: '#/components/schemas/ChaosConfig'
        dryRun:
          description: Whether or not outages will actualy impact requests
          example: true
          title: dryRun
          type: boolean
        enabled:
          description: Whether or not this config is enabled
          example: true
          title: enabled
          type: boolean
        includeUserFacingDescriptors:
          description: Whether or not user facing apps. will be impacted by Snow Monkey
          example: true
          title: includeUserFacingDescriptors
          type: boolean
        outageDurationFrom:
          description: Start of outage duration range
          example: 123123
          format: int32
          title: outageDurationFrom
          type: integer
        outageDurationTo:
          description: End of outage duration range
          example: 123123
          format: int32
          title: outageDurationTo
          type: integer
        outageStrategy:
          $ref: '#/components/schemas/OutageStrategy'
        startTime:
          description: Start time of Snow Monkey each day
          example: "63148.0"
          format: time
          title: startTime
          type: string
        stopTime:
          description: Stop time of Snow Monkey each day
          example: "63148.0"
          format: time
          title: stopTime
          type: string
        targetGroups:
          description: "Groups impacted by Snow Monkey. If empty, all groups will\
            \ be impacted"
          items:
            example: a string value
            type: string
          title: targetGroups
          type: array
        timesPerDay:
          description: Number of time per day each service will be outage
          example: 123123
          format: int32
          title: timesPerDay
          type: integer
      required:
      - chaosConfig
      - dryRun
      - enabled
      - includeUserFacingDescriptors
      - outageDurationFrom
      - outageDurationTo
      - outageStrategy
      - startTime
      - stopTime
      - targetGroups
      - timesPerDay
      title: SnowMonkeyConfig
      type: object
    Stats:
      description: Live stats for a service or globally
      example:
        concurrentHandledRequests: 123
        duration: 42.2
        dataOut: 123
        calls: 123
        rate: 42.2
        dataInRate: 42.2
        overhead: 42.2
        dataIn: 123
        dataOutRate: 42.2
      properties:
        calls:
          description: Number of calls on the specified service or globally
          example: 123
          format: int64
          title: calls
          type: integer
        concurrentHandledRequests:
          description: The number of concurrent request currently
          example: 123
          format: int64
          title: concurrentHandledRequests
          type: integer
        dataIn:
          description: The amount of data sent to the specified service or Otoroshi
            globally
          example: 123
          format: int64
          title: dataIn
          type: integer
        dataInRate:
          description: The rate of data sent to the specified service or Otoroshi
            globally
          example: 42.2
          format: double
          title: dataInRate
          type: number
        dataOut:
          description: The amount of data sent from the specified service or Otoroshi
            globally
          example: 123
          format: int64
          title: dataOut
          type: integer
        dataOutRate:
          description: The rate of data sent from the specified service or Otoroshi
            globally
          example: 42.2
          format: double
          title: dataOutRate
          type: number
        duration:
          description: The average duration for a call
          example: 42.2
          format: double
          title: duration
          type: number
        overhead:
          description: The average overhead time induced by Otoroshi for each call
          example: 42.2
          format: double
          title: overhead
          type: number
        rate:
          description: The rate of data sent from and to the specified service or
            Otoroshi globally
          example: 42.2
          format: double
          title: rate
          type: number
      required:
      - calls
      - concurrentHandledRequests
      - dataIn
      - dataInRate
      - dataOut
      - dataOutRate
      - duration
      - overhead
      - rate
      title: Stats
      type: object
    StatsdConfig:
      description: The configuration for statsd metrics push
      example:
        port: 123123
        datadog: true
        host: a string value
      properties:
        datadog:
          description: Datadog agent
          example: true
          title: datadog
          type: boolean
        host:
          description: The host of the StatsD agent
          example: a string value
          title: host
          type: string
        port:
          description: The port of the StatsD agent
          example: 123123
          format: int32
          title: port
          type: integer
      required:
      - datadog
      - host
      - port
      title: StatsdConfig
      type: object
    Target:
      description: A Target is where an HTTP call will be forwarded in the end from
        a service domain
      example:
        scheme: a string value
        host: www.google.com
      properties:
        host:
          description: "The host on which the HTTP call will be forwarded. Can be\
            \ a domain name, or an IP address. Can also have a port"
          example: www.google.com
          format: hostname
          title: host
          type: string
        scheme:
          description: The protocol used for communication. Can be http or https
          example: a string value
          title: scheme
          type: string
      required:
      - host
      - scheme
      title: Target
      type: object
    Transform:
      description: "Strategy where signature and field values are verified, trasnformed\
        \ and then token si re-signed"
      properties:
        algoSettings:
          $ref: '#/components/schemas/GlobalJwtVerifier_algoSettings'
        transformSettings:
          $ref: '#/components/schemas/TransformSettings'
        type:
          description: String with value Transform
          example: a string value
          title: type
          type: string
        verificationSettings:
          $ref: '#/components/schemas/VerificationSettings'
      required:
      - algoSettings
      - type
      - verificationSettings
      title: Transform
      type: object
    TransformSettings:
      description: Settings to transform a JWT token and its location
      properties:
        location:
          $ref: '#/components/schemas/GlobalJwtVerifier_source'
        mappingSettings:
          $ref: '#/components/schemas/MappingSettings'
      required:
      - location
      - mappingSettings
      title: TransformSettings
      type: object
    U2FAdmin:
      description: Administrator using FIDO U2F device to access Otoroshi
      properties:
        createdAt:
          description: The creation date of the user
          example: 123
          format: int64
          type: integer
        label:
          description: The label for the user
          example: a string value
          type: string
        password:
          description: The hashed password of the user
          example: a string value
          type: string
        registration:
          additionalProperties:
            type: string
          description: The U2F registration slug
          example:
            key: value
          type: object
        username:
          description: The email address of the user
          example: a string value
          type: string
      required:
      - createdAt
      - label
      - password
      - registration
      - username
      type: object
    ValidationAuthority:
      description: Settings to access a validation authority server
      example:
        headers:
          key: value
        method: a string value
        badTtl: 123
        description: a string value
        timeout: 123
        url: a string value
        alwaysValid: true
        path: a string value
        noCache: true
        host: a string value
        name: a string value
        goodTtl: 123
        id: a string value
      properties:
        alwaysValid:
          description: "Bypass http calls, every certificates are valids"
          example: true
          title: alwaysValid
          type: boolean
        badTtl:
          description: The TTL for invalid access response caching
          example: 123
          format: int64
          title: badTtl
          type: integer
        description:
          description: The description of the settings
          example: a string value
          title: description
          type: string
        goodTtl:
          description: The TTL for valid access response caching
          example: 123
          format: int64
          title: goodTtl
          type: integer
        headers:
          additionalProperties:
            type: string
          description: HTTP call headers
          example:
            key: value
          title: headers
          type: object
        host:
          description: The host of the server
          example: a string value
          title: host
          type: string
        id:
          description: The id of the settings
          example: a string value
          title: id
          type: string
        method:
          description: The HTTP method
          example: a string value
          title: method
          type: string
        name:
          description: The name of the settings
          example: a string value
          title: name
          type: string
        noCache:
          description: Avoid caching responses
          example: true
          title: noCache
          type: boolean
        path:
          description: The URL path
          example: a string value
          title: path
          type: string
        timeout:
          description: The call timeout
          example: 123
          format: int64
          title: timeout
          type: integer
        url:
          description: The URL of the server
          example: a string value
          title: url
          type: string
      required:
      - alwaysValid
      - badTtl
      - description
      - goodTtl
      - headers
      - host
      - id
      - method
      - name
      - noCache
      - path
      - timeout
      - url
      title: ValidationAuthority
      type: object
    VerificationSettings:
      description: Settings to verify the value of JWT token fields
      example:
        mappingSettings:
          values:
            key: value
          map:
            key: value
          remove:
          - a string value
          - a string value
        fields:
          key: value
      properties:
        fields:
          additionalProperties:
            type: string
          description: Fields to verify with their values
          example:
            key: value
          title: fields
          type: object
        mappingSettings:
          $ref: '#/components/schemas/MappingSettings'
      required:
      - fields
      title: VerificationSettings
      type: object
    Webhook:
      description: A callback URL where events are posted
      example:
        headers:
          key: value
        url: http://www.google.com
      properties:
        headers:
          additionalProperties:
            type: string
          description: Headers to authorize the call or whatever
          example:
            key: value
          title: headers
          type: object
        url:
          description: The URL where events are posted
          example: http://www.google.com
          format: uri
          title: url
          type: string
      required:
      - headers
      - url
      title: Webhook
      type: object
    whebhookConfig:
      description: The configuration for webhook
      properties:
        headers:
          additionalProperties:
            type: string
          description: Optional headers
          example:
            key: value
          type: object
        url:
          description: URLs of the webhook
          items:
            example: a string value
            type: string
          type: array
      required:
      - servers
      type: object
    findAllGlobalAuthModules_200_response_inner:
      oneOf:
      - $ref: '#/components/schemas/LdapAuthModuleConfig'
      - $ref: '#/components/schemas/InMemoryAuthModuleConfig'
      - $ref: '#/components/schemas/GenericOauth2ModuleConfig'
      title: findAllGlobalAuthModules_200_response_inner
    updateBulkDataExporterConfig_200_response_inner:
      description: The bulk response
      example:
        id: true
        updated: true
        status: "200"
      properties:
        id:
          description: Data exporter id
          example: true
          title: id
          type: boolean
        status:
          description: Status
          enum:
          - "200"
          title: status
          type: string
        updated:
          description: Whether the action was carried out correctly or not
          example: true
          title: updated
          type: boolean
      title: updateBulkDataExporterConfig_200_response_inner
      type: object
    createBulkDataExporterConfigs_200_response_inner:
      description: The bulk response
      example:
        created: true
        id: true
        status: "201"
      properties:
        created:
          description: Whether the action was carried out correctly or not
          example: true
          title: created
          type: boolean
        id:
          description: Data exporter id
          example: true
          title: id
          type: boolean
        status:
          description: Status
          enum:
          - "201"
          title: status
          type: string
      title: createBulkDataExporterConfigs_200_response_inner
      type: object
    deletebulkDataExporterConfig_200_response_inner:
      description: The bulk response
      example:
        deleted: true
        id: true
        status: "200"
      properties:
        deleted:
          description: Whether the action was carried out correctly or not
          example: true
          title: deleted
          type: boolean
        id:
          description: Data exporter id
          example: true
          title: id
          type: boolean
        status:
          description: Status
          enum:
          - "200"
          title: status
          type: string
      title: deletebulkDataExporterConfig_200_response_inner
      type: object
    DataExporterConfig_config:
      description: Data Exporter config
      oneOf:
      - $ref: '#/components/schemas/ElasticConfig'
      - $ref: '#/components/schemas/KafkaConfig'
      - $ref: '#/components/schemas/PulsarDataExporterConfig'
      - $ref: '#/components/schemas/FileDataExporterConfig'
      - $ref: '#/components/schemas/MailerGenericExporterConfig'
      - $ref: '#/components/schemas/MailerConsoleExporterConfig'
      - $ref: '#/components/schemas/MailerMailgunExporterConfig'
      - $ref: '#/components/schemas/MailerMailjetExporterConfig'
      - $ref: '#/components/schemas/MailerSendgridExporterConfig'
      - $ref: '#/components/schemas/ConsoleDataExporterConfig'
      - $ref: '#/components/schemas/CustomDataExporterConfig'
      title: DataExporterConfig_config
    GenericOauth2ModuleConfig_jwtVerifier:
      description: Algo. settings to verify JWT token
      oneOf:
      - $ref: '#/components/schemas/HSAlgoSettings'
      - $ref: '#/components/schemas/RSAlgoSettings'
      - $ref: '#/components/schemas/ESAlgoSettings'
      - $ref: '#/components/schemas/JWKSAlgoSettings'
      title: GenericOauth2ModuleConfig_jwtVerifier
    GlobalJwtVerifier_algoSettings:
      oneOf:
      - $ref: '#/components/schemas/HSAlgoSettings'
      - $ref: '#/components/schemas/RSAlgoSettings'
      - $ref: '#/components/schemas/ESAlgoSettings'
      - $ref: '#/components/schemas/JWKSAlgoSettings'
      title: GlobalJwtVerifier_algoSettings
    GlobalJwtVerifier_source:
      oneOf:
      - $ref: '#/components/schemas/InQueryParam'
      - $ref: '#/components/schemas/InHeader'
      - $ref: '#/components/schemas/InCookie'
      title: GlobalJwtVerifier_source
    GlobalJwtVerifier_strategy:
      oneOf:
      - $ref: '#/components/schemas/PassThrough'
      - $ref: '#/components/schemas/Sign'
      - $ref: '#/components/schemas/Transform'
      title: GlobalJwtVerifier_strategy
    ImportExport_admins_inner:
      description: Administrator using FIDO U2F device to access Otoroshi
      example:
        createdAt: 123
        password: a string value
        registration:
          key: value
        label: a string value
        username: a string value
      properties:
        createdAt:
          description: The creation date of the user
          example: 123
          format: int64
          title: createdAt
          type: integer
        label:
          description: The label for the user
          example: a string value
          title: label
          type: string
        password:
          description: The hashed password of the user
          example: a string value
          title: password
          type: string
        registration:
          additionalProperties:
            type: string
          description: The U2F registration slug
          example:
            key: value
          title: registration
          type: object
        username:
          description: The email address of the user
          example: a string value
          title: username
          type: string
      required:
      - createdAt
      - label
      - password
      - registration
      - username
      title: ImportExport_admins_inner
      type: object
    ImportExport_apiKeys_inner:
      description: An Otoroshi Api Key. An Api Key is defined for a group of services
        to allow usage of the same Api Key for multiple services.
      example:
        metadata:
          key: value
        clientId: a string value
        monthlyQuota: 123
        throttlingQuota: 123
        clientName: a string value
        authorizedEntities:
        - a string value
        clientSecret: a string value
        dailyQuota: 123
        enabled: true
      properties:
        authorizedEntities:
          description: The group/service ids (prefixed by group_ or service_ on which
            the key is authorized
          example:
          - a string value
          items:
            example: a string value
            type: string
          title: authorizedEntities
          type: array
        clientId:
          description: "The unique id of the Api Key. Usually 16 random alpha numerical\
            \ characters, but can be anything"
          example: a string value
          title: clientId
          type: string
        clientName:
          description: "The name of the api key, for humans ;-)"
          example: a string value
          title: clientName
          type: string
        clientSecret:
          description: "The secret of the Api Key. Usually 64 random alpha numerical\
            \ characters, but can be anything"
          example: a string value
          title: clientSecret
          type: string
        dailyQuota:
          description: Authorized number of calls per day
          example: 123
          format: int64
          title: dailyQuota
          type: integer
        enabled:
          description: "Whether or not the key is enabled. If disabled, resources\
            \ won't be available to calls using this key"
          example: true
          title: enabled
          type: boolean
        metadata:
          additionalProperties:
            type: string
          description: Bunch of metadata for the key
          example:
            key: value
          title: metadata
          type: object
        monthlyQuota:
          description: Authorized number of calls per month
          example: 123
          format: int64
          title: monthlyQuota
          type: integer
        throttlingQuota:
          description: "Authorized number of calls per second, measured on 10 seconds"
          example: 123
          format: int64
          title: throttlingQuota
          type: integer
      required:
      - authorizedEntities
      - clientId
      - clientName
      - clientSecret
      - enabled
      title: ImportExport_apiKeys_inner
      type: object
    ImportExport_errorTemplates_inner:
      description: Error templates for a service descriptor
      example:
        templateMaintenance: a string value
        templateBuild: a string value
        messages:
          key: value
        template50x: a string value
        template40x: a string value
        serviceId: a string value
      properties:
        messages:
          additionalProperties:
            type: string
          description: Map for custom messages
          example:
            key: value
          title: messages
          type: object
        serviceId:
          description: The Id of the service for which the error template is enabled
          example: a string value
          title: serviceId
          type: string
        template40x:
          description: The html template for 40x errors
          example: a string value
          title: template40x
          type: string
        template50x:
          description: The html template for 50x errors
          example: a string value
          title: template50x
          type: string
        templateBuild:
          description: The html template for build page
          example: a string value
          title: templateBuild
          type: string
        templateMaintenance:
          description: The html template for maintenance page
          example: a string value
          title: templateMaintenance
          type: string
      required:
      - messages
      - serviceId
      - template40x
      - template50x
      - templateBuild
      - templateMaintenance
      title: ImportExport_errorTemplates_inner
      type: object
    ImportExport_serviceDescriptors_inner_jwtVerifier:
      oneOf:
      - $ref: '#/components/schemas/LocalJwtVerifier'
      - $ref: '#/components/schemas/RefJwtVerifier'
      title: ImportExport_serviceDescriptors_inner_jwtVerifier
    ImportExport_serviceDescriptors_inner:
      description: An otoroshi service descriptor. Represent a forward HTTP call on
        a domain to another location with some optional api management mecanism
      example:
        metadata:
          key: value
        cors:
          excludedPatterns:
          - a string value
          - a string value
          allowMethods:
          - a string value
          - a string value
          allowHeaders:
          - a string value
          - a string value
          exposeHeaders:
          - a string value
          - a string value
          maxAge: 123123
          allowCredentials: true
          enabled: true
          allowOrigin: a string value
        forceHttps: true
        matchingRoot: a string value
        buildMode: true
        chaosConfig:
          badResponsesFaultConfig:
            responses:
            - headers:
                key: value
              body: a string value
              status: 123123
            - headers:
                key: value
              body: a string value
              status: 123123
            ratio: 42.2
          largeResponseFaultConfig:
            additionalRequestSize: 123123
            ratio: 42.2
          latencyInjectionFaultConfig:
            from: 123123
            to: 123123
            ratio: 42.2
          largeRequestFaultConfig:
            additionalRequestSize: 123123
            ratio: 42.2
          enabled: true
        secComSettings: null
        targets:
        - scheme: a string value
          host: www.google.com
        - scheme: a string value
          host: www.google.com
        enabled: true
        localHost: a string value
        root: a string value
        additionalHeaders:
          key: value
        api:
          exposeApi: true
          openApiDescriptorUrl: http://www.google.com
        id: 110e8400-e29b-11d4-a716-446655440000
        ipFiltering:
          blacklist:
          - 192.192.192.192
          - 192.192.192.192
          whitelist:
          - 192.192.192.192
          - 192.192.192.192
        sendOtoroshiHeadersBack: true
        redirection:
          code: 123123
          to: a string value
          enabled: true
        headersVerification:
          key: value
        redirectToLocal: true
        userFacing: true
        authConfigRef: a string value
        secComExcludedPatterns:
        - a string value
        - a string value
        xForwardedHeaders: true
        transformerRef: a string value
        Canary:
          root: a string value
          targets:
          - scheme: a string value
            host: www.google.com
          - scheme: a string value
            host: www.google.com
          enabled: true
          traffic: 123123
        groups:
        - a string value
        privatePatterns:
        - a string value
        - a string value
        gzip:
          excludedPatterns:
          - a string value
          - a string value
          blackList:
          - a string value
          - a string value
          whiteList:
          - a string value
          - a string value
          chunkedThreshold: 123
          compressionLevel: 123123
          enabled: true
          bufferSize: 123
        clientConfig:
          retries: 123123
          sampleInterval: 123123
          useCircuitBreaker: true
          backoffFactor: 123123
          maxErrors: 123123
          retryInitialDelay: 123123
          callTimeout: 123123
          globalTimeout: 123123
        env: a string value
        enforceSecureCommunication: true
        jwtVerifier:
          algoSettings:
            size: 123123
            secret: a string value
            type: a string value
          source:
            name: a string value
            type: a string value
          strategy:
            verificationSettings:
              mappingSettings:
                values:
                  key: value
                map:
                  key: value
                remove:
                - a string value
                - a string value
              fields:
                key: value
            type: a string value
          strict: true
          type: a string value
          enabled: true
        clientValidatorRef: a string value
        publicPatterns:
        - a string value
        - a string value
        localScheme: a string value
        privateApp: true
        domain: a string value
        healthCheck:
          enabled: true
          url: http://www.google.com
        name: a string value
        statsdConfig:
          port: 123123
          datadog: true
          host: a string value
        matchingHeaders:
          key: value
        subdomain: a string value
        overrideHost: true
        maintenanceMode: true
      properties:
        Canary:
          $ref: '#/components/schemas/Canary'
        additionalHeaders:
          additionalProperties:
            type: string
          description: Specify headers that will be added to each client request.
            Useful to add authentication
          example:
            key: value
          title: additionalHeaders
          type: object
        api:
          $ref: '#/components/schemas/ExposedApi'
        authConfigRef:
          description: A reference to a global auth module config
          example: a string value
          title: authConfigRef
          type: string
        buildMode:
          description: Display a construction page when a user try to use the service
          example: true
          title: buildMode
          type: boolean
        chaosConfig:
          $ref: '#/components/schemas/ChaosConfig'
        clientConfig:
          $ref: '#/components/schemas/ClientConfig'
        clientValidatorRef:
          description: A reference to validation authority
          example: a string value
          title: clientValidatorRef
          type: string
        cors:
          $ref: '#/components/schemas/CorsSettings'
        domain:
          description: The domain on which the service is available.
          example: a string value
          title: domain
          type: string
        enabled:
          description: "Activate or deactivate your service. Once disabled, users\
            \ will get an error page saying the service does not exist"
          example: true
          title: enabled
          type: boolean
        enforceSecureCommunication:
          description: "When enabled, Otoroshi will try to exchange headers with downstream\
            \ service to ensure no one else can use the service from outside"
          example: true
          title: enforceSecureCommunication
          type: boolean
        env:
          description: "The line on which the service is available. Based on that\
            \ value, the name of the line will be appended to the subdomain. For line\
            \ prod, nothing will be appended. For example, if the subdomain is 'foo'\
            \ and line is 'preprod', then the exposed service will be available at\
            \ 'foo.preprod.mydomain'"
          example: a string value
          title: env
          type: string
        forceHttps:
          description: Will force redirection to https:// if not present
          example: true
          title: forceHttps
          type: boolean
        groups:
          description: Each service descriptor is attached to groups. A group can
            have one or more services. Each API key is linked to a group and allow
            access to every service in the group
          example:
          - a string value
          items:
            example: a string value
            type: string
          title: groups
          type: array
        gzip:
          $ref: '#/components/schemas/Gzip'
        headersVerification:
          additionalProperties:
            type: string
          description: Specify headers that will be verified after routing.
          example:
            key: value
          title: headersVerification
          type: object
        healthCheck:
          $ref: '#/components/schemas/HealthCheck'
        id:
          description: A unique random string to identify your service
          example: 110e8400-e29b-11d4-a716-446655440000
          format: uuid
          title: id
          type: string
        ipFiltering:
          $ref: '#/components/schemas/IpFiltering'
        jwtVerifier:
          $ref: '#/components/schemas/ImportExport_serviceDescriptors_inner_jwtVerifier'
        localHost:
          description: "The host used localy, mainly localhost:xxxx"
          example: a string value
          title: localHost
          type: string
        localScheme:
          description: "The scheme used localy, mainly http"
          example: a string value
          title: localScheme
          type: string
        maintenanceMode:
          description: Display a maintainance page when a user try to use the service
          example: true
          title: maintenanceMode
          type: boolean
        matchingHeaders:
          additionalProperties:
            type: string
          description: Specify headers that MUST be present on client request to route
            it. Useful to implement versioning
          example:
            key: value
          title: matchingHeaders
          type: object
        matchingRoot:
          description: The root path on which the service is available
          example: a string value
          title: matchingRoot
          type: string
        metadata:
          additionalProperties:
            type: string
          description: Just a bunch of random properties
          example:
            key: value
          title: metadata
          type: object
        name:
          description: The name of your service. Only for debug and human readability
            purposes
          example: a string value
          title: name
          type: string
        overrideHost:
          description: Host header will be overriden with Host of the target
          example: true
          title: overrideHost
          type: boolean
        privateApp:
          description: "When enabled, user will be allowed to use the service (UI)\
            \ only if they are registered users of the private apps domain"
          example: true
          title: privateApp
          type: boolean
        privatePatterns:
          description: "If you define a public pattern that is a little bit too much,\
            \ you can make some of public URL private again"
          items:
            example: a string value
            type: string
          title: privatePatterns
          type: array
        publicPatterns:
          description: "By default, every services are private only and you'll need\
            \ an API key to access it. However, if you want to expose a public UI,\
            \ you can define one or more public patterns (regex) to allow access to\
            \ anybody. For example if you want to allow anybody on any URL, just use\
            \ '/.*'"
          items:
            example: a string value
            type: string
          title: publicPatterns
          type: array
        redirectToLocal:
          description: "If you work locally with Otoroshi, you may want to use that\
            \ feature to redirect one particuliar service to a local host. For example,\
            \ you can relocate https://foo.preprod.bar.com to http://localhost:8080\
            \ to make some tests"
          example: true
          title: redirectToLocal
          type: boolean
        redirection:
          $ref: '#/components/schemas/RedirectionSettings'
        root:
          description: "Otoroshi will append this root to any target choosen. If the\
            \ specified root is '/api/foo', then a request to https://yyyyyyy/bar\
            \ will actually hit https://xxxxxxxxx/api/foo/bar"
          example: a string value
          title: root
          type: string
        secComExcludedPatterns:
          description: URI patterns excluded from secured communications
          items:
            example: a string value
            type: string
          title: secComExcludedPatterns
          type: array
        secComSettings:
          $ref: '#/components/schemas/GlobalJwtVerifier_algoSettings'
        sendOtoroshiHeadersBack:
          description: "When enabled, Otoroshi will send headers to consumer like\
            \ request id, client latency, overhead, etc ..."
          example: true
          title: sendOtoroshiHeadersBack
          type: boolean
        statsdConfig:
          $ref: '#/components/schemas/StatsdConfig'
        subdomain:
          description: The subdomain on which the service is available
          example: a string value
          title: subdomain
          type: string
        targets:
          description: The list of target that Otoroshi will proxy and expose through
            the subdomain defined before. Otoroshi will do round-robin load balancing
            between all those targets with circuit breaker mecanism to avoid cascading
            failures
          items:
            $ref: '#/components/schemas/Target'
          title: targets
          type: array
        transformerRef:
          description: A reference to a request transformer
          example: a string value
          title: transformerRef
          type: string
        userFacing:
          description: The fact that this service will be seen by users and cannot
            be impacted by the Snow Monkey
          example: true
          title: userFacing
          type: boolean
        xForwardedHeaders:
          description: Send X-Forwarded-* headers
          example: true
          title: xForwardedHeaders
          type: boolean
      required:
      - buildMode
      - domain
      - enabled
      - enforceSecureCommunication
      - env
      - forceHttps
      - groups
      - id
      - maintenanceMode
      - name
      - privateApp
      - root
      - subdomain
      - targets
      title: ImportExport_serviceDescriptors_inner
      type: object
    ImportExport_serviceGroups_inner:
      description: An Otoroshi service group is just a group of service descriptor.
        It is useful to be able to define Api Keys for the whole group
      example:
        name: a string value
        description: a string value
        id: a string value
      properties:
        description:
          description: The descriptoin of the group
          example: a string value
          title: description
          type: string
        id:
          description: "The unique id of the group. Usually 64 random alpha numerical\
            \ characters, but can be anything"
          example: a string value
          title: id
          type: string
        name:
          description: The name of the group
          example: a string value
          title: name
          type: string
      required:
      - id
      - name
      title: ImportExport_serviceGroups_inner
      type: object
    ImportExport_simpleAdmins_inner:
      description: Administrator using just login/password tuple to access Otoroshi
      example:
        createdAt: 123
        password: a string value
        label: a string value
        username: a string value
      properties:
        createdAt:
          description: The creation date of the user
          example: 123
          format: int64
          title: createdAt
          type: integer
        label:
          description: The label for the user
          example: a string value
          title: label
          type: string
        password:
          description: The hashed password of the user
          example: a string value
          title: password
          type: string
        username:
          description: The email address of the user
          example: a string value
          title: username
          type: string
      required:
      - createdAt
      - label
      - password
      - username
      title: ImportExport_simpleAdmins_inner
      type: object
    Patch_inner:
      properties:
        op:
          enum:
          - add
          - replace
          - remove
          - copy
          - test
          title: op
          type: string
        path:
          example: a string value
          title: path
          type: string
        value:
          title: value
      required:
      - op
      - path
      title: Patch_inner
      type: object
  securitySchemes:
    otoroshi_auth:
      scheme: basic
      type: http
      x-basicInfoFunc: openapi_server.controllers.security_controller.info_from_otoroshi_auth
