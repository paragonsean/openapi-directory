# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MailerGenericExporterConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, headers: Dict[str, str]=None, to: List[str]=None, type: str=None, url: str=None):
        """MailerGenericExporterConfig - a model defined in OpenAPI

        :param headers: The headers of this MailerGenericExporterConfig.
        :param to: The to of this MailerGenericExporterConfig.
        :param type: The type of this MailerGenericExporterConfig.
        :param url: The url of this MailerGenericExporterConfig.
        """
        self.openapi_types = {
            'headers': Dict[str, str],
            'to': List[str],
            'type': str,
            'url': str
        }

        self.attribute_map = {
            'headers': 'headers',
            'to': 'to',
            'type': 'type',
            'url': 'url'
        }

        self._headers = headers
        self._to = to
        self._type = type
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MailerGenericExporterConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MailerGenericExporterConfig of this MailerGenericExporterConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def headers(self):
        """Gets the headers of this MailerGenericExporterConfig.

        Optional headers

        :return: The headers of this MailerGenericExporterConfig.
        :rtype: Dict[str, str]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this MailerGenericExporterConfig.

        Optional headers

        :param headers: The headers of this MailerGenericExporterConfig.
        :type headers: Dict[str, str]
        """

        self._headers = headers

    @property
    def to(self):
        """Gets the to of this MailerGenericExporterConfig.

        Email adresses of recipents

        :return: The to of this MailerGenericExporterConfig.
        :rtype: List[str]
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this MailerGenericExporterConfig.

        Email adresses of recipents

        :param to: The to of this MailerGenericExporterConfig.
        :type to: List[str]
        """

        self._to = to

    @property
    def type(self):
        """Gets the type of this MailerGenericExporterConfig.

        Type of mailer

        :return: The type of this MailerGenericExporterConfig.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MailerGenericExporterConfig.

        Type of mailer

        :param type: The type of this MailerGenericExporterConfig.
        :type type: str
        """
        allowed_values = ["generic"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def url(self):
        """Gets the url of this MailerGenericExporterConfig.

        Url of mailer

        :return: The url of this MailerGenericExporterConfig.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this MailerGenericExporterConfig.

        Url of mailer

        :param url: The url of this MailerGenericExporterConfig.
        :type url: str
        """

        self._url = url
