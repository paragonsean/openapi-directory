# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LdapAuthModuleConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, admin_password: str=None, admin_username: str=None, desc: str=None, email_field: str=None, group_filter: str=None, id: str=None, name: str=None, name_field: str=None, otoroshi_data_field: str=None, search_base: str=None, search_filter: str=None, server_url: str=None, session_max_age: int=None, type: str=None, user_base: str=None):
        """LdapAuthModuleConfig - a model defined in OpenAPI

        :param admin_password: The admin_password of this LdapAuthModuleConfig.
        :param admin_username: The admin_username of this LdapAuthModuleConfig.
        :param desc: The desc of this LdapAuthModuleConfig.
        :param email_field: The email_field of this LdapAuthModuleConfig.
        :param group_filter: The group_filter of this LdapAuthModuleConfig.
        :param id: The id of this LdapAuthModuleConfig.
        :param name: The name of this LdapAuthModuleConfig.
        :param name_field: The name_field of this LdapAuthModuleConfig.
        :param otoroshi_data_field: The otoroshi_data_field of this LdapAuthModuleConfig.
        :param search_base: The search_base of this LdapAuthModuleConfig.
        :param search_filter: The search_filter of this LdapAuthModuleConfig.
        :param server_url: The server_url of this LdapAuthModuleConfig.
        :param session_max_age: The session_max_age of this LdapAuthModuleConfig.
        :param type: The type of this LdapAuthModuleConfig.
        :param user_base: The user_base of this LdapAuthModuleConfig.
        """
        self.openapi_types = {
            'admin_password': str,
            'admin_username': str,
            'desc': str,
            'email_field': str,
            'group_filter': str,
            'id': str,
            'name': str,
            'name_field': str,
            'otoroshi_data_field': str,
            'search_base': str,
            'search_filter': str,
            'server_url': str,
            'session_max_age': int,
            'type': str,
            'user_base': str
        }

        self.attribute_map = {
            'admin_password': 'adminPassword',
            'admin_username': 'adminUsername',
            'desc': 'desc',
            'email_field': 'emailField',
            'group_filter': 'groupFilter',
            'id': 'id',
            'name': 'name',
            'name_field': 'nameField',
            'otoroshi_data_field': 'otoroshiDataField',
            'search_base': 'searchBase',
            'search_filter': 'searchFilter',
            'server_url': 'serverUrl',
            'session_max_age': 'sessionMaxAge',
            'type': 'type',
            'user_base': 'userBase'
        }

        self._admin_password = admin_password
        self._admin_username = admin_username
        self._desc = desc
        self._email_field = email_field
        self._group_filter = group_filter
        self._id = id
        self._name = name
        self._name_field = name_field
        self._otoroshi_data_field = otoroshi_data_field
        self._search_base = search_base
        self._search_filter = search_filter
        self._server_url = server_url
        self._session_max_age = session_max_age
        self._type = type
        self._user_base = user_base

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LdapAuthModuleConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LdapAuthModuleConfig of this LdapAuthModuleConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def admin_password(self):
        """Gets the admin_password of this LdapAuthModuleConfig.

        The admin password

        :return: The admin_password of this LdapAuthModuleConfig.
        :rtype: str
        """
        return self._admin_password

    @admin_password.setter
    def admin_password(self, admin_password):
        """Sets the admin_password of this LdapAuthModuleConfig.

        The admin password

        :param admin_password: The admin_password of this LdapAuthModuleConfig.
        :type admin_password: str
        """
        if admin_password is None:
            raise ValueError("Invalid value for `admin_password`, must not be `None`")

        self._admin_password = admin_password

    @property
    def admin_username(self):
        """Gets the admin_username of this LdapAuthModuleConfig.

        The admin username

        :return: The admin_username of this LdapAuthModuleConfig.
        :rtype: str
        """
        return self._admin_username

    @admin_username.setter
    def admin_username(self, admin_username):
        """Sets the admin_username of this LdapAuthModuleConfig.

        The admin username

        :param admin_username: The admin_username of this LdapAuthModuleConfig.
        :type admin_username: str
        """
        if admin_username is None:
            raise ValueError("Invalid value for `admin_username`, must not be `None`")

        self._admin_username = admin_username

    @property
    def desc(self):
        """Gets the desc of this LdapAuthModuleConfig.

        Description of the config

        :return: The desc of this LdapAuthModuleConfig.
        :rtype: str
        """
        return self._desc

    @desc.setter
    def desc(self, desc):
        """Sets the desc of this LdapAuthModuleConfig.

        Description of the config

        :param desc: The desc of this LdapAuthModuleConfig.
        :type desc: str
        """
        if desc is None:
            raise ValueError("Invalid value for `desc`, must not be `None`")

        self._desc = desc

    @property
    def email_field(self):
        """Gets the email_field of this LdapAuthModuleConfig.

        Field name to get email from user profile

        :return: The email_field of this LdapAuthModuleConfig.
        :rtype: str
        """
        return self._email_field

    @email_field.setter
    def email_field(self, email_field):
        """Sets the email_field of this LdapAuthModuleConfig.

        Field name to get email from user profile

        :param email_field: The email_field of this LdapAuthModuleConfig.
        :type email_field: str
        """
        if email_field is None:
            raise ValueError("Invalid value for `email_field`, must not be `None`")

        self._email_field = email_field

    @property
    def group_filter(self):
        """Gets the group_filter of this LdapAuthModuleConfig.

        Filter for groups

        :return: The group_filter of this LdapAuthModuleConfig.
        :rtype: str
        """
        return self._group_filter

    @group_filter.setter
    def group_filter(self, group_filter):
        """Sets the group_filter of this LdapAuthModuleConfig.

        Filter for groups

        :param group_filter: The group_filter of this LdapAuthModuleConfig.
        :type group_filter: str
        """
        if group_filter is None:
            raise ValueError("Invalid value for `group_filter`, must not be `None`")

        self._group_filter = group_filter

    @property
    def id(self):
        """Gets the id of this LdapAuthModuleConfig.

        Unique id of the config

        :return: The id of this LdapAuthModuleConfig.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LdapAuthModuleConfig.

        Unique id of the config

        :param id: The id of this LdapAuthModuleConfig.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this LdapAuthModuleConfig.

        Name of the config

        :return: The name of this LdapAuthModuleConfig.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LdapAuthModuleConfig.

        Name of the config

        :param name: The name of this LdapAuthModuleConfig.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def name_field(self):
        """Gets the name_field of this LdapAuthModuleConfig.

        Field name to get name from user profile

        :return: The name_field of this LdapAuthModuleConfig.
        :rtype: str
        """
        return self._name_field

    @name_field.setter
    def name_field(self, name_field):
        """Sets the name_field of this LdapAuthModuleConfig.

        Field name to get name from user profile

        :param name_field: The name_field of this LdapAuthModuleConfig.
        :type name_field: str
        """
        if name_field is None:
            raise ValueError("Invalid value for `name_field`, must not be `None`")

        self._name_field = name_field

    @property
    def otoroshi_data_field(self):
        """Gets the otoroshi_data_field of this LdapAuthModuleConfig.

        Field name to get otoroshi metadata from. You can specify sub fields using | as separator

        :return: The otoroshi_data_field of this LdapAuthModuleConfig.
        :rtype: str
        """
        return self._otoroshi_data_field

    @otoroshi_data_field.setter
    def otoroshi_data_field(self, otoroshi_data_field):
        """Sets the otoroshi_data_field of this LdapAuthModuleConfig.

        Field name to get otoroshi metadata from. You can specify sub fields using | as separator

        :param otoroshi_data_field: The otoroshi_data_field of this LdapAuthModuleConfig.
        :type otoroshi_data_field: str
        """

        self._otoroshi_data_field = otoroshi_data_field

    @property
    def search_base(self):
        """Gets the search_base of this LdapAuthModuleConfig.

        LDAP search base

        :return: The search_base of this LdapAuthModuleConfig.
        :rtype: str
        """
        return self._search_base

    @search_base.setter
    def search_base(self, search_base):
        """Sets the search_base of this LdapAuthModuleConfig.

        LDAP search base

        :param search_base: The search_base of this LdapAuthModuleConfig.
        :type search_base: str
        """
        if search_base is None:
            raise ValueError("Invalid value for `search_base`, must not be `None`")

        self._search_base = search_base

    @property
    def search_filter(self):
        """Gets the search_filter of this LdapAuthModuleConfig.

        Filter for users

        :return: The search_filter of this LdapAuthModuleConfig.
        :rtype: str
        """
        return self._search_filter

    @search_filter.setter
    def search_filter(self, search_filter):
        """Sets the search_filter of this LdapAuthModuleConfig.

        Filter for users

        :param search_filter: The search_filter of this LdapAuthModuleConfig.
        :type search_filter: str
        """
        if search_filter is None:
            raise ValueError("Invalid value for `search_filter`, must not be `None`")

        self._search_filter = search_filter

    @property
    def server_url(self):
        """Gets the server_url of this LdapAuthModuleConfig.

        URL of the ldap server

        :return: The server_url of this LdapAuthModuleConfig.
        :rtype: str
        """
        return self._server_url

    @server_url.setter
    def server_url(self, server_url):
        """Sets the server_url of this LdapAuthModuleConfig.

        URL of the ldap server

        :param server_url: The server_url of this LdapAuthModuleConfig.
        :type server_url: str
        """
        if server_url is None:
            raise ValueError("Invalid value for `server_url`, must not be `None`")

        self._server_url = server_url

    @property
    def session_max_age(self):
        """Gets the session_max_age of this LdapAuthModuleConfig.

        Max age of the session

        :return: The session_max_age of this LdapAuthModuleConfig.
        :rtype: int
        """
        return self._session_max_age

    @session_max_age.setter
    def session_max_age(self, session_max_age):
        """Sets the session_max_age of this LdapAuthModuleConfig.

        Max age of the session

        :param session_max_age: The session_max_age of this LdapAuthModuleConfig.
        :type session_max_age: int
        """
        if session_max_age is None:
            raise ValueError("Invalid value for `session_max_age`, must not be `None`")

        self._session_max_age = session_max_age

    @property
    def type(self):
        """Gets the type of this LdapAuthModuleConfig.

        Type of settings. value is ldap

        :return: The type of this LdapAuthModuleConfig.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this LdapAuthModuleConfig.

        Type of settings. value is ldap

        :param type: The type of this LdapAuthModuleConfig.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def user_base(self):
        """Gets the user_base of this LdapAuthModuleConfig.

        LDAP user base DN

        :return: The user_base of this LdapAuthModuleConfig.
        :rtype: str
        """
        return self._user_base

    @user_base.setter
    def user_base(self, user_base):
        """Sets the user_base of this LdapAuthModuleConfig.

        LDAP user base DN

        :param user_base: The user_base of this LdapAuthModuleConfig.
        :type user_base: str
        """
        if user_base is None:
            raise ValueError("Invalid value for `user_base`, must not be `None`")

        self._user_base = user_base
