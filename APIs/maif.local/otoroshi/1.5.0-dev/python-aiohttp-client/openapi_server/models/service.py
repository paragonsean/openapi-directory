# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.canary import Canary
from openapi_server.models.chaos_config import ChaosConfig
from openapi_server.models.client_config import ClientConfig
from openapi_server.models.cors_settings import CorsSettings
from openapi_server.models.exposed_api import ExposedApi
from openapi_server.models.global_jwt_verifier_algo_settings import GlobalJwtVerifierAlgoSettings
from openapi_server.models.gzip import Gzip
from openapi_server.models.health_check import HealthCheck
from openapi_server.models.import_export_service_descriptors_inner_jwt_verifier import ImportExportServiceDescriptorsInnerJwtVerifier
from openapi_server.models.ip_filtering import IpFiltering
from openapi_server.models.redirection_settings import RedirectionSettings
from openapi_server.models.statsd_config import StatsdConfig
from openapi_server.models.target import Target
from openapi_server import util


class Service(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, canary: Canary=None, additional_headers: Dict[str, str]=None, api: ExposedApi=None, auth_config_ref: str=None, build_mode: bool=None, chaos_config: ChaosConfig=None, client_config: ClientConfig=None, client_validator_ref: str=None, cors: CorsSettings=None, domain: str=None, enabled: bool=None, enforce_secure_communication: bool=None, env: str=None, force_https: bool=None, groups: List[str]=None, gzip: Gzip=None, headers_verification: Dict[str, str]=None, health_check: HealthCheck=None, id: str=None, ip_filtering: IpFiltering=None, jwt_verifier: ImportExportServiceDescriptorsInnerJwtVerifier=None, local_host: str=None, local_scheme: str=None, maintenance_mode: bool=None, matching_headers: Dict[str, str]=None, matching_root: str=None, metadata: Dict[str, str]=None, name: str=None, override_host: bool=None, private_app: bool=None, private_patterns: List[str]=None, public_patterns: List[str]=None, redirect_to_local: bool=None, redirection: RedirectionSettings=None, root: str=None, sec_com_excluded_patterns: List[str]=None, sec_com_settings: GlobalJwtVerifierAlgoSettings=None, send_otoroshi_headers_back: bool=None, statsd_config: StatsdConfig=None, subdomain: str=None, targets: List[Target]=None, transformer_ref: str=None, user_facing: bool=None, x_forwarded_headers: bool=None):
        """Service - a model defined in OpenAPI

        :param canary: The canary of this Service.
        :param additional_headers: The additional_headers of this Service.
        :param api: The api of this Service.
        :param auth_config_ref: The auth_config_ref of this Service.
        :param build_mode: The build_mode of this Service.
        :param chaos_config: The chaos_config of this Service.
        :param client_config: The client_config of this Service.
        :param client_validator_ref: The client_validator_ref of this Service.
        :param cors: The cors of this Service.
        :param domain: The domain of this Service.
        :param enabled: The enabled of this Service.
        :param enforce_secure_communication: The enforce_secure_communication of this Service.
        :param env: The env of this Service.
        :param force_https: The force_https of this Service.
        :param groups: The groups of this Service.
        :param gzip: The gzip of this Service.
        :param headers_verification: The headers_verification of this Service.
        :param health_check: The health_check of this Service.
        :param id: The id of this Service.
        :param ip_filtering: The ip_filtering of this Service.
        :param jwt_verifier: The jwt_verifier of this Service.
        :param local_host: The local_host of this Service.
        :param local_scheme: The local_scheme of this Service.
        :param maintenance_mode: The maintenance_mode of this Service.
        :param matching_headers: The matching_headers of this Service.
        :param matching_root: The matching_root of this Service.
        :param metadata: The metadata of this Service.
        :param name: The name of this Service.
        :param override_host: The override_host of this Service.
        :param private_app: The private_app of this Service.
        :param private_patterns: The private_patterns of this Service.
        :param public_patterns: The public_patterns of this Service.
        :param redirect_to_local: The redirect_to_local of this Service.
        :param redirection: The redirection of this Service.
        :param root: The root of this Service.
        :param sec_com_excluded_patterns: The sec_com_excluded_patterns of this Service.
        :param sec_com_settings: The sec_com_settings of this Service.
        :param send_otoroshi_headers_back: The send_otoroshi_headers_back of this Service.
        :param statsd_config: The statsd_config of this Service.
        :param subdomain: The subdomain of this Service.
        :param targets: The targets of this Service.
        :param transformer_ref: The transformer_ref of this Service.
        :param user_facing: The user_facing of this Service.
        :param x_forwarded_headers: The x_forwarded_headers of this Service.
        """
        self.openapi_types = {
            'canary': Canary,
            'additional_headers': Dict[str, str],
            'api': ExposedApi,
            'auth_config_ref': str,
            'build_mode': bool,
            'chaos_config': ChaosConfig,
            'client_config': ClientConfig,
            'client_validator_ref': str,
            'cors': CorsSettings,
            'domain': str,
            'enabled': bool,
            'enforce_secure_communication': bool,
            'env': str,
            'force_https': bool,
            'groups': List[str],
            'gzip': Gzip,
            'headers_verification': Dict[str, str],
            'health_check': HealthCheck,
            'id': str,
            'ip_filtering': IpFiltering,
            'jwt_verifier': ImportExportServiceDescriptorsInnerJwtVerifier,
            'local_host': str,
            'local_scheme': str,
            'maintenance_mode': bool,
            'matching_headers': Dict[str, str],
            'matching_root': str,
            'metadata': Dict[str, str],
            'name': str,
            'override_host': bool,
            'private_app': bool,
            'private_patterns': List[str],
            'public_patterns': List[str],
            'redirect_to_local': bool,
            'redirection': RedirectionSettings,
            'root': str,
            'sec_com_excluded_patterns': List[str],
            'sec_com_settings': GlobalJwtVerifierAlgoSettings,
            'send_otoroshi_headers_back': bool,
            'statsd_config': StatsdConfig,
            'subdomain': str,
            'targets': List[Target],
            'transformer_ref': str,
            'user_facing': bool,
            'x_forwarded_headers': bool
        }

        self.attribute_map = {
            'canary': 'Canary',
            'additional_headers': 'additionalHeaders',
            'api': 'api',
            'auth_config_ref': 'authConfigRef',
            'build_mode': 'buildMode',
            'chaos_config': 'chaosConfig',
            'client_config': 'clientConfig',
            'client_validator_ref': 'clientValidatorRef',
            'cors': 'cors',
            'domain': 'domain',
            'enabled': 'enabled',
            'enforce_secure_communication': 'enforceSecureCommunication',
            'env': 'env',
            'force_https': 'forceHttps',
            'groups': 'groups',
            'gzip': 'gzip',
            'headers_verification': 'headersVerification',
            'health_check': 'healthCheck',
            'id': 'id',
            'ip_filtering': 'ipFiltering',
            'jwt_verifier': 'jwtVerifier',
            'local_host': 'localHost',
            'local_scheme': 'localScheme',
            'maintenance_mode': 'maintenanceMode',
            'matching_headers': 'matchingHeaders',
            'matching_root': 'matchingRoot',
            'metadata': 'metadata',
            'name': 'name',
            'override_host': 'overrideHost',
            'private_app': 'privateApp',
            'private_patterns': 'privatePatterns',
            'public_patterns': 'publicPatterns',
            'redirect_to_local': 'redirectToLocal',
            'redirection': 'redirection',
            'root': 'root',
            'sec_com_excluded_patterns': 'secComExcludedPatterns',
            'sec_com_settings': 'secComSettings',
            'send_otoroshi_headers_back': 'sendOtoroshiHeadersBack',
            'statsd_config': 'statsdConfig',
            'subdomain': 'subdomain',
            'targets': 'targets',
            'transformer_ref': 'transformerRef',
            'user_facing': 'userFacing',
            'x_forwarded_headers': 'xForwardedHeaders'
        }

        self._canary = canary
        self._additional_headers = additional_headers
        self._api = api
        self._auth_config_ref = auth_config_ref
        self._build_mode = build_mode
        self._chaos_config = chaos_config
        self._client_config = client_config
        self._client_validator_ref = client_validator_ref
        self._cors = cors
        self._domain = domain
        self._enabled = enabled
        self._enforce_secure_communication = enforce_secure_communication
        self._env = env
        self._force_https = force_https
        self._groups = groups
        self._gzip = gzip
        self._headers_verification = headers_verification
        self._health_check = health_check
        self._id = id
        self._ip_filtering = ip_filtering
        self._jwt_verifier = jwt_verifier
        self._local_host = local_host
        self._local_scheme = local_scheme
        self._maintenance_mode = maintenance_mode
        self._matching_headers = matching_headers
        self._matching_root = matching_root
        self._metadata = metadata
        self._name = name
        self._override_host = override_host
        self._private_app = private_app
        self._private_patterns = private_patterns
        self._public_patterns = public_patterns
        self._redirect_to_local = redirect_to_local
        self._redirection = redirection
        self._root = root
        self._sec_com_excluded_patterns = sec_com_excluded_patterns
        self._sec_com_settings = sec_com_settings
        self._send_otoroshi_headers_back = send_otoroshi_headers_back
        self._statsd_config = statsd_config
        self._subdomain = subdomain
        self._targets = targets
        self._transformer_ref = transformer_ref
        self._user_facing = user_facing
        self._x_forwarded_headers = x_forwarded_headers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Service':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Service of this Service.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def canary(self):
        """Gets the canary of this Service.


        :return: The canary of this Service.
        :rtype: Canary
        """
        return self._canary

    @canary.setter
    def canary(self, canary):
        """Sets the canary of this Service.


        :param canary: The canary of this Service.
        :type canary: Canary
        """

        self._canary = canary

    @property
    def additional_headers(self):
        """Gets the additional_headers of this Service.

        Specify headers that will be added to each client request. Useful to add authentication

        :return: The additional_headers of this Service.
        :rtype: Dict[str, str]
        """
        return self._additional_headers

    @additional_headers.setter
    def additional_headers(self, additional_headers):
        """Sets the additional_headers of this Service.

        Specify headers that will be added to each client request. Useful to add authentication

        :param additional_headers: The additional_headers of this Service.
        :type additional_headers: Dict[str, str]
        """

        self._additional_headers = additional_headers

    @property
    def api(self):
        """Gets the api of this Service.


        :return: The api of this Service.
        :rtype: ExposedApi
        """
        return self._api

    @api.setter
    def api(self, api):
        """Sets the api of this Service.


        :param api: The api of this Service.
        :type api: ExposedApi
        """

        self._api = api

    @property
    def auth_config_ref(self):
        """Gets the auth_config_ref of this Service.

        A reference to a global auth module config

        :return: The auth_config_ref of this Service.
        :rtype: str
        """
        return self._auth_config_ref

    @auth_config_ref.setter
    def auth_config_ref(self, auth_config_ref):
        """Sets the auth_config_ref of this Service.

        A reference to a global auth module config

        :param auth_config_ref: The auth_config_ref of this Service.
        :type auth_config_ref: str
        """

        self._auth_config_ref = auth_config_ref

    @property
    def build_mode(self):
        """Gets the build_mode of this Service.

        Display a construction page when a user try to use the service

        :return: The build_mode of this Service.
        :rtype: bool
        """
        return self._build_mode

    @build_mode.setter
    def build_mode(self, build_mode):
        """Sets the build_mode of this Service.

        Display a construction page when a user try to use the service

        :param build_mode: The build_mode of this Service.
        :type build_mode: bool
        """
        if build_mode is None:
            raise ValueError("Invalid value for `build_mode`, must not be `None`")

        self._build_mode = build_mode

    @property
    def chaos_config(self):
        """Gets the chaos_config of this Service.


        :return: The chaos_config of this Service.
        :rtype: ChaosConfig
        """
        return self._chaos_config

    @chaos_config.setter
    def chaos_config(self, chaos_config):
        """Sets the chaos_config of this Service.


        :param chaos_config: The chaos_config of this Service.
        :type chaos_config: ChaosConfig
        """

        self._chaos_config = chaos_config

    @property
    def client_config(self):
        """Gets the client_config of this Service.


        :return: The client_config of this Service.
        :rtype: ClientConfig
        """
        return self._client_config

    @client_config.setter
    def client_config(self, client_config):
        """Sets the client_config of this Service.


        :param client_config: The client_config of this Service.
        :type client_config: ClientConfig
        """

        self._client_config = client_config

    @property
    def client_validator_ref(self):
        """Gets the client_validator_ref of this Service.

        A reference to validation authority

        :return: The client_validator_ref of this Service.
        :rtype: str
        """
        return self._client_validator_ref

    @client_validator_ref.setter
    def client_validator_ref(self, client_validator_ref):
        """Sets the client_validator_ref of this Service.

        A reference to validation authority

        :param client_validator_ref: The client_validator_ref of this Service.
        :type client_validator_ref: str
        """

        self._client_validator_ref = client_validator_ref

    @property
    def cors(self):
        """Gets the cors of this Service.


        :return: The cors of this Service.
        :rtype: CorsSettings
        """
        return self._cors

    @cors.setter
    def cors(self, cors):
        """Sets the cors of this Service.


        :param cors: The cors of this Service.
        :type cors: CorsSettings
        """

        self._cors = cors

    @property
    def domain(self):
        """Gets the domain of this Service.

        The domain on which the service is available.

        :return: The domain of this Service.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this Service.

        The domain on which the service is available.

        :param domain: The domain of this Service.
        :type domain: str
        """
        if domain is None:
            raise ValueError("Invalid value for `domain`, must not be `None`")

        self._domain = domain

    @property
    def enabled(self):
        """Gets the enabled of this Service.

        Activate or deactivate your service. Once disabled, users will get an error page saying the service does not exist

        :return: The enabled of this Service.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Service.

        Activate or deactivate your service. Once disabled, users will get an error page saying the service does not exist

        :param enabled: The enabled of this Service.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def enforce_secure_communication(self):
        """Gets the enforce_secure_communication of this Service.

        When enabled, Otoroshi will try to exchange headers with downstream service to ensure no one else can use the service from outside

        :return: The enforce_secure_communication of this Service.
        :rtype: bool
        """
        return self._enforce_secure_communication

    @enforce_secure_communication.setter
    def enforce_secure_communication(self, enforce_secure_communication):
        """Sets the enforce_secure_communication of this Service.

        When enabled, Otoroshi will try to exchange headers with downstream service to ensure no one else can use the service from outside

        :param enforce_secure_communication: The enforce_secure_communication of this Service.
        :type enforce_secure_communication: bool
        """
        if enforce_secure_communication is None:
            raise ValueError("Invalid value for `enforce_secure_communication`, must not be `None`")

        self._enforce_secure_communication = enforce_secure_communication

    @property
    def env(self):
        """Gets the env of this Service.

        The line on which the service is available. Based on that value, the name of the line will be appended to the subdomain. For line prod, nothing will be appended. For example, if the subdomain is 'foo' and line is 'preprod', then the exposed service will be available at 'foo.preprod.mydomain'

        :return: The env of this Service.
        :rtype: str
        """
        return self._env

    @env.setter
    def env(self, env):
        """Sets the env of this Service.

        The line on which the service is available. Based on that value, the name of the line will be appended to the subdomain. For line prod, nothing will be appended. For example, if the subdomain is 'foo' and line is 'preprod', then the exposed service will be available at 'foo.preprod.mydomain'

        :param env: The env of this Service.
        :type env: str
        """
        if env is None:
            raise ValueError("Invalid value for `env`, must not be `None`")

        self._env = env

    @property
    def force_https(self):
        """Gets the force_https of this Service.

        Will force redirection to https:// if not present

        :return: The force_https of this Service.
        :rtype: bool
        """
        return self._force_https

    @force_https.setter
    def force_https(self, force_https):
        """Sets the force_https of this Service.

        Will force redirection to https:// if not present

        :param force_https: The force_https of this Service.
        :type force_https: bool
        """
        if force_https is None:
            raise ValueError("Invalid value for `force_https`, must not be `None`")

        self._force_https = force_https

    @property
    def groups(self):
        """Gets the groups of this Service.

        Each service descriptor is attached to groups. A group can have one or more services. Each API key is linked to a group and allow access to every service in the group

        :return: The groups of this Service.
        :rtype: List[str]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this Service.

        Each service descriptor is attached to groups. A group can have one or more services. Each API key is linked to a group and allow access to every service in the group

        :param groups: The groups of this Service.
        :type groups: List[str]
        """
        if groups is None:
            raise ValueError("Invalid value for `groups`, must not be `None`")

        self._groups = groups

    @property
    def gzip(self):
        """Gets the gzip of this Service.


        :return: The gzip of this Service.
        :rtype: Gzip
        """
        return self._gzip

    @gzip.setter
    def gzip(self, gzip):
        """Sets the gzip of this Service.


        :param gzip: The gzip of this Service.
        :type gzip: Gzip
        """

        self._gzip = gzip

    @property
    def headers_verification(self):
        """Gets the headers_verification of this Service.

        Specify headers that will be verified after routing.

        :return: The headers_verification of this Service.
        :rtype: Dict[str, str]
        """
        return self._headers_verification

    @headers_verification.setter
    def headers_verification(self, headers_verification):
        """Sets the headers_verification of this Service.

        Specify headers that will be verified after routing.

        :param headers_verification: The headers_verification of this Service.
        :type headers_verification: Dict[str, str]
        """

        self._headers_verification = headers_verification

    @property
    def health_check(self):
        """Gets the health_check of this Service.


        :return: The health_check of this Service.
        :rtype: HealthCheck
        """
        return self._health_check

    @health_check.setter
    def health_check(self, health_check):
        """Sets the health_check of this Service.


        :param health_check: The health_check of this Service.
        :type health_check: HealthCheck
        """

        self._health_check = health_check

    @property
    def id(self):
        """Gets the id of this Service.

        A unique random string to identify your service

        :return: The id of this Service.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Service.

        A unique random string to identify your service

        :param id: The id of this Service.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def ip_filtering(self):
        """Gets the ip_filtering of this Service.


        :return: The ip_filtering of this Service.
        :rtype: IpFiltering
        """
        return self._ip_filtering

    @ip_filtering.setter
    def ip_filtering(self, ip_filtering):
        """Sets the ip_filtering of this Service.


        :param ip_filtering: The ip_filtering of this Service.
        :type ip_filtering: IpFiltering
        """

        self._ip_filtering = ip_filtering

    @property
    def jwt_verifier(self):
        """Gets the jwt_verifier of this Service.


        :return: The jwt_verifier of this Service.
        :rtype: ImportExportServiceDescriptorsInnerJwtVerifier
        """
        return self._jwt_verifier

    @jwt_verifier.setter
    def jwt_verifier(self, jwt_verifier):
        """Sets the jwt_verifier of this Service.


        :param jwt_verifier: The jwt_verifier of this Service.
        :type jwt_verifier: ImportExportServiceDescriptorsInnerJwtVerifier
        """

        self._jwt_verifier = jwt_verifier

    @property
    def local_host(self):
        """Gets the local_host of this Service.

        The host used localy, mainly localhost:xxxx

        :return: The local_host of this Service.
        :rtype: str
        """
        return self._local_host

    @local_host.setter
    def local_host(self, local_host):
        """Sets the local_host of this Service.

        The host used localy, mainly localhost:xxxx

        :param local_host: The local_host of this Service.
        :type local_host: str
        """

        self._local_host = local_host

    @property
    def local_scheme(self):
        """Gets the local_scheme of this Service.

        The scheme used localy, mainly http

        :return: The local_scheme of this Service.
        :rtype: str
        """
        return self._local_scheme

    @local_scheme.setter
    def local_scheme(self, local_scheme):
        """Sets the local_scheme of this Service.

        The scheme used localy, mainly http

        :param local_scheme: The local_scheme of this Service.
        :type local_scheme: str
        """

        self._local_scheme = local_scheme

    @property
    def maintenance_mode(self):
        """Gets the maintenance_mode of this Service.

        Display a maintainance page when a user try to use the service

        :return: The maintenance_mode of this Service.
        :rtype: bool
        """
        return self._maintenance_mode

    @maintenance_mode.setter
    def maintenance_mode(self, maintenance_mode):
        """Sets the maintenance_mode of this Service.

        Display a maintainance page when a user try to use the service

        :param maintenance_mode: The maintenance_mode of this Service.
        :type maintenance_mode: bool
        """
        if maintenance_mode is None:
            raise ValueError("Invalid value for `maintenance_mode`, must not be `None`")

        self._maintenance_mode = maintenance_mode

    @property
    def matching_headers(self):
        """Gets the matching_headers of this Service.

        Specify headers that MUST be present on client request to route it. Useful to implement versioning

        :return: The matching_headers of this Service.
        :rtype: Dict[str, str]
        """
        return self._matching_headers

    @matching_headers.setter
    def matching_headers(self, matching_headers):
        """Sets the matching_headers of this Service.

        Specify headers that MUST be present on client request to route it. Useful to implement versioning

        :param matching_headers: The matching_headers of this Service.
        :type matching_headers: Dict[str, str]
        """

        self._matching_headers = matching_headers

    @property
    def matching_root(self):
        """Gets the matching_root of this Service.

        The root path on which the service is available

        :return: The matching_root of this Service.
        :rtype: str
        """
        return self._matching_root

    @matching_root.setter
    def matching_root(self, matching_root):
        """Sets the matching_root of this Service.

        The root path on which the service is available

        :param matching_root: The matching_root of this Service.
        :type matching_root: str
        """

        self._matching_root = matching_root

    @property
    def metadata(self):
        """Gets the metadata of this Service.

        Just a bunch of random properties

        :return: The metadata of this Service.
        :rtype: Dict[str, str]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Service.

        Just a bunch of random properties

        :param metadata: The metadata of this Service.
        :type metadata: Dict[str, str]
        """

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this Service.

        The name of your service. Only for debug and human readability purposes

        :return: The name of this Service.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Service.

        The name of your service. Only for debug and human readability purposes

        :param name: The name of this Service.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def override_host(self):
        """Gets the override_host of this Service.

        Host header will be overriden with Host of the target

        :return: The override_host of this Service.
        :rtype: bool
        """
        return self._override_host

    @override_host.setter
    def override_host(self, override_host):
        """Sets the override_host of this Service.

        Host header will be overriden with Host of the target

        :param override_host: The override_host of this Service.
        :type override_host: bool
        """

        self._override_host = override_host

    @property
    def private_app(self):
        """Gets the private_app of this Service.

        When enabled, user will be allowed to use the service (UI) only if they are registered users of the private apps domain

        :return: The private_app of this Service.
        :rtype: bool
        """
        return self._private_app

    @private_app.setter
    def private_app(self, private_app):
        """Sets the private_app of this Service.

        When enabled, user will be allowed to use the service (UI) only if they are registered users of the private apps domain

        :param private_app: The private_app of this Service.
        :type private_app: bool
        """
        if private_app is None:
            raise ValueError("Invalid value for `private_app`, must not be `None`")

        self._private_app = private_app

    @property
    def private_patterns(self):
        """Gets the private_patterns of this Service.

        If you define a public pattern that is a little bit too much, you can make some of public URL private again

        :return: The private_patterns of this Service.
        :rtype: List[str]
        """
        return self._private_patterns

    @private_patterns.setter
    def private_patterns(self, private_patterns):
        """Sets the private_patterns of this Service.

        If you define a public pattern that is a little bit too much, you can make some of public URL private again

        :param private_patterns: The private_patterns of this Service.
        :type private_patterns: List[str]
        """

        self._private_patterns = private_patterns

    @property
    def public_patterns(self):
        """Gets the public_patterns of this Service.

        By default, every services are private only and you'll need an API key to access it. However, if you want to expose a public UI, you can define one or more public patterns (regex) to allow access to anybody. For example if you want to allow anybody on any URL, just use '/.*'

        :return: The public_patterns of this Service.
        :rtype: List[str]
        """
        return self._public_patterns

    @public_patterns.setter
    def public_patterns(self, public_patterns):
        """Sets the public_patterns of this Service.

        By default, every services are private only and you'll need an API key to access it. However, if you want to expose a public UI, you can define one or more public patterns (regex) to allow access to anybody. For example if you want to allow anybody on any URL, just use '/.*'

        :param public_patterns: The public_patterns of this Service.
        :type public_patterns: List[str]
        """

        self._public_patterns = public_patterns

    @property
    def redirect_to_local(self):
        """Gets the redirect_to_local of this Service.

        If you work locally with Otoroshi, you may want to use that feature to redirect one particuliar service to a local host. For example, you can relocate https://foo.preprod.bar.com to http://localhost:8080 to make some tests

        :return: The redirect_to_local of this Service.
        :rtype: bool
        """
        return self._redirect_to_local

    @redirect_to_local.setter
    def redirect_to_local(self, redirect_to_local):
        """Sets the redirect_to_local of this Service.

        If you work locally with Otoroshi, you may want to use that feature to redirect one particuliar service to a local host. For example, you can relocate https://foo.preprod.bar.com to http://localhost:8080 to make some tests

        :param redirect_to_local: The redirect_to_local of this Service.
        :type redirect_to_local: bool
        """

        self._redirect_to_local = redirect_to_local

    @property
    def redirection(self):
        """Gets the redirection of this Service.


        :return: The redirection of this Service.
        :rtype: RedirectionSettings
        """
        return self._redirection

    @redirection.setter
    def redirection(self, redirection):
        """Sets the redirection of this Service.


        :param redirection: The redirection of this Service.
        :type redirection: RedirectionSettings
        """

        self._redirection = redirection

    @property
    def root(self):
        """Gets the root of this Service.

        Otoroshi will append this root to any target choosen. If the specified root is '/api/foo', then a request to https://yyyyyyy/bar will actually hit https://xxxxxxxxx/api/foo/bar

        :return: The root of this Service.
        :rtype: str
        """
        return self._root

    @root.setter
    def root(self, root):
        """Sets the root of this Service.

        Otoroshi will append this root to any target choosen. If the specified root is '/api/foo', then a request to https://yyyyyyy/bar will actually hit https://xxxxxxxxx/api/foo/bar

        :param root: The root of this Service.
        :type root: str
        """
        if root is None:
            raise ValueError("Invalid value for `root`, must not be `None`")

        self._root = root

    @property
    def sec_com_excluded_patterns(self):
        """Gets the sec_com_excluded_patterns of this Service.

        URI patterns excluded from secured communications

        :return: The sec_com_excluded_patterns of this Service.
        :rtype: List[str]
        """
        return self._sec_com_excluded_patterns

    @sec_com_excluded_patterns.setter
    def sec_com_excluded_patterns(self, sec_com_excluded_patterns):
        """Sets the sec_com_excluded_patterns of this Service.

        URI patterns excluded from secured communications

        :param sec_com_excluded_patterns: The sec_com_excluded_patterns of this Service.
        :type sec_com_excluded_patterns: List[str]
        """

        self._sec_com_excluded_patterns = sec_com_excluded_patterns

    @property
    def sec_com_settings(self):
        """Gets the sec_com_settings of this Service.


        :return: The sec_com_settings of this Service.
        :rtype: GlobalJwtVerifierAlgoSettings
        """
        return self._sec_com_settings

    @sec_com_settings.setter
    def sec_com_settings(self, sec_com_settings):
        """Sets the sec_com_settings of this Service.


        :param sec_com_settings: The sec_com_settings of this Service.
        :type sec_com_settings: GlobalJwtVerifierAlgoSettings
        """

        self._sec_com_settings = sec_com_settings

    @property
    def send_otoroshi_headers_back(self):
        """Gets the send_otoroshi_headers_back of this Service.

        When enabled, Otoroshi will send headers to consumer like request id, client latency, overhead, etc ...

        :return: The send_otoroshi_headers_back of this Service.
        :rtype: bool
        """
        return self._send_otoroshi_headers_back

    @send_otoroshi_headers_back.setter
    def send_otoroshi_headers_back(self, send_otoroshi_headers_back):
        """Sets the send_otoroshi_headers_back of this Service.

        When enabled, Otoroshi will send headers to consumer like request id, client latency, overhead, etc ...

        :param send_otoroshi_headers_back: The send_otoroshi_headers_back of this Service.
        :type send_otoroshi_headers_back: bool
        """

        self._send_otoroshi_headers_back = send_otoroshi_headers_back

    @property
    def statsd_config(self):
        """Gets the statsd_config of this Service.


        :return: The statsd_config of this Service.
        :rtype: StatsdConfig
        """
        return self._statsd_config

    @statsd_config.setter
    def statsd_config(self, statsd_config):
        """Sets the statsd_config of this Service.


        :param statsd_config: The statsd_config of this Service.
        :type statsd_config: StatsdConfig
        """

        self._statsd_config = statsd_config

    @property
    def subdomain(self):
        """Gets the subdomain of this Service.

        The subdomain on which the service is available

        :return: The subdomain of this Service.
        :rtype: str
        """
        return self._subdomain

    @subdomain.setter
    def subdomain(self, subdomain):
        """Sets the subdomain of this Service.

        The subdomain on which the service is available

        :param subdomain: The subdomain of this Service.
        :type subdomain: str
        """
        if subdomain is None:
            raise ValueError("Invalid value for `subdomain`, must not be `None`")

        self._subdomain = subdomain

    @property
    def targets(self):
        """Gets the targets of this Service.

        The list of target that Otoroshi will proxy and expose through the subdomain defined before. Otoroshi will do round-robin load balancing between all those targets with circuit breaker mecanism to avoid cascading failures

        :return: The targets of this Service.
        :rtype: List[Target]
        """
        return self._targets

    @targets.setter
    def targets(self, targets):
        """Sets the targets of this Service.

        The list of target that Otoroshi will proxy and expose through the subdomain defined before. Otoroshi will do round-robin load balancing between all those targets with circuit breaker mecanism to avoid cascading failures

        :param targets: The targets of this Service.
        :type targets: List[Target]
        """
        if targets is None:
            raise ValueError("Invalid value for `targets`, must not be `None`")

        self._targets = targets

    @property
    def transformer_ref(self):
        """Gets the transformer_ref of this Service.

        A reference to a request transformer

        :return: The transformer_ref of this Service.
        :rtype: str
        """
        return self._transformer_ref

    @transformer_ref.setter
    def transformer_ref(self, transformer_ref):
        """Sets the transformer_ref of this Service.

        A reference to a request transformer

        :param transformer_ref: The transformer_ref of this Service.
        :type transformer_ref: str
        """

        self._transformer_ref = transformer_ref

    @property
    def user_facing(self):
        """Gets the user_facing of this Service.

        The fact that this service will be seen by users and cannot be impacted by the Snow Monkey

        :return: The user_facing of this Service.
        :rtype: bool
        """
        return self._user_facing

    @user_facing.setter
    def user_facing(self, user_facing):
        """Sets the user_facing of this Service.

        The fact that this service will be seen by users and cannot be impacted by the Snow Monkey

        :param user_facing: The user_facing of this Service.
        :type user_facing: bool
        """

        self._user_facing = user_facing

    @property
    def x_forwarded_headers(self):
        """Gets the x_forwarded_headers of this Service.

        Send X-Forwarded-* headers

        :return: The x_forwarded_headers of this Service.
        :rtype: bool
        """
        return self._x_forwarded_headers

    @x_forwarded_headers.setter
    def x_forwarded_headers(self, x_forwarded_headers):
        """Sets the x_forwarded_headers of this Service.

        Send X-Forwarded-* headers

        :param x_forwarded_headers: The x_forwarded_headers of this Service.
        :type x_forwarded_headers: bool
        """

        self._x_forwarded_headers = x_forwarded_headers
