# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MailerMailgunExporterConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_key: str=None, domain: str=None, eu: bool=None, to: List[str]=None, type: str=None):
        """MailerMailgunExporterConfig - a model defined in OpenAPI

        :param api_key: The api_key of this MailerMailgunExporterConfig.
        :param domain: The domain of this MailerMailgunExporterConfig.
        :param eu: The eu of this MailerMailgunExporterConfig.
        :param to: The to of this MailerMailgunExporterConfig.
        :param type: The type of this MailerMailgunExporterConfig.
        """
        self.openapi_types = {
            'api_key': str,
            'domain': str,
            'eu': bool,
            'to': List[str],
            'type': str
        }

        self.attribute_map = {
            'api_key': 'apiKey',
            'domain': 'domain',
            'eu': 'eu',
            'to': 'to',
            'type': 'type'
        }

        self._api_key = api_key
        self._domain = domain
        self._eu = eu
        self._to = to
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MailerMailgunExporterConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MailerMailgunExporterConfig of this MailerMailgunExporterConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_key(self):
        """Gets the api_key of this MailerMailgunExporterConfig.

        Mailgun apiKey

        :return: The api_key of this MailerMailgunExporterConfig.
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this MailerMailgunExporterConfig.

        Mailgun apiKey

        :param api_key: The api_key of this MailerMailgunExporterConfig.
        :type api_key: str
        """

        self._api_key = api_key

    @property
    def domain(self):
        """Gets the domain of this MailerMailgunExporterConfig.

        Mailgun domain

        :return: The domain of this MailerMailgunExporterConfig.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this MailerMailgunExporterConfig.

        Mailgun domain

        :param domain: The domain of this MailerMailgunExporterConfig.
        :type domain: str
        """

        self._domain = domain

    @property
    def eu(self):
        """Gets the eu of this MailerMailgunExporterConfig.

        Whether the mailgun server is european

        :return: The eu of this MailerMailgunExporterConfig.
        :rtype: bool
        """
        return self._eu

    @eu.setter
    def eu(self, eu):
        """Sets the eu of this MailerMailgunExporterConfig.

        Whether the mailgun server is european

        :param eu: The eu of this MailerMailgunExporterConfig.
        :type eu: bool
        """

        self._eu = eu

    @property
    def to(self):
        """Gets the to of this MailerMailgunExporterConfig.

        Email adresses of recipents

        :return: The to of this MailerMailgunExporterConfig.
        :rtype: List[str]
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this MailerMailgunExporterConfig.

        Email adresses of recipents

        :param to: The to of this MailerMailgunExporterConfig.
        :type to: List[str]
        """

        self._to = to

    @property
    def type(self):
        """Gets the type of this MailerMailgunExporterConfig.

        Type of mailer

        :return: The type of this MailerMailgunExporterConfig.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MailerMailgunExporterConfig.

        Type of mailer

        :param type: The type of this MailerMailgunExporterConfig.
        :type type: str
        """
        allowed_values = ["mailgun"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
