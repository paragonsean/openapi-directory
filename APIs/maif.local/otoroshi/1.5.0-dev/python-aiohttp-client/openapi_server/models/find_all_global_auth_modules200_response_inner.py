# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.generic_oauth2_module_config import GenericOauth2ModuleConfig
from openapi_server.models.generic_oauth2_module_config_jwt_verifier import GenericOauth2ModuleConfigJwtVerifier
from openapi_server.models.in_memory_auth_module_config import InMemoryAuthModuleConfig
from openapi_server.models.in_memory_user import InMemoryUser
from openapi_server.models.ldap_auth_module_config import LdapAuthModuleConfig
from openapi_server import util


class FindAllGlobalAuthModules200ResponseInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, admin_password: str=None, admin_username: str=None, desc: str=None, email_field: str=None, group_filter: str=None, id: str=None, name: str=None, name_field: str=None, otoroshi_data_field: str=None, search_base: str=None, search_filter: str=None, server_url: str=None, session_max_age: int=None, type: str=None, user_base: str=None, users: List[InMemoryUser]=None, access_token_field: str=None, authorize_url: str=None, callback_url: str=None, claims: str=None, client_id: str=None, client_secret: str=None, jwt_verifier: GenericOauth2ModuleConfigJwtVerifier=None, login_url: str=None, logout_url: str=None, oid_config: str=None, read_profile_from_token: bool=None, scope: str=None, token_url: str=None, use_cookies: bool=None, use_json: bool=None, user_info_url: str=None):
        """FindAllGlobalAuthModules200ResponseInner - a model defined in OpenAPI

        :param admin_password: The admin_password of this FindAllGlobalAuthModules200ResponseInner.
        :param admin_username: The admin_username of this FindAllGlobalAuthModules200ResponseInner.
        :param desc: The desc of this FindAllGlobalAuthModules200ResponseInner.
        :param email_field: The email_field of this FindAllGlobalAuthModules200ResponseInner.
        :param group_filter: The group_filter of this FindAllGlobalAuthModules200ResponseInner.
        :param id: The id of this FindAllGlobalAuthModules200ResponseInner.
        :param name: The name of this FindAllGlobalAuthModules200ResponseInner.
        :param name_field: The name_field of this FindAllGlobalAuthModules200ResponseInner.
        :param otoroshi_data_field: The otoroshi_data_field of this FindAllGlobalAuthModules200ResponseInner.
        :param search_base: The search_base of this FindAllGlobalAuthModules200ResponseInner.
        :param search_filter: The search_filter of this FindAllGlobalAuthModules200ResponseInner.
        :param server_url: The server_url of this FindAllGlobalAuthModules200ResponseInner.
        :param session_max_age: The session_max_age of this FindAllGlobalAuthModules200ResponseInner.
        :param type: The type of this FindAllGlobalAuthModules200ResponseInner.
        :param user_base: The user_base of this FindAllGlobalAuthModules200ResponseInner.
        :param users: The users of this FindAllGlobalAuthModules200ResponseInner.
        :param access_token_field: The access_token_field of this FindAllGlobalAuthModules200ResponseInner.
        :param authorize_url: The authorize_url of this FindAllGlobalAuthModules200ResponseInner.
        :param callback_url: The callback_url of this FindAllGlobalAuthModules200ResponseInner.
        :param claims: The claims of this FindAllGlobalAuthModules200ResponseInner.
        :param client_id: The client_id of this FindAllGlobalAuthModules200ResponseInner.
        :param client_secret: The client_secret of this FindAllGlobalAuthModules200ResponseInner.
        :param jwt_verifier: The jwt_verifier of this FindAllGlobalAuthModules200ResponseInner.
        :param login_url: The login_url of this FindAllGlobalAuthModules200ResponseInner.
        :param logout_url: The logout_url of this FindAllGlobalAuthModules200ResponseInner.
        :param oid_config: The oid_config of this FindAllGlobalAuthModules200ResponseInner.
        :param read_profile_from_token: The read_profile_from_token of this FindAllGlobalAuthModules200ResponseInner.
        :param scope: The scope of this FindAllGlobalAuthModules200ResponseInner.
        :param token_url: The token_url of this FindAllGlobalAuthModules200ResponseInner.
        :param use_cookies: The use_cookies of this FindAllGlobalAuthModules200ResponseInner.
        :param use_json: The use_json of this FindAllGlobalAuthModules200ResponseInner.
        :param user_info_url: The user_info_url of this FindAllGlobalAuthModules200ResponseInner.
        """
        self.openapi_types = {
            'admin_password': str,
            'admin_username': str,
            'desc': str,
            'email_field': str,
            'group_filter': str,
            'id': str,
            'name': str,
            'name_field': str,
            'otoroshi_data_field': str,
            'search_base': str,
            'search_filter': str,
            'server_url': str,
            'session_max_age': int,
            'type': str,
            'user_base': str,
            'users': List[InMemoryUser],
            'access_token_field': str,
            'authorize_url': str,
            'callback_url': str,
            'claims': str,
            'client_id': str,
            'client_secret': str,
            'jwt_verifier': GenericOauth2ModuleConfigJwtVerifier,
            'login_url': str,
            'logout_url': str,
            'oid_config': str,
            'read_profile_from_token': bool,
            'scope': str,
            'token_url': str,
            'use_cookies': bool,
            'use_json': bool,
            'user_info_url': str
        }

        self.attribute_map = {
            'admin_password': 'adminPassword',
            'admin_username': 'adminUsername',
            'desc': 'desc',
            'email_field': 'emailField',
            'group_filter': 'groupFilter',
            'id': 'id',
            'name': 'name',
            'name_field': 'nameField',
            'otoroshi_data_field': 'otoroshiDataField',
            'search_base': 'searchBase',
            'search_filter': 'searchFilter',
            'server_url': 'serverUrl',
            'session_max_age': 'sessionMaxAge',
            'type': 'type',
            'user_base': 'userBase',
            'users': 'users',
            'access_token_field': 'accessTokenField',
            'authorize_url': 'authorizeUrl',
            'callback_url': 'callbackUrl',
            'claims': 'claims',
            'client_id': 'clientId',
            'client_secret': 'clientSecret',
            'jwt_verifier': 'jwtVerifier',
            'login_url': 'loginUrl',
            'logout_url': 'logoutUrl',
            'oid_config': 'oidConfig',
            'read_profile_from_token': 'readProfileFromToken',
            'scope': 'scope',
            'token_url': 'tokenUrl',
            'use_cookies': 'useCookies',
            'use_json': 'useJson',
            'user_info_url': 'userInfoUrl'
        }

        self._admin_password = admin_password
        self._admin_username = admin_username
        self._desc = desc
        self._email_field = email_field
        self._group_filter = group_filter
        self._id = id
        self._name = name
        self._name_field = name_field
        self._otoroshi_data_field = otoroshi_data_field
        self._search_base = search_base
        self._search_filter = search_filter
        self._server_url = server_url
        self._session_max_age = session_max_age
        self._type = type
        self._user_base = user_base
        self._users = users
        self._access_token_field = access_token_field
        self._authorize_url = authorize_url
        self._callback_url = callback_url
        self._claims = claims
        self._client_id = client_id
        self._client_secret = client_secret
        self._jwt_verifier = jwt_verifier
        self._login_url = login_url
        self._logout_url = logout_url
        self._oid_config = oid_config
        self._read_profile_from_token = read_profile_from_token
        self._scope = scope
        self._token_url = token_url
        self._use_cookies = use_cookies
        self._use_json = use_json
        self._user_info_url = user_info_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FindAllGlobalAuthModules200ResponseInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The findAllGlobalAuthModules_200_response_inner of this FindAllGlobalAuthModules200ResponseInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def admin_password(self):
        """Gets the admin_password of this FindAllGlobalAuthModules200ResponseInner.

        The admin password

        :return: The admin_password of this FindAllGlobalAuthModules200ResponseInner.
        :rtype: str
        """
        return self._admin_password

    @admin_password.setter
    def admin_password(self, admin_password):
        """Sets the admin_password of this FindAllGlobalAuthModules200ResponseInner.

        The admin password

        :param admin_password: The admin_password of this FindAllGlobalAuthModules200ResponseInner.
        :type admin_password: str
        """
        if admin_password is None:
            raise ValueError("Invalid value for `admin_password`, must not be `None`")

        self._admin_password = admin_password

    @property
    def admin_username(self):
        """Gets the admin_username of this FindAllGlobalAuthModules200ResponseInner.

        The admin username

        :return: The admin_username of this FindAllGlobalAuthModules200ResponseInner.
        :rtype: str
        """
        return self._admin_username

    @admin_username.setter
    def admin_username(self, admin_username):
        """Sets the admin_username of this FindAllGlobalAuthModules200ResponseInner.

        The admin username

        :param admin_username: The admin_username of this FindAllGlobalAuthModules200ResponseInner.
        :type admin_username: str
        """
        if admin_username is None:
            raise ValueError("Invalid value for `admin_username`, must not be `None`")

        self._admin_username = admin_username

    @property
    def desc(self):
        """Gets the desc of this FindAllGlobalAuthModules200ResponseInner.

        Description of the config

        :return: The desc of this FindAllGlobalAuthModules200ResponseInner.
        :rtype: str
        """
        return self._desc

    @desc.setter
    def desc(self, desc):
        """Sets the desc of this FindAllGlobalAuthModules200ResponseInner.

        Description of the config

        :param desc: The desc of this FindAllGlobalAuthModules200ResponseInner.
        :type desc: str
        """
        if desc is None:
            raise ValueError("Invalid value for `desc`, must not be `None`")

        self._desc = desc

    @property
    def email_field(self):
        """Gets the email_field of this FindAllGlobalAuthModules200ResponseInner.

        Field name to get email from user profile

        :return: The email_field of this FindAllGlobalAuthModules200ResponseInner.
        :rtype: str
        """
        return self._email_field

    @email_field.setter
    def email_field(self, email_field):
        """Sets the email_field of this FindAllGlobalAuthModules200ResponseInner.

        Field name to get email from user profile

        :param email_field: The email_field of this FindAllGlobalAuthModules200ResponseInner.
        :type email_field: str
        """
        if email_field is None:
            raise ValueError("Invalid value for `email_field`, must not be `None`")

        self._email_field = email_field

    @property
    def group_filter(self):
        """Gets the group_filter of this FindAllGlobalAuthModules200ResponseInner.

        Filter for groups

        :return: The group_filter of this FindAllGlobalAuthModules200ResponseInner.
        :rtype: str
        """
        return self._group_filter

    @group_filter.setter
    def group_filter(self, group_filter):
        """Sets the group_filter of this FindAllGlobalAuthModules200ResponseInner.

        Filter for groups

        :param group_filter: The group_filter of this FindAllGlobalAuthModules200ResponseInner.
        :type group_filter: str
        """
        if group_filter is None:
            raise ValueError("Invalid value for `group_filter`, must not be `None`")

        self._group_filter = group_filter

    @property
    def id(self):
        """Gets the id of this FindAllGlobalAuthModules200ResponseInner.

        Unique id of the config

        :return: The id of this FindAllGlobalAuthModules200ResponseInner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FindAllGlobalAuthModules200ResponseInner.

        Unique id of the config

        :param id: The id of this FindAllGlobalAuthModules200ResponseInner.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this FindAllGlobalAuthModules200ResponseInner.

        Name of the config

        :return: The name of this FindAllGlobalAuthModules200ResponseInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FindAllGlobalAuthModules200ResponseInner.

        Name of the config

        :param name: The name of this FindAllGlobalAuthModules200ResponseInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def name_field(self):
        """Gets the name_field of this FindAllGlobalAuthModules200ResponseInner.

        Field name to get name from user profile

        :return: The name_field of this FindAllGlobalAuthModules200ResponseInner.
        :rtype: str
        """
        return self._name_field

    @name_field.setter
    def name_field(self, name_field):
        """Sets the name_field of this FindAllGlobalAuthModules200ResponseInner.

        Field name to get name from user profile

        :param name_field: The name_field of this FindAllGlobalAuthModules200ResponseInner.
        :type name_field: str
        """
        if name_field is None:
            raise ValueError("Invalid value for `name_field`, must not be `None`")

        self._name_field = name_field

    @property
    def otoroshi_data_field(self):
        """Gets the otoroshi_data_field of this FindAllGlobalAuthModules200ResponseInner.

        Field name to get otoroshi metadata from. You can specify sub fields using | as separator

        :return: The otoroshi_data_field of this FindAllGlobalAuthModules200ResponseInner.
        :rtype: str
        """
        return self._otoroshi_data_field

    @otoroshi_data_field.setter
    def otoroshi_data_field(self, otoroshi_data_field):
        """Sets the otoroshi_data_field of this FindAllGlobalAuthModules200ResponseInner.

        Field name to get otoroshi metadata from. You can specify sub fields using | as separator

        :param otoroshi_data_field: The otoroshi_data_field of this FindAllGlobalAuthModules200ResponseInner.
        :type otoroshi_data_field: str
        """
        if otoroshi_data_field is None:
            raise ValueError("Invalid value for `otoroshi_data_field`, must not be `None`")

        self._otoroshi_data_field = otoroshi_data_field

    @property
    def search_base(self):
        """Gets the search_base of this FindAllGlobalAuthModules200ResponseInner.

        LDAP search base

        :return: The search_base of this FindAllGlobalAuthModules200ResponseInner.
        :rtype: str
        """
        return self._search_base

    @search_base.setter
    def search_base(self, search_base):
        """Sets the search_base of this FindAllGlobalAuthModules200ResponseInner.

        LDAP search base

        :param search_base: The search_base of this FindAllGlobalAuthModules200ResponseInner.
        :type search_base: str
        """
        if search_base is None:
            raise ValueError("Invalid value for `search_base`, must not be `None`")

        self._search_base = search_base

    @property
    def search_filter(self):
        """Gets the search_filter of this FindAllGlobalAuthModules200ResponseInner.

        Filter for users

        :return: The search_filter of this FindAllGlobalAuthModules200ResponseInner.
        :rtype: str
        """
        return self._search_filter

    @search_filter.setter
    def search_filter(self, search_filter):
        """Sets the search_filter of this FindAllGlobalAuthModules200ResponseInner.

        Filter for users

        :param search_filter: The search_filter of this FindAllGlobalAuthModules200ResponseInner.
        :type search_filter: str
        """
        if search_filter is None:
            raise ValueError("Invalid value for `search_filter`, must not be `None`")

        self._search_filter = search_filter

    @property
    def server_url(self):
        """Gets the server_url of this FindAllGlobalAuthModules200ResponseInner.

        URL of the ldap server

        :return: The server_url of this FindAllGlobalAuthModules200ResponseInner.
        :rtype: str
        """
        return self._server_url

    @server_url.setter
    def server_url(self, server_url):
        """Sets the server_url of this FindAllGlobalAuthModules200ResponseInner.

        URL of the ldap server

        :param server_url: The server_url of this FindAllGlobalAuthModules200ResponseInner.
        :type server_url: str
        """
        if server_url is None:
            raise ValueError("Invalid value for `server_url`, must not be `None`")

        self._server_url = server_url

    @property
    def session_max_age(self):
        """Gets the session_max_age of this FindAllGlobalAuthModules200ResponseInner.

        Max age of the session

        :return: The session_max_age of this FindAllGlobalAuthModules200ResponseInner.
        :rtype: int
        """
        return self._session_max_age

    @session_max_age.setter
    def session_max_age(self, session_max_age):
        """Sets the session_max_age of this FindAllGlobalAuthModules200ResponseInner.

        Max age of the session

        :param session_max_age: The session_max_age of this FindAllGlobalAuthModules200ResponseInner.
        :type session_max_age: int
        """
        if session_max_age is None:
            raise ValueError("Invalid value for `session_max_age`, must not be `None`")

        self._session_max_age = session_max_age

    @property
    def type(self):
        """Gets the type of this FindAllGlobalAuthModules200ResponseInner.

        Type of settings. value is oauth2

        :return: The type of this FindAllGlobalAuthModules200ResponseInner.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FindAllGlobalAuthModules200ResponseInner.

        Type of settings. value is oauth2

        :param type: The type of this FindAllGlobalAuthModules200ResponseInner.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def user_base(self):
        """Gets the user_base of this FindAllGlobalAuthModules200ResponseInner.

        LDAP user base DN

        :return: The user_base of this FindAllGlobalAuthModules200ResponseInner.
        :rtype: str
        """
        return self._user_base

    @user_base.setter
    def user_base(self, user_base):
        """Sets the user_base of this FindAllGlobalAuthModules200ResponseInner.

        LDAP user base DN

        :param user_base: The user_base of this FindAllGlobalAuthModules200ResponseInner.
        :type user_base: str
        """
        if user_base is None:
            raise ValueError("Invalid value for `user_base`, must not be `None`")

        self._user_base = user_base

    @property
    def users(self):
        """Gets the users of this FindAllGlobalAuthModules200ResponseInner.

        List of users

        :return: The users of this FindAllGlobalAuthModules200ResponseInner.
        :rtype: List[InMemoryUser]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this FindAllGlobalAuthModules200ResponseInner.

        List of users

        :param users: The users of this FindAllGlobalAuthModules200ResponseInner.
        :type users: List[InMemoryUser]
        """
        if users is None:
            raise ValueError("Invalid value for `users`, must not be `None`")

        self._users = users

    @property
    def access_token_field(self):
        """Gets the access_token_field of this FindAllGlobalAuthModules200ResponseInner.

        Field name to get access token

        :return: The access_token_field of this FindAllGlobalAuthModules200ResponseInner.
        :rtype: str
        """
        return self._access_token_field

    @access_token_field.setter
    def access_token_field(self, access_token_field):
        """Sets the access_token_field of this FindAllGlobalAuthModules200ResponseInner.

        Field name to get access token

        :param access_token_field: The access_token_field of this FindAllGlobalAuthModules200ResponseInner.
        :type access_token_field: str
        """
        if access_token_field is None:
            raise ValueError("Invalid value for `access_token_field`, must not be `None`")

        self._access_token_field = access_token_field

    @property
    def authorize_url(self):
        """Gets the authorize_url of this FindAllGlobalAuthModules200ResponseInner.

        OAuth authorize URL

        :return: The authorize_url of this FindAllGlobalAuthModules200ResponseInner.
        :rtype: str
        """
        return self._authorize_url

    @authorize_url.setter
    def authorize_url(self, authorize_url):
        """Sets the authorize_url of this FindAllGlobalAuthModules200ResponseInner.

        OAuth authorize URL

        :param authorize_url: The authorize_url of this FindAllGlobalAuthModules200ResponseInner.
        :type authorize_url: str
        """
        if authorize_url is None:
            raise ValueError("Invalid value for `authorize_url`, must not be `None`")

        self._authorize_url = authorize_url

    @property
    def callback_url(self):
        """Gets the callback_url of this FindAllGlobalAuthModules200ResponseInner.

        Otoroshi callback URL

        :return: The callback_url of this FindAllGlobalAuthModules200ResponseInner.
        :rtype: str
        """
        return self._callback_url

    @callback_url.setter
    def callback_url(self, callback_url):
        """Sets the callback_url of this FindAllGlobalAuthModules200ResponseInner.

        Otoroshi callback URL

        :param callback_url: The callback_url of this FindAllGlobalAuthModules200ResponseInner.
        :type callback_url: str
        """
        if callback_url is None:
            raise ValueError("Invalid value for `callback_url`, must not be `None`")

        self._callback_url = callback_url

    @property
    def claims(self):
        """Gets the claims of this FindAllGlobalAuthModules200ResponseInner.

        The claims of the token

        :return: The claims of this FindAllGlobalAuthModules200ResponseInner.
        :rtype: str
        """
        return self._claims

    @claims.setter
    def claims(self, claims):
        """Sets the claims of this FindAllGlobalAuthModules200ResponseInner.

        The claims of the token

        :param claims: The claims of this FindAllGlobalAuthModules200ResponseInner.
        :type claims: str
        """

        self._claims = claims

    @property
    def client_id(self):
        """Gets the client_id of this FindAllGlobalAuthModules200ResponseInner.

        OAuth Client id

        :return: The client_id of this FindAllGlobalAuthModules200ResponseInner.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this FindAllGlobalAuthModules200ResponseInner.

        OAuth Client id

        :param client_id: The client_id of this FindAllGlobalAuthModules200ResponseInner.
        :type client_id: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")

        self._client_id = client_id

    @property
    def client_secret(self):
        """Gets the client_secret of this FindAllGlobalAuthModules200ResponseInner.

        OAuth Client secret

        :return: The client_secret of this FindAllGlobalAuthModules200ResponseInner.
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this FindAllGlobalAuthModules200ResponseInner.

        OAuth Client secret

        :param client_secret: The client_secret of this FindAllGlobalAuthModules200ResponseInner.
        :type client_secret: str
        """
        if client_secret is None:
            raise ValueError("Invalid value for `client_secret`, must not be `None`")

        self._client_secret = client_secret

    @property
    def jwt_verifier(self):
        """Gets the jwt_verifier of this FindAllGlobalAuthModules200ResponseInner.


        :return: The jwt_verifier of this FindAllGlobalAuthModules200ResponseInner.
        :rtype: GenericOauth2ModuleConfigJwtVerifier
        """
        return self._jwt_verifier

    @jwt_verifier.setter
    def jwt_verifier(self, jwt_verifier):
        """Sets the jwt_verifier of this FindAllGlobalAuthModules200ResponseInner.


        :param jwt_verifier: The jwt_verifier of this FindAllGlobalAuthModules200ResponseInner.
        :type jwt_verifier: GenericOauth2ModuleConfigJwtVerifier
        """

        self._jwt_verifier = jwt_verifier

    @property
    def login_url(self):
        """Gets the login_url of this FindAllGlobalAuthModules200ResponseInner.

        OAuth login URL

        :return: The login_url of this FindAllGlobalAuthModules200ResponseInner.
        :rtype: str
        """
        return self._login_url

    @login_url.setter
    def login_url(self, login_url):
        """Sets the login_url of this FindAllGlobalAuthModules200ResponseInner.

        OAuth login URL

        :param login_url: The login_url of this FindAllGlobalAuthModules200ResponseInner.
        :type login_url: str
        """
        if login_url is None:
            raise ValueError("Invalid value for `login_url`, must not be `None`")

        self._login_url = login_url

    @property
    def logout_url(self):
        """Gets the logout_url of this FindAllGlobalAuthModules200ResponseInner.

        OAuth logout URL

        :return: The logout_url of this FindAllGlobalAuthModules200ResponseInner.
        :rtype: str
        """
        return self._logout_url

    @logout_url.setter
    def logout_url(self, logout_url):
        """Sets the logout_url of this FindAllGlobalAuthModules200ResponseInner.

        OAuth logout URL

        :param logout_url: The logout_url of this FindAllGlobalAuthModules200ResponseInner.
        :type logout_url: str
        """
        if logout_url is None:
            raise ValueError("Invalid value for `logout_url`, must not be `None`")

        self._logout_url = logout_url

    @property
    def oid_config(self):
        """Gets the oid_config of this FindAllGlobalAuthModules200ResponseInner.

        URL of the OIDC config. file

        :return: The oid_config of this FindAllGlobalAuthModules200ResponseInner.
        :rtype: str
        """
        return self._oid_config

    @oid_config.setter
    def oid_config(self, oid_config):
        """Sets the oid_config of this FindAllGlobalAuthModules200ResponseInner.

        URL of the OIDC config. file

        :param oid_config: The oid_config of this FindAllGlobalAuthModules200ResponseInner.
        :type oid_config: str
        """

        self._oid_config = oid_config

    @property
    def read_profile_from_token(self):
        """Gets the read_profile_from_token of this FindAllGlobalAuthModules200ResponseInner.

        The user profile will be read from the JWT token in id_token

        :return: The read_profile_from_token of this FindAllGlobalAuthModules200ResponseInner.
        :rtype: bool
        """
        return self._read_profile_from_token

    @read_profile_from_token.setter
    def read_profile_from_token(self, read_profile_from_token):
        """Sets the read_profile_from_token of this FindAllGlobalAuthModules200ResponseInner.

        The user profile will be read from the JWT token in id_token

        :param read_profile_from_token: The read_profile_from_token of this FindAllGlobalAuthModules200ResponseInner.
        :type read_profile_from_token: bool
        """

        self._read_profile_from_token = read_profile_from_token

    @property
    def scope(self):
        """Gets the scope of this FindAllGlobalAuthModules200ResponseInner.

        The scope of the token

        :return: The scope of this FindAllGlobalAuthModules200ResponseInner.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this FindAllGlobalAuthModules200ResponseInner.

        The scope of the token

        :param scope: The scope of this FindAllGlobalAuthModules200ResponseInner.
        :type scope: str
        """

        self._scope = scope

    @property
    def token_url(self):
        """Gets the token_url of this FindAllGlobalAuthModules200ResponseInner.

        OAuth token URL

        :return: The token_url of this FindAllGlobalAuthModules200ResponseInner.
        :rtype: str
        """
        return self._token_url

    @token_url.setter
    def token_url(self, token_url):
        """Sets the token_url of this FindAllGlobalAuthModules200ResponseInner.

        OAuth token URL

        :param token_url: The token_url of this FindAllGlobalAuthModules200ResponseInner.
        :type token_url: str
        """
        if token_url is None:
            raise ValueError("Invalid value for `token_url`, must not be `None`")

        self._token_url = token_url

    @property
    def use_cookies(self):
        """Gets the use_cookies of this FindAllGlobalAuthModules200ResponseInner.

        Use for redirection to actual service

        :return: The use_cookies of this FindAllGlobalAuthModules200ResponseInner.
        :rtype: bool
        """
        return self._use_cookies

    @use_cookies.setter
    def use_cookies(self, use_cookies):
        """Sets the use_cookies of this FindAllGlobalAuthModules200ResponseInner.

        Use for redirection to actual service

        :param use_cookies: The use_cookies of this FindAllGlobalAuthModules200ResponseInner.
        :type use_cookies: bool
        """

        self._use_cookies = use_cookies

    @property
    def use_json(self):
        """Gets the use_json of this FindAllGlobalAuthModules200ResponseInner.

        Use JSON or URL Form Encoded as payload with the OAuth provider

        :return: The use_json of this FindAllGlobalAuthModules200ResponseInner.
        :rtype: bool
        """
        return self._use_json

    @use_json.setter
    def use_json(self, use_json):
        """Sets the use_json of this FindAllGlobalAuthModules200ResponseInner.

        Use JSON or URL Form Encoded as payload with the OAuth provider

        :param use_json: The use_json of this FindAllGlobalAuthModules200ResponseInner.
        :type use_json: bool
        """

        self._use_json = use_json

    @property
    def user_info_url(self):
        """Gets the user_info_url of this FindAllGlobalAuthModules200ResponseInner.

        OAuth userinfo to get user profile

        :return: The user_info_url of this FindAllGlobalAuthModules200ResponseInner.
        :rtype: str
        """
        return self._user_info_url

    @user_info_url.setter
    def user_info_url(self, user_info_url):
        """Sets the user_info_url of this FindAllGlobalAuthModules200ResponseInner.

        OAuth userinfo to get user profile

        :param user_info_url: The user_info_url of this FindAllGlobalAuthModules200ResponseInner.
        :type user_info_url: str
        """
        if user_info_url is None:
            raise ValueError("Invalid value for `user_info_url`, must not be `None`")

        self._user_info_url = user_info_url
