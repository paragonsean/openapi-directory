# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CorsSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_credentials: bool=None, allow_headers: List[str]=None, allow_methods: List[str]=None, allow_origin: str=None, enabled: bool=None, excluded_patterns: List[str]=None, expose_headers: List[str]=None, max_age: int=None):
        """CorsSettings - a model defined in OpenAPI

        :param allow_credentials: The allow_credentials of this CorsSettings.
        :param allow_headers: The allow_headers of this CorsSettings.
        :param allow_methods: The allow_methods of this CorsSettings.
        :param allow_origin: The allow_origin of this CorsSettings.
        :param enabled: The enabled of this CorsSettings.
        :param excluded_patterns: The excluded_patterns of this CorsSettings.
        :param expose_headers: The expose_headers of this CorsSettings.
        :param max_age: The max_age of this CorsSettings.
        """
        self.openapi_types = {
            'allow_credentials': bool,
            'allow_headers': List[str],
            'allow_methods': List[str],
            'allow_origin': str,
            'enabled': bool,
            'excluded_patterns': List[str],
            'expose_headers': List[str],
            'max_age': int
        }

        self.attribute_map = {
            'allow_credentials': 'allowCredentials',
            'allow_headers': 'allowHeaders',
            'allow_methods': 'allowMethods',
            'allow_origin': 'allowOrigin',
            'enabled': 'enabled',
            'excluded_patterns': 'excludedPatterns',
            'expose_headers': 'exposeHeaders',
            'max_age': 'maxAge'
        }

        self._allow_credentials = allow_credentials
        self._allow_headers = allow_headers
        self._allow_methods = allow_methods
        self._allow_origin = allow_origin
        self._enabled = enabled
        self._excluded_patterns = excluded_patterns
        self._expose_headers = expose_headers
        self._max_age = max_age

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CorsSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CorsSettings of this CorsSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_credentials(self):
        """Gets the allow_credentials of this CorsSettings.

        Allow to pass credentials

        :return: The allow_credentials of this CorsSettings.
        :rtype: bool
        """
        return self._allow_credentials

    @allow_credentials.setter
    def allow_credentials(self, allow_credentials):
        """Sets the allow_credentials of this CorsSettings.

        Allow to pass credentials

        :param allow_credentials: The allow_credentials of this CorsSettings.
        :type allow_credentials: bool
        """
        if allow_credentials is None:
            raise ValueError("Invalid value for `allow_credentials`, must not be `None`")

        self._allow_credentials = allow_credentials

    @property
    def allow_headers(self):
        """Gets the allow_headers of this CorsSettings.

        The cors allowed headers

        :return: The allow_headers of this CorsSettings.
        :rtype: List[str]
        """
        return self._allow_headers

    @allow_headers.setter
    def allow_headers(self, allow_headers):
        """Sets the allow_headers of this CorsSettings.

        The cors allowed headers

        :param allow_headers: The allow_headers of this CorsSettings.
        :type allow_headers: List[str]
        """
        if allow_headers is None:
            raise ValueError("Invalid value for `allow_headers`, must not be `None`")

        self._allow_headers = allow_headers

    @property
    def allow_methods(self):
        """Gets the allow_methods of this CorsSettings.

        The cors allowed methods

        :return: The allow_methods of this CorsSettings.
        :rtype: List[str]
        """
        return self._allow_methods

    @allow_methods.setter
    def allow_methods(self, allow_methods):
        """Sets the allow_methods of this CorsSettings.

        The cors allowed methods

        :param allow_methods: The allow_methods of this CorsSettings.
        :type allow_methods: List[str]
        """
        if allow_methods is None:
            raise ValueError("Invalid value for `allow_methods`, must not be `None`")

        self._allow_methods = allow_methods

    @property
    def allow_origin(self):
        """Gets the allow_origin of this CorsSettings.

        The cors allowed origin

        :return: The allow_origin of this CorsSettings.
        :rtype: str
        """
        return self._allow_origin

    @allow_origin.setter
    def allow_origin(self, allow_origin):
        """Sets the allow_origin of this CorsSettings.

        The cors allowed origin

        :param allow_origin: The allow_origin of this CorsSettings.
        :type allow_origin: str
        """
        if allow_origin is None:
            raise ValueError("Invalid value for `allow_origin`, must not be `None`")

        self._allow_origin = allow_origin

    @property
    def enabled(self):
        """Gets the enabled of this CorsSettings.

        Whether or not cors is enabled

        :return: The enabled of this CorsSettings.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this CorsSettings.

        Whether or not cors is enabled

        :param enabled: The enabled of this CorsSettings.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def excluded_patterns(self):
        """Gets the excluded_patterns of this CorsSettings.

        The cors excluded patterns

        :return: The excluded_patterns of this CorsSettings.
        :rtype: List[str]
        """
        return self._excluded_patterns

    @excluded_patterns.setter
    def excluded_patterns(self, excluded_patterns):
        """Sets the excluded_patterns of this CorsSettings.

        The cors excluded patterns

        :param excluded_patterns: The excluded_patterns of this CorsSettings.
        :type excluded_patterns: List[str]
        """
        if excluded_patterns is None:
            raise ValueError("Invalid value for `excluded_patterns`, must not be `None`")

        self._excluded_patterns = excluded_patterns

    @property
    def expose_headers(self):
        """Gets the expose_headers of this CorsSettings.

        The cors exposed header

        :return: The expose_headers of this CorsSettings.
        :rtype: List[str]
        """
        return self._expose_headers

    @expose_headers.setter
    def expose_headers(self, expose_headers):
        """Sets the expose_headers of this CorsSettings.

        The cors exposed header

        :param expose_headers: The expose_headers of this CorsSettings.
        :type expose_headers: List[str]
        """
        if expose_headers is None:
            raise ValueError("Invalid value for `expose_headers`, must not be `None`")

        self._expose_headers = expose_headers

    @property
    def max_age(self):
        """Gets the max_age of this CorsSettings.

        Cors max age

        :return: The max_age of this CorsSettings.
        :rtype: int
        """
        return self._max_age

    @max_age.setter
    def max_age(self, max_age):
        """Sets the max_age of this CorsSettings.

        Cors max age

        :param max_age: The max_age of this CorsSettings.
        :type max_age: int
        """
        if max_age is None:
            raise ValueError("Invalid value for `max_age`, must not be `None`")

        self._max_age = max_age
