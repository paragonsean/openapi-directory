# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.in_cookie import InCookie
from openapi_server.models.in_header import InHeader
from openapi_server.models.in_query_param import InQueryParam
from openapi_server import util


class GlobalJwtVerifierSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, type: str=None, remove: str=None):
        """GlobalJwtVerifierSource - a model defined in OpenAPI

        :param name: The name of this GlobalJwtVerifierSource.
        :param type: The type of this GlobalJwtVerifierSource.
        :param remove: The remove of this GlobalJwtVerifierSource.
        """
        self.openapi_types = {
            'name': str,
            'type': str,
            'remove': str
        }

        self.attribute_map = {
            'name': 'name',
            'type': 'type',
            'remove': 'remove'
        }

        self._name = name
        self._type = type
        self._remove = remove

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GlobalJwtVerifierSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GlobalJwtVerifier_source of this GlobalJwtVerifierSource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this GlobalJwtVerifierSource.

        Name of the cookie

        :return: The name of this GlobalJwtVerifierSource.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GlobalJwtVerifierSource.

        Name of the cookie

        :param name: The name of this GlobalJwtVerifierSource.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def type(self):
        """Gets the type of this GlobalJwtVerifierSource.

        String with value InCookie

        :return: The type of this GlobalJwtVerifierSource.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GlobalJwtVerifierSource.

        String with value InCookie

        :param type: The type of this GlobalJwtVerifierSource.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def remove(self):
        """Gets the remove of this GlobalJwtVerifierSource.

        Remove regex inside the value, like 'Bearer '

        :return: The remove of this GlobalJwtVerifierSource.
        :rtype: str
        """
        return self._remove

    @remove.setter
    def remove(self, remove):
        """Sets the remove of this GlobalJwtVerifierSource.

        Remove regex inside the value, like 'Bearer '

        :param remove: The remove of this GlobalJwtVerifierSource.
        :type remove: str
        """
        if remove is None:
            raise ValueError("Invalid value for `remove`, must not be `None`")

        self._remove = remove
