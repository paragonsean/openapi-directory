# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Certificate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_renew: str=None, ca: str=None, ca_ref: str=None, chain: str=None, domain: str=None, _from: str=None, id: str=None, private_key: str=None, self_signed: str=None, subject: str=None, to: str=None, valid: str=None):
        """Certificate - a model defined in OpenAPI

        :param auto_renew: The auto_renew of this Certificate.
        :param ca: The ca of this Certificate.
        :param ca_ref: The ca_ref of this Certificate.
        :param chain: The chain of this Certificate.
        :param domain: The domain of this Certificate.
        :param _from: The _from of this Certificate.
        :param id: The id of this Certificate.
        :param private_key: The private_key of this Certificate.
        :param self_signed: The self_signed of this Certificate.
        :param subject: The subject of this Certificate.
        :param to: The to of this Certificate.
        :param valid: The valid of this Certificate.
        """
        self.openapi_types = {
            'auto_renew': str,
            'ca': str,
            'ca_ref': str,
            'chain': str,
            'domain': str,
            '_from': str,
            'id': str,
            'private_key': str,
            'self_signed': str,
            'subject': str,
            'to': str,
            'valid': str
        }

        self.attribute_map = {
            'auto_renew': 'autoRenew',
            'ca': 'ca',
            'ca_ref': 'caRef',
            'chain': 'chain',
            'domain': 'domain',
            '_from': 'from',
            'id': 'id',
            'private_key': 'privateKey',
            'self_signed': 'selfSigned',
            'subject': 'subject',
            'to': 'to',
            'valid': 'valid'
        }

        self._auto_renew = auto_renew
        self._ca = ca
        self._ca_ref = ca_ref
        self._chain = chain
        self._domain = domain
        self.__from = _from
        self._id = id
        self._private_key = private_key
        self._self_signed = self_signed
        self._subject = subject
        self._to = to
        self._valid = valid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Certificate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Certificate of this Certificate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_renew(self):
        """Gets the auto_renew of this Certificate.

        Allow Otoroshi to renew the certificate (if self signed)

        :return: The auto_renew of this Certificate.
        :rtype: str
        """
        return self._auto_renew

    @auto_renew.setter
    def auto_renew(self, auto_renew):
        """Sets the auto_renew of this Certificate.

        Allow Otoroshi to renew the certificate (if self signed)

        :param auto_renew: The auto_renew of this Certificate.
        :type auto_renew: str
        """
        if auto_renew is None:
            raise ValueError("Invalid value for `auto_renew`, must not be `None`")

        self._auto_renew = auto_renew

    @property
    def ca(self):
        """Gets the ca of this Certificate.

        Certificate is a CA (read only)

        :return: The ca of this Certificate.
        :rtype: str
        """
        return self._ca

    @ca.setter
    def ca(self, ca):
        """Sets the ca of this Certificate.

        Certificate is a CA (read only)

        :param ca: The ca of this Certificate.
        :type ca: str
        """
        if ca is None:
            raise ValueError("Invalid value for `ca`, must not be `None`")

        self._ca = ca

    @property
    def ca_ref(self):
        """Gets the ca_ref of this Certificate.

        Reference for a CA certificate in otoroshi

        :return: The ca_ref of this Certificate.
        :rtype: str
        """
        return self._ca_ref

    @ca_ref.setter
    def ca_ref(self, ca_ref):
        """Sets the ca_ref of this Certificate.

        Reference for a CA certificate in otoroshi

        :param ca_ref: The ca_ref of this Certificate.
        :type ca_ref: str
        """
        if ca_ref is None:
            raise ValueError("Invalid value for `ca_ref`, must not be `None`")

        self._ca_ref = ca_ref

    @property
    def chain(self):
        """Gets the chain of this Certificate.

        Certificate chain of trust in PEM format

        :return: The chain of this Certificate.
        :rtype: str
        """
        return self._chain

    @chain.setter
    def chain(self, chain):
        """Sets the chain of this Certificate.

        Certificate chain of trust in PEM format

        :param chain: The chain of this Certificate.
        :type chain: str
        """
        if chain is None:
            raise ValueError("Invalid value for `chain`, must not be `None`")

        self._chain = chain

    @property
    def domain(self):
        """Gets the domain of this Certificate.

        Domain of the certificate (read only)

        :return: The domain of this Certificate.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this Certificate.

        Domain of the certificate (read only)

        :param domain: The domain of this Certificate.
        :type domain: str
        """
        if domain is None:
            raise ValueError("Invalid value for `domain`, must not be `None`")

        self._domain = domain

    @property
    def _from(self):
        """Gets the _from of this Certificate.

        Start date of validity

        :return: The _from of this Certificate.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this Certificate.

        Start date of validity

        :param _from: The _from of this Certificate.
        :type _from: str
        """
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")

        self.__from = _from

    @property
    def id(self):
        """Gets the id of this Certificate.

        Id of the certificate

        :return: The id of this Certificate.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Certificate.

        Id of the certificate

        :param id: The id of this Certificate.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def private_key(self):
        """Gets the private_key of this Certificate.

        PKCS8 private key in PEM format

        :return: The private_key of this Certificate.
        :rtype: str
        """
        return self._private_key

    @private_key.setter
    def private_key(self, private_key):
        """Sets the private_key of this Certificate.

        PKCS8 private key in PEM format

        :param private_key: The private_key of this Certificate.
        :type private_key: str
        """
        if private_key is None:
            raise ValueError("Invalid value for `private_key`, must not be `None`")

        self._private_key = private_key

    @property
    def self_signed(self):
        """Gets the self_signed of this Certificate.

        Certificate is self signed  read only)

        :return: The self_signed of this Certificate.
        :rtype: str
        """
        return self._self_signed

    @self_signed.setter
    def self_signed(self, self_signed):
        """Sets the self_signed of this Certificate.

        Certificate is self signed  read only)

        :param self_signed: The self_signed of this Certificate.
        :type self_signed: str
        """
        if self_signed is None:
            raise ValueError("Invalid value for `self_signed`, must not be `None`")

        self._self_signed = self_signed

    @property
    def subject(self):
        """Gets the subject of this Certificate.

        Subject of the certificate (read only)

        :return: The subject of this Certificate.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this Certificate.

        Subject of the certificate (read only)

        :param subject: The subject of this Certificate.
        :type subject: str
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")

        self._subject = subject

    @property
    def to(self):
        """Gets the to of this Certificate.

        End date of validity

        :return: The to of this Certificate.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this Certificate.

        End date of validity

        :param to: The to of this Certificate.
        :type to: str
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")

        self._to = to

    @property
    def valid(self):
        """Gets the valid of this Certificate.

        Certificate is valid (read only)

        :return: The valid of this Certificate.
        :rtype: str
        """
        return self._valid

    @valid.setter
    def valid(self, valid):
        """Sets the valid of this Certificate.

        Certificate is valid (read only)

        :param valid: The valid of this Certificate.
        :type valid: str
        """
        if valid is None:
            raise ValueError("Invalid value for `valid`, must not be `None`")

        self._valid = valid
