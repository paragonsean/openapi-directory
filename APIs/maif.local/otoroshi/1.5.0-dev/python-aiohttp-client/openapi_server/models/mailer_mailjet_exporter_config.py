# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MailerMailjetExporterConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_key_private: str=None, api_key_public: str=None, to: List[str]=None, type: str=None):
        """MailerMailjetExporterConfig - a model defined in OpenAPI

        :param api_key_private: The api_key_private of this MailerMailjetExporterConfig.
        :param api_key_public: The api_key_public of this MailerMailjetExporterConfig.
        :param to: The to of this MailerMailjetExporterConfig.
        :param type: The type of this MailerMailjetExporterConfig.
        """
        self.openapi_types = {
            'api_key_private': str,
            'api_key_public': str,
            'to': List[str],
            'type': str
        }

        self.attribute_map = {
            'api_key_private': 'apiKeyPrivate',
            'api_key_public': 'apiKeyPublic',
            'to': 'to',
            'type': 'type'
        }

        self._api_key_private = api_key_private
        self._api_key_public = api_key_public
        self._to = to
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MailerMailjetExporterConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MailerMailjetExporterConfig of this MailerMailjetExporterConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_key_private(self):
        """Gets the api_key_private of this MailerMailjetExporterConfig.

        Mailjet private apiKey

        :return: The api_key_private of this MailerMailjetExporterConfig.
        :rtype: str
        """
        return self._api_key_private

    @api_key_private.setter
    def api_key_private(self, api_key_private):
        """Sets the api_key_private of this MailerMailjetExporterConfig.

        Mailjet private apiKey

        :param api_key_private: The api_key_private of this MailerMailjetExporterConfig.
        :type api_key_private: str
        """

        self._api_key_private = api_key_private

    @property
    def api_key_public(self):
        """Gets the api_key_public of this MailerMailjetExporterConfig.

        Mailjet public apiKey

        :return: The api_key_public of this MailerMailjetExporterConfig.
        :rtype: str
        """
        return self._api_key_public

    @api_key_public.setter
    def api_key_public(self, api_key_public):
        """Sets the api_key_public of this MailerMailjetExporterConfig.

        Mailjet public apiKey

        :param api_key_public: The api_key_public of this MailerMailjetExporterConfig.
        :type api_key_public: str
        """

        self._api_key_public = api_key_public

    @property
    def to(self):
        """Gets the to of this MailerMailjetExporterConfig.

        Email adresses of recipents

        :return: The to of this MailerMailjetExporterConfig.
        :rtype: List[str]
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this MailerMailjetExporterConfig.

        Email adresses of recipents

        :param to: The to of this MailerMailjetExporterConfig.
        :type to: List[str]
        """

        self._to = to

    @property
    def type(self):
        """Gets the type of this MailerMailjetExporterConfig.

        Type of mailer

        :return: The type of this MailerMailjetExporterConfig.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MailerMailjetExporterConfig.

        Type of mailer

        :param type: The type of this MailerMailjetExporterConfig.
        :type type: str
        """
        allowed_values = ["mailjet"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
