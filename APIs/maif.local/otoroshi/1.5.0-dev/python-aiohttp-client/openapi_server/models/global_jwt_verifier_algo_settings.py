# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.es_algo_settings import ESAlgoSettings
from openapi_server.models.hs_algo_settings import HSAlgoSettings
from openapi_server.models.jwks_algo_settings import JWKSAlgoSettings
from openapi_server.models.rs_algo_settings import RSAlgoSettings
from openapi_server import util


class GlobalJwtVerifierAlgoSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, secret: str=None, size: int=None, type: str=None, private_key: str=None, public_key: str=None, headers: Dict[str, str]=None, kty: str=None, timeout: int=None, ttl: int=None, url: str=None):
        """GlobalJwtVerifierAlgoSettings - a model defined in OpenAPI

        :param secret: The secret of this GlobalJwtVerifierAlgoSettings.
        :param size: The size of this GlobalJwtVerifierAlgoSettings.
        :param type: The type of this GlobalJwtVerifierAlgoSettings.
        :param private_key: The private_key of this GlobalJwtVerifierAlgoSettings.
        :param public_key: The public_key of this GlobalJwtVerifierAlgoSettings.
        :param headers: The headers of this GlobalJwtVerifierAlgoSettings.
        :param kty: The kty of this GlobalJwtVerifierAlgoSettings.
        :param timeout: The timeout of this GlobalJwtVerifierAlgoSettings.
        :param ttl: The ttl of this GlobalJwtVerifierAlgoSettings.
        :param url: The url of this GlobalJwtVerifierAlgoSettings.
        """
        self.openapi_types = {
            'secret': str,
            'size': int,
            'type': str,
            'private_key': str,
            'public_key': str,
            'headers': Dict[str, str],
            'kty': str,
            'timeout': int,
            'ttl': int,
            'url': str
        }

        self.attribute_map = {
            'secret': 'secret',
            'size': 'size',
            'type': 'type',
            'private_key': 'privateKey',
            'public_key': 'publicKey',
            'headers': 'headers',
            'kty': 'kty',
            'timeout': 'timeout',
            'ttl': 'ttl',
            'url': 'url'
        }

        self._secret = secret
        self._size = size
        self._type = type
        self._private_key = private_key
        self._public_key = public_key
        self._headers = headers
        self._kty = kty
        self._timeout = timeout
        self._ttl = ttl
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GlobalJwtVerifierAlgoSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GlobalJwtVerifier_algoSettings of this GlobalJwtVerifierAlgoSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def secret(self):
        """Gets the secret of this GlobalJwtVerifierAlgoSettings.

        The secret value for the HMAC function

        :return: The secret of this GlobalJwtVerifierAlgoSettings.
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this GlobalJwtVerifierAlgoSettings.

        The secret value for the HMAC function

        :param secret: The secret of this GlobalJwtVerifierAlgoSettings.
        :type secret: str
        """
        if secret is None:
            raise ValueError("Invalid value for `secret`, must not be `None`")

        self._secret = secret

    @property
    def size(self):
        """Gets the size of this GlobalJwtVerifierAlgoSettings.

        Size for SHA function. can be 256, 384 or 512

        :return: The size of this GlobalJwtVerifierAlgoSettings.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this GlobalJwtVerifierAlgoSettings.

        Size for SHA function. can be 256, 384 or 512

        :param size: The size of this GlobalJwtVerifierAlgoSettings.
        :type size: int
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")

        self._size = size

    @property
    def type(self):
        """Gets the type of this GlobalJwtVerifierAlgoSettings.

        String with value JWKSAlgoSettings

        :return: The type of this GlobalJwtVerifierAlgoSettings.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GlobalJwtVerifierAlgoSettings.

        String with value JWKSAlgoSettings

        :param type: The type of this GlobalJwtVerifierAlgoSettings.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def private_key(self):
        """Gets the private_key of this GlobalJwtVerifierAlgoSettings.

        The private key for the RSA function

        :return: The private_key of this GlobalJwtVerifierAlgoSettings.
        :rtype: str
        """
        return self._private_key

    @private_key.setter
    def private_key(self, private_key):
        """Sets the private_key of this GlobalJwtVerifierAlgoSettings.

        The private key for the RSA function

        :param private_key: The private_key of this GlobalJwtVerifierAlgoSettings.
        :type private_key: str
        """

        self._private_key = private_key

    @property
    def public_key(self):
        """Gets the public_key of this GlobalJwtVerifierAlgoSettings.

        The public key for the RSA function

        :return: The public_key of this GlobalJwtVerifierAlgoSettings.
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this GlobalJwtVerifierAlgoSettings.

        The public key for the RSA function

        :param public_key: The public_key of this GlobalJwtVerifierAlgoSettings.
        :type public_key: str
        """
        if public_key is None:
            raise ValueError("Invalid value for `public_key`, must not be `None`")

        self._public_key = public_key

    @property
    def headers(self):
        """Gets the headers of this GlobalJwtVerifierAlgoSettings.

        The headers for the http call

        :return: The headers of this GlobalJwtVerifierAlgoSettings.
        :rtype: Dict[str, str]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this GlobalJwtVerifierAlgoSettings.

        The headers for the http call

        :param headers: The headers of this GlobalJwtVerifierAlgoSettings.
        :type headers: Dict[str, str]
        """

        self._headers = headers

    @property
    def kty(self):
        """Gets the kty of this GlobalJwtVerifierAlgoSettings.

        The type of key: RSA or EC

        :return: The kty of this GlobalJwtVerifierAlgoSettings.
        :rtype: str
        """
        return self._kty

    @kty.setter
    def kty(self, kty):
        """Sets the kty of this GlobalJwtVerifierAlgoSettings.

        The type of key: RSA or EC

        :param kty: The kty of this GlobalJwtVerifierAlgoSettings.
        :type kty: str
        """

        self._kty = kty

    @property
    def timeout(self):
        """Gets the timeout of this GlobalJwtVerifierAlgoSettings.

        The timeout of the http call

        :return: The timeout of this GlobalJwtVerifierAlgoSettings.
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this GlobalJwtVerifierAlgoSettings.

        The timeout of the http call

        :param timeout: The timeout of this GlobalJwtVerifierAlgoSettings.
        :type timeout: int
        """

        self._timeout = timeout

    @property
    def ttl(self):
        """Gets the ttl of this GlobalJwtVerifierAlgoSettings.

        The ttl of the keyset

        :return: The ttl of this GlobalJwtVerifierAlgoSettings.
        :rtype: int
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this GlobalJwtVerifierAlgoSettings.

        The ttl of the keyset

        :param ttl: The ttl of this GlobalJwtVerifierAlgoSettings.
        :type ttl: int
        """

        self._ttl = ttl

    @property
    def url(self):
        """Gets the url of this GlobalJwtVerifierAlgoSettings.

        The url for the http call

        :return: The url of this GlobalJwtVerifierAlgoSettings.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this GlobalJwtVerifierAlgoSettings.

        The url for the http call

        :param url: The url of this GlobalJwtVerifierAlgoSettings.
        :type url: str
        """

        self._url = url
