# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExposedApi(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expose_api: bool=None, open_api_descriptor_url: str=None):
        """ExposedApi - a model defined in OpenAPI

        :param expose_api: The expose_api of this ExposedApi.
        :param open_api_descriptor_url: The open_api_descriptor_url of this ExposedApi.
        """
        self.openapi_types = {
            'expose_api': bool,
            'open_api_descriptor_url': str
        }

        self.attribute_map = {
            'expose_api': 'exposeApi',
            'open_api_descriptor_url': 'openApiDescriptorUrl'
        }

        self._expose_api = expose_api
        self._open_api_descriptor_url = open_api_descriptor_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExposedApi':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExposedApi of this ExposedApi.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expose_api(self):
        """Gets the expose_api of this ExposedApi.

        Whether or not the current service expose an API with an Open API descriptor

        :return: The expose_api of this ExposedApi.
        :rtype: bool
        """
        return self._expose_api

    @expose_api.setter
    def expose_api(self, expose_api):
        """Sets the expose_api of this ExposedApi.

        Whether or not the current service expose an API with an Open API descriptor

        :param expose_api: The expose_api of this ExposedApi.
        :type expose_api: bool
        """
        if expose_api is None:
            raise ValueError("Invalid value for `expose_api`, must not be `None`")

        self._expose_api = expose_api

    @property
    def open_api_descriptor_url(self):
        """Gets the open_api_descriptor_url of this ExposedApi.

        The URL of the Open API descriptor

        :return: The open_api_descriptor_url of this ExposedApi.
        :rtype: str
        """
        return self._open_api_descriptor_url

    @open_api_descriptor_url.setter
    def open_api_descriptor_url(self, open_api_descriptor_url):
        """Sets the open_api_descriptor_url of this ExposedApi.

        The URL of the Open API descriptor

        :param open_api_descriptor_url: The open_api_descriptor_url of this ExposedApi.
        :type open_api_descriptor_url: str
        """

        self._open_api_descriptor_url = open_api_descriptor_url
