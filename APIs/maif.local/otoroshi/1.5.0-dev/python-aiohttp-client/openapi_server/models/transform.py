# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.global_jwt_verifier_algo_settings import GlobalJwtVerifierAlgoSettings
from openapi_server.models.transform_settings import TransformSettings
from openapi_server.models.verification_settings import VerificationSettings
from openapi_server import util


class Transform(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, algo_settings: GlobalJwtVerifierAlgoSettings=None, transform_settings: TransformSettings=None, type: str=None, verification_settings: VerificationSettings=None):
        """Transform - a model defined in OpenAPI

        :param algo_settings: The algo_settings of this Transform.
        :param transform_settings: The transform_settings of this Transform.
        :param type: The type of this Transform.
        :param verification_settings: The verification_settings of this Transform.
        """
        self.openapi_types = {
            'algo_settings': GlobalJwtVerifierAlgoSettings,
            'transform_settings': TransformSettings,
            'type': str,
            'verification_settings': VerificationSettings
        }

        self.attribute_map = {
            'algo_settings': 'algoSettings',
            'transform_settings': 'transformSettings',
            'type': 'type',
            'verification_settings': 'verificationSettings'
        }

        self._algo_settings = algo_settings
        self._transform_settings = transform_settings
        self._type = type
        self._verification_settings = verification_settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Transform':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Transform of this Transform.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def algo_settings(self):
        """Gets the algo_settings of this Transform.


        :return: The algo_settings of this Transform.
        :rtype: GlobalJwtVerifierAlgoSettings
        """
        return self._algo_settings

    @algo_settings.setter
    def algo_settings(self, algo_settings):
        """Sets the algo_settings of this Transform.


        :param algo_settings: The algo_settings of this Transform.
        :type algo_settings: GlobalJwtVerifierAlgoSettings
        """
        if algo_settings is None:
            raise ValueError("Invalid value for `algo_settings`, must not be `None`")

        self._algo_settings = algo_settings

    @property
    def transform_settings(self):
        """Gets the transform_settings of this Transform.


        :return: The transform_settings of this Transform.
        :rtype: TransformSettings
        """
        return self._transform_settings

    @transform_settings.setter
    def transform_settings(self, transform_settings):
        """Sets the transform_settings of this Transform.


        :param transform_settings: The transform_settings of this Transform.
        :type transform_settings: TransformSettings
        """

        self._transform_settings = transform_settings

    @property
    def type(self):
        """Gets the type of this Transform.

        String with value Transform

        :return: The type of this Transform.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Transform.

        String with value Transform

        :param type: The type of this Transform.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def verification_settings(self):
        """Gets the verification_settings of this Transform.


        :return: The verification_settings of this Transform.
        :rtype: VerificationSettings
        """
        return self._verification_settings

    @verification_settings.setter
    def verification_settings(self, verification_settings):
        """Sets the verification_settings of this Transform.


        :param verification_settings: The verification_settings of this Transform.
        :type verification_settings: VerificationSettings
        """
        if verification_settings is None:
            raise ValueError("Invalid value for `verification_settings`, must not be `None`")

        self._verification_settings = verification_settings
