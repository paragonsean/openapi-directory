# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LargeRequestFaultConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_request_size: int=None, ratio: float=None):
        """LargeRequestFaultConfig - a model defined in OpenAPI

        :param additional_request_size: The additional_request_size of this LargeRequestFaultConfig.
        :param ratio: The ratio of this LargeRequestFaultConfig.
        """
        self.openapi_types = {
            'additional_request_size': int,
            'ratio': float
        }

        self.attribute_map = {
            'additional_request_size': 'additionalRequestSize',
            'ratio': 'ratio'
        }

        self._additional_request_size = additional_request_size
        self._ratio = ratio

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LargeRequestFaultConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LargeRequestFaultConfig of this LargeRequestFaultConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_request_size(self):
        """Gets the additional_request_size of this LargeRequestFaultConfig.

        The size added to the request body in bytes. Added payload will be spaces only.

        :return: The additional_request_size of this LargeRequestFaultConfig.
        :rtype: int
        """
        return self._additional_request_size

    @additional_request_size.setter
    def additional_request_size(self, additional_request_size):
        """Sets the additional_request_size of this LargeRequestFaultConfig.

        The size added to the request body in bytes. Added payload will be spaces only.

        :param additional_request_size: The additional_request_size of this LargeRequestFaultConfig.
        :type additional_request_size: int
        """
        if additional_request_size is None:
            raise ValueError("Invalid value for `additional_request_size`, must not be `None`")

        self._additional_request_size = additional_request_size

    @property
    def ratio(self):
        """Gets the ratio of this LargeRequestFaultConfig.

        The percentage of requests affected by this fault. Value should be between 0.0 and 1.0

        :return: The ratio of this LargeRequestFaultConfig.
        :rtype: float
        """
        return self._ratio

    @ratio.setter
    def ratio(self, ratio):
        """Sets the ratio of this LargeRequestFaultConfig.

        The percentage of requests affected by this fault. Value should be between 0.0 and 1.0

        :param ratio: The ratio of this LargeRequestFaultConfig.
        :type ratio: float
        """
        if ratio is None:
            raise ValueError("Invalid value for `ratio`, must not be `None`")

        self._ratio = ratio
