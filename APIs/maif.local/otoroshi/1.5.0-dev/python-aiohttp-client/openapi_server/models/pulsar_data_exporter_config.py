# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PulsarDataExporterConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, namespace: str=None, tenant: str=None, topic: str=None, uri: List[str]=None):
        """PulsarDataExporterConfig - a model defined in OpenAPI

        :param namespace: The namespace of this PulsarDataExporterConfig.
        :param tenant: The tenant of this PulsarDataExporterConfig.
        :param topic: The topic of this PulsarDataExporterConfig.
        :param uri: The uri of this PulsarDataExporterConfig.
        """
        self.openapi_types = {
            'namespace': str,
            'tenant': str,
            'topic': str,
            'uri': List[str]
        }

        self.attribute_map = {
            'namespace': 'namespace',
            'tenant': 'tenant',
            'topic': 'topic',
            'uri': 'uri'
        }

        self._namespace = namespace
        self._tenant = tenant
        self._topic = topic
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PulsarDataExporterConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PulsarDataExporterConfig of this PulsarDataExporterConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def namespace(self):
        """Gets the namespace of this PulsarDataExporterConfig.

        Namespace

        :return: The namespace of this PulsarDataExporterConfig.
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this PulsarDataExporterConfig.

        Namespace

        :param namespace: The namespace of this PulsarDataExporterConfig.
        :type namespace: str
        """
        if namespace is None:
            raise ValueError("Invalid value for `namespace`, must not be `None`")

        self._namespace = namespace

    @property
    def tenant(self):
        """Gets the tenant of this PulsarDataExporterConfig.

        Tenant

        :return: The tenant of this PulsarDataExporterConfig.
        :rtype: str
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant):
        """Sets the tenant of this PulsarDataExporterConfig.

        Tenant

        :param tenant: The tenant of this PulsarDataExporterConfig.
        :type tenant: str
        """
        if tenant is None:
            raise ValueError("Invalid value for `tenant`, must not be `None`")

        self._tenant = tenant

    @property
    def topic(self):
        """Gets the topic of this PulsarDataExporterConfig.

        Topic

        :return: The topic of this PulsarDataExporterConfig.
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this PulsarDataExporterConfig.

        Topic

        :param topic: The topic of this PulsarDataExporterConfig.
        :type topic: str
        """
        if topic is None:
            raise ValueError("Invalid value for `topic`, must not be `None`")

        self._topic = topic

    @property
    def uri(self):
        """Gets the uri of this PulsarDataExporterConfig.

        URI of the pulsar server

        :return: The uri of this PulsarDataExporterConfig.
        :rtype: List[str]
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this PulsarDataExporterConfig.

        URI of the pulsar server

        :param uri: The uri of this PulsarDataExporterConfig.
        :type uri: List[str]
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")

        self._uri = uri
