# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Quotas(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authorized_calls_per_day: int=None, authorized_calls_per_month: int=None, authorized_calls_per_sec: int=None, current_calls_per_day: int=None, current_calls_per_month: int=None, current_calls_per_sec: int=None, remaining_calls_per_day: int=None, remaining_calls_per_month: int=None, remaining_calls_per_sec: int=None):
        """Quotas - a model defined in OpenAPI

        :param authorized_calls_per_day: The authorized_calls_per_day of this Quotas.
        :param authorized_calls_per_month: The authorized_calls_per_month of this Quotas.
        :param authorized_calls_per_sec: The authorized_calls_per_sec of this Quotas.
        :param current_calls_per_day: The current_calls_per_day of this Quotas.
        :param current_calls_per_month: The current_calls_per_month of this Quotas.
        :param current_calls_per_sec: The current_calls_per_sec of this Quotas.
        :param remaining_calls_per_day: The remaining_calls_per_day of this Quotas.
        :param remaining_calls_per_month: The remaining_calls_per_month of this Quotas.
        :param remaining_calls_per_sec: The remaining_calls_per_sec of this Quotas.
        """
        self.openapi_types = {
            'authorized_calls_per_day': int,
            'authorized_calls_per_month': int,
            'authorized_calls_per_sec': int,
            'current_calls_per_day': int,
            'current_calls_per_month': int,
            'current_calls_per_sec': int,
            'remaining_calls_per_day': int,
            'remaining_calls_per_month': int,
            'remaining_calls_per_sec': int
        }

        self.attribute_map = {
            'authorized_calls_per_day': 'authorizedCallsPerDay',
            'authorized_calls_per_month': 'authorizedCallsPerMonth',
            'authorized_calls_per_sec': 'authorizedCallsPerSec',
            'current_calls_per_day': 'currentCallsPerDay',
            'current_calls_per_month': 'currentCallsPerMonth',
            'current_calls_per_sec': 'currentCallsPerSec',
            'remaining_calls_per_day': 'remainingCallsPerDay',
            'remaining_calls_per_month': 'remainingCallsPerMonth',
            'remaining_calls_per_sec': 'remainingCallsPerSec'
        }

        self._authorized_calls_per_day = authorized_calls_per_day
        self._authorized_calls_per_month = authorized_calls_per_month
        self._authorized_calls_per_sec = authorized_calls_per_sec
        self._current_calls_per_day = current_calls_per_day
        self._current_calls_per_month = current_calls_per_month
        self._current_calls_per_sec = current_calls_per_sec
        self._remaining_calls_per_day = remaining_calls_per_day
        self._remaining_calls_per_month = remaining_calls_per_month
        self._remaining_calls_per_sec = remaining_calls_per_sec

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Quotas':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Quotas of this Quotas.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authorized_calls_per_day(self):
        """Gets the authorized_calls_per_day of this Quotas.

        The number of authorized calls per day

        :return: The authorized_calls_per_day of this Quotas.
        :rtype: int
        """
        return self._authorized_calls_per_day

    @authorized_calls_per_day.setter
    def authorized_calls_per_day(self, authorized_calls_per_day):
        """Sets the authorized_calls_per_day of this Quotas.

        The number of authorized calls per day

        :param authorized_calls_per_day: The authorized_calls_per_day of this Quotas.
        :type authorized_calls_per_day: int
        """
        if authorized_calls_per_day is None:
            raise ValueError("Invalid value for `authorized_calls_per_day`, must not be `None`")

        self._authorized_calls_per_day = authorized_calls_per_day

    @property
    def authorized_calls_per_month(self):
        """Gets the authorized_calls_per_month of this Quotas.

        The number of authorized calls per month

        :return: The authorized_calls_per_month of this Quotas.
        :rtype: int
        """
        return self._authorized_calls_per_month

    @authorized_calls_per_month.setter
    def authorized_calls_per_month(self, authorized_calls_per_month):
        """Sets the authorized_calls_per_month of this Quotas.

        The number of authorized calls per month

        :param authorized_calls_per_month: The authorized_calls_per_month of this Quotas.
        :type authorized_calls_per_month: int
        """
        if authorized_calls_per_month is None:
            raise ValueError("Invalid value for `authorized_calls_per_month`, must not be `None`")

        self._authorized_calls_per_month = authorized_calls_per_month

    @property
    def authorized_calls_per_sec(self):
        """Gets the authorized_calls_per_sec of this Quotas.

        The number of authorized calls per second

        :return: The authorized_calls_per_sec of this Quotas.
        :rtype: int
        """
        return self._authorized_calls_per_sec

    @authorized_calls_per_sec.setter
    def authorized_calls_per_sec(self, authorized_calls_per_sec):
        """Sets the authorized_calls_per_sec of this Quotas.

        The number of authorized calls per second

        :param authorized_calls_per_sec: The authorized_calls_per_sec of this Quotas.
        :type authorized_calls_per_sec: int
        """
        if authorized_calls_per_sec is None:
            raise ValueError("Invalid value for `authorized_calls_per_sec`, must not be `None`")

        self._authorized_calls_per_sec = authorized_calls_per_sec

    @property
    def current_calls_per_day(self):
        """Gets the current_calls_per_day of this Quotas.

        The current number of calls per day

        :return: The current_calls_per_day of this Quotas.
        :rtype: int
        """
        return self._current_calls_per_day

    @current_calls_per_day.setter
    def current_calls_per_day(self, current_calls_per_day):
        """Sets the current_calls_per_day of this Quotas.

        The current number of calls per day

        :param current_calls_per_day: The current_calls_per_day of this Quotas.
        :type current_calls_per_day: int
        """
        if current_calls_per_day is None:
            raise ValueError("Invalid value for `current_calls_per_day`, must not be `None`")

        self._current_calls_per_day = current_calls_per_day

    @property
    def current_calls_per_month(self):
        """Gets the current_calls_per_month of this Quotas.

        The current number of calls per month

        :return: The current_calls_per_month of this Quotas.
        :rtype: int
        """
        return self._current_calls_per_month

    @current_calls_per_month.setter
    def current_calls_per_month(self, current_calls_per_month):
        """Sets the current_calls_per_month of this Quotas.

        The current number of calls per month

        :param current_calls_per_month: The current_calls_per_month of this Quotas.
        :type current_calls_per_month: int
        """
        if current_calls_per_month is None:
            raise ValueError("Invalid value for `current_calls_per_month`, must not be `None`")

        self._current_calls_per_month = current_calls_per_month

    @property
    def current_calls_per_sec(self):
        """Gets the current_calls_per_sec of this Quotas.

        The current number of calls per second

        :return: The current_calls_per_sec of this Quotas.
        :rtype: int
        """
        return self._current_calls_per_sec

    @current_calls_per_sec.setter
    def current_calls_per_sec(self, current_calls_per_sec):
        """Sets the current_calls_per_sec of this Quotas.

        The current number of calls per second

        :param current_calls_per_sec: The current_calls_per_sec of this Quotas.
        :type current_calls_per_sec: int
        """
        if current_calls_per_sec is None:
            raise ValueError("Invalid value for `current_calls_per_sec`, must not be `None`")

        self._current_calls_per_sec = current_calls_per_sec

    @property
    def remaining_calls_per_day(self):
        """Gets the remaining_calls_per_day of this Quotas.

        The remaining number of calls per day

        :return: The remaining_calls_per_day of this Quotas.
        :rtype: int
        """
        return self._remaining_calls_per_day

    @remaining_calls_per_day.setter
    def remaining_calls_per_day(self, remaining_calls_per_day):
        """Sets the remaining_calls_per_day of this Quotas.

        The remaining number of calls per day

        :param remaining_calls_per_day: The remaining_calls_per_day of this Quotas.
        :type remaining_calls_per_day: int
        """
        if remaining_calls_per_day is None:
            raise ValueError("Invalid value for `remaining_calls_per_day`, must not be `None`")

        self._remaining_calls_per_day = remaining_calls_per_day

    @property
    def remaining_calls_per_month(self):
        """Gets the remaining_calls_per_month of this Quotas.

        The number of authorized calls per month

        :return: The remaining_calls_per_month of this Quotas.
        :rtype: int
        """
        return self._remaining_calls_per_month

    @remaining_calls_per_month.setter
    def remaining_calls_per_month(self, remaining_calls_per_month):
        """Sets the remaining_calls_per_month of this Quotas.

        The number of authorized calls per month

        :param remaining_calls_per_month: The remaining_calls_per_month of this Quotas.
        :type remaining_calls_per_month: int
        """
        if remaining_calls_per_month is None:
            raise ValueError("Invalid value for `remaining_calls_per_month`, must not be `None`")

        self._remaining_calls_per_month = remaining_calls_per_month

    @property
    def remaining_calls_per_sec(self):
        """Gets the remaining_calls_per_sec of this Quotas.

        The remaining number of calls per second

        :return: The remaining_calls_per_sec of this Quotas.
        :rtype: int
        """
        return self._remaining_calls_per_sec

    @remaining_calls_per_sec.setter
    def remaining_calls_per_sec(self, remaining_calls_per_sec):
        """Sets the remaining_calls_per_sec of this Quotas.

        The remaining number of calls per second

        :param remaining_calls_per_sec: The remaining_calls_per_sec of this Quotas.
        :type remaining_calls_per_sec: int
        """
        if remaining_calls_per_sec is None:
            raise ValueError("Invalid value for `remaining_calls_per_sec`, must not be `None`")

        self._remaining_calls_per_sec = remaining_calls_per_sec
