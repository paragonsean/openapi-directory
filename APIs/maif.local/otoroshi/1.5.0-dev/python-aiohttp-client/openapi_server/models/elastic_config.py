# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ElasticConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster_uri: str=None, headers: Dict[str, str]=None, index: str=None, password: str=None, type: str=None, user: str=None):
        """ElasticConfig - a model defined in OpenAPI

        :param cluster_uri: The cluster_uri of this ElasticConfig.
        :param headers: The headers of this ElasticConfig.
        :param index: The index of this ElasticConfig.
        :param password: The password of this ElasticConfig.
        :param type: The type of this ElasticConfig.
        :param user: The user of this ElasticConfig.
        """
        self.openapi_types = {
            'cluster_uri': str,
            'headers': Dict[str, str],
            'index': str,
            'password': str,
            'type': str,
            'user': str
        }

        self.attribute_map = {
            'cluster_uri': 'clusterUri',
            'headers': 'headers',
            'index': 'index',
            'password': 'password',
            'type': 'type',
            'user': 'user'
        }

        self._cluster_uri = cluster_uri
        self._headers = headers
        self._index = index
        self._password = password
        self._type = type
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ElasticConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ElasticConfig of this ElasticConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster_uri(self):
        """Gets the cluster_uri of this ElasticConfig.

        URL of the elastic cluster

        :return: The cluster_uri of this ElasticConfig.
        :rtype: str
        """
        return self._cluster_uri

    @cluster_uri.setter
    def cluster_uri(self, cluster_uri):
        """Sets the cluster_uri of this ElasticConfig.

        URL of the elastic cluster

        :param cluster_uri: The cluster_uri of this ElasticConfig.
        :type cluster_uri: str
        """
        if cluster_uri is None:
            raise ValueError("Invalid value for `cluster_uri`, must not be `None`")

        self._cluster_uri = cluster_uri

    @property
    def headers(self):
        """Gets the headers of this ElasticConfig.

        Additionnal http headers

        :return: The headers of this ElasticConfig.
        :rtype: Dict[str, str]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this ElasticConfig.

        Additionnal http headers

        :param headers: The headers of this ElasticConfig.
        :type headers: Dict[str, str]
        """
        if headers is None:
            raise ValueError("Invalid value for `headers`, must not be `None`")

        self._headers = headers

    @property
    def index(self):
        """Gets the index of this ElasticConfig.

        Index for events. Default is otoroshi-events

        :return: The index of this ElasticConfig.
        :rtype: str
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this ElasticConfig.

        Index for events. Default is otoroshi-events

        :param index: The index of this ElasticConfig.
        :type index: str
        """
        if index is None:
            raise ValueError("Invalid value for `index`, must not be `None`")

        self._index = index

    @property
    def password(self):
        """Gets the password of this ElasticConfig.

        Optional password

        :return: The password of this ElasticConfig.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ElasticConfig.

        Optional password

        :param password: The password of this ElasticConfig.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")

        self._password = password

    @property
    def type(self):
        """Gets the type of this ElasticConfig.

        Type of events. Default is event

        :return: The type of this ElasticConfig.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ElasticConfig.

        Type of events. Default is event

        :param type: The type of this ElasticConfig.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def user(self):
        """Gets the user of this ElasticConfig.

        Optional user

        :return: The user of this ElasticConfig.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this ElasticConfig.

        Optional user

        :param user: The user of this ElasticConfig.
        :type user: str
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user
