# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.mapping_settings import MappingSettings
from openapi_server import util


class VerificationSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fields: Dict[str, str]=None, mapping_settings: MappingSettings=None):
        """VerificationSettings - a model defined in OpenAPI

        :param fields: The fields of this VerificationSettings.
        :param mapping_settings: The mapping_settings of this VerificationSettings.
        """
        self.openapi_types = {
            'fields': Dict[str, str],
            'mapping_settings': MappingSettings
        }

        self.attribute_map = {
            'fields': 'fields',
            'mapping_settings': 'mappingSettings'
        }

        self._fields = fields
        self._mapping_settings = mapping_settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VerificationSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VerificationSettings of this VerificationSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fields(self):
        """Gets the fields of this VerificationSettings.

        Fields to verify with their values

        :return: The fields of this VerificationSettings.
        :rtype: Dict[str, str]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this VerificationSettings.

        Fields to verify with their values

        :param fields: The fields of this VerificationSettings.
        :type fields: Dict[str, str]
        """
        if fields is None:
            raise ValueError("Invalid value for `fields`, must not be `None`")

        self._fields = fields

    @property
    def mapping_settings(self):
        """Gets the mapping_settings of this VerificationSettings.


        :return: The mapping_settings of this VerificationSettings.
        :rtype: MappingSettings
        """
        return self._mapping_settings

    @mapping_settings.setter
    def mapping_settings(self, mapping_settings):
        """Sets the mapping_settings of this VerificationSettings.


        :param mapping_settings: The mapping_settings of this VerificationSettings.
        :type mapping_settings: MappingSettings
        """

        self._mapping_settings = mapping_settings
