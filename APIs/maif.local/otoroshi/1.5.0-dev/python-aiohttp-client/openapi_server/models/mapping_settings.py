# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MappingSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, map: Dict[str, str]=None, remove: List[str]=None, values: Dict[str, str]=None):
        """MappingSettings - a model defined in OpenAPI

        :param map: The map of this MappingSettings.
        :param remove: The remove of this MappingSettings.
        :param values: The values of this MappingSettings.
        """
        self.openapi_types = {
            'map': Dict[str, str],
            'remove': List[str],
            'values': Dict[str, str]
        }

        self.attribute_map = {
            'map': 'map',
            'remove': 'remove',
            'values': 'values'
        }

        self._map = map
        self._remove = remove
        self._values = values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MappingSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MappingSettings of this MappingSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def map(self):
        """Gets the map of this MappingSettings.

        Fields to rename

        :return: The map of this MappingSettings.
        :rtype: Dict[str, str]
        """
        return self._map

    @map.setter
    def map(self, map):
        """Sets the map of this MappingSettings.

        Fields to rename

        :param map: The map of this MappingSettings.
        :type map: Dict[str, str]
        """
        if map is None:
            raise ValueError("Invalid value for `map`, must not be `None`")

        self._map = map

    @property
    def remove(self):
        """Gets the remove of this MappingSettings.

        Fields to remove

        :return: The remove of this MappingSettings.
        :rtype: List[str]
        """
        return self._remove

    @remove.setter
    def remove(self, remove):
        """Sets the remove of this MappingSettings.

        Fields to remove

        :param remove: The remove of this MappingSettings.
        :type remove: List[str]
        """
        if remove is None:
            raise ValueError("Invalid value for `remove`, must not be `None`")

        self._remove = remove

    @property
    def values(self):
        """Gets the values of this MappingSettings.

        Fields to set

        :return: The values of this MappingSettings.
        :rtype: Dict[str, str]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this MappingSettings.

        Fields to set

        :param values: The values of this MappingSettings.
        :type values: Dict[str, str]
        """
        if values is None:
            raise ValueError("Invalid value for `values`, must not be `None`")

        self._values = values
