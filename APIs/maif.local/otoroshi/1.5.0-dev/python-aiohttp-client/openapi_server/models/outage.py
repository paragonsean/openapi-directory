# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Outage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, descriptor_id: str=None, descriptor_name: str=None, duration: int=None, until: str=None):
        """Outage - a model defined in OpenAPI

        :param descriptor_id: The descriptor_id of this Outage.
        :param descriptor_name: The descriptor_name of this Outage.
        :param duration: The duration of this Outage.
        :param until: The until of this Outage.
        """
        self.openapi_types = {
            'descriptor_id': str,
            'descriptor_name': str,
            'duration': int,
            'until': str
        }

        self.attribute_map = {
            'descriptor_id': 'descriptorId',
            'descriptor_name': 'descriptorName',
            'duration': 'duration',
            'until': 'until'
        }

        self._descriptor_id = descriptor_id
        self._descriptor_name = descriptor_name
        self._duration = duration
        self._until = until

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Outage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Outage of this Outage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def descriptor_id(self):
        """Gets the descriptor_id of this Outage.

        The service impacted by outage

        :return: The descriptor_id of this Outage.
        :rtype: str
        """
        return self._descriptor_id

    @descriptor_id.setter
    def descriptor_id(self, descriptor_id):
        """Sets the descriptor_id of this Outage.

        The service impacted by outage

        :param descriptor_id: The descriptor_id of this Outage.
        :type descriptor_id: str
        """
        if descriptor_id is None:
            raise ValueError("Invalid value for `descriptor_id`, must not be `None`")

        self._descriptor_id = descriptor_id

    @property
    def descriptor_name(self):
        """Gets the descriptor_name of this Outage.

        The name of service impacted by outage

        :return: The descriptor_name of this Outage.
        :rtype: str
        """
        return self._descriptor_name

    @descriptor_name.setter
    def descriptor_name(self, descriptor_name):
        """Sets the descriptor_name of this Outage.

        The name of service impacted by outage

        :param descriptor_name: The descriptor_name of this Outage.
        :type descriptor_name: str
        """
        if descriptor_name is None:
            raise ValueError("Invalid value for `descriptor_name`, must not be `None`")

        self._descriptor_name = descriptor_name

    @property
    def duration(self):
        """Gets the duration of this Outage.

        The duration of the outage

        :return: The duration of this Outage.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this Outage.

        The duration of the outage

        :param duration: The duration of this Outage.
        :type duration: int
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")

        self._duration = duration

    @property
    def until(self):
        """Gets the until of this Outage.

        The end of the outage

        :return: The until of this Outage.
        :rtype: str
        """
        return self._until

    @until.setter
    def until(self, until):
        """Sets the until of this Outage.

        The end of the outage

        :param until: The until of this Outage.
        :type until: str
        """
        if until is None:
            raise ValueError("Invalid value for `until`, must not be `None`")

        self._until = until
