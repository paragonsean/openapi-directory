# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ValidationAuthority(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, always_valid: bool=None, bad_ttl: int=None, description: str=None, good_ttl: int=None, headers: Dict[str, str]=None, host: str=None, id: str=None, method: str=None, name: str=None, no_cache: bool=None, path: str=None, timeout: int=None, url: str=None):
        """ValidationAuthority - a model defined in OpenAPI

        :param always_valid: The always_valid of this ValidationAuthority.
        :param bad_ttl: The bad_ttl of this ValidationAuthority.
        :param description: The description of this ValidationAuthority.
        :param good_ttl: The good_ttl of this ValidationAuthority.
        :param headers: The headers of this ValidationAuthority.
        :param host: The host of this ValidationAuthority.
        :param id: The id of this ValidationAuthority.
        :param method: The method of this ValidationAuthority.
        :param name: The name of this ValidationAuthority.
        :param no_cache: The no_cache of this ValidationAuthority.
        :param path: The path of this ValidationAuthority.
        :param timeout: The timeout of this ValidationAuthority.
        :param url: The url of this ValidationAuthority.
        """
        self.openapi_types = {
            'always_valid': bool,
            'bad_ttl': int,
            'description': str,
            'good_ttl': int,
            'headers': Dict[str, str],
            'host': str,
            'id': str,
            'method': str,
            'name': str,
            'no_cache': bool,
            'path': str,
            'timeout': int,
            'url': str
        }

        self.attribute_map = {
            'always_valid': 'alwaysValid',
            'bad_ttl': 'badTtl',
            'description': 'description',
            'good_ttl': 'goodTtl',
            'headers': 'headers',
            'host': 'host',
            'id': 'id',
            'method': 'method',
            'name': 'name',
            'no_cache': 'noCache',
            'path': 'path',
            'timeout': 'timeout',
            'url': 'url'
        }

        self._always_valid = always_valid
        self._bad_ttl = bad_ttl
        self._description = description
        self._good_ttl = good_ttl
        self._headers = headers
        self._host = host
        self._id = id
        self._method = method
        self._name = name
        self._no_cache = no_cache
        self._path = path
        self._timeout = timeout
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ValidationAuthority':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ValidationAuthority of this ValidationAuthority.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def always_valid(self):
        """Gets the always_valid of this ValidationAuthority.

        Bypass http calls, every certificates are valids

        :return: The always_valid of this ValidationAuthority.
        :rtype: bool
        """
        return self._always_valid

    @always_valid.setter
    def always_valid(self, always_valid):
        """Sets the always_valid of this ValidationAuthority.

        Bypass http calls, every certificates are valids

        :param always_valid: The always_valid of this ValidationAuthority.
        :type always_valid: bool
        """
        if always_valid is None:
            raise ValueError("Invalid value for `always_valid`, must not be `None`")

        self._always_valid = always_valid

    @property
    def bad_ttl(self):
        """Gets the bad_ttl of this ValidationAuthority.

        The TTL for invalid access response caching

        :return: The bad_ttl of this ValidationAuthority.
        :rtype: int
        """
        return self._bad_ttl

    @bad_ttl.setter
    def bad_ttl(self, bad_ttl):
        """Sets the bad_ttl of this ValidationAuthority.

        The TTL for invalid access response caching

        :param bad_ttl: The bad_ttl of this ValidationAuthority.
        :type bad_ttl: int
        """
        if bad_ttl is None:
            raise ValueError("Invalid value for `bad_ttl`, must not be `None`")

        self._bad_ttl = bad_ttl

    @property
    def description(self):
        """Gets the description of this ValidationAuthority.

        The description of the settings

        :return: The description of this ValidationAuthority.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ValidationAuthority.

        The description of the settings

        :param description: The description of this ValidationAuthority.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def good_ttl(self):
        """Gets the good_ttl of this ValidationAuthority.

        The TTL for valid access response caching

        :return: The good_ttl of this ValidationAuthority.
        :rtype: int
        """
        return self._good_ttl

    @good_ttl.setter
    def good_ttl(self, good_ttl):
        """Sets the good_ttl of this ValidationAuthority.

        The TTL for valid access response caching

        :param good_ttl: The good_ttl of this ValidationAuthority.
        :type good_ttl: int
        """
        if good_ttl is None:
            raise ValueError("Invalid value for `good_ttl`, must not be `None`")

        self._good_ttl = good_ttl

    @property
    def headers(self):
        """Gets the headers of this ValidationAuthority.

        HTTP call headers

        :return: The headers of this ValidationAuthority.
        :rtype: Dict[str, str]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this ValidationAuthority.

        HTTP call headers

        :param headers: The headers of this ValidationAuthority.
        :type headers: Dict[str, str]
        """
        if headers is None:
            raise ValueError("Invalid value for `headers`, must not be `None`")

        self._headers = headers

    @property
    def host(self):
        """Gets the host of this ValidationAuthority.

        The host of the server

        :return: The host of this ValidationAuthority.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this ValidationAuthority.

        The host of the server

        :param host: The host of this ValidationAuthority.
        :type host: str
        """
        if host is None:
            raise ValueError("Invalid value for `host`, must not be `None`")

        self._host = host

    @property
    def id(self):
        """Gets the id of this ValidationAuthority.

        The id of the settings

        :return: The id of this ValidationAuthority.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ValidationAuthority.

        The id of the settings

        :param id: The id of this ValidationAuthority.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def method(self):
        """Gets the method of this ValidationAuthority.

        The HTTP method

        :return: The method of this ValidationAuthority.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this ValidationAuthority.

        The HTTP method

        :param method: The method of this ValidationAuthority.
        :type method: str
        """
        if method is None:
            raise ValueError("Invalid value for `method`, must not be `None`")

        self._method = method

    @property
    def name(self):
        """Gets the name of this ValidationAuthority.

        The name of the settings

        :return: The name of this ValidationAuthority.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ValidationAuthority.

        The name of the settings

        :param name: The name of this ValidationAuthority.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def no_cache(self):
        """Gets the no_cache of this ValidationAuthority.

        Avoid caching responses

        :return: The no_cache of this ValidationAuthority.
        :rtype: bool
        """
        return self._no_cache

    @no_cache.setter
    def no_cache(self, no_cache):
        """Sets the no_cache of this ValidationAuthority.

        Avoid caching responses

        :param no_cache: The no_cache of this ValidationAuthority.
        :type no_cache: bool
        """
        if no_cache is None:
            raise ValueError("Invalid value for `no_cache`, must not be `None`")

        self._no_cache = no_cache

    @property
    def path(self):
        """Gets the path of this ValidationAuthority.

        The URL path

        :return: The path of this ValidationAuthority.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ValidationAuthority.

        The URL path

        :param path: The path of this ValidationAuthority.
        :type path: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")

        self._path = path

    @property
    def timeout(self):
        """Gets the timeout of this ValidationAuthority.

        The call timeout

        :return: The timeout of this ValidationAuthority.
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this ValidationAuthority.

        The call timeout

        :param timeout: The timeout of this ValidationAuthority.
        :type timeout: int
        """
        if timeout is None:
            raise ValueError("Invalid value for `timeout`, must not be `None`")

        self._timeout = timeout

    @property
    def url(self):
        """Gets the url of this ValidationAuthority.

        The URL of the server

        :return: The url of this ValidationAuthority.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ValidationAuthority.

        The URL of the server

        :param url: The url of this ValidationAuthority.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
