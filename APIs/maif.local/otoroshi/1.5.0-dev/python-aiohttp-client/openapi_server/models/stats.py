# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Stats(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, calls: int=None, concurrent_handled_requests: int=None, data_in: int=None, data_in_rate: float=None, data_out: int=None, data_out_rate: float=None, duration: float=None, overhead: float=None, rate: float=None):
        """Stats - a model defined in OpenAPI

        :param calls: The calls of this Stats.
        :param concurrent_handled_requests: The concurrent_handled_requests of this Stats.
        :param data_in: The data_in of this Stats.
        :param data_in_rate: The data_in_rate of this Stats.
        :param data_out: The data_out of this Stats.
        :param data_out_rate: The data_out_rate of this Stats.
        :param duration: The duration of this Stats.
        :param overhead: The overhead of this Stats.
        :param rate: The rate of this Stats.
        """
        self.openapi_types = {
            'calls': int,
            'concurrent_handled_requests': int,
            'data_in': int,
            'data_in_rate': float,
            'data_out': int,
            'data_out_rate': float,
            'duration': float,
            'overhead': float,
            'rate': float
        }

        self.attribute_map = {
            'calls': 'calls',
            'concurrent_handled_requests': 'concurrentHandledRequests',
            'data_in': 'dataIn',
            'data_in_rate': 'dataInRate',
            'data_out': 'dataOut',
            'data_out_rate': 'dataOutRate',
            'duration': 'duration',
            'overhead': 'overhead',
            'rate': 'rate'
        }

        self._calls = calls
        self._concurrent_handled_requests = concurrent_handled_requests
        self._data_in = data_in
        self._data_in_rate = data_in_rate
        self._data_out = data_out
        self._data_out_rate = data_out_rate
        self._duration = duration
        self._overhead = overhead
        self._rate = rate

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Stats':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Stats of this Stats.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def calls(self):
        """Gets the calls of this Stats.

        Number of calls on the specified service or globally

        :return: The calls of this Stats.
        :rtype: int
        """
        return self._calls

    @calls.setter
    def calls(self, calls):
        """Sets the calls of this Stats.

        Number of calls on the specified service or globally

        :param calls: The calls of this Stats.
        :type calls: int
        """
        if calls is None:
            raise ValueError("Invalid value for `calls`, must not be `None`")

        self._calls = calls

    @property
    def concurrent_handled_requests(self):
        """Gets the concurrent_handled_requests of this Stats.

        The number of concurrent request currently

        :return: The concurrent_handled_requests of this Stats.
        :rtype: int
        """
        return self._concurrent_handled_requests

    @concurrent_handled_requests.setter
    def concurrent_handled_requests(self, concurrent_handled_requests):
        """Sets the concurrent_handled_requests of this Stats.

        The number of concurrent request currently

        :param concurrent_handled_requests: The concurrent_handled_requests of this Stats.
        :type concurrent_handled_requests: int
        """
        if concurrent_handled_requests is None:
            raise ValueError("Invalid value for `concurrent_handled_requests`, must not be `None`")

        self._concurrent_handled_requests = concurrent_handled_requests

    @property
    def data_in(self):
        """Gets the data_in of this Stats.

        The amount of data sent to the specified service or Otoroshi globally

        :return: The data_in of this Stats.
        :rtype: int
        """
        return self._data_in

    @data_in.setter
    def data_in(self, data_in):
        """Sets the data_in of this Stats.

        The amount of data sent to the specified service or Otoroshi globally

        :param data_in: The data_in of this Stats.
        :type data_in: int
        """
        if data_in is None:
            raise ValueError("Invalid value for `data_in`, must not be `None`")

        self._data_in = data_in

    @property
    def data_in_rate(self):
        """Gets the data_in_rate of this Stats.

        The rate of data sent to the specified service or Otoroshi globally

        :return: The data_in_rate of this Stats.
        :rtype: float
        """
        return self._data_in_rate

    @data_in_rate.setter
    def data_in_rate(self, data_in_rate):
        """Sets the data_in_rate of this Stats.

        The rate of data sent to the specified service or Otoroshi globally

        :param data_in_rate: The data_in_rate of this Stats.
        :type data_in_rate: float
        """
        if data_in_rate is None:
            raise ValueError("Invalid value for `data_in_rate`, must not be `None`")

        self._data_in_rate = data_in_rate

    @property
    def data_out(self):
        """Gets the data_out of this Stats.

        The amount of data sent from the specified service or Otoroshi globally

        :return: The data_out of this Stats.
        :rtype: int
        """
        return self._data_out

    @data_out.setter
    def data_out(self, data_out):
        """Sets the data_out of this Stats.

        The amount of data sent from the specified service or Otoroshi globally

        :param data_out: The data_out of this Stats.
        :type data_out: int
        """
        if data_out is None:
            raise ValueError("Invalid value for `data_out`, must not be `None`")

        self._data_out = data_out

    @property
    def data_out_rate(self):
        """Gets the data_out_rate of this Stats.

        The rate of data sent from the specified service or Otoroshi globally

        :return: The data_out_rate of this Stats.
        :rtype: float
        """
        return self._data_out_rate

    @data_out_rate.setter
    def data_out_rate(self, data_out_rate):
        """Sets the data_out_rate of this Stats.

        The rate of data sent from the specified service or Otoroshi globally

        :param data_out_rate: The data_out_rate of this Stats.
        :type data_out_rate: float
        """
        if data_out_rate is None:
            raise ValueError("Invalid value for `data_out_rate`, must not be `None`")

        self._data_out_rate = data_out_rate

    @property
    def duration(self):
        """Gets the duration of this Stats.

        The average duration for a call

        :return: The duration of this Stats.
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this Stats.

        The average duration for a call

        :param duration: The duration of this Stats.
        :type duration: float
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")

        self._duration = duration

    @property
    def overhead(self):
        """Gets the overhead of this Stats.

        The average overhead time induced by Otoroshi for each call

        :return: The overhead of this Stats.
        :rtype: float
        """
        return self._overhead

    @overhead.setter
    def overhead(self, overhead):
        """Sets the overhead of this Stats.

        The average overhead time induced by Otoroshi for each call

        :param overhead: The overhead of this Stats.
        :type overhead: float
        """
        if overhead is None:
            raise ValueError("Invalid value for `overhead`, must not be `None`")

        self._overhead = overhead

    @property
    def rate(self):
        """Gets the rate of this Stats.

        The rate of data sent from and to the specified service or Otoroshi globally

        :return: The rate of this Stats.
        :rtype: float
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this Stats.

        The rate of data sent from and to the specified service or Otoroshi globally

        :param rate: The rate of this Stats.
        :type rate: float
        """
        if rate is None:
            raise ValueError("Invalid value for `rate`, must not be `None`")

        self._rate = rate
