# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ScriptCompilationError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, column: str=None, file: Dict[str, str]=None, line: str=None, message: Dict[str, str]=None, raw_message: Dict[str, str]=None):
        """ScriptCompilationError - a model defined in OpenAPI

        :param column: The column of this ScriptCompilationError.
        :param file: The file of this ScriptCompilationError.
        :param line: The line of this ScriptCompilationError.
        :param message: The message of this ScriptCompilationError.
        :param raw_message: The raw_message of this ScriptCompilationError.
        """
        self.openapi_types = {
            'column': str,
            'file': Dict[str, str],
            'line': str,
            'message': Dict[str, str],
            'raw_message': Dict[str, str]
        }

        self.attribute_map = {
            'column': 'column',
            'file': 'file',
            'line': 'line',
            'message': 'message',
            'raw_message': 'rawMessage'
        }

        self._column = column
        self._file = file
        self._line = line
        self._message = message
        self._raw_message = raw_message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScriptCompilationError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScriptCompilationError of this ScriptCompilationError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def column(self):
        """Gets the column of this ScriptCompilationError.

        The column of the error

        :return: The column of this ScriptCompilationError.
        :rtype: str
        """
        return self._column

    @column.setter
    def column(self, column):
        """Sets the column of this ScriptCompilationError.

        The column of the error

        :param column: The column of this ScriptCompilationError.
        :type column: str
        """
        if column is None:
            raise ValueError("Invalid value for `column`, must not be `None`")

        self._column = column

    @property
    def file(self):
        """Gets the file of this ScriptCompilationError.

        The file where the error is located

        :return: The file of this ScriptCompilationError.
        :rtype: Dict[str, str]
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this ScriptCompilationError.

        The file where the error is located

        :param file: The file of this ScriptCompilationError.
        :type file: Dict[str, str]
        """
        if file is None:
            raise ValueError("Invalid value for `file`, must not be `None`")

        self._file = file

    @property
    def line(self):
        """Gets the line of this ScriptCompilationError.

        The line of the error

        :return: The line of this ScriptCompilationError.
        :rtype: str
        """
        return self._line

    @line.setter
    def line(self, line):
        """Sets the line of this ScriptCompilationError.

        The line of the error

        :param line: The line of this ScriptCompilationError.
        :type line: str
        """
        if line is None:
            raise ValueError("Invalid value for `line`, must not be `None`")

        self._line = line

    @property
    def message(self):
        """Gets the message of this ScriptCompilationError.

        The message to display for the error

        :return: The message of this ScriptCompilationError.
        :rtype: Dict[str, str]
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ScriptCompilationError.

        The message to display for the error

        :param message: The message of this ScriptCompilationError.
        :type message: Dict[str, str]
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def raw_message(self):
        """Gets the raw_message of this ScriptCompilationError.

        The raw message from the compiler

        :return: The raw_message of this ScriptCompilationError.
        :rtype: Dict[str, str]
        """
        return self._raw_message

    @raw_message.setter
    def raw_message(self, raw_message):
        """Sets the raw_message of this ScriptCompilationError.

        The raw message from the compiler

        :param raw_message: The raw_message of this ScriptCompilationError.
        :type raw_message: Dict[str, str]
        """
        if raw_message is None:
            raise ValueError("Invalid value for `raw_message`, must not be `None`")

        self._raw_message = raw_message
