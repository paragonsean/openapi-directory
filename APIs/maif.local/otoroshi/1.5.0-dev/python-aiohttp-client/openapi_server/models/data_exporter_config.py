# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_exporter_config_config import DataExporterConfigConfig
from openapi_server.models.filtering import Filtering
from openapi_server.models.location import Location
from openapi_server import util


class DataExporterConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, buffer_size: int=None, config: DataExporterConfigConfig=None, desc: str=None, enabled: str=None, filtering: Filtering=None, group_duration: int=None, group_size: int=None, id: str=None, json_workers: int=None, location: Location=None, metadata: Dict[str, str]=None, name: str=None, projection: Dict[str, str]=None, send_workers: int=None, typ: str=None):
        """DataExporterConfig - a model defined in OpenAPI

        :param buffer_size: The buffer_size of this DataExporterConfig.
        :param config: The config of this DataExporterConfig.
        :param desc: The desc of this DataExporterConfig.
        :param enabled: The enabled of this DataExporterConfig.
        :param filtering: The filtering of this DataExporterConfig.
        :param group_duration: The group_duration of this DataExporterConfig.
        :param group_size: The group_size of this DataExporterConfig.
        :param id: The id of this DataExporterConfig.
        :param json_workers: The json_workers of this DataExporterConfig.
        :param location: The location of this DataExporterConfig.
        :param metadata: The metadata of this DataExporterConfig.
        :param name: The name of this DataExporterConfig.
        :param projection: The projection of this DataExporterConfig.
        :param send_workers: The send_workers of this DataExporterConfig.
        :param typ: The typ of this DataExporterConfig.
        """
        self.openapi_types = {
            'buffer_size': int,
            'config': DataExporterConfigConfig,
            'desc': str,
            'enabled': str,
            'filtering': Filtering,
            'group_duration': int,
            'group_size': int,
            'id': str,
            'json_workers': int,
            'location': Location,
            'metadata': Dict[str, str],
            'name': str,
            'projection': Dict[str, str],
            'send_workers': int,
            'typ': str
        }

        self.attribute_map = {
            'buffer_size': 'bufferSize',
            'config': 'config',
            'desc': 'desc',
            'enabled': 'enabled',
            'filtering': 'filtering',
            'group_duration': 'groupDuration',
            'group_size': 'groupSize',
            'id': 'id',
            'json_workers': 'jsonWorkers',
            'location': 'location',
            'metadata': 'metadata',
            'name': 'name',
            'projection': 'projection',
            'send_workers': 'sendWorkers',
            'typ': 'typ'
        }

        self._buffer_size = buffer_size
        self._config = config
        self._desc = desc
        self._enabled = enabled
        self._filtering = filtering
        self._group_duration = group_duration
        self._group_size = group_size
        self._id = id
        self._json_workers = json_workers
        self._location = location
        self._metadata = metadata
        self._name = name
        self._projection = projection
        self._send_workers = send_workers
        self._typ = typ

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataExporterConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataExporterConfig of this DataExporterConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def buffer_size(self):
        """Gets the buffer_size of this DataExporterConfig.

        buffer size

        :return: The buffer_size of this DataExporterConfig.
        :rtype: int
        """
        return self._buffer_size

    @buffer_size.setter
    def buffer_size(self, buffer_size):
        """Sets the buffer_size of this DataExporterConfig.

        buffer size

        :param buffer_size: The buffer_size of this DataExporterConfig.
        :type buffer_size: int
        """

        self._buffer_size = buffer_size

    @property
    def config(self):
        """Gets the config of this DataExporterConfig.


        :return: The config of this DataExporterConfig.
        :rtype: DataExporterConfigConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this DataExporterConfig.


        :param config: The config of this DataExporterConfig.
        :type config: DataExporterConfigConfig
        """

        self._config = config

    @property
    def desc(self):
        """Gets the desc of this DataExporterConfig.

        Description

        :return: The desc of this DataExporterConfig.
        :rtype: str
        """
        return self._desc

    @desc.setter
    def desc(self, desc):
        """Sets the desc of this DataExporterConfig.

        Description

        :param desc: The desc of this DataExporterConfig.
        :type desc: str
        """

        self._desc = desc

    @property
    def enabled(self):
        """Gets the enabled of this DataExporterConfig.

        Boolean

        :return: The enabled of this DataExporterConfig.
        :rtype: str
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this DataExporterConfig.

        Boolean

        :param enabled: The enabled of this DataExporterConfig.
        :type enabled: str
        """

        self._enabled = enabled

    @property
    def filtering(self):
        """Gets the filtering of this DataExporterConfig.


        :return: The filtering of this DataExporterConfig.
        :rtype: Filtering
        """
        return self._filtering

    @filtering.setter
    def filtering(self, filtering):
        """Sets the filtering of this DataExporterConfig.


        :param filtering: The filtering of this DataExporterConfig.
        :type filtering: Filtering
        """

        self._filtering = filtering

    @property
    def group_duration(self):
        """Gets the group_duration of this DataExporterConfig.

        duration

        :return: The group_duration of this DataExporterConfig.
        :rtype: int
        """
        return self._group_duration

    @group_duration.setter
    def group_duration(self, group_duration):
        """Sets the group_duration of this DataExporterConfig.

        duration

        :param group_duration: The group_duration of this DataExporterConfig.
        :type group_duration: int
        """

        self._group_duration = group_duration

    @property
    def group_size(self):
        """Gets the group_size of this DataExporterConfig.

        Group size

        :return: The group_size of this DataExporterConfig.
        :rtype: int
        """
        return self._group_size

    @group_size.setter
    def group_size(self, group_size):
        """Sets the group_size of this DataExporterConfig.

        Group size

        :param group_size: The group_size of this DataExporterConfig.
        :type group_size: int
        """

        self._group_size = group_size

    @property
    def id(self):
        """Gets the id of this DataExporterConfig.

        Id

        :return: The id of this DataExporterConfig.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DataExporterConfig.

        Id

        :param id: The id of this DataExporterConfig.
        :type id: str
        """

        self._id = id

    @property
    def json_workers(self):
        """Gets the json_workers of this DataExporterConfig.

        nb workers

        :return: The json_workers of this DataExporterConfig.
        :rtype: int
        """
        return self._json_workers

    @json_workers.setter
    def json_workers(self, json_workers):
        """Sets the json_workers of this DataExporterConfig.

        nb workers

        :param json_workers: The json_workers of this DataExporterConfig.
        :type json_workers: int
        """

        self._json_workers = json_workers

    @property
    def location(self):
        """Gets the location of this DataExporterConfig.


        :return: The location of this DataExporterConfig.
        :rtype: Location
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this DataExporterConfig.


        :param location: The location of this DataExporterConfig.
        :type location: Location
        """

        self._location = location

    @property
    def metadata(self):
        """Gets the metadata of this DataExporterConfig.

        Metadata

        :return: The metadata of this DataExporterConfig.
        :rtype: Dict[str, str]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this DataExporterConfig.

        Metadata

        :param metadata: The metadata of this DataExporterConfig.
        :type metadata: Dict[str, str]
        """

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this DataExporterConfig.

        Name

        :return: The name of this DataExporterConfig.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DataExporterConfig.

        Name

        :param name: The name of this DataExporterConfig.
        :type name: str
        """

        self._name = name

    @property
    def projection(self):
        """Gets the projection of this DataExporterConfig.

        projection

        :return: The projection of this DataExporterConfig.
        :rtype: Dict[str, str]
        """
        return self._projection

    @projection.setter
    def projection(self, projection):
        """Sets the projection of this DataExporterConfig.

        projection

        :param projection: The projection of this DataExporterConfig.
        :type projection: Dict[str, str]
        """

        self._projection = projection

    @property
    def send_workers(self):
        """Gets the send_workers of this DataExporterConfig.

        send workers

        :return: The send_workers of this DataExporterConfig.
        :rtype: int
        """
        return self._send_workers

    @send_workers.setter
    def send_workers(self, send_workers):
        """Sets the send_workers of this DataExporterConfig.

        send workers

        :param send_workers: The send_workers of this DataExporterConfig.
        :type send_workers: int
        """

        self._send_workers = send_workers

    @property
    def typ(self):
        """Gets the typ of this DataExporterConfig.

        Type of data exporter

        :return: The typ of this DataExporterConfig.
        :rtype: str
        """
        return self._typ

    @typ.setter
    def typ(self, typ):
        """Sets the typ of this DataExporterConfig.

        Type of data exporter

        :param typ: The typ of this DataExporterConfig.
        :type typ: str
        """
        allowed_values = ["kafka", "pulsar", "file", "mailer", "elastic", "console", "custom"]  # noqa: E501
        if typ not in allowed_values:
            raise ValueError(
                "Invalid value for `typ` ({0}), must be one of {1}"
                .format(typ, allowed_values)
            )

        self._typ = typ
