# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ESAlgoSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, private_key: str=None, public_key: str=None, size: int=None, type: str=None):
        """ESAlgoSettings - a model defined in OpenAPI

        :param private_key: The private_key of this ESAlgoSettings.
        :param public_key: The public_key of this ESAlgoSettings.
        :param size: The size of this ESAlgoSettings.
        :param type: The type of this ESAlgoSettings.
        """
        self.openapi_types = {
            'private_key': str,
            'public_key': str,
            'size': int,
            'type': str
        }

        self.attribute_map = {
            'private_key': 'privateKey',
            'public_key': 'publicKey',
            'size': 'size',
            'type': 'type'
        }

        self._private_key = private_key
        self._public_key = public_key
        self._size = size
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ESAlgoSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ESAlgoSettings of this ESAlgoSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def private_key(self):
        """Gets the private_key of this ESAlgoSettings.

        The private key for the RSA function

        :return: The private_key of this ESAlgoSettings.
        :rtype: str
        """
        return self._private_key

    @private_key.setter
    def private_key(self, private_key):
        """Sets the private_key of this ESAlgoSettings.

        The private key for the RSA function

        :param private_key: The private_key of this ESAlgoSettings.
        :type private_key: str
        """

        self._private_key = private_key

    @property
    def public_key(self):
        """Gets the public_key of this ESAlgoSettings.

        The public key for the RSA function

        :return: The public_key of this ESAlgoSettings.
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this ESAlgoSettings.

        The public key for the RSA function

        :param public_key: The public_key of this ESAlgoSettings.
        :type public_key: str
        """
        if public_key is None:
            raise ValueError("Invalid value for `public_key`, must not be `None`")

        self._public_key = public_key

    @property
    def size(self):
        """Gets the size of this ESAlgoSettings.

        Size for SHA function. can be 256, 384 or 512

        :return: The size of this ESAlgoSettings.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ESAlgoSettings.

        Size for SHA function. can be 256, 384 or 512

        :param size: The size of this ESAlgoSettings.
        :type size: int
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")

        self._size = size

    @property
    def type(self):
        """Gets the type of this ESAlgoSettings.

        String with value ESAlgoSettings

        :return: The type of this ESAlgoSettings.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ESAlgoSettings.

        String with value ESAlgoSettings

        :param type: The type of this ESAlgoSettings.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
