# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.auth0_config import Auth0Config
from openapi_server.models.clever_settings import CleverSettings
from openapi_server.models.elastic_config import ElasticConfig
from openapi_server.models.ip_filtering import IpFiltering
from openapi_server.models.mailer_settings import MailerSettings
from openapi_server.models.webhook import Webhook
from openapi_server import util


class GlobalConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alerts_emails: List[str]=None, alerts_webhooks: List[Webhook]=None, analytics_webhooks: List[Webhook]=None, api_read_only: bool=None, auto_link_to_default_group: bool=None, backoffice_auth0_config: Auth0Config=None, clever_settings: CleverSettings=None, elastic_reads_config: ElasticConfig=None, elastic_writes_configs: List[ElasticConfig]=None, endless_ip_addresses: List[str]=None, ip_filtering: IpFiltering=None, limit_concurrent_requests: bool=None, lines: List[str]=None, mailer_settings: MailerSettings=None, max_concurrent_requests: int=None, max_http10_response_size: int=None, max_logs_size: int=None, middle_fingers: bool=None, per_ip_throttling_quota: int=None, private_apps_auth0_config: Auth0Config=None, stream_entity_only: bool=None, throttling_quota: int=None, u2f_login_only: bool=None, use_circuit_breakers: bool=None):
        """GlobalConfig - a model defined in OpenAPI

        :param alerts_emails: The alerts_emails of this GlobalConfig.
        :param alerts_webhooks: The alerts_webhooks of this GlobalConfig.
        :param analytics_webhooks: The analytics_webhooks of this GlobalConfig.
        :param api_read_only: The api_read_only of this GlobalConfig.
        :param auto_link_to_default_group: The auto_link_to_default_group of this GlobalConfig.
        :param backoffice_auth0_config: The backoffice_auth0_config of this GlobalConfig.
        :param clever_settings: The clever_settings of this GlobalConfig.
        :param elastic_reads_config: The elastic_reads_config of this GlobalConfig.
        :param elastic_writes_configs: The elastic_writes_configs of this GlobalConfig.
        :param endless_ip_addresses: The endless_ip_addresses of this GlobalConfig.
        :param ip_filtering: The ip_filtering of this GlobalConfig.
        :param limit_concurrent_requests: The limit_concurrent_requests of this GlobalConfig.
        :param lines: The lines of this GlobalConfig.
        :param mailer_settings: The mailer_settings of this GlobalConfig.
        :param max_concurrent_requests: The max_concurrent_requests of this GlobalConfig.
        :param max_http10_response_size: The max_http10_response_size of this GlobalConfig.
        :param max_logs_size: The max_logs_size of this GlobalConfig.
        :param middle_fingers: The middle_fingers of this GlobalConfig.
        :param per_ip_throttling_quota: The per_ip_throttling_quota of this GlobalConfig.
        :param private_apps_auth0_config: The private_apps_auth0_config of this GlobalConfig.
        :param stream_entity_only: The stream_entity_only of this GlobalConfig.
        :param throttling_quota: The throttling_quota of this GlobalConfig.
        :param u2f_login_only: The u2f_login_only of this GlobalConfig.
        :param use_circuit_breakers: The use_circuit_breakers of this GlobalConfig.
        """
        self.openapi_types = {
            'alerts_emails': List[str],
            'alerts_webhooks': List[Webhook],
            'analytics_webhooks': List[Webhook],
            'api_read_only': bool,
            'auto_link_to_default_group': bool,
            'backoffice_auth0_config': Auth0Config,
            'clever_settings': CleverSettings,
            'elastic_reads_config': ElasticConfig,
            'elastic_writes_configs': List[ElasticConfig],
            'endless_ip_addresses': List[str],
            'ip_filtering': IpFiltering,
            'limit_concurrent_requests': bool,
            'lines': List[str],
            'mailer_settings': MailerSettings,
            'max_concurrent_requests': int,
            'max_http10_response_size': int,
            'max_logs_size': int,
            'middle_fingers': bool,
            'per_ip_throttling_quota': int,
            'private_apps_auth0_config': Auth0Config,
            'stream_entity_only': bool,
            'throttling_quota': int,
            'u2f_login_only': bool,
            'use_circuit_breakers': bool
        }

        self.attribute_map = {
            'alerts_emails': 'alertsEmails',
            'alerts_webhooks': 'alertsWebhooks',
            'analytics_webhooks': 'analyticsWebhooks',
            'api_read_only': 'apiReadOnly',
            'auto_link_to_default_group': 'autoLinkToDefaultGroup',
            'backoffice_auth0_config': 'backofficeAuth0Config',
            'clever_settings': 'cleverSettings',
            'elastic_reads_config': 'elasticReadsConfig',
            'elastic_writes_configs': 'elasticWritesConfigs',
            'endless_ip_addresses': 'endlessIpAddresses',
            'ip_filtering': 'ipFiltering',
            'limit_concurrent_requests': 'limitConcurrentRequests',
            'lines': 'lines',
            'mailer_settings': 'mailerSettings',
            'max_concurrent_requests': 'maxConcurrentRequests',
            'max_http10_response_size': 'maxHttp10ResponseSize',
            'max_logs_size': 'maxLogsSize',
            'middle_fingers': 'middleFingers',
            'per_ip_throttling_quota': 'perIpThrottlingQuota',
            'private_apps_auth0_config': 'privateAppsAuth0Config',
            'stream_entity_only': 'streamEntityOnly',
            'throttling_quota': 'throttlingQuota',
            'u2f_login_only': 'u2fLoginOnly',
            'use_circuit_breakers': 'useCircuitBreakers'
        }

        self._alerts_emails = alerts_emails
        self._alerts_webhooks = alerts_webhooks
        self._analytics_webhooks = analytics_webhooks
        self._api_read_only = api_read_only
        self._auto_link_to_default_group = auto_link_to_default_group
        self._backoffice_auth0_config = backoffice_auth0_config
        self._clever_settings = clever_settings
        self._elastic_reads_config = elastic_reads_config
        self._elastic_writes_configs = elastic_writes_configs
        self._endless_ip_addresses = endless_ip_addresses
        self._ip_filtering = ip_filtering
        self._limit_concurrent_requests = limit_concurrent_requests
        self._lines = lines
        self._mailer_settings = mailer_settings
        self._max_concurrent_requests = max_concurrent_requests
        self._max_http10_response_size = max_http10_response_size
        self._max_logs_size = max_logs_size
        self._middle_fingers = middle_fingers
        self._per_ip_throttling_quota = per_ip_throttling_quota
        self._private_apps_auth0_config = private_apps_auth0_config
        self._stream_entity_only = stream_entity_only
        self._throttling_quota = throttling_quota
        self._u2f_login_only = u2f_login_only
        self._use_circuit_breakers = use_circuit_breakers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GlobalConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GlobalConfig of this GlobalConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alerts_emails(self):
        """Gets the alerts_emails of this GlobalConfig.

        Email addresses that will receive all Otoroshi alert events

        :return: The alerts_emails of this GlobalConfig.
        :rtype: List[str]
        """
        return self._alerts_emails

    @alerts_emails.setter
    def alerts_emails(self, alerts_emails):
        """Sets the alerts_emails of this GlobalConfig.

        Email addresses that will receive all Otoroshi alert events

        :param alerts_emails: The alerts_emails of this GlobalConfig.
        :type alerts_emails: List[str]
        """
        if alerts_emails is None:
            raise ValueError("Invalid value for `alerts_emails`, must not be `None`")

        self._alerts_emails = alerts_emails

    @property
    def alerts_webhooks(self):
        """Gets the alerts_webhooks of this GlobalConfig.

        Webhook that will receive all Otoroshi alert events

        :return: The alerts_webhooks of this GlobalConfig.
        :rtype: List[Webhook]
        """
        return self._alerts_webhooks

    @alerts_webhooks.setter
    def alerts_webhooks(self, alerts_webhooks):
        """Sets the alerts_webhooks of this GlobalConfig.

        Webhook that will receive all Otoroshi alert events

        :param alerts_webhooks: The alerts_webhooks of this GlobalConfig.
        :type alerts_webhooks: List[Webhook]
        """
        if alerts_webhooks is None:
            raise ValueError("Invalid value for `alerts_webhooks`, must not be `None`")

        self._alerts_webhooks = alerts_webhooks

    @property
    def analytics_webhooks(self):
        """Gets the analytics_webhooks of this GlobalConfig.

        Webhook that will receive all internal Otoroshi events

        :return: The analytics_webhooks of this GlobalConfig.
        :rtype: List[Webhook]
        """
        return self._analytics_webhooks

    @analytics_webhooks.setter
    def analytics_webhooks(self, analytics_webhooks):
        """Sets the analytics_webhooks of this GlobalConfig.

        Webhook that will receive all internal Otoroshi events

        :param analytics_webhooks: The analytics_webhooks of this GlobalConfig.
        :type analytics_webhooks: List[Webhook]
        """
        if analytics_webhooks is None:
            raise ValueError("Invalid value for `analytics_webhooks`, must not be `None`")

        self._analytics_webhooks = analytics_webhooks

    @property
    def api_read_only(self):
        """Gets the api_read_only of this GlobalConfig.

        If enabled, Admin API won't be able to write/update/delete entities

        :return: The api_read_only of this GlobalConfig.
        :rtype: bool
        """
        return self._api_read_only

    @api_read_only.setter
    def api_read_only(self, api_read_only):
        """Sets the api_read_only of this GlobalConfig.

        If enabled, Admin API won't be able to write/update/delete entities

        :param api_read_only: The api_read_only of this GlobalConfig.
        :type api_read_only: bool
        """
        if api_read_only is None:
            raise ValueError("Invalid value for `api_read_only`, must not be `None`")

        self._api_read_only = api_read_only

    @property
    def auto_link_to_default_group(self):
        """Gets the auto_link_to_default_group of this GlobalConfig.

        If not defined, every new service descriptor will be added to the default group

        :return: The auto_link_to_default_group of this GlobalConfig.
        :rtype: bool
        """
        return self._auto_link_to_default_group

    @auto_link_to_default_group.setter
    def auto_link_to_default_group(self, auto_link_to_default_group):
        """Sets the auto_link_to_default_group of this GlobalConfig.

        If not defined, every new service descriptor will be added to the default group

        :param auto_link_to_default_group: The auto_link_to_default_group of this GlobalConfig.
        :type auto_link_to_default_group: bool
        """
        if auto_link_to_default_group is None:
            raise ValueError("Invalid value for `auto_link_to_default_group`, must not be `None`")

        self._auto_link_to_default_group = auto_link_to_default_group

    @property
    def backoffice_auth0_config(self):
        """Gets the backoffice_auth0_config of this GlobalConfig.


        :return: The backoffice_auth0_config of this GlobalConfig.
        :rtype: Auth0Config
        """
        return self._backoffice_auth0_config

    @backoffice_auth0_config.setter
    def backoffice_auth0_config(self, backoffice_auth0_config):
        """Sets the backoffice_auth0_config of this GlobalConfig.


        :param backoffice_auth0_config: The backoffice_auth0_config of this GlobalConfig.
        :type backoffice_auth0_config: Auth0Config
        """

        self._backoffice_auth0_config = backoffice_auth0_config

    @property
    def clever_settings(self):
        """Gets the clever_settings of this GlobalConfig.


        :return: The clever_settings of this GlobalConfig.
        :rtype: CleverSettings
        """
        return self._clever_settings

    @clever_settings.setter
    def clever_settings(self, clever_settings):
        """Sets the clever_settings of this GlobalConfig.


        :param clever_settings: The clever_settings of this GlobalConfig.
        :type clever_settings: CleverSettings
        """

        self._clever_settings = clever_settings

    @property
    def elastic_reads_config(self):
        """Gets the elastic_reads_config of this GlobalConfig.


        :return: The elastic_reads_config of this GlobalConfig.
        :rtype: ElasticConfig
        """
        return self._elastic_reads_config

    @elastic_reads_config.setter
    def elastic_reads_config(self, elastic_reads_config):
        """Sets the elastic_reads_config of this GlobalConfig.


        :param elastic_reads_config: The elastic_reads_config of this GlobalConfig.
        :type elastic_reads_config: ElasticConfig
        """

        self._elastic_reads_config = elastic_reads_config

    @property
    def elastic_writes_configs(self):
        """Gets the elastic_writes_configs of this GlobalConfig.

        Configs. for Elastic writes

        :return: The elastic_writes_configs of this GlobalConfig.
        :rtype: List[ElasticConfig]
        """
        return self._elastic_writes_configs

    @elastic_writes_configs.setter
    def elastic_writes_configs(self, elastic_writes_configs):
        """Sets the elastic_writes_configs of this GlobalConfig.

        Configs. for Elastic writes

        :param elastic_writes_configs: The elastic_writes_configs of this GlobalConfig.
        :type elastic_writes_configs: List[ElasticConfig]
        """

        self._elastic_writes_configs = elastic_writes_configs

    @property
    def endless_ip_addresses(self):
        """Gets the endless_ip_addresses of this GlobalConfig.

        IP addresses for which any request to Otoroshi will respond with 128 Gb of zeros

        :return: The endless_ip_addresses of this GlobalConfig.
        :rtype: List[str]
        """
        return self._endless_ip_addresses

    @endless_ip_addresses.setter
    def endless_ip_addresses(self, endless_ip_addresses):
        """Sets the endless_ip_addresses of this GlobalConfig.

        IP addresses for which any request to Otoroshi will respond with 128 Gb of zeros

        :param endless_ip_addresses: The endless_ip_addresses of this GlobalConfig.
        :type endless_ip_addresses: List[str]
        """
        if endless_ip_addresses is None:
            raise ValueError("Invalid value for `endless_ip_addresses`, must not be `None`")

        self._endless_ip_addresses = endless_ip_addresses

    @property
    def ip_filtering(self):
        """Gets the ip_filtering of this GlobalConfig.


        :return: The ip_filtering of this GlobalConfig.
        :rtype: IpFiltering
        """
        return self._ip_filtering

    @ip_filtering.setter
    def ip_filtering(self, ip_filtering):
        """Sets the ip_filtering of this GlobalConfig.


        :param ip_filtering: The ip_filtering of this GlobalConfig.
        :type ip_filtering: IpFiltering
        """
        if ip_filtering is None:
            raise ValueError("Invalid value for `ip_filtering`, must not be `None`")

        self._ip_filtering = ip_filtering

    @property
    def limit_concurrent_requests(self):
        """Gets the limit_concurrent_requests of this GlobalConfig.

        If enabled, Otoroshi will reject new request if too much at the same time

        :return: The limit_concurrent_requests of this GlobalConfig.
        :rtype: bool
        """
        return self._limit_concurrent_requests

    @limit_concurrent_requests.setter
    def limit_concurrent_requests(self, limit_concurrent_requests):
        """Sets the limit_concurrent_requests of this GlobalConfig.

        If enabled, Otoroshi will reject new request if too much at the same time

        :param limit_concurrent_requests: The limit_concurrent_requests of this GlobalConfig.
        :type limit_concurrent_requests: bool
        """
        if limit_concurrent_requests is None:
            raise ValueError("Invalid value for `limit_concurrent_requests`, must not be `None`")

        self._limit_concurrent_requests = limit_concurrent_requests

    @property
    def lines(self):
        """Gets the lines of this GlobalConfig.

        Possibles lines for Otoroshi

        :return: The lines of this GlobalConfig.
        :rtype: List[str]
        """
        return self._lines

    @lines.setter
    def lines(self, lines):
        """Sets the lines of this GlobalConfig.

        Possibles lines for Otoroshi

        :param lines: The lines of this GlobalConfig.
        :type lines: List[str]
        """

        self._lines = lines

    @property
    def mailer_settings(self):
        """Gets the mailer_settings of this GlobalConfig.


        :return: The mailer_settings of this GlobalConfig.
        :rtype: MailerSettings
        """
        return self._mailer_settings

    @mailer_settings.setter
    def mailer_settings(self, mailer_settings):
        """Sets the mailer_settings of this GlobalConfig.


        :param mailer_settings: The mailer_settings of this GlobalConfig.
        :type mailer_settings: MailerSettings
        """

        self._mailer_settings = mailer_settings

    @property
    def max_concurrent_requests(self):
        """Gets the max_concurrent_requests of this GlobalConfig.

        The number of authorized request processed at the same time

        :return: The max_concurrent_requests of this GlobalConfig.
        :rtype: int
        """
        return self._max_concurrent_requests

    @max_concurrent_requests.setter
    def max_concurrent_requests(self, max_concurrent_requests):
        """Sets the max_concurrent_requests of this GlobalConfig.

        The number of authorized request processed at the same time

        :param max_concurrent_requests: The max_concurrent_requests of this GlobalConfig.
        :type max_concurrent_requests: int
        """
        if max_concurrent_requests is None:
            raise ValueError("Invalid value for `max_concurrent_requests`, must not be `None`")

        self._max_concurrent_requests = max_concurrent_requests

    @property
    def max_http10_response_size(self):
        """Gets the max_http10_response_size of this GlobalConfig.

        The max size in bytes of an HTTP 1.0 response

        :return: The max_http10_response_size of this GlobalConfig.
        :rtype: int
        """
        return self._max_http10_response_size

    @max_http10_response_size.setter
    def max_http10_response_size(self, max_http10_response_size):
        """Sets the max_http10_response_size of this GlobalConfig.

        The max size in bytes of an HTTP 1.0 response

        :param max_http10_response_size: The max_http10_response_size of this GlobalConfig.
        :type max_http10_response_size: int
        """

        self._max_http10_response_size = max_http10_response_size

    @property
    def max_logs_size(self):
        """Gets the max_logs_size of this GlobalConfig.

        Number of events kept locally

        :return: The max_logs_size of this GlobalConfig.
        :rtype: int
        """
        return self._max_logs_size

    @max_logs_size.setter
    def max_logs_size(self, max_logs_size):
        """Sets the max_logs_size of this GlobalConfig.

        Number of events kept locally

        :param max_logs_size: The max_logs_size of this GlobalConfig.
        :type max_logs_size: int
        """

        self._max_logs_size = max_logs_size

    @property
    def middle_fingers(self):
        """Gets the middle_fingers of this GlobalConfig.

        Use middle finger emoji as a response character for endless HTTP responses

        :return: The middle_fingers of this GlobalConfig.
        :rtype: bool
        """
        return self._middle_fingers

    @middle_fingers.setter
    def middle_fingers(self, middle_fingers):
        """Sets the middle_fingers of this GlobalConfig.

        Use middle finger emoji as a response character for endless HTTP responses

        :param middle_fingers: The middle_fingers of this GlobalConfig.
        :type middle_fingers: bool
        """

        self._middle_fingers = middle_fingers

    @property
    def per_ip_throttling_quota(self):
        """Gets the per_ip_throttling_quota of this GlobalConfig.

        Authorized number of calls per second globally per IP address, measured on 10 seconds

        :return: The per_ip_throttling_quota of this GlobalConfig.
        :rtype: int
        """
        return self._per_ip_throttling_quota

    @per_ip_throttling_quota.setter
    def per_ip_throttling_quota(self, per_ip_throttling_quota):
        """Sets the per_ip_throttling_quota of this GlobalConfig.

        Authorized number of calls per second globally per IP address, measured on 10 seconds

        :param per_ip_throttling_quota: The per_ip_throttling_quota of this GlobalConfig.
        :type per_ip_throttling_quota: int
        """
        if per_ip_throttling_quota is None:
            raise ValueError("Invalid value for `per_ip_throttling_quota`, must not be `None`")

        self._per_ip_throttling_quota = per_ip_throttling_quota

    @property
    def private_apps_auth0_config(self):
        """Gets the private_apps_auth0_config of this GlobalConfig.


        :return: The private_apps_auth0_config of this GlobalConfig.
        :rtype: Auth0Config
        """
        return self._private_apps_auth0_config

    @private_apps_auth0_config.setter
    def private_apps_auth0_config(self, private_apps_auth0_config):
        """Sets the private_apps_auth0_config of this GlobalConfig.


        :param private_apps_auth0_config: The private_apps_auth0_config of this GlobalConfig.
        :type private_apps_auth0_config: Auth0Config
        """

        self._private_apps_auth0_config = private_apps_auth0_config

    @property
    def stream_entity_only(self):
        """Gets the stream_entity_only of this GlobalConfig.

        HTTP will be streamed only. Doesn't work with old browsers

        :return: The stream_entity_only of this GlobalConfig.
        :rtype: bool
        """
        return self._stream_entity_only

    @stream_entity_only.setter
    def stream_entity_only(self, stream_entity_only):
        """Sets the stream_entity_only of this GlobalConfig.

        HTTP will be streamed only. Doesn't work with old browsers

        :param stream_entity_only: The stream_entity_only of this GlobalConfig.
        :type stream_entity_only: bool
        """
        if stream_entity_only is None:
            raise ValueError("Invalid value for `stream_entity_only`, must not be `None`")

        self._stream_entity_only = stream_entity_only

    @property
    def throttling_quota(self):
        """Gets the throttling_quota of this GlobalConfig.

        Authorized number of calls per second globally, measured on 10 seconds

        :return: The throttling_quota of this GlobalConfig.
        :rtype: int
        """
        return self._throttling_quota

    @throttling_quota.setter
    def throttling_quota(self, throttling_quota):
        """Sets the throttling_quota of this GlobalConfig.

        Authorized number of calls per second globally, measured on 10 seconds

        :param throttling_quota: The throttling_quota of this GlobalConfig.
        :type throttling_quota: int
        """
        if throttling_quota is None:
            raise ValueError("Invalid value for `throttling_quota`, must not be `None`")

        self._throttling_quota = throttling_quota

    @property
    def u2f_login_only(self):
        """Gets the u2f_login_only of this GlobalConfig.

        If enabled, login to backoffice through Auth0 will be disabled

        :return: The u2f_login_only of this GlobalConfig.
        :rtype: bool
        """
        return self._u2f_login_only

    @u2f_login_only.setter
    def u2f_login_only(self, u2f_login_only):
        """Sets the u2f_login_only of this GlobalConfig.

        If enabled, login to backoffice through Auth0 will be disabled

        :param u2f_login_only: The u2f_login_only of this GlobalConfig.
        :type u2f_login_only: bool
        """
        if u2f_login_only is None:
            raise ValueError("Invalid value for `u2f_login_only`, must not be `None`")

        self._u2f_login_only = u2f_login_only

    @property
    def use_circuit_breakers(self):
        """Gets the use_circuit_breakers of this GlobalConfig.

        If enabled, services will be authorized to use circuit breakers

        :return: The use_circuit_breakers of this GlobalConfig.
        :rtype: bool
        """
        return self._use_circuit_breakers

    @use_circuit_breakers.setter
    def use_circuit_breakers(self, use_circuit_breakers):
        """Sets the use_circuit_breakers of this GlobalConfig.

        If enabled, services will be authorized to use circuit breakers

        :param use_circuit_breakers: The use_circuit_breakers of this GlobalConfig.
        :type use_circuit_breakers: bool
        """
        if use_circuit_breakers is None:
            raise ValueError("Invalid value for `use_circuit_breakers`, must not be `None`")

        self._use_circuit_breakers = use_circuit_breakers
