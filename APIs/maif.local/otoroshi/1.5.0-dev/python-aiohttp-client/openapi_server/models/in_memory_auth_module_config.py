# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.in_memory_user import InMemoryUser
from openapi_server import util


class InMemoryAuthModuleConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, desc: str=None, id: str=None, name: str=None, session_max_age: str=None, type: str=None, users: List[InMemoryUser]=None):
        """InMemoryAuthModuleConfig - a model defined in OpenAPI

        :param desc: The desc of this InMemoryAuthModuleConfig.
        :param id: The id of this InMemoryAuthModuleConfig.
        :param name: The name of this InMemoryAuthModuleConfig.
        :param session_max_age: The session_max_age of this InMemoryAuthModuleConfig.
        :param type: The type of this InMemoryAuthModuleConfig.
        :param users: The users of this InMemoryAuthModuleConfig.
        """
        self.openapi_types = {
            'desc': str,
            'id': str,
            'name': str,
            'session_max_age': str,
            'type': str,
            'users': List[InMemoryUser]
        }

        self.attribute_map = {
            'desc': 'desc',
            'id': 'id',
            'name': 'name',
            'session_max_age': 'sessionMaxAge',
            'type': 'type',
            'users': 'users'
        }

        self._desc = desc
        self._id = id
        self._name = name
        self._session_max_age = session_max_age
        self._type = type
        self._users = users

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InMemoryAuthModuleConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InMemoryAuthModuleConfig of this InMemoryAuthModuleConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def desc(self):
        """Gets the desc of this InMemoryAuthModuleConfig.

        Description of the config

        :return: The desc of this InMemoryAuthModuleConfig.
        :rtype: str
        """
        return self._desc

    @desc.setter
    def desc(self, desc):
        """Sets the desc of this InMemoryAuthModuleConfig.

        Description of the config

        :param desc: The desc of this InMemoryAuthModuleConfig.
        :type desc: str
        """
        if desc is None:
            raise ValueError("Invalid value for `desc`, must not be `None`")

        self._desc = desc

    @property
    def id(self):
        """Gets the id of this InMemoryAuthModuleConfig.

        Unique id of the config

        :return: The id of this InMemoryAuthModuleConfig.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InMemoryAuthModuleConfig.

        Unique id of the config

        :param id: The id of this InMemoryAuthModuleConfig.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this InMemoryAuthModuleConfig.

        Name of the config

        :return: The name of this InMemoryAuthModuleConfig.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InMemoryAuthModuleConfig.

        Name of the config

        :param name: The name of this InMemoryAuthModuleConfig.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def session_max_age(self):
        """Gets the session_max_age of this InMemoryAuthModuleConfig.

        Max age of the session

        :return: The session_max_age of this InMemoryAuthModuleConfig.
        :rtype: str
        """
        return self._session_max_age

    @session_max_age.setter
    def session_max_age(self, session_max_age):
        """Sets the session_max_age of this InMemoryAuthModuleConfig.

        Max age of the session

        :param session_max_age: The session_max_age of this InMemoryAuthModuleConfig.
        :type session_max_age: str
        """
        if session_max_age is None:
            raise ValueError("Invalid value for `session_max_age`, must not be `None`")

        self._session_max_age = session_max_age

    @property
    def type(self):
        """Gets the type of this InMemoryAuthModuleConfig.

        Type of settings. value is basic

        :return: The type of this InMemoryAuthModuleConfig.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InMemoryAuthModuleConfig.

        Type of settings. value is basic

        :param type: The type of this InMemoryAuthModuleConfig.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def users(self):
        """Gets the users of this InMemoryAuthModuleConfig.

        List of users

        :return: The users of this InMemoryAuthModuleConfig.
        :rtype: List[InMemoryUser]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this InMemoryAuthModuleConfig.

        List of users

        :param users: The users of this InMemoryAuthModuleConfig.
        :type users: List[InMemoryUser]
        """
        if users is None:
            raise ValueError("Invalid value for `users`, must not be `None`")

        self._users = users
