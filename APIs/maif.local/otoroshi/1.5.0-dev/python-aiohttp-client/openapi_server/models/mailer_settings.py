# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MailerSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_key: str=None, api_key_private: str=None, api_key_public: str=None, domain: str=None, eu: bool=None, header: Dict[str, str]=None, type: str=None, url: str=None):
        """MailerSettings - a model defined in OpenAPI

        :param api_key: The api_key of this MailerSettings.
        :param api_key_private: The api_key_private of this MailerSettings.
        :param api_key_public: The api_key_public of this MailerSettings.
        :param domain: The domain of this MailerSettings.
        :param eu: The eu of this MailerSettings.
        :param header: The header of this MailerSettings.
        :param type: The type of this MailerSettings.
        :param url: The url of this MailerSettings.
        """
        self.openapi_types = {
            'api_key': str,
            'api_key_private': str,
            'api_key_public': str,
            'domain': str,
            'eu': bool,
            'header': Dict[str, str],
            'type': str,
            'url': str
        }

        self.attribute_map = {
            'api_key': 'apiKey',
            'api_key_private': 'apiKeyPrivate',
            'api_key_public': 'apiKeyPublic',
            'domain': 'domain',
            'eu': 'eu',
            'header': 'header',
            'type': 'type',
            'url': 'url'
        }

        self._api_key = api_key
        self._api_key_private = api_key_private
        self._api_key_public = api_key_public
        self._domain = domain
        self._eu = eu
        self._header = header
        self._type = type
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MailerSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MailerSettings of this MailerSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_key(self):
        """Gets the api_key of this MailerSettings.

        Mailgun mailer api key

        :return: The api_key of this MailerSettings.
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this MailerSettings.

        Mailgun mailer api key

        :param api_key: The api_key of this MailerSettings.
        :type api_key: str
        """
        if api_key is None:
            raise ValueError("Invalid value for `api_key`, must not be `None`")

        self._api_key = api_key

    @property
    def api_key_private(self):
        """Gets the api_key_private of this MailerSettings.

        Mailjet mailer private api key

        :return: The api_key_private of this MailerSettings.
        :rtype: str
        """
        return self._api_key_private

    @api_key_private.setter
    def api_key_private(self, api_key_private):
        """Sets the api_key_private of this MailerSettings.

        Mailjet mailer private api key

        :param api_key_private: The api_key_private of this MailerSettings.
        :type api_key_private: str
        """

        self._api_key_private = api_key_private

    @property
    def api_key_public(self):
        """Gets the api_key_public of this MailerSettings.

        Mailjet mailer public api key

        :return: The api_key_public of this MailerSettings.
        :rtype: str
        """
        return self._api_key_public

    @api_key_public.setter
    def api_key_public(self, api_key_public):
        """Sets the api_key_public of this MailerSettings.

        Mailjet mailer public api key

        :param api_key_public: The api_key_public of this MailerSettings.
        :type api_key_public: str
        """

        self._api_key_public = api_key_public

    @property
    def domain(self):
        """Gets the domain of this MailerSettings.

        Mailgun mailer domain

        :return: The domain of this MailerSettings.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this MailerSettings.

        Mailgun mailer domain

        :param domain: The domain of this MailerSettings.
        :type domain: str
        """
        if domain is None:
            raise ValueError("Invalid value for `domain`, must not be `None`")

        self._domain = domain

    @property
    def eu(self):
        """Gets the eu of this MailerSettings.

        Mailgun mailer, use EU tenant api

        :return: The eu of this MailerSettings.
        :rtype: bool
        """
        return self._eu

    @eu.setter
    def eu(self, eu):
        """Sets the eu of this MailerSettings.

        Mailgun mailer, use EU tenant api

        :param eu: The eu of this MailerSettings.
        :type eu: bool
        """

        self._eu = eu

    @property
    def header(self):
        """Gets the header of this MailerSettings.

        Generic mailer headers

        :return: The header of this MailerSettings.
        :rtype: Dict[str, str]
        """
        return self._header

    @header.setter
    def header(self, header):
        """Sets the header of this MailerSettings.

        Generic mailer headers

        :param header: The header of this MailerSettings.
        :type header: Dict[str, str]
        """

        self._header = header

    @property
    def type(self):
        """Gets the type of this MailerSettings.

        Type of the mailer: console, generic, mailgun, mailjet

        :return: The type of this MailerSettings.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MailerSettings.

        Type of the mailer: console, generic, mailgun, mailjet

        :param type: The type of this MailerSettings.
        :type type: str
        """

        self._type = type

    @property
    def url(self):
        """Gets the url of this MailerSettings.

        Generic mailer url

        :return: The url of this MailerSettings.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this MailerSettings.

        Generic mailer url

        :param url: The url of this MailerSettings.
        :type url: str
        """

        self._url = url
