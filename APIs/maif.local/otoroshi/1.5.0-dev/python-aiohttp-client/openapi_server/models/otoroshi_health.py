# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OtoroshiHealth(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, datastore: str=None, otoroshi: str=None):
        """OtoroshiHealth - a model defined in OpenAPI

        :param datastore: The datastore of this OtoroshiHealth.
        :param otoroshi: The otoroshi of this OtoroshiHealth.
        """
        self.openapi_types = {
            'datastore': str,
            'otoroshi': str
        }

        self.attribute_map = {
            'datastore': 'datastore',
            'otoroshi': 'otoroshi'
        }

        self._datastore = datastore
        self._otoroshi = otoroshi

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OtoroshiHealth':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OtoroshiHealth of this OtoroshiHealth.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def datastore(self):
        """Gets the datastore of this OtoroshiHealth.


        :return: The datastore of this OtoroshiHealth.
        :rtype: str
        """
        return self._datastore

    @datastore.setter
    def datastore(self, datastore):
        """Sets the datastore of this OtoroshiHealth.


        :param datastore: The datastore of this OtoroshiHealth.
        :type datastore: str
        """
        allowed_values = ["healthy", "unhealthy", "unreachable"]  # noqa: E501
        if datastore not in allowed_values:
            raise ValueError(
                "Invalid value for `datastore` ({0}), must be one of {1}"
                .format(datastore, allowed_values)
            )

        self._datastore = datastore

    @property
    def otoroshi(self):
        """Gets the otoroshi of this OtoroshiHealth.


        :return: The otoroshi of this OtoroshiHealth.
        :rtype: str
        """
        return self._otoroshi

    @otoroshi.setter
    def otoroshi(self, otoroshi):
        """Sets the otoroshi of this OtoroshiHealth.


        :param otoroshi: The otoroshi of this OtoroshiHealth.
        :type otoroshi: str
        """
        allowed_values = ["healthy", "unhealthy", "down"]  # noqa: E501
        if otoroshi not in allowed_values:
            raise ValueError(
                "Invalid value for `otoroshi` ({0}), must be one of {1}"
                .format(otoroshi, allowed_values)
            )

        self._otoroshi = otoroshi
