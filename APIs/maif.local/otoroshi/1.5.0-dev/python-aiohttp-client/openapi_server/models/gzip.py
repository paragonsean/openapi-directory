# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Gzip(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, black_list: List[str]=None, buffer_size: int=None, chunked_threshold: int=None, compression_level: int=None, enabled: bool=None, excluded_patterns: List[str]=None, white_list: List[str]=None):
        """Gzip - a model defined in OpenAPI

        :param black_list: The black_list of this Gzip.
        :param buffer_size: The buffer_size of this Gzip.
        :param chunked_threshold: The chunked_threshold of this Gzip.
        :param compression_level: The compression_level of this Gzip.
        :param enabled: The enabled of this Gzip.
        :param excluded_patterns: The excluded_patterns of this Gzip.
        :param white_list: The white_list of this Gzip.
        """
        self.openapi_types = {
            'black_list': List[str],
            'buffer_size': int,
            'chunked_threshold': int,
            'compression_level': int,
            'enabled': bool,
            'excluded_patterns': List[str],
            'white_list': List[str]
        }

        self.attribute_map = {
            'black_list': 'blackList',
            'buffer_size': 'bufferSize',
            'chunked_threshold': 'chunkedThreshold',
            'compression_level': 'compressionLevel',
            'enabled': 'enabled',
            'excluded_patterns': 'excludedPatterns',
            'white_list': 'whiteList'
        }

        self._black_list = black_list
        self._buffer_size = buffer_size
        self._chunked_threshold = chunked_threshold
        self._compression_level = compression_level
        self._enabled = enabled
        self._excluded_patterns = excluded_patterns
        self._white_list = white_list

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Gzip':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Gzip of this Gzip.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def black_list(self):
        """Gets the black_list of this Gzip.

        Blacklisted mime types. Wildcard supported

        :return: The black_list of this Gzip.
        :rtype: List[str]
        """
        return self._black_list

    @black_list.setter
    def black_list(self, black_list):
        """Sets the black_list of this Gzip.

        Blacklisted mime types. Wildcard supported

        :param black_list: The black_list of this Gzip.
        :type black_list: List[str]
        """
        if black_list is None:
            raise ValueError("Invalid value for `black_list`, must not be `None`")

        self._black_list = black_list

    @property
    def buffer_size(self):
        """Gets the buffer_size of this Gzip.

        Size of the GZip buffer

        :return: The buffer_size of this Gzip.
        :rtype: int
        """
        return self._buffer_size

    @buffer_size.setter
    def buffer_size(self, buffer_size):
        """Sets the buffer_size of this Gzip.

        Size of the GZip buffer

        :param buffer_size: The buffer_size of this Gzip.
        :type buffer_size: int
        """
        if buffer_size is None:
            raise ValueError("Invalid value for `buffer_size`, must not be `None`")

        self._buffer_size = buffer_size

    @property
    def chunked_threshold(self):
        """Gets the chunked_threshold of this Gzip.

        Threshold for chunking data

        :return: The chunked_threshold of this Gzip.
        :rtype: int
        """
        return self._chunked_threshold

    @chunked_threshold.setter
    def chunked_threshold(self, chunked_threshold):
        """Sets the chunked_threshold of this Gzip.

        Threshold for chunking data

        :param chunked_threshold: The chunked_threshold of this Gzip.
        :type chunked_threshold: int
        """
        if chunked_threshold is None:
            raise ValueError("Invalid value for `chunked_threshold`, must not be `None`")

        self._chunked_threshold = chunked_threshold

    @property
    def compression_level(self):
        """Gets the compression_level of this Gzip.

        Compression level. From 0 to 9

        :return: The compression_level of this Gzip.
        :rtype: int
        """
        return self._compression_level

    @compression_level.setter
    def compression_level(self, compression_level):
        """Sets the compression_level of this Gzip.

        Compression level. From 0 to 9

        :param compression_level: The compression_level of this Gzip.
        :type compression_level: int
        """
        if compression_level is None:
            raise ValueError("Invalid value for `compression_level`, must not be `None`")

        self._compression_level = compression_level

    @property
    def enabled(self):
        """Gets the enabled of this Gzip.

        Whether gzip compression is enabled or not

        :return: The enabled of this Gzip.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Gzip.

        Whether gzip compression is enabled or not

        :param enabled: The enabled of this Gzip.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def excluded_patterns(self):
        """Gets the excluded_patterns of this Gzip.

        Patterns that are excluded from gzipping

        :return: The excluded_patterns of this Gzip.
        :rtype: List[str]
        """
        return self._excluded_patterns

    @excluded_patterns.setter
    def excluded_patterns(self, excluded_patterns):
        """Sets the excluded_patterns of this Gzip.

        Patterns that are excluded from gzipping

        :param excluded_patterns: The excluded_patterns of this Gzip.
        :type excluded_patterns: List[str]
        """
        if excluded_patterns is None:
            raise ValueError("Invalid value for `excluded_patterns`, must not be `None`")

        self._excluded_patterns = excluded_patterns

    @property
    def white_list(self):
        """Gets the white_list of this Gzip.

        Whitelisted mime types. Wildcard supported

        :return: The white_list of this Gzip.
        :rtype: List[str]
        """
        return self._white_list

    @white_list.setter
    def white_list(self, white_list):
        """Sets the white_list of this Gzip.

        Whitelisted mime types. Wildcard supported

        :param white_list: The white_list of this Gzip.
        :type white_list: List[str]
        """
        if white_list is None:
            raise ValueError("Invalid value for `white_list`, must not be `None`")

        self._white_list = white_list
