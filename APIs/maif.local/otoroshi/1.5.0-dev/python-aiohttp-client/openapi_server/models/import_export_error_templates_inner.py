# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ImportExportErrorTemplatesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, messages: Dict[str, str]=None, service_id: str=None, template40x: str=None, template50x: str=None, template_build: str=None, template_maintenance: str=None):
        """ImportExportErrorTemplatesInner - a model defined in OpenAPI

        :param messages: The messages of this ImportExportErrorTemplatesInner.
        :param service_id: The service_id of this ImportExportErrorTemplatesInner.
        :param template40x: The template40x of this ImportExportErrorTemplatesInner.
        :param template50x: The template50x of this ImportExportErrorTemplatesInner.
        :param template_build: The template_build of this ImportExportErrorTemplatesInner.
        :param template_maintenance: The template_maintenance of this ImportExportErrorTemplatesInner.
        """
        self.openapi_types = {
            'messages': Dict[str, str],
            'service_id': str,
            'template40x': str,
            'template50x': str,
            'template_build': str,
            'template_maintenance': str
        }

        self.attribute_map = {
            'messages': 'messages',
            'service_id': 'serviceId',
            'template40x': 'template40x',
            'template50x': 'template50x',
            'template_build': 'templateBuild',
            'template_maintenance': 'templateMaintenance'
        }

        self._messages = messages
        self._service_id = service_id
        self._template40x = template40x
        self._template50x = template50x
        self._template_build = template_build
        self._template_maintenance = template_maintenance

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImportExportErrorTemplatesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImportExport_errorTemplates_inner of this ImportExportErrorTemplatesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def messages(self):
        """Gets the messages of this ImportExportErrorTemplatesInner.

        Map for custom messages

        :return: The messages of this ImportExportErrorTemplatesInner.
        :rtype: Dict[str, str]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this ImportExportErrorTemplatesInner.

        Map for custom messages

        :param messages: The messages of this ImportExportErrorTemplatesInner.
        :type messages: Dict[str, str]
        """
        if messages is None:
            raise ValueError("Invalid value for `messages`, must not be `None`")

        self._messages = messages

    @property
    def service_id(self):
        """Gets the service_id of this ImportExportErrorTemplatesInner.

        The Id of the service for which the error template is enabled

        :return: The service_id of this ImportExportErrorTemplatesInner.
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this ImportExportErrorTemplatesInner.

        The Id of the service for which the error template is enabled

        :param service_id: The service_id of this ImportExportErrorTemplatesInner.
        :type service_id: str
        """
        if service_id is None:
            raise ValueError("Invalid value for `service_id`, must not be `None`")

        self._service_id = service_id

    @property
    def template40x(self):
        """Gets the template40x of this ImportExportErrorTemplatesInner.

        The html template for 40x errors

        :return: The template40x of this ImportExportErrorTemplatesInner.
        :rtype: str
        """
        return self._template40x

    @template40x.setter
    def template40x(self, template40x):
        """Sets the template40x of this ImportExportErrorTemplatesInner.

        The html template for 40x errors

        :param template40x: The template40x of this ImportExportErrorTemplatesInner.
        :type template40x: str
        """
        if template40x is None:
            raise ValueError("Invalid value for `template40x`, must not be `None`")

        self._template40x = template40x

    @property
    def template50x(self):
        """Gets the template50x of this ImportExportErrorTemplatesInner.

        The html template for 50x errors

        :return: The template50x of this ImportExportErrorTemplatesInner.
        :rtype: str
        """
        return self._template50x

    @template50x.setter
    def template50x(self, template50x):
        """Sets the template50x of this ImportExportErrorTemplatesInner.

        The html template for 50x errors

        :param template50x: The template50x of this ImportExportErrorTemplatesInner.
        :type template50x: str
        """
        if template50x is None:
            raise ValueError("Invalid value for `template50x`, must not be `None`")

        self._template50x = template50x

    @property
    def template_build(self):
        """Gets the template_build of this ImportExportErrorTemplatesInner.

        The html template for build page

        :return: The template_build of this ImportExportErrorTemplatesInner.
        :rtype: str
        """
        return self._template_build

    @template_build.setter
    def template_build(self, template_build):
        """Sets the template_build of this ImportExportErrorTemplatesInner.

        The html template for build page

        :param template_build: The template_build of this ImportExportErrorTemplatesInner.
        :type template_build: str
        """
        if template_build is None:
            raise ValueError("Invalid value for `template_build`, must not be `None`")

        self._template_build = template_build

    @property
    def template_maintenance(self):
        """Gets the template_maintenance of this ImportExportErrorTemplatesInner.

        The html template for maintenance page

        :return: The template_maintenance of this ImportExportErrorTemplatesInner.
        :rtype: str
        """
        return self._template_maintenance

    @template_maintenance.setter
    def template_maintenance(self, template_maintenance):
        """Sets the template_maintenance of this ImportExportErrorTemplatesInner.

        The html template for maintenance page

        :param template_maintenance: The template_maintenance of this ImportExportErrorTemplatesInner.
        :type template_maintenance: str
        """
        if template_maintenance is None:
            raise ValueError("Invalid value for `template_maintenance`, must not be `None`")

        self._template_maintenance = template_maintenance
