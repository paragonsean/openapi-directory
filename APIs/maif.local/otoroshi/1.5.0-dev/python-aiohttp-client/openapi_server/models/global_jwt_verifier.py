# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.global_jwt_verifier_algo_settings import GlobalJwtVerifierAlgoSettings
from openapi_server.models.global_jwt_verifier_source import GlobalJwtVerifierSource
from openapi_server.models.global_jwt_verifier_strategy import GlobalJwtVerifierStrategy
from openapi_server import util


class GlobalJwtVerifier(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, algo_settings: GlobalJwtVerifierAlgoSettings=None, desc: str=None, enabled: bool=None, id: str=None, name: str=None, source: GlobalJwtVerifierSource=None, strategy: GlobalJwtVerifierStrategy=None, strict: bool=None):
        """GlobalJwtVerifier - a model defined in OpenAPI

        :param algo_settings: The algo_settings of this GlobalJwtVerifier.
        :param desc: The desc of this GlobalJwtVerifier.
        :param enabled: The enabled of this GlobalJwtVerifier.
        :param id: The id of this GlobalJwtVerifier.
        :param name: The name of this GlobalJwtVerifier.
        :param source: The source of this GlobalJwtVerifier.
        :param strategy: The strategy of this GlobalJwtVerifier.
        :param strict: The strict of this GlobalJwtVerifier.
        """
        self.openapi_types = {
            'algo_settings': GlobalJwtVerifierAlgoSettings,
            'desc': str,
            'enabled': bool,
            'id': str,
            'name': str,
            'source': GlobalJwtVerifierSource,
            'strategy': GlobalJwtVerifierStrategy,
            'strict': bool
        }

        self.attribute_map = {
            'algo_settings': 'algoSettings',
            'desc': 'desc',
            'enabled': 'enabled',
            'id': 'id',
            'name': 'name',
            'source': 'source',
            'strategy': 'strategy',
            'strict': 'strict'
        }

        self._algo_settings = algo_settings
        self._desc = desc
        self._enabled = enabled
        self._id = id
        self._name = name
        self._source = source
        self._strategy = strategy
        self._strict = strict

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GlobalJwtVerifier':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GlobalJwtVerifier of this GlobalJwtVerifier.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def algo_settings(self):
        """Gets the algo_settings of this GlobalJwtVerifier.


        :return: The algo_settings of this GlobalJwtVerifier.
        :rtype: GlobalJwtVerifierAlgoSettings
        """
        return self._algo_settings

    @algo_settings.setter
    def algo_settings(self, algo_settings):
        """Sets the algo_settings of this GlobalJwtVerifier.


        :param algo_settings: The algo_settings of this GlobalJwtVerifier.
        :type algo_settings: GlobalJwtVerifierAlgoSettings
        """
        if algo_settings is None:
            raise ValueError("Invalid value for `algo_settings`, must not be `None`")

        self._algo_settings = algo_settings

    @property
    def desc(self):
        """Gets the desc of this GlobalJwtVerifier.

        Verifier description

        :return: The desc of this GlobalJwtVerifier.
        :rtype: str
        """
        return self._desc

    @desc.setter
    def desc(self, desc):
        """Sets the desc of this GlobalJwtVerifier.

        Verifier description

        :param desc: The desc of this GlobalJwtVerifier.
        :type desc: str
        """
        if desc is None:
            raise ValueError("Invalid value for `desc`, must not be `None`")

        self._desc = desc

    @property
    def enabled(self):
        """Gets the enabled of this GlobalJwtVerifier.

        Is it enabled

        :return: The enabled of this GlobalJwtVerifier.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this GlobalJwtVerifier.

        Is it enabled

        :param enabled: The enabled of this GlobalJwtVerifier.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def id(self):
        """Gets the id of this GlobalJwtVerifier.

        Verifier id

        :return: The id of this GlobalJwtVerifier.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GlobalJwtVerifier.

        Verifier id

        :param id: The id of this GlobalJwtVerifier.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this GlobalJwtVerifier.

        Verifier name

        :return: The name of this GlobalJwtVerifier.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GlobalJwtVerifier.

        Verifier name

        :param name: The name of this GlobalJwtVerifier.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def source(self):
        """Gets the source of this GlobalJwtVerifier.


        :return: The source of this GlobalJwtVerifier.
        :rtype: GlobalJwtVerifierSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this GlobalJwtVerifier.


        :param source: The source of this GlobalJwtVerifier.
        :type source: GlobalJwtVerifierSource
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source

    @property
    def strategy(self):
        """Gets the strategy of this GlobalJwtVerifier.


        :return: The strategy of this GlobalJwtVerifier.
        :rtype: GlobalJwtVerifierStrategy
        """
        return self._strategy

    @strategy.setter
    def strategy(self, strategy):
        """Sets the strategy of this GlobalJwtVerifier.


        :param strategy: The strategy of this GlobalJwtVerifier.
        :type strategy: GlobalJwtVerifierStrategy
        """
        if strategy is None:
            raise ValueError("Invalid value for `strategy`, must not be `None`")

        self._strategy = strategy

    @property
    def strict(self):
        """Gets the strict of this GlobalJwtVerifier.

        Does it fail if JWT not found

        :return: The strict of this GlobalJwtVerifier.
        :rtype: bool
        """
        return self._strict

    @strict.setter
    def strict(self, strict):
        """Sets the strict of this GlobalJwtVerifier.

        Does it fail if JWT not found

        :param strict: The strict of this GlobalJwtVerifier.
        :type strict: bool
        """
        if strict is None:
            raise ValueError("Invalid value for `strict`, must not be `None`")

        self._strict = strict
