# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LatencyInjectionFaultConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _from: int=None, ratio: float=None, to: int=None):
        """LatencyInjectionFaultConfig - a model defined in OpenAPI

        :param _from: The _from of this LatencyInjectionFaultConfig.
        :param ratio: The ratio of this LatencyInjectionFaultConfig.
        :param to: The to of this LatencyInjectionFaultConfig.
        """
        self.openapi_types = {
            '_from': int,
            'ratio': float,
            'to': int
        }

        self.attribute_map = {
            '_from': 'from',
            'ratio': 'ratio',
            'to': 'to'
        }

        self.__from = _from
        self._ratio = ratio
        self._to = to

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LatencyInjectionFaultConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LatencyInjectionFaultConfig of this LatencyInjectionFaultConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _from(self):
        """Gets the _from of this LatencyInjectionFaultConfig.

        The start range of latency added to the request

        :return: The _from of this LatencyInjectionFaultConfig.
        :rtype: int
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this LatencyInjectionFaultConfig.

        The start range of latency added to the request

        :param _from: The _from of this LatencyInjectionFaultConfig.
        :type _from: int
        """
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")

        self.__from = _from

    @property
    def ratio(self):
        """Gets the ratio of this LatencyInjectionFaultConfig.

        The percentage of requests affected by this fault. Value should be between 0.0 and 1.0

        :return: The ratio of this LatencyInjectionFaultConfig.
        :rtype: float
        """
        return self._ratio

    @ratio.setter
    def ratio(self, ratio):
        """Sets the ratio of this LatencyInjectionFaultConfig.

        The percentage of requests affected by this fault. Value should be between 0.0 and 1.0

        :param ratio: The ratio of this LatencyInjectionFaultConfig.
        :type ratio: float
        """
        if ratio is None:
            raise ValueError("Invalid value for `ratio`, must not be `None`")

        self._ratio = ratio

    @property
    def to(self):
        """Gets the to of this LatencyInjectionFaultConfig.

        The end range of latency added to the request

        :return: The to of this LatencyInjectionFaultConfig.
        :rtype: int
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this LatencyInjectionFaultConfig.

        The end range of latency added to the request

        :param to: The to of this LatencyInjectionFaultConfig.
        :type to: int
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")

        self._to = to
