# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.chaos_config import ChaosConfig
from openapi_server.models.outage_strategy import OutageStrategy
from openapi_server import util


class SnowMonkeyConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, chaos_config: ChaosConfig=None, dry_run: bool=None, enabled: bool=None, include_user_facing_descriptors: bool=None, outage_duration_from: int=None, outage_duration_to: int=None, outage_strategy: OutageStrategy=None, start_time: str=None, stop_time: str=None, target_groups: List[str]=None, times_per_day: int=None):
        """SnowMonkeyConfig - a model defined in OpenAPI

        :param chaos_config: The chaos_config of this SnowMonkeyConfig.
        :param dry_run: The dry_run of this SnowMonkeyConfig.
        :param enabled: The enabled of this SnowMonkeyConfig.
        :param include_user_facing_descriptors: The include_user_facing_descriptors of this SnowMonkeyConfig.
        :param outage_duration_from: The outage_duration_from of this SnowMonkeyConfig.
        :param outage_duration_to: The outage_duration_to of this SnowMonkeyConfig.
        :param outage_strategy: The outage_strategy of this SnowMonkeyConfig.
        :param start_time: The start_time of this SnowMonkeyConfig.
        :param stop_time: The stop_time of this SnowMonkeyConfig.
        :param target_groups: The target_groups of this SnowMonkeyConfig.
        :param times_per_day: The times_per_day of this SnowMonkeyConfig.
        """
        self.openapi_types = {
            'chaos_config': ChaosConfig,
            'dry_run': bool,
            'enabled': bool,
            'include_user_facing_descriptors': bool,
            'outage_duration_from': int,
            'outage_duration_to': int,
            'outage_strategy': OutageStrategy,
            'start_time': str,
            'stop_time': str,
            'target_groups': List[str],
            'times_per_day': int
        }

        self.attribute_map = {
            'chaos_config': 'chaosConfig',
            'dry_run': 'dryRun',
            'enabled': 'enabled',
            'include_user_facing_descriptors': 'includeUserFacingDescriptors',
            'outage_duration_from': 'outageDurationFrom',
            'outage_duration_to': 'outageDurationTo',
            'outage_strategy': 'outageStrategy',
            'start_time': 'startTime',
            'stop_time': 'stopTime',
            'target_groups': 'targetGroups',
            'times_per_day': 'timesPerDay'
        }

        self._chaos_config = chaos_config
        self._dry_run = dry_run
        self._enabled = enabled
        self._include_user_facing_descriptors = include_user_facing_descriptors
        self._outage_duration_from = outage_duration_from
        self._outage_duration_to = outage_duration_to
        self._outage_strategy = outage_strategy
        self._start_time = start_time
        self._stop_time = stop_time
        self._target_groups = target_groups
        self._times_per_day = times_per_day

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SnowMonkeyConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SnowMonkeyConfig of this SnowMonkeyConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def chaos_config(self):
        """Gets the chaos_config of this SnowMonkeyConfig.


        :return: The chaos_config of this SnowMonkeyConfig.
        :rtype: ChaosConfig
        """
        return self._chaos_config

    @chaos_config.setter
    def chaos_config(self, chaos_config):
        """Sets the chaos_config of this SnowMonkeyConfig.


        :param chaos_config: The chaos_config of this SnowMonkeyConfig.
        :type chaos_config: ChaosConfig
        """
        if chaos_config is None:
            raise ValueError("Invalid value for `chaos_config`, must not be `None`")

        self._chaos_config = chaos_config

    @property
    def dry_run(self):
        """Gets the dry_run of this SnowMonkeyConfig.

        Whether or not outages will actualy impact requests

        :return: The dry_run of this SnowMonkeyConfig.
        :rtype: bool
        """
        return self._dry_run

    @dry_run.setter
    def dry_run(self, dry_run):
        """Sets the dry_run of this SnowMonkeyConfig.

        Whether or not outages will actualy impact requests

        :param dry_run: The dry_run of this SnowMonkeyConfig.
        :type dry_run: bool
        """
        if dry_run is None:
            raise ValueError("Invalid value for `dry_run`, must not be `None`")

        self._dry_run = dry_run

    @property
    def enabled(self):
        """Gets the enabled of this SnowMonkeyConfig.

        Whether or not this config is enabled

        :return: The enabled of this SnowMonkeyConfig.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this SnowMonkeyConfig.

        Whether or not this config is enabled

        :param enabled: The enabled of this SnowMonkeyConfig.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def include_user_facing_descriptors(self):
        """Gets the include_user_facing_descriptors of this SnowMonkeyConfig.

        Whether or not user facing apps. will be impacted by Snow Monkey

        :return: The include_user_facing_descriptors of this SnowMonkeyConfig.
        :rtype: bool
        """
        return self._include_user_facing_descriptors

    @include_user_facing_descriptors.setter
    def include_user_facing_descriptors(self, include_user_facing_descriptors):
        """Sets the include_user_facing_descriptors of this SnowMonkeyConfig.

        Whether or not user facing apps. will be impacted by Snow Monkey

        :param include_user_facing_descriptors: The include_user_facing_descriptors of this SnowMonkeyConfig.
        :type include_user_facing_descriptors: bool
        """
        if include_user_facing_descriptors is None:
            raise ValueError("Invalid value for `include_user_facing_descriptors`, must not be `None`")

        self._include_user_facing_descriptors = include_user_facing_descriptors

    @property
    def outage_duration_from(self):
        """Gets the outage_duration_from of this SnowMonkeyConfig.

        Start of outage duration range

        :return: The outage_duration_from of this SnowMonkeyConfig.
        :rtype: int
        """
        return self._outage_duration_from

    @outage_duration_from.setter
    def outage_duration_from(self, outage_duration_from):
        """Sets the outage_duration_from of this SnowMonkeyConfig.

        Start of outage duration range

        :param outage_duration_from: The outage_duration_from of this SnowMonkeyConfig.
        :type outage_duration_from: int
        """
        if outage_duration_from is None:
            raise ValueError("Invalid value for `outage_duration_from`, must not be `None`")

        self._outage_duration_from = outage_duration_from

    @property
    def outage_duration_to(self):
        """Gets the outage_duration_to of this SnowMonkeyConfig.

        End of outage duration range

        :return: The outage_duration_to of this SnowMonkeyConfig.
        :rtype: int
        """
        return self._outage_duration_to

    @outage_duration_to.setter
    def outage_duration_to(self, outage_duration_to):
        """Sets the outage_duration_to of this SnowMonkeyConfig.

        End of outage duration range

        :param outage_duration_to: The outage_duration_to of this SnowMonkeyConfig.
        :type outage_duration_to: int
        """
        if outage_duration_to is None:
            raise ValueError("Invalid value for `outage_duration_to`, must not be `None`")

        self._outage_duration_to = outage_duration_to

    @property
    def outage_strategy(self):
        """Gets the outage_strategy of this SnowMonkeyConfig.


        :return: The outage_strategy of this SnowMonkeyConfig.
        :rtype: OutageStrategy
        """
        return self._outage_strategy

    @outage_strategy.setter
    def outage_strategy(self, outage_strategy):
        """Sets the outage_strategy of this SnowMonkeyConfig.


        :param outage_strategy: The outage_strategy of this SnowMonkeyConfig.
        :type outage_strategy: OutageStrategy
        """
        if outage_strategy is None:
            raise ValueError("Invalid value for `outage_strategy`, must not be `None`")

        self._outage_strategy = outage_strategy

    @property
    def start_time(self):
        """Gets the start_time of this SnowMonkeyConfig.

        Start time of Snow Monkey each day

        :return: The start_time of this SnowMonkeyConfig.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this SnowMonkeyConfig.

        Start time of Snow Monkey each day

        :param start_time: The start_time of this SnowMonkeyConfig.
        :type start_time: str
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")

        self._start_time = start_time

    @property
    def stop_time(self):
        """Gets the stop_time of this SnowMonkeyConfig.

        Stop time of Snow Monkey each day

        :return: The stop_time of this SnowMonkeyConfig.
        :rtype: str
        """
        return self._stop_time

    @stop_time.setter
    def stop_time(self, stop_time):
        """Sets the stop_time of this SnowMonkeyConfig.

        Stop time of Snow Monkey each day

        :param stop_time: The stop_time of this SnowMonkeyConfig.
        :type stop_time: str
        """
        if stop_time is None:
            raise ValueError("Invalid value for `stop_time`, must not be `None`")

        self._stop_time = stop_time

    @property
    def target_groups(self):
        """Gets the target_groups of this SnowMonkeyConfig.

        Groups impacted by Snow Monkey. If empty, all groups will be impacted

        :return: The target_groups of this SnowMonkeyConfig.
        :rtype: List[str]
        """
        return self._target_groups

    @target_groups.setter
    def target_groups(self, target_groups):
        """Sets the target_groups of this SnowMonkeyConfig.

        Groups impacted by Snow Monkey. If empty, all groups will be impacted

        :param target_groups: The target_groups of this SnowMonkeyConfig.
        :type target_groups: List[str]
        """
        if target_groups is None:
            raise ValueError("Invalid value for `target_groups`, must not be `None`")

        self._target_groups = target_groups

    @property
    def times_per_day(self):
        """Gets the times_per_day of this SnowMonkeyConfig.

        Number of time per day each service will be outage

        :return: The times_per_day of this SnowMonkeyConfig.
        :rtype: int
        """
        return self._times_per_day

    @times_per_day.setter
    def times_per_day(self, times_per_day):
        """Sets the times_per_day of this SnowMonkeyConfig.

        Number of time per day each service will be outage

        :param times_per_day: The times_per_day of this SnowMonkeyConfig.
        :type times_per_day: int
        """
        if times_per_day is None:
            raise ValueError("Invalid value for `times_per_day`, must not be `None`")

        self._times_per_day = times_per_day
