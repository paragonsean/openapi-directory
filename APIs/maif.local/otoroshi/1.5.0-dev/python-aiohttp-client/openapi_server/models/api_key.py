# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApiKey(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authorized_entities: List[str]=None, client_id: str=None, client_name: str=None, client_secret: str=None, daily_quota: int=None, enabled: bool=None, metadata: Dict[str, str]=None, monthly_quota: int=None, throttling_quota: int=None):
        """ApiKey - a model defined in OpenAPI

        :param authorized_entities: The authorized_entities of this ApiKey.
        :param client_id: The client_id of this ApiKey.
        :param client_name: The client_name of this ApiKey.
        :param client_secret: The client_secret of this ApiKey.
        :param daily_quota: The daily_quota of this ApiKey.
        :param enabled: The enabled of this ApiKey.
        :param metadata: The metadata of this ApiKey.
        :param monthly_quota: The monthly_quota of this ApiKey.
        :param throttling_quota: The throttling_quota of this ApiKey.
        """
        self.openapi_types = {
            'authorized_entities': List[str],
            'client_id': str,
            'client_name': str,
            'client_secret': str,
            'daily_quota': int,
            'enabled': bool,
            'metadata': Dict[str, str],
            'monthly_quota': int,
            'throttling_quota': int
        }

        self.attribute_map = {
            'authorized_entities': 'authorizedEntities',
            'client_id': 'clientId',
            'client_name': 'clientName',
            'client_secret': 'clientSecret',
            'daily_quota': 'dailyQuota',
            'enabled': 'enabled',
            'metadata': 'metadata',
            'monthly_quota': 'monthlyQuota',
            'throttling_quota': 'throttlingQuota'
        }

        self._authorized_entities = authorized_entities
        self._client_id = client_id
        self._client_name = client_name
        self._client_secret = client_secret
        self._daily_quota = daily_quota
        self._enabled = enabled
        self._metadata = metadata
        self._monthly_quota = monthly_quota
        self._throttling_quota = throttling_quota

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiKey':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApiKey of this ApiKey.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authorized_entities(self):
        """Gets the authorized_entities of this ApiKey.

        The group/service ids (prefixed by group_ or service_ on which the key is authorized

        :return: The authorized_entities of this ApiKey.
        :rtype: List[str]
        """
        return self._authorized_entities

    @authorized_entities.setter
    def authorized_entities(self, authorized_entities):
        """Sets the authorized_entities of this ApiKey.

        The group/service ids (prefixed by group_ or service_ on which the key is authorized

        :param authorized_entities: The authorized_entities of this ApiKey.
        :type authorized_entities: List[str]
        """
        if authorized_entities is None:
            raise ValueError("Invalid value for `authorized_entities`, must not be `None`")

        self._authorized_entities = authorized_entities

    @property
    def client_id(self):
        """Gets the client_id of this ApiKey.

        The unique id of the Api Key. Usually 16 random alpha numerical characters, but can be anything

        :return: The client_id of this ApiKey.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this ApiKey.

        The unique id of the Api Key. Usually 16 random alpha numerical characters, but can be anything

        :param client_id: The client_id of this ApiKey.
        :type client_id: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")

        self._client_id = client_id

    @property
    def client_name(self):
        """Gets the client_name of this ApiKey.

        The name of the api key, for humans ;-)

        :return: The client_name of this ApiKey.
        :rtype: str
        """
        return self._client_name

    @client_name.setter
    def client_name(self, client_name):
        """Sets the client_name of this ApiKey.

        The name of the api key, for humans ;-)

        :param client_name: The client_name of this ApiKey.
        :type client_name: str
        """
        if client_name is None:
            raise ValueError("Invalid value for `client_name`, must not be `None`")

        self._client_name = client_name

    @property
    def client_secret(self):
        """Gets the client_secret of this ApiKey.

        The secret of the Api Key. Usually 64 random alpha numerical characters, but can be anything

        :return: The client_secret of this ApiKey.
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this ApiKey.

        The secret of the Api Key. Usually 64 random alpha numerical characters, but can be anything

        :param client_secret: The client_secret of this ApiKey.
        :type client_secret: str
        """
        if client_secret is None:
            raise ValueError("Invalid value for `client_secret`, must not be `None`")

        self._client_secret = client_secret

    @property
    def daily_quota(self):
        """Gets the daily_quota of this ApiKey.

        Authorized number of calls per day

        :return: The daily_quota of this ApiKey.
        :rtype: int
        """
        return self._daily_quota

    @daily_quota.setter
    def daily_quota(self, daily_quota):
        """Sets the daily_quota of this ApiKey.

        Authorized number of calls per day

        :param daily_quota: The daily_quota of this ApiKey.
        :type daily_quota: int
        """

        self._daily_quota = daily_quota

    @property
    def enabled(self):
        """Gets the enabled of this ApiKey.

        Whether or not the key is enabled. If disabled, resources won't be available to calls using this key

        :return: The enabled of this ApiKey.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ApiKey.

        Whether or not the key is enabled. If disabled, resources won't be available to calls using this key

        :param enabled: The enabled of this ApiKey.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def metadata(self):
        """Gets the metadata of this ApiKey.

        Bunch of metadata for the key

        :return: The metadata of this ApiKey.
        :rtype: Dict[str, str]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this ApiKey.

        Bunch of metadata for the key

        :param metadata: The metadata of this ApiKey.
        :type metadata: Dict[str, str]
        """

        self._metadata = metadata

    @property
    def monthly_quota(self):
        """Gets the monthly_quota of this ApiKey.

        Authorized number of calls per month

        :return: The monthly_quota of this ApiKey.
        :rtype: int
        """
        return self._monthly_quota

    @monthly_quota.setter
    def monthly_quota(self, monthly_quota):
        """Sets the monthly_quota of this ApiKey.

        Authorized number of calls per month

        :param monthly_quota: The monthly_quota of this ApiKey.
        :type monthly_quota: int
        """

        self._monthly_quota = monthly_quota

    @property
    def throttling_quota(self):
        """Gets the throttling_quota of this ApiKey.

        Authorized number of calls per second, measured on 10 seconds

        :return: The throttling_quota of this ApiKey.
        :rtype: int
        """
        return self._throttling_quota

    @throttling_quota.setter
    def throttling_quota(self, throttling_quota):
        """Sets the throttling_quota of this ApiKey.

        Authorized number of calls per second, measured on 10 seconds

        :param throttling_quota: The throttling_quota of this ApiKey.
        :type throttling_quota: int
        """

        self._throttling_quota = throttling_quota
