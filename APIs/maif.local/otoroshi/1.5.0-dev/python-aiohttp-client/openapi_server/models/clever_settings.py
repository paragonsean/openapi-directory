# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CleverSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, consumer_key: str=None, consumer_secret: str=None, orga_id: str=None, secret: str=None, token: str=None):
        """CleverSettings - a model defined in OpenAPI

        :param consumer_key: The consumer_key of this CleverSettings.
        :param consumer_secret: The consumer_secret of this CleverSettings.
        :param orga_id: The orga_id of this CleverSettings.
        :param secret: The secret of this CleverSettings.
        :param token: The token of this CleverSettings.
        """
        self.openapi_types = {
            'consumer_key': str,
            'consumer_secret': str,
            'orga_id': str,
            'secret': str,
            'token': str
        }

        self.attribute_map = {
            'consumer_key': 'consumerKey',
            'consumer_secret': 'consumerSecret',
            'orga_id': 'orgaId',
            'secret': 'secret',
            'token': 'token'
        }

        self._consumer_key = consumer_key
        self._consumer_secret = consumer_secret
        self._orga_id = orga_id
        self._secret = secret
        self._token = token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CleverSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CleverSettings of this CleverSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def consumer_key(self):
        """Gets the consumer_key of this CleverSettings.

        CleverCloud consumer key

        :return: The consumer_key of this CleverSettings.
        :rtype: str
        """
        return self._consumer_key

    @consumer_key.setter
    def consumer_key(self, consumer_key):
        """Sets the consumer_key of this CleverSettings.

        CleverCloud consumer key

        :param consumer_key: The consumer_key of this CleverSettings.
        :type consumer_key: str
        """
        if consumer_key is None:
            raise ValueError("Invalid value for `consumer_key`, must not be `None`")

        self._consumer_key = consumer_key

    @property
    def consumer_secret(self):
        """Gets the consumer_secret of this CleverSettings.

        CleverCloud consumer token

        :return: The consumer_secret of this CleverSettings.
        :rtype: str
        """
        return self._consumer_secret

    @consumer_secret.setter
    def consumer_secret(self, consumer_secret):
        """Sets the consumer_secret of this CleverSettings.

        CleverCloud consumer token

        :param consumer_secret: The consumer_secret of this CleverSettings.
        :type consumer_secret: str
        """
        if consumer_secret is None:
            raise ValueError("Invalid value for `consumer_secret`, must not be `None`")

        self._consumer_secret = consumer_secret

    @property
    def orga_id(self):
        """Gets the orga_id of this CleverSettings.

        CleverCloud organization id

        :return: The orga_id of this CleverSettings.
        :rtype: str
        """
        return self._orga_id

    @orga_id.setter
    def orga_id(self, orga_id):
        """Sets the orga_id of this CleverSettings.

        CleverCloud organization id

        :param orga_id: The orga_id of this CleverSettings.
        :type orga_id: str
        """
        if orga_id is None:
            raise ValueError("Invalid value for `orga_id`, must not be `None`")

        self._orga_id = orga_id

    @property
    def secret(self):
        """Gets the secret of this CleverSettings.

        CleverCloud oauth secret

        :return: The secret of this CleverSettings.
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this CleverSettings.

        CleverCloud oauth secret

        :param secret: The secret of this CleverSettings.
        :type secret: str
        """
        if secret is None:
            raise ValueError("Invalid value for `secret`, must not be `None`")

        self._secret = secret

    @property
    def token(self):
        """Gets the token of this CleverSettings.

        CleverCloud oauth token

        :return: The token of this CleverSettings.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this CleverSettings.

        CleverCloud oauth token

        :param token: The token of this CleverSettings.
        :type token: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")

        self._token = token
