# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.global_jwt_verifier_source import GlobalJwtVerifierSource
from openapi_server.models.mapping_settings import MappingSettings
from openapi_server import util


class TransformSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, location: GlobalJwtVerifierSource=None, mapping_settings: MappingSettings=None):
        """TransformSettings - a model defined in OpenAPI

        :param location: The location of this TransformSettings.
        :param mapping_settings: The mapping_settings of this TransformSettings.
        """
        self.openapi_types = {
            'location': GlobalJwtVerifierSource,
            'mapping_settings': MappingSettings
        }

        self.attribute_map = {
            'location': 'location',
            'mapping_settings': 'mappingSettings'
        }

        self._location = location
        self._mapping_settings = mapping_settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransformSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransformSettings of this TransformSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def location(self):
        """Gets the location of this TransformSettings.


        :return: The location of this TransformSettings.
        :rtype: GlobalJwtVerifierSource
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this TransformSettings.


        :param location: The location of this TransformSettings.
        :type location: GlobalJwtVerifierSource
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")

        self._location = location

    @property
    def mapping_settings(self):
        """Gets the mapping_settings of this TransformSettings.


        :return: The mapping_settings of this TransformSettings.
        :rtype: MappingSettings
        """
        return self._mapping_settings

    @mapping_settings.setter
    def mapping_settings(self, mapping_settings):
        """Sets the mapping_settings of this TransformSettings.


        :param mapping_settings: The mapping_settings of this TransformSettings.
        :type mapping_settings: MappingSettings
        """
        if mapping_settings is None:
            raise ValueError("Invalid value for `mapping_settings`, must not be `None`")

        self._mapping_settings = mapping_settings
