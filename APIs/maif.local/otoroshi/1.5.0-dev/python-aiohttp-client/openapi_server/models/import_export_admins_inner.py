# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ImportExportAdminsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: int=None, label: str=None, password: str=None, registration: Dict[str, str]=None, username: str=None):
        """ImportExportAdminsInner - a model defined in OpenAPI

        :param created_at: The created_at of this ImportExportAdminsInner.
        :param label: The label of this ImportExportAdminsInner.
        :param password: The password of this ImportExportAdminsInner.
        :param registration: The registration of this ImportExportAdminsInner.
        :param username: The username of this ImportExportAdminsInner.
        """
        self.openapi_types = {
            'created_at': int,
            'label': str,
            'password': str,
            'registration': Dict[str, str],
            'username': str
        }

        self.attribute_map = {
            'created_at': 'createdAt',
            'label': 'label',
            'password': 'password',
            'registration': 'registration',
            'username': 'username'
        }

        self._created_at = created_at
        self._label = label
        self._password = password
        self._registration = registration
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImportExportAdminsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImportExport_admins_inner of this ImportExportAdminsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this ImportExportAdminsInner.

        The creation date of the user

        :return: The created_at of this ImportExportAdminsInner.
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ImportExportAdminsInner.

        The creation date of the user

        :param created_at: The created_at of this ImportExportAdminsInner.
        :type created_at: int
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def label(self):
        """Gets the label of this ImportExportAdminsInner.

        The label for the user

        :return: The label of this ImportExportAdminsInner.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this ImportExportAdminsInner.

        The label for the user

        :param label: The label of this ImportExportAdminsInner.
        :type label: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")

        self._label = label

    @property
    def password(self):
        """Gets the password of this ImportExportAdminsInner.

        The hashed password of the user

        :return: The password of this ImportExportAdminsInner.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ImportExportAdminsInner.

        The hashed password of the user

        :param password: The password of this ImportExportAdminsInner.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")

        self._password = password

    @property
    def registration(self):
        """Gets the registration of this ImportExportAdminsInner.

        The U2F registration slug

        :return: The registration of this ImportExportAdminsInner.
        :rtype: Dict[str, str]
        """
        return self._registration

    @registration.setter
    def registration(self, registration):
        """Sets the registration of this ImportExportAdminsInner.

        The U2F registration slug

        :param registration: The registration of this ImportExportAdminsInner.
        :type registration: Dict[str, str]
        """
        if registration is None:
            raise ValueError("Invalid value for `registration`, must not be `None`")

        self._registration = registration

    @property
    def username(self):
        """Gets the username of this ImportExportAdminsInner.

        The email address of the user

        :return: The username of this ImportExportAdminsInner.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ImportExportAdminsInner.

        The email address of the user

        :param username: The username of this ImportExportAdminsInner.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")

        self._username = username
