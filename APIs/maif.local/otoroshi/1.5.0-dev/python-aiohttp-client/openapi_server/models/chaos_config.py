# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bad_responses_fault_config import BadResponsesFaultConfig
from openapi_server.models.large_request_fault_config import LargeRequestFaultConfig
from openapi_server.models.large_response_fault_config import LargeResponseFaultConfig
from openapi_server.models.latency_injection_fault_config import LatencyInjectionFaultConfig
from openapi_server import util


class ChaosConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bad_responses_fault_config: BadResponsesFaultConfig=None, enabled: bool=None, large_request_fault_config: LargeRequestFaultConfig=None, large_response_fault_config: LargeResponseFaultConfig=None, latency_injection_fault_config: LatencyInjectionFaultConfig=None):
        """ChaosConfig - a model defined in OpenAPI

        :param bad_responses_fault_config: The bad_responses_fault_config of this ChaosConfig.
        :param enabled: The enabled of this ChaosConfig.
        :param large_request_fault_config: The large_request_fault_config of this ChaosConfig.
        :param large_response_fault_config: The large_response_fault_config of this ChaosConfig.
        :param latency_injection_fault_config: The latency_injection_fault_config of this ChaosConfig.
        """
        self.openapi_types = {
            'bad_responses_fault_config': BadResponsesFaultConfig,
            'enabled': bool,
            'large_request_fault_config': LargeRequestFaultConfig,
            'large_response_fault_config': LargeResponseFaultConfig,
            'latency_injection_fault_config': LatencyInjectionFaultConfig
        }

        self.attribute_map = {
            'bad_responses_fault_config': 'badResponsesFaultConfig',
            'enabled': 'enabled',
            'large_request_fault_config': 'largeRequestFaultConfig',
            'large_response_fault_config': 'largeResponseFaultConfig',
            'latency_injection_fault_config': 'latencyInjectionFaultConfig'
        }

        self._bad_responses_fault_config = bad_responses_fault_config
        self._enabled = enabled
        self._large_request_fault_config = large_request_fault_config
        self._large_response_fault_config = large_response_fault_config
        self._latency_injection_fault_config = latency_injection_fault_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChaosConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChaosConfig of this ChaosConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bad_responses_fault_config(self):
        """Gets the bad_responses_fault_config of this ChaosConfig.


        :return: The bad_responses_fault_config of this ChaosConfig.
        :rtype: BadResponsesFaultConfig
        """
        return self._bad_responses_fault_config

    @bad_responses_fault_config.setter
    def bad_responses_fault_config(self, bad_responses_fault_config):
        """Sets the bad_responses_fault_config of this ChaosConfig.


        :param bad_responses_fault_config: The bad_responses_fault_config of this ChaosConfig.
        :type bad_responses_fault_config: BadResponsesFaultConfig
        """

        self._bad_responses_fault_config = bad_responses_fault_config

    @property
    def enabled(self):
        """Gets the enabled of this ChaosConfig.

        Whether or not this config is enabled

        :return: The enabled of this ChaosConfig.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ChaosConfig.

        Whether or not this config is enabled

        :param enabled: The enabled of this ChaosConfig.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def large_request_fault_config(self):
        """Gets the large_request_fault_config of this ChaosConfig.


        :return: The large_request_fault_config of this ChaosConfig.
        :rtype: LargeRequestFaultConfig
        """
        return self._large_request_fault_config

    @large_request_fault_config.setter
    def large_request_fault_config(self, large_request_fault_config):
        """Sets the large_request_fault_config of this ChaosConfig.


        :param large_request_fault_config: The large_request_fault_config of this ChaosConfig.
        :type large_request_fault_config: LargeRequestFaultConfig
        """

        self._large_request_fault_config = large_request_fault_config

    @property
    def large_response_fault_config(self):
        """Gets the large_response_fault_config of this ChaosConfig.


        :return: The large_response_fault_config of this ChaosConfig.
        :rtype: LargeResponseFaultConfig
        """
        return self._large_response_fault_config

    @large_response_fault_config.setter
    def large_response_fault_config(self, large_response_fault_config):
        """Sets the large_response_fault_config of this ChaosConfig.


        :param large_response_fault_config: The large_response_fault_config of this ChaosConfig.
        :type large_response_fault_config: LargeResponseFaultConfig
        """

        self._large_response_fault_config = large_response_fault_config

    @property
    def latency_injection_fault_config(self):
        """Gets the latency_injection_fault_config of this ChaosConfig.


        :return: The latency_injection_fault_config of this ChaosConfig.
        :rtype: LatencyInjectionFaultConfig
        """
        return self._latency_injection_fault_config

    @latency_injection_fault_config.setter
    def latency_injection_fault_config(self, latency_injection_fault_config):
        """Sets the latency_injection_fault_config of this ChaosConfig.


        :param latency_injection_fault_config: The latency_injection_fault_config of this ChaosConfig.
        :type latency_injection_fault_config: LatencyInjectionFaultConfig
        """

        self._latency_injection_fault_config = latency_injection_fault_config
