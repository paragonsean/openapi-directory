# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RedirectionSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: int=None, enabled: bool=None, to: str=None):
        """RedirectionSettings - a model defined in OpenAPI

        :param code: The code of this RedirectionSettings.
        :param enabled: The enabled of this RedirectionSettings.
        :param to: The to of this RedirectionSettings.
        """
        self.openapi_types = {
            'code': int,
            'enabled': bool,
            'to': str
        }

        self.attribute_map = {
            'code': 'code',
            'enabled': 'enabled',
            'to': 'to'
        }

        self._code = code
        self._enabled = enabled
        self._to = to

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RedirectionSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RedirectionSettings of this RedirectionSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this RedirectionSettings.

        The http redirect code

        :return: The code of this RedirectionSettings.
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this RedirectionSettings.

        The http redirect code

        :param code: The code of this RedirectionSettings.
        :type code: int
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def enabled(self):
        """Gets the enabled of this RedirectionSettings.

        Whether or not redirection is enabled

        :return: The enabled of this RedirectionSettings.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this RedirectionSettings.

        Whether or not redirection is enabled

        :param enabled: The enabled of this RedirectionSettings.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def to(self):
        """Gets the to of this RedirectionSettings.

        The location for redirection

        :return: The to of this RedirectionSettings.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this RedirectionSettings.

        The location for redirection

        :param to: The to of this RedirectionSettings.
        :type to: str
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")

        self._to = to
