# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bad_response import BadResponse
from openapi_server import util


class BadResponsesFaultConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ratio: float=None, responses: List[BadResponse]=None):
        """BadResponsesFaultConfig - a model defined in OpenAPI

        :param ratio: The ratio of this BadResponsesFaultConfig.
        :param responses: The responses of this BadResponsesFaultConfig.
        """
        self.openapi_types = {
            'ratio': float,
            'responses': List[BadResponse]
        }

        self.attribute_map = {
            'ratio': 'ratio',
            'responses': 'responses'
        }

        self._ratio = ratio
        self._responses = responses

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BadResponsesFaultConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BadResponsesFaultConfig of this BadResponsesFaultConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ratio(self):
        """Gets the ratio of this BadResponsesFaultConfig.

        The percentage of requests affected by this fault. Value should be between 0.0 and 1.0

        :return: The ratio of this BadResponsesFaultConfig.
        :rtype: float
        """
        return self._ratio

    @ratio.setter
    def ratio(self, ratio):
        """Sets the ratio of this BadResponsesFaultConfig.

        The percentage of requests affected by this fault. Value should be between 0.0 and 1.0

        :param ratio: The ratio of this BadResponsesFaultConfig.
        :type ratio: float
        """
        if ratio is None:
            raise ValueError("Invalid value for `ratio`, must not be `None`")

        self._ratio = ratio

    @property
    def responses(self):
        """Gets the responses of this BadResponsesFaultConfig.

        The possibles responses

        :return: The responses of this BadResponsesFaultConfig.
        :rtype: List[BadResponse]
        """
        return self._responses

    @responses.setter
    def responses(self, responses):
        """Sets the responses of this BadResponsesFaultConfig.

        The possibles responses

        :param responses: The responses of this BadResponsesFaultConfig.
        :type responses: List[BadResponse]
        """
        if responses is None:
            raise ValueError("Invalid value for `responses`, must not be `None`")

        self._responses = responses
