# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IpFiltering(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, blacklist: List[str]=None, whitelist: List[str]=None):
        """IpFiltering - a model defined in OpenAPI

        :param blacklist: The blacklist of this IpFiltering.
        :param whitelist: The whitelist of this IpFiltering.
        """
        self.openapi_types = {
            'blacklist': List[str],
            'whitelist': List[str]
        }

        self.attribute_map = {
            'blacklist': 'blacklist',
            'whitelist': 'whitelist'
        }

        self._blacklist = blacklist
        self._whitelist = whitelist

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IpFiltering':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IpFiltering of this IpFiltering.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def blacklist(self):
        """Gets the blacklist of this IpFiltering.

        Blacklisted IP addresses

        :return: The blacklist of this IpFiltering.
        :rtype: List[str]
        """
        return self._blacklist

    @blacklist.setter
    def blacklist(self, blacklist):
        """Sets the blacklist of this IpFiltering.

        Blacklisted IP addresses

        :param blacklist: The blacklist of this IpFiltering.
        :type blacklist: List[str]
        """
        if blacklist is None:
            raise ValueError("Invalid value for `blacklist`, must not be `None`")

        self._blacklist = blacklist

    @property
    def whitelist(self):
        """Gets the whitelist of this IpFiltering.

        Whitelisted IP addresses

        :return: The whitelist of this IpFiltering.
        :rtype: List[str]
        """
        return self._whitelist

    @whitelist.setter
    def whitelist(self, whitelist):
        """Sets the whitelist of this IpFiltering.

        Whitelisted IP addresses

        :param whitelist: The whitelist of this IpFiltering.
        :type whitelist: List[str]
        """
        if whitelist is None:
            raise ValueError("Invalid value for `whitelist`, must not be `None`")

        self._whitelist = whitelist
