# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Script(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: Dict[str, str]=None, desc: Dict[str, str]=None, id: str=None, name: str=None):
        """Script - a model defined in OpenAPI

        :param code: The code of this Script.
        :param desc: The desc of this Script.
        :param id: The id of this Script.
        :param name: The name of this Script.
        """
        self.openapi_types = {
            'code': Dict[str, str],
            'desc': Dict[str, str],
            'id': str,
            'name': str
        }

        self.attribute_map = {
            'code': 'code',
            'desc': 'desc',
            'id': 'id',
            'name': 'name'
        }

        self._code = code
        self._desc = desc
        self._id = id
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Script':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Script of this Script.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this Script.

        The code of the script

        :return: The code of this Script.
        :rtype: Dict[str, str]
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Script.

        The code of the script

        :param code: The code of this Script.
        :type code: Dict[str, str]
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def desc(self):
        """Gets the desc of this Script.

        The description of the script

        :return: The desc of this Script.
        :rtype: Dict[str, str]
        """
        return self._desc

    @desc.setter
    def desc(self, desc):
        """Sets the desc of this Script.

        The description of the script

        :param desc: The desc of this Script.
        :type desc: Dict[str, str]
        """
        if desc is None:
            raise ValueError("Invalid value for `desc`, must not be `None`")

        self._desc = desc

    @property
    def id(self):
        """Gets the id of this Script.

        The id of the script

        :return: The id of this Script.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Script.

        The id of the script

        :param id: The id of this Script.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this Script.

        The name of the script

        :return: The name of this Script.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Script.

        The name of the script

        :param name: The name of this Script.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
