# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.custom_data_exporter_config import CustomDataExporterConfig
from openapi_server.models.elastic_config import ElasticConfig
from openapi_server.models.file_data_exporter_config import FileDataExporterConfig
from openapi_server.models.kafka_config import KafkaConfig
from openapi_server.models.mailer_console_exporter_config import MailerConsoleExporterConfig
from openapi_server.models.mailer_generic_exporter_config import MailerGenericExporterConfig
from openapi_server.models.mailer_mailgun_exporter_config import MailerMailgunExporterConfig
from openapi_server.models.mailer_mailjet_exporter_config import MailerMailjetExporterConfig
from openapi_server.models.mailer_sendgrid_exporter_config import MailerSendgridExporterConfig
from openapi_server.models.pulsar_data_exporter_config import PulsarDataExporterConfig
from openapi_server import util


class DataExporterConfigConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster_uri: str=None, headers: Dict[str, str]=None, index: str=None, password: str=None, type: str=None, user: str=None, key_pass: str=None, key_store: str=None, servers: List[str]=None, topic: str=None, trustore: str=None, namespace: str=None, tenant: str=None, uri: List[str]=None, path: str=None, to: List[str]=None, url: str=None, api_key: str=None, domain: str=None, eu: bool=None, api_key_private: str=None, api_key_public: str=None, config: Dict[str, str]=None, ref: str=None):
        """DataExporterConfigConfig - a model defined in OpenAPI

        :param cluster_uri: The cluster_uri of this DataExporterConfigConfig.
        :param headers: The headers of this DataExporterConfigConfig.
        :param index: The index of this DataExporterConfigConfig.
        :param password: The password of this DataExporterConfigConfig.
        :param type: The type of this DataExporterConfigConfig.
        :param user: The user of this DataExporterConfigConfig.
        :param key_pass: The key_pass of this DataExporterConfigConfig.
        :param key_store: The key_store of this DataExporterConfigConfig.
        :param servers: The servers of this DataExporterConfigConfig.
        :param topic: The topic of this DataExporterConfigConfig.
        :param trustore: The trustore of this DataExporterConfigConfig.
        :param namespace: The namespace of this DataExporterConfigConfig.
        :param tenant: The tenant of this DataExporterConfigConfig.
        :param uri: The uri of this DataExporterConfigConfig.
        :param path: The path of this DataExporterConfigConfig.
        :param to: The to of this DataExporterConfigConfig.
        :param url: The url of this DataExporterConfigConfig.
        :param api_key: The api_key of this DataExporterConfigConfig.
        :param domain: The domain of this DataExporterConfigConfig.
        :param eu: The eu of this DataExporterConfigConfig.
        :param api_key_private: The api_key_private of this DataExporterConfigConfig.
        :param api_key_public: The api_key_public of this DataExporterConfigConfig.
        :param config: The config of this DataExporterConfigConfig.
        :param ref: The ref of this DataExporterConfigConfig.
        """
        self.openapi_types = {
            'cluster_uri': str,
            'headers': Dict[str, str],
            'index': str,
            'password': str,
            'type': str,
            'user': str,
            'key_pass': str,
            'key_store': str,
            'servers': List[str],
            'topic': str,
            'trustore': str,
            'namespace': str,
            'tenant': str,
            'uri': List[str],
            'path': str,
            'to': List[str],
            'url': str,
            'api_key': str,
            'domain': str,
            'eu': bool,
            'api_key_private': str,
            'api_key_public': str,
            'config': Dict[str, str],
            'ref': str
        }

        self.attribute_map = {
            'cluster_uri': 'clusterUri',
            'headers': 'headers',
            'index': 'index',
            'password': 'password',
            'type': 'type',
            'user': 'user',
            'key_pass': 'keyPass',
            'key_store': 'keyStore',
            'servers': 'servers',
            'topic': 'topic',
            'trustore': 'trustore',
            'namespace': 'namespace',
            'tenant': 'tenant',
            'uri': 'uri',
            'path': 'path',
            'to': 'to',
            'url': 'url',
            'api_key': 'apiKey',
            'domain': 'domain',
            'eu': 'eu',
            'api_key_private': 'apiKeyPrivate',
            'api_key_public': 'apiKeyPublic',
            'config': 'config',
            'ref': 'ref'
        }

        self._cluster_uri = cluster_uri
        self._headers = headers
        self._index = index
        self._password = password
        self._type = type
        self._user = user
        self._key_pass = key_pass
        self._key_store = key_store
        self._servers = servers
        self._topic = topic
        self._trustore = trustore
        self._namespace = namespace
        self._tenant = tenant
        self._uri = uri
        self._path = path
        self._to = to
        self._url = url
        self._api_key = api_key
        self._domain = domain
        self._eu = eu
        self._api_key_private = api_key_private
        self._api_key_public = api_key_public
        self._config = config
        self._ref = ref

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataExporterConfigConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataExporterConfig_config of this DataExporterConfigConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster_uri(self):
        """Gets the cluster_uri of this DataExporterConfigConfig.

        URL of the elastic cluster

        :return: The cluster_uri of this DataExporterConfigConfig.
        :rtype: str
        """
        return self._cluster_uri

    @cluster_uri.setter
    def cluster_uri(self, cluster_uri):
        """Sets the cluster_uri of this DataExporterConfigConfig.

        URL of the elastic cluster

        :param cluster_uri: The cluster_uri of this DataExporterConfigConfig.
        :type cluster_uri: str
        """
        if cluster_uri is None:
            raise ValueError("Invalid value for `cluster_uri`, must not be `None`")

        self._cluster_uri = cluster_uri

    @property
    def headers(self):
        """Gets the headers of this DataExporterConfigConfig.

        Optional headers

        :return: The headers of this DataExporterConfigConfig.
        :rtype: Dict[str, str]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this DataExporterConfigConfig.

        Optional headers

        :param headers: The headers of this DataExporterConfigConfig.
        :type headers: Dict[str, str]
        """
        if headers is None:
            raise ValueError("Invalid value for `headers`, must not be `None`")

        self._headers = headers

    @property
    def index(self):
        """Gets the index of this DataExporterConfigConfig.

        Index for events. Default is otoroshi-events

        :return: The index of this DataExporterConfigConfig.
        :rtype: str
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this DataExporterConfigConfig.

        Index for events. Default is otoroshi-events

        :param index: The index of this DataExporterConfigConfig.
        :type index: str
        """
        if index is None:
            raise ValueError("Invalid value for `index`, must not be `None`")

        self._index = index

    @property
    def password(self):
        """Gets the password of this DataExporterConfigConfig.

        Optional password

        :return: The password of this DataExporterConfigConfig.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this DataExporterConfigConfig.

        Optional password

        :param password: The password of this DataExporterConfigConfig.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")

        self._password = password

    @property
    def type(self):
        """Gets the type of this DataExporterConfigConfig.

        Type of events. Default is event

        :return: The type of this DataExporterConfigConfig.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DataExporterConfigConfig.

        Type of events. Default is event

        :param type: The type of this DataExporterConfigConfig.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def user(self):
        """Gets the user of this DataExporterConfigConfig.

        Optional user

        :return: The user of this DataExporterConfigConfig.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this DataExporterConfigConfig.

        Optional user

        :param user: The user of this DataExporterConfigConfig.
        :type user: str
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user

    @property
    def key_pass(self):
        """Gets the key_pass of this DataExporterConfigConfig.

        Optional keypass

        :return: The key_pass of this DataExporterConfigConfig.
        :rtype: str
        """
        return self._key_pass

    @key_pass.setter
    def key_pass(self, key_pass):
        """Sets the key_pass of this DataExporterConfigConfig.

        Optional keypass

        :param key_pass: The key_pass of this DataExporterConfigConfig.
        :type key_pass: str
        """

        self._key_pass = key_pass

    @property
    def key_store(self):
        """Gets the key_store of this DataExporterConfigConfig.

        Optional path to keystore

        :return: The key_store of this DataExporterConfigConfig.
        :rtype: str
        """
        return self._key_store

    @key_store.setter
    def key_store(self, key_store):
        """Sets the key_store of this DataExporterConfigConfig.

        Optional path to keystore

        :param key_store: The key_store of this DataExporterConfigConfig.
        :type key_store: str
        """

        self._key_store = key_store

    @property
    def servers(self):
        """Gets the servers of this DataExporterConfigConfig.

        URLs of the kafka servers

        :return: The servers of this DataExporterConfigConfig.
        :rtype: List[str]
        """
        return self._servers

    @servers.setter
    def servers(self, servers):
        """Sets the servers of this DataExporterConfigConfig.

        URLs of the kafka servers

        :param servers: The servers of this DataExporterConfigConfig.
        :type servers: List[str]
        """
        if servers is None:
            raise ValueError("Invalid value for `servers`, must not be `None`")

        self._servers = servers

    @property
    def topic(self):
        """Gets the topic of this DataExporterConfigConfig.

        Topic

        :return: The topic of this DataExporterConfigConfig.
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this DataExporterConfigConfig.

        Topic

        :param topic: The topic of this DataExporterConfigConfig.
        :type topic: str
        """
        if topic is None:
            raise ValueError("Invalid value for `topic`, must not be `None`")

        self._topic = topic

    @property
    def trustore(self):
        """Gets the trustore of this DataExporterConfigConfig.

        Optional path to trustore

        :return: The trustore of this DataExporterConfigConfig.
        :rtype: str
        """
        return self._trustore

    @trustore.setter
    def trustore(self, trustore):
        """Sets the trustore of this DataExporterConfigConfig.

        Optional path to trustore

        :param trustore: The trustore of this DataExporterConfigConfig.
        :type trustore: str
        """

        self._trustore = trustore

    @property
    def namespace(self):
        """Gets the namespace of this DataExporterConfigConfig.

        Namespace

        :return: The namespace of this DataExporterConfigConfig.
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this DataExporterConfigConfig.

        Namespace

        :param namespace: The namespace of this DataExporterConfigConfig.
        :type namespace: str
        """
        if namespace is None:
            raise ValueError("Invalid value for `namespace`, must not be `None`")

        self._namespace = namespace

    @property
    def tenant(self):
        """Gets the tenant of this DataExporterConfigConfig.

        Tenant

        :return: The tenant of this DataExporterConfigConfig.
        :rtype: str
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant):
        """Sets the tenant of this DataExporterConfigConfig.

        Tenant

        :param tenant: The tenant of this DataExporterConfigConfig.
        :type tenant: str
        """
        if tenant is None:
            raise ValueError("Invalid value for `tenant`, must not be `None`")

        self._tenant = tenant

    @property
    def uri(self):
        """Gets the uri of this DataExporterConfigConfig.

        URI of the pulsar server

        :return: The uri of this DataExporterConfigConfig.
        :rtype: List[str]
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this DataExporterConfigConfig.

        URI of the pulsar server

        :param uri: The uri of this DataExporterConfigConfig.
        :type uri: List[str]
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")

        self._uri = uri

    @property
    def path(self):
        """Gets the path of this DataExporterConfigConfig.

        Path to file

        :return: The path of this DataExporterConfigConfig.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this DataExporterConfigConfig.

        Path to file

        :param path: The path of this DataExporterConfigConfig.
        :type path: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")

        self._path = path

    @property
    def to(self):
        """Gets the to of this DataExporterConfigConfig.

        Email adresses of recipents

        :return: The to of this DataExporterConfigConfig.
        :rtype: List[str]
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this DataExporterConfigConfig.

        Email adresses of recipents

        :param to: The to of this DataExporterConfigConfig.
        :type to: List[str]
        """

        self._to = to

    @property
    def url(self):
        """Gets the url of this DataExporterConfigConfig.

        Url of mailer

        :return: The url of this DataExporterConfigConfig.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this DataExporterConfigConfig.

        Url of mailer

        :param url: The url of this DataExporterConfigConfig.
        :type url: str
        """

        self._url = url

    @property
    def api_key(self):
        """Gets the api_key of this DataExporterConfigConfig.

        Mailgun apiKey

        :return: The api_key of this DataExporterConfigConfig.
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this DataExporterConfigConfig.

        Mailgun apiKey

        :param api_key: The api_key of this DataExporterConfigConfig.
        :type api_key: str
        """

        self._api_key = api_key

    @property
    def domain(self):
        """Gets the domain of this DataExporterConfigConfig.

        Mailgun domain

        :return: The domain of this DataExporterConfigConfig.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this DataExporterConfigConfig.

        Mailgun domain

        :param domain: The domain of this DataExporterConfigConfig.
        :type domain: str
        """

        self._domain = domain

    @property
    def eu(self):
        """Gets the eu of this DataExporterConfigConfig.

        Whether the mailgun server is european

        :return: The eu of this DataExporterConfigConfig.
        :rtype: bool
        """
        return self._eu

    @eu.setter
    def eu(self, eu):
        """Sets the eu of this DataExporterConfigConfig.

        Whether the mailgun server is european

        :param eu: The eu of this DataExporterConfigConfig.
        :type eu: bool
        """

        self._eu = eu

    @property
    def api_key_private(self):
        """Gets the api_key_private of this DataExporterConfigConfig.

        Mailjet private apiKey

        :return: The api_key_private of this DataExporterConfigConfig.
        :rtype: str
        """
        return self._api_key_private

    @api_key_private.setter
    def api_key_private(self, api_key_private):
        """Sets the api_key_private of this DataExporterConfigConfig.

        Mailjet private apiKey

        :param api_key_private: The api_key_private of this DataExporterConfigConfig.
        :type api_key_private: str
        """

        self._api_key_private = api_key_private

    @property
    def api_key_public(self):
        """Gets the api_key_public of this DataExporterConfigConfig.

        Sendgrid apiKey

        :return: The api_key_public of this DataExporterConfigConfig.
        :rtype: str
        """
        return self._api_key_public

    @api_key_public.setter
    def api_key_public(self, api_key_public):
        """Sets the api_key_public of this DataExporterConfigConfig.

        Sendgrid apiKey

        :param api_key_public: The api_key_public of this DataExporterConfigConfig.
        :type api_key_public: str
        """

        self._api_key_public = api_key_public

    @property
    def config(self):
        """Gets the config of this DataExporterConfigConfig.

        Custom data exporter config

        :return: The config of this DataExporterConfigConfig.
        :rtype: Dict[str, str]
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this DataExporterConfigConfig.

        Custom data exporter config

        :param config: The config of this DataExporterConfigConfig.
        :type config: Dict[str, str]
        """
        if config is None:
            raise ValueError("Invalid value for `config`, must not be `None`")

        self._config = config

    @property
    def ref(self):
        """Gets the ref of this DataExporterConfigConfig.

        Script Ref

        :return: The ref of this DataExporterConfigConfig.
        :rtype: str
        """
        return self._ref

    @ref.setter
    def ref(self, ref):
        """Sets the ref of this DataExporterConfigConfig.

        Script Ref

        :param ref: The ref of this DataExporterConfigConfig.
        :type ref: str
        """
        if ref is None:
            raise ValueError("Invalid value for `ref`, must not be `None`")

        self._ref = ref
