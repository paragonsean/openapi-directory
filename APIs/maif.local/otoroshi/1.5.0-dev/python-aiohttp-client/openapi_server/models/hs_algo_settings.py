# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HSAlgoSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, secret: str=None, size: int=None, type: str=None):
        """HSAlgoSettings - a model defined in OpenAPI

        :param secret: The secret of this HSAlgoSettings.
        :param size: The size of this HSAlgoSettings.
        :param type: The type of this HSAlgoSettings.
        """
        self.openapi_types = {
            'secret': str,
            'size': int,
            'type': str
        }

        self.attribute_map = {
            'secret': 'secret',
            'size': 'size',
            'type': 'type'
        }

        self._secret = secret
        self._size = size
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HSAlgoSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HSAlgoSettings of this HSAlgoSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def secret(self):
        """Gets the secret of this HSAlgoSettings.

        The secret value for the HMAC function

        :return: The secret of this HSAlgoSettings.
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this HSAlgoSettings.

        The secret value for the HMAC function

        :param secret: The secret of this HSAlgoSettings.
        :type secret: str
        """
        if secret is None:
            raise ValueError("Invalid value for `secret`, must not be `None`")

        self._secret = secret

    @property
    def size(self):
        """Gets the size of this HSAlgoSettings.

        Size for SHA function. can be 256, 384 or 512

        :return: The size of this HSAlgoSettings.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this HSAlgoSettings.

        Size for SHA function. can be 256, 384 or 512

        :param size: The size of this HSAlgoSettings.
        :type size: int
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")

        self._size = size

    @property
    def type(self):
        """Gets the type of this HSAlgoSettings.

        String with value HSAlgoSettings

        :return: The type of this HSAlgoSettings.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this HSAlgoSettings.

        String with value HSAlgoSettings

        :param type: The type of this HSAlgoSettings.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
