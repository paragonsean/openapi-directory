# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Target(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, host: str=None, scheme: str=None):
        """Target - a model defined in OpenAPI

        :param host: The host of this Target.
        :param scheme: The scheme of this Target.
        """
        self.openapi_types = {
            'host': str,
            'scheme': str
        }

        self.attribute_map = {
            'host': 'host',
            'scheme': 'scheme'
        }

        self._host = host
        self._scheme = scheme

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Target':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Target of this Target.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def host(self):
        """Gets the host of this Target.

        The host on which the HTTP call will be forwarded. Can be a domain name, or an IP address. Can also have a port

        :return: The host of this Target.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this Target.

        The host on which the HTTP call will be forwarded. Can be a domain name, or an IP address. Can also have a port

        :param host: The host of this Target.
        :type host: str
        """
        if host is None:
            raise ValueError("Invalid value for `host`, must not be `None`")

        self._host = host

    @property
    def scheme(self):
        """Gets the scheme of this Target.

        The protocol used for communication. Can be http or https

        :return: The scheme of this Target.
        :rtype: str
        """
        return self._scheme

    @scheme.setter
    def scheme(self, scheme):
        """Sets the scheme of this Target.

        The protocol used for communication. Can be http or https

        :param scheme: The scheme of this Target.
        :type scheme: str
        """
        if scheme is None:
            raise ValueError("Invalid value for `scheme`, must not be `None`")

        self._scheme = scheme
