# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StatsdConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, datadog: bool=None, host: str=None, port: int=None):
        """StatsdConfig - a model defined in OpenAPI

        :param datadog: The datadog of this StatsdConfig.
        :param host: The host of this StatsdConfig.
        :param port: The port of this StatsdConfig.
        """
        self.openapi_types = {
            'datadog': bool,
            'host': str,
            'port': int
        }

        self.attribute_map = {
            'datadog': 'datadog',
            'host': 'host',
            'port': 'port'
        }

        self._datadog = datadog
        self._host = host
        self._port = port

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StatsdConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StatsdConfig of this StatsdConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def datadog(self):
        """Gets the datadog of this StatsdConfig.

        Datadog agent

        :return: The datadog of this StatsdConfig.
        :rtype: bool
        """
        return self._datadog

    @datadog.setter
    def datadog(self, datadog):
        """Sets the datadog of this StatsdConfig.

        Datadog agent

        :param datadog: The datadog of this StatsdConfig.
        :type datadog: bool
        """
        if datadog is None:
            raise ValueError("Invalid value for `datadog`, must not be `None`")

        self._datadog = datadog

    @property
    def host(self):
        """Gets the host of this StatsdConfig.

        The host of the StatsD agent

        :return: The host of this StatsdConfig.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this StatsdConfig.

        The host of the StatsD agent

        :param host: The host of this StatsdConfig.
        :type host: str
        """
        if host is None:
            raise ValueError("Invalid value for `host`, must not be `None`")

        self._host = host

    @property
    def port(self):
        """Gets the port of this StatsdConfig.

        The port of the StatsD agent

        :return: The port of this StatsdConfig.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this StatsdConfig.

        The port of the StatsD agent

        :param port: The port of this StatsdConfig.
        :type port: int
        """
        if port is None:
            raise ValueError("Invalid value for `port`, must not be `None`")

        self._port = port
