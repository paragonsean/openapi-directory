# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.target import Target
from openapi_server import util


class Canary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=None, root: str=None, targets: List[Target]=None, traffic: int=None):
        """Canary - a model defined in OpenAPI

        :param enabled: The enabled of this Canary.
        :param root: The root of this Canary.
        :param targets: The targets of this Canary.
        :param traffic: The traffic of this Canary.
        """
        self.openapi_types = {
            'enabled': bool,
            'root': str,
            'targets': List[Target],
            'traffic': int
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'root': 'root',
            'targets': 'targets',
            'traffic': 'traffic'
        }

        self._enabled = enabled
        self._root = root
        self._targets = targets
        self._traffic = traffic

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Canary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Canary of this Canary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this Canary.

        Use canary mode for this service

        :return: The enabled of this Canary.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Canary.

        Use canary mode for this service

        :param enabled: The enabled of this Canary.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def root(self):
        """Gets the root of this Canary.

        Otoroshi will append this root to any target choosen. If the specified root is '/api/foo', then a request to https://yyyyyyy/bar will actually hit https://xxxxxxxxx/api/foo/bar

        :return: The root of this Canary.
        :rtype: str
        """
        return self._root

    @root.setter
    def root(self, root):
        """Sets the root of this Canary.

        Otoroshi will append this root to any target choosen. If the specified root is '/api/foo', then a request to https://yyyyyyy/bar will actually hit https://xxxxxxxxx/api/foo/bar

        :param root: The root of this Canary.
        :type root: str
        """
        if root is None:
            raise ValueError("Invalid value for `root`, must not be `None`")

        self._root = root

    @property
    def targets(self):
        """Gets the targets of this Canary.

        The list of target that Otoroshi will proxy and expose through the subdomain defined before. Otoroshi will do round-robin load balancing between all those targets with circuit breaker mecanism to avoid cascading failures

        :return: The targets of this Canary.
        :rtype: List[Target]
        """
        return self._targets

    @targets.setter
    def targets(self, targets):
        """Sets the targets of this Canary.

        The list of target that Otoroshi will proxy and expose through the subdomain defined before. Otoroshi will do round-robin load balancing between all those targets with circuit breaker mecanism to avoid cascading failures

        :param targets: The targets of this Canary.
        :type targets: List[Target]
        """
        if targets is None:
            raise ValueError("Invalid value for `targets`, must not be `None`")

        self._targets = targets

    @property
    def traffic(self):
        """Gets the traffic of this Canary.

        Ratio of traffic that will be sent to canary targets.

        :return: The traffic of this Canary.
        :rtype: int
        """
        return self._traffic

    @traffic.setter
    def traffic(self, traffic):
        """Sets the traffic of this Canary.

        Ratio of traffic that will be sent to canary targets.

        :param traffic: The traffic of this Canary.
        :type traffic: int
        """
        if traffic is None:
            raise ValueError("Invalid value for `traffic`, must not be `None`")

        self._traffic = traffic
