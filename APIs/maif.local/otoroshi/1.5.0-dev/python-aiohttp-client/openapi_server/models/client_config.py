# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ClientConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backoff_factor: int=None, call_timeout: int=None, global_timeout: int=None, max_errors: int=None, retries: int=None, retry_initial_delay: int=None, sample_interval: int=None, use_circuit_breaker: bool=None):
        """ClientConfig - a model defined in OpenAPI

        :param backoff_factor: The backoff_factor of this ClientConfig.
        :param call_timeout: The call_timeout of this ClientConfig.
        :param global_timeout: The global_timeout of this ClientConfig.
        :param max_errors: The max_errors of this ClientConfig.
        :param retries: The retries of this ClientConfig.
        :param retry_initial_delay: The retry_initial_delay of this ClientConfig.
        :param sample_interval: The sample_interval of this ClientConfig.
        :param use_circuit_breaker: The use_circuit_breaker of this ClientConfig.
        """
        self.openapi_types = {
            'backoff_factor': int,
            'call_timeout': int,
            'global_timeout': int,
            'max_errors': int,
            'retries': int,
            'retry_initial_delay': int,
            'sample_interval': int,
            'use_circuit_breaker': bool
        }

        self.attribute_map = {
            'backoff_factor': 'backoffFactor',
            'call_timeout': 'callTimeout',
            'global_timeout': 'globalTimeout',
            'max_errors': 'maxErrors',
            'retries': 'retries',
            'retry_initial_delay': 'retryInitialDelay',
            'sample_interval': 'sampleInterval',
            'use_circuit_breaker': 'useCircuitBreaker'
        }

        self._backoff_factor = backoff_factor
        self._call_timeout = call_timeout
        self._global_timeout = global_timeout
        self._max_errors = max_errors
        self._retries = retries
        self._retry_initial_delay = retry_initial_delay
        self._sample_interval = sample_interval
        self._use_circuit_breaker = use_circuit_breaker

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClientConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClientConfig of this ClientConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backoff_factor(self):
        """Gets the backoff_factor of this ClientConfig.

        Specify the factor to multiply the delay for each retry

        :return: The backoff_factor of this ClientConfig.
        :rtype: int
        """
        return self._backoff_factor

    @backoff_factor.setter
    def backoff_factor(self, backoff_factor):
        """Sets the backoff_factor of this ClientConfig.

        Specify the factor to multiply the delay for each retry

        :param backoff_factor: The backoff_factor of this ClientConfig.
        :type backoff_factor: int
        """
        if backoff_factor is None:
            raise ValueError("Invalid value for `backoff_factor`, must not be `None`")

        self._backoff_factor = backoff_factor

    @property
    def call_timeout(self):
        """Gets the call_timeout of this ClientConfig.

        Specify how long each call should last at most in milliseconds

        :return: The call_timeout of this ClientConfig.
        :rtype: int
        """
        return self._call_timeout

    @call_timeout.setter
    def call_timeout(self, call_timeout):
        """Sets the call_timeout of this ClientConfig.

        Specify how long each call should last at most in milliseconds

        :param call_timeout: The call_timeout of this ClientConfig.
        :type call_timeout: int
        """
        if call_timeout is None:
            raise ValueError("Invalid value for `call_timeout`, must not be `None`")

        self._call_timeout = call_timeout

    @property
    def global_timeout(self):
        """Gets the global_timeout of this ClientConfig.

        Specify how long the global call (with retries) should last at most in milliseconds

        :return: The global_timeout of this ClientConfig.
        :rtype: int
        """
        return self._global_timeout

    @global_timeout.setter
    def global_timeout(self, global_timeout):
        """Sets the global_timeout of this ClientConfig.

        Specify how long the global call (with retries) should last at most in milliseconds

        :param global_timeout: The global_timeout of this ClientConfig.
        :type global_timeout: int
        """
        if global_timeout is None:
            raise ValueError("Invalid value for `global_timeout`, must not be `None`")

        self._global_timeout = global_timeout

    @property
    def max_errors(self):
        """Gets the max_errors of this ClientConfig.

        Specify how many errors can pass before opening the circuit breaker

        :return: The max_errors of this ClientConfig.
        :rtype: int
        """
        return self._max_errors

    @max_errors.setter
    def max_errors(self, max_errors):
        """Sets the max_errors of this ClientConfig.

        Specify how many errors can pass before opening the circuit breaker

        :param max_errors: The max_errors of this ClientConfig.
        :type max_errors: int
        """
        if max_errors is None:
            raise ValueError("Invalid value for `max_errors`, must not be `None`")

        self._max_errors = max_errors

    @property
    def retries(self):
        """Gets the retries of this ClientConfig.

        Specify how many times the client will try to fetch the result of the request after an error before giving up.

        :return: The retries of this ClientConfig.
        :rtype: int
        """
        return self._retries

    @retries.setter
    def retries(self, retries):
        """Sets the retries of this ClientConfig.

        Specify how many times the client will try to fetch the result of the request after an error before giving up.

        :param retries: The retries of this ClientConfig.
        :type retries: int
        """
        if retries is None:
            raise ValueError("Invalid value for `retries`, must not be `None`")

        self._retries = retries

    @property
    def retry_initial_delay(self):
        """Gets the retry_initial_delay of this ClientConfig.

        Specify the delay between two retries. Each retry, the delay is multiplied by the backoff factor

        :return: The retry_initial_delay of this ClientConfig.
        :rtype: int
        """
        return self._retry_initial_delay

    @retry_initial_delay.setter
    def retry_initial_delay(self, retry_initial_delay):
        """Sets the retry_initial_delay of this ClientConfig.

        Specify the delay between two retries. Each retry, the delay is multiplied by the backoff factor

        :param retry_initial_delay: The retry_initial_delay of this ClientConfig.
        :type retry_initial_delay: int
        """
        if retry_initial_delay is None:
            raise ValueError("Invalid value for `retry_initial_delay`, must not be `None`")

        self._retry_initial_delay = retry_initial_delay

    @property
    def sample_interval(self):
        """Gets the sample_interval of this ClientConfig.

        Specify the sliding window time for the circuit breaker in milliseconds, after this time, error count will be reseted

        :return: The sample_interval of this ClientConfig.
        :rtype: int
        """
        return self._sample_interval

    @sample_interval.setter
    def sample_interval(self, sample_interval):
        """Sets the sample_interval of this ClientConfig.

        Specify the sliding window time for the circuit breaker in milliseconds, after this time, error count will be reseted

        :param sample_interval: The sample_interval of this ClientConfig.
        :type sample_interval: int
        """
        if sample_interval is None:
            raise ValueError("Invalid value for `sample_interval`, must not be `None`")

        self._sample_interval = sample_interval

    @property
    def use_circuit_breaker(self):
        """Gets the use_circuit_breaker of this ClientConfig.

        Use a circuit breaker to avoid cascading failure when calling chains of services. Highly recommended !

        :return: The use_circuit_breaker of this ClientConfig.
        :rtype: bool
        """
        return self._use_circuit_breaker

    @use_circuit_breaker.setter
    def use_circuit_breaker(self, use_circuit_breaker):
        """Sets the use_circuit_breaker of this ClientConfig.

        Use a circuit breaker to avoid cascading failure when calling chains of services. Highly recommended !

        :param use_circuit_breaker: The use_circuit_breaker of this ClientConfig.
        :type use_circuit_breaker: bool
        """
        if use_circuit_breaker is None:
            raise ValueError("Invalid value for `use_circuit_breaker`, must not be `None`")

        self._use_circuit_breaker = use_circuit_breaker
