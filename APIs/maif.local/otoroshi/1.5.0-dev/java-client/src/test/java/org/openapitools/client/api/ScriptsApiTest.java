/*
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Deleted;
import org.openapitools.client.model.PatchInner;
import org.openapitools.client.model.Script;
import org.openapitools.client.model.ScriptCompilationResult;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ScriptsApi
 */
@Disabled
public class ScriptsApiTest {

    private final ScriptsApi api = new ScriptsApi();

    /**
     * Compile a script
     *
     * Compile a script
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void compileScriptTest() throws ApiException {
        Script script = null;
        ScriptCompilationResult response = api.compileScript(script);
        // TODO: test validations
    }

    /**
     * Create a new script
     *
     * Create a new script
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createScriptTest() throws ApiException {
        Script script = null;
        Script response = api.createScript(script);
        // TODO: test validations
    }

    /**
     * Delete a script
     *
     * Delete a script
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteScriptTest() throws ApiException {
        String scriptId = null;
        Deleted response = api.deleteScript(scriptId);
        // TODO: test validations
    }

    /**
     * Get all scripts
     *
     * Get all scripts
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findAllScriptsTest() throws ApiException {
        List<Script> response = api.findAllScripts();
        // TODO: test validations
    }

    /**
     * Get a script
     *
     * Get a script
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findScriptByIdTest() throws ApiException {
        String scriptId = null;
        Script response = api.findScriptById(scriptId);
        // TODO: test validations
    }

    /**
     * Update a script with a diff
     *
     * Update a script with a diff
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchScriptTest() throws ApiException {
        String scriptId = null;
        List<PatchInner> patchInner = null;
        Script response = api.patchScript(scriptId, patchInner);
        // TODO: test validations
    }

    /**
     * Update a script
     *
     * Update a script
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateScriptTest() throws ApiException {
        String scriptId = null;
        Script script = null;
        Script response = api.updateScript(scriptId, script);
        // TODO: test validations
    }

}
