/*
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApiKey;
import org.openapitools.client.model.Deleted;
import org.openapitools.client.model.Group;
import org.openapitools.client.model.PatchInner;
import org.openapitools.client.model.Quotas;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ApikeysApi
 */
@Disabled
public class ApikeysApiTest {

    private final ApikeysApi api = new ApikeysApi();

    /**
     * Get all api keys
     *
     * Get all api keys
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void allApiKeysTest() throws ApiException {
        List<ApiKey> response = api.allApiKeys();
        // TODO: test validations
    }

    /**
     * Get an api key
     *
     * Get an api key for a specified service descriptor
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiKeyTest() throws ApiException {
        String serviceId = null;
        String clientId = null;
        ApiKey response = api.apiKey(serviceId, clientId);
        // TODO: test validations
    }

    /**
     * Get an api key
     *
     * Get an api key for a specified service group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiKeyFromGroupTest() throws ApiException {
        String groupId = null;
        String clientId = null;
        ApiKey response = api.apiKeyFromGroup(groupId, clientId);
        // TODO: test validations
    }

    /**
     * Get the quota state of an api key
     *
     * Get the quota state of an api key
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiKeyFromGroupQuotasTest() throws ApiException {
        String groupId = null;
        String clientId = null;
        Quotas response = api.apiKeyFromGroupQuotas(groupId, clientId);
        // TODO: test validations
    }

    /**
     * Get the group of an api key
     *
     * Get the group of an api key
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiKeyGroupTest() throws ApiException {
        String serviceId = null;
        String clientId = null;
        Group response = api.apiKeyGroup(serviceId, clientId);
        // TODO: test validations
    }

    /**
     * Get the quota state of an api key
     *
     * Get the quota state of an api key
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiKeyQuotasTest() throws ApiException {
        String serviceId = null;
        String clientId = null;
        Quotas response = api.apiKeyQuotas(serviceId, clientId);
        // TODO: test validations
    }

    /**
     * Get all api keys for the group of a service
     *
     * Get all api keys for the group of a service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiKeysTest() throws ApiException {
        String serviceId = null;
        List<ApiKey> response = api.apiKeys(serviceId);
        // TODO: test validations
    }

    /**
     * Get all api keys for the group of a service
     *
     * Get all api keys for the group of a service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiKeysFromGroupTest() throws ApiException {
        String groupId = null;
        List<ApiKey> response = api.apiKeysFromGroup(groupId);
        // TODO: test validations
    }

    /**
     * Create a new api key for a service
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createApiKeyTest() throws ApiException {
        String serviceId = null;
        ApiKey apiKey = null;
        ApiKey response = api.createApiKey(serviceId, apiKey);
        // TODO: test validations
    }

    /**
     * Create a new api key for a group
     *
     * Create a new api key for a group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createApiKeyFromGroupTest() throws ApiException {
        String groupId = null;
        ApiKey apiKey = null;
        ApiKey response = api.createApiKeyFromGroup(groupId, apiKey);
        // TODO: test validations
    }

    /**
     * Delete an api key
     *
     * Delete an api key for a specified service descriptor
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteApiKeyTest() throws ApiException {
        String serviceId = null;
        String clientId = null;
        Deleted response = api.deleteApiKey(serviceId, clientId);
        // TODO: test validations
    }

    /**
     * Delete an api key
     *
     * Delete an api key for a specified service group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteApiKeyFromGroupTest() throws ApiException {
        String groupId = null;
        String clientId = null;
        Deleted response = api.deleteApiKeyFromGroup(groupId, clientId);
        // TODO: test validations
    }

    /**
     * Update an api key with a diff
     *
     * Update an api key for a specified service descriptor with a diff
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchApiKeyTest() throws ApiException {
        String serviceId = null;
        String clientId = null;
        List<PatchInner> patchInner = null;
        ApiKey response = api.patchApiKey(serviceId, clientId, patchInner);
        // TODO: test validations
    }

    /**
     * Update an api key with a diff
     *
     * Update an api key for a specified service descriptor with a diff
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchApiKeyFromGroupTest() throws ApiException {
        String groupId = null;
        String clientId = null;
        List<PatchInner> patchInner = null;
        ApiKey response = api.patchApiKeyFromGroup(groupId, clientId, patchInner);
        // TODO: test validations
    }

    /**
     * Reset the quota state of an api key
     *
     * Reset the quota state of an api key
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetApiKeyFromGroupQuotasTest() throws ApiException {
        String groupId = null;
        String clientId = null;
        Quotas response = api.resetApiKeyFromGroupQuotas(groupId, clientId);
        // TODO: test validations
    }

    /**
     * Reset the quota state of an api key
     *
     * Reset the quota state of an api key
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetApiKeyQuotasTest() throws ApiException {
        String serviceId = null;
        String clientId = null;
        Quotas response = api.resetApiKeyQuotas(serviceId, clientId);
        // TODO: test validations
    }

    /**
     * Update an api key
     *
     * Update an api key for a specified service descriptor
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateApiKeyTest() throws ApiException {
        String serviceId = null;
        String clientId = null;
        ApiKey apiKey = null;
        ApiKey response = api.updateApiKey(serviceId, clientId, apiKey);
        // TODO: test validations
    }

    /**
     * Update an api key
     *
     * Update an api key for a specified service group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateApiKeyFromGroupTest() throws ApiException {
        String groupId = null;
        String clientId = null;
        ApiKey apiKey = null;
        ApiKey response = api.updateApiKeyFromGroup(groupId, clientId, apiKey);
        // TODO: test validations
    }

}
