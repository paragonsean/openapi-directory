/*
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateBulkDataExporterConfigs200ResponseInner;
import org.openapitools.client.model.DataExporterConfig;
import org.openapitools.client.model.DeletebulkDataExporterConfig200ResponseInner;
import org.openapitools.client.model.Deleted;
import org.openapitools.client.model.PatchInner;
import org.openapitools.client.model.UpdateBulkDataExporterConfig200ResponseInner;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DataExporterConfigsApi
 */
@Disabled
public class DataExporterConfigsApiTest {

    private final DataExporterConfigsApi api = new DataExporterConfigsApi();

    /**
     * Create a new data exporter configs
     *
     * Create a new data exporter configs
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createBulkDataExporterConfigsTest() throws ApiException {
        DataExporterConfig dataExporterConfig = null;
        List<CreateBulkDataExporterConfigs200ResponseInner> response = api.createBulkDataExporterConfigs(dataExporterConfig);
        // TODO: test validations
    }

    /**
     * Create a new data exporter config
     *
     * Create a new data exporter config
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDataExporterConfigTest() throws ApiException {
        DataExporterConfig dataExporterConfig = null;
        DataExporterConfig response = api.createDataExporterConfig(dataExporterConfig);
        // TODO: test validations
    }

    /**
     * Get all data exporter configs
     *
     * Get all data exporter configs
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataExporterTemplateTest() throws ApiException {
        String type = null;
        DataExporterConfig response = api.dataExporterTemplate(type);
        // TODO: test validations
    }

    /**
     * Delete a data exporter config
     *
     * Delete a data exporter config
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDataExporterConfigTest() throws ApiException {
        String dataExporterConfigId = null;
        Deleted response = api.deleteDataExporterConfig(dataExporterConfigId);
        // TODO: test validations
    }

    /**
     * Delete a data exporter config
     *
     * Delete a data exporter config
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletebulkDataExporterConfigTest() throws ApiException {
        List<PatchInner> patchInner = null;
        List<DeletebulkDataExporterConfig200ResponseInner> response = api.deletebulkDataExporterConfig(patchInner);
        // TODO: test validations
    }

    /**
     * Get all data exporter configs
     *
     * Get all data exporter configs
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findAllDataExportersTest() throws ApiException {
        List<DataExporterConfig> response = api.findAllDataExporters();
        // TODO: test validations
    }

    /**
     * Get a data exporter config
     *
     * Get a data exporter config
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findDataExporterConfigByIdTest() throws ApiException {
        String dataExporterConfigId = null;
        DataExporterConfig response = api.findDataExporterConfigById(dataExporterConfigId);
        // TODO: test validations
    }

    /**
     * Update a data exporter configs with a diff
     *
     * Update a data exporter configs with a diff
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchBulkDataExporterConfigTest() throws ApiException {
        List<PatchInner> patchInner = null;
        List<UpdateBulkDataExporterConfig200ResponseInner> response = api.patchBulkDataExporterConfig(patchInner);
        // TODO: test validations
    }

    /**
     * Update a data exporter config with a diff
     *
     * Update a data exporter config with a diff
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchDataExporterConfigTest() throws ApiException {
        String dataExporterConfigId = null;
        List<PatchInner> patchInner = null;
        DataExporterConfig response = api.patchDataExporterConfig(dataExporterConfigId, patchInner);
        // TODO: test validations
    }

    /**
     * Update a data exporter configs
     *
     * Update a data exporter configs
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateBulkDataExporterConfigTest() throws ApiException {
        DataExporterConfig dataExporterConfig = null;
        List<UpdateBulkDataExporterConfig200ResponseInner> response = api.updateBulkDataExporterConfig(dataExporterConfig);
        // TODO: test validations
    }

    /**
     * Update a data exporter config
     *
     * Update a data exporter config
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDataExporterConfigTest() throws ApiException {
        String dataExporterConfigId = null;
        DataExporterConfig dataExporterConfig = null;
        DataExporterConfig response = api.updateDataExporterConfig(dataExporterConfigId, dataExporterConfig);
        // TODO: test validations
    }

}
