/*
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Deleted;
import org.openapitools.client.model.PatchInner;
import org.openapitools.client.model.ValidationAuthority;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ValidationAuthoritiesApi
 */
@Disabled
public class ValidationAuthoritiesApiTest {

    private final ValidationAuthoritiesApi api = new ValidationAuthoritiesApi();

    /**
     * Create one validation authorities
     *
     * Create one validation authorities
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createClientValidatorTest() throws ApiException {
        ValidationAuthority validationAuthority = null;
        ValidationAuthority response = api.createClientValidator(validationAuthority);
        // TODO: test validations
    }

    /**
     * Delete one validation authorities by id
     *
     * Delete one validation authorities by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteClientValidatorTest() throws ApiException {
        String id = null;
        Deleted response = api.deleteClientValidator(id);
        // TODO: test validations
    }

    /**
     * Get all validation authoritiess
     *
     * Get all validation authoritiess
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findAllClientValidatorsTest() throws ApiException {
        List<ValidationAuthority> response = api.findAllClientValidators();
        // TODO: test validations
    }

    /**
     * Get one validation authorities by id
     *
     * Get one validation authorities by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findClientValidatorByIdTest() throws ApiException {
        String id = null;
        ValidationAuthority response = api.findClientValidatorById(id);
        // TODO: test validations
    }

    /**
     * Update one validation authorities by id
     *
     * Update one validation authorities by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchClientValidatorTest() throws ApiException {
        String id = null;
        List<PatchInner> patchInner = null;
        ValidationAuthority response = api.patchClientValidator(id, patchInner);
        // TODO: test validations
    }

    /**
     * Update one validation authorities by id
     *
     * Update one validation authorities by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateClientValidatorTest() throws ApiException {
        String id = null;
        ValidationAuthority validationAuthority = null;
        ValidationAuthority response = api.updateClientValidator(id, validationAuthority);
        // TODO: test validations
    }

}
