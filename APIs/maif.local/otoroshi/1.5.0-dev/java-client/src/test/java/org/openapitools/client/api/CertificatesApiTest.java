/*
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Certificate;
import org.openapitools.client.model.Deleted;
import org.openapitools.client.model.PatchInner;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CertificatesApi
 */
@Disabled
public class CertificatesApiTest {

    private final CertificatesApi api = new CertificatesApi();

    /**
     * Get all certificates
     *
     * Get all certificates
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void allCertsTest() throws ApiException {
        List<Certificate> response = api.allCerts();
        // TODO: test validations
    }

    /**
     * Create one certificate
     *
     * Create one certificate
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCertTest() throws ApiException {
        Certificate certificate = null;
        Certificate response = api.createCert(certificate);
        // TODO: test validations
    }

    /**
     * Delete one certificate by id
     *
     * Delete one certificate by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCertTest() throws ApiException {
        String id = null;
        Deleted response = api.deleteCert(id);
        // TODO: test validations
    }

    /**
     * Get one certificate by id
     *
     * Get one certificate by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void oneCertTest() throws ApiException {
        String id = null;
        Certificate response = api.oneCert(id);
        // TODO: test validations
    }

    /**
     * Update one certificate by id
     *
     * Update one certificate by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchCertTest() throws ApiException {
        String id = null;
        List<PatchInner> patchInner = null;
        Certificate response = api.patchCert(id, patchInner);
        // TODO: test validations
    }

    /**
     * Update one certificate by id
     *
     * Update one certificate by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putCertTest() throws ApiException {
        String id = null;
        Certificate certificate = null;
        Certificate response = api.putCert(id, certificate);
        // TODO: test validations
    }

}
