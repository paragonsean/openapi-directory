/*
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Deleted;
import org.openapitools.client.model.Group;
import org.openapitools.client.model.PatchInner;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for GroupsApi
 */
@Disabled
public class GroupsApiTest {

    private final GroupsApi api = new GroupsApi();

    /**
     * Get all service groups
     *
     * Get all service groups
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void allServiceGroupsTest() throws ApiException {
        List<Group> response = api.allServiceGroups();
        // TODO: test validations
    }

    /**
     * Create a new service group
     *
     * Create a new service group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createGroupTest() throws ApiException {
        Group group = null;
        Group response = api.createGroup(group);
        // TODO: test validations
    }

    /**
     * Delete a service group
     *
     * Delete a service group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteGroupTest() throws ApiException {
        String serviceGroupId = null;
        Deleted response = api.deleteGroup(serviceGroupId);
        // TODO: test validations
    }

    /**
     * Update a service group with a diff
     *
     * Update a service group with a diff
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchGroupTest() throws ApiException {
        String serviceGroupId = null;
        List<PatchInner> patchInner = null;
        Group response = api.patchGroup(serviceGroupId, patchInner);
        // TODO: test validations
    }

    /**
     * Get a service group
     *
     * Get a service group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serviceGroupTest() throws ApiException {
        String serviceGroupId = null;
        Group response = api.serviceGroup(serviceGroupId);
        // TODO: test validations
    }

    /**
     * Update a service group
     *
     * Update a service group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateGroupTest() throws ApiException {
        String serviceGroupId = null;
        Group group = null;
        Group response = api.updateGroup(serviceGroupId, group);
        // TODO: test validations
    }

}
