/*
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Deleted;
import org.openapitools.client.model.FindAllGlobalAuthModules200ResponseInner;
import org.openapitools.client.model.PatchInner;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AuthConfigApi
 */
@Disabled
public class AuthConfigApiTest {

    private final AuthConfigApi api = new AuthConfigApi();

    /**
     * Create one global auth. module config
     *
     * Create one global auth. module config
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createGlobalAuthModuleTest() throws ApiException {
        FindAllGlobalAuthModules200ResponseInner findAllGlobalAuthModules200ResponseInner = null;
        FindAllGlobalAuthModules200ResponseInner response = api.createGlobalAuthModule(findAllGlobalAuthModules200ResponseInner);
        // TODO: test validations
    }

    /**
     * Delete one global auth. module config
     *
     * Delete one global auth. module config
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteGlobalAuthModuleTest() throws ApiException {
        String id = null;
        Deleted response = api.deleteGlobalAuthModule(id);
        // TODO: test validations
    }

    /**
     * Get all global auth. module configs
     *
     * Get all global auth. module configs
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findAllGlobalAuthModulesTest() throws ApiException {
        List<FindAllGlobalAuthModules200ResponseInner> response = api.findAllGlobalAuthModules();
        // TODO: test validations
    }

    /**
     * Get one global auth. module configs
     *
     * Get one global auth. module configs
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findGlobalAuthModuleByIdTest() throws ApiException {
        String id = null;
        FindAllGlobalAuthModules200ResponseInner response = api.findGlobalAuthModuleById(id);
        // TODO: test validations
    }

    /**
     * Update one global auth. module config
     *
     * Update one global auth. module config
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchGlobalAuthModuleTest() throws ApiException {
        String id = null;
        List<PatchInner> patchInner = null;
        FindAllGlobalAuthModules200ResponseInner response = api.patchGlobalAuthModule(id, patchInner);
        // TODO: test validations
    }

    /**
     * Update one global auth. module config
     *
     * Update one global auth. module config
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateGlobalAuthModuleTest() throws ApiException {
        String id = null;
        FindAllGlobalAuthModules200ResponseInner findAllGlobalAuthModules200ResponseInner = null;
        FindAllGlobalAuthModules200ResponseInner response = api.updateGlobalAuthModule(id, findAllGlobalAuthModules200ResponseInner);
        // TODO: test validations
    }

}
