/*
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import org.openapitools.client.model.Canary;
import org.openapitools.client.model.ChaosConfig;
import org.openapitools.client.model.ClientConfig;
import org.openapitools.client.model.CorsSettings;
import org.openapitools.client.model.ExposedApi;
import org.openapitools.client.model.GlobalJwtVerifierAlgoSettings;
import org.openapitools.client.model.Gzip;
import org.openapitools.client.model.HealthCheck;
import org.openapitools.client.model.ImportExportServiceDescriptorsInnerJwtVerifier;
import org.openapitools.client.model.IpFiltering;
import org.openapitools.client.model.RedirectionSettings;
import org.openapitools.client.model.StatsdConfig;
import org.openapitools.client.model.Target;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for ImportExportServiceDescriptorsInner
 */
public class ImportExportServiceDescriptorsInnerTest {
    private final ImportExportServiceDescriptorsInner model = new ImportExportServiceDescriptorsInner();

    /**
     * Model tests for ImportExportServiceDescriptorsInner
     */
    @Test
    public void testImportExportServiceDescriptorsInner() {
        // TODO: test ImportExportServiceDescriptorsInner
    }

    /**
     * Test the property 'canary'
     */
    @Test
    public void canaryTest() {
        // TODO: test canary
    }

    /**
     * Test the property 'additionalHeaders'
     */
    @Test
    public void additionalHeadersTest() {
        // TODO: test additionalHeaders
    }

    /**
     * Test the property 'api'
     */
    @Test
    public void apiTest() {
        // TODO: test api
    }

    /**
     * Test the property 'authConfigRef'
     */
    @Test
    public void authConfigRefTest() {
        // TODO: test authConfigRef
    }

    /**
     * Test the property 'buildMode'
     */
    @Test
    public void buildModeTest() {
        // TODO: test buildMode
    }

    /**
     * Test the property 'chaosConfig'
     */
    @Test
    public void chaosConfigTest() {
        // TODO: test chaosConfig
    }

    /**
     * Test the property 'clientConfig'
     */
    @Test
    public void clientConfigTest() {
        // TODO: test clientConfig
    }

    /**
     * Test the property 'clientValidatorRef'
     */
    @Test
    public void clientValidatorRefTest() {
        // TODO: test clientValidatorRef
    }

    /**
     * Test the property 'cors'
     */
    @Test
    public void corsTest() {
        // TODO: test cors
    }

    /**
     * Test the property 'domain'
     */
    @Test
    public void domainTest() {
        // TODO: test domain
    }

    /**
     * Test the property 'enabled'
     */
    @Test
    public void enabledTest() {
        // TODO: test enabled
    }

    /**
     * Test the property 'enforceSecureCommunication'
     */
    @Test
    public void enforceSecureCommunicationTest() {
        // TODO: test enforceSecureCommunication
    }

    /**
     * Test the property 'env'
     */
    @Test
    public void envTest() {
        // TODO: test env
    }

    /**
     * Test the property 'forceHttps'
     */
    @Test
    public void forceHttpsTest() {
        // TODO: test forceHttps
    }

    /**
     * Test the property 'groups'
     */
    @Test
    public void groupsTest() {
        // TODO: test groups
    }

    /**
     * Test the property 'gzip'
     */
    @Test
    public void gzipTest() {
        // TODO: test gzip
    }

    /**
     * Test the property 'headersVerification'
     */
    @Test
    public void headersVerificationTest() {
        // TODO: test headersVerification
    }

    /**
     * Test the property 'healthCheck'
     */
    @Test
    public void healthCheckTest() {
        // TODO: test healthCheck
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'ipFiltering'
     */
    @Test
    public void ipFilteringTest() {
        // TODO: test ipFiltering
    }

    /**
     * Test the property 'jwtVerifier'
     */
    @Test
    public void jwtVerifierTest() {
        // TODO: test jwtVerifier
    }

    /**
     * Test the property 'localHost'
     */
    @Test
    public void localHostTest() {
        // TODO: test localHost
    }

    /**
     * Test the property 'localScheme'
     */
    @Test
    public void localSchemeTest() {
        // TODO: test localScheme
    }

    /**
     * Test the property 'maintenanceMode'
     */
    @Test
    public void maintenanceModeTest() {
        // TODO: test maintenanceMode
    }

    /**
     * Test the property 'matchingHeaders'
     */
    @Test
    public void matchingHeadersTest() {
        // TODO: test matchingHeaders
    }

    /**
     * Test the property 'matchingRoot'
     */
    @Test
    public void matchingRootTest() {
        // TODO: test matchingRoot
    }

    /**
     * Test the property 'metadata'
     */
    @Test
    public void metadataTest() {
        // TODO: test metadata
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'overrideHost'
     */
    @Test
    public void overrideHostTest() {
        // TODO: test overrideHost
    }

    /**
     * Test the property 'privateApp'
     */
    @Test
    public void privateAppTest() {
        // TODO: test privateApp
    }

    /**
     * Test the property 'privatePatterns'
     */
    @Test
    public void privatePatternsTest() {
        // TODO: test privatePatterns
    }

    /**
     * Test the property 'publicPatterns'
     */
    @Test
    public void publicPatternsTest() {
        // TODO: test publicPatterns
    }

    /**
     * Test the property 'redirectToLocal'
     */
    @Test
    public void redirectToLocalTest() {
        // TODO: test redirectToLocal
    }

    /**
     * Test the property 'redirection'
     */
    @Test
    public void redirectionTest() {
        // TODO: test redirection
    }

    /**
     * Test the property 'root'
     */
    @Test
    public void rootTest() {
        // TODO: test root
    }

    /**
     * Test the property 'secComExcludedPatterns'
     */
    @Test
    public void secComExcludedPatternsTest() {
        // TODO: test secComExcludedPatterns
    }

    /**
     * Test the property 'secComSettings'
     */
    @Test
    public void secComSettingsTest() {
        // TODO: test secComSettings
    }

    /**
     * Test the property 'sendOtoroshiHeadersBack'
     */
    @Test
    public void sendOtoroshiHeadersBackTest() {
        // TODO: test sendOtoroshiHeadersBack
    }

    /**
     * Test the property 'statsdConfig'
     */
    @Test
    public void statsdConfigTest() {
        // TODO: test statsdConfig
    }

    /**
     * Test the property 'subdomain'
     */
    @Test
    public void subdomainTest() {
        // TODO: test subdomain
    }

    /**
     * Test the property 'targets'
     */
    @Test
    public void targetsTest() {
        // TODO: test targets
    }

    /**
     * Test the property 'transformerRef'
     */
    @Test
    public void transformerRefTest() {
        // TODO: test transformerRef
    }

    /**
     * Test the property 'userFacing'
     */
    @Test
    public void userFacingTest() {
        // TODO: test userFacing
    }

    /**
     * Test the property 'xForwardedHeaders'
     */
    @Test
    public void xForwardedHeadersTest() {
        // TODO: test xForwardedHeaders
    }

}
