/*
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Auth0Config;
import org.openapitools.client.model.CleverSettings;
import org.openapitools.client.model.ElasticConfig;
import org.openapitools.client.model.IpFiltering;
import org.openapitools.client.model.MailerSettings;
import org.openapitools.client.model.Webhook;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for GlobalConfig
 */
public class GlobalConfigTest {
    private final GlobalConfig model = new GlobalConfig();

    /**
     * Model tests for GlobalConfig
     */
    @Test
    public void testGlobalConfig() {
        // TODO: test GlobalConfig
    }

    /**
     * Test the property 'alertsEmails'
     */
    @Test
    public void alertsEmailsTest() {
        // TODO: test alertsEmails
    }

    /**
     * Test the property 'alertsWebhooks'
     */
    @Test
    public void alertsWebhooksTest() {
        // TODO: test alertsWebhooks
    }

    /**
     * Test the property 'analyticsWebhooks'
     */
    @Test
    public void analyticsWebhooksTest() {
        // TODO: test analyticsWebhooks
    }

    /**
     * Test the property 'apiReadOnly'
     */
    @Test
    public void apiReadOnlyTest() {
        // TODO: test apiReadOnly
    }

    /**
     * Test the property 'autoLinkToDefaultGroup'
     */
    @Test
    public void autoLinkToDefaultGroupTest() {
        // TODO: test autoLinkToDefaultGroup
    }

    /**
     * Test the property 'backofficeAuth0Config'
     */
    @Test
    public void backofficeAuth0ConfigTest() {
        // TODO: test backofficeAuth0Config
    }

    /**
     * Test the property 'cleverSettings'
     */
    @Test
    public void cleverSettingsTest() {
        // TODO: test cleverSettings
    }

    /**
     * Test the property 'elasticReadsConfig'
     */
    @Test
    public void elasticReadsConfigTest() {
        // TODO: test elasticReadsConfig
    }

    /**
     * Test the property 'elasticWritesConfigs'
     */
    @Test
    public void elasticWritesConfigsTest() {
        // TODO: test elasticWritesConfigs
    }

    /**
     * Test the property 'endlessIpAddresses'
     */
    @Test
    public void endlessIpAddressesTest() {
        // TODO: test endlessIpAddresses
    }

    /**
     * Test the property 'ipFiltering'
     */
    @Test
    public void ipFilteringTest() {
        // TODO: test ipFiltering
    }

    /**
     * Test the property 'limitConcurrentRequests'
     */
    @Test
    public void limitConcurrentRequestsTest() {
        // TODO: test limitConcurrentRequests
    }

    /**
     * Test the property 'lines'
     */
    @Test
    public void linesTest() {
        // TODO: test lines
    }

    /**
     * Test the property 'mailerSettings'
     */
    @Test
    public void mailerSettingsTest() {
        // TODO: test mailerSettings
    }

    /**
     * Test the property 'maxConcurrentRequests'
     */
    @Test
    public void maxConcurrentRequestsTest() {
        // TODO: test maxConcurrentRequests
    }

    /**
     * Test the property 'maxHttp10ResponseSize'
     */
    @Test
    public void maxHttp10ResponseSizeTest() {
        // TODO: test maxHttp10ResponseSize
    }

    /**
     * Test the property 'maxLogsSize'
     */
    @Test
    public void maxLogsSizeTest() {
        // TODO: test maxLogsSize
    }

    /**
     * Test the property 'middleFingers'
     */
    @Test
    public void middleFingersTest() {
        // TODO: test middleFingers
    }

    /**
     * Test the property 'perIpThrottlingQuota'
     */
    @Test
    public void perIpThrottlingQuotaTest() {
        // TODO: test perIpThrottlingQuota
    }

    /**
     * Test the property 'privateAppsAuth0Config'
     */
    @Test
    public void privateAppsAuth0ConfigTest() {
        // TODO: test privateAppsAuth0Config
    }

    /**
     * Test the property 'streamEntityOnly'
     */
    @Test
    public void streamEntityOnlyTest() {
        // TODO: test streamEntityOnly
    }

    /**
     * Test the property 'throttlingQuota'
     */
    @Test
    public void throttlingQuotaTest() {
        // TODO: test throttlingQuota
    }

    /**
     * Test the property 'u2fLoginOnly'
     */
    @Test
    public void u2fLoginOnlyTest() {
        // TODO: test u2fLoginOnly
    }

    /**
     * Test the property 'useCircuitBreakers'
     */
    @Test
    public void useCircuitBreakersTest() {
        // TODO: test useCircuitBreakers
    }

}
