/*
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Settings to access a validation authority server
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:27.562730-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ValidationAuthority {
  public static final String SERIALIZED_NAME_ALWAYS_VALID = "alwaysValid";
  @SerializedName(SERIALIZED_NAME_ALWAYS_VALID)
  private Boolean alwaysValid;

  public static final String SERIALIZED_NAME_BAD_TTL = "badTtl";
  @SerializedName(SERIALIZED_NAME_BAD_TTL)
  private Long badTtl;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_GOOD_TTL = "goodTtl";
  @SerializedName(SERIALIZED_NAME_GOOD_TTL)
  private Long goodTtl;

  public static final String SERIALIZED_NAME_HEADERS = "headers";
  @SerializedName(SERIALIZED_NAME_HEADERS)
  private Map<String, String> headers = new HashMap<>();

  public static final String SERIALIZED_NAME_HOST = "host";
  @SerializedName(SERIALIZED_NAME_HOST)
  private String host;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  private String method;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NO_CACHE = "noCache";
  @SerializedName(SERIALIZED_NAME_NO_CACHE)
  private Boolean noCache;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_TIMEOUT = "timeout";
  @SerializedName(SERIALIZED_NAME_TIMEOUT)
  private Long timeout;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public ValidationAuthority() {
  }

  public ValidationAuthority alwaysValid(Boolean alwaysValid) {
    this.alwaysValid = alwaysValid;
    return this;
  }

  /**
   * Bypass http calls, every certificates are valids
   * @return alwaysValid
   */
  @javax.annotation.Nonnull
  public Boolean getAlwaysValid() {
    return alwaysValid;
  }

  public void setAlwaysValid(Boolean alwaysValid) {
    this.alwaysValid = alwaysValid;
  }


  public ValidationAuthority badTtl(Long badTtl) {
    this.badTtl = badTtl;
    return this;
  }

  /**
   * The TTL for invalid access response caching
   * @return badTtl
   */
  @javax.annotation.Nonnull
  public Long getBadTtl() {
    return badTtl;
  }

  public void setBadTtl(Long badTtl) {
    this.badTtl = badTtl;
  }


  public ValidationAuthority description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the settings
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ValidationAuthority goodTtl(Long goodTtl) {
    this.goodTtl = goodTtl;
    return this;
  }

  /**
   * The TTL for valid access response caching
   * @return goodTtl
   */
  @javax.annotation.Nonnull
  public Long getGoodTtl() {
    return goodTtl;
  }

  public void setGoodTtl(Long goodTtl) {
    this.goodTtl = goodTtl;
  }


  public ValidationAuthority headers(Map<String, String> headers) {
    this.headers = headers;
    return this;
  }

  public ValidationAuthority putHeadersItem(String key, String headersItem) {
    if (this.headers == null) {
      this.headers = new HashMap<>();
    }
    this.headers.put(key, headersItem);
    return this;
  }

  /**
   * HTTP call headers
   * @return headers
   */
  @javax.annotation.Nonnull
  public Map<String, String> getHeaders() {
    return headers;
  }

  public void setHeaders(Map<String, String> headers) {
    this.headers = headers;
  }


  public ValidationAuthority host(String host) {
    this.host = host;
    return this;
  }

  /**
   * The host of the server
   * @return host
   */
  @javax.annotation.Nonnull
  public String getHost() {
    return host;
  }

  public void setHost(String host) {
    this.host = host;
  }


  public ValidationAuthority id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The id of the settings
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ValidationAuthority method(String method) {
    this.method = method;
    return this;
  }

  /**
   * The HTTP method
   * @return method
   */
  @javax.annotation.Nonnull
  public String getMethod() {
    return method;
  }

  public void setMethod(String method) {
    this.method = method;
  }


  public ValidationAuthority name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the settings
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ValidationAuthority noCache(Boolean noCache) {
    this.noCache = noCache;
    return this;
  }

  /**
   * Avoid caching responses
   * @return noCache
   */
  @javax.annotation.Nonnull
  public Boolean getNoCache() {
    return noCache;
  }

  public void setNoCache(Boolean noCache) {
    this.noCache = noCache;
  }


  public ValidationAuthority path(String path) {
    this.path = path;
    return this;
  }

  /**
   * The URL path
   * @return path
   */
  @javax.annotation.Nonnull
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public ValidationAuthority timeout(Long timeout) {
    this.timeout = timeout;
    return this;
  }

  /**
   * The call timeout
   * @return timeout
   */
  @javax.annotation.Nonnull
  public Long getTimeout() {
    return timeout;
  }

  public void setTimeout(Long timeout) {
    this.timeout = timeout;
  }


  public ValidationAuthority url(String url) {
    this.url = url;
    return this;
  }

  /**
   * The URL of the server
   * @return url
   */
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ValidationAuthority validationAuthority = (ValidationAuthority) o;
    return Objects.equals(this.alwaysValid, validationAuthority.alwaysValid) &&
        Objects.equals(this.badTtl, validationAuthority.badTtl) &&
        Objects.equals(this.description, validationAuthority.description) &&
        Objects.equals(this.goodTtl, validationAuthority.goodTtl) &&
        Objects.equals(this.headers, validationAuthority.headers) &&
        Objects.equals(this.host, validationAuthority.host) &&
        Objects.equals(this.id, validationAuthority.id) &&
        Objects.equals(this.method, validationAuthority.method) &&
        Objects.equals(this.name, validationAuthority.name) &&
        Objects.equals(this.noCache, validationAuthority.noCache) &&
        Objects.equals(this.path, validationAuthority.path) &&
        Objects.equals(this.timeout, validationAuthority.timeout) &&
        Objects.equals(this.url, validationAuthority.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alwaysValid, badTtl, description, goodTtl, headers, host, id, method, name, noCache, path, timeout, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ValidationAuthority {\n");
    sb.append("    alwaysValid: ").append(toIndentedString(alwaysValid)).append("\n");
    sb.append("    badTtl: ").append(toIndentedString(badTtl)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    goodTtl: ").append(toIndentedString(goodTtl)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    noCache: ").append(toIndentedString(noCache)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alwaysValid");
    openapiFields.add("badTtl");
    openapiFields.add("description");
    openapiFields.add("goodTtl");
    openapiFields.add("headers");
    openapiFields.add("host");
    openapiFields.add("id");
    openapiFields.add("method");
    openapiFields.add("name");
    openapiFields.add("noCache");
    openapiFields.add("path");
    openapiFields.add("timeout");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("alwaysValid");
    openapiRequiredFields.add("badTtl");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("goodTtl");
    openapiRequiredFields.add("headers");
    openapiRequiredFields.add("host");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("method");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("noCache");
    openapiRequiredFields.add("path");
    openapiRequiredFields.add("timeout");
    openapiRequiredFields.add("url");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ValidationAuthority
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ValidationAuthority.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ValidationAuthority is not found in the empty JSON string", ValidationAuthority.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ValidationAuthority.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ValidationAuthority` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ValidationAuthority.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("method").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ValidationAuthority.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ValidationAuthority' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ValidationAuthority> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ValidationAuthority.class));

       return (TypeAdapter<T>) new TypeAdapter<ValidationAuthority>() {
           @Override
           public void write(JsonWriter out, ValidationAuthority value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ValidationAuthority read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ValidationAuthority given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ValidationAuthority
   * @throws IOException if the JSON string is invalid with respect to ValidationAuthority
   */
  public static ValidationAuthority fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ValidationAuthority.class);
  }

  /**
   * Convert an instance of ValidationAuthority to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

