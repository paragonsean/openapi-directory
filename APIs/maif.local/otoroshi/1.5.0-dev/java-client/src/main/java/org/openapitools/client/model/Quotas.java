/*
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Quotas state for an api key on a service group
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:27.562730-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Quotas {
  public static final String SERIALIZED_NAME_AUTHORIZED_CALLS_PER_DAY = "authorizedCallsPerDay";
  @SerializedName(SERIALIZED_NAME_AUTHORIZED_CALLS_PER_DAY)
  private Long authorizedCallsPerDay;

  public static final String SERIALIZED_NAME_AUTHORIZED_CALLS_PER_MONTH = "authorizedCallsPerMonth";
  @SerializedName(SERIALIZED_NAME_AUTHORIZED_CALLS_PER_MONTH)
  private Long authorizedCallsPerMonth;

  public static final String SERIALIZED_NAME_AUTHORIZED_CALLS_PER_SEC = "authorizedCallsPerSec";
  @SerializedName(SERIALIZED_NAME_AUTHORIZED_CALLS_PER_SEC)
  private Long authorizedCallsPerSec;

  public static final String SERIALIZED_NAME_CURRENT_CALLS_PER_DAY = "currentCallsPerDay";
  @SerializedName(SERIALIZED_NAME_CURRENT_CALLS_PER_DAY)
  private Long currentCallsPerDay;

  public static final String SERIALIZED_NAME_CURRENT_CALLS_PER_MONTH = "currentCallsPerMonth";
  @SerializedName(SERIALIZED_NAME_CURRENT_CALLS_PER_MONTH)
  private Long currentCallsPerMonth;

  public static final String SERIALIZED_NAME_CURRENT_CALLS_PER_SEC = "currentCallsPerSec";
  @SerializedName(SERIALIZED_NAME_CURRENT_CALLS_PER_SEC)
  private Long currentCallsPerSec;

  public static final String SERIALIZED_NAME_REMAINING_CALLS_PER_DAY = "remainingCallsPerDay";
  @SerializedName(SERIALIZED_NAME_REMAINING_CALLS_PER_DAY)
  private Long remainingCallsPerDay;

  public static final String SERIALIZED_NAME_REMAINING_CALLS_PER_MONTH = "remainingCallsPerMonth";
  @SerializedName(SERIALIZED_NAME_REMAINING_CALLS_PER_MONTH)
  private Long remainingCallsPerMonth;

  public static final String SERIALIZED_NAME_REMAINING_CALLS_PER_SEC = "remainingCallsPerSec";
  @SerializedName(SERIALIZED_NAME_REMAINING_CALLS_PER_SEC)
  private Long remainingCallsPerSec;

  public Quotas() {
  }

  public Quotas authorizedCallsPerDay(Long authorizedCallsPerDay) {
    this.authorizedCallsPerDay = authorizedCallsPerDay;
    return this;
  }

  /**
   * The number of authorized calls per day
   * @return authorizedCallsPerDay
   */
  @javax.annotation.Nonnull
  public Long getAuthorizedCallsPerDay() {
    return authorizedCallsPerDay;
  }

  public void setAuthorizedCallsPerDay(Long authorizedCallsPerDay) {
    this.authorizedCallsPerDay = authorizedCallsPerDay;
  }


  public Quotas authorizedCallsPerMonth(Long authorizedCallsPerMonth) {
    this.authorizedCallsPerMonth = authorizedCallsPerMonth;
    return this;
  }

  /**
   * The number of authorized calls per month
   * @return authorizedCallsPerMonth
   */
  @javax.annotation.Nonnull
  public Long getAuthorizedCallsPerMonth() {
    return authorizedCallsPerMonth;
  }

  public void setAuthorizedCallsPerMonth(Long authorizedCallsPerMonth) {
    this.authorizedCallsPerMonth = authorizedCallsPerMonth;
  }


  public Quotas authorizedCallsPerSec(Long authorizedCallsPerSec) {
    this.authorizedCallsPerSec = authorizedCallsPerSec;
    return this;
  }

  /**
   * The number of authorized calls per second
   * @return authorizedCallsPerSec
   */
  @javax.annotation.Nonnull
  public Long getAuthorizedCallsPerSec() {
    return authorizedCallsPerSec;
  }

  public void setAuthorizedCallsPerSec(Long authorizedCallsPerSec) {
    this.authorizedCallsPerSec = authorizedCallsPerSec;
  }


  public Quotas currentCallsPerDay(Long currentCallsPerDay) {
    this.currentCallsPerDay = currentCallsPerDay;
    return this;
  }

  /**
   * The current number of calls per day
   * @return currentCallsPerDay
   */
  @javax.annotation.Nonnull
  public Long getCurrentCallsPerDay() {
    return currentCallsPerDay;
  }

  public void setCurrentCallsPerDay(Long currentCallsPerDay) {
    this.currentCallsPerDay = currentCallsPerDay;
  }


  public Quotas currentCallsPerMonth(Long currentCallsPerMonth) {
    this.currentCallsPerMonth = currentCallsPerMonth;
    return this;
  }

  /**
   * The current number of calls per month
   * @return currentCallsPerMonth
   */
  @javax.annotation.Nonnull
  public Long getCurrentCallsPerMonth() {
    return currentCallsPerMonth;
  }

  public void setCurrentCallsPerMonth(Long currentCallsPerMonth) {
    this.currentCallsPerMonth = currentCallsPerMonth;
  }


  public Quotas currentCallsPerSec(Long currentCallsPerSec) {
    this.currentCallsPerSec = currentCallsPerSec;
    return this;
  }

  /**
   * The current number of calls per second
   * @return currentCallsPerSec
   */
  @javax.annotation.Nonnull
  public Long getCurrentCallsPerSec() {
    return currentCallsPerSec;
  }

  public void setCurrentCallsPerSec(Long currentCallsPerSec) {
    this.currentCallsPerSec = currentCallsPerSec;
  }


  public Quotas remainingCallsPerDay(Long remainingCallsPerDay) {
    this.remainingCallsPerDay = remainingCallsPerDay;
    return this;
  }

  /**
   * The remaining number of calls per day
   * @return remainingCallsPerDay
   */
  @javax.annotation.Nonnull
  public Long getRemainingCallsPerDay() {
    return remainingCallsPerDay;
  }

  public void setRemainingCallsPerDay(Long remainingCallsPerDay) {
    this.remainingCallsPerDay = remainingCallsPerDay;
  }


  public Quotas remainingCallsPerMonth(Long remainingCallsPerMonth) {
    this.remainingCallsPerMonth = remainingCallsPerMonth;
    return this;
  }

  /**
   * The number of authorized calls per month
   * @return remainingCallsPerMonth
   */
  @javax.annotation.Nonnull
  public Long getRemainingCallsPerMonth() {
    return remainingCallsPerMonth;
  }

  public void setRemainingCallsPerMonth(Long remainingCallsPerMonth) {
    this.remainingCallsPerMonth = remainingCallsPerMonth;
  }


  public Quotas remainingCallsPerSec(Long remainingCallsPerSec) {
    this.remainingCallsPerSec = remainingCallsPerSec;
    return this;
  }

  /**
   * The remaining number of calls per second
   * @return remainingCallsPerSec
   */
  @javax.annotation.Nonnull
  public Long getRemainingCallsPerSec() {
    return remainingCallsPerSec;
  }

  public void setRemainingCallsPerSec(Long remainingCallsPerSec) {
    this.remainingCallsPerSec = remainingCallsPerSec;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Quotas quotas = (Quotas) o;
    return Objects.equals(this.authorizedCallsPerDay, quotas.authorizedCallsPerDay) &&
        Objects.equals(this.authorizedCallsPerMonth, quotas.authorizedCallsPerMonth) &&
        Objects.equals(this.authorizedCallsPerSec, quotas.authorizedCallsPerSec) &&
        Objects.equals(this.currentCallsPerDay, quotas.currentCallsPerDay) &&
        Objects.equals(this.currentCallsPerMonth, quotas.currentCallsPerMonth) &&
        Objects.equals(this.currentCallsPerSec, quotas.currentCallsPerSec) &&
        Objects.equals(this.remainingCallsPerDay, quotas.remainingCallsPerDay) &&
        Objects.equals(this.remainingCallsPerMonth, quotas.remainingCallsPerMonth) &&
        Objects.equals(this.remainingCallsPerSec, quotas.remainingCallsPerSec);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authorizedCallsPerDay, authorizedCallsPerMonth, authorizedCallsPerSec, currentCallsPerDay, currentCallsPerMonth, currentCallsPerSec, remainingCallsPerDay, remainingCallsPerMonth, remainingCallsPerSec);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Quotas {\n");
    sb.append("    authorizedCallsPerDay: ").append(toIndentedString(authorizedCallsPerDay)).append("\n");
    sb.append("    authorizedCallsPerMonth: ").append(toIndentedString(authorizedCallsPerMonth)).append("\n");
    sb.append("    authorizedCallsPerSec: ").append(toIndentedString(authorizedCallsPerSec)).append("\n");
    sb.append("    currentCallsPerDay: ").append(toIndentedString(currentCallsPerDay)).append("\n");
    sb.append("    currentCallsPerMonth: ").append(toIndentedString(currentCallsPerMonth)).append("\n");
    sb.append("    currentCallsPerSec: ").append(toIndentedString(currentCallsPerSec)).append("\n");
    sb.append("    remainingCallsPerDay: ").append(toIndentedString(remainingCallsPerDay)).append("\n");
    sb.append("    remainingCallsPerMonth: ").append(toIndentedString(remainingCallsPerMonth)).append("\n");
    sb.append("    remainingCallsPerSec: ").append(toIndentedString(remainingCallsPerSec)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authorizedCallsPerDay");
    openapiFields.add("authorizedCallsPerMonth");
    openapiFields.add("authorizedCallsPerSec");
    openapiFields.add("currentCallsPerDay");
    openapiFields.add("currentCallsPerMonth");
    openapiFields.add("currentCallsPerSec");
    openapiFields.add("remainingCallsPerDay");
    openapiFields.add("remainingCallsPerMonth");
    openapiFields.add("remainingCallsPerSec");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("authorizedCallsPerDay");
    openapiRequiredFields.add("authorizedCallsPerMonth");
    openapiRequiredFields.add("authorizedCallsPerSec");
    openapiRequiredFields.add("currentCallsPerDay");
    openapiRequiredFields.add("currentCallsPerMonth");
    openapiRequiredFields.add("currentCallsPerSec");
    openapiRequiredFields.add("remainingCallsPerDay");
    openapiRequiredFields.add("remainingCallsPerMonth");
    openapiRequiredFields.add("remainingCallsPerSec");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Quotas
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Quotas.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Quotas is not found in the empty JSON string", Quotas.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Quotas.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Quotas` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Quotas.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Quotas.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Quotas' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Quotas> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Quotas.class));

       return (TypeAdapter<T>) new TypeAdapter<Quotas>() {
           @Override
           public void write(JsonWriter out, Quotas value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Quotas read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Quotas given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Quotas
   * @throws IOException if the JSON string is invalid with respect to Quotas
   */
  public static Quotas fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Quotas.class);
  }

  /**
   * Convert an instance of Quotas to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

