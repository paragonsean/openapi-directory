/*
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An Otoroshi Api Key. An Api Key is defined for a group of services to allow usage of the same Api Key for multiple services.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:27.562730-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApiKey {
  public static final String SERIALIZED_NAME_AUTHORIZED_ENTITIES = "authorizedEntities";
  @SerializedName(SERIALIZED_NAME_AUTHORIZED_ENTITIES)
  private List<String> authorizedEntities = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLIENT_ID = "clientId";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  public static final String SERIALIZED_NAME_CLIENT_NAME = "clientName";
  @SerializedName(SERIALIZED_NAME_CLIENT_NAME)
  private String clientName;

  public static final String SERIALIZED_NAME_CLIENT_SECRET = "clientSecret";
  @SerializedName(SERIALIZED_NAME_CLIENT_SECRET)
  private String clientSecret;

  public static final String SERIALIZED_NAME_DAILY_QUOTA = "dailyQuota";
  @SerializedName(SERIALIZED_NAME_DAILY_QUOTA)
  private Long dailyQuota;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Map<String, String> metadata = new HashMap<>();

  public static final String SERIALIZED_NAME_MONTHLY_QUOTA = "monthlyQuota";
  @SerializedName(SERIALIZED_NAME_MONTHLY_QUOTA)
  private Long monthlyQuota;

  public static final String SERIALIZED_NAME_THROTTLING_QUOTA = "throttlingQuota";
  @SerializedName(SERIALIZED_NAME_THROTTLING_QUOTA)
  private Long throttlingQuota;

  public ApiKey() {
  }

  public ApiKey authorizedEntities(List<String> authorizedEntities) {
    this.authorizedEntities = authorizedEntities;
    return this;
  }

  public ApiKey addAuthorizedEntitiesItem(String authorizedEntitiesItem) {
    if (this.authorizedEntities == null) {
      this.authorizedEntities = new ArrayList<>();
    }
    this.authorizedEntities.add(authorizedEntitiesItem);
    return this;
  }

  /**
   * The group/service ids (prefixed by group_ or service_ on which the key is authorized
   * @return authorizedEntities
   */
  @javax.annotation.Nonnull
  public List<String> getAuthorizedEntities() {
    return authorizedEntities;
  }

  public void setAuthorizedEntities(List<String> authorizedEntities) {
    this.authorizedEntities = authorizedEntities;
  }


  public ApiKey clientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * The unique id of the Api Key. Usually 16 random alpha numerical characters, but can be anything
   * @return clientId
   */
  @javax.annotation.Nonnull
  public String getClientId() {
    return clientId;
  }

  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public ApiKey clientName(String clientName) {
    this.clientName = clientName;
    return this;
  }

  /**
   * The name of the api key, for humans ;-)
   * @return clientName
   */
  @javax.annotation.Nonnull
  public String getClientName() {
    return clientName;
  }

  public void setClientName(String clientName) {
    this.clientName = clientName;
  }


  public ApiKey clientSecret(String clientSecret) {
    this.clientSecret = clientSecret;
    return this;
  }

  /**
   * The secret of the Api Key. Usually 64 random alpha numerical characters, but can be anything
   * @return clientSecret
   */
  @javax.annotation.Nonnull
  public String getClientSecret() {
    return clientSecret;
  }

  public void setClientSecret(String clientSecret) {
    this.clientSecret = clientSecret;
  }


  public ApiKey dailyQuota(Long dailyQuota) {
    this.dailyQuota = dailyQuota;
    return this;
  }

  /**
   * Authorized number of calls per day
   * @return dailyQuota
   */
  @javax.annotation.Nullable
  public Long getDailyQuota() {
    return dailyQuota;
  }

  public void setDailyQuota(Long dailyQuota) {
    this.dailyQuota = dailyQuota;
  }


  public ApiKey enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Whether or not the key is enabled. If disabled, resources won&#39;t be available to calls using this key
   * @return enabled
   */
  @javax.annotation.Nonnull
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public ApiKey metadata(Map<String, String> metadata) {
    this.metadata = metadata;
    return this;
  }

  public ApiKey putMetadataItem(String key, String metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

  /**
   * Bunch of metadata for the key
   * @return metadata
   */
  @javax.annotation.Nullable
  public Map<String, String> getMetadata() {
    return metadata;
  }

  public void setMetadata(Map<String, String> metadata) {
    this.metadata = metadata;
  }


  public ApiKey monthlyQuota(Long monthlyQuota) {
    this.monthlyQuota = monthlyQuota;
    return this;
  }

  /**
   * Authorized number of calls per month
   * @return monthlyQuota
   */
  @javax.annotation.Nullable
  public Long getMonthlyQuota() {
    return monthlyQuota;
  }

  public void setMonthlyQuota(Long monthlyQuota) {
    this.monthlyQuota = monthlyQuota;
  }


  public ApiKey throttlingQuota(Long throttlingQuota) {
    this.throttlingQuota = throttlingQuota;
    return this;
  }

  /**
   * Authorized number of calls per second, measured on 10 seconds
   * @return throttlingQuota
   */
  @javax.annotation.Nullable
  public Long getThrottlingQuota() {
    return throttlingQuota;
  }

  public void setThrottlingQuota(Long throttlingQuota) {
    this.throttlingQuota = throttlingQuota;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiKey apiKey = (ApiKey) o;
    return Objects.equals(this.authorizedEntities, apiKey.authorizedEntities) &&
        Objects.equals(this.clientId, apiKey.clientId) &&
        Objects.equals(this.clientName, apiKey.clientName) &&
        Objects.equals(this.clientSecret, apiKey.clientSecret) &&
        Objects.equals(this.dailyQuota, apiKey.dailyQuota) &&
        Objects.equals(this.enabled, apiKey.enabled) &&
        Objects.equals(this.metadata, apiKey.metadata) &&
        Objects.equals(this.monthlyQuota, apiKey.monthlyQuota) &&
        Objects.equals(this.throttlingQuota, apiKey.throttlingQuota);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authorizedEntities, clientId, clientName, clientSecret, dailyQuota, enabled, metadata, monthlyQuota, throttlingQuota);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiKey {\n");
    sb.append("    authorizedEntities: ").append(toIndentedString(authorizedEntities)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    clientName: ").append(toIndentedString(clientName)).append("\n");
    sb.append("    clientSecret: ").append(toIndentedString(clientSecret)).append("\n");
    sb.append("    dailyQuota: ").append(toIndentedString(dailyQuota)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    monthlyQuota: ").append(toIndentedString(monthlyQuota)).append("\n");
    sb.append("    throttlingQuota: ").append(toIndentedString(throttlingQuota)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authorizedEntities");
    openapiFields.add("clientId");
    openapiFields.add("clientName");
    openapiFields.add("clientSecret");
    openapiFields.add("dailyQuota");
    openapiFields.add("enabled");
    openapiFields.add("metadata");
    openapiFields.add("monthlyQuota");
    openapiFields.add("throttlingQuota");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("authorizedEntities");
    openapiRequiredFields.add("clientId");
    openapiRequiredFields.add("clientName");
    openapiRequiredFields.add("clientSecret");
    openapiRequiredFields.add("enabled");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApiKey
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApiKey.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApiKey is not found in the empty JSON string", ApiKey.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApiKey.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApiKey` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ApiKey.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("authorizedEntities") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("authorizedEntities").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorizedEntities` to be an array in the JSON string but got `%s`", jsonObj.get("authorizedEntities").toString()));
      }
      if (!jsonObj.get("clientId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientId").toString()));
      }
      if (!jsonObj.get("clientName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientName").toString()));
      }
      if (!jsonObj.get("clientSecret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientSecret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientSecret").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApiKey.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApiKey' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApiKey> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApiKey.class));

       return (TypeAdapter<T>) new TypeAdapter<ApiKey>() {
           @Override
           public void write(JsonWriter out, ApiKey value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApiKey read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApiKey given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApiKey
   * @throws IOException if the JSON string is invalid with respect to ApiKey
   */
  public static ApiKey fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApiKey.class);
  }

  /**
   * Convert an instance of ApiKey to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

