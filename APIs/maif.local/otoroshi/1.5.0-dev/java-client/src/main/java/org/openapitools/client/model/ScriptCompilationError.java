/*
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The error of the compilation of a Script
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:27.562730-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ScriptCompilationError {
  public static final String SERIALIZED_NAME_COLUMN = "column";
  @SerializedName(SERIALIZED_NAME_COLUMN)
  private String column;

  public static final String SERIALIZED_NAME_FILE = "file";
  @SerializedName(SERIALIZED_NAME_FILE)
  private Map<String, String> _file = new HashMap<>();

  public static final String SERIALIZED_NAME_LINE = "line";
  @SerializedName(SERIALIZED_NAME_LINE)
  private String line;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private Map<String, String> message = new HashMap<>();

  public static final String SERIALIZED_NAME_RAW_MESSAGE = "rawMessage";
  @SerializedName(SERIALIZED_NAME_RAW_MESSAGE)
  private Map<String, String> rawMessage = new HashMap<>();

  public ScriptCompilationError() {
  }

  public ScriptCompilationError column(String column) {
    this.column = column;
    return this;
  }

  /**
   * The column of the error
   * @return column
   */
  @javax.annotation.Nonnull
  public String getColumn() {
    return column;
  }

  public void setColumn(String column) {
    this.column = column;
  }


  public ScriptCompilationError _file(Map<String, String> _file) {
    this._file = _file;
    return this;
  }

  public ScriptCompilationError putFileItem(String key, String _fileItem) {
    if (this._file == null) {
      this._file = new HashMap<>();
    }
    this._file.put(key, _fileItem);
    return this;
  }

  /**
   * The file where the error is located
   * @return _file
   */
  @javax.annotation.Nonnull
  public Map<String, String> getFile() {
    return _file;
  }

  public void setFile(Map<String, String> _file) {
    this._file = _file;
  }


  public ScriptCompilationError line(String line) {
    this.line = line;
    return this;
  }

  /**
   * The line of the error
   * @return line
   */
  @javax.annotation.Nonnull
  public String getLine() {
    return line;
  }

  public void setLine(String line) {
    this.line = line;
  }


  public ScriptCompilationError message(Map<String, String> message) {
    this.message = message;
    return this;
  }

  public ScriptCompilationError putMessageItem(String key, String messageItem) {
    if (this.message == null) {
      this.message = new HashMap<>();
    }
    this.message.put(key, messageItem);
    return this;
  }

  /**
   * The message to display for the error
   * @return message
   */
  @javax.annotation.Nonnull
  public Map<String, String> getMessage() {
    return message;
  }

  public void setMessage(Map<String, String> message) {
    this.message = message;
  }


  public ScriptCompilationError rawMessage(Map<String, String> rawMessage) {
    this.rawMessage = rawMessage;
    return this;
  }

  public ScriptCompilationError putRawMessageItem(String key, String rawMessageItem) {
    if (this.rawMessage == null) {
      this.rawMessage = new HashMap<>();
    }
    this.rawMessage.put(key, rawMessageItem);
    return this;
  }

  /**
   * The raw message from the compiler
   * @return rawMessage
   */
  @javax.annotation.Nonnull
  public Map<String, String> getRawMessage() {
    return rawMessage;
  }

  public void setRawMessage(Map<String, String> rawMessage) {
    this.rawMessage = rawMessage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScriptCompilationError scriptCompilationError = (ScriptCompilationError) o;
    return Objects.equals(this.column, scriptCompilationError.column) &&
        Objects.equals(this._file, scriptCompilationError._file) &&
        Objects.equals(this.line, scriptCompilationError.line) &&
        Objects.equals(this.message, scriptCompilationError.message) &&
        Objects.equals(this.rawMessage, scriptCompilationError.rawMessage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(column, _file, line, message, rawMessage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScriptCompilationError {\n");
    sb.append("    column: ").append(toIndentedString(column)).append("\n");
    sb.append("    _file: ").append(toIndentedString(_file)).append("\n");
    sb.append("    line: ").append(toIndentedString(line)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    rawMessage: ").append(toIndentedString(rawMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("column");
    openapiFields.add("file");
    openapiFields.add("line");
    openapiFields.add("message");
    openapiFields.add("rawMessage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("column");
    openapiRequiredFields.add("file");
    openapiRequiredFields.add("line");
    openapiRequiredFields.add("message");
    openapiRequiredFields.add("rawMessage");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ScriptCompilationError
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ScriptCompilationError.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScriptCompilationError is not found in the empty JSON string", ScriptCompilationError.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ScriptCompilationError.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScriptCompilationError` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ScriptCompilationError.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("column").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `column` to be a primitive type in the JSON string but got `%s`", jsonObj.get("column").toString()));
      }
      if (!jsonObj.get("line").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `line` to be a primitive type in the JSON string but got `%s`", jsonObj.get("line").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScriptCompilationError.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScriptCompilationError' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScriptCompilationError> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScriptCompilationError.class));

       return (TypeAdapter<T>) new TypeAdapter<ScriptCompilationError>() {
           @Override
           public void write(JsonWriter out, ScriptCompilationError value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScriptCompilationError read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ScriptCompilationError given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ScriptCompilationError
   * @throws IOException if the JSON string is invalid with respect to ScriptCompilationError
   */
  public static ScriptCompilationError fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScriptCompilationError.class);
  }

  /**
   * Convert an instance of ScriptCompilationError to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

