/*
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.DataExporterConfigConfig;
import org.openapitools.client.model.Filtering;
import org.openapitools.client.model.Location;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Settings to export Otorshi events
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:27.562730-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataExporterConfig {
  public static final String SERIALIZED_NAME_BUFFER_SIZE = "bufferSize";
  @SerializedName(SERIALIZED_NAME_BUFFER_SIZE)
  private Integer bufferSize;

  public static final String SERIALIZED_NAME_CONFIG = "config";
  @SerializedName(SERIALIZED_NAME_CONFIG)
  private DataExporterConfigConfig config;

  public static final String SERIALIZED_NAME_DESC = "desc";
  @SerializedName(SERIALIZED_NAME_DESC)
  private String desc;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private String enabled;

  public static final String SERIALIZED_NAME_FILTERING = "filtering";
  @SerializedName(SERIALIZED_NAME_FILTERING)
  private Filtering filtering;

  public static final String SERIALIZED_NAME_GROUP_DURATION = "groupDuration";
  @SerializedName(SERIALIZED_NAME_GROUP_DURATION)
  private Long groupDuration;

  public static final String SERIALIZED_NAME_GROUP_SIZE = "groupSize";
  @SerializedName(SERIALIZED_NAME_GROUP_SIZE)
  private Integer groupSize;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_JSON_WORKERS = "jsonWorkers";
  @SerializedName(SERIALIZED_NAME_JSON_WORKERS)
  private Integer jsonWorkers;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private Location location;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Map<String, String> metadata = new HashMap<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROJECTION = "projection";
  @SerializedName(SERIALIZED_NAME_PROJECTION)
  private Map<String, String> projection = new HashMap<>();

  public static final String SERIALIZED_NAME_SEND_WORKERS = "sendWorkers";
  @SerializedName(SERIALIZED_NAME_SEND_WORKERS)
  private Integer sendWorkers;

  /**
   * Type of data exporter
   */
  @JsonAdapter(TypEnum.Adapter.class)
  public enum TypEnum {
    KAFKA("kafka"),
    
    PULSAR("pulsar"),
    
    FILE("file"),
    
    MAILER("mailer"),
    
    ELASTIC("elastic"),
    
    CONSOLE("console"),
    
    CUSTOM("custom");

    private String value;

    TypEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypEnum fromValue(String value) {
      for (TypEnum b : TypEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYP = "typ";
  @SerializedName(SERIALIZED_NAME_TYP)
  private TypEnum typ;

  public DataExporterConfig() {
  }

  public DataExporterConfig bufferSize(Integer bufferSize) {
    this.bufferSize = bufferSize;
    return this;
  }

  /**
   * buffer size
   * @return bufferSize
   */
  @javax.annotation.Nullable
  public Integer getBufferSize() {
    return bufferSize;
  }

  public void setBufferSize(Integer bufferSize) {
    this.bufferSize = bufferSize;
  }


  public DataExporterConfig config(DataExporterConfigConfig config) {
    this.config = config;
    return this;
  }

  /**
   * Get config
   * @return config
   */
  @javax.annotation.Nullable
  public DataExporterConfigConfig getConfig() {
    return config;
  }

  public void setConfig(DataExporterConfigConfig config) {
    this.config = config;
  }


  public DataExporterConfig desc(String desc) {
    this.desc = desc;
    return this;
  }

  /**
   * Description
   * @return desc
   */
  @javax.annotation.Nullable
  public String getDesc() {
    return desc;
  }

  public void setDesc(String desc) {
    this.desc = desc;
  }


  public DataExporterConfig enabled(String enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Boolean
   * @return enabled
   */
  @javax.annotation.Nullable
  public String getEnabled() {
    return enabled;
  }

  public void setEnabled(String enabled) {
    this.enabled = enabled;
  }


  public DataExporterConfig filtering(Filtering filtering) {
    this.filtering = filtering;
    return this;
  }

  /**
   * Get filtering
   * @return filtering
   */
  @javax.annotation.Nullable
  public Filtering getFiltering() {
    return filtering;
  }

  public void setFiltering(Filtering filtering) {
    this.filtering = filtering;
  }


  public DataExporterConfig groupDuration(Long groupDuration) {
    this.groupDuration = groupDuration;
    return this;
  }

  /**
   * duration
   * @return groupDuration
   */
  @javax.annotation.Nullable
  public Long getGroupDuration() {
    return groupDuration;
  }

  public void setGroupDuration(Long groupDuration) {
    this.groupDuration = groupDuration;
  }


  public DataExporterConfig groupSize(Integer groupSize) {
    this.groupSize = groupSize;
    return this;
  }

  /**
   * Group size
   * @return groupSize
   */
  @javax.annotation.Nullable
  public Integer getGroupSize() {
    return groupSize;
  }

  public void setGroupSize(Integer groupSize) {
    this.groupSize = groupSize;
  }


  public DataExporterConfig id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public DataExporterConfig jsonWorkers(Integer jsonWorkers) {
    this.jsonWorkers = jsonWorkers;
    return this;
  }

  /**
   * nb workers
   * @return jsonWorkers
   */
  @javax.annotation.Nullable
  public Integer getJsonWorkers() {
    return jsonWorkers;
  }

  public void setJsonWorkers(Integer jsonWorkers) {
    this.jsonWorkers = jsonWorkers;
  }


  public DataExporterConfig location(Location location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nullable
  public Location getLocation() {
    return location;
  }

  public void setLocation(Location location) {
    this.location = location;
  }


  public DataExporterConfig metadata(Map<String, String> metadata) {
    this.metadata = metadata;
    return this;
  }

  public DataExporterConfig putMetadataItem(String key, String metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

  /**
   * Metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public Map<String, String> getMetadata() {
    return metadata;
  }

  public void setMetadata(Map<String, String> metadata) {
    this.metadata = metadata;
  }


  public DataExporterConfig name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DataExporterConfig projection(Map<String, String> projection) {
    this.projection = projection;
    return this;
  }

  public DataExporterConfig putProjectionItem(String key, String projectionItem) {
    if (this.projection == null) {
      this.projection = new HashMap<>();
    }
    this.projection.put(key, projectionItem);
    return this;
  }

  /**
   * projection
   * @return projection
   */
  @javax.annotation.Nullable
  public Map<String, String> getProjection() {
    return projection;
  }

  public void setProjection(Map<String, String> projection) {
    this.projection = projection;
  }


  public DataExporterConfig sendWorkers(Integer sendWorkers) {
    this.sendWorkers = sendWorkers;
    return this;
  }

  /**
   * send workers
   * @return sendWorkers
   */
  @javax.annotation.Nullable
  public Integer getSendWorkers() {
    return sendWorkers;
  }

  public void setSendWorkers(Integer sendWorkers) {
    this.sendWorkers = sendWorkers;
  }


  public DataExporterConfig typ(TypEnum typ) {
    this.typ = typ;
    return this;
  }

  /**
   * Type of data exporter
   * @return typ
   */
  @javax.annotation.Nullable
  public TypEnum getTyp() {
    return typ;
  }

  public void setTyp(TypEnum typ) {
    this.typ = typ;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataExporterConfig dataExporterConfig = (DataExporterConfig) o;
    return Objects.equals(this.bufferSize, dataExporterConfig.bufferSize) &&
        Objects.equals(this.config, dataExporterConfig.config) &&
        Objects.equals(this.desc, dataExporterConfig.desc) &&
        Objects.equals(this.enabled, dataExporterConfig.enabled) &&
        Objects.equals(this.filtering, dataExporterConfig.filtering) &&
        Objects.equals(this.groupDuration, dataExporterConfig.groupDuration) &&
        Objects.equals(this.groupSize, dataExporterConfig.groupSize) &&
        Objects.equals(this.id, dataExporterConfig.id) &&
        Objects.equals(this.jsonWorkers, dataExporterConfig.jsonWorkers) &&
        Objects.equals(this.location, dataExporterConfig.location) &&
        Objects.equals(this.metadata, dataExporterConfig.metadata) &&
        Objects.equals(this.name, dataExporterConfig.name) &&
        Objects.equals(this.projection, dataExporterConfig.projection) &&
        Objects.equals(this.sendWorkers, dataExporterConfig.sendWorkers) &&
        Objects.equals(this.typ, dataExporterConfig.typ);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bufferSize, config, desc, enabled, filtering, groupDuration, groupSize, id, jsonWorkers, location, metadata, name, projection, sendWorkers, typ);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataExporterConfig {\n");
    sb.append("    bufferSize: ").append(toIndentedString(bufferSize)).append("\n");
    sb.append("    config: ").append(toIndentedString(config)).append("\n");
    sb.append("    desc: ").append(toIndentedString(desc)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    filtering: ").append(toIndentedString(filtering)).append("\n");
    sb.append("    groupDuration: ").append(toIndentedString(groupDuration)).append("\n");
    sb.append("    groupSize: ").append(toIndentedString(groupSize)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    jsonWorkers: ").append(toIndentedString(jsonWorkers)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    projection: ").append(toIndentedString(projection)).append("\n");
    sb.append("    sendWorkers: ").append(toIndentedString(sendWorkers)).append("\n");
    sb.append("    typ: ").append(toIndentedString(typ)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bufferSize");
    openapiFields.add("config");
    openapiFields.add("desc");
    openapiFields.add("enabled");
    openapiFields.add("filtering");
    openapiFields.add("groupDuration");
    openapiFields.add("groupSize");
    openapiFields.add("id");
    openapiFields.add("jsonWorkers");
    openapiFields.add("location");
    openapiFields.add("metadata");
    openapiFields.add("name");
    openapiFields.add("projection");
    openapiFields.add("sendWorkers");
    openapiFields.add("typ");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataExporterConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataExporterConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataExporterConfig is not found in the empty JSON string", DataExporterConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataExporterConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataExporterConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `config`
      if (jsonObj.get("config") != null && !jsonObj.get("config").isJsonNull()) {
        DataExporterConfigConfig.validateJsonElement(jsonObj.get("config"));
      }
      if ((jsonObj.get("desc") != null && !jsonObj.get("desc").isJsonNull()) && !jsonObj.get("desc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `desc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("desc").toString()));
      }
      if ((jsonObj.get("enabled") != null && !jsonObj.get("enabled").isJsonNull()) && !jsonObj.get("enabled").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enabled` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enabled").toString()));
      }
      // validate the optional field `filtering`
      if (jsonObj.get("filtering") != null && !jsonObj.get("filtering").isJsonNull()) {
        Filtering.validateJsonElement(jsonObj.get("filtering"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `location`
      if (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) {
        Location.validateJsonElement(jsonObj.get("location"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("typ") != null && !jsonObj.get("typ").isJsonNull()) && !jsonObj.get("typ").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `typ` to be a primitive type in the JSON string but got `%s`", jsonObj.get("typ").toString()));
      }
      // validate the optional field `typ`
      if (jsonObj.get("typ") != null && !jsonObj.get("typ").isJsonNull()) {
        TypEnum.validateJsonElement(jsonObj.get("typ"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataExporterConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataExporterConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataExporterConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataExporterConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<DataExporterConfig>() {
           @Override
           public void write(JsonWriter out, DataExporterConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataExporterConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataExporterConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataExporterConfig
   * @throws IOException if the JSON string is invalid with respect to DataExporterConfig
   */
  public static DataExporterConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataExporterConfig.class);
  }

  /**
   * Convert an instance of DataExporterConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

