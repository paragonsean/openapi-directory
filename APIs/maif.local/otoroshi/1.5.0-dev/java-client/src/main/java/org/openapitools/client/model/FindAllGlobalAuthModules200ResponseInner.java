/*
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GenericOauth2ModuleConfig;
import org.openapitools.client.model.GenericOauth2ModuleConfigJwtVerifier;
import org.openapitools.client.model.InMemoryAuthModuleConfig;
import org.openapitools.client.model.InMemoryUser;
import org.openapitools.client.model.LdapAuthModuleConfig;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:27.562730-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FindAllGlobalAuthModules200ResponseInner extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(FindAllGlobalAuthModules200ResponseInner.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!FindAllGlobalAuthModules200ResponseInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'FindAllGlobalAuthModules200ResponseInner' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<LdapAuthModuleConfig> adapterLdapAuthModuleConfig = gson.getDelegateAdapter(this, TypeToken.get(LdapAuthModuleConfig.class));
            final TypeAdapter<InMemoryAuthModuleConfig> adapterInMemoryAuthModuleConfig = gson.getDelegateAdapter(this, TypeToken.get(InMemoryAuthModuleConfig.class));
            final TypeAdapter<GenericOauth2ModuleConfig> adapterGenericOauth2ModuleConfig = gson.getDelegateAdapter(this, TypeToken.get(GenericOauth2ModuleConfig.class));

            return (TypeAdapter<T>) new TypeAdapter<FindAllGlobalAuthModules200ResponseInner>() {
                @Override
                public void write(JsonWriter out, FindAllGlobalAuthModules200ResponseInner value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `LdapAuthModuleConfig`
                    if (value.getActualInstance() instanceof LdapAuthModuleConfig) {
                        JsonElement element = adapterLdapAuthModuleConfig.toJsonTree((LdapAuthModuleConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `InMemoryAuthModuleConfig`
                    if (value.getActualInstance() instanceof InMemoryAuthModuleConfig) {
                        JsonElement element = adapterInMemoryAuthModuleConfig.toJsonTree((InMemoryAuthModuleConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `GenericOauth2ModuleConfig`
                    if (value.getActualInstance() instanceof GenericOauth2ModuleConfig) {
                        JsonElement element = adapterGenericOauth2ModuleConfig.toJsonTree((GenericOauth2ModuleConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: GenericOauth2ModuleConfig, InMemoryAuthModuleConfig, LdapAuthModuleConfig");
                }

                @Override
                public FindAllGlobalAuthModules200ResponseInner read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize LdapAuthModuleConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        LdapAuthModuleConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterLdapAuthModuleConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'LdapAuthModuleConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for LdapAuthModuleConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'LdapAuthModuleConfig'", e);
                    }
                    // deserialize InMemoryAuthModuleConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        InMemoryAuthModuleConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterInMemoryAuthModuleConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'InMemoryAuthModuleConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for InMemoryAuthModuleConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'InMemoryAuthModuleConfig'", e);
                    }
                    // deserialize GenericOauth2ModuleConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GenericOauth2ModuleConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterGenericOauth2ModuleConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GenericOauth2ModuleConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GenericOauth2ModuleConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GenericOauth2ModuleConfig'", e);
                    }

                    if (match == 1) {
                        FindAllGlobalAuthModules200ResponseInner ret = new FindAllGlobalAuthModules200ResponseInner();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for FindAllGlobalAuthModules200ResponseInner: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public FindAllGlobalAuthModules200ResponseInner() {
        super("oneOf", Boolean.FALSE);
    }

    public FindAllGlobalAuthModules200ResponseInner(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("LdapAuthModuleConfig", LdapAuthModuleConfig.class);
        schemas.put("InMemoryAuthModuleConfig", InMemoryAuthModuleConfig.class);
        schemas.put("GenericOauth2ModuleConfig", GenericOauth2ModuleConfig.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return FindAllGlobalAuthModules200ResponseInner.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * GenericOauth2ModuleConfig, InMemoryAuthModuleConfig, LdapAuthModuleConfig
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof LdapAuthModuleConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof InMemoryAuthModuleConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GenericOauth2ModuleConfig) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be GenericOauth2ModuleConfig, InMemoryAuthModuleConfig, LdapAuthModuleConfig");
    }

    /**
     * Get the actual instance, which can be the following:
     * GenericOauth2ModuleConfig, InMemoryAuthModuleConfig, LdapAuthModuleConfig
     *
     * @return The actual instance (GenericOauth2ModuleConfig, InMemoryAuthModuleConfig, LdapAuthModuleConfig)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `LdapAuthModuleConfig`. If the actual instance is not `LdapAuthModuleConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `LdapAuthModuleConfig`
     * @throws ClassCastException if the instance is not `LdapAuthModuleConfig`
     */
    public LdapAuthModuleConfig getLdapAuthModuleConfig() throws ClassCastException {
        return (LdapAuthModuleConfig)super.getActualInstance();
    }
    /**
     * Get the actual instance of `InMemoryAuthModuleConfig`. If the actual instance is not `InMemoryAuthModuleConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `InMemoryAuthModuleConfig`
     * @throws ClassCastException if the instance is not `InMemoryAuthModuleConfig`
     */
    public InMemoryAuthModuleConfig getInMemoryAuthModuleConfig() throws ClassCastException {
        return (InMemoryAuthModuleConfig)super.getActualInstance();
    }
    /**
     * Get the actual instance of `GenericOauth2ModuleConfig`. If the actual instance is not `GenericOauth2ModuleConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GenericOauth2ModuleConfig`
     * @throws ClassCastException if the instance is not `GenericOauth2ModuleConfig`
     */
    public GenericOauth2ModuleConfig getGenericOauth2ModuleConfig() throws ClassCastException {
        return (GenericOauth2ModuleConfig)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to FindAllGlobalAuthModules200ResponseInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with LdapAuthModuleConfig
        try {
            LdapAuthModuleConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for LdapAuthModuleConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with InMemoryAuthModuleConfig
        try {
            InMemoryAuthModuleConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for InMemoryAuthModuleConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with GenericOauth2ModuleConfig
        try {
            GenericOauth2ModuleConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for GenericOauth2ModuleConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for FindAllGlobalAuthModules200ResponseInner with oneOf schemas: GenericOauth2ModuleConfig, InMemoryAuthModuleConfig, LdapAuthModuleConfig. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of FindAllGlobalAuthModules200ResponseInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of FindAllGlobalAuthModules200ResponseInner
     * @throws IOException if the JSON string is invalid with respect to FindAllGlobalAuthModules200ResponseInner
     */
    public static FindAllGlobalAuthModules200ResponseInner fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, FindAllGlobalAuthModules200ResponseInner.class);
    }

    /**
     * Convert an instance of FindAllGlobalAuthModules200ResponseInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

