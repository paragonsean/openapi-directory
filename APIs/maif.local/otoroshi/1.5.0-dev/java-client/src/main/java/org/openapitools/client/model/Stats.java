/*
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Live stats for a service or globally
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:27.562730-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Stats {
  public static final String SERIALIZED_NAME_CALLS = "calls";
  @SerializedName(SERIALIZED_NAME_CALLS)
  private Long calls;

  public static final String SERIALIZED_NAME_CONCURRENT_HANDLED_REQUESTS = "concurrentHandledRequests";
  @SerializedName(SERIALIZED_NAME_CONCURRENT_HANDLED_REQUESTS)
  private Long concurrentHandledRequests;

  public static final String SERIALIZED_NAME_DATA_IN = "dataIn";
  @SerializedName(SERIALIZED_NAME_DATA_IN)
  private Long dataIn;

  public static final String SERIALIZED_NAME_DATA_IN_RATE = "dataInRate";
  @SerializedName(SERIALIZED_NAME_DATA_IN_RATE)
  private Double dataInRate;

  public static final String SERIALIZED_NAME_DATA_OUT = "dataOut";
  @SerializedName(SERIALIZED_NAME_DATA_OUT)
  private Long dataOut;

  public static final String SERIALIZED_NAME_DATA_OUT_RATE = "dataOutRate";
  @SerializedName(SERIALIZED_NAME_DATA_OUT_RATE)
  private Double dataOutRate;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Double duration;

  public static final String SERIALIZED_NAME_OVERHEAD = "overhead";
  @SerializedName(SERIALIZED_NAME_OVERHEAD)
  private Double overhead;

  public static final String SERIALIZED_NAME_RATE = "rate";
  @SerializedName(SERIALIZED_NAME_RATE)
  private Double rate;

  public Stats() {
  }

  public Stats calls(Long calls) {
    this.calls = calls;
    return this;
  }

  /**
   * Number of calls on the specified service or globally
   * @return calls
   */
  @javax.annotation.Nonnull
  public Long getCalls() {
    return calls;
  }

  public void setCalls(Long calls) {
    this.calls = calls;
  }


  public Stats concurrentHandledRequests(Long concurrentHandledRequests) {
    this.concurrentHandledRequests = concurrentHandledRequests;
    return this;
  }

  /**
   * The number of concurrent request currently
   * @return concurrentHandledRequests
   */
  @javax.annotation.Nonnull
  public Long getConcurrentHandledRequests() {
    return concurrentHandledRequests;
  }

  public void setConcurrentHandledRequests(Long concurrentHandledRequests) {
    this.concurrentHandledRequests = concurrentHandledRequests;
  }


  public Stats dataIn(Long dataIn) {
    this.dataIn = dataIn;
    return this;
  }

  /**
   * The amount of data sent to the specified service or Otoroshi globally
   * @return dataIn
   */
  @javax.annotation.Nonnull
  public Long getDataIn() {
    return dataIn;
  }

  public void setDataIn(Long dataIn) {
    this.dataIn = dataIn;
  }


  public Stats dataInRate(Double dataInRate) {
    this.dataInRate = dataInRate;
    return this;
  }

  /**
   * The rate of data sent to the specified service or Otoroshi globally
   * @return dataInRate
   */
  @javax.annotation.Nonnull
  public Double getDataInRate() {
    return dataInRate;
  }

  public void setDataInRate(Double dataInRate) {
    this.dataInRate = dataInRate;
  }


  public Stats dataOut(Long dataOut) {
    this.dataOut = dataOut;
    return this;
  }

  /**
   * The amount of data sent from the specified service or Otoroshi globally
   * @return dataOut
   */
  @javax.annotation.Nonnull
  public Long getDataOut() {
    return dataOut;
  }

  public void setDataOut(Long dataOut) {
    this.dataOut = dataOut;
  }


  public Stats dataOutRate(Double dataOutRate) {
    this.dataOutRate = dataOutRate;
    return this;
  }

  /**
   * The rate of data sent from the specified service or Otoroshi globally
   * @return dataOutRate
   */
  @javax.annotation.Nonnull
  public Double getDataOutRate() {
    return dataOutRate;
  }

  public void setDataOutRate(Double dataOutRate) {
    this.dataOutRate = dataOutRate;
  }


  public Stats duration(Double duration) {
    this.duration = duration;
    return this;
  }

  /**
   * The average duration for a call
   * @return duration
   */
  @javax.annotation.Nonnull
  public Double getDuration() {
    return duration;
  }

  public void setDuration(Double duration) {
    this.duration = duration;
  }


  public Stats overhead(Double overhead) {
    this.overhead = overhead;
    return this;
  }

  /**
   * The average overhead time induced by Otoroshi for each call
   * @return overhead
   */
  @javax.annotation.Nonnull
  public Double getOverhead() {
    return overhead;
  }

  public void setOverhead(Double overhead) {
    this.overhead = overhead;
  }


  public Stats rate(Double rate) {
    this.rate = rate;
    return this;
  }

  /**
   * The rate of data sent from and to the specified service or Otoroshi globally
   * @return rate
   */
  @javax.annotation.Nonnull
  public Double getRate() {
    return rate;
  }

  public void setRate(Double rate) {
    this.rate = rate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Stats stats = (Stats) o;
    return Objects.equals(this.calls, stats.calls) &&
        Objects.equals(this.concurrentHandledRequests, stats.concurrentHandledRequests) &&
        Objects.equals(this.dataIn, stats.dataIn) &&
        Objects.equals(this.dataInRate, stats.dataInRate) &&
        Objects.equals(this.dataOut, stats.dataOut) &&
        Objects.equals(this.dataOutRate, stats.dataOutRate) &&
        Objects.equals(this.duration, stats.duration) &&
        Objects.equals(this.overhead, stats.overhead) &&
        Objects.equals(this.rate, stats.rate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(calls, concurrentHandledRequests, dataIn, dataInRate, dataOut, dataOutRate, duration, overhead, rate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Stats {\n");
    sb.append("    calls: ").append(toIndentedString(calls)).append("\n");
    sb.append("    concurrentHandledRequests: ").append(toIndentedString(concurrentHandledRequests)).append("\n");
    sb.append("    dataIn: ").append(toIndentedString(dataIn)).append("\n");
    sb.append("    dataInRate: ").append(toIndentedString(dataInRate)).append("\n");
    sb.append("    dataOut: ").append(toIndentedString(dataOut)).append("\n");
    sb.append("    dataOutRate: ").append(toIndentedString(dataOutRate)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    overhead: ").append(toIndentedString(overhead)).append("\n");
    sb.append("    rate: ").append(toIndentedString(rate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("calls");
    openapiFields.add("concurrentHandledRequests");
    openapiFields.add("dataIn");
    openapiFields.add("dataInRate");
    openapiFields.add("dataOut");
    openapiFields.add("dataOutRate");
    openapiFields.add("duration");
    openapiFields.add("overhead");
    openapiFields.add("rate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("calls");
    openapiRequiredFields.add("concurrentHandledRequests");
    openapiRequiredFields.add("dataIn");
    openapiRequiredFields.add("dataInRate");
    openapiRequiredFields.add("dataOut");
    openapiRequiredFields.add("dataOutRate");
    openapiRequiredFields.add("duration");
    openapiRequiredFields.add("overhead");
    openapiRequiredFields.add("rate");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Stats
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Stats.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Stats is not found in the empty JSON string", Stats.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Stats.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Stats` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Stats.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Stats.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Stats' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Stats> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Stats.class));

       return (TypeAdapter<T>) new TypeAdapter<Stats>() {
           @Override
           public void write(JsonWriter out, Stats value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Stats read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Stats given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Stats
   * @throws IOException if the JSON string is invalid with respect to Stats
   */
  public static Stats fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Stats.class);
  }

  /**
   * Convert an instance of Stats to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

