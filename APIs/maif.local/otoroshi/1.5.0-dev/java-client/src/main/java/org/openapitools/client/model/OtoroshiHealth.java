/*
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The structure that represent current Otoroshi health
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:27.562730-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OtoroshiHealth {
  /**
   * Gets or Sets datastore
   */
  @JsonAdapter(DatastoreEnum.Adapter.class)
  public enum DatastoreEnum {
    HEALTHY("healthy"),
    
    UNHEALTHY("unhealthy"),
    
    UNREACHABLE("unreachable");

    private String value;

    DatastoreEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DatastoreEnum fromValue(String value) {
      for (DatastoreEnum b : DatastoreEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DatastoreEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DatastoreEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DatastoreEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DatastoreEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DatastoreEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DATASTORE = "datastore";
  @SerializedName(SERIALIZED_NAME_DATASTORE)
  private DatastoreEnum datastore;

  /**
   * Gets or Sets otoroshi
   */
  @JsonAdapter(OtoroshiEnum.Adapter.class)
  public enum OtoroshiEnum {
    HEALTHY("healthy"),
    
    UNHEALTHY("unhealthy"),
    
    DOWN("down");

    private String value;

    OtoroshiEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OtoroshiEnum fromValue(String value) {
      for (OtoroshiEnum b : OtoroshiEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OtoroshiEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OtoroshiEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OtoroshiEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OtoroshiEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OtoroshiEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OTOROSHI = "otoroshi";
  @SerializedName(SERIALIZED_NAME_OTOROSHI)
  private OtoroshiEnum otoroshi;

  public OtoroshiHealth() {
  }

  public OtoroshiHealth datastore(DatastoreEnum datastore) {
    this.datastore = datastore;
    return this;
  }

  /**
   * Get datastore
   * @return datastore
   */
  @javax.annotation.Nonnull
  public DatastoreEnum getDatastore() {
    return datastore;
  }

  public void setDatastore(DatastoreEnum datastore) {
    this.datastore = datastore;
  }


  public OtoroshiHealth otoroshi(OtoroshiEnum otoroshi) {
    this.otoroshi = otoroshi;
    return this;
  }

  /**
   * Get otoroshi
   * @return otoroshi
   */
  @javax.annotation.Nonnull
  public OtoroshiEnum getOtoroshi() {
    return otoroshi;
  }

  public void setOtoroshi(OtoroshiEnum otoroshi) {
    this.otoroshi = otoroshi;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OtoroshiHealth otoroshiHealth = (OtoroshiHealth) o;
    return Objects.equals(this.datastore, otoroshiHealth.datastore) &&
        Objects.equals(this.otoroshi, otoroshiHealth.otoroshi);
  }

  @Override
  public int hashCode() {
    return Objects.hash(datastore, otoroshi);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OtoroshiHealth {\n");
    sb.append("    datastore: ").append(toIndentedString(datastore)).append("\n");
    sb.append("    otoroshi: ").append(toIndentedString(otoroshi)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("datastore");
    openapiFields.add("otoroshi");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("datastore");
    openapiRequiredFields.add("otoroshi");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OtoroshiHealth
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OtoroshiHealth.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OtoroshiHealth is not found in the empty JSON string", OtoroshiHealth.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OtoroshiHealth.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OtoroshiHealth` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OtoroshiHealth.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("datastore").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `datastore` to be a primitive type in the JSON string but got `%s`", jsonObj.get("datastore").toString()));
      }
      // validate the required field `datastore`
      DatastoreEnum.validateJsonElement(jsonObj.get("datastore"));
      if (!jsonObj.get("otoroshi").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `otoroshi` to be a primitive type in the JSON string but got `%s`", jsonObj.get("otoroshi").toString()));
      }
      // validate the required field `otoroshi`
      OtoroshiEnum.validateJsonElement(jsonObj.get("otoroshi"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OtoroshiHealth.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OtoroshiHealth' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OtoroshiHealth> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OtoroshiHealth.class));

       return (TypeAdapter<T>) new TypeAdapter<OtoroshiHealth>() {
           @Override
           public void write(JsonWriter out, OtoroshiHealth value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OtoroshiHealth read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OtoroshiHealth given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OtoroshiHealth
   * @throws IOException if the JSON string is invalid with respect to OtoroshiHealth
   */
  public static OtoroshiHealth fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OtoroshiHealth.class);
  }

  /**
   * Convert an instance of OtoroshiHealth to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

