/*
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Deleted;
import org.openapitools.client.model.PatchInner;
import org.openapitools.client.model.Script;
import org.openapitools.client.model.ScriptCompilationResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ScriptsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ScriptsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ScriptsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for compileScript
     * @param script  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call compileScriptCall(Script script, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = script;

        // create path and map variables
        String localVarPath = "/api/scripts/_compile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "otoroshi_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call compileScriptValidateBeforeCall(Script script, final ApiCallback _callback) throws ApiException {
        return compileScriptCall(script, _callback);

    }

    /**
     * Compile a script
     * Compile a script
     * @param script  (optional)
     * @return ScriptCompilationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ScriptCompilationResult compileScript(Script script) throws ApiException {
        ApiResponse<ScriptCompilationResult> localVarResp = compileScriptWithHttpInfo(script);
        return localVarResp.getData();
    }

    /**
     * Compile a script
     * Compile a script
     * @param script  (optional)
     * @return ApiResponse&lt;ScriptCompilationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScriptCompilationResult> compileScriptWithHttpInfo(Script script) throws ApiException {
        okhttp3.Call localVarCall = compileScriptValidateBeforeCall(script, null);
        Type localVarReturnType = new TypeToken<ScriptCompilationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Compile a script (asynchronously)
     * Compile a script
     * @param script  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call compileScriptAsync(Script script, final ApiCallback<ScriptCompilationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = compileScriptValidateBeforeCall(script, _callback);
        Type localVarReturnType = new TypeToken<ScriptCompilationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createScript
     * @param script  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createScriptCall(Script script, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = script;

        // create path and map variables
        String localVarPath = "/api/scripts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "otoroshi_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createScriptValidateBeforeCall(Script script, final ApiCallback _callback) throws ApiException {
        return createScriptCall(script, _callback);

    }

    /**
     * Create a new script
     * Create a new script
     * @param script  (optional)
     * @return Script
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public Script createScript(Script script) throws ApiException {
        ApiResponse<Script> localVarResp = createScriptWithHttpInfo(script);
        return localVarResp.getData();
    }

    /**
     * Create a new script
     * Create a new script
     * @param script  (optional)
     * @return ApiResponse&lt;Script&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Script> createScriptWithHttpInfo(Script script) throws ApiException {
        okhttp3.Call localVarCall = createScriptValidateBeforeCall(script, null);
        Type localVarReturnType = new TypeToken<Script>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new script (asynchronously)
     * Create a new script
     * @param script  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createScriptAsync(Script script, final ApiCallback<Script> _callback) throws ApiException {

        okhttp3.Call localVarCall = createScriptValidateBeforeCall(script, _callback);
        Type localVarReturnType = new TypeToken<Script>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteScript
     * @param scriptId The script id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteScriptCall(String scriptId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/scripts/{scriptId}"
            .replace("{" + "scriptId" + "}", localVarApiClient.escapeString(scriptId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "otoroshi_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteScriptValidateBeforeCall(String scriptId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scriptId' is set
        if (scriptId == null) {
            throw new ApiException("Missing the required parameter 'scriptId' when calling deleteScript(Async)");
        }

        return deleteScriptCall(scriptId, _callback);

    }

    /**
     * Delete a script
     * Delete a script
     * @param scriptId The script id (required)
     * @return Deleted
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public Deleted deleteScript(String scriptId) throws ApiException {
        ApiResponse<Deleted> localVarResp = deleteScriptWithHttpInfo(scriptId);
        return localVarResp.getData();
    }

    /**
     * Delete a script
     * Delete a script
     * @param scriptId The script id (required)
     * @return ApiResponse&lt;Deleted&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Deleted> deleteScriptWithHttpInfo(String scriptId) throws ApiException {
        okhttp3.Call localVarCall = deleteScriptValidateBeforeCall(scriptId, null);
        Type localVarReturnType = new TypeToken<Deleted>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a script (asynchronously)
     * Delete a script
     * @param scriptId The script id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteScriptAsync(String scriptId, final ApiCallback<Deleted> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteScriptValidateBeforeCall(scriptId, _callback);
        Type localVarReturnType = new TypeToken<Deleted>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findAllScripts
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findAllScriptsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/scripts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "otoroshi_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findAllScriptsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return findAllScriptsCall(_callback);

    }

    /**
     * Get all scripts
     * Get all scripts
     * @return List&lt;Script&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public List<Script> findAllScripts() throws ApiException {
        ApiResponse<List<Script>> localVarResp = findAllScriptsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get all scripts
     * Get all scripts
     * @return ApiResponse&lt;List&lt;Script&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Script>> findAllScriptsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = findAllScriptsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Script>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all scripts (asynchronously)
     * Get all scripts
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findAllScriptsAsync(final ApiCallback<List<Script>> _callback) throws ApiException {

        okhttp3.Call localVarCall = findAllScriptsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Script>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findScriptById
     * @param scriptId The script id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findScriptByIdCall(String scriptId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/scripts/{scriptId}"
            .replace("{" + "scriptId" + "}", localVarApiClient.escapeString(scriptId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "otoroshi_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findScriptByIdValidateBeforeCall(String scriptId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scriptId' is set
        if (scriptId == null) {
            throw new ApiException("Missing the required parameter 'scriptId' when calling findScriptById(Async)");
        }

        return findScriptByIdCall(scriptId, _callback);

    }

    /**
     * Get a script
     * Get a script
     * @param scriptId The script id (required)
     * @return Script
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public Script findScriptById(String scriptId) throws ApiException {
        ApiResponse<Script> localVarResp = findScriptByIdWithHttpInfo(scriptId);
        return localVarResp.getData();
    }

    /**
     * Get a script
     * Get a script
     * @param scriptId The script id (required)
     * @return ApiResponse&lt;Script&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Script> findScriptByIdWithHttpInfo(String scriptId) throws ApiException {
        okhttp3.Call localVarCall = findScriptByIdValidateBeforeCall(scriptId, null);
        Type localVarReturnType = new TypeToken<Script>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a script (asynchronously)
     * Get a script
     * @param scriptId The script id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findScriptByIdAsync(String scriptId, final ApiCallback<Script> _callback) throws ApiException {

        okhttp3.Call localVarCall = findScriptByIdValidateBeforeCall(scriptId, _callback);
        Type localVarReturnType = new TypeToken<Script>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchScript
     * @param scriptId The script id (required)
     * @param patchInner  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchScriptCall(String scriptId, List<PatchInner> patchInner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchInner;

        // create path and map variables
        String localVarPath = "/api/scripts/{scriptId}"
            .replace("{" + "scriptId" + "}", localVarApiClient.escapeString(scriptId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "otoroshi_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchScriptValidateBeforeCall(String scriptId, List<PatchInner> patchInner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scriptId' is set
        if (scriptId == null) {
            throw new ApiException("Missing the required parameter 'scriptId' when calling patchScript(Async)");
        }

        return patchScriptCall(scriptId, patchInner, _callback);

    }

    /**
     * Update a script with a diff
     * Update a script with a diff
     * @param scriptId The script id (required)
     * @param patchInner  (optional)
     * @return Script
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public Script patchScript(String scriptId, List<PatchInner> patchInner) throws ApiException {
        ApiResponse<Script> localVarResp = patchScriptWithHttpInfo(scriptId, patchInner);
        return localVarResp.getData();
    }

    /**
     * Update a script with a diff
     * Update a script with a diff
     * @param scriptId The script id (required)
     * @param patchInner  (optional)
     * @return ApiResponse&lt;Script&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Script> patchScriptWithHttpInfo(String scriptId, List<PatchInner> patchInner) throws ApiException {
        okhttp3.Call localVarCall = patchScriptValidateBeforeCall(scriptId, patchInner, null);
        Type localVarReturnType = new TypeToken<Script>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a script with a diff (asynchronously)
     * Update a script with a diff
     * @param scriptId The script id (required)
     * @param patchInner  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchScriptAsync(String scriptId, List<PatchInner> patchInner, final ApiCallback<Script> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchScriptValidateBeforeCall(scriptId, patchInner, _callback);
        Type localVarReturnType = new TypeToken<Script>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateScript
     * @param scriptId The script id (required)
     * @param script  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateScriptCall(String scriptId, Script script, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = script;

        // create path and map variables
        String localVarPath = "/api/scripts/{scriptId}"
            .replace("{" + "scriptId" + "}", localVarApiClient.escapeString(scriptId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "otoroshi_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateScriptValidateBeforeCall(String scriptId, Script script, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scriptId' is set
        if (scriptId == null) {
            throw new ApiException("Missing the required parameter 'scriptId' when calling updateScript(Async)");
        }

        return updateScriptCall(scriptId, script, _callback);

    }

    /**
     * Update a script
     * Update a script
     * @param scriptId The script id (required)
     * @param script  (optional)
     * @return Script
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public Script updateScript(String scriptId, Script script) throws ApiException {
        ApiResponse<Script> localVarResp = updateScriptWithHttpInfo(scriptId, script);
        return localVarResp.getData();
    }

    /**
     * Update a script
     * Update a script
     * @param scriptId The script id (required)
     * @param script  (optional)
     * @return ApiResponse&lt;Script&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Script> updateScriptWithHttpInfo(String scriptId, Script script) throws ApiException {
        okhttp3.Call localVarCall = updateScriptValidateBeforeCall(scriptId, script, null);
        Type localVarReturnType = new TypeToken<Script>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a script (asynchronously)
     * Update a script
     * @param scriptId The script id (required)
     * @param script  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateScriptAsync(String scriptId, Script script, final ApiCallback<Script> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateScriptValidateBeforeCall(scriptId, script, _callback);
        Type localVarReturnType = new TypeToken<Script>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
