/*
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The configuration for kafka access
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:27.562730-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class KafkaConfig {
  public static final String SERIALIZED_NAME_KEY_PASS = "keyPass";
  @SerializedName(SERIALIZED_NAME_KEY_PASS)
  private String keyPass;

  public static final String SERIALIZED_NAME_KEY_STORE = "keyStore";
  @SerializedName(SERIALIZED_NAME_KEY_STORE)
  private String keyStore;

  public static final String SERIALIZED_NAME_SERVERS = "servers";
  @SerializedName(SERIALIZED_NAME_SERVERS)
  private List<String> servers = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOPIC = "topic";
  @SerializedName(SERIALIZED_NAME_TOPIC)
  private String topic;

  public static final String SERIALIZED_NAME_TRUSTORE = "trustore";
  @SerializedName(SERIALIZED_NAME_TRUSTORE)
  private String trustore;

  public KafkaConfig() {
  }

  public KafkaConfig keyPass(String keyPass) {
    this.keyPass = keyPass;
    return this;
  }

  /**
   * Optional keypass
   * @return keyPass
   */
  @javax.annotation.Nullable
  public String getKeyPass() {
    return keyPass;
  }

  public void setKeyPass(String keyPass) {
    this.keyPass = keyPass;
  }


  public KafkaConfig keyStore(String keyStore) {
    this.keyStore = keyStore;
    return this;
  }

  /**
   * Optional path to keystore
   * @return keyStore
   */
  @javax.annotation.Nullable
  public String getKeyStore() {
    return keyStore;
  }

  public void setKeyStore(String keyStore) {
    this.keyStore = keyStore;
  }


  public KafkaConfig servers(List<String> servers) {
    this.servers = servers;
    return this;
  }

  public KafkaConfig addServersItem(String serversItem) {
    if (this.servers == null) {
      this.servers = new ArrayList<>();
    }
    this.servers.add(serversItem);
    return this;
  }

  /**
   * URLs of the kafka servers
   * @return servers
   */
  @javax.annotation.Nonnull
  public List<String> getServers() {
    return servers;
  }

  public void setServers(List<String> servers) {
    this.servers = servers;
  }


  public KafkaConfig topic(String topic) {
    this.topic = topic;
    return this;
  }

  /**
   * Optional kafka topic (otoroshi-events by default)
   * @return topic
   */
  @javax.annotation.Nullable
  public String getTopic() {
    return topic;
  }

  public void setTopic(String topic) {
    this.topic = topic;
  }


  public KafkaConfig trustore(String trustore) {
    this.trustore = trustore;
    return this;
  }

  /**
   * Optional path to trustore
   * @return trustore
   */
  @javax.annotation.Nullable
  public String getTrustore() {
    return trustore;
  }

  public void setTrustore(String trustore) {
    this.trustore = trustore;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KafkaConfig kafkaConfig = (KafkaConfig) o;
    return Objects.equals(this.keyPass, kafkaConfig.keyPass) &&
        Objects.equals(this.keyStore, kafkaConfig.keyStore) &&
        Objects.equals(this.servers, kafkaConfig.servers) &&
        Objects.equals(this.topic, kafkaConfig.topic) &&
        Objects.equals(this.trustore, kafkaConfig.trustore);
  }

  @Override
  public int hashCode() {
    return Objects.hash(keyPass, keyStore, servers, topic, trustore);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KafkaConfig {\n");
    sb.append("    keyPass: ").append(toIndentedString(keyPass)).append("\n");
    sb.append("    keyStore: ").append(toIndentedString(keyStore)).append("\n");
    sb.append("    servers: ").append(toIndentedString(servers)).append("\n");
    sb.append("    topic: ").append(toIndentedString(topic)).append("\n");
    sb.append("    trustore: ").append(toIndentedString(trustore)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("keyPass");
    openapiFields.add("keyStore");
    openapiFields.add("servers");
    openapiFields.add("topic");
    openapiFields.add("trustore");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("servers");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to KafkaConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!KafkaConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in KafkaConfig is not found in the empty JSON string", KafkaConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!KafkaConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `KafkaConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : KafkaConfig.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("keyPass") != null && !jsonObj.get("keyPass").isJsonNull()) && !jsonObj.get("keyPass").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyPass` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyPass").toString()));
      }
      if ((jsonObj.get("keyStore") != null && !jsonObj.get("keyStore").isJsonNull()) && !jsonObj.get("keyStore").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyStore` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyStore").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("servers") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("servers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `servers` to be an array in the JSON string but got `%s`", jsonObj.get("servers").toString()));
      }
      if ((jsonObj.get("topic") != null && !jsonObj.get("topic").isJsonNull()) && !jsonObj.get("topic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `topic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("topic").toString()));
      }
      if ((jsonObj.get("trustore") != null && !jsonObj.get("trustore").isJsonNull()) && !jsonObj.get("trustore").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trustore` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trustore").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!KafkaConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'KafkaConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<KafkaConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(KafkaConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<KafkaConfig>() {
           @Override
           public void write(JsonWriter out, KafkaConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public KafkaConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of KafkaConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of KafkaConfig
   * @throws IOException if the JSON string is invalid with respect to KafkaConfig
   */
  public static KafkaConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, KafkaConfig.class);
  }

  /**
   * Convert an instance of KafkaConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

