/*
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Error templates for a service descriptor
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:27.562730-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ErrorTemplate {
  public static final String SERIALIZED_NAME_MESSAGES = "messages";
  @SerializedName(SERIALIZED_NAME_MESSAGES)
  private Map<String, String> messages = new HashMap<>();

  public static final String SERIALIZED_NAME_SERVICE_ID = "serviceId";
  @SerializedName(SERIALIZED_NAME_SERVICE_ID)
  private String serviceId;

  public static final String SERIALIZED_NAME_TEMPLATE40X = "template40x";
  @SerializedName(SERIALIZED_NAME_TEMPLATE40X)
  private String template40x;

  public static final String SERIALIZED_NAME_TEMPLATE50X = "template50x";
  @SerializedName(SERIALIZED_NAME_TEMPLATE50X)
  private String template50x;

  public static final String SERIALIZED_NAME_TEMPLATE_BUILD = "templateBuild";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_BUILD)
  private String templateBuild;

  public static final String SERIALIZED_NAME_TEMPLATE_MAINTENANCE = "templateMaintenance";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_MAINTENANCE)
  private String templateMaintenance;

  public ErrorTemplate() {
  }

  public ErrorTemplate messages(Map<String, String> messages) {
    this.messages = messages;
    return this;
  }

  public ErrorTemplate putMessagesItem(String key, String messagesItem) {
    if (this.messages == null) {
      this.messages = new HashMap<>();
    }
    this.messages.put(key, messagesItem);
    return this;
  }

  /**
   * Map for custom messages
   * @return messages
   */
  @javax.annotation.Nonnull
  public Map<String, String> getMessages() {
    return messages;
  }

  public void setMessages(Map<String, String> messages) {
    this.messages = messages;
  }


  public ErrorTemplate serviceId(String serviceId) {
    this.serviceId = serviceId;
    return this;
  }

  /**
   * The Id of the service for which the error template is enabled
   * @return serviceId
   */
  @javax.annotation.Nonnull
  public String getServiceId() {
    return serviceId;
  }

  public void setServiceId(String serviceId) {
    this.serviceId = serviceId;
  }


  public ErrorTemplate template40x(String template40x) {
    this.template40x = template40x;
    return this;
  }

  /**
   * The html template for 40x errors
   * @return template40x
   */
  @javax.annotation.Nonnull
  public String getTemplate40x() {
    return template40x;
  }

  public void setTemplate40x(String template40x) {
    this.template40x = template40x;
  }


  public ErrorTemplate template50x(String template50x) {
    this.template50x = template50x;
    return this;
  }

  /**
   * The html template for 50x errors
   * @return template50x
   */
  @javax.annotation.Nonnull
  public String getTemplate50x() {
    return template50x;
  }

  public void setTemplate50x(String template50x) {
    this.template50x = template50x;
  }


  public ErrorTemplate templateBuild(String templateBuild) {
    this.templateBuild = templateBuild;
    return this;
  }

  /**
   * The html template for build page
   * @return templateBuild
   */
  @javax.annotation.Nonnull
  public String getTemplateBuild() {
    return templateBuild;
  }

  public void setTemplateBuild(String templateBuild) {
    this.templateBuild = templateBuild;
  }


  public ErrorTemplate templateMaintenance(String templateMaintenance) {
    this.templateMaintenance = templateMaintenance;
    return this;
  }

  /**
   * The html template for maintenance page
   * @return templateMaintenance
   */
  @javax.annotation.Nonnull
  public String getTemplateMaintenance() {
    return templateMaintenance;
  }

  public void setTemplateMaintenance(String templateMaintenance) {
    this.templateMaintenance = templateMaintenance;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ErrorTemplate errorTemplate = (ErrorTemplate) o;
    return Objects.equals(this.messages, errorTemplate.messages) &&
        Objects.equals(this.serviceId, errorTemplate.serviceId) &&
        Objects.equals(this.template40x, errorTemplate.template40x) &&
        Objects.equals(this.template50x, errorTemplate.template50x) &&
        Objects.equals(this.templateBuild, errorTemplate.templateBuild) &&
        Objects.equals(this.templateMaintenance, errorTemplate.templateMaintenance);
  }

  @Override
  public int hashCode() {
    return Objects.hash(messages, serviceId, template40x, template50x, templateBuild, templateMaintenance);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ErrorTemplate {\n");
    sb.append("    messages: ").append(toIndentedString(messages)).append("\n");
    sb.append("    serviceId: ").append(toIndentedString(serviceId)).append("\n");
    sb.append("    template40x: ").append(toIndentedString(template40x)).append("\n");
    sb.append("    template50x: ").append(toIndentedString(template50x)).append("\n");
    sb.append("    templateBuild: ").append(toIndentedString(templateBuild)).append("\n");
    sb.append("    templateMaintenance: ").append(toIndentedString(templateMaintenance)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("messages");
    openapiFields.add("serviceId");
    openapiFields.add("template40x");
    openapiFields.add("template50x");
    openapiFields.add("templateBuild");
    openapiFields.add("templateMaintenance");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("messages");
    openapiRequiredFields.add("serviceId");
    openapiRequiredFields.add("template40x");
    openapiRequiredFields.add("template50x");
    openapiRequiredFields.add("templateBuild");
    openapiRequiredFields.add("templateMaintenance");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ErrorTemplate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ErrorTemplate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ErrorTemplate is not found in the empty JSON string", ErrorTemplate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ErrorTemplate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ErrorTemplate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ErrorTemplate.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("serviceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceId").toString()));
      }
      if (!jsonObj.get("template40x").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `template40x` to be a primitive type in the JSON string but got `%s`", jsonObj.get("template40x").toString()));
      }
      if (!jsonObj.get("template50x").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `template50x` to be a primitive type in the JSON string but got `%s`", jsonObj.get("template50x").toString()));
      }
      if (!jsonObj.get("templateBuild").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `templateBuild` to be a primitive type in the JSON string but got `%s`", jsonObj.get("templateBuild").toString()));
      }
      if (!jsonObj.get("templateMaintenance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `templateMaintenance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("templateMaintenance").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ErrorTemplate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ErrorTemplate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ErrorTemplate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ErrorTemplate.class));

       return (TypeAdapter<T>) new TypeAdapter<ErrorTemplate>() {
           @Override
           public void write(JsonWriter out, ErrorTemplate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ErrorTemplate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ErrorTemplate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ErrorTemplate
   * @throws IOException if the JSON string is invalid with respect to ErrorTemplate
   */
  public static ErrorTemplate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ErrorTemplate.class);
  }

  /**
   * Convert an instance of ErrorTemplate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

