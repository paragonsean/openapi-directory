/*
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ChaosConfig;
import org.openapitools.client.model.OutageStrategy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration for the faults that can be injected in requests. The name Snow Monkey is an hommage to Netflix&#39;s Chaos Monkey ðŸ˜‰
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:27.562730-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SnowMonkeyConfig {
  public static final String SERIALIZED_NAME_CHAOS_CONFIG = "chaosConfig";
  @SerializedName(SERIALIZED_NAME_CHAOS_CONFIG)
  private ChaosConfig chaosConfig;

  public static final String SERIALIZED_NAME_DRY_RUN = "dryRun";
  @SerializedName(SERIALIZED_NAME_DRY_RUN)
  private Boolean dryRun;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_INCLUDE_USER_FACING_DESCRIPTORS = "includeUserFacingDescriptors";
  @SerializedName(SERIALIZED_NAME_INCLUDE_USER_FACING_DESCRIPTORS)
  private Boolean includeUserFacingDescriptors;

  public static final String SERIALIZED_NAME_OUTAGE_DURATION_FROM = "outageDurationFrom";
  @SerializedName(SERIALIZED_NAME_OUTAGE_DURATION_FROM)
  private Integer outageDurationFrom;

  public static final String SERIALIZED_NAME_OUTAGE_DURATION_TO = "outageDurationTo";
  @SerializedName(SERIALIZED_NAME_OUTAGE_DURATION_TO)
  private Integer outageDurationTo;

  public static final String SERIALIZED_NAME_OUTAGE_STRATEGY = "outageStrategy";
  @SerializedName(SERIALIZED_NAME_OUTAGE_STRATEGY)
  private OutageStrategy outageStrategy;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  public static final String SERIALIZED_NAME_STOP_TIME = "stopTime";
  @SerializedName(SERIALIZED_NAME_STOP_TIME)
  private String stopTime;

  public static final String SERIALIZED_NAME_TARGET_GROUPS = "targetGroups";
  @SerializedName(SERIALIZED_NAME_TARGET_GROUPS)
  private List<String> targetGroups = new ArrayList<>();

  public static final String SERIALIZED_NAME_TIMES_PER_DAY = "timesPerDay";
  @SerializedName(SERIALIZED_NAME_TIMES_PER_DAY)
  private Integer timesPerDay;

  public SnowMonkeyConfig() {
  }

  public SnowMonkeyConfig chaosConfig(ChaosConfig chaosConfig) {
    this.chaosConfig = chaosConfig;
    return this;
  }

  /**
   * Get chaosConfig
   * @return chaosConfig
   */
  @javax.annotation.Nonnull
  public ChaosConfig getChaosConfig() {
    return chaosConfig;
  }

  public void setChaosConfig(ChaosConfig chaosConfig) {
    this.chaosConfig = chaosConfig;
  }


  public SnowMonkeyConfig dryRun(Boolean dryRun) {
    this.dryRun = dryRun;
    return this;
  }

  /**
   * Whether or not outages will actualy impact requests
   * @return dryRun
   */
  @javax.annotation.Nonnull
  public Boolean getDryRun() {
    return dryRun;
  }

  public void setDryRun(Boolean dryRun) {
    this.dryRun = dryRun;
  }


  public SnowMonkeyConfig enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Whether or not this config is enabled
   * @return enabled
   */
  @javax.annotation.Nonnull
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public SnowMonkeyConfig includeUserFacingDescriptors(Boolean includeUserFacingDescriptors) {
    this.includeUserFacingDescriptors = includeUserFacingDescriptors;
    return this;
  }

  /**
   * Whether or not user facing apps. will be impacted by Snow Monkey
   * @return includeUserFacingDescriptors
   */
  @javax.annotation.Nonnull
  public Boolean getIncludeUserFacingDescriptors() {
    return includeUserFacingDescriptors;
  }

  public void setIncludeUserFacingDescriptors(Boolean includeUserFacingDescriptors) {
    this.includeUserFacingDescriptors = includeUserFacingDescriptors;
  }


  public SnowMonkeyConfig outageDurationFrom(Integer outageDurationFrom) {
    this.outageDurationFrom = outageDurationFrom;
    return this;
  }

  /**
   * Start of outage duration range
   * @return outageDurationFrom
   */
  @javax.annotation.Nonnull
  public Integer getOutageDurationFrom() {
    return outageDurationFrom;
  }

  public void setOutageDurationFrom(Integer outageDurationFrom) {
    this.outageDurationFrom = outageDurationFrom;
  }


  public SnowMonkeyConfig outageDurationTo(Integer outageDurationTo) {
    this.outageDurationTo = outageDurationTo;
    return this;
  }

  /**
   * End of outage duration range
   * @return outageDurationTo
   */
  @javax.annotation.Nonnull
  public Integer getOutageDurationTo() {
    return outageDurationTo;
  }

  public void setOutageDurationTo(Integer outageDurationTo) {
    this.outageDurationTo = outageDurationTo;
  }


  public SnowMonkeyConfig outageStrategy(OutageStrategy outageStrategy) {
    this.outageStrategy = outageStrategy;
    return this;
  }

  /**
   * Get outageStrategy
   * @return outageStrategy
   */
  @javax.annotation.Nonnull
  public OutageStrategy getOutageStrategy() {
    return outageStrategy;
  }

  public void setOutageStrategy(OutageStrategy outageStrategy) {
    this.outageStrategy = outageStrategy;
  }


  public SnowMonkeyConfig startTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Start time of Snow Monkey each day
   * @return startTime
   */
  @javax.annotation.Nonnull
  public String getStartTime() {
    return startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }


  public SnowMonkeyConfig stopTime(String stopTime) {
    this.stopTime = stopTime;
    return this;
  }

  /**
   * Stop time of Snow Monkey each day
   * @return stopTime
   */
  @javax.annotation.Nonnull
  public String getStopTime() {
    return stopTime;
  }

  public void setStopTime(String stopTime) {
    this.stopTime = stopTime;
  }


  public SnowMonkeyConfig targetGroups(List<String> targetGroups) {
    this.targetGroups = targetGroups;
    return this;
  }

  public SnowMonkeyConfig addTargetGroupsItem(String targetGroupsItem) {
    if (this.targetGroups == null) {
      this.targetGroups = new ArrayList<>();
    }
    this.targetGroups.add(targetGroupsItem);
    return this;
  }

  /**
   * Groups impacted by Snow Monkey. If empty, all groups will be impacted
   * @return targetGroups
   */
  @javax.annotation.Nonnull
  public List<String> getTargetGroups() {
    return targetGroups;
  }

  public void setTargetGroups(List<String> targetGroups) {
    this.targetGroups = targetGroups;
  }


  public SnowMonkeyConfig timesPerDay(Integer timesPerDay) {
    this.timesPerDay = timesPerDay;
    return this;
  }

  /**
   * Number of time per day each service will be outage
   * @return timesPerDay
   */
  @javax.annotation.Nonnull
  public Integer getTimesPerDay() {
    return timesPerDay;
  }

  public void setTimesPerDay(Integer timesPerDay) {
    this.timesPerDay = timesPerDay;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SnowMonkeyConfig snowMonkeyConfig = (SnowMonkeyConfig) o;
    return Objects.equals(this.chaosConfig, snowMonkeyConfig.chaosConfig) &&
        Objects.equals(this.dryRun, snowMonkeyConfig.dryRun) &&
        Objects.equals(this.enabled, snowMonkeyConfig.enabled) &&
        Objects.equals(this.includeUserFacingDescriptors, snowMonkeyConfig.includeUserFacingDescriptors) &&
        Objects.equals(this.outageDurationFrom, snowMonkeyConfig.outageDurationFrom) &&
        Objects.equals(this.outageDurationTo, snowMonkeyConfig.outageDurationTo) &&
        Objects.equals(this.outageStrategy, snowMonkeyConfig.outageStrategy) &&
        Objects.equals(this.startTime, snowMonkeyConfig.startTime) &&
        Objects.equals(this.stopTime, snowMonkeyConfig.stopTime) &&
        Objects.equals(this.targetGroups, snowMonkeyConfig.targetGroups) &&
        Objects.equals(this.timesPerDay, snowMonkeyConfig.timesPerDay);
  }

  @Override
  public int hashCode() {
    return Objects.hash(chaosConfig, dryRun, enabled, includeUserFacingDescriptors, outageDurationFrom, outageDurationTo, outageStrategy, startTime, stopTime, targetGroups, timesPerDay);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SnowMonkeyConfig {\n");
    sb.append("    chaosConfig: ").append(toIndentedString(chaosConfig)).append("\n");
    sb.append("    dryRun: ").append(toIndentedString(dryRun)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    includeUserFacingDescriptors: ").append(toIndentedString(includeUserFacingDescriptors)).append("\n");
    sb.append("    outageDurationFrom: ").append(toIndentedString(outageDurationFrom)).append("\n");
    sb.append("    outageDurationTo: ").append(toIndentedString(outageDurationTo)).append("\n");
    sb.append("    outageStrategy: ").append(toIndentedString(outageStrategy)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    stopTime: ").append(toIndentedString(stopTime)).append("\n");
    sb.append("    targetGroups: ").append(toIndentedString(targetGroups)).append("\n");
    sb.append("    timesPerDay: ").append(toIndentedString(timesPerDay)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("chaosConfig");
    openapiFields.add("dryRun");
    openapiFields.add("enabled");
    openapiFields.add("includeUserFacingDescriptors");
    openapiFields.add("outageDurationFrom");
    openapiFields.add("outageDurationTo");
    openapiFields.add("outageStrategy");
    openapiFields.add("startTime");
    openapiFields.add("stopTime");
    openapiFields.add("targetGroups");
    openapiFields.add("timesPerDay");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("chaosConfig");
    openapiRequiredFields.add("dryRun");
    openapiRequiredFields.add("enabled");
    openapiRequiredFields.add("includeUserFacingDescriptors");
    openapiRequiredFields.add("outageDurationFrom");
    openapiRequiredFields.add("outageDurationTo");
    openapiRequiredFields.add("outageStrategy");
    openapiRequiredFields.add("startTime");
    openapiRequiredFields.add("stopTime");
    openapiRequiredFields.add("targetGroups");
    openapiRequiredFields.add("timesPerDay");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SnowMonkeyConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SnowMonkeyConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SnowMonkeyConfig is not found in the empty JSON string", SnowMonkeyConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SnowMonkeyConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SnowMonkeyConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SnowMonkeyConfig.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `chaosConfig`
      ChaosConfig.validateJsonElement(jsonObj.get("chaosConfig"));
      // validate the required field `outageStrategy`
      OutageStrategy.validateJsonElement(jsonObj.get("outageStrategy"));
      if (!jsonObj.get("startTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTime").toString()));
      }
      if (!jsonObj.get("stopTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stopTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stopTime").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("targetGroups") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("targetGroups").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetGroups` to be an array in the JSON string but got `%s`", jsonObj.get("targetGroups").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SnowMonkeyConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SnowMonkeyConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SnowMonkeyConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SnowMonkeyConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<SnowMonkeyConfig>() {
           @Override
           public void write(JsonWriter out, SnowMonkeyConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SnowMonkeyConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SnowMonkeyConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SnowMonkeyConfig
   * @throws IOException if the JSON string is invalid with respect to SnowMonkeyConfig
   */
  public static SnowMonkeyConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SnowMonkeyConfig.class);
  }

  /**
   * Convert an instance of SnowMonkeyConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

