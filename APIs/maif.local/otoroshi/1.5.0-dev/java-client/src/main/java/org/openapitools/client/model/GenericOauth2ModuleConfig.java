/*
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GenericOauth2ModuleConfigJwtVerifier;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Settings to authenticate users using a generic OAuth2 provider
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:27.562730-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GenericOauth2ModuleConfig {
  public static final String SERIALIZED_NAME_ACCESS_TOKEN_FIELD = "accessTokenField";
  @SerializedName(SERIALIZED_NAME_ACCESS_TOKEN_FIELD)
  private String accessTokenField;

  public static final String SERIALIZED_NAME_AUTHORIZE_URL = "authorizeUrl";
  @SerializedName(SERIALIZED_NAME_AUTHORIZE_URL)
  private String authorizeUrl;

  public static final String SERIALIZED_NAME_CALLBACK_URL = "callbackUrl";
  @SerializedName(SERIALIZED_NAME_CALLBACK_URL)
  private String callbackUrl;

  public static final String SERIALIZED_NAME_CLAIMS = "claims";
  @SerializedName(SERIALIZED_NAME_CLAIMS)
  private String claims;

  public static final String SERIALIZED_NAME_CLIENT_ID = "clientId";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  public static final String SERIALIZED_NAME_CLIENT_SECRET = "clientSecret";
  @SerializedName(SERIALIZED_NAME_CLIENT_SECRET)
  private String clientSecret;

  public static final String SERIALIZED_NAME_DESC = "desc";
  @SerializedName(SERIALIZED_NAME_DESC)
  private String desc;

  public static final String SERIALIZED_NAME_EMAIL_FIELD = "emailField";
  @SerializedName(SERIALIZED_NAME_EMAIL_FIELD)
  private String emailField;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_JWT_VERIFIER = "jwtVerifier";
  @SerializedName(SERIALIZED_NAME_JWT_VERIFIER)
  private GenericOauth2ModuleConfigJwtVerifier jwtVerifier;

  public static final String SERIALIZED_NAME_LOGIN_URL = "loginUrl";
  @SerializedName(SERIALIZED_NAME_LOGIN_URL)
  private String loginUrl;

  public static final String SERIALIZED_NAME_LOGOUT_URL = "logoutUrl";
  @SerializedName(SERIALIZED_NAME_LOGOUT_URL)
  private String logoutUrl;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NAME_FIELD = "nameField";
  @SerializedName(SERIALIZED_NAME_NAME_FIELD)
  private String nameField;

  public static final String SERIALIZED_NAME_OID_CONFIG = "oidConfig";
  @SerializedName(SERIALIZED_NAME_OID_CONFIG)
  private String oidConfig;

  public static final String SERIALIZED_NAME_OTOROSHI_DATA_FIELD = "otoroshiDataField";
  @SerializedName(SERIALIZED_NAME_OTOROSHI_DATA_FIELD)
  private String otoroshiDataField;

  public static final String SERIALIZED_NAME_READ_PROFILE_FROM_TOKEN = "readProfileFromToken";
  @SerializedName(SERIALIZED_NAME_READ_PROFILE_FROM_TOKEN)
  private Boolean readProfileFromToken;

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private String scope;

  public static final String SERIALIZED_NAME_SESSION_MAX_AGE = "sessionMaxAge";
  @SerializedName(SERIALIZED_NAME_SESSION_MAX_AGE)
  private Integer sessionMaxAge;

  public static final String SERIALIZED_NAME_TOKEN_URL = "tokenUrl";
  @SerializedName(SERIALIZED_NAME_TOKEN_URL)
  private String tokenUrl;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_USE_COOKIES = "useCookies";
  @SerializedName(SERIALIZED_NAME_USE_COOKIES)
  private Boolean useCookies;

  public static final String SERIALIZED_NAME_USE_JSON = "useJson";
  @SerializedName(SERIALIZED_NAME_USE_JSON)
  private Boolean useJson;

  public static final String SERIALIZED_NAME_USER_INFO_URL = "userInfoUrl";
  @SerializedName(SERIALIZED_NAME_USER_INFO_URL)
  private String userInfoUrl;

  public GenericOauth2ModuleConfig() {
  }

  public GenericOauth2ModuleConfig accessTokenField(String accessTokenField) {
    this.accessTokenField = accessTokenField;
    return this;
  }

  /**
   * Field name to get access token
   * @return accessTokenField
   */
  @javax.annotation.Nonnull
  public String getAccessTokenField() {
    return accessTokenField;
  }

  public void setAccessTokenField(String accessTokenField) {
    this.accessTokenField = accessTokenField;
  }


  public GenericOauth2ModuleConfig authorizeUrl(String authorizeUrl) {
    this.authorizeUrl = authorizeUrl;
    return this;
  }

  /**
   * OAuth authorize URL
   * @return authorizeUrl
   */
  @javax.annotation.Nonnull
  public String getAuthorizeUrl() {
    return authorizeUrl;
  }

  public void setAuthorizeUrl(String authorizeUrl) {
    this.authorizeUrl = authorizeUrl;
  }


  public GenericOauth2ModuleConfig callbackUrl(String callbackUrl) {
    this.callbackUrl = callbackUrl;
    return this;
  }

  /**
   * Otoroshi callback URL
   * @return callbackUrl
   */
  @javax.annotation.Nonnull
  public String getCallbackUrl() {
    return callbackUrl;
  }

  public void setCallbackUrl(String callbackUrl) {
    this.callbackUrl = callbackUrl;
  }


  public GenericOauth2ModuleConfig claims(String claims) {
    this.claims = claims;
    return this;
  }

  /**
   * The claims of the token
   * @return claims
   */
  @javax.annotation.Nullable
  public String getClaims() {
    return claims;
  }

  public void setClaims(String claims) {
    this.claims = claims;
  }


  public GenericOauth2ModuleConfig clientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * OAuth Client id
   * @return clientId
   */
  @javax.annotation.Nonnull
  public String getClientId() {
    return clientId;
  }

  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public GenericOauth2ModuleConfig clientSecret(String clientSecret) {
    this.clientSecret = clientSecret;
    return this;
  }

  /**
   * OAuth Client secret
   * @return clientSecret
   */
  @javax.annotation.Nonnull
  public String getClientSecret() {
    return clientSecret;
  }

  public void setClientSecret(String clientSecret) {
    this.clientSecret = clientSecret;
  }


  public GenericOauth2ModuleConfig desc(String desc) {
    this.desc = desc;
    return this;
  }

  /**
   * Description of the config
   * @return desc
   */
  @javax.annotation.Nonnull
  public String getDesc() {
    return desc;
  }

  public void setDesc(String desc) {
    this.desc = desc;
  }


  public GenericOauth2ModuleConfig emailField(String emailField) {
    this.emailField = emailField;
    return this;
  }

  /**
   * Field name to get email from user profile
   * @return emailField
   */
  @javax.annotation.Nonnull
  public String getEmailField() {
    return emailField;
  }

  public void setEmailField(String emailField) {
    this.emailField = emailField;
  }


  public GenericOauth2ModuleConfig id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique id of the config
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public GenericOauth2ModuleConfig jwtVerifier(GenericOauth2ModuleConfigJwtVerifier jwtVerifier) {
    this.jwtVerifier = jwtVerifier;
    return this;
  }

  /**
   * Get jwtVerifier
   * @return jwtVerifier
   */
  @javax.annotation.Nullable
  public GenericOauth2ModuleConfigJwtVerifier getJwtVerifier() {
    return jwtVerifier;
  }

  public void setJwtVerifier(GenericOauth2ModuleConfigJwtVerifier jwtVerifier) {
    this.jwtVerifier = jwtVerifier;
  }


  public GenericOauth2ModuleConfig loginUrl(String loginUrl) {
    this.loginUrl = loginUrl;
    return this;
  }

  /**
   * OAuth login URL
   * @return loginUrl
   */
  @javax.annotation.Nonnull
  public String getLoginUrl() {
    return loginUrl;
  }

  public void setLoginUrl(String loginUrl) {
    this.loginUrl = loginUrl;
  }


  public GenericOauth2ModuleConfig logoutUrl(String logoutUrl) {
    this.logoutUrl = logoutUrl;
    return this;
  }

  /**
   * OAuth logout URL
   * @return logoutUrl
   */
  @javax.annotation.Nonnull
  public String getLogoutUrl() {
    return logoutUrl;
  }

  public void setLogoutUrl(String logoutUrl) {
    this.logoutUrl = logoutUrl;
  }


  public GenericOauth2ModuleConfig name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the config
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GenericOauth2ModuleConfig nameField(String nameField) {
    this.nameField = nameField;
    return this;
  }

  /**
   * Field name to get name from user profile
   * @return nameField
   */
  @javax.annotation.Nonnull
  public String getNameField() {
    return nameField;
  }

  public void setNameField(String nameField) {
    this.nameField = nameField;
  }


  public GenericOauth2ModuleConfig oidConfig(String oidConfig) {
    this.oidConfig = oidConfig;
    return this;
  }

  /**
   * URL of the OIDC config. file
   * @return oidConfig
   */
  @javax.annotation.Nullable
  public String getOidConfig() {
    return oidConfig;
  }

  public void setOidConfig(String oidConfig) {
    this.oidConfig = oidConfig;
  }


  public GenericOauth2ModuleConfig otoroshiDataField(String otoroshiDataField) {
    this.otoroshiDataField = otoroshiDataField;
    return this;
  }

  /**
   * Field name to get otoroshi metadata from. You can specify sub fields using | as separator
   * @return otoroshiDataField
   */
  @javax.annotation.Nonnull
  public String getOtoroshiDataField() {
    return otoroshiDataField;
  }

  public void setOtoroshiDataField(String otoroshiDataField) {
    this.otoroshiDataField = otoroshiDataField;
  }


  public GenericOauth2ModuleConfig readProfileFromToken(Boolean readProfileFromToken) {
    this.readProfileFromToken = readProfileFromToken;
    return this;
  }

  /**
   * The user profile will be read from the JWT token in id_token
   * @return readProfileFromToken
   */
  @javax.annotation.Nullable
  public Boolean getReadProfileFromToken() {
    return readProfileFromToken;
  }

  public void setReadProfileFromToken(Boolean readProfileFromToken) {
    this.readProfileFromToken = readProfileFromToken;
  }


  public GenericOauth2ModuleConfig scope(String scope) {
    this.scope = scope;
    return this;
  }

  /**
   * The scope of the token
   * @return scope
   */
  @javax.annotation.Nullable
  public String getScope() {
    return scope;
  }

  public void setScope(String scope) {
    this.scope = scope;
  }


  public GenericOauth2ModuleConfig sessionMaxAge(Integer sessionMaxAge) {
    this.sessionMaxAge = sessionMaxAge;
    return this;
  }

  /**
   * Max age of the session
   * @return sessionMaxAge
   */
  @javax.annotation.Nonnull
  public Integer getSessionMaxAge() {
    return sessionMaxAge;
  }

  public void setSessionMaxAge(Integer sessionMaxAge) {
    this.sessionMaxAge = sessionMaxAge;
  }


  public GenericOauth2ModuleConfig tokenUrl(String tokenUrl) {
    this.tokenUrl = tokenUrl;
    return this;
  }

  /**
   * OAuth token URL
   * @return tokenUrl
   */
  @javax.annotation.Nonnull
  public String getTokenUrl() {
    return tokenUrl;
  }

  public void setTokenUrl(String tokenUrl) {
    this.tokenUrl = tokenUrl;
  }


  public GenericOauth2ModuleConfig type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Type of settings. value is oauth2
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public GenericOauth2ModuleConfig useCookies(Boolean useCookies) {
    this.useCookies = useCookies;
    return this;
  }

  /**
   * Use for redirection to actual service
   * @return useCookies
   */
  @javax.annotation.Nullable
  public Boolean getUseCookies() {
    return useCookies;
  }

  public void setUseCookies(Boolean useCookies) {
    this.useCookies = useCookies;
  }


  public GenericOauth2ModuleConfig useJson(Boolean useJson) {
    this.useJson = useJson;
    return this;
  }

  /**
   * Use JSON or URL Form Encoded as payload with the OAuth provider
   * @return useJson
   */
  @javax.annotation.Nullable
  public Boolean getUseJson() {
    return useJson;
  }

  public void setUseJson(Boolean useJson) {
    this.useJson = useJson;
  }


  public GenericOauth2ModuleConfig userInfoUrl(String userInfoUrl) {
    this.userInfoUrl = userInfoUrl;
    return this;
  }

  /**
   * OAuth userinfo to get user profile
   * @return userInfoUrl
   */
  @javax.annotation.Nonnull
  public String getUserInfoUrl() {
    return userInfoUrl;
  }

  public void setUserInfoUrl(String userInfoUrl) {
    this.userInfoUrl = userInfoUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GenericOauth2ModuleConfig genericOauth2ModuleConfig = (GenericOauth2ModuleConfig) o;
    return Objects.equals(this.accessTokenField, genericOauth2ModuleConfig.accessTokenField) &&
        Objects.equals(this.authorizeUrl, genericOauth2ModuleConfig.authorizeUrl) &&
        Objects.equals(this.callbackUrl, genericOauth2ModuleConfig.callbackUrl) &&
        Objects.equals(this.claims, genericOauth2ModuleConfig.claims) &&
        Objects.equals(this.clientId, genericOauth2ModuleConfig.clientId) &&
        Objects.equals(this.clientSecret, genericOauth2ModuleConfig.clientSecret) &&
        Objects.equals(this.desc, genericOauth2ModuleConfig.desc) &&
        Objects.equals(this.emailField, genericOauth2ModuleConfig.emailField) &&
        Objects.equals(this.id, genericOauth2ModuleConfig.id) &&
        Objects.equals(this.jwtVerifier, genericOauth2ModuleConfig.jwtVerifier) &&
        Objects.equals(this.loginUrl, genericOauth2ModuleConfig.loginUrl) &&
        Objects.equals(this.logoutUrl, genericOauth2ModuleConfig.logoutUrl) &&
        Objects.equals(this.name, genericOauth2ModuleConfig.name) &&
        Objects.equals(this.nameField, genericOauth2ModuleConfig.nameField) &&
        Objects.equals(this.oidConfig, genericOauth2ModuleConfig.oidConfig) &&
        Objects.equals(this.otoroshiDataField, genericOauth2ModuleConfig.otoroshiDataField) &&
        Objects.equals(this.readProfileFromToken, genericOauth2ModuleConfig.readProfileFromToken) &&
        Objects.equals(this.scope, genericOauth2ModuleConfig.scope) &&
        Objects.equals(this.sessionMaxAge, genericOauth2ModuleConfig.sessionMaxAge) &&
        Objects.equals(this.tokenUrl, genericOauth2ModuleConfig.tokenUrl) &&
        Objects.equals(this.type, genericOauth2ModuleConfig.type) &&
        Objects.equals(this.useCookies, genericOauth2ModuleConfig.useCookies) &&
        Objects.equals(this.useJson, genericOauth2ModuleConfig.useJson) &&
        Objects.equals(this.userInfoUrl, genericOauth2ModuleConfig.userInfoUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessTokenField, authorizeUrl, callbackUrl, claims, clientId, clientSecret, desc, emailField, id, jwtVerifier, loginUrl, logoutUrl, name, nameField, oidConfig, otoroshiDataField, readProfileFromToken, scope, sessionMaxAge, tokenUrl, type, useCookies, useJson, userInfoUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GenericOauth2ModuleConfig {\n");
    sb.append("    accessTokenField: ").append(toIndentedString(accessTokenField)).append("\n");
    sb.append("    authorizeUrl: ").append(toIndentedString(authorizeUrl)).append("\n");
    sb.append("    callbackUrl: ").append(toIndentedString(callbackUrl)).append("\n");
    sb.append("    claims: ").append(toIndentedString(claims)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    clientSecret: ").append(toIndentedString(clientSecret)).append("\n");
    sb.append("    desc: ").append(toIndentedString(desc)).append("\n");
    sb.append("    emailField: ").append(toIndentedString(emailField)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    jwtVerifier: ").append(toIndentedString(jwtVerifier)).append("\n");
    sb.append("    loginUrl: ").append(toIndentedString(loginUrl)).append("\n");
    sb.append("    logoutUrl: ").append(toIndentedString(logoutUrl)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nameField: ").append(toIndentedString(nameField)).append("\n");
    sb.append("    oidConfig: ").append(toIndentedString(oidConfig)).append("\n");
    sb.append("    otoroshiDataField: ").append(toIndentedString(otoroshiDataField)).append("\n");
    sb.append("    readProfileFromToken: ").append(toIndentedString(readProfileFromToken)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    sessionMaxAge: ").append(toIndentedString(sessionMaxAge)).append("\n");
    sb.append("    tokenUrl: ").append(toIndentedString(tokenUrl)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    useCookies: ").append(toIndentedString(useCookies)).append("\n");
    sb.append("    useJson: ").append(toIndentedString(useJson)).append("\n");
    sb.append("    userInfoUrl: ").append(toIndentedString(userInfoUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessTokenField");
    openapiFields.add("authorizeUrl");
    openapiFields.add("callbackUrl");
    openapiFields.add("claims");
    openapiFields.add("clientId");
    openapiFields.add("clientSecret");
    openapiFields.add("desc");
    openapiFields.add("emailField");
    openapiFields.add("id");
    openapiFields.add("jwtVerifier");
    openapiFields.add("loginUrl");
    openapiFields.add("logoutUrl");
    openapiFields.add("name");
    openapiFields.add("nameField");
    openapiFields.add("oidConfig");
    openapiFields.add("otoroshiDataField");
    openapiFields.add("readProfileFromToken");
    openapiFields.add("scope");
    openapiFields.add("sessionMaxAge");
    openapiFields.add("tokenUrl");
    openapiFields.add("type");
    openapiFields.add("useCookies");
    openapiFields.add("useJson");
    openapiFields.add("userInfoUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("accessTokenField");
    openapiRequiredFields.add("authorizeUrl");
    openapiRequiredFields.add("callbackUrl");
    openapiRequiredFields.add("clientId");
    openapiRequiredFields.add("clientSecret");
    openapiRequiredFields.add("desc");
    openapiRequiredFields.add("emailField");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("loginUrl");
    openapiRequiredFields.add("logoutUrl");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("nameField");
    openapiRequiredFields.add("otoroshiDataField");
    openapiRequiredFields.add("sessionMaxAge");
    openapiRequiredFields.add("tokenUrl");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("userInfoUrl");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GenericOauth2ModuleConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GenericOauth2ModuleConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GenericOauth2ModuleConfig is not found in the empty JSON string", GenericOauth2ModuleConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GenericOauth2ModuleConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GenericOauth2ModuleConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GenericOauth2ModuleConfig.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("accessTokenField").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessTokenField` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accessTokenField").toString()));
      }
      if (!jsonObj.get("authorizeUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorizeUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorizeUrl").toString()));
      }
      if (!jsonObj.get("callbackUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `callbackUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("callbackUrl").toString()));
      }
      if ((jsonObj.get("claims") != null && !jsonObj.get("claims").isJsonNull()) && !jsonObj.get("claims").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `claims` to be a primitive type in the JSON string but got `%s`", jsonObj.get("claims").toString()));
      }
      if (!jsonObj.get("clientId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientId").toString()));
      }
      if (!jsonObj.get("clientSecret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientSecret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientSecret").toString()));
      }
      if (!jsonObj.get("desc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `desc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("desc").toString()));
      }
      if (!jsonObj.get("emailField").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailField` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emailField").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `jwtVerifier`
      if (jsonObj.get("jwtVerifier") != null && !jsonObj.get("jwtVerifier").isJsonNull()) {
        GenericOauth2ModuleConfigJwtVerifier.validateJsonElement(jsonObj.get("jwtVerifier"));
      }
      if (!jsonObj.get("loginUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `loginUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("loginUrl").toString()));
      }
      if (!jsonObj.get("logoutUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logoutUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logoutUrl").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("nameField").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameField` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nameField").toString()));
      }
      if ((jsonObj.get("oidConfig") != null && !jsonObj.get("oidConfig").isJsonNull()) && !jsonObj.get("oidConfig").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oidConfig` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oidConfig").toString()));
      }
      if (!jsonObj.get("otoroshiDataField").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `otoroshiDataField` to be a primitive type in the JSON string but got `%s`", jsonObj.get("otoroshiDataField").toString()));
      }
      if ((jsonObj.get("scope") != null && !jsonObj.get("scope").isJsonNull()) && !jsonObj.get("scope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scope").toString()));
      }
      if (!jsonObj.get("tokenUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tokenUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tokenUrl").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (!jsonObj.get("userInfoUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userInfoUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userInfoUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GenericOauth2ModuleConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GenericOauth2ModuleConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GenericOauth2ModuleConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GenericOauth2ModuleConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<GenericOauth2ModuleConfig>() {
           @Override
           public void write(JsonWriter out, GenericOauth2ModuleConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GenericOauth2ModuleConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GenericOauth2ModuleConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GenericOauth2ModuleConfig
   * @throws IOException if the JSON string is invalid with respect to GenericOauth2ModuleConfig
   */
  public static GenericOauth2ModuleConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GenericOauth2ModuleConfig.class);
  }

  /**
   * Convert an instance of GenericOauth2ModuleConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

