/*
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Auth0Config;
import org.openapitools.client.model.CleverSettings;
import org.openapitools.client.model.ElasticConfig;
import org.openapitools.client.model.IpFiltering;
import org.openapitools.client.model.MailerSettings;
import org.openapitools.client.model.Webhook;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The global config object of Otoroshi, used to customize settings of the current Otoroshi instance
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:27.562730-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GlobalConfig {
  public static final String SERIALIZED_NAME_ALERTS_EMAILS = "alertsEmails";
  @SerializedName(SERIALIZED_NAME_ALERTS_EMAILS)
  private List<String> alertsEmails = new ArrayList<>();

  public static final String SERIALIZED_NAME_ALERTS_WEBHOOKS = "alertsWebhooks";
  @SerializedName(SERIALIZED_NAME_ALERTS_WEBHOOKS)
  private List<Webhook> alertsWebhooks = new ArrayList<>();

  public static final String SERIALIZED_NAME_ANALYTICS_WEBHOOKS = "analyticsWebhooks";
  @SerializedName(SERIALIZED_NAME_ANALYTICS_WEBHOOKS)
  private List<Webhook> analyticsWebhooks = new ArrayList<>();

  public static final String SERIALIZED_NAME_API_READ_ONLY = "apiReadOnly";
  @SerializedName(SERIALIZED_NAME_API_READ_ONLY)
  private Boolean apiReadOnly;

  public static final String SERIALIZED_NAME_AUTO_LINK_TO_DEFAULT_GROUP = "autoLinkToDefaultGroup";
  @SerializedName(SERIALIZED_NAME_AUTO_LINK_TO_DEFAULT_GROUP)
  private Boolean autoLinkToDefaultGroup;

  public static final String SERIALIZED_NAME_BACKOFFICE_AUTH0_CONFIG = "backofficeAuth0Config";
  @SerializedName(SERIALIZED_NAME_BACKOFFICE_AUTH0_CONFIG)
  private Auth0Config backofficeAuth0Config;

  public static final String SERIALIZED_NAME_CLEVER_SETTINGS = "cleverSettings";
  @SerializedName(SERIALIZED_NAME_CLEVER_SETTINGS)
  private CleverSettings cleverSettings;

  public static final String SERIALIZED_NAME_ELASTIC_READS_CONFIG = "elasticReadsConfig";
  @SerializedName(SERIALIZED_NAME_ELASTIC_READS_CONFIG)
  private ElasticConfig elasticReadsConfig;

  public static final String SERIALIZED_NAME_ELASTIC_WRITES_CONFIGS = "elasticWritesConfigs";
  @SerializedName(SERIALIZED_NAME_ELASTIC_WRITES_CONFIGS)
  private List<ElasticConfig> elasticWritesConfigs = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENDLESS_IP_ADDRESSES = "endlessIpAddresses";
  @SerializedName(SERIALIZED_NAME_ENDLESS_IP_ADDRESSES)
  private List<String> endlessIpAddresses = new ArrayList<>();

  public static final String SERIALIZED_NAME_IP_FILTERING = "ipFiltering";
  @SerializedName(SERIALIZED_NAME_IP_FILTERING)
  private IpFiltering ipFiltering;

  public static final String SERIALIZED_NAME_LIMIT_CONCURRENT_REQUESTS = "limitConcurrentRequests";
  @SerializedName(SERIALIZED_NAME_LIMIT_CONCURRENT_REQUESTS)
  private Boolean limitConcurrentRequests;

  public static final String SERIALIZED_NAME_LINES = "lines";
  @SerializedName(SERIALIZED_NAME_LINES)
  private List<String> lines = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAILER_SETTINGS = "mailerSettings";
  @SerializedName(SERIALIZED_NAME_MAILER_SETTINGS)
  private MailerSettings mailerSettings;

  public static final String SERIALIZED_NAME_MAX_CONCURRENT_REQUESTS = "maxConcurrentRequests";
  @SerializedName(SERIALIZED_NAME_MAX_CONCURRENT_REQUESTS)
  private Long maxConcurrentRequests;

  public static final String SERIALIZED_NAME_MAX_HTTP10_RESPONSE_SIZE = "maxHttp10ResponseSize";
  @SerializedName(SERIALIZED_NAME_MAX_HTTP10_RESPONSE_SIZE)
  private Long maxHttp10ResponseSize;

  public static final String SERIALIZED_NAME_MAX_LOGS_SIZE = "maxLogsSize";
  @SerializedName(SERIALIZED_NAME_MAX_LOGS_SIZE)
  private Integer maxLogsSize;

  public static final String SERIALIZED_NAME_MIDDLE_FINGERS = "middleFingers";
  @SerializedName(SERIALIZED_NAME_MIDDLE_FINGERS)
  private Boolean middleFingers;

  public static final String SERIALIZED_NAME_PER_IP_THROTTLING_QUOTA = "perIpThrottlingQuota";
  @SerializedName(SERIALIZED_NAME_PER_IP_THROTTLING_QUOTA)
  private Long perIpThrottlingQuota;

  public static final String SERIALIZED_NAME_PRIVATE_APPS_AUTH0_CONFIG = "privateAppsAuth0Config";
  @SerializedName(SERIALIZED_NAME_PRIVATE_APPS_AUTH0_CONFIG)
  private Auth0Config privateAppsAuth0Config;

  public static final String SERIALIZED_NAME_STREAM_ENTITY_ONLY = "streamEntityOnly";
  @SerializedName(SERIALIZED_NAME_STREAM_ENTITY_ONLY)
  private Boolean streamEntityOnly;

  public static final String SERIALIZED_NAME_THROTTLING_QUOTA = "throttlingQuota";
  @SerializedName(SERIALIZED_NAME_THROTTLING_QUOTA)
  private Long throttlingQuota;

  public static final String SERIALIZED_NAME_U2F_LOGIN_ONLY = "u2fLoginOnly";
  @SerializedName(SERIALIZED_NAME_U2F_LOGIN_ONLY)
  private Boolean u2fLoginOnly;

  public static final String SERIALIZED_NAME_USE_CIRCUIT_BREAKERS = "useCircuitBreakers";
  @SerializedName(SERIALIZED_NAME_USE_CIRCUIT_BREAKERS)
  private Boolean useCircuitBreakers;

  public GlobalConfig() {
  }

  public GlobalConfig alertsEmails(List<String> alertsEmails) {
    this.alertsEmails = alertsEmails;
    return this;
  }

  public GlobalConfig addAlertsEmailsItem(String alertsEmailsItem) {
    if (this.alertsEmails == null) {
      this.alertsEmails = new ArrayList<>();
    }
    this.alertsEmails.add(alertsEmailsItem);
    return this;
  }

  /**
   * Email addresses that will receive all Otoroshi alert events
   * @return alertsEmails
   */
  @javax.annotation.Nonnull
  public List<String> getAlertsEmails() {
    return alertsEmails;
  }

  public void setAlertsEmails(List<String> alertsEmails) {
    this.alertsEmails = alertsEmails;
  }


  public GlobalConfig alertsWebhooks(List<Webhook> alertsWebhooks) {
    this.alertsWebhooks = alertsWebhooks;
    return this;
  }

  public GlobalConfig addAlertsWebhooksItem(Webhook alertsWebhooksItem) {
    if (this.alertsWebhooks == null) {
      this.alertsWebhooks = new ArrayList<>();
    }
    this.alertsWebhooks.add(alertsWebhooksItem);
    return this;
  }

  /**
   * Webhook that will receive all Otoroshi alert events
   * @return alertsWebhooks
   */
  @javax.annotation.Nonnull
  public List<Webhook> getAlertsWebhooks() {
    return alertsWebhooks;
  }

  public void setAlertsWebhooks(List<Webhook> alertsWebhooks) {
    this.alertsWebhooks = alertsWebhooks;
  }


  public GlobalConfig analyticsWebhooks(List<Webhook> analyticsWebhooks) {
    this.analyticsWebhooks = analyticsWebhooks;
    return this;
  }

  public GlobalConfig addAnalyticsWebhooksItem(Webhook analyticsWebhooksItem) {
    if (this.analyticsWebhooks == null) {
      this.analyticsWebhooks = new ArrayList<>();
    }
    this.analyticsWebhooks.add(analyticsWebhooksItem);
    return this;
  }

  /**
   * Webhook that will receive all internal Otoroshi events
   * @return analyticsWebhooks
   */
  @javax.annotation.Nonnull
  public List<Webhook> getAnalyticsWebhooks() {
    return analyticsWebhooks;
  }

  public void setAnalyticsWebhooks(List<Webhook> analyticsWebhooks) {
    this.analyticsWebhooks = analyticsWebhooks;
  }


  public GlobalConfig apiReadOnly(Boolean apiReadOnly) {
    this.apiReadOnly = apiReadOnly;
    return this;
  }

  /**
   * If enabled, Admin API won&#39;t be able to write/update/delete entities
   * @return apiReadOnly
   */
  @javax.annotation.Nonnull
  public Boolean getApiReadOnly() {
    return apiReadOnly;
  }

  public void setApiReadOnly(Boolean apiReadOnly) {
    this.apiReadOnly = apiReadOnly;
  }


  public GlobalConfig autoLinkToDefaultGroup(Boolean autoLinkToDefaultGroup) {
    this.autoLinkToDefaultGroup = autoLinkToDefaultGroup;
    return this;
  }

  /**
   * If not defined, every new service descriptor will be added to the default group
   * @return autoLinkToDefaultGroup
   */
  @javax.annotation.Nonnull
  public Boolean getAutoLinkToDefaultGroup() {
    return autoLinkToDefaultGroup;
  }

  public void setAutoLinkToDefaultGroup(Boolean autoLinkToDefaultGroup) {
    this.autoLinkToDefaultGroup = autoLinkToDefaultGroup;
  }


  public GlobalConfig backofficeAuth0Config(Auth0Config backofficeAuth0Config) {
    this.backofficeAuth0Config = backofficeAuth0Config;
    return this;
  }

  /**
   * Get backofficeAuth0Config
   * @return backofficeAuth0Config
   */
  @javax.annotation.Nullable
  public Auth0Config getBackofficeAuth0Config() {
    return backofficeAuth0Config;
  }

  public void setBackofficeAuth0Config(Auth0Config backofficeAuth0Config) {
    this.backofficeAuth0Config = backofficeAuth0Config;
  }


  public GlobalConfig cleverSettings(CleverSettings cleverSettings) {
    this.cleverSettings = cleverSettings;
    return this;
  }

  /**
   * Get cleverSettings
   * @return cleverSettings
   */
  @javax.annotation.Nullable
  public CleverSettings getCleverSettings() {
    return cleverSettings;
  }

  public void setCleverSettings(CleverSettings cleverSettings) {
    this.cleverSettings = cleverSettings;
  }


  public GlobalConfig elasticReadsConfig(ElasticConfig elasticReadsConfig) {
    this.elasticReadsConfig = elasticReadsConfig;
    return this;
  }

  /**
   * Get elasticReadsConfig
   * @return elasticReadsConfig
   */
  @javax.annotation.Nullable
  public ElasticConfig getElasticReadsConfig() {
    return elasticReadsConfig;
  }

  public void setElasticReadsConfig(ElasticConfig elasticReadsConfig) {
    this.elasticReadsConfig = elasticReadsConfig;
  }


  public GlobalConfig elasticWritesConfigs(List<ElasticConfig> elasticWritesConfigs) {
    this.elasticWritesConfigs = elasticWritesConfigs;
    return this;
  }

  public GlobalConfig addElasticWritesConfigsItem(ElasticConfig elasticWritesConfigsItem) {
    if (this.elasticWritesConfigs == null) {
      this.elasticWritesConfigs = new ArrayList<>();
    }
    this.elasticWritesConfigs.add(elasticWritesConfigsItem);
    return this;
  }

  /**
   * Configs. for Elastic writes
   * @return elasticWritesConfigs
   */
  @javax.annotation.Nullable
  public List<ElasticConfig> getElasticWritesConfigs() {
    return elasticWritesConfigs;
  }

  public void setElasticWritesConfigs(List<ElasticConfig> elasticWritesConfigs) {
    this.elasticWritesConfigs = elasticWritesConfigs;
  }


  public GlobalConfig endlessIpAddresses(List<String> endlessIpAddresses) {
    this.endlessIpAddresses = endlessIpAddresses;
    return this;
  }

  public GlobalConfig addEndlessIpAddressesItem(String endlessIpAddressesItem) {
    if (this.endlessIpAddresses == null) {
      this.endlessIpAddresses = new ArrayList<>();
    }
    this.endlessIpAddresses.add(endlessIpAddressesItem);
    return this;
  }

  /**
   * IP addresses for which any request to Otoroshi will respond with 128 Gb of zeros
   * @return endlessIpAddresses
   */
  @javax.annotation.Nonnull
  public List<String> getEndlessIpAddresses() {
    return endlessIpAddresses;
  }

  public void setEndlessIpAddresses(List<String> endlessIpAddresses) {
    this.endlessIpAddresses = endlessIpAddresses;
  }


  public GlobalConfig ipFiltering(IpFiltering ipFiltering) {
    this.ipFiltering = ipFiltering;
    return this;
  }

  /**
   * Get ipFiltering
   * @return ipFiltering
   */
  @javax.annotation.Nonnull
  public IpFiltering getIpFiltering() {
    return ipFiltering;
  }

  public void setIpFiltering(IpFiltering ipFiltering) {
    this.ipFiltering = ipFiltering;
  }


  public GlobalConfig limitConcurrentRequests(Boolean limitConcurrentRequests) {
    this.limitConcurrentRequests = limitConcurrentRequests;
    return this;
  }

  /**
   * If enabled, Otoroshi will reject new request if too much at the same time
   * @return limitConcurrentRequests
   */
  @javax.annotation.Nonnull
  public Boolean getLimitConcurrentRequests() {
    return limitConcurrentRequests;
  }

  public void setLimitConcurrentRequests(Boolean limitConcurrentRequests) {
    this.limitConcurrentRequests = limitConcurrentRequests;
  }


  public GlobalConfig lines(List<String> lines) {
    this.lines = lines;
    return this;
  }

  public GlobalConfig addLinesItem(String linesItem) {
    if (this.lines == null) {
      this.lines = new ArrayList<>();
    }
    this.lines.add(linesItem);
    return this;
  }

  /**
   * Possibles lines for Otoroshi
   * @return lines
   */
  @javax.annotation.Nullable
  public List<String> getLines() {
    return lines;
  }

  public void setLines(List<String> lines) {
    this.lines = lines;
  }


  public GlobalConfig mailerSettings(MailerSettings mailerSettings) {
    this.mailerSettings = mailerSettings;
    return this;
  }

  /**
   * Get mailerSettings
   * @return mailerSettings
   */
  @javax.annotation.Nullable
  public MailerSettings getMailerSettings() {
    return mailerSettings;
  }

  public void setMailerSettings(MailerSettings mailerSettings) {
    this.mailerSettings = mailerSettings;
  }


  public GlobalConfig maxConcurrentRequests(Long maxConcurrentRequests) {
    this.maxConcurrentRequests = maxConcurrentRequests;
    return this;
  }

  /**
   * The number of authorized request processed at the same time
   * @return maxConcurrentRequests
   */
  @javax.annotation.Nonnull
  public Long getMaxConcurrentRequests() {
    return maxConcurrentRequests;
  }

  public void setMaxConcurrentRequests(Long maxConcurrentRequests) {
    this.maxConcurrentRequests = maxConcurrentRequests;
  }


  public GlobalConfig maxHttp10ResponseSize(Long maxHttp10ResponseSize) {
    this.maxHttp10ResponseSize = maxHttp10ResponseSize;
    return this;
  }

  /**
   * The max size in bytes of an HTTP 1.0 response
   * @return maxHttp10ResponseSize
   */
  @javax.annotation.Nullable
  public Long getMaxHttp10ResponseSize() {
    return maxHttp10ResponseSize;
  }

  public void setMaxHttp10ResponseSize(Long maxHttp10ResponseSize) {
    this.maxHttp10ResponseSize = maxHttp10ResponseSize;
  }


  public GlobalConfig maxLogsSize(Integer maxLogsSize) {
    this.maxLogsSize = maxLogsSize;
    return this;
  }

  /**
   * Number of events kept locally
   * @return maxLogsSize
   */
  @javax.annotation.Nullable
  public Integer getMaxLogsSize() {
    return maxLogsSize;
  }

  public void setMaxLogsSize(Integer maxLogsSize) {
    this.maxLogsSize = maxLogsSize;
  }


  public GlobalConfig middleFingers(Boolean middleFingers) {
    this.middleFingers = middleFingers;
    return this;
  }

  /**
   * Use middle finger emoji as a response character for endless HTTP responses
   * @return middleFingers
   */
  @javax.annotation.Nullable
  public Boolean getMiddleFingers() {
    return middleFingers;
  }

  public void setMiddleFingers(Boolean middleFingers) {
    this.middleFingers = middleFingers;
  }


  public GlobalConfig perIpThrottlingQuota(Long perIpThrottlingQuota) {
    this.perIpThrottlingQuota = perIpThrottlingQuota;
    return this;
  }

  /**
   * Authorized number of calls per second globally per IP address, measured on 10 seconds
   * @return perIpThrottlingQuota
   */
  @javax.annotation.Nonnull
  public Long getPerIpThrottlingQuota() {
    return perIpThrottlingQuota;
  }

  public void setPerIpThrottlingQuota(Long perIpThrottlingQuota) {
    this.perIpThrottlingQuota = perIpThrottlingQuota;
  }


  public GlobalConfig privateAppsAuth0Config(Auth0Config privateAppsAuth0Config) {
    this.privateAppsAuth0Config = privateAppsAuth0Config;
    return this;
  }

  /**
   * Get privateAppsAuth0Config
   * @return privateAppsAuth0Config
   */
  @javax.annotation.Nullable
  public Auth0Config getPrivateAppsAuth0Config() {
    return privateAppsAuth0Config;
  }

  public void setPrivateAppsAuth0Config(Auth0Config privateAppsAuth0Config) {
    this.privateAppsAuth0Config = privateAppsAuth0Config;
  }


  public GlobalConfig streamEntityOnly(Boolean streamEntityOnly) {
    this.streamEntityOnly = streamEntityOnly;
    return this;
  }

  /**
   * HTTP will be streamed only. Doesn&#39;t work with old browsers
   * @return streamEntityOnly
   */
  @javax.annotation.Nonnull
  public Boolean getStreamEntityOnly() {
    return streamEntityOnly;
  }

  public void setStreamEntityOnly(Boolean streamEntityOnly) {
    this.streamEntityOnly = streamEntityOnly;
  }


  public GlobalConfig throttlingQuota(Long throttlingQuota) {
    this.throttlingQuota = throttlingQuota;
    return this;
  }

  /**
   * Authorized number of calls per second globally, measured on 10 seconds
   * @return throttlingQuota
   */
  @javax.annotation.Nonnull
  public Long getThrottlingQuota() {
    return throttlingQuota;
  }

  public void setThrottlingQuota(Long throttlingQuota) {
    this.throttlingQuota = throttlingQuota;
  }


  public GlobalConfig u2fLoginOnly(Boolean u2fLoginOnly) {
    this.u2fLoginOnly = u2fLoginOnly;
    return this;
  }

  /**
   * If enabled, login to backoffice through Auth0 will be disabled
   * @return u2fLoginOnly
   */
  @javax.annotation.Nonnull
  public Boolean getU2fLoginOnly() {
    return u2fLoginOnly;
  }

  public void setU2fLoginOnly(Boolean u2fLoginOnly) {
    this.u2fLoginOnly = u2fLoginOnly;
  }


  public GlobalConfig useCircuitBreakers(Boolean useCircuitBreakers) {
    this.useCircuitBreakers = useCircuitBreakers;
    return this;
  }

  /**
   * If enabled, services will be authorized to use circuit breakers
   * @return useCircuitBreakers
   */
  @javax.annotation.Nonnull
  public Boolean getUseCircuitBreakers() {
    return useCircuitBreakers;
  }

  public void setUseCircuitBreakers(Boolean useCircuitBreakers) {
    this.useCircuitBreakers = useCircuitBreakers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GlobalConfig globalConfig = (GlobalConfig) o;
    return Objects.equals(this.alertsEmails, globalConfig.alertsEmails) &&
        Objects.equals(this.alertsWebhooks, globalConfig.alertsWebhooks) &&
        Objects.equals(this.analyticsWebhooks, globalConfig.analyticsWebhooks) &&
        Objects.equals(this.apiReadOnly, globalConfig.apiReadOnly) &&
        Objects.equals(this.autoLinkToDefaultGroup, globalConfig.autoLinkToDefaultGroup) &&
        Objects.equals(this.backofficeAuth0Config, globalConfig.backofficeAuth0Config) &&
        Objects.equals(this.cleverSettings, globalConfig.cleverSettings) &&
        Objects.equals(this.elasticReadsConfig, globalConfig.elasticReadsConfig) &&
        Objects.equals(this.elasticWritesConfigs, globalConfig.elasticWritesConfigs) &&
        Objects.equals(this.endlessIpAddresses, globalConfig.endlessIpAddresses) &&
        Objects.equals(this.ipFiltering, globalConfig.ipFiltering) &&
        Objects.equals(this.limitConcurrentRequests, globalConfig.limitConcurrentRequests) &&
        Objects.equals(this.lines, globalConfig.lines) &&
        Objects.equals(this.mailerSettings, globalConfig.mailerSettings) &&
        Objects.equals(this.maxConcurrentRequests, globalConfig.maxConcurrentRequests) &&
        Objects.equals(this.maxHttp10ResponseSize, globalConfig.maxHttp10ResponseSize) &&
        Objects.equals(this.maxLogsSize, globalConfig.maxLogsSize) &&
        Objects.equals(this.middleFingers, globalConfig.middleFingers) &&
        Objects.equals(this.perIpThrottlingQuota, globalConfig.perIpThrottlingQuota) &&
        Objects.equals(this.privateAppsAuth0Config, globalConfig.privateAppsAuth0Config) &&
        Objects.equals(this.streamEntityOnly, globalConfig.streamEntityOnly) &&
        Objects.equals(this.throttlingQuota, globalConfig.throttlingQuota) &&
        Objects.equals(this.u2fLoginOnly, globalConfig.u2fLoginOnly) &&
        Objects.equals(this.useCircuitBreakers, globalConfig.useCircuitBreakers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alertsEmails, alertsWebhooks, analyticsWebhooks, apiReadOnly, autoLinkToDefaultGroup, backofficeAuth0Config, cleverSettings, elasticReadsConfig, elasticWritesConfigs, endlessIpAddresses, ipFiltering, limitConcurrentRequests, lines, mailerSettings, maxConcurrentRequests, maxHttp10ResponseSize, maxLogsSize, middleFingers, perIpThrottlingQuota, privateAppsAuth0Config, streamEntityOnly, throttlingQuota, u2fLoginOnly, useCircuitBreakers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GlobalConfig {\n");
    sb.append("    alertsEmails: ").append(toIndentedString(alertsEmails)).append("\n");
    sb.append("    alertsWebhooks: ").append(toIndentedString(alertsWebhooks)).append("\n");
    sb.append("    analyticsWebhooks: ").append(toIndentedString(analyticsWebhooks)).append("\n");
    sb.append("    apiReadOnly: ").append(toIndentedString(apiReadOnly)).append("\n");
    sb.append("    autoLinkToDefaultGroup: ").append(toIndentedString(autoLinkToDefaultGroup)).append("\n");
    sb.append("    backofficeAuth0Config: ").append(toIndentedString(backofficeAuth0Config)).append("\n");
    sb.append("    cleverSettings: ").append(toIndentedString(cleverSettings)).append("\n");
    sb.append("    elasticReadsConfig: ").append(toIndentedString(elasticReadsConfig)).append("\n");
    sb.append("    elasticWritesConfigs: ").append(toIndentedString(elasticWritesConfigs)).append("\n");
    sb.append("    endlessIpAddresses: ").append(toIndentedString(endlessIpAddresses)).append("\n");
    sb.append("    ipFiltering: ").append(toIndentedString(ipFiltering)).append("\n");
    sb.append("    limitConcurrentRequests: ").append(toIndentedString(limitConcurrentRequests)).append("\n");
    sb.append("    lines: ").append(toIndentedString(lines)).append("\n");
    sb.append("    mailerSettings: ").append(toIndentedString(mailerSettings)).append("\n");
    sb.append("    maxConcurrentRequests: ").append(toIndentedString(maxConcurrentRequests)).append("\n");
    sb.append("    maxHttp10ResponseSize: ").append(toIndentedString(maxHttp10ResponseSize)).append("\n");
    sb.append("    maxLogsSize: ").append(toIndentedString(maxLogsSize)).append("\n");
    sb.append("    middleFingers: ").append(toIndentedString(middleFingers)).append("\n");
    sb.append("    perIpThrottlingQuota: ").append(toIndentedString(perIpThrottlingQuota)).append("\n");
    sb.append("    privateAppsAuth0Config: ").append(toIndentedString(privateAppsAuth0Config)).append("\n");
    sb.append("    streamEntityOnly: ").append(toIndentedString(streamEntityOnly)).append("\n");
    sb.append("    throttlingQuota: ").append(toIndentedString(throttlingQuota)).append("\n");
    sb.append("    u2fLoginOnly: ").append(toIndentedString(u2fLoginOnly)).append("\n");
    sb.append("    useCircuitBreakers: ").append(toIndentedString(useCircuitBreakers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alertsEmails");
    openapiFields.add("alertsWebhooks");
    openapiFields.add("analyticsWebhooks");
    openapiFields.add("apiReadOnly");
    openapiFields.add("autoLinkToDefaultGroup");
    openapiFields.add("backofficeAuth0Config");
    openapiFields.add("cleverSettings");
    openapiFields.add("elasticReadsConfig");
    openapiFields.add("elasticWritesConfigs");
    openapiFields.add("endlessIpAddresses");
    openapiFields.add("ipFiltering");
    openapiFields.add("limitConcurrentRequests");
    openapiFields.add("lines");
    openapiFields.add("mailerSettings");
    openapiFields.add("maxConcurrentRequests");
    openapiFields.add("maxHttp10ResponseSize");
    openapiFields.add("maxLogsSize");
    openapiFields.add("middleFingers");
    openapiFields.add("perIpThrottlingQuota");
    openapiFields.add("privateAppsAuth0Config");
    openapiFields.add("streamEntityOnly");
    openapiFields.add("throttlingQuota");
    openapiFields.add("u2fLoginOnly");
    openapiFields.add("useCircuitBreakers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("alertsEmails");
    openapiRequiredFields.add("alertsWebhooks");
    openapiRequiredFields.add("analyticsWebhooks");
    openapiRequiredFields.add("apiReadOnly");
    openapiRequiredFields.add("autoLinkToDefaultGroup");
    openapiRequiredFields.add("endlessIpAddresses");
    openapiRequiredFields.add("ipFiltering");
    openapiRequiredFields.add("limitConcurrentRequests");
    openapiRequiredFields.add("maxConcurrentRequests");
    openapiRequiredFields.add("perIpThrottlingQuota");
    openapiRequiredFields.add("streamEntityOnly");
    openapiRequiredFields.add("throttlingQuota");
    openapiRequiredFields.add("u2fLoginOnly");
    openapiRequiredFields.add("useCircuitBreakers");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GlobalConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GlobalConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GlobalConfig is not found in the empty JSON string", GlobalConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GlobalConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GlobalConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GlobalConfig.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("alertsEmails") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("alertsEmails").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `alertsEmails` to be an array in the JSON string but got `%s`", jsonObj.get("alertsEmails").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("alertsWebhooks").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `alertsWebhooks` to be an array in the JSON string but got `%s`", jsonObj.get("alertsWebhooks").toString()));
      }

      JsonArray jsonArrayalertsWebhooks = jsonObj.getAsJsonArray("alertsWebhooks");
      // validate the required field `alertsWebhooks` (array)
      for (int i = 0; i < jsonArrayalertsWebhooks.size(); i++) {
        Webhook.validateJsonElement(jsonArrayalertsWebhooks.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("analyticsWebhooks").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `analyticsWebhooks` to be an array in the JSON string but got `%s`", jsonObj.get("analyticsWebhooks").toString()));
      }

      JsonArray jsonArrayanalyticsWebhooks = jsonObj.getAsJsonArray("analyticsWebhooks");
      // validate the required field `analyticsWebhooks` (array)
      for (int i = 0; i < jsonArrayanalyticsWebhooks.size(); i++) {
        Webhook.validateJsonElement(jsonArrayanalyticsWebhooks.get(i));
      };
      // validate the optional field `backofficeAuth0Config`
      if (jsonObj.get("backofficeAuth0Config") != null && !jsonObj.get("backofficeAuth0Config").isJsonNull()) {
        Auth0Config.validateJsonElement(jsonObj.get("backofficeAuth0Config"));
      }
      // validate the optional field `cleverSettings`
      if (jsonObj.get("cleverSettings") != null && !jsonObj.get("cleverSettings").isJsonNull()) {
        CleverSettings.validateJsonElement(jsonObj.get("cleverSettings"));
      }
      // validate the optional field `elasticReadsConfig`
      if (jsonObj.get("elasticReadsConfig") != null && !jsonObj.get("elasticReadsConfig").isJsonNull()) {
        ElasticConfig.validateJsonElement(jsonObj.get("elasticReadsConfig"));
      }
      if (jsonObj.get("elasticWritesConfigs") != null && !jsonObj.get("elasticWritesConfigs").isJsonNull()) {
        JsonArray jsonArrayelasticWritesConfigs = jsonObj.getAsJsonArray("elasticWritesConfigs");
        if (jsonArrayelasticWritesConfigs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("elasticWritesConfigs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `elasticWritesConfigs` to be an array in the JSON string but got `%s`", jsonObj.get("elasticWritesConfigs").toString()));
          }

          // validate the optional field `elasticWritesConfigs` (array)
          for (int i = 0; i < jsonArrayelasticWritesConfigs.size(); i++) {
            ElasticConfig.validateJsonElement(jsonArrayelasticWritesConfigs.get(i));
          };
        }
      }
      // ensure the required json array is present
      if (jsonObj.get("endlessIpAddresses") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("endlessIpAddresses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `endlessIpAddresses` to be an array in the JSON string but got `%s`", jsonObj.get("endlessIpAddresses").toString()));
      }
      // validate the required field `ipFiltering`
      IpFiltering.validateJsonElement(jsonObj.get("ipFiltering"));
      // ensure the optional json data is an array if present
      if (jsonObj.get("lines") != null && !jsonObj.get("lines").isJsonNull() && !jsonObj.get("lines").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `lines` to be an array in the JSON string but got `%s`", jsonObj.get("lines").toString()));
      }
      // validate the optional field `mailerSettings`
      if (jsonObj.get("mailerSettings") != null && !jsonObj.get("mailerSettings").isJsonNull()) {
        MailerSettings.validateJsonElement(jsonObj.get("mailerSettings"));
      }
      // validate the optional field `privateAppsAuth0Config`
      if (jsonObj.get("privateAppsAuth0Config") != null && !jsonObj.get("privateAppsAuth0Config").isJsonNull()) {
        Auth0Config.validateJsonElement(jsonObj.get("privateAppsAuth0Config"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GlobalConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GlobalConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GlobalConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GlobalConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<GlobalConfig>() {
           @Override
           public void write(JsonWriter out, GlobalConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GlobalConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GlobalConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GlobalConfig
   * @throws IOException if the JSON string is invalid with respect to GlobalConfig
   */
  public static GlobalConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GlobalConfig.class);
  }

  /**
   * Convert an instance of GlobalConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

