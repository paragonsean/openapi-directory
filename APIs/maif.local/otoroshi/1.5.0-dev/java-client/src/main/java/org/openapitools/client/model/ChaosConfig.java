/*
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BadResponsesFaultConfig;
import org.openapitools.client.model.LargeRequestFaultConfig;
import org.openapitools.client.model.LargeResponseFaultConfig;
import org.openapitools.client.model.LatencyInjectionFaultConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration for the faults that can be injected in requests
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:27.562730-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChaosConfig {
  public static final String SERIALIZED_NAME_BAD_RESPONSES_FAULT_CONFIG = "badResponsesFaultConfig";
  @SerializedName(SERIALIZED_NAME_BAD_RESPONSES_FAULT_CONFIG)
  private BadResponsesFaultConfig badResponsesFaultConfig;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_LARGE_REQUEST_FAULT_CONFIG = "largeRequestFaultConfig";
  @SerializedName(SERIALIZED_NAME_LARGE_REQUEST_FAULT_CONFIG)
  private LargeRequestFaultConfig largeRequestFaultConfig;

  public static final String SERIALIZED_NAME_LARGE_RESPONSE_FAULT_CONFIG = "largeResponseFaultConfig";
  @SerializedName(SERIALIZED_NAME_LARGE_RESPONSE_FAULT_CONFIG)
  private LargeResponseFaultConfig largeResponseFaultConfig;

  public static final String SERIALIZED_NAME_LATENCY_INJECTION_FAULT_CONFIG = "latencyInjectionFaultConfig";
  @SerializedName(SERIALIZED_NAME_LATENCY_INJECTION_FAULT_CONFIG)
  private LatencyInjectionFaultConfig latencyInjectionFaultConfig;

  public ChaosConfig() {
  }

  public ChaosConfig badResponsesFaultConfig(BadResponsesFaultConfig badResponsesFaultConfig) {
    this.badResponsesFaultConfig = badResponsesFaultConfig;
    return this;
  }

  /**
   * Get badResponsesFaultConfig
   * @return badResponsesFaultConfig
   */
  @javax.annotation.Nullable
  public BadResponsesFaultConfig getBadResponsesFaultConfig() {
    return badResponsesFaultConfig;
  }

  public void setBadResponsesFaultConfig(BadResponsesFaultConfig badResponsesFaultConfig) {
    this.badResponsesFaultConfig = badResponsesFaultConfig;
  }


  public ChaosConfig enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Whether or not this config is enabled
   * @return enabled
   */
  @javax.annotation.Nonnull
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public ChaosConfig largeRequestFaultConfig(LargeRequestFaultConfig largeRequestFaultConfig) {
    this.largeRequestFaultConfig = largeRequestFaultConfig;
    return this;
  }

  /**
   * Get largeRequestFaultConfig
   * @return largeRequestFaultConfig
   */
  @javax.annotation.Nullable
  public LargeRequestFaultConfig getLargeRequestFaultConfig() {
    return largeRequestFaultConfig;
  }

  public void setLargeRequestFaultConfig(LargeRequestFaultConfig largeRequestFaultConfig) {
    this.largeRequestFaultConfig = largeRequestFaultConfig;
  }


  public ChaosConfig largeResponseFaultConfig(LargeResponseFaultConfig largeResponseFaultConfig) {
    this.largeResponseFaultConfig = largeResponseFaultConfig;
    return this;
  }

  /**
   * Get largeResponseFaultConfig
   * @return largeResponseFaultConfig
   */
  @javax.annotation.Nullable
  public LargeResponseFaultConfig getLargeResponseFaultConfig() {
    return largeResponseFaultConfig;
  }

  public void setLargeResponseFaultConfig(LargeResponseFaultConfig largeResponseFaultConfig) {
    this.largeResponseFaultConfig = largeResponseFaultConfig;
  }


  public ChaosConfig latencyInjectionFaultConfig(LatencyInjectionFaultConfig latencyInjectionFaultConfig) {
    this.latencyInjectionFaultConfig = latencyInjectionFaultConfig;
    return this;
  }

  /**
   * Get latencyInjectionFaultConfig
   * @return latencyInjectionFaultConfig
   */
  @javax.annotation.Nullable
  public LatencyInjectionFaultConfig getLatencyInjectionFaultConfig() {
    return latencyInjectionFaultConfig;
  }

  public void setLatencyInjectionFaultConfig(LatencyInjectionFaultConfig latencyInjectionFaultConfig) {
    this.latencyInjectionFaultConfig = latencyInjectionFaultConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChaosConfig chaosConfig = (ChaosConfig) o;
    return Objects.equals(this.badResponsesFaultConfig, chaosConfig.badResponsesFaultConfig) &&
        Objects.equals(this.enabled, chaosConfig.enabled) &&
        Objects.equals(this.largeRequestFaultConfig, chaosConfig.largeRequestFaultConfig) &&
        Objects.equals(this.largeResponseFaultConfig, chaosConfig.largeResponseFaultConfig) &&
        Objects.equals(this.latencyInjectionFaultConfig, chaosConfig.latencyInjectionFaultConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(badResponsesFaultConfig, enabled, largeRequestFaultConfig, largeResponseFaultConfig, latencyInjectionFaultConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChaosConfig {\n");
    sb.append("    badResponsesFaultConfig: ").append(toIndentedString(badResponsesFaultConfig)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    largeRequestFaultConfig: ").append(toIndentedString(largeRequestFaultConfig)).append("\n");
    sb.append("    largeResponseFaultConfig: ").append(toIndentedString(largeResponseFaultConfig)).append("\n");
    sb.append("    latencyInjectionFaultConfig: ").append(toIndentedString(latencyInjectionFaultConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("badResponsesFaultConfig");
    openapiFields.add("enabled");
    openapiFields.add("largeRequestFaultConfig");
    openapiFields.add("largeResponseFaultConfig");
    openapiFields.add("latencyInjectionFaultConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("enabled");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChaosConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChaosConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChaosConfig is not found in the empty JSON string", ChaosConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChaosConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChaosConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ChaosConfig.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `badResponsesFaultConfig`
      if (jsonObj.get("badResponsesFaultConfig") != null && !jsonObj.get("badResponsesFaultConfig").isJsonNull()) {
        BadResponsesFaultConfig.validateJsonElement(jsonObj.get("badResponsesFaultConfig"));
      }
      // validate the optional field `largeRequestFaultConfig`
      if (jsonObj.get("largeRequestFaultConfig") != null && !jsonObj.get("largeRequestFaultConfig").isJsonNull()) {
        LargeRequestFaultConfig.validateJsonElement(jsonObj.get("largeRequestFaultConfig"));
      }
      // validate the optional field `largeResponseFaultConfig`
      if (jsonObj.get("largeResponseFaultConfig") != null && !jsonObj.get("largeResponseFaultConfig").isJsonNull()) {
        LargeResponseFaultConfig.validateJsonElement(jsonObj.get("largeResponseFaultConfig"));
      }
      // validate the optional field `latencyInjectionFaultConfig`
      if (jsonObj.get("latencyInjectionFaultConfig") != null && !jsonObj.get("latencyInjectionFaultConfig").isJsonNull()) {
        LatencyInjectionFaultConfig.validateJsonElement(jsonObj.get("latencyInjectionFaultConfig"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChaosConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChaosConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChaosConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChaosConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<ChaosConfig>() {
           @Override
           public void write(JsonWriter out, ChaosConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChaosConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChaosConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChaosConfig
   * @throws IOException if the JSON string is invalid with respect to ChaosConfig
   */
  public static ChaosConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChaosConfig.class);
  }

  /**
   * Convert an instance of ChaosConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

