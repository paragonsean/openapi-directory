/*
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The configuration for cors support
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:27.562730-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CorsSettings {
  public static final String SERIALIZED_NAME_ALLOW_CREDENTIALS = "allowCredentials";
  @SerializedName(SERIALIZED_NAME_ALLOW_CREDENTIALS)
  private Boolean allowCredentials;

  public static final String SERIALIZED_NAME_ALLOW_HEADERS = "allowHeaders";
  @SerializedName(SERIALIZED_NAME_ALLOW_HEADERS)
  private List<String> allowHeaders = new ArrayList<>();

  public static final String SERIALIZED_NAME_ALLOW_METHODS = "allowMethods";
  @SerializedName(SERIALIZED_NAME_ALLOW_METHODS)
  private List<String> allowMethods = new ArrayList<>();

  public static final String SERIALIZED_NAME_ALLOW_ORIGIN = "allowOrigin";
  @SerializedName(SERIALIZED_NAME_ALLOW_ORIGIN)
  private String allowOrigin;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_EXCLUDED_PATTERNS = "excludedPatterns";
  @SerializedName(SERIALIZED_NAME_EXCLUDED_PATTERNS)
  private List<String> excludedPatterns = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXPOSE_HEADERS = "exposeHeaders";
  @SerializedName(SERIALIZED_NAME_EXPOSE_HEADERS)
  private List<String> exposeHeaders = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAX_AGE = "maxAge";
  @SerializedName(SERIALIZED_NAME_MAX_AGE)
  private Integer maxAge;

  public CorsSettings() {
  }

  public CorsSettings allowCredentials(Boolean allowCredentials) {
    this.allowCredentials = allowCredentials;
    return this;
  }

  /**
   * Allow to pass credentials
   * @return allowCredentials
   */
  @javax.annotation.Nonnull
  public Boolean getAllowCredentials() {
    return allowCredentials;
  }

  public void setAllowCredentials(Boolean allowCredentials) {
    this.allowCredentials = allowCredentials;
  }


  public CorsSettings allowHeaders(List<String> allowHeaders) {
    this.allowHeaders = allowHeaders;
    return this;
  }

  public CorsSettings addAllowHeadersItem(String allowHeadersItem) {
    if (this.allowHeaders == null) {
      this.allowHeaders = new ArrayList<>();
    }
    this.allowHeaders.add(allowHeadersItem);
    return this;
  }

  /**
   * The cors allowed headers
   * @return allowHeaders
   */
  @javax.annotation.Nonnull
  public List<String> getAllowHeaders() {
    return allowHeaders;
  }

  public void setAllowHeaders(List<String> allowHeaders) {
    this.allowHeaders = allowHeaders;
  }


  public CorsSettings allowMethods(List<String> allowMethods) {
    this.allowMethods = allowMethods;
    return this;
  }

  public CorsSettings addAllowMethodsItem(String allowMethodsItem) {
    if (this.allowMethods == null) {
      this.allowMethods = new ArrayList<>();
    }
    this.allowMethods.add(allowMethodsItem);
    return this;
  }

  /**
   * The cors allowed methods
   * @return allowMethods
   */
  @javax.annotation.Nonnull
  public List<String> getAllowMethods() {
    return allowMethods;
  }

  public void setAllowMethods(List<String> allowMethods) {
    this.allowMethods = allowMethods;
  }


  public CorsSettings allowOrigin(String allowOrigin) {
    this.allowOrigin = allowOrigin;
    return this;
  }

  /**
   * The cors allowed origin
   * @return allowOrigin
   */
  @javax.annotation.Nonnull
  public String getAllowOrigin() {
    return allowOrigin;
  }

  public void setAllowOrigin(String allowOrigin) {
    this.allowOrigin = allowOrigin;
  }


  public CorsSettings enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Whether or not cors is enabled
   * @return enabled
   */
  @javax.annotation.Nonnull
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public CorsSettings excludedPatterns(List<String> excludedPatterns) {
    this.excludedPatterns = excludedPatterns;
    return this;
  }

  public CorsSettings addExcludedPatternsItem(String excludedPatternsItem) {
    if (this.excludedPatterns == null) {
      this.excludedPatterns = new ArrayList<>();
    }
    this.excludedPatterns.add(excludedPatternsItem);
    return this;
  }

  /**
   * The cors excluded patterns
   * @return excludedPatterns
   */
  @javax.annotation.Nonnull
  public List<String> getExcludedPatterns() {
    return excludedPatterns;
  }

  public void setExcludedPatterns(List<String> excludedPatterns) {
    this.excludedPatterns = excludedPatterns;
  }


  public CorsSettings exposeHeaders(List<String> exposeHeaders) {
    this.exposeHeaders = exposeHeaders;
    return this;
  }

  public CorsSettings addExposeHeadersItem(String exposeHeadersItem) {
    if (this.exposeHeaders == null) {
      this.exposeHeaders = new ArrayList<>();
    }
    this.exposeHeaders.add(exposeHeadersItem);
    return this;
  }

  /**
   * The cors exposed header
   * @return exposeHeaders
   */
  @javax.annotation.Nonnull
  public List<String> getExposeHeaders() {
    return exposeHeaders;
  }

  public void setExposeHeaders(List<String> exposeHeaders) {
    this.exposeHeaders = exposeHeaders;
  }


  public CorsSettings maxAge(Integer maxAge) {
    this.maxAge = maxAge;
    return this;
  }

  /**
   * Cors max age
   * @return maxAge
   */
  @javax.annotation.Nonnull
  public Integer getMaxAge() {
    return maxAge;
  }

  public void setMaxAge(Integer maxAge) {
    this.maxAge = maxAge;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CorsSettings corsSettings = (CorsSettings) o;
    return Objects.equals(this.allowCredentials, corsSettings.allowCredentials) &&
        Objects.equals(this.allowHeaders, corsSettings.allowHeaders) &&
        Objects.equals(this.allowMethods, corsSettings.allowMethods) &&
        Objects.equals(this.allowOrigin, corsSettings.allowOrigin) &&
        Objects.equals(this.enabled, corsSettings.enabled) &&
        Objects.equals(this.excludedPatterns, corsSettings.excludedPatterns) &&
        Objects.equals(this.exposeHeaders, corsSettings.exposeHeaders) &&
        Objects.equals(this.maxAge, corsSettings.maxAge);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowCredentials, allowHeaders, allowMethods, allowOrigin, enabled, excludedPatterns, exposeHeaders, maxAge);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CorsSettings {\n");
    sb.append("    allowCredentials: ").append(toIndentedString(allowCredentials)).append("\n");
    sb.append("    allowHeaders: ").append(toIndentedString(allowHeaders)).append("\n");
    sb.append("    allowMethods: ").append(toIndentedString(allowMethods)).append("\n");
    sb.append("    allowOrigin: ").append(toIndentedString(allowOrigin)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    excludedPatterns: ").append(toIndentedString(excludedPatterns)).append("\n");
    sb.append("    exposeHeaders: ").append(toIndentedString(exposeHeaders)).append("\n");
    sb.append("    maxAge: ").append(toIndentedString(maxAge)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowCredentials");
    openapiFields.add("allowHeaders");
    openapiFields.add("allowMethods");
    openapiFields.add("allowOrigin");
    openapiFields.add("enabled");
    openapiFields.add("excludedPatterns");
    openapiFields.add("exposeHeaders");
    openapiFields.add("maxAge");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("allowCredentials");
    openapiRequiredFields.add("allowHeaders");
    openapiRequiredFields.add("allowMethods");
    openapiRequiredFields.add("allowOrigin");
    openapiRequiredFields.add("enabled");
    openapiRequiredFields.add("excludedPatterns");
    openapiRequiredFields.add("exposeHeaders");
    openapiRequiredFields.add("maxAge");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CorsSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CorsSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CorsSettings is not found in the empty JSON string", CorsSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CorsSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CorsSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CorsSettings.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("allowHeaders") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("allowHeaders").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowHeaders` to be an array in the JSON string but got `%s`", jsonObj.get("allowHeaders").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("allowMethods") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("allowMethods").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowMethods` to be an array in the JSON string but got `%s`", jsonObj.get("allowMethods").toString()));
      }
      if (!jsonObj.get("allowOrigin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowOrigin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("allowOrigin").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("excludedPatterns") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("excludedPatterns").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludedPatterns` to be an array in the JSON string but got `%s`", jsonObj.get("excludedPatterns").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("exposeHeaders") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("exposeHeaders").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `exposeHeaders` to be an array in the JSON string but got `%s`", jsonObj.get("exposeHeaders").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CorsSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CorsSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CorsSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CorsSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<CorsSettings>() {
           @Override
           public void write(JsonWriter out, CorsSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CorsSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CorsSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CorsSettings
   * @throws IOException if the JSON string is invalid with respect to CorsSettings
   */
  public static CorsSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CorsSettings.class);
  }

  /**
   * Convert an instance of CorsSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

