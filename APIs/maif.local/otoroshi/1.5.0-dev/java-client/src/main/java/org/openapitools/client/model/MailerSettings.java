/*
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration for mailgun api client
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:27.562730-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MailerSettings {
  public static final String SERIALIZED_NAME_API_KEY = "apiKey";
  @SerializedName(SERIALIZED_NAME_API_KEY)
  private String apiKey;

  public static final String SERIALIZED_NAME_API_KEY_PRIVATE = "apiKeyPrivate";
  @SerializedName(SERIALIZED_NAME_API_KEY_PRIVATE)
  private String apiKeyPrivate;

  public static final String SERIALIZED_NAME_API_KEY_PUBLIC = "apiKeyPublic";
  @SerializedName(SERIALIZED_NAME_API_KEY_PUBLIC)
  private String apiKeyPublic;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_EU = "eu";
  @SerializedName(SERIALIZED_NAME_EU)
  private Boolean eu;

  public static final String SERIALIZED_NAME_HEADER = "header";
  @SerializedName(SERIALIZED_NAME_HEADER)
  private Map<String, String> header = new HashMap<>();

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public MailerSettings() {
  }

  public MailerSettings apiKey(String apiKey) {
    this.apiKey = apiKey;
    return this;
  }

  /**
   * Mailgun mailer api key
   * @return apiKey
   */
  @javax.annotation.Nonnull
  public String getApiKey() {
    return apiKey;
  }

  public void setApiKey(String apiKey) {
    this.apiKey = apiKey;
  }


  public MailerSettings apiKeyPrivate(String apiKeyPrivate) {
    this.apiKeyPrivate = apiKeyPrivate;
    return this;
  }

  /**
   * Mailjet mailer private api key
   * @return apiKeyPrivate
   */
  @javax.annotation.Nullable
  public String getApiKeyPrivate() {
    return apiKeyPrivate;
  }

  public void setApiKeyPrivate(String apiKeyPrivate) {
    this.apiKeyPrivate = apiKeyPrivate;
  }


  public MailerSettings apiKeyPublic(String apiKeyPublic) {
    this.apiKeyPublic = apiKeyPublic;
    return this;
  }

  /**
   * Mailjet mailer public api key
   * @return apiKeyPublic
   */
  @javax.annotation.Nullable
  public String getApiKeyPublic() {
    return apiKeyPublic;
  }

  public void setApiKeyPublic(String apiKeyPublic) {
    this.apiKeyPublic = apiKeyPublic;
  }


  public MailerSettings domain(String domain) {
    this.domain = domain;
    return this;
  }

  /**
   * Mailgun mailer domain
   * @return domain
   */
  @javax.annotation.Nonnull
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }


  public MailerSettings eu(Boolean eu) {
    this.eu = eu;
    return this;
  }

  /**
   * Mailgun mailer, use EU tenant api
   * @return eu
   */
  @javax.annotation.Nullable
  public Boolean getEu() {
    return eu;
  }

  public void setEu(Boolean eu) {
    this.eu = eu;
  }


  public MailerSettings header(Map<String, String> header) {
    this.header = header;
    return this;
  }

  public MailerSettings putHeaderItem(String key, String headerItem) {
    if (this.header == null) {
      this.header = new HashMap<>();
    }
    this.header.put(key, headerItem);
    return this;
  }

  /**
   * Generic mailer headers
   * @return header
   */
  @javax.annotation.Nullable
  public Map<String, String> getHeader() {
    return header;
  }

  public void setHeader(Map<String, String> header) {
    this.header = header;
  }


  public MailerSettings type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Type of the mailer: console, generic, mailgun, mailjet
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public MailerSettings url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Generic mailer url
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MailerSettings mailerSettings = (MailerSettings) o;
    return Objects.equals(this.apiKey, mailerSettings.apiKey) &&
        Objects.equals(this.apiKeyPrivate, mailerSettings.apiKeyPrivate) &&
        Objects.equals(this.apiKeyPublic, mailerSettings.apiKeyPublic) &&
        Objects.equals(this.domain, mailerSettings.domain) &&
        Objects.equals(this.eu, mailerSettings.eu) &&
        Objects.equals(this.header, mailerSettings.header) &&
        Objects.equals(this.type, mailerSettings.type) &&
        Objects.equals(this.url, mailerSettings.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiKey, apiKeyPrivate, apiKeyPublic, domain, eu, header, type, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MailerSettings {\n");
    sb.append("    apiKey: ").append(toIndentedString(apiKey)).append("\n");
    sb.append("    apiKeyPrivate: ").append(toIndentedString(apiKeyPrivate)).append("\n");
    sb.append("    apiKeyPublic: ").append(toIndentedString(apiKeyPublic)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    eu: ").append(toIndentedString(eu)).append("\n");
    sb.append("    header: ").append(toIndentedString(header)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("apiKey");
    openapiFields.add("apiKeyPrivate");
    openapiFields.add("apiKeyPublic");
    openapiFields.add("domain");
    openapiFields.add("eu");
    openapiFields.add("header");
    openapiFields.add("type");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("apiKey");
    openapiRequiredFields.add("domain");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MailerSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MailerSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MailerSettings is not found in the empty JSON string", MailerSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MailerSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MailerSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MailerSettings.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("apiKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apiKey").toString()));
      }
      if ((jsonObj.get("apiKeyPrivate") != null && !jsonObj.get("apiKeyPrivate").isJsonNull()) && !jsonObj.get("apiKeyPrivate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiKeyPrivate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apiKeyPrivate").toString()));
      }
      if ((jsonObj.get("apiKeyPublic") != null && !jsonObj.get("apiKeyPublic").isJsonNull()) && !jsonObj.get("apiKeyPublic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiKeyPublic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apiKeyPublic").toString()));
      }
      if (!jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MailerSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MailerSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MailerSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MailerSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<MailerSettings>() {
           @Override
           public void write(JsonWriter out, MailerSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MailerSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MailerSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MailerSettings
   * @throws IOException if the JSON string is invalid with respect to MailerSettings
   */
  public static MailerSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MailerSettings.class);
  }

  /**
   * Convert an instance of MailerSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

