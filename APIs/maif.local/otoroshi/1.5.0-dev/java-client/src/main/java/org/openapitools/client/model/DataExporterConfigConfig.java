/*
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.CustomDataExporterConfig;
import org.openapitools.client.model.ElasticConfig;
import org.openapitools.client.model.FileDataExporterConfig;
import org.openapitools.client.model.KafkaConfig;
import org.openapitools.client.model.MailerConsoleExporterConfig;
import org.openapitools.client.model.MailerGenericExporterConfig;
import org.openapitools.client.model.MailerMailgunExporterConfig;
import org.openapitools.client.model.MailerMailjetExporterConfig;
import org.openapitools.client.model.MailerSendgridExporterConfig;
import org.openapitools.client.model.PulsarDataExporterConfig;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:27.562730-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataExporterConfigConfig extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(DataExporterConfigConfig.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!DataExporterConfigConfig.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'DataExporterConfigConfig' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ElasticConfig> adapterElasticConfig = gson.getDelegateAdapter(this, TypeToken.get(ElasticConfig.class));
            final TypeAdapter<KafkaConfig> adapterKafkaConfig = gson.getDelegateAdapter(this, TypeToken.get(KafkaConfig.class));
            final TypeAdapter<PulsarDataExporterConfig> adapterPulsarDataExporterConfig = gson.getDelegateAdapter(this, TypeToken.get(PulsarDataExporterConfig.class));
            final TypeAdapter<FileDataExporterConfig> adapterFileDataExporterConfig = gson.getDelegateAdapter(this, TypeToken.get(FileDataExporterConfig.class));
            final TypeAdapter<MailerGenericExporterConfig> adapterMailerGenericExporterConfig = gson.getDelegateAdapter(this, TypeToken.get(MailerGenericExporterConfig.class));
            final TypeAdapter<MailerConsoleExporterConfig> adapterMailerConsoleExporterConfig = gson.getDelegateAdapter(this, TypeToken.get(MailerConsoleExporterConfig.class));
            final TypeAdapter<MailerMailgunExporterConfig> adapterMailerMailgunExporterConfig = gson.getDelegateAdapter(this, TypeToken.get(MailerMailgunExporterConfig.class));
            final TypeAdapter<MailerMailjetExporterConfig> adapterMailerMailjetExporterConfig = gson.getDelegateAdapter(this, TypeToken.get(MailerMailjetExporterConfig.class));
            final TypeAdapter<MailerSendgridExporterConfig> adapterMailerSendgridExporterConfig = gson.getDelegateAdapter(this, TypeToken.get(MailerSendgridExporterConfig.class));
            final TypeAdapter<Object> adapterObject = gson.getDelegateAdapter(this, TypeToken.get(Object.class));
            final TypeAdapter<CustomDataExporterConfig> adapterCustomDataExporterConfig = gson.getDelegateAdapter(this, TypeToken.get(CustomDataExporterConfig.class));

            return (TypeAdapter<T>) new TypeAdapter<DataExporterConfigConfig>() {
                @Override
                public void write(JsonWriter out, DataExporterConfigConfig value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `ElasticConfig`
                    if (value.getActualInstance() instanceof ElasticConfig) {
                        JsonElement element = adapterElasticConfig.toJsonTree((ElasticConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `KafkaConfig`
                    if (value.getActualInstance() instanceof KafkaConfig) {
                        JsonElement element = adapterKafkaConfig.toJsonTree((KafkaConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PulsarDataExporterConfig`
                    if (value.getActualInstance() instanceof PulsarDataExporterConfig) {
                        JsonElement element = adapterPulsarDataExporterConfig.toJsonTree((PulsarDataExporterConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `FileDataExporterConfig`
                    if (value.getActualInstance() instanceof FileDataExporterConfig) {
                        JsonElement element = adapterFileDataExporterConfig.toJsonTree((FileDataExporterConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `MailerGenericExporterConfig`
                    if (value.getActualInstance() instanceof MailerGenericExporterConfig) {
                        JsonElement element = adapterMailerGenericExporterConfig.toJsonTree((MailerGenericExporterConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `MailerConsoleExporterConfig`
                    if (value.getActualInstance() instanceof MailerConsoleExporterConfig) {
                        JsonElement element = adapterMailerConsoleExporterConfig.toJsonTree((MailerConsoleExporterConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `MailerMailgunExporterConfig`
                    if (value.getActualInstance() instanceof MailerMailgunExporterConfig) {
                        JsonElement element = adapterMailerMailgunExporterConfig.toJsonTree((MailerMailgunExporterConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `MailerMailjetExporterConfig`
                    if (value.getActualInstance() instanceof MailerMailjetExporterConfig) {
                        JsonElement element = adapterMailerMailjetExporterConfig.toJsonTree((MailerMailjetExporterConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `MailerSendgridExporterConfig`
                    if (value.getActualInstance() instanceof MailerSendgridExporterConfig) {
                        JsonElement element = adapterMailerSendgridExporterConfig.toJsonTree((MailerSendgridExporterConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `Object`
                    if (value.getActualInstance() instanceof Object) {
                        JsonPrimitive primitive = adapterObject.toJsonTree((Object)value.getActualInstance()).getAsJsonPrimitive();
                        elementAdapter.write(out, primitive);
                        return;
                    }
                    // check if the actual instance is of the type `CustomDataExporterConfig`
                    if (value.getActualInstance() instanceof CustomDataExporterConfig) {
                        JsonElement element = adapterCustomDataExporterConfig.toJsonTree((CustomDataExporterConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: CustomDataExporterConfig, ElasticConfig, FileDataExporterConfig, KafkaConfig, MailerConsoleExporterConfig, MailerGenericExporterConfig, MailerMailgunExporterConfig, MailerMailjetExporterConfig, MailerSendgridExporterConfig, Object, PulsarDataExporterConfig");
                }

                @Override
                public DataExporterConfigConfig read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize ElasticConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ElasticConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterElasticConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ElasticConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ElasticConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ElasticConfig'", e);
                    }
                    // deserialize KafkaConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        KafkaConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterKafkaConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'KafkaConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for KafkaConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'KafkaConfig'", e);
                    }
                    // deserialize PulsarDataExporterConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PulsarDataExporterConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterPulsarDataExporterConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'PulsarDataExporterConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PulsarDataExporterConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PulsarDataExporterConfig'", e);
                    }
                    // deserialize FileDataExporterConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        FileDataExporterConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterFileDataExporterConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'FileDataExporterConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for FileDataExporterConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'FileDataExporterConfig'", e);
                    }
                    // deserialize MailerGenericExporterConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MailerGenericExporterConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterMailerGenericExporterConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'MailerGenericExporterConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for MailerGenericExporterConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'MailerGenericExporterConfig'", e);
                    }
                    // deserialize MailerConsoleExporterConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MailerConsoleExporterConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterMailerConsoleExporterConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'MailerConsoleExporterConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for MailerConsoleExporterConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'MailerConsoleExporterConfig'", e);
                    }
                    // deserialize MailerMailgunExporterConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MailerMailgunExporterConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterMailerMailgunExporterConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'MailerMailgunExporterConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for MailerMailgunExporterConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'MailerMailgunExporterConfig'", e);
                    }
                    // deserialize MailerMailjetExporterConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MailerMailjetExporterConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterMailerMailjetExporterConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'MailerMailjetExporterConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for MailerMailjetExporterConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'MailerMailjetExporterConfig'", e);
                    }
                    // deserialize MailerSendgridExporterConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MailerSendgridExporterConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterMailerSendgridExporterConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'MailerSendgridExporterConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for MailerSendgridExporterConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'MailerSendgridExporterConfig'", e);
                    }
                    // deserialize Object
                    try {
                        // validate the JSON object to see if any exception is thrown
                        if (!jsonElement.getAsJsonPrimitive().isNumber()) {
                            throw new IllegalArgumentException(String.format("Expected json element to be of type Number in the JSON string but got `%s`", jsonElement.toString()));
                        }
                        actualAdapter = adapterObject;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'Object'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for Object failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'Object'", e);
                    }
                    // deserialize CustomDataExporterConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CustomDataExporterConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterCustomDataExporterConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CustomDataExporterConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CustomDataExporterConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CustomDataExporterConfig'", e);
                    }

                    if (match == 1) {
                        DataExporterConfigConfig ret = new DataExporterConfigConfig();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for DataExporterConfigConfig: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public DataExporterConfigConfig() {
        super("oneOf", Boolean.FALSE);
    }

    public DataExporterConfigConfig(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("ElasticConfig", ElasticConfig.class);
        schemas.put("KafkaConfig", KafkaConfig.class);
        schemas.put("PulsarDataExporterConfig", PulsarDataExporterConfig.class);
        schemas.put("FileDataExporterConfig", FileDataExporterConfig.class);
        schemas.put("MailerGenericExporterConfig", MailerGenericExporterConfig.class);
        schemas.put("MailerConsoleExporterConfig", MailerConsoleExporterConfig.class);
        schemas.put("MailerMailgunExporterConfig", MailerMailgunExporterConfig.class);
        schemas.put("MailerMailjetExporterConfig", MailerMailjetExporterConfig.class);
        schemas.put("MailerSendgridExporterConfig", MailerSendgridExporterConfig.class);
        schemas.put("Object", Object.class);
        schemas.put("CustomDataExporterConfig", CustomDataExporterConfig.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return DataExporterConfigConfig.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * CustomDataExporterConfig, ElasticConfig, FileDataExporterConfig, KafkaConfig, MailerConsoleExporterConfig, MailerGenericExporterConfig, MailerMailgunExporterConfig, MailerMailjetExporterConfig, MailerSendgridExporterConfig, Object, PulsarDataExporterConfig
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof ElasticConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof KafkaConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PulsarDataExporterConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof FileDataExporterConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MailerGenericExporterConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MailerConsoleExporterConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MailerMailgunExporterConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MailerMailjetExporterConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MailerSendgridExporterConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof Object) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CustomDataExporterConfig) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be CustomDataExporterConfig, ElasticConfig, FileDataExporterConfig, KafkaConfig, MailerConsoleExporterConfig, MailerGenericExporterConfig, MailerMailgunExporterConfig, MailerMailjetExporterConfig, MailerSendgridExporterConfig, Object, PulsarDataExporterConfig");
    }

    /**
     * Get the actual instance, which can be the following:
     * CustomDataExporterConfig, ElasticConfig, FileDataExporterConfig, KafkaConfig, MailerConsoleExporterConfig, MailerGenericExporterConfig, MailerMailgunExporterConfig, MailerMailjetExporterConfig, MailerSendgridExporterConfig, Object, PulsarDataExporterConfig
     *
     * @return The actual instance (CustomDataExporterConfig, ElasticConfig, FileDataExporterConfig, KafkaConfig, MailerConsoleExporterConfig, MailerGenericExporterConfig, MailerMailgunExporterConfig, MailerMailjetExporterConfig, MailerSendgridExporterConfig, Object, PulsarDataExporterConfig)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `ElasticConfig`. If the actual instance is not `ElasticConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ElasticConfig`
     * @throws ClassCastException if the instance is not `ElasticConfig`
     */
    public ElasticConfig getElasticConfig() throws ClassCastException {
        return (ElasticConfig)super.getActualInstance();
    }
    /**
     * Get the actual instance of `KafkaConfig`. If the actual instance is not `KafkaConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `KafkaConfig`
     * @throws ClassCastException if the instance is not `KafkaConfig`
     */
    public KafkaConfig getKafkaConfig() throws ClassCastException {
        return (KafkaConfig)super.getActualInstance();
    }
    /**
     * Get the actual instance of `PulsarDataExporterConfig`. If the actual instance is not `PulsarDataExporterConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PulsarDataExporterConfig`
     * @throws ClassCastException if the instance is not `PulsarDataExporterConfig`
     */
    public PulsarDataExporterConfig getPulsarDataExporterConfig() throws ClassCastException {
        return (PulsarDataExporterConfig)super.getActualInstance();
    }
    /**
     * Get the actual instance of `FileDataExporterConfig`. If the actual instance is not `FileDataExporterConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `FileDataExporterConfig`
     * @throws ClassCastException if the instance is not `FileDataExporterConfig`
     */
    public FileDataExporterConfig getFileDataExporterConfig() throws ClassCastException {
        return (FileDataExporterConfig)super.getActualInstance();
    }
    /**
     * Get the actual instance of `MailerGenericExporterConfig`. If the actual instance is not `MailerGenericExporterConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MailerGenericExporterConfig`
     * @throws ClassCastException if the instance is not `MailerGenericExporterConfig`
     */
    public MailerGenericExporterConfig getMailerGenericExporterConfig() throws ClassCastException {
        return (MailerGenericExporterConfig)super.getActualInstance();
    }
    /**
     * Get the actual instance of `MailerConsoleExporterConfig`. If the actual instance is not `MailerConsoleExporterConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MailerConsoleExporterConfig`
     * @throws ClassCastException if the instance is not `MailerConsoleExporterConfig`
     */
    public MailerConsoleExporterConfig getMailerConsoleExporterConfig() throws ClassCastException {
        return (MailerConsoleExporterConfig)super.getActualInstance();
    }
    /**
     * Get the actual instance of `MailerMailgunExporterConfig`. If the actual instance is not `MailerMailgunExporterConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MailerMailgunExporterConfig`
     * @throws ClassCastException if the instance is not `MailerMailgunExporterConfig`
     */
    public MailerMailgunExporterConfig getMailerMailgunExporterConfig() throws ClassCastException {
        return (MailerMailgunExporterConfig)super.getActualInstance();
    }
    /**
     * Get the actual instance of `MailerMailjetExporterConfig`. If the actual instance is not `MailerMailjetExporterConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MailerMailjetExporterConfig`
     * @throws ClassCastException if the instance is not `MailerMailjetExporterConfig`
     */
    public MailerMailjetExporterConfig getMailerMailjetExporterConfig() throws ClassCastException {
        return (MailerMailjetExporterConfig)super.getActualInstance();
    }
    /**
     * Get the actual instance of `MailerSendgridExporterConfig`. If the actual instance is not `MailerSendgridExporterConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MailerSendgridExporterConfig`
     * @throws ClassCastException if the instance is not `MailerSendgridExporterConfig`
     */
    public MailerSendgridExporterConfig getMailerSendgridExporterConfig() throws ClassCastException {
        return (MailerSendgridExporterConfig)super.getActualInstance();
    }
    /**
     * Get the actual instance of `Object`. If the actual instance is not `Object`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Object`
     * @throws ClassCastException if the instance is not `Object`
     */
    public Object getObject() throws ClassCastException {
        return (Object)super.getActualInstance();
    }
    /**
     * Get the actual instance of `CustomDataExporterConfig`. If the actual instance is not `CustomDataExporterConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CustomDataExporterConfig`
     * @throws ClassCastException if the instance is not `CustomDataExporterConfig`
     */
    public CustomDataExporterConfig getCustomDataExporterConfig() throws ClassCastException {
        return (CustomDataExporterConfig)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to DataExporterConfigConfig
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with ElasticConfig
        try {
            ElasticConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ElasticConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with KafkaConfig
        try {
            KafkaConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for KafkaConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PulsarDataExporterConfig
        try {
            PulsarDataExporterConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PulsarDataExporterConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with FileDataExporterConfig
        try {
            FileDataExporterConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for FileDataExporterConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with MailerGenericExporterConfig
        try {
            MailerGenericExporterConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for MailerGenericExporterConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with MailerConsoleExporterConfig
        try {
            MailerConsoleExporterConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for MailerConsoleExporterConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with MailerMailgunExporterConfig
        try {
            MailerMailgunExporterConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for MailerMailgunExporterConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with MailerMailjetExporterConfig
        try {
            MailerMailjetExporterConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for MailerMailjetExporterConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with MailerSendgridExporterConfig
        try {
            MailerSendgridExporterConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for MailerSendgridExporterConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with Object
        try {
            if (!jsonElement.getAsJsonPrimitive().isNumber()) {
                throw new IllegalArgumentException(String.format("Expected json element to be of type Number in the JSON string but got `%s`", jsonElement.toString()));
            }
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for Object failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CustomDataExporterConfig
        try {
            CustomDataExporterConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CustomDataExporterConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for DataExporterConfigConfig with oneOf schemas: CustomDataExporterConfig, ElasticConfig, FileDataExporterConfig, KafkaConfig, MailerConsoleExporterConfig, MailerGenericExporterConfig, MailerMailgunExporterConfig, MailerMailjetExporterConfig, MailerSendgridExporterConfig, Object, PulsarDataExporterConfig. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of DataExporterConfigConfig given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of DataExporterConfigConfig
     * @throws IOException if the JSON string is invalid with respect to DataExporterConfigConfig
     */
    public static DataExporterConfigConfig fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, DataExporterConfigConfig.class);
    }

    /**
     * Convert an instance of DataExporterConfigConfig to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

