/*
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GlobalJwtVerifierAlgoSettings;
import org.openapitools.client.model.TransformSettings;
import org.openapitools.client.model.VerificationSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Strategy where signature and field values are verified, trasnformed and then token si re-signed
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:27.562730-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Transform {
  public static final String SERIALIZED_NAME_ALGO_SETTINGS = "algoSettings";
  @SerializedName(SERIALIZED_NAME_ALGO_SETTINGS)
  private GlobalJwtVerifierAlgoSettings algoSettings;

  public static final String SERIALIZED_NAME_TRANSFORM_SETTINGS = "transformSettings";
  @SerializedName(SERIALIZED_NAME_TRANSFORM_SETTINGS)
  private TransformSettings transformSettings;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_VERIFICATION_SETTINGS = "verificationSettings";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_SETTINGS)
  private VerificationSettings verificationSettings;

  public Transform() {
  }

  public Transform algoSettings(GlobalJwtVerifierAlgoSettings algoSettings) {
    this.algoSettings = algoSettings;
    return this;
  }

  /**
   * Get algoSettings
   * @return algoSettings
   */
  @javax.annotation.Nonnull
  public GlobalJwtVerifierAlgoSettings getAlgoSettings() {
    return algoSettings;
  }

  public void setAlgoSettings(GlobalJwtVerifierAlgoSettings algoSettings) {
    this.algoSettings = algoSettings;
  }


  public Transform transformSettings(TransformSettings transformSettings) {
    this.transformSettings = transformSettings;
    return this;
  }

  /**
   * Get transformSettings
   * @return transformSettings
   */
  @javax.annotation.Nullable
  public TransformSettings getTransformSettings() {
    return transformSettings;
  }

  public void setTransformSettings(TransformSettings transformSettings) {
    this.transformSettings = transformSettings;
  }


  public Transform type(String type) {
    this.type = type;
    return this;
  }

  /**
   * String with value Transform
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public Transform verificationSettings(VerificationSettings verificationSettings) {
    this.verificationSettings = verificationSettings;
    return this;
  }

  /**
   * Get verificationSettings
   * @return verificationSettings
   */
  @javax.annotation.Nonnull
  public VerificationSettings getVerificationSettings() {
    return verificationSettings;
  }

  public void setVerificationSettings(VerificationSettings verificationSettings) {
    this.verificationSettings = verificationSettings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Transform transform = (Transform) o;
    return Objects.equals(this.algoSettings, transform.algoSettings) &&
        Objects.equals(this.transformSettings, transform.transformSettings) &&
        Objects.equals(this.type, transform.type) &&
        Objects.equals(this.verificationSettings, transform.verificationSettings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(algoSettings, transformSettings, type, verificationSettings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Transform {\n");
    sb.append("    algoSettings: ").append(toIndentedString(algoSettings)).append("\n");
    sb.append("    transformSettings: ").append(toIndentedString(transformSettings)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    verificationSettings: ").append(toIndentedString(verificationSettings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("algoSettings");
    openapiFields.add("transformSettings");
    openapiFields.add("type");
    openapiFields.add("verificationSettings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("algoSettings");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("verificationSettings");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Transform
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Transform.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Transform is not found in the empty JSON string", Transform.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Transform.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Transform` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Transform.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `algoSettings`
      GlobalJwtVerifierAlgoSettings.validateJsonElement(jsonObj.get("algoSettings"));
      // validate the optional field `transformSettings`
      if (jsonObj.get("transformSettings") != null && !jsonObj.get("transformSettings").isJsonNull()) {
        TransformSettings.validateJsonElement(jsonObj.get("transformSettings"));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `verificationSettings`
      VerificationSettings.validateJsonElement(jsonObj.get("verificationSettings"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Transform.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Transform' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Transform> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Transform.class));

       return (TypeAdapter<T>) new TypeAdapter<Transform>() {
           @Override
           public void write(JsonWriter out, Transform value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Transform read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Transform given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Transform
   * @throws IOException if the JSON string is invalid with respect to Transform
   */
  public static Transform fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Transform.class);
  }

  /**
   * Convert an instance of Transform to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

