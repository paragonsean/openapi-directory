/*
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiKey;
import org.openapitools.client.model.Deleted;
import org.openapitools.client.model.Group;
import org.openapitools.client.model.PatchInner;
import org.openapitools.client.model.Quotas;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ApikeysApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ApikeysApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ApikeysApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for allApiKeys
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call allApiKeysCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/apikeys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "otoroshi_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call allApiKeysValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return allApiKeysCall(_callback);

    }

    /**
     * Get all api keys
     * Get all api keys
     * @return List&lt;ApiKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public List<ApiKey> allApiKeys() throws ApiException {
        ApiResponse<List<ApiKey>> localVarResp = allApiKeysWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get all api keys
     * Get all api keys
     * @return ApiResponse&lt;List&lt;ApiKey&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ApiKey>> allApiKeysWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = allApiKeysValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<ApiKey>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all api keys (asynchronously)
     * Get all api keys
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call allApiKeysAsync(final ApiCallback<List<ApiKey>> _callback) throws ApiException {

        okhttp3.Call localVarCall = allApiKeysValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<ApiKey>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiKey
     * @param serviceId The api key service id (required)
     * @param clientId the api key id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiKeyCall(String serviceId, String clientId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/services/{serviceId}/apikeys/{clientId}"
            .replace("{" + "serviceId" + "}", localVarApiClient.escapeString(serviceId.toString()))
            .replace("{" + "clientId" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "otoroshi_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiKeyValidateBeforeCall(String serviceId, String clientId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling apiKey(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling apiKey(Async)");
        }

        return apiKeyCall(serviceId, clientId, _callback);

    }

    /**
     * Get an api key
     * Get an api key for a specified service descriptor
     * @param serviceId The api key service id (required)
     * @param clientId the api key id (required)
     * @return ApiKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiKey apiKey(String serviceId, String clientId) throws ApiException {
        ApiResponse<ApiKey> localVarResp = apiKeyWithHttpInfo(serviceId, clientId);
        return localVarResp.getData();
    }

    /**
     * Get an api key
     * Get an api key for a specified service descriptor
     * @param serviceId The api key service id (required)
     * @param clientId the api key id (required)
     * @return ApiResponse&lt;ApiKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiKey> apiKeyWithHttpInfo(String serviceId, String clientId) throws ApiException {
        okhttp3.Call localVarCall = apiKeyValidateBeforeCall(serviceId, clientId, null);
        Type localVarReturnType = new TypeToken<ApiKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an api key (asynchronously)
     * Get an api key for a specified service descriptor
     * @param serviceId The api key service id (required)
     * @param clientId the api key id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiKeyAsync(String serviceId, String clientId, final ApiCallback<ApiKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiKeyValidateBeforeCall(serviceId, clientId, _callback);
        Type localVarReturnType = new TypeToken<ApiKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiKeyFromGroup
     * @param groupId The api key group id (required)
     * @param clientId the api key id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiKeyFromGroupCall(String groupId, String clientId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/groups/{groupId}/apikeys/{clientId}"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "clientId" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "otoroshi_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiKeyFromGroupValidateBeforeCall(String groupId, String clientId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling apiKeyFromGroup(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling apiKeyFromGroup(Async)");
        }

        return apiKeyFromGroupCall(groupId, clientId, _callback);

    }

    /**
     * Get an api key
     * Get an api key for a specified service group
     * @param groupId The api key group id (required)
     * @param clientId the api key id (required)
     * @return ApiKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiKey apiKeyFromGroup(String groupId, String clientId) throws ApiException {
        ApiResponse<ApiKey> localVarResp = apiKeyFromGroupWithHttpInfo(groupId, clientId);
        return localVarResp.getData();
    }

    /**
     * Get an api key
     * Get an api key for a specified service group
     * @param groupId The api key group id (required)
     * @param clientId the api key id (required)
     * @return ApiResponse&lt;ApiKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiKey> apiKeyFromGroupWithHttpInfo(String groupId, String clientId) throws ApiException {
        okhttp3.Call localVarCall = apiKeyFromGroupValidateBeforeCall(groupId, clientId, null);
        Type localVarReturnType = new TypeToken<ApiKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an api key (asynchronously)
     * Get an api key for a specified service group
     * @param groupId The api key group id (required)
     * @param clientId the api key id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiKeyFromGroupAsync(String groupId, String clientId, final ApiCallback<ApiKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiKeyFromGroupValidateBeforeCall(groupId, clientId, _callback);
        Type localVarReturnType = new TypeToken<ApiKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiKeyFromGroupQuotas
     * @param groupId The api key group id (required)
     * @param clientId the api key id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiKeyFromGroupQuotasCall(String groupId, String clientId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/groups/{groupId}/apikeys/{clientId}/quotas"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "clientId" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "otoroshi_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiKeyFromGroupQuotasValidateBeforeCall(String groupId, String clientId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling apiKeyFromGroupQuotas(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling apiKeyFromGroupQuotas(Async)");
        }

        return apiKeyFromGroupQuotasCall(groupId, clientId, _callback);

    }

    /**
     * Get the quota state of an api key
     * Get the quota state of an api key
     * @param groupId The api key group id (required)
     * @param clientId the api key id (required)
     * @return Quotas
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public Quotas apiKeyFromGroupQuotas(String groupId, String clientId) throws ApiException {
        ApiResponse<Quotas> localVarResp = apiKeyFromGroupQuotasWithHttpInfo(groupId, clientId);
        return localVarResp.getData();
    }

    /**
     * Get the quota state of an api key
     * Get the quota state of an api key
     * @param groupId The api key group id (required)
     * @param clientId the api key id (required)
     * @return ApiResponse&lt;Quotas&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Quotas> apiKeyFromGroupQuotasWithHttpInfo(String groupId, String clientId) throws ApiException {
        okhttp3.Call localVarCall = apiKeyFromGroupQuotasValidateBeforeCall(groupId, clientId, null);
        Type localVarReturnType = new TypeToken<Quotas>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the quota state of an api key (asynchronously)
     * Get the quota state of an api key
     * @param groupId The api key group id (required)
     * @param clientId the api key id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiKeyFromGroupQuotasAsync(String groupId, String clientId, final ApiCallback<Quotas> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiKeyFromGroupQuotasValidateBeforeCall(groupId, clientId, _callback);
        Type localVarReturnType = new TypeToken<Quotas>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiKeyGroup
     * @param serviceId The api key service id (required)
     * @param clientId the api key id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiKeyGroupCall(String serviceId, String clientId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/services/{serviceId}/apikeys/{clientId}/group"
            .replace("{" + "serviceId" + "}", localVarApiClient.escapeString(serviceId.toString()))
            .replace("{" + "clientId" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "otoroshi_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiKeyGroupValidateBeforeCall(String serviceId, String clientId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling apiKeyGroup(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling apiKeyGroup(Async)");
        }

        return apiKeyGroupCall(serviceId, clientId, _callback);

    }

    /**
     * Get the group of an api key
     * Get the group of an api key
     * @param serviceId The api key service id (required)
     * @param clientId the api key id (required)
     * @return Group
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public Group apiKeyGroup(String serviceId, String clientId) throws ApiException {
        ApiResponse<Group> localVarResp = apiKeyGroupWithHttpInfo(serviceId, clientId);
        return localVarResp.getData();
    }

    /**
     * Get the group of an api key
     * Get the group of an api key
     * @param serviceId The api key service id (required)
     * @param clientId the api key id (required)
     * @return ApiResponse&lt;Group&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Group> apiKeyGroupWithHttpInfo(String serviceId, String clientId) throws ApiException {
        okhttp3.Call localVarCall = apiKeyGroupValidateBeforeCall(serviceId, clientId, null);
        Type localVarReturnType = new TypeToken<Group>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the group of an api key (asynchronously)
     * Get the group of an api key
     * @param serviceId The api key service id (required)
     * @param clientId the api key id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiKeyGroupAsync(String serviceId, String clientId, final ApiCallback<Group> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiKeyGroupValidateBeforeCall(serviceId, clientId, _callback);
        Type localVarReturnType = new TypeToken<Group>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiKeyQuotas
     * @param serviceId The api key service id (required)
     * @param clientId the api key id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiKeyQuotasCall(String serviceId, String clientId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/services/{serviceId}/apikeys/{clientId}/quotas"
            .replace("{" + "serviceId" + "}", localVarApiClient.escapeString(serviceId.toString()))
            .replace("{" + "clientId" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "otoroshi_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiKeyQuotasValidateBeforeCall(String serviceId, String clientId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling apiKeyQuotas(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling apiKeyQuotas(Async)");
        }

        return apiKeyQuotasCall(serviceId, clientId, _callback);

    }

    /**
     * Get the quota state of an api key
     * Get the quota state of an api key
     * @param serviceId The api key service id (required)
     * @param clientId the api key id (required)
     * @return Quotas
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public Quotas apiKeyQuotas(String serviceId, String clientId) throws ApiException {
        ApiResponse<Quotas> localVarResp = apiKeyQuotasWithHttpInfo(serviceId, clientId);
        return localVarResp.getData();
    }

    /**
     * Get the quota state of an api key
     * Get the quota state of an api key
     * @param serviceId The api key service id (required)
     * @param clientId the api key id (required)
     * @return ApiResponse&lt;Quotas&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Quotas> apiKeyQuotasWithHttpInfo(String serviceId, String clientId) throws ApiException {
        okhttp3.Call localVarCall = apiKeyQuotasValidateBeforeCall(serviceId, clientId, null);
        Type localVarReturnType = new TypeToken<Quotas>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the quota state of an api key (asynchronously)
     * Get the quota state of an api key
     * @param serviceId The api key service id (required)
     * @param clientId the api key id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiKeyQuotasAsync(String serviceId, String clientId, final ApiCallback<Quotas> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiKeyQuotasValidateBeforeCall(serviceId, clientId, _callback);
        Type localVarReturnType = new TypeToken<Quotas>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiKeys
     * @param serviceId The api key service id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiKeysCall(String serviceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/services/{serviceId}/apikeys"
            .replace("{" + "serviceId" + "}", localVarApiClient.escapeString(serviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "otoroshi_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiKeysValidateBeforeCall(String serviceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling apiKeys(Async)");
        }

        return apiKeysCall(serviceId, _callback);

    }

    /**
     * Get all api keys for the group of a service
     * Get all api keys for the group of a service
     * @param serviceId The api key service id (required)
     * @return List&lt;ApiKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public List<ApiKey> apiKeys(String serviceId) throws ApiException {
        ApiResponse<List<ApiKey>> localVarResp = apiKeysWithHttpInfo(serviceId);
        return localVarResp.getData();
    }

    /**
     * Get all api keys for the group of a service
     * Get all api keys for the group of a service
     * @param serviceId The api key service id (required)
     * @return ApiResponse&lt;List&lt;ApiKey&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ApiKey>> apiKeysWithHttpInfo(String serviceId) throws ApiException {
        okhttp3.Call localVarCall = apiKeysValidateBeforeCall(serviceId, null);
        Type localVarReturnType = new TypeToken<List<ApiKey>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all api keys for the group of a service (asynchronously)
     * Get all api keys for the group of a service
     * @param serviceId The api key service id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiKeysAsync(String serviceId, final ApiCallback<List<ApiKey>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiKeysValidateBeforeCall(serviceId, _callback);
        Type localVarReturnType = new TypeToken<List<ApiKey>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiKeysFromGroup
     * @param groupId The api key group id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiKeysFromGroupCall(String groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/groups/{groupId}/apikeys"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "otoroshi_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiKeysFromGroupValidateBeforeCall(String groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling apiKeysFromGroup(Async)");
        }

        return apiKeysFromGroupCall(groupId, _callback);

    }

    /**
     * Get all api keys for the group of a service
     * Get all api keys for the group of a service
     * @param groupId The api key group id (required)
     * @return List&lt;ApiKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public List<ApiKey> apiKeysFromGroup(String groupId) throws ApiException {
        ApiResponse<List<ApiKey>> localVarResp = apiKeysFromGroupWithHttpInfo(groupId);
        return localVarResp.getData();
    }

    /**
     * Get all api keys for the group of a service
     * Get all api keys for the group of a service
     * @param groupId The api key group id (required)
     * @return ApiResponse&lt;List&lt;ApiKey&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ApiKey>> apiKeysFromGroupWithHttpInfo(String groupId) throws ApiException {
        okhttp3.Call localVarCall = apiKeysFromGroupValidateBeforeCall(groupId, null);
        Type localVarReturnType = new TypeToken<List<ApiKey>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all api keys for the group of a service (asynchronously)
     * Get all api keys for the group of a service
     * @param groupId The api key group id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiKeysFromGroupAsync(String groupId, final ApiCallback<List<ApiKey>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiKeysFromGroupValidateBeforeCall(groupId, _callback);
        Type localVarReturnType = new TypeToken<List<ApiKey>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createApiKey
     * @param serviceId The api key service id (required)
     * @param apiKey  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createApiKeyCall(String serviceId, ApiKey apiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiKey;

        // create path and map variables
        String localVarPath = "/api/services/{serviceId}/apikeys"
            .replace("{" + "serviceId" + "}", localVarApiClient.escapeString(serviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "otoroshi_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createApiKeyValidateBeforeCall(String serviceId, ApiKey apiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling createApiKey(Async)");
        }

        return createApiKeyCall(serviceId, apiKey, _callback);

    }

    /**
     * Create a new api key for a service
     * 
     * @param serviceId The api key service id (required)
     * @param apiKey  (optional)
     * @return ApiKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiKey createApiKey(String serviceId, ApiKey apiKey) throws ApiException {
        ApiResponse<ApiKey> localVarResp = createApiKeyWithHttpInfo(serviceId, apiKey);
        return localVarResp.getData();
    }

    /**
     * Create a new api key for a service
     * 
     * @param serviceId The api key service id (required)
     * @param apiKey  (optional)
     * @return ApiResponse&lt;ApiKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiKey> createApiKeyWithHttpInfo(String serviceId, ApiKey apiKey) throws ApiException {
        okhttp3.Call localVarCall = createApiKeyValidateBeforeCall(serviceId, apiKey, null);
        Type localVarReturnType = new TypeToken<ApiKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new api key for a service (asynchronously)
     * 
     * @param serviceId The api key service id (required)
     * @param apiKey  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createApiKeyAsync(String serviceId, ApiKey apiKey, final ApiCallback<ApiKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = createApiKeyValidateBeforeCall(serviceId, apiKey, _callback);
        Type localVarReturnType = new TypeToken<ApiKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createApiKeyFromGroup
     * @param groupId The api key group id (required)
     * @param apiKey  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createApiKeyFromGroupCall(String groupId, ApiKey apiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiKey;

        // create path and map variables
        String localVarPath = "/api/groups/{groupId}/apikeys"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "otoroshi_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createApiKeyFromGroupValidateBeforeCall(String groupId, ApiKey apiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling createApiKeyFromGroup(Async)");
        }

        return createApiKeyFromGroupCall(groupId, apiKey, _callback);

    }

    /**
     * Create a new api key for a group
     * Create a new api key for a group
     * @param groupId The api key group id (required)
     * @param apiKey  (optional)
     * @return ApiKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiKey createApiKeyFromGroup(String groupId, ApiKey apiKey) throws ApiException {
        ApiResponse<ApiKey> localVarResp = createApiKeyFromGroupWithHttpInfo(groupId, apiKey);
        return localVarResp.getData();
    }

    /**
     * Create a new api key for a group
     * Create a new api key for a group
     * @param groupId The api key group id (required)
     * @param apiKey  (optional)
     * @return ApiResponse&lt;ApiKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiKey> createApiKeyFromGroupWithHttpInfo(String groupId, ApiKey apiKey) throws ApiException {
        okhttp3.Call localVarCall = createApiKeyFromGroupValidateBeforeCall(groupId, apiKey, null);
        Type localVarReturnType = new TypeToken<ApiKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new api key for a group (asynchronously)
     * Create a new api key for a group
     * @param groupId The api key group id (required)
     * @param apiKey  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createApiKeyFromGroupAsync(String groupId, ApiKey apiKey, final ApiCallback<ApiKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = createApiKeyFromGroupValidateBeforeCall(groupId, apiKey, _callback);
        Type localVarReturnType = new TypeToken<ApiKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteApiKey
     * @param serviceId The api key service id (required)
     * @param clientId the api key id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteApiKeyCall(String serviceId, String clientId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/services/{serviceId}/apikeys/{clientId}"
            .replace("{" + "serviceId" + "}", localVarApiClient.escapeString(serviceId.toString()))
            .replace("{" + "clientId" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "otoroshi_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteApiKeyValidateBeforeCall(String serviceId, String clientId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling deleteApiKey(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling deleteApiKey(Async)");
        }

        return deleteApiKeyCall(serviceId, clientId, _callback);

    }

    /**
     * Delete an api key
     * Delete an api key for a specified service descriptor
     * @param serviceId The api key service id (required)
     * @param clientId the api key id (required)
     * @return Deleted
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public Deleted deleteApiKey(String serviceId, String clientId) throws ApiException {
        ApiResponse<Deleted> localVarResp = deleteApiKeyWithHttpInfo(serviceId, clientId);
        return localVarResp.getData();
    }

    /**
     * Delete an api key
     * Delete an api key for a specified service descriptor
     * @param serviceId The api key service id (required)
     * @param clientId the api key id (required)
     * @return ApiResponse&lt;Deleted&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Deleted> deleteApiKeyWithHttpInfo(String serviceId, String clientId) throws ApiException {
        okhttp3.Call localVarCall = deleteApiKeyValidateBeforeCall(serviceId, clientId, null);
        Type localVarReturnType = new TypeToken<Deleted>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an api key (asynchronously)
     * Delete an api key for a specified service descriptor
     * @param serviceId The api key service id (required)
     * @param clientId the api key id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteApiKeyAsync(String serviceId, String clientId, final ApiCallback<Deleted> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteApiKeyValidateBeforeCall(serviceId, clientId, _callback);
        Type localVarReturnType = new TypeToken<Deleted>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteApiKeyFromGroup
     * @param groupId The api key group id (required)
     * @param clientId the api key id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteApiKeyFromGroupCall(String groupId, String clientId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/groups/{groupId}/apikeys/{clientId}"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "clientId" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "otoroshi_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteApiKeyFromGroupValidateBeforeCall(String groupId, String clientId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling deleteApiKeyFromGroup(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling deleteApiKeyFromGroup(Async)");
        }

        return deleteApiKeyFromGroupCall(groupId, clientId, _callback);

    }

    /**
     * Delete an api key
     * Delete an api key for a specified service group
     * @param groupId The api key group id (required)
     * @param clientId the api key id (required)
     * @return Deleted
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public Deleted deleteApiKeyFromGroup(String groupId, String clientId) throws ApiException {
        ApiResponse<Deleted> localVarResp = deleteApiKeyFromGroupWithHttpInfo(groupId, clientId);
        return localVarResp.getData();
    }

    /**
     * Delete an api key
     * Delete an api key for a specified service group
     * @param groupId The api key group id (required)
     * @param clientId the api key id (required)
     * @return ApiResponse&lt;Deleted&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Deleted> deleteApiKeyFromGroupWithHttpInfo(String groupId, String clientId) throws ApiException {
        okhttp3.Call localVarCall = deleteApiKeyFromGroupValidateBeforeCall(groupId, clientId, null);
        Type localVarReturnType = new TypeToken<Deleted>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an api key (asynchronously)
     * Delete an api key for a specified service group
     * @param groupId The api key group id (required)
     * @param clientId the api key id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteApiKeyFromGroupAsync(String groupId, String clientId, final ApiCallback<Deleted> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteApiKeyFromGroupValidateBeforeCall(groupId, clientId, _callback);
        Type localVarReturnType = new TypeToken<Deleted>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchApiKey
     * @param serviceId The api key service id (required)
     * @param clientId the api key id (required)
     * @param patchInner  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchApiKeyCall(String serviceId, String clientId, List<PatchInner> patchInner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchInner;

        // create path and map variables
        String localVarPath = "/api/services/{serviceId}/apikeys/{clientId}"
            .replace("{" + "serviceId" + "}", localVarApiClient.escapeString(serviceId.toString()))
            .replace("{" + "clientId" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "otoroshi_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchApiKeyValidateBeforeCall(String serviceId, String clientId, List<PatchInner> patchInner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling patchApiKey(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling patchApiKey(Async)");
        }

        return patchApiKeyCall(serviceId, clientId, patchInner, _callback);

    }

    /**
     * Update an api key with a diff
     * Update an api key for a specified service descriptor with a diff
     * @param serviceId The api key service id (required)
     * @param clientId the api key id (required)
     * @param patchInner  (optional)
     * @return ApiKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiKey patchApiKey(String serviceId, String clientId, List<PatchInner> patchInner) throws ApiException {
        ApiResponse<ApiKey> localVarResp = patchApiKeyWithHttpInfo(serviceId, clientId, patchInner);
        return localVarResp.getData();
    }

    /**
     * Update an api key with a diff
     * Update an api key for a specified service descriptor with a diff
     * @param serviceId The api key service id (required)
     * @param clientId the api key id (required)
     * @param patchInner  (optional)
     * @return ApiResponse&lt;ApiKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiKey> patchApiKeyWithHttpInfo(String serviceId, String clientId, List<PatchInner> patchInner) throws ApiException {
        okhttp3.Call localVarCall = patchApiKeyValidateBeforeCall(serviceId, clientId, patchInner, null);
        Type localVarReturnType = new TypeToken<ApiKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an api key with a diff (asynchronously)
     * Update an api key for a specified service descriptor with a diff
     * @param serviceId The api key service id (required)
     * @param clientId the api key id (required)
     * @param patchInner  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchApiKeyAsync(String serviceId, String clientId, List<PatchInner> patchInner, final ApiCallback<ApiKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchApiKeyValidateBeforeCall(serviceId, clientId, patchInner, _callback);
        Type localVarReturnType = new TypeToken<ApiKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchApiKeyFromGroup
     * @param groupId The api key group id (required)
     * @param clientId the api key id (required)
     * @param patchInner  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchApiKeyFromGroupCall(String groupId, String clientId, List<PatchInner> patchInner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchInner;

        // create path and map variables
        String localVarPath = "/api/groups/{groupId}/apikeys/{clientId}"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "clientId" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "otoroshi_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchApiKeyFromGroupValidateBeforeCall(String groupId, String clientId, List<PatchInner> patchInner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling patchApiKeyFromGroup(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling patchApiKeyFromGroup(Async)");
        }

        return patchApiKeyFromGroupCall(groupId, clientId, patchInner, _callback);

    }

    /**
     * Update an api key with a diff
     * Update an api key for a specified service descriptor with a diff
     * @param groupId The api key group id (required)
     * @param clientId the api key id (required)
     * @param patchInner  (optional)
     * @return ApiKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiKey patchApiKeyFromGroup(String groupId, String clientId, List<PatchInner> patchInner) throws ApiException {
        ApiResponse<ApiKey> localVarResp = patchApiKeyFromGroupWithHttpInfo(groupId, clientId, patchInner);
        return localVarResp.getData();
    }

    /**
     * Update an api key with a diff
     * Update an api key for a specified service descriptor with a diff
     * @param groupId The api key group id (required)
     * @param clientId the api key id (required)
     * @param patchInner  (optional)
     * @return ApiResponse&lt;ApiKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiKey> patchApiKeyFromGroupWithHttpInfo(String groupId, String clientId, List<PatchInner> patchInner) throws ApiException {
        okhttp3.Call localVarCall = patchApiKeyFromGroupValidateBeforeCall(groupId, clientId, patchInner, null);
        Type localVarReturnType = new TypeToken<ApiKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an api key with a diff (asynchronously)
     * Update an api key for a specified service descriptor with a diff
     * @param groupId The api key group id (required)
     * @param clientId the api key id (required)
     * @param patchInner  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchApiKeyFromGroupAsync(String groupId, String clientId, List<PatchInner> patchInner, final ApiCallback<ApiKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchApiKeyFromGroupValidateBeforeCall(groupId, clientId, patchInner, _callback);
        Type localVarReturnType = new TypeToken<ApiKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resetApiKeyFromGroupQuotas
     * @param groupId The api key group id (required)
     * @param clientId the api key id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetApiKeyFromGroupQuotasCall(String groupId, String clientId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/groups/{groupId}/apikeys/{clientId}/quotas"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "clientId" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "otoroshi_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resetApiKeyFromGroupQuotasValidateBeforeCall(String groupId, String clientId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling resetApiKeyFromGroupQuotas(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling resetApiKeyFromGroupQuotas(Async)");
        }

        return resetApiKeyFromGroupQuotasCall(groupId, clientId, _callback);

    }

    /**
     * Reset the quota state of an api key
     * Reset the quota state of an api key
     * @param groupId The api key group id (required)
     * @param clientId the api key id (required)
     * @return Quotas
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public Quotas resetApiKeyFromGroupQuotas(String groupId, String clientId) throws ApiException {
        ApiResponse<Quotas> localVarResp = resetApiKeyFromGroupQuotasWithHttpInfo(groupId, clientId);
        return localVarResp.getData();
    }

    /**
     * Reset the quota state of an api key
     * Reset the quota state of an api key
     * @param groupId The api key group id (required)
     * @param clientId the api key id (required)
     * @return ApiResponse&lt;Quotas&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Quotas> resetApiKeyFromGroupQuotasWithHttpInfo(String groupId, String clientId) throws ApiException {
        okhttp3.Call localVarCall = resetApiKeyFromGroupQuotasValidateBeforeCall(groupId, clientId, null);
        Type localVarReturnType = new TypeToken<Quotas>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reset the quota state of an api key (asynchronously)
     * Reset the quota state of an api key
     * @param groupId The api key group id (required)
     * @param clientId the api key id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetApiKeyFromGroupQuotasAsync(String groupId, String clientId, final ApiCallback<Quotas> _callback) throws ApiException {

        okhttp3.Call localVarCall = resetApiKeyFromGroupQuotasValidateBeforeCall(groupId, clientId, _callback);
        Type localVarReturnType = new TypeToken<Quotas>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resetApiKeyQuotas
     * @param serviceId The api key service id (required)
     * @param clientId the api key id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetApiKeyQuotasCall(String serviceId, String clientId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/services/{serviceId}/apikeys/{clientId}/quotas"
            .replace("{" + "serviceId" + "}", localVarApiClient.escapeString(serviceId.toString()))
            .replace("{" + "clientId" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "otoroshi_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resetApiKeyQuotasValidateBeforeCall(String serviceId, String clientId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling resetApiKeyQuotas(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling resetApiKeyQuotas(Async)");
        }

        return resetApiKeyQuotasCall(serviceId, clientId, _callback);

    }

    /**
     * Reset the quota state of an api key
     * Reset the quota state of an api key
     * @param serviceId The api key service id (required)
     * @param clientId the api key id (required)
     * @return Quotas
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public Quotas resetApiKeyQuotas(String serviceId, String clientId) throws ApiException {
        ApiResponse<Quotas> localVarResp = resetApiKeyQuotasWithHttpInfo(serviceId, clientId);
        return localVarResp.getData();
    }

    /**
     * Reset the quota state of an api key
     * Reset the quota state of an api key
     * @param serviceId The api key service id (required)
     * @param clientId the api key id (required)
     * @return ApiResponse&lt;Quotas&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Quotas> resetApiKeyQuotasWithHttpInfo(String serviceId, String clientId) throws ApiException {
        okhttp3.Call localVarCall = resetApiKeyQuotasValidateBeforeCall(serviceId, clientId, null);
        Type localVarReturnType = new TypeToken<Quotas>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reset the quota state of an api key (asynchronously)
     * Reset the quota state of an api key
     * @param serviceId The api key service id (required)
     * @param clientId the api key id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetApiKeyQuotasAsync(String serviceId, String clientId, final ApiCallback<Quotas> _callback) throws ApiException {

        okhttp3.Call localVarCall = resetApiKeyQuotasValidateBeforeCall(serviceId, clientId, _callback);
        Type localVarReturnType = new TypeToken<Quotas>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateApiKey
     * @param serviceId The api key service id (required)
     * @param clientId the api key id (required)
     * @param apiKey  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateApiKeyCall(String serviceId, String clientId, ApiKey apiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiKey;

        // create path and map variables
        String localVarPath = "/api/services/{serviceId}/apikeys/{clientId}"
            .replace("{" + "serviceId" + "}", localVarApiClient.escapeString(serviceId.toString()))
            .replace("{" + "clientId" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "otoroshi_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateApiKeyValidateBeforeCall(String serviceId, String clientId, ApiKey apiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling updateApiKey(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling updateApiKey(Async)");
        }

        return updateApiKeyCall(serviceId, clientId, apiKey, _callback);

    }

    /**
     * Update an api key
     * Update an api key for a specified service descriptor
     * @param serviceId The api key service id (required)
     * @param clientId the api key id (required)
     * @param apiKey  (optional)
     * @return ApiKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiKey updateApiKey(String serviceId, String clientId, ApiKey apiKey) throws ApiException {
        ApiResponse<ApiKey> localVarResp = updateApiKeyWithHttpInfo(serviceId, clientId, apiKey);
        return localVarResp.getData();
    }

    /**
     * Update an api key
     * Update an api key for a specified service descriptor
     * @param serviceId The api key service id (required)
     * @param clientId the api key id (required)
     * @param apiKey  (optional)
     * @return ApiResponse&lt;ApiKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiKey> updateApiKeyWithHttpInfo(String serviceId, String clientId, ApiKey apiKey) throws ApiException {
        okhttp3.Call localVarCall = updateApiKeyValidateBeforeCall(serviceId, clientId, apiKey, null);
        Type localVarReturnType = new TypeToken<ApiKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an api key (asynchronously)
     * Update an api key for a specified service descriptor
     * @param serviceId The api key service id (required)
     * @param clientId the api key id (required)
     * @param apiKey  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateApiKeyAsync(String serviceId, String clientId, ApiKey apiKey, final ApiCallback<ApiKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateApiKeyValidateBeforeCall(serviceId, clientId, apiKey, _callback);
        Type localVarReturnType = new TypeToken<ApiKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateApiKeyFromGroup
     * @param groupId The api key group id (required)
     * @param clientId the api key id (required)
     * @param apiKey  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateApiKeyFromGroupCall(String groupId, String clientId, ApiKey apiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiKey;

        // create path and map variables
        String localVarPath = "/api/groups/{groupId}/apikeys/{clientId}"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "clientId" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "otoroshi_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateApiKeyFromGroupValidateBeforeCall(String groupId, String clientId, ApiKey apiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling updateApiKeyFromGroup(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling updateApiKeyFromGroup(Async)");
        }

        return updateApiKeyFromGroupCall(groupId, clientId, apiKey, _callback);

    }

    /**
     * Update an api key
     * Update an api key for a specified service group
     * @param groupId The api key group id (required)
     * @param clientId the api key id (required)
     * @param apiKey  (optional)
     * @return ApiKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiKey updateApiKeyFromGroup(String groupId, String clientId, ApiKey apiKey) throws ApiException {
        ApiResponse<ApiKey> localVarResp = updateApiKeyFromGroupWithHttpInfo(groupId, clientId, apiKey);
        return localVarResp.getData();
    }

    /**
     * Update an api key
     * Update an api key for a specified service group
     * @param groupId The api key group id (required)
     * @param clientId the api key id (required)
     * @param apiKey  (optional)
     * @return ApiResponse&lt;ApiKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiKey> updateApiKeyFromGroupWithHttpInfo(String groupId, String clientId, ApiKey apiKey) throws ApiException {
        okhttp3.Call localVarCall = updateApiKeyFromGroupValidateBeforeCall(groupId, clientId, apiKey, null);
        Type localVarReturnType = new TypeToken<ApiKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an api key (asynchronously)
     * Update an api key for a specified service group
     * @param groupId The api key group id (required)
     * @param clientId the api key id (required)
     * @param apiKey  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad resource format. Take another look to the swagger, or open an issue :) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You have to provide an Api Key. Api Key can be passed with &#39;Otoroshi-Client-Id&#39; and &#39;Otoroshi-Client-Secret&#39; headers, or use basic http authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateApiKeyFromGroupAsync(String groupId, String clientId, ApiKey apiKey, final ApiCallback<ApiKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateApiKeyFromGroupValidateBeforeCall(groupId, clientId, apiKey, _callback);
        Type localVarReturnType = new TypeToken<ApiKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
