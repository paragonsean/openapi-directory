/*
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.GlobalConfig;
import org.openapitools.client.model.ImportExportAdminsInner;
import org.openapitools.client.model.ImportExportApiKeysInner;
import org.openapitools.client.model.ImportExportErrorTemplatesInner;
import org.openapitools.client.model.ImportExportServiceDescriptorsInner;
import org.openapitools.client.model.ImportExportServiceGroupsInner;
import org.openapitools.client.model.ImportExportSimpleAdminsInner;
import org.openapitools.client.model.ImportExportStats;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The structure that can be imported to or exported from Otoroshi. It represent the memory state of Otoroshi
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:27.562730-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImportExport {
  public static final String SERIALIZED_NAME_ADMINS = "admins";
  @SerializedName(SERIALIZED_NAME_ADMINS)
  private List<ImportExportAdminsInner> admins = new ArrayList<>();

  public static final String SERIALIZED_NAME_API_KEYS = "apiKeys";
  @SerializedName(SERIALIZED_NAME_API_KEYS)
  private List<ImportExportApiKeysInner> apiKeys = new ArrayList<>();

  public static final String SERIALIZED_NAME_APP_CONFIG = "appConfig";
  @SerializedName(SERIALIZED_NAME_APP_CONFIG)
  private Map<String, String> appConfig = new HashMap<>();

  public static final String SERIALIZED_NAME_CONFIG = "config";
  @SerializedName(SERIALIZED_NAME_CONFIG)
  private GlobalConfig config;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private OffsetDateTime date;

  public static final String SERIALIZED_NAME_DATE_RAW = "dateRaw";
  @SerializedName(SERIALIZED_NAME_DATE_RAW)
  private Long dateRaw;

  public static final String SERIALIZED_NAME_ERROR_TEMPLATES = "errorTemplates";
  @SerializedName(SERIALIZED_NAME_ERROR_TEMPLATES)
  private List<ImportExportErrorTemplatesInner> errorTemplates = new ArrayList<>();

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_SERVICE_DESCRIPTORS = "serviceDescriptors";
  @SerializedName(SERIALIZED_NAME_SERVICE_DESCRIPTORS)
  private List<ImportExportServiceDescriptorsInner> serviceDescriptors = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERVICE_GROUPS = "serviceGroups";
  @SerializedName(SERIALIZED_NAME_SERVICE_GROUPS)
  private List<ImportExportServiceGroupsInner> serviceGroups = new ArrayList<>();

  public static final String SERIALIZED_NAME_SIMPLE_ADMINS = "simpleAdmins";
  @SerializedName(SERIALIZED_NAME_SIMPLE_ADMINS)
  private List<ImportExportSimpleAdminsInner> simpleAdmins = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATS = "stats";
  @SerializedName(SERIALIZED_NAME_STATS)
  private ImportExportStats stats;

  public ImportExport() {
  }

  public ImportExport admins(List<ImportExportAdminsInner> admins) {
    this.admins = admins;
    return this;
  }

  public ImportExport addAdminsItem(ImportExportAdminsInner adminsItem) {
    if (this.admins == null) {
      this.admins = new ArrayList<>();
    }
    this.admins.add(adminsItem);
    return this;
  }

  /**
   * Current U2F admin at the time of export
   * @return admins
   */
  @javax.annotation.Nonnull
  public List<ImportExportAdminsInner> getAdmins() {
    return admins;
  }

  public void setAdmins(List<ImportExportAdminsInner> admins) {
    this.admins = admins;
  }


  public ImportExport apiKeys(List<ImportExportApiKeysInner> apiKeys) {
    this.apiKeys = apiKeys;
    return this;
  }

  public ImportExport addApiKeysItem(ImportExportApiKeysInner apiKeysItem) {
    if (this.apiKeys == null) {
      this.apiKeys = new ArrayList<>();
    }
    this.apiKeys.add(apiKeysItem);
    return this;
  }

  /**
   * Current apik keys at the time of export
   * @return apiKeys
   */
  @javax.annotation.Nonnull
  public List<ImportExportApiKeysInner> getApiKeys() {
    return apiKeys;
  }

  public void setApiKeys(List<ImportExportApiKeysInner> apiKeys) {
    this.apiKeys = apiKeys;
  }


  public ImportExport appConfig(Map<String, String> appConfig) {
    this.appConfig = appConfig;
    return this;
  }

  public ImportExport putAppConfigItem(String key, String appConfigItem) {
    if (this.appConfig == null) {
      this.appConfig = new HashMap<>();
    }
    this.appConfig.put(key, appConfigItem);
    return this;
  }

  /**
   * Current env variables at the time of export
   * @return appConfig
   */
  @javax.annotation.Nullable
  public Map<String, String> getAppConfig() {
    return appConfig;
  }

  public void setAppConfig(Map<String, String> appConfig) {
    this.appConfig = appConfig;
  }


  public ImportExport config(GlobalConfig config) {
    this.config = config;
    return this;
  }

  /**
   * Get config
   * @return config
   */
  @javax.annotation.Nonnull
  public GlobalConfig getConfig() {
    return config;
  }

  public void setConfig(GlobalConfig config) {
    this.config = config;
  }


  public ImportExport date(OffsetDateTime date) {
    this.date = date;
    return this;
  }

  /**
   * Get date
   * @return date
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getDate() {
    return date;
  }

  public void setDate(OffsetDateTime date) {
    this.date = date;
  }


  public ImportExport dateRaw(Long dateRaw) {
    this.dateRaw = dateRaw;
    return this;
  }

  /**
   * Get dateRaw
   * @return dateRaw
   */
  @javax.annotation.Nonnull
  public Long getDateRaw() {
    return dateRaw;
  }

  public void setDateRaw(Long dateRaw) {
    this.dateRaw = dateRaw;
  }


  public ImportExport errorTemplates(List<ImportExportErrorTemplatesInner> errorTemplates) {
    this.errorTemplates = errorTemplates;
    return this;
  }

  public ImportExport addErrorTemplatesItem(ImportExportErrorTemplatesInner errorTemplatesItem) {
    if (this.errorTemplates == null) {
      this.errorTemplates = new ArrayList<>();
    }
    this.errorTemplates.add(errorTemplatesItem);
    return this;
  }

  /**
   * Current error templates at the time of export
   * @return errorTemplates
   */
  @javax.annotation.Nonnull
  public List<ImportExportErrorTemplatesInner> getErrorTemplates() {
    return errorTemplates;
  }

  public void setErrorTemplates(List<ImportExportErrorTemplatesInner> errorTemplates) {
    this.errorTemplates = errorTemplates;
  }


  public ImportExport label(String label) {
    this.label = label;
    return this;
  }

  /**
   * Get label
   * @return label
   */
  @javax.annotation.Nonnull
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  public ImportExport serviceDescriptors(List<ImportExportServiceDescriptorsInner> serviceDescriptors) {
    this.serviceDescriptors = serviceDescriptors;
    return this;
  }

  public ImportExport addServiceDescriptorsItem(ImportExportServiceDescriptorsInner serviceDescriptorsItem) {
    if (this.serviceDescriptors == null) {
      this.serviceDescriptors = new ArrayList<>();
    }
    this.serviceDescriptors.add(serviceDescriptorsItem);
    return this;
  }

  /**
   * Current service descriptors at the time of export
   * @return serviceDescriptors
   */
  @javax.annotation.Nonnull
  public List<ImportExportServiceDescriptorsInner> getServiceDescriptors() {
    return serviceDescriptors;
  }

  public void setServiceDescriptors(List<ImportExportServiceDescriptorsInner> serviceDescriptors) {
    this.serviceDescriptors = serviceDescriptors;
  }


  public ImportExport serviceGroups(List<ImportExportServiceGroupsInner> serviceGroups) {
    this.serviceGroups = serviceGroups;
    return this;
  }

  public ImportExport addServiceGroupsItem(ImportExportServiceGroupsInner serviceGroupsItem) {
    if (this.serviceGroups == null) {
      this.serviceGroups = new ArrayList<>();
    }
    this.serviceGroups.add(serviceGroupsItem);
    return this;
  }

  /**
   * Current service groups at the time of export
   * @return serviceGroups
   */
  @javax.annotation.Nonnull
  public List<ImportExportServiceGroupsInner> getServiceGroups() {
    return serviceGroups;
  }

  public void setServiceGroups(List<ImportExportServiceGroupsInner> serviceGroups) {
    this.serviceGroups = serviceGroups;
  }


  public ImportExport simpleAdmins(List<ImportExportSimpleAdminsInner> simpleAdmins) {
    this.simpleAdmins = simpleAdmins;
    return this;
  }

  public ImportExport addSimpleAdminsItem(ImportExportSimpleAdminsInner simpleAdminsItem) {
    if (this.simpleAdmins == null) {
      this.simpleAdmins = new ArrayList<>();
    }
    this.simpleAdmins.add(simpleAdminsItem);
    return this;
  }

  /**
   * Current simple admins at the time of export
   * @return simpleAdmins
   */
  @javax.annotation.Nonnull
  public List<ImportExportSimpleAdminsInner> getSimpleAdmins() {
    return simpleAdmins;
  }

  public void setSimpleAdmins(List<ImportExportSimpleAdminsInner> simpleAdmins) {
    this.simpleAdmins = simpleAdmins;
  }


  public ImportExport stats(ImportExportStats stats) {
    this.stats = stats;
    return this;
  }

  /**
   * Get stats
   * @return stats
   */
  @javax.annotation.Nonnull
  public ImportExportStats getStats() {
    return stats;
  }

  public void setStats(ImportExportStats stats) {
    this.stats = stats;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImportExport importExport = (ImportExport) o;
    return Objects.equals(this.admins, importExport.admins) &&
        Objects.equals(this.apiKeys, importExport.apiKeys) &&
        Objects.equals(this.appConfig, importExport.appConfig) &&
        Objects.equals(this.config, importExport.config) &&
        Objects.equals(this.date, importExport.date) &&
        Objects.equals(this.dateRaw, importExport.dateRaw) &&
        Objects.equals(this.errorTemplates, importExport.errorTemplates) &&
        Objects.equals(this.label, importExport.label) &&
        Objects.equals(this.serviceDescriptors, importExport.serviceDescriptors) &&
        Objects.equals(this.serviceGroups, importExport.serviceGroups) &&
        Objects.equals(this.simpleAdmins, importExport.simpleAdmins) &&
        Objects.equals(this.stats, importExport.stats);
  }

  @Override
  public int hashCode() {
    return Objects.hash(admins, apiKeys, appConfig, config, date, dateRaw, errorTemplates, label, serviceDescriptors, serviceGroups, simpleAdmins, stats);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImportExport {\n");
    sb.append("    admins: ").append(toIndentedString(admins)).append("\n");
    sb.append("    apiKeys: ").append(toIndentedString(apiKeys)).append("\n");
    sb.append("    appConfig: ").append(toIndentedString(appConfig)).append("\n");
    sb.append("    config: ").append(toIndentedString(config)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    dateRaw: ").append(toIndentedString(dateRaw)).append("\n");
    sb.append("    errorTemplates: ").append(toIndentedString(errorTemplates)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    serviceDescriptors: ").append(toIndentedString(serviceDescriptors)).append("\n");
    sb.append("    serviceGroups: ").append(toIndentedString(serviceGroups)).append("\n");
    sb.append("    simpleAdmins: ").append(toIndentedString(simpleAdmins)).append("\n");
    sb.append("    stats: ").append(toIndentedString(stats)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("admins");
    openapiFields.add("apiKeys");
    openapiFields.add("appConfig");
    openapiFields.add("config");
    openapiFields.add("date");
    openapiFields.add("dateRaw");
    openapiFields.add("errorTemplates");
    openapiFields.add("label");
    openapiFields.add("serviceDescriptors");
    openapiFields.add("serviceGroups");
    openapiFields.add("simpleAdmins");
    openapiFields.add("stats");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("admins");
    openapiRequiredFields.add("apiKeys");
    openapiRequiredFields.add("config");
    openapiRequiredFields.add("date");
    openapiRequiredFields.add("dateRaw");
    openapiRequiredFields.add("errorTemplates");
    openapiRequiredFields.add("label");
    openapiRequiredFields.add("serviceDescriptors");
    openapiRequiredFields.add("serviceGroups");
    openapiRequiredFields.add("simpleAdmins");
    openapiRequiredFields.add("stats");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImportExport
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImportExport.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImportExport is not found in the empty JSON string", ImportExport.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImportExport.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImportExport` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ImportExport.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("admins").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `admins` to be an array in the JSON string but got `%s`", jsonObj.get("admins").toString()));
      }

      JsonArray jsonArrayadmins = jsonObj.getAsJsonArray("admins");
      // validate the required field `admins` (array)
      for (int i = 0; i < jsonArrayadmins.size(); i++) {
        ImportExportAdminsInner.validateJsonElement(jsonArrayadmins.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("apiKeys").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiKeys` to be an array in the JSON string but got `%s`", jsonObj.get("apiKeys").toString()));
      }

      JsonArray jsonArrayapiKeys = jsonObj.getAsJsonArray("apiKeys");
      // validate the required field `apiKeys` (array)
      for (int i = 0; i < jsonArrayapiKeys.size(); i++) {
        ImportExportApiKeysInner.validateJsonElement(jsonArrayapiKeys.get(i));
      };
      // validate the required field `config`
      GlobalConfig.validateJsonElement(jsonObj.get("config"));
      // ensure the json data is an array
      if (!jsonObj.get("errorTemplates").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorTemplates` to be an array in the JSON string but got `%s`", jsonObj.get("errorTemplates").toString()));
      }

      JsonArray jsonArrayerrorTemplates = jsonObj.getAsJsonArray("errorTemplates");
      // validate the required field `errorTemplates` (array)
      for (int i = 0; i < jsonArrayerrorTemplates.size(); i++) {
        ImportExportErrorTemplatesInner.validateJsonElement(jsonArrayerrorTemplates.get(i));
      };
      if (!jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("serviceDescriptors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceDescriptors` to be an array in the JSON string but got `%s`", jsonObj.get("serviceDescriptors").toString()));
      }

      JsonArray jsonArrayserviceDescriptors = jsonObj.getAsJsonArray("serviceDescriptors");
      // validate the required field `serviceDescriptors` (array)
      for (int i = 0; i < jsonArrayserviceDescriptors.size(); i++) {
        ImportExportServiceDescriptorsInner.validateJsonElement(jsonArrayserviceDescriptors.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("serviceGroups").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceGroups` to be an array in the JSON string but got `%s`", jsonObj.get("serviceGroups").toString()));
      }

      JsonArray jsonArrayserviceGroups = jsonObj.getAsJsonArray("serviceGroups");
      // validate the required field `serviceGroups` (array)
      for (int i = 0; i < jsonArrayserviceGroups.size(); i++) {
        ImportExportServiceGroupsInner.validateJsonElement(jsonArrayserviceGroups.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("simpleAdmins").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `simpleAdmins` to be an array in the JSON string but got `%s`", jsonObj.get("simpleAdmins").toString()));
      }

      JsonArray jsonArraysimpleAdmins = jsonObj.getAsJsonArray("simpleAdmins");
      // validate the required field `simpleAdmins` (array)
      for (int i = 0; i < jsonArraysimpleAdmins.size(); i++) {
        ImportExportSimpleAdminsInner.validateJsonElement(jsonArraysimpleAdmins.get(i));
      };
      // validate the required field `stats`
      ImportExportStats.validateJsonElement(jsonObj.get("stats"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImportExport.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImportExport' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImportExport> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImportExport.class));

       return (TypeAdapter<T>) new TypeAdapter<ImportExport>() {
           @Override
           public void write(JsonWriter out, ImportExport value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImportExport read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImportExport given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImportExport
   * @throws IOException if the JSON string is invalid with respect to ImportExport
   */
  public static ImportExport fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImportExport.class);
  }

  /**
   * Convert an instance of ImportExport to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

