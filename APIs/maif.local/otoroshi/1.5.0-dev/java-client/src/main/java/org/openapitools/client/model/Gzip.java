/*
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration for gzip of service responses
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:27.562730-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Gzip {
  public static final String SERIALIZED_NAME_BLACK_LIST = "blackList";
  @SerializedName(SERIALIZED_NAME_BLACK_LIST)
  private List<String> blackList = new ArrayList<>();

  public static final String SERIALIZED_NAME_BUFFER_SIZE = "bufferSize";
  @SerializedName(SERIALIZED_NAME_BUFFER_SIZE)
  private Long bufferSize;

  public static final String SERIALIZED_NAME_CHUNKED_THRESHOLD = "chunkedThreshold";
  @SerializedName(SERIALIZED_NAME_CHUNKED_THRESHOLD)
  private Long chunkedThreshold;

  public static final String SERIALIZED_NAME_COMPRESSION_LEVEL = "compressionLevel";
  @SerializedName(SERIALIZED_NAME_COMPRESSION_LEVEL)
  private Integer compressionLevel;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_EXCLUDED_PATTERNS = "excludedPatterns";
  @SerializedName(SERIALIZED_NAME_EXCLUDED_PATTERNS)
  private List<String> excludedPatterns = new ArrayList<>();

  public static final String SERIALIZED_NAME_WHITE_LIST = "whiteList";
  @SerializedName(SERIALIZED_NAME_WHITE_LIST)
  private List<String> whiteList = new ArrayList<>();

  public Gzip() {
  }

  public Gzip blackList(List<String> blackList) {
    this.blackList = blackList;
    return this;
  }

  public Gzip addBlackListItem(String blackListItem) {
    if (this.blackList == null) {
      this.blackList = new ArrayList<>();
    }
    this.blackList.add(blackListItem);
    return this;
  }

  /**
   * Blacklisted mime types. Wildcard supported
   * @return blackList
   */
  @javax.annotation.Nonnull
  public List<String> getBlackList() {
    return blackList;
  }

  public void setBlackList(List<String> blackList) {
    this.blackList = blackList;
  }


  public Gzip bufferSize(Long bufferSize) {
    this.bufferSize = bufferSize;
    return this;
  }

  /**
   * Size of the GZip buffer
   * @return bufferSize
   */
  @javax.annotation.Nonnull
  public Long getBufferSize() {
    return bufferSize;
  }

  public void setBufferSize(Long bufferSize) {
    this.bufferSize = bufferSize;
  }


  public Gzip chunkedThreshold(Long chunkedThreshold) {
    this.chunkedThreshold = chunkedThreshold;
    return this;
  }

  /**
   * Threshold for chunking data
   * @return chunkedThreshold
   */
  @javax.annotation.Nonnull
  public Long getChunkedThreshold() {
    return chunkedThreshold;
  }

  public void setChunkedThreshold(Long chunkedThreshold) {
    this.chunkedThreshold = chunkedThreshold;
  }


  public Gzip compressionLevel(Integer compressionLevel) {
    this.compressionLevel = compressionLevel;
    return this;
  }

  /**
   * Compression level. From 0 to 9
   * @return compressionLevel
   */
  @javax.annotation.Nonnull
  public Integer getCompressionLevel() {
    return compressionLevel;
  }

  public void setCompressionLevel(Integer compressionLevel) {
    this.compressionLevel = compressionLevel;
  }


  public Gzip enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Whether gzip compression is enabled or not
   * @return enabled
   */
  @javax.annotation.Nonnull
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public Gzip excludedPatterns(List<String> excludedPatterns) {
    this.excludedPatterns = excludedPatterns;
    return this;
  }

  public Gzip addExcludedPatternsItem(String excludedPatternsItem) {
    if (this.excludedPatterns == null) {
      this.excludedPatterns = new ArrayList<>();
    }
    this.excludedPatterns.add(excludedPatternsItem);
    return this;
  }

  /**
   * Patterns that are excluded from gzipping
   * @return excludedPatterns
   */
  @javax.annotation.Nonnull
  public List<String> getExcludedPatterns() {
    return excludedPatterns;
  }

  public void setExcludedPatterns(List<String> excludedPatterns) {
    this.excludedPatterns = excludedPatterns;
  }


  public Gzip whiteList(List<String> whiteList) {
    this.whiteList = whiteList;
    return this;
  }

  public Gzip addWhiteListItem(String whiteListItem) {
    if (this.whiteList == null) {
      this.whiteList = new ArrayList<>();
    }
    this.whiteList.add(whiteListItem);
    return this;
  }

  /**
   * Whitelisted mime types. Wildcard supported
   * @return whiteList
   */
  @javax.annotation.Nonnull
  public List<String> getWhiteList() {
    return whiteList;
  }

  public void setWhiteList(List<String> whiteList) {
    this.whiteList = whiteList;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Gzip gzip = (Gzip) o;
    return Objects.equals(this.blackList, gzip.blackList) &&
        Objects.equals(this.bufferSize, gzip.bufferSize) &&
        Objects.equals(this.chunkedThreshold, gzip.chunkedThreshold) &&
        Objects.equals(this.compressionLevel, gzip.compressionLevel) &&
        Objects.equals(this.enabled, gzip.enabled) &&
        Objects.equals(this.excludedPatterns, gzip.excludedPatterns) &&
        Objects.equals(this.whiteList, gzip.whiteList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blackList, bufferSize, chunkedThreshold, compressionLevel, enabled, excludedPatterns, whiteList);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Gzip {\n");
    sb.append("    blackList: ").append(toIndentedString(blackList)).append("\n");
    sb.append("    bufferSize: ").append(toIndentedString(bufferSize)).append("\n");
    sb.append("    chunkedThreshold: ").append(toIndentedString(chunkedThreshold)).append("\n");
    sb.append("    compressionLevel: ").append(toIndentedString(compressionLevel)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    excludedPatterns: ").append(toIndentedString(excludedPatterns)).append("\n");
    sb.append("    whiteList: ").append(toIndentedString(whiteList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("blackList");
    openapiFields.add("bufferSize");
    openapiFields.add("chunkedThreshold");
    openapiFields.add("compressionLevel");
    openapiFields.add("enabled");
    openapiFields.add("excludedPatterns");
    openapiFields.add("whiteList");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("blackList");
    openapiRequiredFields.add("bufferSize");
    openapiRequiredFields.add("chunkedThreshold");
    openapiRequiredFields.add("compressionLevel");
    openapiRequiredFields.add("enabled");
    openapiRequiredFields.add("excludedPatterns");
    openapiRequiredFields.add("whiteList");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Gzip
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Gzip.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Gzip is not found in the empty JSON string", Gzip.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Gzip.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Gzip` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Gzip.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("blackList") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("blackList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `blackList` to be an array in the JSON string but got `%s`", jsonObj.get("blackList").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("excludedPatterns") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("excludedPatterns").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludedPatterns` to be an array in the JSON string but got `%s`", jsonObj.get("excludedPatterns").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("whiteList") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("whiteList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `whiteList` to be an array in the JSON string but got `%s`", jsonObj.get("whiteList").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Gzip.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Gzip' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Gzip> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Gzip.class));

       return (TypeAdapter<T>) new TypeAdapter<Gzip>() {
           @Override
           public void write(JsonWriter out, Gzip value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Gzip read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Gzip given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Gzip
   * @throws IOException if the JSON string is invalid with respect to Gzip
   */
  public static Gzip fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Gzip.class);
  }

  /**
   * Convert an instance of Gzip to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

