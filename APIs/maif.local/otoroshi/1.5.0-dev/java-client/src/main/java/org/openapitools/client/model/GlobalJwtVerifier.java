/*
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GlobalJwtVerifierAlgoSettings;
import org.openapitools.client.model.GlobalJwtVerifierSource;
import org.openapitools.client.model.GlobalJwtVerifierStrategy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A JWT verifier used by multiple service descriptor
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:27.562730-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GlobalJwtVerifier {
  public static final String SERIALIZED_NAME_ALGO_SETTINGS = "algoSettings";
  @SerializedName(SERIALIZED_NAME_ALGO_SETTINGS)
  private GlobalJwtVerifierAlgoSettings algoSettings;

  public static final String SERIALIZED_NAME_DESC = "desc";
  @SerializedName(SERIALIZED_NAME_DESC)
  private String desc;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private GlobalJwtVerifierSource source;

  public static final String SERIALIZED_NAME_STRATEGY = "strategy";
  @SerializedName(SERIALIZED_NAME_STRATEGY)
  private GlobalJwtVerifierStrategy strategy;

  public static final String SERIALIZED_NAME_STRICT = "strict";
  @SerializedName(SERIALIZED_NAME_STRICT)
  private Boolean strict;

  public GlobalJwtVerifier() {
  }

  public GlobalJwtVerifier algoSettings(GlobalJwtVerifierAlgoSettings algoSettings) {
    this.algoSettings = algoSettings;
    return this;
  }

  /**
   * Get algoSettings
   * @return algoSettings
   */
  @javax.annotation.Nonnull
  public GlobalJwtVerifierAlgoSettings getAlgoSettings() {
    return algoSettings;
  }

  public void setAlgoSettings(GlobalJwtVerifierAlgoSettings algoSettings) {
    this.algoSettings = algoSettings;
  }


  public GlobalJwtVerifier desc(String desc) {
    this.desc = desc;
    return this;
  }

  /**
   * Verifier description
   * @return desc
   */
  @javax.annotation.Nonnull
  public String getDesc() {
    return desc;
  }

  public void setDesc(String desc) {
    this.desc = desc;
  }


  public GlobalJwtVerifier enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Is it enabled
   * @return enabled
   */
  @javax.annotation.Nonnull
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public GlobalJwtVerifier id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Verifier id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public GlobalJwtVerifier name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Verifier name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GlobalJwtVerifier source(GlobalJwtVerifierSource source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nonnull
  public GlobalJwtVerifierSource getSource() {
    return source;
  }

  public void setSource(GlobalJwtVerifierSource source) {
    this.source = source;
  }


  public GlobalJwtVerifier strategy(GlobalJwtVerifierStrategy strategy) {
    this.strategy = strategy;
    return this;
  }

  /**
   * Get strategy
   * @return strategy
   */
  @javax.annotation.Nonnull
  public GlobalJwtVerifierStrategy getStrategy() {
    return strategy;
  }

  public void setStrategy(GlobalJwtVerifierStrategy strategy) {
    this.strategy = strategy;
  }


  public GlobalJwtVerifier strict(Boolean strict) {
    this.strict = strict;
    return this;
  }

  /**
   * Does it fail if JWT not found
   * @return strict
   */
  @javax.annotation.Nonnull
  public Boolean getStrict() {
    return strict;
  }

  public void setStrict(Boolean strict) {
    this.strict = strict;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GlobalJwtVerifier globalJwtVerifier = (GlobalJwtVerifier) o;
    return Objects.equals(this.algoSettings, globalJwtVerifier.algoSettings) &&
        Objects.equals(this.desc, globalJwtVerifier.desc) &&
        Objects.equals(this.enabled, globalJwtVerifier.enabled) &&
        Objects.equals(this.id, globalJwtVerifier.id) &&
        Objects.equals(this.name, globalJwtVerifier.name) &&
        Objects.equals(this.source, globalJwtVerifier.source) &&
        Objects.equals(this.strategy, globalJwtVerifier.strategy) &&
        Objects.equals(this.strict, globalJwtVerifier.strict);
  }

  @Override
  public int hashCode() {
    return Objects.hash(algoSettings, desc, enabled, id, name, source, strategy, strict);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GlobalJwtVerifier {\n");
    sb.append("    algoSettings: ").append(toIndentedString(algoSettings)).append("\n");
    sb.append("    desc: ").append(toIndentedString(desc)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    strategy: ").append(toIndentedString(strategy)).append("\n");
    sb.append("    strict: ").append(toIndentedString(strict)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("algoSettings");
    openapiFields.add("desc");
    openapiFields.add("enabled");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("source");
    openapiFields.add("strategy");
    openapiFields.add("strict");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("algoSettings");
    openapiRequiredFields.add("desc");
    openapiRequiredFields.add("enabled");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("source");
    openapiRequiredFields.add("strategy");
    openapiRequiredFields.add("strict");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GlobalJwtVerifier
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GlobalJwtVerifier.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GlobalJwtVerifier is not found in the empty JSON string", GlobalJwtVerifier.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GlobalJwtVerifier.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GlobalJwtVerifier` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GlobalJwtVerifier.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `algoSettings`
      GlobalJwtVerifierAlgoSettings.validateJsonElement(jsonObj.get("algoSettings"));
      if (!jsonObj.get("desc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `desc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("desc").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the required field `source`
      GlobalJwtVerifierSource.validateJsonElement(jsonObj.get("source"));
      // validate the required field `strategy`
      GlobalJwtVerifierStrategy.validateJsonElement(jsonObj.get("strategy"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GlobalJwtVerifier.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GlobalJwtVerifier' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GlobalJwtVerifier> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GlobalJwtVerifier.class));

       return (TypeAdapter<T>) new TypeAdapter<GlobalJwtVerifier>() {
           @Override
           public void write(JsonWriter out, GlobalJwtVerifier value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GlobalJwtVerifier read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GlobalJwtVerifier given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GlobalJwtVerifier
   * @throws IOException if the JSON string is invalid with respect to GlobalJwtVerifier
   */
  public static GlobalJwtVerifier fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GlobalJwtVerifier.class);
  }

  /**
   * Convert an instance of GlobalJwtVerifier to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

