/*
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Settings to authenticate users using a generic OAuth2 provider
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:27.562730-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LdapAuthModuleConfig {
  public static final String SERIALIZED_NAME_ADMIN_PASSWORD = "adminPassword";
  @SerializedName(SERIALIZED_NAME_ADMIN_PASSWORD)
  private String adminPassword;

  public static final String SERIALIZED_NAME_ADMIN_USERNAME = "adminUsername";
  @SerializedName(SERIALIZED_NAME_ADMIN_USERNAME)
  private String adminUsername;

  public static final String SERIALIZED_NAME_DESC = "desc";
  @SerializedName(SERIALIZED_NAME_DESC)
  private String desc;

  public static final String SERIALIZED_NAME_EMAIL_FIELD = "emailField";
  @SerializedName(SERIALIZED_NAME_EMAIL_FIELD)
  private String emailField;

  public static final String SERIALIZED_NAME_GROUP_FILTER = "groupFilter";
  @SerializedName(SERIALIZED_NAME_GROUP_FILTER)
  private String groupFilter;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NAME_FIELD = "nameField";
  @SerializedName(SERIALIZED_NAME_NAME_FIELD)
  private String nameField;

  public static final String SERIALIZED_NAME_OTOROSHI_DATA_FIELD = "otoroshiDataField";
  @SerializedName(SERIALIZED_NAME_OTOROSHI_DATA_FIELD)
  private String otoroshiDataField;

  public static final String SERIALIZED_NAME_SEARCH_BASE = "searchBase";
  @SerializedName(SERIALIZED_NAME_SEARCH_BASE)
  private String searchBase;

  public static final String SERIALIZED_NAME_SEARCH_FILTER = "searchFilter";
  @SerializedName(SERIALIZED_NAME_SEARCH_FILTER)
  private String searchFilter;

  public static final String SERIALIZED_NAME_SERVER_URL = "serverUrl";
  @SerializedName(SERIALIZED_NAME_SERVER_URL)
  private String serverUrl;

  public static final String SERIALIZED_NAME_SESSION_MAX_AGE = "sessionMaxAge";
  @SerializedName(SERIALIZED_NAME_SESSION_MAX_AGE)
  private Integer sessionMaxAge;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_USER_BASE = "userBase";
  @SerializedName(SERIALIZED_NAME_USER_BASE)
  private String userBase;

  public LdapAuthModuleConfig() {
  }

  public LdapAuthModuleConfig adminPassword(String adminPassword) {
    this.adminPassword = adminPassword;
    return this;
  }

  /**
   * The admin password
   * @return adminPassword
   */
  @javax.annotation.Nonnull
  public String getAdminPassword() {
    return adminPassword;
  }

  public void setAdminPassword(String adminPassword) {
    this.adminPassword = adminPassword;
  }


  public LdapAuthModuleConfig adminUsername(String adminUsername) {
    this.adminUsername = adminUsername;
    return this;
  }

  /**
   * The admin username
   * @return adminUsername
   */
  @javax.annotation.Nonnull
  public String getAdminUsername() {
    return adminUsername;
  }

  public void setAdminUsername(String adminUsername) {
    this.adminUsername = adminUsername;
  }


  public LdapAuthModuleConfig desc(String desc) {
    this.desc = desc;
    return this;
  }

  /**
   * Description of the config
   * @return desc
   */
  @javax.annotation.Nonnull
  public String getDesc() {
    return desc;
  }

  public void setDesc(String desc) {
    this.desc = desc;
  }


  public LdapAuthModuleConfig emailField(String emailField) {
    this.emailField = emailField;
    return this;
  }

  /**
   * Field name to get email from user profile
   * @return emailField
   */
  @javax.annotation.Nonnull
  public String getEmailField() {
    return emailField;
  }

  public void setEmailField(String emailField) {
    this.emailField = emailField;
  }


  public LdapAuthModuleConfig groupFilter(String groupFilter) {
    this.groupFilter = groupFilter;
    return this;
  }

  /**
   * Filter for groups
   * @return groupFilter
   */
  @javax.annotation.Nonnull
  public String getGroupFilter() {
    return groupFilter;
  }

  public void setGroupFilter(String groupFilter) {
    this.groupFilter = groupFilter;
  }


  public LdapAuthModuleConfig id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique id of the config
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public LdapAuthModuleConfig name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the config
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public LdapAuthModuleConfig nameField(String nameField) {
    this.nameField = nameField;
    return this;
  }

  /**
   * Field name to get name from user profile
   * @return nameField
   */
  @javax.annotation.Nonnull
  public String getNameField() {
    return nameField;
  }

  public void setNameField(String nameField) {
    this.nameField = nameField;
  }


  public LdapAuthModuleConfig otoroshiDataField(String otoroshiDataField) {
    this.otoroshiDataField = otoroshiDataField;
    return this;
  }

  /**
   * Field name to get otoroshi metadata from. You can specify sub fields using | as separator
   * @return otoroshiDataField
   */
  @javax.annotation.Nullable
  public String getOtoroshiDataField() {
    return otoroshiDataField;
  }

  public void setOtoroshiDataField(String otoroshiDataField) {
    this.otoroshiDataField = otoroshiDataField;
  }


  public LdapAuthModuleConfig searchBase(String searchBase) {
    this.searchBase = searchBase;
    return this;
  }

  /**
   * LDAP search base
   * @return searchBase
   */
  @javax.annotation.Nonnull
  public String getSearchBase() {
    return searchBase;
  }

  public void setSearchBase(String searchBase) {
    this.searchBase = searchBase;
  }


  public LdapAuthModuleConfig searchFilter(String searchFilter) {
    this.searchFilter = searchFilter;
    return this;
  }

  /**
   * Filter for users
   * @return searchFilter
   */
  @javax.annotation.Nonnull
  public String getSearchFilter() {
    return searchFilter;
  }

  public void setSearchFilter(String searchFilter) {
    this.searchFilter = searchFilter;
  }


  public LdapAuthModuleConfig serverUrl(String serverUrl) {
    this.serverUrl = serverUrl;
    return this;
  }

  /**
   * URL of the ldap server
   * @return serverUrl
   */
  @javax.annotation.Nonnull
  public String getServerUrl() {
    return serverUrl;
  }

  public void setServerUrl(String serverUrl) {
    this.serverUrl = serverUrl;
  }


  public LdapAuthModuleConfig sessionMaxAge(Integer sessionMaxAge) {
    this.sessionMaxAge = sessionMaxAge;
    return this;
  }

  /**
   * Max age of the session
   * @return sessionMaxAge
   */
  @javax.annotation.Nonnull
  public Integer getSessionMaxAge() {
    return sessionMaxAge;
  }

  public void setSessionMaxAge(Integer sessionMaxAge) {
    this.sessionMaxAge = sessionMaxAge;
  }


  public LdapAuthModuleConfig type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Type of settings. value is ldap
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public LdapAuthModuleConfig userBase(String userBase) {
    this.userBase = userBase;
    return this;
  }

  /**
   * LDAP user base DN
   * @return userBase
   */
  @javax.annotation.Nonnull
  public String getUserBase() {
    return userBase;
  }

  public void setUserBase(String userBase) {
    this.userBase = userBase;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LdapAuthModuleConfig ldapAuthModuleConfig = (LdapAuthModuleConfig) o;
    return Objects.equals(this.adminPassword, ldapAuthModuleConfig.adminPassword) &&
        Objects.equals(this.adminUsername, ldapAuthModuleConfig.adminUsername) &&
        Objects.equals(this.desc, ldapAuthModuleConfig.desc) &&
        Objects.equals(this.emailField, ldapAuthModuleConfig.emailField) &&
        Objects.equals(this.groupFilter, ldapAuthModuleConfig.groupFilter) &&
        Objects.equals(this.id, ldapAuthModuleConfig.id) &&
        Objects.equals(this.name, ldapAuthModuleConfig.name) &&
        Objects.equals(this.nameField, ldapAuthModuleConfig.nameField) &&
        Objects.equals(this.otoroshiDataField, ldapAuthModuleConfig.otoroshiDataField) &&
        Objects.equals(this.searchBase, ldapAuthModuleConfig.searchBase) &&
        Objects.equals(this.searchFilter, ldapAuthModuleConfig.searchFilter) &&
        Objects.equals(this.serverUrl, ldapAuthModuleConfig.serverUrl) &&
        Objects.equals(this.sessionMaxAge, ldapAuthModuleConfig.sessionMaxAge) &&
        Objects.equals(this.type, ldapAuthModuleConfig.type) &&
        Objects.equals(this.userBase, ldapAuthModuleConfig.userBase);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adminPassword, adminUsername, desc, emailField, groupFilter, id, name, nameField, otoroshiDataField, searchBase, searchFilter, serverUrl, sessionMaxAge, type, userBase);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LdapAuthModuleConfig {\n");
    sb.append("    adminPassword: ").append(toIndentedString(adminPassword)).append("\n");
    sb.append("    adminUsername: ").append(toIndentedString(adminUsername)).append("\n");
    sb.append("    desc: ").append(toIndentedString(desc)).append("\n");
    sb.append("    emailField: ").append(toIndentedString(emailField)).append("\n");
    sb.append("    groupFilter: ").append(toIndentedString(groupFilter)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nameField: ").append(toIndentedString(nameField)).append("\n");
    sb.append("    otoroshiDataField: ").append(toIndentedString(otoroshiDataField)).append("\n");
    sb.append("    searchBase: ").append(toIndentedString(searchBase)).append("\n");
    sb.append("    searchFilter: ").append(toIndentedString(searchFilter)).append("\n");
    sb.append("    serverUrl: ").append(toIndentedString(serverUrl)).append("\n");
    sb.append("    sessionMaxAge: ").append(toIndentedString(sessionMaxAge)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    userBase: ").append(toIndentedString(userBase)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adminPassword");
    openapiFields.add("adminUsername");
    openapiFields.add("desc");
    openapiFields.add("emailField");
    openapiFields.add("groupFilter");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("nameField");
    openapiFields.add("otoroshiDataField");
    openapiFields.add("searchBase");
    openapiFields.add("searchFilter");
    openapiFields.add("serverUrl");
    openapiFields.add("sessionMaxAge");
    openapiFields.add("type");
    openapiFields.add("userBase");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("adminPassword");
    openapiRequiredFields.add("adminUsername");
    openapiRequiredFields.add("desc");
    openapiRequiredFields.add("emailField");
    openapiRequiredFields.add("groupFilter");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("nameField");
    openapiRequiredFields.add("searchBase");
    openapiRequiredFields.add("searchFilter");
    openapiRequiredFields.add("serverUrl");
    openapiRequiredFields.add("sessionMaxAge");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("userBase");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LdapAuthModuleConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LdapAuthModuleConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LdapAuthModuleConfig is not found in the empty JSON string", LdapAuthModuleConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LdapAuthModuleConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LdapAuthModuleConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LdapAuthModuleConfig.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("adminPassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adminPassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adminPassword").toString()));
      }
      if (!jsonObj.get("adminUsername").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adminUsername` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adminUsername").toString()));
      }
      if (!jsonObj.get("desc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `desc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("desc").toString()));
      }
      if (!jsonObj.get("emailField").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailField` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emailField").toString()));
      }
      if (!jsonObj.get("groupFilter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupFilter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupFilter").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("nameField").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameField` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nameField").toString()));
      }
      if ((jsonObj.get("otoroshiDataField") != null && !jsonObj.get("otoroshiDataField").isJsonNull()) && !jsonObj.get("otoroshiDataField").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `otoroshiDataField` to be a primitive type in the JSON string but got `%s`", jsonObj.get("otoroshiDataField").toString()));
      }
      if (!jsonObj.get("searchBase").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `searchBase` to be a primitive type in the JSON string but got `%s`", jsonObj.get("searchBase").toString()));
      }
      if (!jsonObj.get("searchFilter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `searchFilter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("searchFilter").toString()));
      }
      if (!jsonObj.get("serverUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serverUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serverUrl").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (!jsonObj.get("userBase").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userBase` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userBase").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LdapAuthModuleConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LdapAuthModuleConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LdapAuthModuleConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LdapAuthModuleConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<LdapAuthModuleConfig>() {
           @Override
           public void write(JsonWriter out, LdapAuthModuleConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LdapAuthModuleConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LdapAuthModuleConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LdapAuthModuleConfig
   * @throws IOException if the JSON string is invalid with respect to LdapAuthModuleConfig
   */
  public static LdapAuthModuleConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LdapAuthModuleConfig.class);
  }

  /**
   * Convert an instance of LdapAuthModuleConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

