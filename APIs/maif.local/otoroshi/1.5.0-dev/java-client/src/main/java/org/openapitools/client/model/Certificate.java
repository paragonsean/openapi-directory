/*
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A SSL/TLS X509 certificate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:27.562730-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Certificate {
  public static final String SERIALIZED_NAME_AUTO_RENEW = "autoRenew";
  @SerializedName(SERIALIZED_NAME_AUTO_RENEW)
  private String autoRenew;

  public static final String SERIALIZED_NAME_CA = "ca";
  @SerializedName(SERIALIZED_NAME_CA)
  private String ca;

  public static final String SERIALIZED_NAME_CA_REF = "caRef";
  @SerializedName(SERIALIZED_NAME_CA_REF)
  private String caRef;

  public static final String SERIALIZED_NAME_CHAIN = "chain";
  @SerializedName(SERIALIZED_NAME_CHAIN)
  private String chain;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  private String from;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_PRIVATE_KEY = "privateKey";
  @SerializedName(SERIALIZED_NAME_PRIVATE_KEY)
  private String privateKey;

  public static final String SERIALIZED_NAME_SELF_SIGNED = "selfSigned";
  @SerializedName(SERIALIZED_NAME_SELF_SIGNED)
  private String selfSigned;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private String to;

  public static final String SERIALIZED_NAME_VALID = "valid";
  @SerializedName(SERIALIZED_NAME_VALID)
  private String valid;

  public Certificate() {
  }

  public Certificate autoRenew(String autoRenew) {
    this.autoRenew = autoRenew;
    return this;
  }

  /**
   * Allow Otoroshi to renew the certificate (if self signed)
   * @return autoRenew
   */
  @javax.annotation.Nonnull
  public String getAutoRenew() {
    return autoRenew;
  }

  public void setAutoRenew(String autoRenew) {
    this.autoRenew = autoRenew;
  }


  public Certificate ca(String ca) {
    this.ca = ca;
    return this;
  }

  /**
   * Certificate is a CA (read only)
   * @return ca
   */
  @javax.annotation.Nonnull
  public String getCa() {
    return ca;
  }

  public void setCa(String ca) {
    this.ca = ca;
  }


  public Certificate caRef(String caRef) {
    this.caRef = caRef;
    return this;
  }

  /**
   * Reference for a CA certificate in otoroshi
   * @return caRef
   */
  @javax.annotation.Nonnull
  public String getCaRef() {
    return caRef;
  }

  public void setCaRef(String caRef) {
    this.caRef = caRef;
  }


  public Certificate chain(String chain) {
    this.chain = chain;
    return this;
  }

  /**
   * Certificate chain of trust in PEM format
   * @return chain
   */
  @javax.annotation.Nonnull
  public String getChain() {
    return chain;
  }

  public void setChain(String chain) {
    this.chain = chain;
  }


  public Certificate domain(String domain) {
    this.domain = domain;
    return this;
  }

  /**
   * Domain of the certificate (read only)
   * @return domain
   */
  @javax.annotation.Nonnull
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }


  public Certificate from(String from) {
    this.from = from;
    return this;
  }

  /**
   * Start date of validity
   * @return from
   */
  @javax.annotation.Nonnull
  public String getFrom() {
    return from;
  }

  public void setFrom(String from) {
    this.from = from;
  }


  public Certificate id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Id of the certificate
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Certificate privateKey(String privateKey) {
    this.privateKey = privateKey;
    return this;
  }

  /**
   * PKCS8 private key in PEM format
   * @return privateKey
   */
  @javax.annotation.Nonnull
  public String getPrivateKey() {
    return privateKey;
  }

  public void setPrivateKey(String privateKey) {
    this.privateKey = privateKey;
  }


  public Certificate selfSigned(String selfSigned) {
    this.selfSigned = selfSigned;
    return this;
  }

  /**
   * Certificate is self signed  read only)
   * @return selfSigned
   */
  @javax.annotation.Nonnull
  public String getSelfSigned() {
    return selfSigned;
  }

  public void setSelfSigned(String selfSigned) {
    this.selfSigned = selfSigned;
  }


  public Certificate subject(String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * Subject of the certificate (read only)
   * @return subject
   */
  @javax.annotation.Nonnull
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }


  public Certificate to(String to) {
    this.to = to;
    return this;
  }

  /**
   * End date of validity
   * @return to
   */
  @javax.annotation.Nonnull
  public String getTo() {
    return to;
  }

  public void setTo(String to) {
    this.to = to;
  }


  public Certificate valid(String valid) {
    this.valid = valid;
    return this;
  }

  /**
   * Certificate is valid (read only)
   * @return valid
   */
  @javax.annotation.Nonnull
  public String getValid() {
    return valid;
  }

  public void setValid(String valid) {
    this.valid = valid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Certificate certificate = (Certificate) o;
    return Objects.equals(this.autoRenew, certificate.autoRenew) &&
        Objects.equals(this.ca, certificate.ca) &&
        Objects.equals(this.caRef, certificate.caRef) &&
        Objects.equals(this.chain, certificate.chain) &&
        Objects.equals(this.domain, certificate.domain) &&
        Objects.equals(this.from, certificate.from) &&
        Objects.equals(this.id, certificate.id) &&
        Objects.equals(this.privateKey, certificate.privateKey) &&
        Objects.equals(this.selfSigned, certificate.selfSigned) &&
        Objects.equals(this.subject, certificate.subject) &&
        Objects.equals(this.to, certificate.to) &&
        Objects.equals(this.valid, certificate.valid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoRenew, ca, caRef, chain, domain, from, id, privateKey, selfSigned, subject, to, valid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Certificate {\n");
    sb.append("    autoRenew: ").append(toIndentedString(autoRenew)).append("\n");
    sb.append("    ca: ").append(toIndentedString(ca)).append("\n");
    sb.append("    caRef: ").append(toIndentedString(caRef)).append("\n");
    sb.append("    chain: ").append(toIndentedString(chain)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    privateKey: ").append(toIndentedString(privateKey)).append("\n");
    sb.append("    selfSigned: ").append(toIndentedString(selfSigned)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    valid: ").append(toIndentedString(valid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("autoRenew");
    openapiFields.add("ca");
    openapiFields.add("caRef");
    openapiFields.add("chain");
    openapiFields.add("domain");
    openapiFields.add("from");
    openapiFields.add("id");
    openapiFields.add("privateKey");
    openapiFields.add("selfSigned");
    openapiFields.add("subject");
    openapiFields.add("to");
    openapiFields.add("valid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("autoRenew");
    openapiRequiredFields.add("ca");
    openapiRequiredFields.add("caRef");
    openapiRequiredFields.add("chain");
    openapiRequiredFields.add("domain");
    openapiRequiredFields.add("from");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("privateKey");
    openapiRequiredFields.add("selfSigned");
    openapiRequiredFields.add("subject");
    openapiRequiredFields.add("to");
    openapiRequiredFields.add("valid");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Certificate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Certificate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Certificate is not found in the empty JSON string", Certificate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Certificate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Certificate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Certificate.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("autoRenew").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `autoRenew` to be a primitive type in the JSON string but got `%s`", jsonObj.get("autoRenew").toString()));
      }
      if (!jsonObj.get("ca").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ca` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ca").toString()));
      }
      if (!jsonObj.get("caRef").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `caRef` to be a primitive type in the JSON string but got `%s`", jsonObj.get("caRef").toString()));
      }
      if (!jsonObj.get("chain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chain").toString()));
      }
      if (!jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if (!jsonObj.get("from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("from").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("privateKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privateKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privateKey").toString()));
      }
      if (!jsonObj.get("selfSigned").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selfSigned` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selfSigned").toString()));
      }
      if (!jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
      if (!jsonObj.get("to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("to").toString()));
      }
      if (!jsonObj.get("valid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `valid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("valid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Certificate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Certificate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Certificate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Certificate.class));

       return (TypeAdapter<T>) new TypeAdapter<Certificate>() {
           @Override
           public void write(JsonWriter out, Certificate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Certificate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Certificate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Certificate
   * @throws IOException if the JSON string is invalid with respect to Certificate
   */
  public static Certificate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Certificate.class);
  }

  /**
   * Convert an instance of Certificate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

