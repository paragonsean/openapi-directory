/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICleverSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICleverSettings::OAICleverSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICleverSettings::OAICleverSettings() {
    this->initializeModel();
}

OAICleverSettings::~OAICleverSettings() {}

void OAICleverSettings::initializeModel() {

    m_consumer_key_isSet = false;
    m_consumer_key_isValid = false;

    m_consumer_secret_isSet = false;
    m_consumer_secret_isValid = false;

    m_orga_id_isSet = false;
    m_orga_id_isValid = false;

    m_secret_isSet = false;
    m_secret_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;
}

void OAICleverSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICleverSettings::fromJsonObject(QJsonObject json) {

    m_consumer_key_isValid = ::OpenAPI::fromJsonValue(m_consumer_key, json[QString("consumerKey")]);
    m_consumer_key_isSet = !json[QString("consumerKey")].isNull() && m_consumer_key_isValid;

    m_consumer_secret_isValid = ::OpenAPI::fromJsonValue(m_consumer_secret, json[QString("consumerSecret")]);
    m_consumer_secret_isSet = !json[QString("consumerSecret")].isNull() && m_consumer_secret_isValid;

    m_orga_id_isValid = ::OpenAPI::fromJsonValue(m_orga_id, json[QString("orgaId")]);
    m_orga_id_isSet = !json[QString("orgaId")].isNull() && m_orga_id_isValid;

    m_secret_isValid = ::OpenAPI::fromJsonValue(m_secret, json[QString("secret")]);
    m_secret_isSet = !json[QString("secret")].isNull() && m_secret_isValid;

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;
}

QString OAICleverSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICleverSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_consumer_key_isSet) {
        obj.insert(QString("consumerKey"), ::OpenAPI::toJsonValue(m_consumer_key));
    }
    if (m_consumer_secret_isSet) {
        obj.insert(QString("consumerSecret"), ::OpenAPI::toJsonValue(m_consumer_secret));
    }
    if (m_orga_id_isSet) {
        obj.insert(QString("orgaId"), ::OpenAPI::toJsonValue(m_orga_id));
    }
    if (m_secret_isSet) {
        obj.insert(QString("secret"), ::OpenAPI::toJsonValue(m_secret));
    }
    if (m_token_isSet) {
        obj.insert(QString("token"), ::OpenAPI::toJsonValue(m_token));
    }
    return obj;
}

QString OAICleverSettings::getConsumerKey() const {
    return m_consumer_key;
}
void OAICleverSettings::setConsumerKey(const QString &consumer_key) {
    m_consumer_key = consumer_key;
    m_consumer_key_isSet = true;
}

bool OAICleverSettings::is_consumer_key_Set() const{
    return m_consumer_key_isSet;
}

bool OAICleverSettings::is_consumer_key_Valid() const{
    return m_consumer_key_isValid;
}

QString OAICleverSettings::getConsumerSecret() const {
    return m_consumer_secret;
}
void OAICleverSettings::setConsumerSecret(const QString &consumer_secret) {
    m_consumer_secret = consumer_secret;
    m_consumer_secret_isSet = true;
}

bool OAICleverSettings::is_consumer_secret_Set() const{
    return m_consumer_secret_isSet;
}

bool OAICleverSettings::is_consumer_secret_Valid() const{
    return m_consumer_secret_isValid;
}

QString OAICleverSettings::getOrgaId() const {
    return m_orga_id;
}
void OAICleverSettings::setOrgaId(const QString &orga_id) {
    m_orga_id = orga_id;
    m_orga_id_isSet = true;
}

bool OAICleverSettings::is_orga_id_Set() const{
    return m_orga_id_isSet;
}

bool OAICleverSettings::is_orga_id_Valid() const{
    return m_orga_id_isValid;
}

QString OAICleverSettings::getSecret() const {
    return m_secret;
}
void OAICleverSettings::setSecret(const QString &secret) {
    m_secret = secret;
    m_secret_isSet = true;
}

bool OAICleverSettings::is_secret_Set() const{
    return m_secret_isSet;
}

bool OAICleverSettings::is_secret_Valid() const{
    return m_secret_isValid;
}

QString OAICleverSettings::getToken() const {
    return m_token;
}
void OAICleverSettings::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAICleverSettings::is_token_Set() const{
    return m_token_isSet;
}

bool OAICleverSettings::is_token_Valid() const{
    return m_token_isValid;
}

bool OAICleverSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_consumer_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consumer_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_orga_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICleverSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_consumer_key_isValid && m_consumer_secret_isValid && m_orga_id_isValid && m_secret_isValid && m_token_isValid && true;
}

} // namespace OpenAPI
