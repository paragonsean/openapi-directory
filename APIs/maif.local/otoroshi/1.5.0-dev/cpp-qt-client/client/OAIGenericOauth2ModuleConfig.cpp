/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGenericOauth2ModuleConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGenericOauth2ModuleConfig::OAIGenericOauth2ModuleConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGenericOauth2ModuleConfig::OAIGenericOauth2ModuleConfig() {
    this->initializeModel();
}

OAIGenericOauth2ModuleConfig::~OAIGenericOauth2ModuleConfig() {}

void OAIGenericOauth2ModuleConfig::initializeModel() {

    m_access_token_field_isSet = false;
    m_access_token_field_isValid = false;

    m_authorize_url_isSet = false;
    m_authorize_url_isValid = false;

    m_callback_url_isSet = false;
    m_callback_url_isValid = false;

    m_claims_isSet = false;
    m_claims_isValid = false;

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_client_secret_isSet = false;
    m_client_secret_isValid = false;

    m_desc_isSet = false;
    m_desc_isValid = false;

    m_email_field_isSet = false;
    m_email_field_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_jwt_verifier_isSet = false;
    m_jwt_verifier_isValid = false;

    m_login_url_isSet = false;
    m_login_url_isValid = false;

    m_logout_url_isSet = false;
    m_logout_url_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_name_field_isSet = false;
    m_name_field_isValid = false;

    m_oid_config_isSet = false;
    m_oid_config_isValid = false;

    m_otoroshi_data_field_isSet = false;
    m_otoroshi_data_field_isValid = false;

    m_read_profile_from_token_isSet = false;
    m_read_profile_from_token_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;

    m_session_max_age_isSet = false;
    m_session_max_age_isValid = false;

    m_token_url_isSet = false;
    m_token_url_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_use_cookies_isSet = false;
    m_use_cookies_isValid = false;

    m_use_json_isSet = false;
    m_use_json_isValid = false;

    m_user_info_url_isSet = false;
    m_user_info_url_isValid = false;
}

void OAIGenericOauth2ModuleConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGenericOauth2ModuleConfig::fromJsonObject(QJsonObject json) {

    m_access_token_field_isValid = ::OpenAPI::fromJsonValue(m_access_token_field, json[QString("accessTokenField")]);
    m_access_token_field_isSet = !json[QString("accessTokenField")].isNull() && m_access_token_field_isValid;

    m_authorize_url_isValid = ::OpenAPI::fromJsonValue(m_authorize_url, json[QString("authorizeUrl")]);
    m_authorize_url_isSet = !json[QString("authorizeUrl")].isNull() && m_authorize_url_isValid;

    m_callback_url_isValid = ::OpenAPI::fromJsonValue(m_callback_url, json[QString("callbackUrl")]);
    m_callback_url_isSet = !json[QString("callbackUrl")].isNull() && m_callback_url_isValid;

    m_claims_isValid = ::OpenAPI::fromJsonValue(m_claims, json[QString("claims")]);
    m_claims_isSet = !json[QString("claims")].isNull() && m_claims_isValid;

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("clientId")]);
    m_client_id_isSet = !json[QString("clientId")].isNull() && m_client_id_isValid;

    m_client_secret_isValid = ::OpenAPI::fromJsonValue(m_client_secret, json[QString("clientSecret")]);
    m_client_secret_isSet = !json[QString("clientSecret")].isNull() && m_client_secret_isValid;

    m_desc_isValid = ::OpenAPI::fromJsonValue(m_desc, json[QString("desc")]);
    m_desc_isSet = !json[QString("desc")].isNull() && m_desc_isValid;

    m_email_field_isValid = ::OpenAPI::fromJsonValue(m_email_field, json[QString("emailField")]);
    m_email_field_isSet = !json[QString("emailField")].isNull() && m_email_field_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_jwt_verifier_isValid = ::OpenAPI::fromJsonValue(m_jwt_verifier, json[QString("jwtVerifier")]);
    m_jwt_verifier_isSet = !json[QString("jwtVerifier")].isNull() && m_jwt_verifier_isValid;

    m_login_url_isValid = ::OpenAPI::fromJsonValue(m_login_url, json[QString("loginUrl")]);
    m_login_url_isSet = !json[QString("loginUrl")].isNull() && m_login_url_isValid;

    m_logout_url_isValid = ::OpenAPI::fromJsonValue(m_logout_url, json[QString("logoutUrl")]);
    m_logout_url_isSet = !json[QString("logoutUrl")].isNull() && m_logout_url_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_name_field_isValid = ::OpenAPI::fromJsonValue(m_name_field, json[QString("nameField")]);
    m_name_field_isSet = !json[QString("nameField")].isNull() && m_name_field_isValid;

    m_oid_config_isValid = ::OpenAPI::fromJsonValue(m_oid_config, json[QString("oidConfig")]);
    m_oid_config_isSet = !json[QString("oidConfig")].isNull() && m_oid_config_isValid;

    m_otoroshi_data_field_isValid = ::OpenAPI::fromJsonValue(m_otoroshi_data_field, json[QString("otoroshiDataField")]);
    m_otoroshi_data_field_isSet = !json[QString("otoroshiDataField")].isNull() && m_otoroshi_data_field_isValid;

    m_read_profile_from_token_isValid = ::OpenAPI::fromJsonValue(m_read_profile_from_token, json[QString("readProfileFromToken")]);
    m_read_profile_from_token_isSet = !json[QString("readProfileFromToken")].isNull() && m_read_profile_from_token_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;

    m_session_max_age_isValid = ::OpenAPI::fromJsonValue(m_session_max_age, json[QString("sessionMaxAge")]);
    m_session_max_age_isSet = !json[QString("sessionMaxAge")].isNull() && m_session_max_age_isValid;

    m_token_url_isValid = ::OpenAPI::fromJsonValue(m_token_url, json[QString("tokenUrl")]);
    m_token_url_isSet = !json[QString("tokenUrl")].isNull() && m_token_url_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_use_cookies_isValid = ::OpenAPI::fromJsonValue(m_use_cookies, json[QString("useCookies")]);
    m_use_cookies_isSet = !json[QString("useCookies")].isNull() && m_use_cookies_isValid;

    m_use_json_isValid = ::OpenAPI::fromJsonValue(m_use_json, json[QString("useJson")]);
    m_use_json_isSet = !json[QString("useJson")].isNull() && m_use_json_isValid;

    m_user_info_url_isValid = ::OpenAPI::fromJsonValue(m_user_info_url, json[QString("userInfoUrl")]);
    m_user_info_url_isSet = !json[QString("userInfoUrl")].isNull() && m_user_info_url_isValid;
}

QString OAIGenericOauth2ModuleConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGenericOauth2ModuleConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_access_token_field_isSet) {
        obj.insert(QString("accessTokenField"), ::OpenAPI::toJsonValue(m_access_token_field));
    }
    if (m_authorize_url_isSet) {
        obj.insert(QString("authorizeUrl"), ::OpenAPI::toJsonValue(m_authorize_url));
    }
    if (m_callback_url_isSet) {
        obj.insert(QString("callbackUrl"), ::OpenAPI::toJsonValue(m_callback_url));
    }
    if (m_claims_isSet) {
        obj.insert(QString("claims"), ::OpenAPI::toJsonValue(m_claims));
    }
    if (m_client_id_isSet) {
        obj.insert(QString("clientId"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_client_secret_isSet) {
        obj.insert(QString("clientSecret"), ::OpenAPI::toJsonValue(m_client_secret));
    }
    if (m_desc_isSet) {
        obj.insert(QString("desc"), ::OpenAPI::toJsonValue(m_desc));
    }
    if (m_email_field_isSet) {
        obj.insert(QString("emailField"), ::OpenAPI::toJsonValue(m_email_field));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_jwt_verifier.isSet()) {
        obj.insert(QString("jwtVerifier"), ::OpenAPI::toJsonValue(m_jwt_verifier));
    }
    if (m_login_url_isSet) {
        obj.insert(QString("loginUrl"), ::OpenAPI::toJsonValue(m_login_url));
    }
    if (m_logout_url_isSet) {
        obj.insert(QString("logoutUrl"), ::OpenAPI::toJsonValue(m_logout_url));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_name_field_isSet) {
        obj.insert(QString("nameField"), ::OpenAPI::toJsonValue(m_name_field));
    }
    if (m_oid_config_isSet) {
        obj.insert(QString("oidConfig"), ::OpenAPI::toJsonValue(m_oid_config));
    }
    if (m_otoroshi_data_field_isSet) {
        obj.insert(QString("otoroshiDataField"), ::OpenAPI::toJsonValue(m_otoroshi_data_field));
    }
    if (m_read_profile_from_token_isSet) {
        obj.insert(QString("readProfileFromToken"), ::OpenAPI::toJsonValue(m_read_profile_from_token));
    }
    if (m_scope_isSet) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    if (m_session_max_age_isSet) {
        obj.insert(QString("sessionMaxAge"), ::OpenAPI::toJsonValue(m_session_max_age));
    }
    if (m_token_url_isSet) {
        obj.insert(QString("tokenUrl"), ::OpenAPI::toJsonValue(m_token_url));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_use_cookies_isSet) {
        obj.insert(QString("useCookies"), ::OpenAPI::toJsonValue(m_use_cookies));
    }
    if (m_use_json_isSet) {
        obj.insert(QString("useJson"), ::OpenAPI::toJsonValue(m_use_json));
    }
    if (m_user_info_url_isSet) {
        obj.insert(QString("userInfoUrl"), ::OpenAPI::toJsonValue(m_user_info_url));
    }
    return obj;
}

QString OAIGenericOauth2ModuleConfig::getAccessTokenField() const {
    return m_access_token_field;
}
void OAIGenericOauth2ModuleConfig::setAccessTokenField(const QString &access_token_field) {
    m_access_token_field = access_token_field;
    m_access_token_field_isSet = true;
}

bool OAIGenericOauth2ModuleConfig::is_access_token_field_Set() const{
    return m_access_token_field_isSet;
}

bool OAIGenericOauth2ModuleConfig::is_access_token_field_Valid() const{
    return m_access_token_field_isValid;
}

QString OAIGenericOauth2ModuleConfig::getAuthorizeUrl() const {
    return m_authorize_url;
}
void OAIGenericOauth2ModuleConfig::setAuthorizeUrl(const QString &authorize_url) {
    m_authorize_url = authorize_url;
    m_authorize_url_isSet = true;
}

bool OAIGenericOauth2ModuleConfig::is_authorize_url_Set() const{
    return m_authorize_url_isSet;
}

bool OAIGenericOauth2ModuleConfig::is_authorize_url_Valid() const{
    return m_authorize_url_isValid;
}

QString OAIGenericOauth2ModuleConfig::getCallbackUrl() const {
    return m_callback_url;
}
void OAIGenericOauth2ModuleConfig::setCallbackUrl(const QString &callback_url) {
    m_callback_url = callback_url;
    m_callback_url_isSet = true;
}

bool OAIGenericOauth2ModuleConfig::is_callback_url_Set() const{
    return m_callback_url_isSet;
}

bool OAIGenericOauth2ModuleConfig::is_callback_url_Valid() const{
    return m_callback_url_isValid;
}

QString OAIGenericOauth2ModuleConfig::getClaims() const {
    return m_claims;
}
void OAIGenericOauth2ModuleConfig::setClaims(const QString &claims) {
    m_claims = claims;
    m_claims_isSet = true;
}

bool OAIGenericOauth2ModuleConfig::is_claims_Set() const{
    return m_claims_isSet;
}

bool OAIGenericOauth2ModuleConfig::is_claims_Valid() const{
    return m_claims_isValid;
}

QString OAIGenericOauth2ModuleConfig::getClientId() const {
    return m_client_id;
}
void OAIGenericOauth2ModuleConfig::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIGenericOauth2ModuleConfig::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIGenericOauth2ModuleConfig::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIGenericOauth2ModuleConfig::getClientSecret() const {
    return m_client_secret;
}
void OAIGenericOauth2ModuleConfig::setClientSecret(const QString &client_secret) {
    m_client_secret = client_secret;
    m_client_secret_isSet = true;
}

bool OAIGenericOauth2ModuleConfig::is_client_secret_Set() const{
    return m_client_secret_isSet;
}

bool OAIGenericOauth2ModuleConfig::is_client_secret_Valid() const{
    return m_client_secret_isValid;
}

QString OAIGenericOauth2ModuleConfig::getDesc() const {
    return m_desc;
}
void OAIGenericOauth2ModuleConfig::setDesc(const QString &desc) {
    m_desc = desc;
    m_desc_isSet = true;
}

bool OAIGenericOauth2ModuleConfig::is_desc_Set() const{
    return m_desc_isSet;
}

bool OAIGenericOauth2ModuleConfig::is_desc_Valid() const{
    return m_desc_isValid;
}

QString OAIGenericOauth2ModuleConfig::getEmailField() const {
    return m_email_field;
}
void OAIGenericOauth2ModuleConfig::setEmailField(const QString &email_field) {
    m_email_field = email_field;
    m_email_field_isSet = true;
}

bool OAIGenericOauth2ModuleConfig::is_email_field_Set() const{
    return m_email_field_isSet;
}

bool OAIGenericOauth2ModuleConfig::is_email_field_Valid() const{
    return m_email_field_isValid;
}

QString OAIGenericOauth2ModuleConfig::getId() const {
    return m_id;
}
void OAIGenericOauth2ModuleConfig::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGenericOauth2ModuleConfig::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGenericOauth2ModuleConfig::is_id_Valid() const{
    return m_id_isValid;
}

OAIGenericOauth2ModuleConfig_jwtVerifier OAIGenericOauth2ModuleConfig::getJwtVerifier() const {
    return m_jwt_verifier;
}
void OAIGenericOauth2ModuleConfig::setJwtVerifier(const OAIGenericOauth2ModuleConfig_jwtVerifier &jwt_verifier) {
    m_jwt_verifier = jwt_verifier;
    m_jwt_verifier_isSet = true;
}

bool OAIGenericOauth2ModuleConfig::is_jwt_verifier_Set() const{
    return m_jwt_verifier_isSet;
}

bool OAIGenericOauth2ModuleConfig::is_jwt_verifier_Valid() const{
    return m_jwt_verifier_isValid;
}

QString OAIGenericOauth2ModuleConfig::getLoginUrl() const {
    return m_login_url;
}
void OAIGenericOauth2ModuleConfig::setLoginUrl(const QString &login_url) {
    m_login_url = login_url;
    m_login_url_isSet = true;
}

bool OAIGenericOauth2ModuleConfig::is_login_url_Set() const{
    return m_login_url_isSet;
}

bool OAIGenericOauth2ModuleConfig::is_login_url_Valid() const{
    return m_login_url_isValid;
}

QString OAIGenericOauth2ModuleConfig::getLogoutUrl() const {
    return m_logout_url;
}
void OAIGenericOauth2ModuleConfig::setLogoutUrl(const QString &logout_url) {
    m_logout_url = logout_url;
    m_logout_url_isSet = true;
}

bool OAIGenericOauth2ModuleConfig::is_logout_url_Set() const{
    return m_logout_url_isSet;
}

bool OAIGenericOauth2ModuleConfig::is_logout_url_Valid() const{
    return m_logout_url_isValid;
}

QString OAIGenericOauth2ModuleConfig::getName() const {
    return m_name;
}
void OAIGenericOauth2ModuleConfig::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGenericOauth2ModuleConfig::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGenericOauth2ModuleConfig::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGenericOauth2ModuleConfig::getNameField() const {
    return m_name_field;
}
void OAIGenericOauth2ModuleConfig::setNameField(const QString &name_field) {
    m_name_field = name_field;
    m_name_field_isSet = true;
}

bool OAIGenericOauth2ModuleConfig::is_name_field_Set() const{
    return m_name_field_isSet;
}

bool OAIGenericOauth2ModuleConfig::is_name_field_Valid() const{
    return m_name_field_isValid;
}

QString OAIGenericOauth2ModuleConfig::getOidConfig() const {
    return m_oid_config;
}
void OAIGenericOauth2ModuleConfig::setOidConfig(const QString &oid_config) {
    m_oid_config = oid_config;
    m_oid_config_isSet = true;
}

bool OAIGenericOauth2ModuleConfig::is_oid_config_Set() const{
    return m_oid_config_isSet;
}

bool OAIGenericOauth2ModuleConfig::is_oid_config_Valid() const{
    return m_oid_config_isValid;
}

QString OAIGenericOauth2ModuleConfig::getOtoroshiDataField() const {
    return m_otoroshi_data_field;
}
void OAIGenericOauth2ModuleConfig::setOtoroshiDataField(const QString &otoroshi_data_field) {
    m_otoroshi_data_field = otoroshi_data_field;
    m_otoroshi_data_field_isSet = true;
}

bool OAIGenericOauth2ModuleConfig::is_otoroshi_data_field_Set() const{
    return m_otoroshi_data_field_isSet;
}

bool OAIGenericOauth2ModuleConfig::is_otoroshi_data_field_Valid() const{
    return m_otoroshi_data_field_isValid;
}

bool OAIGenericOauth2ModuleConfig::isReadProfileFromToken() const {
    return m_read_profile_from_token;
}
void OAIGenericOauth2ModuleConfig::setReadProfileFromToken(const bool &read_profile_from_token) {
    m_read_profile_from_token = read_profile_from_token;
    m_read_profile_from_token_isSet = true;
}

bool OAIGenericOauth2ModuleConfig::is_read_profile_from_token_Set() const{
    return m_read_profile_from_token_isSet;
}

bool OAIGenericOauth2ModuleConfig::is_read_profile_from_token_Valid() const{
    return m_read_profile_from_token_isValid;
}

QString OAIGenericOauth2ModuleConfig::getScope() const {
    return m_scope;
}
void OAIGenericOauth2ModuleConfig::setScope(const QString &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAIGenericOauth2ModuleConfig::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAIGenericOauth2ModuleConfig::is_scope_Valid() const{
    return m_scope_isValid;
}

qint32 OAIGenericOauth2ModuleConfig::getSessionMaxAge() const {
    return m_session_max_age;
}
void OAIGenericOauth2ModuleConfig::setSessionMaxAge(const qint32 &session_max_age) {
    m_session_max_age = session_max_age;
    m_session_max_age_isSet = true;
}

bool OAIGenericOauth2ModuleConfig::is_session_max_age_Set() const{
    return m_session_max_age_isSet;
}

bool OAIGenericOauth2ModuleConfig::is_session_max_age_Valid() const{
    return m_session_max_age_isValid;
}

QString OAIGenericOauth2ModuleConfig::getTokenUrl() const {
    return m_token_url;
}
void OAIGenericOauth2ModuleConfig::setTokenUrl(const QString &token_url) {
    m_token_url = token_url;
    m_token_url_isSet = true;
}

bool OAIGenericOauth2ModuleConfig::is_token_url_Set() const{
    return m_token_url_isSet;
}

bool OAIGenericOauth2ModuleConfig::is_token_url_Valid() const{
    return m_token_url_isValid;
}

QString OAIGenericOauth2ModuleConfig::getType() const {
    return m_type;
}
void OAIGenericOauth2ModuleConfig::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGenericOauth2ModuleConfig::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGenericOauth2ModuleConfig::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIGenericOauth2ModuleConfig::isUseCookies() const {
    return m_use_cookies;
}
void OAIGenericOauth2ModuleConfig::setUseCookies(const bool &use_cookies) {
    m_use_cookies = use_cookies;
    m_use_cookies_isSet = true;
}

bool OAIGenericOauth2ModuleConfig::is_use_cookies_Set() const{
    return m_use_cookies_isSet;
}

bool OAIGenericOauth2ModuleConfig::is_use_cookies_Valid() const{
    return m_use_cookies_isValid;
}

bool OAIGenericOauth2ModuleConfig::isUseJson() const {
    return m_use_json;
}
void OAIGenericOauth2ModuleConfig::setUseJson(const bool &use_json) {
    m_use_json = use_json;
    m_use_json_isSet = true;
}

bool OAIGenericOauth2ModuleConfig::is_use_json_Set() const{
    return m_use_json_isSet;
}

bool OAIGenericOauth2ModuleConfig::is_use_json_Valid() const{
    return m_use_json_isValid;
}

QString OAIGenericOauth2ModuleConfig::getUserInfoUrl() const {
    return m_user_info_url;
}
void OAIGenericOauth2ModuleConfig::setUserInfoUrl(const QString &user_info_url) {
    m_user_info_url = user_info_url;
    m_user_info_url_isSet = true;
}

bool OAIGenericOauth2ModuleConfig::is_user_info_url_Set() const{
    return m_user_info_url_isSet;
}

bool OAIGenericOauth2ModuleConfig::is_user_info_url_Valid() const{
    return m_user_info_url_isValid;
}

bool OAIGenericOauth2ModuleConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_token_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorize_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_callback_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_claims_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jwt_verifier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_login_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logout_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oid_config_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_otoroshi_data_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_profile_from_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_max_age_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_cookies_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_json_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_info_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGenericOauth2ModuleConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_access_token_field_isValid && m_authorize_url_isValid && m_callback_url_isValid && m_client_id_isValid && m_client_secret_isValid && m_desc_isValid && m_email_field_isValid && m_id_isValid && m_login_url_isValid && m_logout_url_isValid && m_name_isValid && m_name_field_isValid && m_otoroshi_data_field_isValid && m_session_max_age_isValid && m_token_url_isValid && m_type_isValid && m_user_info_url_isValid && true;
}

} // namespace OpenAPI
