/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILargeResponseFaultConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILargeResponseFaultConfig::OAILargeResponseFaultConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILargeResponseFaultConfig::OAILargeResponseFaultConfig() {
    this->initializeModel();
}

OAILargeResponseFaultConfig::~OAILargeResponseFaultConfig() {}

void OAILargeResponseFaultConfig::initializeModel() {

    m_additional_request_size_isSet = false;
    m_additional_request_size_isValid = false;

    m_ratio_isSet = false;
    m_ratio_isValid = false;
}

void OAILargeResponseFaultConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILargeResponseFaultConfig::fromJsonObject(QJsonObject json) {

    m_additional_request_size_isValid = ::OpenAPI::fromJsonValue(m_additional_request_size, json[QString("additionalRequestSize")]);
    m_additional_request_size_isSet = !json[QString("additionalRequestSize")].isNull() && m_additional_request_size_isValid;

    m_ratio_isValid = ::OpenAPI::fromJsonValue(m_ratio, json[QString("ratio")]);
    m_ratio_isSet = !json[QString("ratio")].isNull() && m_ratio_isValid;
}

QString OAILargeResponseFaultConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILargeResponseFaultConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_request_size_isSet) {
        obj.insert(QString("additionalRequestSize"), ::OpenAPI::toJsonValue(m_additional_request_size));
    }
    if (m_ratio_isSet) {
        obj.insert(QString("ratio"), ::OpenAPI::toJsonValue(m_ratio));
    }
    return obj;
}

qint32 OAILargeResponseFaultConfig::getAdditionalRequestSize() const {
    return m_additional_request_size;
}
void OAILargeResponseFaultConfig::setAdditionalRequestSize(const qint32 &additional_request_size) {
    m_additional_request_size = additional_request_size;
    m_additional_request_size_isSet = true;
}

bool OAILargeResponseFaultConfig::is_additional_request_size_Set() const{
    return m_additional_request_size_isSet;
}

bool OAILargeResponseFaultConfig::is_additional_request_size_Valid() const{
    return m_additional_request_size_isValid;
}

double OAILargeResponseFaultConfig::getRatio() const {
    return m_ratio;
}
void OAILargeResponseFaultConfig::setRatio(const double &ratio) {
    m_ratio = ratio;
    m_ratio_isSet = true;
}

bool OAILargeResponseFaultConfig::is_ratio_Set() const{
    return m_ratio_isSet;
}

bool OAILargeResponseFaultConfig::is_ratio_Valid() const{
    return m_ratio_isValid;
}

bool OAILargeResponseFaultConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_request_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ratio_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILargeResponseFaultConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_ratio_isValid && true;
}

} // namespace OpenAPI
