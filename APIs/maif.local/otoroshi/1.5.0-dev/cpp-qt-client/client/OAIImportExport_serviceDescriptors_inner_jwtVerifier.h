/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIImportExport_serviceDescriptors_inner_jwtVerifier.h
 *
 * 
 */

#ifndef OAIImportExport_serviceDescriptors_inner_jwtVerifier_H
#define OAIImportExport_serviceDescriptors_inner_jwtVerifier_H

#include <QJsonObject>

#include "OAIGlobalJwtVerifier_algoSettings.h"
#include "OAIGlobalJwtVerifier_source.h"
#include "OAIGlobalJwtVerifier_strategy.h"
#include "OAILocalJwtVerifier.h"
#include "OAIRefJwtVerifier.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGlobalJwtVerifier_algoSettings;
class OAIGlobalJwtVerifier_source;
class OAIGlobalJwtVerifier_strategy;

class OAIImportExport_serviceDescriptors_inner_jwtVerifier : public OAIObject {
public:
    OAIImportExport_serviceDescriptors_inner_jwtVerifier();
    OAIImportExport_serviceDescriptors_inner_jwtVerifier(QString json);
    ~OAIImportExport_serviceDescriptors_inner_jwtVerifier() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIGlobalJwtVerifier_algoSettings getAlgoSettings() const;
    void setAlgoSettings(const OAIGlobalJwtVerifier_algoSettings &algo_settings);
    bool is_algo_settings_Set() const;
    bool is_algo_settings_Valid() const;

    bool isEnabled() const;
    void setEnabled(const bool &enabled);
    bool is_enabled_Set() const;
    bool is_enabled_Valid() const;

    OAIGlobalJwtVerifier_source getSource() const;
    void setSource(const OAIGlobalJwtVerifier_source &source);
    bool is_source_Set() const;
    bool is_source_Valid() const;

    OAIGlobalJwtVerifier_strategy getStrategy() const;
    void setStrategy(const OAIGlobalJwtVerifier_strategy &strategy);
    bool is_strategy_Set() const;
    bool is_strategy_Valid() const;

    bool isStrict() const;
    void setStrict(const bool &strict);
    bool is_strict_Set() const;
    bool is_strict_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIGlobalJwtVerifier_algoSettings m_algo_settings;
    bool m_algo_settings_isSet;
    bool m_algo_settings_isValid;

    bool m_enabled;
    bool m_enabled_isSet;
    bool m_enabled_isValid;

    OAIGlobalJwtVerifier_source m_source;
    bool m_source_isSet;
    bool m_source_isValid;

    OAIGlobalJwtVerifier_strategy m_strategy;
    bool m_strategy_isSet;
    bool m_strategy_isValid;

    bool m_strict;
    bool m_strict_isSet;
    bool m_strict_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIImportExport_serviceDescriptors_inner_jwtVerifier)

#endif // OAIImportExport_serviceDescriptors_inner_jwtVerifier_H
