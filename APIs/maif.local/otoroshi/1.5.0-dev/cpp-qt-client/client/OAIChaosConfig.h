/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIChaosConfig.h
 *
 * Configuration for the faults that can be injected in requests
 */

#ifndef OAIChaosConfig_H
#define OAIChaosConfig_H

#include <QJsonObject>

#include "OAIBadResponsesFaultConfig.h"
#include "OAILargeRequestFaultConfig.h"
#include "OAILargeResponseFaultConfig.h"
#include "OAILatencyInjectionFaultConfig.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIBadResponsesFaultConfig;
class OAILargeRequestFaultConfig;
class OAILargeResponseFaultConfig;
class OAILatencyInjectionFaultConfig;

class OAIChaosConfig : public OAIObject {
public:
    OAIChaosConfig();
    OAIChaosConfig(QString json);
    ~OAIChaosConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIBadResponsesFaultConfig getBadResponsesFaultConfig() const;
    void setBadResponsesFaultConfig(const OAIBadResponsesFaultConfig &bad_responses_fault_config);
    bool is_bad_responses_fault_config_Set() const;
    bool is_bad_responses_fault_config_Valid() const;

    bool isEnabled() const;
    void setEnabled(const bool &enabled);
    bool is_enabled_Set() const;
    bool is_enabled_Valid() const;

    OAILargeRequestFaultConfig getLargeRequestFaultConfig() const;
    void setLargeRequestFaultConfig(const OAILargeRequestFaultConfig &large_request_fault_config);
    bool is_large_request_fault_config_Set() const;
    bool is_large_request_fault_config_Valid() const;

    OAILargeResponseFaultConfig getLargeResponseFaultConfig() const;
    void setLargeResponseFaultConfig(const OAILargeResponseFaultConfig &large_response_fault_config);
    bool is_large_response_fault_config_Set() const;
    bool is_large_response_fault_config_Valid() const;

    OAILatencyInjectionFaultConfig getLatencyInjectionFaultConfig() const;
    void setLatencyInjectionFaultConfig(const OAILatencyInjectionFaultConfig &latency_injection_fault_config);
    bool is_latency_injection_fault_config_Set() const;
    bool is_latency_injection_fault_config_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIBadResponsesFaultConfig m_bad_responses_fault_config;
    bool m_bad_responses_fault_config_isSet;
    bool m_bad_responses_fault_config_isValid;

    bool m_enabled;
    bool m_enabled_isSet;
    bool m_enabled_isValid;

    OAILargeRequestFaultConfig m_large_request_fault_config;
    bool m_large_request_fault_config_isSet;
    bool m_large_request_fault_config_isValid;

    OAILargeResponseFaultConfig m_large_response_fault_config;
    bool m_large_response_fault_config_isSet;
    bool m_large_response_fault_config_isValid;

    OAILatencyInjectionFaultConfig m_latency_injection_fault_config;
    bool m_latency_injection_fault_config_isSet;
    bool m_latency_injection_fault_config_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIChaosConfig)

#endif // OAIChaosConfig_H
