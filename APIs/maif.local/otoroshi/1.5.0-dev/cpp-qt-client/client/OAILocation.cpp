/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILocation::OAILocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILocation::OAILocation() {
    this->initializeModel();
}

OAILocation::~OAILocation() {}

void OAILocation::initializeModel() {

    m_teams_isSet = false;
    m_teams_isValid = false;

    m_tenant_isSet = false;
    m_tenant_isValid = false;
}

void OAILocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILocation::fromJsonObject(QJsonObject json) {

    if(json["teams"].isArray()){
        auto arr = json["teams"].toArray();
        m_teams_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QMap<QString, QString> item;
                m_teams_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_teams_isSet = !jval.isNull() && m_teams_isValid;
                m_teams.push_back(item);
            }
        }
    }

    m_tenant_isValid = ::OpenAPI::fromJsonValue(m_tenant, json[QString("tenant")]);
    m_tenant_isSet = !json[QString("tenant")].isNull() && m_tenant_isValid;
}

QString OAILocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILocation::asJsonObject() const {
    QJsonObject obj;
    if (m_teams.size() > 0) {
        
        obj.insert(QString("teams"), toJsonValue(m_teams));
    }
    if (m_tenant_isSet) {
        obj.insert(QString("tenant"), ::OpenAPI::toJsonValue(m_tenant));
    }
    return obj;
}

QList<QMap<QString, QString>> OAILocation::getTeams() const {
    return m_teams;
}
void OAILocation::setTeams(const QList<QMap<QString, QString>> &teams) {
    m_teams = teams;
    m_teams_isSet = true;
}

bool OAILocation::is_teams_Set() const{
    return m_teams_isSet;
}

bool OAILocation::is_teams_Valid() const{
    return m_teams_isValid;
}

QString OAILocation::getTenant() const {
    return m_tenant;
}
void OAILocation::setTenant(const QString &tenant) {
    m_tenant = tenant;
    m_tenant_isSet = true;
}

bool OAILocation::is_tenant_Set() const{
    return m_tenant_isSet;
}

bool OAILocation::is_tenant_Valid() const{
    return m_tenant_isValid;
}

bool OAILocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_teams.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_teams_isValid && m_tenant_isValid && true;
}

} // namespace OpenAPI
