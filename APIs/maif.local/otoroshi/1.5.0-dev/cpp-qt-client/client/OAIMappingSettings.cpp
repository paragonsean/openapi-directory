/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMappingSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMappingSettings::OAIMappingSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMappingSettings::OAIMappingSettings() {
    this->initializeModel();
}

OAIMappingSettings::~OAIMappingSettings() {}

void OAIMappingSettings::initializeModel() {

    m_map_isSet = false;
    m_map_isValid = false;

    m_remove_isSet = false;
    m_remove_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAIMappingSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMappingSettings::fromJsonObject(QJsonObject json) {

    m_map_isValid = ::OpenAPI::fromJsonValue(m_map, json[QString("map")]);
    m_map_isSet = !json[QString("map")].isNull() && m_map_isValid;

    m_remove_isValid = ::OpenAPI::fromJsonValue(m_remove, json[QString("remove")]);
    m_remove_isSet = !json[QString("remove")].isNull() && m_remove_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("values")]);
    m_values_isSet = !json[QString("values")].isNull() && m_values_isValid;
}

QString OAIMappingSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMappingSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_map.size() > 0) {
        obj.insert(QString("map"), ::OpenAPI::toJsonValue(m_map));
    }
    if (m_remove.size() > 0) {
        obj.insert(QString("remove"), ::OpenAPI::toJsonValue(m_remove));
    }
    if (m_values.size() > 0) {
        obj.insert(QString("values"), ::OpenAPI::toJsonValue(m_values));
    }
    return obj;
}

QMap<QString, QString> OAIMappingSettings::getMap() const {
    return m_map;
}
void OAIMappingSettings::setMap(const QMap<QString, QString> &map) {
    m_map = map;
    m_map_isSet = true;
}

bool OAIMappingSettings::is_map_Set() const{
    return m_map_isSet;
}

bool OAIMappingSettings::is_map_Valid() const{
    return m_map_isValid;
}

QList<QString> OAIMappingSettings::getRemove() const {
    return m_remove;
}
void OAIMappingSettings::setRemove(const QList<QString> &remove) {
    m_remove = remove;
    m_remove_isSet = true;
}

bool OAIMappingSettings::is_remove_Set() const{
    return m_remove_isSet;
}

bool OAIMappingSettings::is_remove_Valid() const{
    return m_remove_isValid;
}

QMap<QString, QString> OAIMappingSettings::getValues() const {
    return m_values;
}
void OAIMappingSettings::setValues(const QMap<QString, QString> &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAIMappingSettings::is_values_Set() const{
    return m_values_isSet;
}

bool OAIMappingSettings::is_values_Valid() const{
    return m_values_isValid;
}

bool OAIMappingSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_map.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_remove.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMappingSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_map_isValid && m_remove_isValid && m_values_isValid && true;
}

} // namespace OpenAPI
