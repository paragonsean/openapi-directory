/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOutage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOutage::OAIOutage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOutage::OAIOutage() {
    this->initializeModel();
}

OAIOutage::~OAIOutage() {}

void OAIOutage::initializeModel() {

    m_descriptor_id_isSet = false;
    m_descriptor_id_isValid = false;

    m_descriptor_name_isSet = false;
    m_descriptor_name_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_until_isSet = false;
    m_until_isValid = false;
}

void OAIOutage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOutage::fromJsonObject(QJsonObject json) {

    m_descriptor_id_isValid = ::OpenAPI::fromJsonValue(m_descriptor_id, json[QString("descriptorId")]);
    m_descriptor_id_isSet = !json[QString("descriptorId")].isNull() && m_descriptor_id_isValid;

    m_descriptor_name_isValid = ::OpenAPI::fromJsonValue(m_descriptor_name, json[QString("descriptorName")]);
    m_descriptor_name_isSet = !json[QString("descriptorName")].isNull() && m_descriptor_name_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_until_isValid = ::OpenAPI::fromJsonValue(m_until, json[QString("until")]);
    m_until_isSet = !json[QString("until")].isNull() && m_until_isValid;
}

QString OAIOutage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOutage::asJsonObject() const {
    QJsonObject obj;
    if (m_descriptor_id_isSet) {
        obj.insert(QString("descriptorId"), ::OpenAPI::toJsonValue(m_descriptor_id));
    }
    if (m_descriptor_name_isSet) {
        obj.insert(QString("descriptorName"), ::OpenAPI::toJsonValue(m_descriptor_name));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_until_isSet) {
        obj.insert(QString("until"), ::OpenAPI::toJsonValue(m_until));
    }
    return obj;
}

QString OAIOutage::getDescriptorId() const {
    return m_descriptor_id;
}
void OAIOutage::setDescriptorId(const QString &descriptor_id) {
    m_descriptor_id = descriptor_id;
    m_descriptor_id_isSet = true;
}

bool OAIOutage::is_descriptor_id_Set() const{
    return m_descriptor_id_isSet;
}

bool OAIOutage::is_descriptor_id_Valid() const{
    return m_descriptor_id_isValid;
}

QString OAIOutage::getDescriptorName() const {
    return m_descriptor_name;
}
void OAIOutage::setDescriptorName(const QString &descriptor_name) {
    m_descriptor_name = descriptor_name;
    m_descriptor_name_isSet = true;
}

bool OAIOutage::is_descriptor_name_Set() const{
    return m_descriptor_name_isSet;
}

bool OAIOutage::is_descriptor_name_Valid() const{
    return m_descriptor_name_isValid;
}

qint32 OAIOutage::getDuration() const {
    return m_duration;
}
void OAIOutage::setDuration(const qint32 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIOutage::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIOutage::is_duration_Valid() const{
    return m_duration_isValid;
}

QString OAIOutage::getUntil() const {
    return m_until;
}
void OAIOutage::setUntil(const QString &until) {
    m_until = until;
    m_until_isSet = true;
}

bool OAIOutage::is_until_Set() const{
    return m_until_isSet;
}

bool OAIOutage::is_until_Valid() const{
    return m_until_isValid;
}

bool OAIOutage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_descriptor_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_descriptor_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_until_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOutage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_descriptor_id_isValid && m_descriptor_name_isValid && m_duration_isValid && m_until_isValid && true;
}

} // namespace OpenAPI
