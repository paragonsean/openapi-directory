/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITemplatesApi_H
#define OAI_OAITemplatesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiKey.h"
#include "OAIGroup.h"
#include "OAIService.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITemplatesApi : public QObject {
    Q_OBJECT

public:
    OAITemplatesApi(const int timeOut = 0);
    ~OAITemplatesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void initiateApiKey();


    virtual void initiateService();


    virtual void initiateServiceGroup();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void initiateApiKeyCallback(OAIHttpRequestWorker *worker);
    void initiateServiceCallback(OAIHttpRequestWorker *worker);
    void initiateServiceGroupCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void initiateApiKeySignal(OAIApiKey summary);
    void initiateServiceSignal(OAIService summary);
    void initiateServiceGroupSignal(OAIGroup summary);


    void initiateApiKeySignalFull(OAIHttpRequestWorker *worker, OAIApiKey summary);
    void initiateServiceSignalFull(OAIHttpRequestWorker *worker, OAIService summary);
    void initiateServiceGroupSignalFull(OAIHttpRequestWorker *worker, OAIGroup summary);

    Q_DECL_DEPRECATED_X("Use initiateApiKeySignalError() instead")
    void initiateApiKeySignalE(OAIApiKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void initiateApiKeySignalError(OAIApiKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use initiateServiceSignalError() instead")
    void initiateServiceSignalE(OAIService summary, QNetworkReply::NetworkError error_type, QString error_str);
    void initiateServiceSignalError(OAIService summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use initiateServiceGroupSignalError() instead")
    void initiateServiceGroupSignalE(OAIGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void initiateServiceGroupSignalError(OAIGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use initiateApiKeySignalErrorFull() instead")
    void initiateApiKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void initiateApiKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use initiateServiceSignalErrorFull() instead")
    void initiateServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void initiateServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use initiateServiceGroupSignalErrorFull() instead")
    void initiateServiceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void initiateServiceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
