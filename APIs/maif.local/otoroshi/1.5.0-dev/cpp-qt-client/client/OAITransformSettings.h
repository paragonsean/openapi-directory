/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITransformSettings.h
 *
 * Settings to transform a JWT token and its location
 */

#ifndef OAITransformSettings_H
#define OAITransformSettings_H

#include <QJsonObject>

#include "OAIGlobalJwtVerifier_source.h"
#include "OAIMappingSettings.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGlobalJwtVerifier_source;
class OAIMappingSettings;

class OAITransformSettings : public OAIObject {
public:
    OAITransformSettings();
    OAITransformSettings(QString json);
    ~OAITransformSettings() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIGlobalJwtVerifier_source getLocation() const;
    void setLocation(const OAIGlobalJwtVerifier_source &location);
    bool is_location_Set() const;
    bool is_location_Valid() const;

    OAIMappingSettings getMappingSettings() const;
    void setMappingSettings(const OAIMappingSettings &mapping_settings);
    bool is_mapping_settings_Set() const;
    bool is_mapping_settings_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIGlobalJwtVerifier_source m_location;
    bool m_location_isSet;
    bool m_location_isValid;

    OAIMappingSettings m_mapping_settings;
    bool m_mapping_settings_isSet;
    bool m_mapping_settings_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITransformSettings)

#endif // OAITransformSettings_H
