/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJWKSAlgoSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJWKSAlgoSettings::OAIJWKSAlgoSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJWKSAlgoSettings::OAIJWKSAlgoSettings() {
    this->initializeModel();
}

OAIJWKSAlgoSettings::~OAIJWKSAlgoSettings() {}

void OAIJWKSAlgoSettings::initializeModel() {

    m_headers_isSet = false;
    m_headers_isValid = false;

    m_kty_isSet = false;
    m_kty_isValid = false;

    m_timeout_isSet = false;
    m_timeout_isValid = false;

    m_ttl_isSet = false;
    m_ttl_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIJWKSAlgoSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJWKSAlgoSettings::fromJsonObject(QJsonObject json) {

    m_headers_isValid = ::OpenAPI::fromJsonValue(m_headers, json[QString("headers")]);
    m_headers_isSet = !json[QString("headers")].isNull() && m_headers_isValid;

    m_kty_isValid = ::OpenAPI::fromJsonValue(m_kty, json[QString("kty")]);
    m_kty_isSet = !json[QString("kty")].isNull() && m_kty_isValid;

    m_timeout_isValid = ::OpenAPI::fromJsonValue(m_timeout, json[QString("timeout")]);
    m_timeout_isSet = !json[QString("timeout")].isNull() && m_timeout_isValid;

    m_ttl_isValid = ::OpenAPI::fromJsonValue(m_ttl, json[QString("ttl")]);
    m_ttl_isSet = !json[QString("ttl")].isNull() && m_ttl_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIJWKSAlgoSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJWKSAlgoSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_headers.size() > 0) {
        obj.insert(QString("headers"), ::OpenAPI::toJsonValue(m_headers));
    }
    if (m_kty_isSet) {
        obj.insert(QString("kty"), ::OpenAPI::toJsonValue(m_kty));
    }
    if (m_timeout_isSet) {
        obj.insert(QString("timeout"), ::OpenAPI::toJsonValue(m_timeout));
    }
    if (m_ttl_isSet) {
        obj.insert(QString("ttl"), ::OpenAPI::toJsonValue(m_ttl));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QMap<QString, QString> OAIJWKSAlgoSettings::getHeaders() const {
    return m_headers;
}
void OAIJWKSAlgoSettings::setHeaders(const QMap<QString, QString> &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAIJWKSAlgoSettings::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAIJWKSAlgoSettings::is_headers_Valid() const{
    return m_headers_isValid;
}

QString OAIJWKSAlgoSettings::getKty() const {
    return m_kty;
}
void OAIJWKSAlgoSettings::setKty(const QString &kty) {
    m_kty = kty;
    m_kty_isSet = true;
}

bool OAIJWKSAlgoSettings::is_kty_Set() const{
    return m_kty_isSet;
}

bool OAIJWKSAlgoSettings::is_kty_Valid() const{
    return m_kty_isValid;
}

qint64 OAIJWKSAlgoSettings::getTimeout() const {
    return m_timeout;
}
void OAIJWKSAlgoSettings::setTimeout(const qint64 &timeout) {
    m_timeout = timeout;
    m_timeout_isSet = true;
}

bool OAIJWKSAlgoSettings::is_timeout_Set() const{
    return m_timeout_isSet;
}

bool OAIJWKSAlgoSettings::is_timeout_Valid() const{
    return m_timeout_isValid;
}

qint64 OAIJWKSAlgoSettings::getTtl() const {
    return m_ttl;
}
void OAIJWKSAlgoSettings::setTtl(const qint64 &ttl) {
    m_ttl = ttl;
    m_ttl_isSet = true;
}

bool OAIJWKSAlgoSettings::is_ttl_Set() const{
    return m_ttl_isSet;
}

bool OAIJWKSAlgoSettings::is_ttl_Valid() const{
    return m_ttl_isValid;
}

QString OAIJWKSAlgoSettings::getType() const {
    return m_type;
}
void OAIJWKSAlgoSettings::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIJWKSAlgoSettings::is_type_Set() const{
    return m_type_isSet;
}

bool OAIJWKSAlgoSettings::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIJWKSAlgoSettings::getUrl() const {
    return m_url;
}
void OAIJWKSAlgoSettings::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIJWKSAlgoSettings::is_url_Set() const{
    return m_url_isSet;
}

bool OAIJWKSAlgoSettings::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIJWKSAlgoSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_kty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJWKSAlgoSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
