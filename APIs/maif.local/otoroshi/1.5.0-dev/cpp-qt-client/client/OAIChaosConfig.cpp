/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChaosConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChaosConfig::OAIChaosConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChaosConfig::OAIChaosConfig() {
    this->initializeModel();
}

OAIChaosConfig::~OAIChaosConfig() {}

void OAIChaosConfig::initializeModel() {

    m_bad_responses_fault_config_isSet = false;
    m_bad_responses_fault_config_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_large_request_fault_config_isSet = false;
    m_large_request_fault_config_isValid = false;

    m_large_response_fault_config_isSet = false;
    m_large_response_fault_config_isValid = false;

    m_latency_injection_fault_config_isSet = false;
    m_latency_injection_fault_config_isValid = false;
}

void OAIChaosConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChaosConfig::fromJsonObject(QJsonObject json) {

    m_bad_responses_fault_config_isValid = ::OpenAPI::fromJsonValue(m_bad_responses_fault_config, json[QString("badResponsesFaultConfig")]);
    m_bad_responses_fault_config_isSet = !json[QString("badResponsesFaultConfig")].isNull() && m_bad_responses_fault_config_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_large_request_fault_config_isValid = ::OpenAPI::fromJsonValue(m_large_request_fault_config, json[QString("largeRequestFaultConfig")]);
    m_large_request_fault_config_isSet = !json[QString("largeRequestFaultConfig")].isNull() && m_large_request_fault_config_isValid;

    m_large_response_fault_config_isValid = ::OpenAPI::fromJsonValue(m_large_response_fault_config, json[QString("largeResponseFaultConfig")]);
    m_large_response_fault_config_isSet = !json[QString("largeResponseFaultConfig")].isNull() && m_large_response_fault_config_isValid;

    m_latency_injection_fault_config_isValid = ::OpenAPI::fromJsonValue(m_latency_injection_fault_config, json[QString("latencyInjectionFaultConfig")]);
    m_latency_injection_fault_config_isSet = !json[QString("latencyInjectionFaultConfig")].isNull() && m_latency_injection_fault_config_isValid;
}

QString OAIChaosConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChaosConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_bad_responses_fault_config.isSet()) {
        obj.insert(QString("badResponsesFaultConfig"), ::OpenAPI::toJsonValue(m_bad_responses_fault_config));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_large_request_fault_config.isSet()) {
        obj.insert(QString("largeRequestFaultConfig"), ::OpenAPI::toJsonValue(m_large_request_fault_config));
    }
    if (m_large_response_fault_config.isSet()) {
        obj.insert(QString("largeResponseFaultConfig"), ::OpenAPI::toJsonValue(m_large_response_fault_config));
    }
    if (m_latency_injection_fault_config.isSet()) {
        obj.insert(QString("latencyInjectionFaultConfig"), ::OpenAPI::toJsonValue(m_latency_injection_fault_config));
    }
    return obj;
}

OAIBadResponsesFaultConfig OAIChaosConfig::getBadResponsesFaultConfig() const {
    return m_bad_responses_fault_config;
}
void OAIChaosConfig::setBadResponsesFaultConfig(const OAIBadResponsesFaultConfig &bad_responses_fault_config) {
    m_bad_responses_fault_config = bad_responses_fault_config;
    m_bad_responses_fault_config_isSet = true;
}

bool OAIChaosConfig::is_bad_responses_fault_config_Set() const{
    return m_bad_responses_fault_config_isSet;
}

bool OAIChaosConfig::is_bad_responses_fault_config_Valid() const{
    return m_bad_responses_fault_config_isValid;
}

bool OAIChaosConfig::isEnabled() const {
    return m_enabled;
}
void OAIChaosConfig::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIChaosConfig::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIChaosConfig::is_enabled_Valid() const{
    return m_enabled_isValid;
}

OAILargeRequestFaultConfig OAIChaosConfig::getLargeRequestFaultConfig() const {
    return m_large_request_fault_config;
}
void OAIChaosConfig::setLargeRequestFaultConfig(const OAILargeRequestFaultConfig &large_request_fault_config) {
    m_large_request_fault_config = large_request_fault_config;
    m_large_request_fault_config_isSet = true;
}

bool OAIChaosConfig::is_large_request_fault_config_Set() const{
    return m_large_request_fault_config_isSet;
}

bool OAIChaosConfig::is_large_request_fault_config_Valid() const{
    return m_large_request_fault_config_isValid;
}

OAILargeResponseFaultConfig OAIChaosConfig::getLargeResponseFaultConfig() const {
    return m_large_response_fault_config;
}
void OAIChaosConfig::setLargeResponseFaultConfig(const OAILargeResponseFaultConfig &large_response_fault_config) {
    m_large_response_fault_config = large_response_fault_config;
    m_large_response_fault_config_isSet = true;
}

bool OAIChaosConfig::is_large_response_fault_config_Set() const{
    return m_large_response_fault_config_isSet;
}

bool OAIChaosConfig::is_large_response_fault_config_Valid() const{
    return m_large_response_fault_config_isValid;
}

OAILatencyInjectionFaultConfig OAIChaosConfig::getLatencyInjectionFaultConfig() const {
    return m_latency_injection_fault_config;
}
void OAIChaosConfig::setLatencyInjectionFaultConfig(const OAILatencyInjectionFaultConfig &latency_injection_fault_config) {
    m_latency_injection_fault_config = latency_injection_fault_config;
    m_latency_injection_fault_config_isSet = true;
}

bool OAIChaosConfig::is_latency_injection_fault_config_Set() const{
    return m_latency_injection_fault_config_isSet;
}

bool OAIChaosConfig::is_latency_injection_fault_config_Valid() const{
    return m_latency_injection_fault_config_isValid;
}

bool OAIChaosConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bad_responses_fault_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_large_request_fault_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_large_response_fault_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_latency_injection_fault_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChaosConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_enabled_isValid && true;
}

} // namespace OpenAPI
