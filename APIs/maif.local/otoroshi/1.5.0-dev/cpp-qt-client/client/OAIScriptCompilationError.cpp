/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScriptCompilationError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScriptCompilationError::OAIScriptCompilationError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScriptCompilationError::OAIScriptCompilationError() {
    this->initializeModel();
}

OAIScriptCompilationError::~OAIScriptCompilationError() {}

void OAIScriptCompilationError::initializeModel() {

    m_column_isSet = false;
    m_column_isValid = false;

    m_file_isSet = false;
    m_file_isValid = false;

    m_line_isSet = false;
    m_line_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_raw_message_isSet = false;
    m_raw_message_isValid = false;
}

void OAIScriptCompilationError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScriptCompilationError::fromJsonObject(QJsonObject json) {

    m_column_isValid = ::OpenAPI::fromJsonValue(m_column, json[QString("column")]);
    m_column_isSet = !json[QString("column")].isNull() && m_column_isValid;

    m_file_isValid = ::OpenAPI::fromJsonValue(m_file, json[QString("file")]);
    m_file_isSet = !json[QString("file")].isNull() && m_file_isValid;

    m_line_isValid = ::OpenAPI::fromJsonValue(m_line, json[QString("line")]);
    m_line_isSet = !json[QString("line")].isNull() && m_line_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_raw_message_isValid = ::OpenAPI::fromJsonValue(m_raw_message, json[QString("rawMessage")]);
    m_raw_message_isSet = !json[QString("rawMessage")].isNull() && m_raw_message_isValid;
}

QString OAIScriptCompilationError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScriptCompilationError::asJsonObject() const {
    QJsonObject obj;
    if (m_column_isSet) {
        obj.insert(QString("column"), ::OpenAPI::toJsonValue(m_column));
    }
    if (m_file.size() > 0) {
        obj.insert(QString("file"), ::OpenAPI::toJsonValue(m_file));
    }
    if (m_line_isSet) {
        obj.insert(QString("line"), ::OpenAPI::toJsonValue(m_line));
    }
    if (m_message.size() > 0) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_raw_message.size() > 0) {
        obj.insert(QString("rawMessage"), ::OpenAPI::toJsonValue(m_raw_message));
    }
    return obj;
}

QString OAIScriptCompilationError::getColumn() const {
    return m_column;
}
void OAIScriptCompilationError::setColumn(const QString &column) {
    m_column = column;
    m_column_isSet = true;
}

bool OAIScriptCompilationError::is_column_Set() const{
    return m_column_isSet;
}

bool OAIScriptCompilationError::is_column_Valid() const{
    return m_column_isValid;
}

QMap<QString, QString> OAIScriptCompilationError::getFile() const {
    return m_file;
}
void OAIScriptCompilationError::setFile(const QMap<QString, QString> &file) {
    m_file = file;
    m_file_isSet = true;
}

bool OAIScriptCompilationError::is_file_Set() const{
    return m_file_isSet;
}

bool OAIScriptCompilationError::is_file_Valid() const{
    return m_file_isValid;
}

QString OAIScriptCompilationError::getLine() const {
    return m_line;
}
void OAIScriptCompilationError::setLine(const QString &line) {
    m_line = line;
    m_line_isSet = true;
}

bool OAIScriptCompilationError::is_line_Set() const{
    return m_line_isSet;
}

bool OAIScriptCompilationError::is_line_Valid() const{
    return m_line_isValid;
}

QMap<QString, QString> OAIScriptCompilationError::getMessage() const {
    return m_message;
}
void OAIScriptCompilationError::setMessage(const QMap<QString, QString> &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIScriptCompilationError::is_message_Set() const{
    return m_message_isSet;
}

bool OAIScriptCompilationError::is_message_Valid() const{
    return m_message_isValid;
}

QMap<QString, QString> OAIScriptCompilationError::getRawMessage() const {
    return m_raw_message;
}
void OAIScriptCompilationError::setRawMessage(const QMap<QString, QString> &raw_message) {
    m_raw_message = raw_message;
    m_raw_message_isSet = true;
}

bool OAIScriptCompilationError::is_raw_message_Set() const{
    return m_raw_message_isSet;
}

bool OAIScriptCompilationError::is_raw_message_Valid() const{
    return m_raw_message_isValid;
}

bool OAIScriptCompilationError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_column_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_raw_message.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScriptCompilationError::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_column_isValid && m_file_isValid && m_line_isValid && m_message_isValid && m_raw_message_isValid && true;
}

} // namespace OpenAPI
