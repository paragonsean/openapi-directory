/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIU2FAdmin.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIU2FAdmin::OAIU2FAdmin(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIU2FAdmin::OAIU2FAdmin() {
    this->initializeModel();
}

OAIU2FAdmin::~OAIU2FAdmin() {}

void OAIU2FAdmin::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_registration_isSet = false;
    m_registration_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIU2FAdmin::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIU2FAdmin::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_registration_isValid = ::OpenAPI::fromJsonValue(m_registration, json[QString("registration")]);
    m_registration_isSet = !json[QString("registration")].isNull() && m_registration_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIU2FAdmin::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIU2FAdmin::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_registration.size() > 0) {
        obj.insert(QString("registration"), ::OpenAPI::toJsonValue(m_registration));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

qint64 OAIU2FAdmin::getCreatedAt() const {
    return m_created_at;
}
void OAIU2FAdmin::setCreatedAt(const qint64 &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIU2FAdmin::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIU2FAdmin::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIU2FAdmin::getLabel() const {
    return m_label;
}
void OAIU2FAdmin::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIU2FAdmin::is_label_Set() const{
    return m_label_isSet;
}

bool OAIU2FAdmin::is_label_Valid() const{
    return m_label_isValid;
}

QString OAIU2FAdmin::getPassword() const {
    return m_password;
}
void OAIU2FAdmin::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIU2FAdmin::is_password_Set() const{
    return m_password_isSet;
}

bool OAIU2FAdmin::is_password_Valid() const{
    return m_password_isValid;
}

QMap<QString, QString> OAIU2FAdmin::getRegistration() const {
    return m_registration;
}
void OAIU2FAdmin::setRegistration(const QMap<QString, QString> &registration) {
    m_registration = registration;
    m_registration_isSet = true;
}

bool OAIU2FAdmin::is_registration_Set() const{
    return m_registration_isSet;
}

bool OAIU2FAdmin::is_registration_Valid() const{
    return m_registration_isValid;
}

QString OAIU2FAdmin::getUsername() const {
    return m_username;
}
void OAIU2FAdmin::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIU2FAdmin::is_username_Set() const{
    return m_username_isSet;
}

bool OAIU2FAdmin::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIU2FAdmin::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIU2FAdmin::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_created_at_isValid && m_label_isValid && m_password_isValid && m_registration_isValid && m_username_isValid && true;
}

} // namespace OpenAPI
