/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISnowMonkeyConfig.h
 *
 * Configuration for the faults that can be injected in requests. The name Snow Monkey is an hommage to Netflix&#39;s Chaos Monkey ðŸ˜‰
 */

#ifndef OAISnowMonkeyConfig_H
#define OAISnowMonkeyConfig_H

#include <QJsonObject>

#include "OAIChaosConfig.h"
#include "OAIOutageStrategy.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIChaosConfig;

class OAISnowMonkeyConfig : public OAIObject {
public:
    OAISnowMonkeyConfig();
    OAISnowMonkeyConfig(QString json);
    ~OAISnowMonkeyConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIChaosConfig getChaosConfig() const;
    void setChaosConfig(const OAIChaosConfig &chaos_config);
    bool is_chaos_config_Set() const;
    bool is_chaos_config_Valid() const;

    bool isDryRun() const;
    void setDryRun(const bool &dry_run);
    bool is_dry_run_Set() const;
    bool is_dry_run_Valid() const;

    bool isEnabled() const;
    void setEnabled(const bool &enabled);
    bool is_enabled_Set() const;
    bool is_enabled_Valid() const;

    bool isIncludeUserFacingDescriptors() const;
    void setIncludeUserFacingDescriptors(const bool &include_user_facing_descriptors);
    bool is_include_user_facing_descriptors_Set() const;
    bool is_include_user_facing_descriptors_Valid() const;

    qint32 getOutageDurationFrom() const;
    void setOutageDurationFrom(const qint32 &outage_duration_from);
    bool is_outage_duration_from_Set() const;
    bool is_outage_duration_from_Valid() const;

    qint32 getOutageDurationTo() const;
    void setOutageDurationTo(const qint32 &outage_duration_to);
    bool is_outage_duration_to_Set() const;
    bool is_outage_duration_to_Valid() const;

    OAIOutageStrategy getOutageStrategy() const;
    void setOutageStrategy(const OAIOutageStrategy &outage_strategy);
    bool is_outage_strategy_Set() const;
    bool is_outage_strategy_Valid() const;

    QString getStartTime() const;
    void setStartTime(const QString &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    QString getStopTime() const;
    void setStopTime(const QString &stop_time);
    bool is_stop_time_Set() const;
    bool is_stop_time_Valid() const;

    QList<QString> getTargetGroups() const;
    void setTargetGroups(const QList<QString> &target_groups);
    bool is_target_groups_Set() const;
    bool is_target_groups_Valid() const;

    qint32 getTimesPerDay() const;
    void setTimesPerDay(const qint32 &times_per_day);
    bool is_times_per_day_Set() const;
    bool is_times_per_day_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIChaosConfig m_chaos_config;
    bool m_chaos_config_isSet;
    bool m_chaos_config_isValid;

    bool m_dry_run;
    bool m_dry_run_isSet;
    bool m_dry_run_isValid;

    bool m_enabled;
    bool m_enabled_isSet;
    bool m_enabled_isValid;

    bool m_include_user_facing_descriptors;
    bool m_include_user_facing_descriptors_isSet;
    bool m_include_user_facing_descriptors_isValid;

    qint32 m_outage_duration_from;
    bool m_outage_duration_from_isSet;
    bool m_outage_duration_from_isValid;

    qint32 m_outage_duration_to;
    bool m_outage_duration_to_isSet;
    bool m_outage_duration_to_isValid;

    OAIOutageStrategy m_outage_strategy;
    bool m_outage_strategy_isSet;
    bool m_outage_strategy_isValid;

    QString m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;

    QString m_stop_time;
    bool m_stop_time_isSet;
    bool m_stop_time_isValid;

    QList<QString> m_target_groups;
    bool m_target_groups_isSet;
    bool m_target_groups_isValid;

    qint32 m_times_per_day;
    bool m_times_per_day_isSet;
    bool m_times_per_day_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISnowMonkeyConfig)

#endif // OAISnowMonkeyConfig_H
