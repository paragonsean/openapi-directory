/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIService.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIService::OAIService(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIService::OAIService() {
    this->initializeModel();
}

OAIService::~OAIService() {}

void OAIService::initializeModel() {

    m_canary_isSet = false;
    m_canary_isValid = false;

    m_additional_headers_isSet = false;
    m_additional_headers_isValid = false;

    m_api_isSet = false;
    m_api_isValid = false;

    m_auth_config_ref_isSet = false;
    m_auth_config_ref_isValid = false;

    m_build_mode_isSet = false;
    m_build_mode_isValid = false;

    m_chaos_config_isSet = false;
    m_chaos_config_isValid = false;

    m_client_config_isSet = false;
    m_client_config_isValid = false;

    m_client_validator_ref_isSet = false;
    m_client_validator_ref_isValid = false;

    m_cors_isSet = false;
    m_cors_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_enforce_secure_communication_isSet = false;
    m_enforce_secure_communication_isValid = false;

    m_env_isSet = false;
    m_env_isValid = false;

    m_force_https_isSet = false;
    m_force_https_isValid = false;

    m_groups_isSet = false;
    m_groups_isValid = false;

    m_gzip_isSet = false;
    m_gzip_isValid = false;

    m_headers_verification_isSet = false;
    m_headers_verification_isValid = false;

    m_health_check_isSet = false;
    m_health_check_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_ip_filtering_isSet = false;
    m_ip_filtering_isValid = false;

    m_jwt_verifier_isSet = false;
    m_jwt_verifier_isValid = false;

    m_local_host_isSet = false;
    m_local_host_isValid = false;

    m_local_scheme_isSet = false;
    m_local_scheme_isValid = false;

    m_maintenance_mode_isSet = false;
    m_maintenance_mode_isValid = false;

    m_matching_headers_isSet = false;
    m_matching_headers_isValid = false;

    m_matching_root_isSet = false;
    m_matching_root_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_override_host_isSet = false;
    m_override_host_isValid = false;

    m_private_app_isSet = false;
    m_private_app_isValid = false;

    m_private_patterns_isSet = false;
    m_private_patterns_isValid = false;

    m_public_patterns_isSet = false;
    m_public_patterns_isValid = false;

    m_redirect_to_local_isSet = false;
    m_redirect_to_local_isValid = false;

    m_redirection_isSet = false;
    m_redirection_isValid = false;

    m_root_isSet = false;
    m_root_isValid = false;

    m_sec_com_excluded_patterns_isSet = false;
    m_sec_com_excluded_patterns_isValid = false;

    m_sec_com_settings_isSet = false;
    m_sec_com_settings_isValid = false;

    m_send_otoroshi_headers_back_isSet = false;
    m_send_otoroshi_headers_back_isValid = false;

    m_statsd_config_isSet = false;
    m_statsd_config_isValid = false;

    m_subdomain_isSet = false;
    m_subdomain_isValid = false;

    m_targets_isSet = false;
    m_targets_isValid = false;

    m_transformer_ref_isSet = false;
    m_transformer_ref_isValid = false;

    m_user_facing_isSet = false;
    m_user_facing_isValid = false;

    m_x_forwarded_headers_isSet = false;
    m_x_forwarded_headers_isValid = false;
}

void OAIService::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIService::fromJsonObject(QJsonObject json) {

    m_canary_isValid = ::OpenAPI::fromJsonValue(m_canary, json[QString("Canary")]);
    m_canary_isSet = !json[QString("Canary")].isNull() && m_canary_isValid;

    m_additional_headers_isValid = ::OpenAPI::fromJsonValue(m_additional_headers, json[QString("additionalHeaders")]);
    m_additional_headers_isSet = !json[QString("additionalHeaders")].isNull() && m_additional_headers_isValid;

    m_api_isValid = ::OpenAPI::fromJsonValue(m_api, json[QString("api")]);
    m_api_isSet = !json[QString("api")].isNull() && m_api_isValid;

    m_auth_config_ref_isValid = ::OpenAPI::fromJsonValue(m_auth_config_ref, json[QString("authConfigRef")]);
    m_auth_config_ref_isSet = !json[QString("authConfigRef")].isNull() && m_auth_config_ref_isValid;

    m_build_mode_isValid = ::OpenAPI::fromJsonValue(m_build_mode, json[QString("buildMode")]);
    m_build_mode_isSet = !json[QString("buildMode")].isNull() && m_build_mode_isValid;

    m_chaos_config_isValid = ::OpenAPI::fromJsonValue(m_chaos_config, json[QString("chaosConfig")]);
    m_chaos_config_isSet = !json[QString("chaosConfig")].isNull() && m_chaos_config_isValid;

    m_client_config_isValid = ::OpenAPI::fromJsonValue(m_client_config, json[QString("clientConfig")]);
    m_client_config_isSet = !json[QString("clientConfig")].isNull() && m_client_config_isValid;

    m_client_validator_ref_isValid = ::OpenAPI::fromJsonValue(m_client_validator_ref, json[QString("clientValidatorRef")]);
    m_client_validator_ref_isSet = !json[QString("clientValidatorRef")].isNull() && m_client_validator_ref_isValid;

    m_cors_isValid = ::OpenAPI::fromJsonValue(m_cors, json[QString("cors")]);
    m_cors_isSet = !json[QString("cors")].isNull() && m_cors_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_enforce_secure_communication_isValid = ::OpenAPI::fromJsonValue(m_enforce_secure_communication, json[QString("enforceSecureCommunication")]);
    m_enforce_secure_communication_isSet = !json[QString("enforceSecureCommunication")].isNull() && m_enforce_secure_communication_isValid;

    m_env_isValid = ::OpenAPI::fromJsonValue(m_env, json[QString("env")]);
    m_env_isSet = !json[QString("env")].isNull() && m_env_isValid;

    m_force_https_isValid = ::OpenAPI::fromJsonValue(m_force_https, json[QString("forceHttps")]);
    m_force_https_isSet = !json[QString("forceHttps")].isNull() && m_force_https_isValid;

    m_groups_isValid = ::OpenAPI::fromJsonValue(m_groups, json[QString("groups")]);
    m_groups_isSet = !json[QString("groups")].isNull() && m_groups_isValid;

    m_gzip_isValid = ::OpenAPI::fromJsonValue(m_gzip, json[QString("gzip")]);
    m_gzip_isSet = !json[QString("gzip")].isNull() && m_gzip_isValid;

    m_headers_verification_isValid = ::OpenAPI::fromJsonValue(m_headers_verification, json[QString("headersVerification")]);
    m_headers_verification_isSet = !json[QString("headersVerification")].isNull() && m_headers_verification_isValid;

    m_health_check_isValid = ::OpenAPI::fromJsonValue(m_health_check, json[QString("healthCheck")]);
    m_health_check_isSet = !json[QString("healthCheck")].isNull() && m_health_check_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_ip_filtering_isValid = ::OpenAPI::fromJsonValue(m_ip_filtering, json[QString("ipFiltering")]);
    m_ip_filtering_isSet = !json[QString("ipFiltering")].isNull() && m_ip_filtering_isValid;

    m_jwt_verifier_isValid = ::OpenAPI::fromJsonValue(m_jwt_verifier, json[QString("jwtVerifier")]);
    m_jwt_verifier_isSet = !json[QString("jwtVerifier")].isNull() && m_jwt_verifier_isValid;

    m_local_host_isValid = ::OpenAPI::fromJsonValue(m_local_host, json[QString("localHost")]);
    m_local_host_isSet = !json[QString("localHost")].isNull() && m_local_host_isValid;

    m_local_scheme_isValid = ::OpenAPI::fromJsonValue(m_local_scheme, json[QString("localScheme")]);
    m_local_scheme_isSet = !json[QString("localScheme")].isNull() && m_local_scheme_isValid;

    m_maintenance_mode_isValid = ::OpenAPI::fromJsonValue(m_maintenance_mode, json[QString("maintenanceMode")]);
    m_maintenance_mode_isSet = !json[QString("maintenanceMode")].isNull() && m_maintenance_mode_isValid;

    m_matching_headers_isValid = ::OpenAPI::fromJsonValue(m_matching_headers, json[QString("matchingHeaders")]);
    m_matching_headers_isSet = !json[QString("matchingHeaders")].isNull() && m_matching_headers_isValid;

    m_matching_root_isValid = ::OpenAPI::fromJsonValue(m_matching_root, json[QString("matchingRoot")]);
    m_matching_root_isSet = !json[QString("matchingRoot")].isNull() && m_matching_root_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_override_host_isValid = ::OpenAPI::fromJsonValue(m_override_host, json[QString("overrideHost")]);
    m_override_host_isSet = !json[QString("overrideHost")].isNull() && m_override_host_isValid;

    m_private_app_isValid = ::OpenAPI::fromJsonValue(m_private_app, json[QString("privateApp")]);
    m_private_app_isSet = !json[QString("privateApp")].isNull() && m_private_app_isValid;

    m_private_patterns_isValid = ::OpenAPI::fromJsonValue(m_private_patterns, json[QString("privatePatterns")]);
    m_private_patterns_isSet = !json[QString("privatePatterns")].isNull() && m_private_patterns_isValid;

    m_public_patterns_isValid = ::OpenAPI::fromJsonValue(m_public_patterns, json[QString("publicPatterns")]);
    m_public_patterns_isSet = !json[QString("publicPatterns")].isNull() && m_public_patterns_isValid;

    m_redirect_to_local_isValid = ::OpenAPI::fromJsonValue(m_redirect_to_local, json[QString("redirectToLocal")]);
    m_redirect_to_local_isSet = !json[QString("redirectToLocal")].isNull() && m_redirect_to_local_isValid;

    m_redirection_isValid = ::OpenAPI::fromJsonValue(m_redirection, json[QString("redirection")]);
    m_redirection_isSet = !json[QString("redirection")].isNull() && m_redirection_isValid;

    m_root_isValid = ::OpenAPI::fromJsonValue(m_root, json[QString("root")]);
    m_root_isSet = !json[QString("root")].isNull() && m_root_isValid;

    m_sec_com_excluded_patterns_isValid = ::OpenAPI::fromJsonValue(m_sec_com_excluded_patterns, json[QString("secComExcludedPatterns")]);
    m_sec_com_excluded_patterns_isSet = !json[QString("secComExcludedPatterns")].isNull() && m_sec_com_excluded_patterns_isValid;

    m_sec_com_settings_isValid = ::OpenAPI::fromJsonValue(m_sec_com_settings, json[QString("secComSettings")]);
    m_sec_com_settings_isSet = !json[QString("secComSettings")].isNull() && m_sec_com_settings_isValid;

    m_send_otoroshi_headers_back_isValid = ::OpenAPI::fromJsonValue(m_send_otoroshi_headers_back, json[QString("sendOtoroshiHeadersBack")]);
    m_send_otoroshi_headers_back_isSet = !json[QString("sendOtoroshiHeadersBack")].isNull() && m_send_otoroshi_headers_back_isValid;

    m_statsd_config_isValid = ::OpenAPI::fromJsonValue(m_statsd_config, json[QString("statsdConfig")]);
    m_statsd_config_isSet = !json[QString("statsdConfig")].isNull() && m_statsd_config_isValid;

    m_subdomain_isValid = ::OpenAPI::fromJsonValue(m_subdomain, json[QString("subdomain")]);
    m_subdomain_isSet = !json[QString("subdomain")].isNull() && m_subdomain_isValid;

    m_targets_isValid = ::OpenAPI::fromJsonValue(m_targets, json[QString("targets")]);
    m_targets_isSet = !json[QString("targets")].isNull() && m_targets_isValid;

    m_transformer_ref_isValid = ::OpenAPI::fromJsonValue(m_transformer_ref, json[QString("transformerRef")]);
    m_transformer_ref_isSet = !json[QString("transformerRef")].isNull() && m_transformer_ref_isValid;

    m_user_facing_isValid = ::OpenAPI::fromJsonValue(m_user_facing, json[QString("userFacing")]);
    m_user_facing_isSet = !json[QString("userFacing")].isNull() && m_user_facing_isValid;

    m_x_forwarded_headers_isValid = ::OpenAPI::fromJsonValue(m_x_forwarded_headers, json[QString("xForwardedHeaders")]);
    m_x_forwarded_headers_isSet = !json[QString("xForwardedHeaders")].isNull() && m_x_forwarded_headers_isValid;
}

QString OAIService::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIService::asJsonObject() const {
    QJsonObject obj;
    if (m_canary.isSet()) {
        obj.insert(QString("Canary"), ::OpenAPI::toJsonValue(m_canary));
    }
    if (m_additional_headers.size() > 0) {
        obj.insert(QString("additionalHeaders"), ::OpenAPI::toJsonValue(m_additional_headers));
    }
    if (m_api.isSet()) {
        obj.insert(QString("api"), ::OpenAPI::toJsonValue(m_api));
    }
    if (m_auth_config_ref_isSet) {
        obj.insert(QString("authConfigRef"), ::OpenAPI::toJsonValue(m_auth_config_ref));
    }
    if (m_build_mode_isSet) {
        obj.insert(QString("buildMode"), ::OpenAPI::toJsonValue(m_build_mode));
    }
    if (m_chaos_config.isSet()) {
        obj.insert(QString("chaosConfig"), ::OpenAPI::toJsonValue(m_chaos_config));
    }
    if (m_client_config.isSet()) {
        obj.insert(QString("clientConfig"), ::OpenAPI::toJsonValue(m_client_config));
    }
    if (m_client_validator_ref_isSet) {
        obj.insert(QString("clientValidatorRef"), ::OpenAPI::toJsonValue(m_client_validator_ref));
    }
    if (m_cors.isSet()) {
        obj.insert(QString("cors"), ::OpenAPI::toJsonValue(m_cors));
    }
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_enforce_secure_communication_isSet) {
        obj.insert(QString("enforceSecureCommunication"), ::OpenAPI::toJsonValue(m_enforce_secure_communication));
    }
    if (m_env_isSet) {
        obj.insert(QString("env"), ::OpenAPI::toJsonValue(m_env));
    }
    if (m_force_https_isSet) {
        obj.insert(QString("forceHttps"), ::OpenAPI::toJsonValue(m_force_https));
    }
    if (m_groups.size() > 0) {
        obj.insert(QString("groups"), ::OpenAPI::toJsonValue(m_groups));
    }
    if (m_gzip.isSet()) {
        obj.insert(QString("gzip"), ::OpenAPI::toJsonValue(m_gzip));
    }
    if (m_headers_verification.size() > 0) {
        obj.insert(QString("headersVerification"), ::OpenAPI::toJsonValue(m_headers_verification));
    }
    if (m_health_check.isSet()) {
        obj.insert(QString("healthCheck"), ::OpenAPI::toJsonValue(m_health_check));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_ip_filtering.isSet()) {
        obj.insert(QString("ipFiltering"), ::OpenAPI::toJsonValue(m_ip_filtering));
    }
    if (m_jwt_verifier.isSet()) {
        obj.insert(QString("jwtVerifier"), ::OpenAPI::toJsonValue(m_jwt_verifier));
    }
    if (m_local_host_isSet) {
        obj.insert(QString("localHost"), ::OpenAPI::toJsonValue(m_local_host));
    }
    if (m_local_scheme_isSet) {
        obj.insert(QString("localScheme"), ::OpenAPI::toJsonValue(m_local_scheme));
    }
    if (m_maintenance_mode_isSet) {
        obj.insert(QString("maintenanceMode"), ::OpenAPI::toJsonValue(m_maintenance_mode));
    }
    if (m_matching_headers.size() > 0) {
        obj.insert(QString("matchingHeaders"), ::OpenAPI::toJsonValue(m_matching_headers));
    }
    if (m_matching_root_isSet) {
        obj.insert(QString("matchingRoot"), ::OpenAPI::toJsonValue(m_matching_root));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_override_host_isSet) {
        obj.insert(QString("overrideHost"), ::OpenAPI::toJsonValue(m_override_host));
    }
    if (m_private_app_isSet) {
        obj.insert(QString("privateApp"), ::OpenAPI::toJsonValue(m_private_app));
    }
    if (m_private_patterns.size() > 0) {
        obj.insert(QString("privatePatterns"), ::OpenAPI::toJsonValue(m_private_patterns));
    }
    if (m_public_patterns.size() > 0) {
        obj.insert(QString("publicPatterns"), ::OpenAPI::toJsonValue(m_public_patterns));
    }
    if (m_redirect_to_local_isSet) {
        obj.insert(QString("redirectToLocal"), ::OpenAPI::toJsonValue(m_redirect_to_local));
    }
    if (m_redirection.isSet()) {
        obj.insert(QString("redirection"), ::OpenAPI::toJsonValue(m_redirection));
    }
    if (m_root_isSet) {
        obj.insert(QString("root"), ::OpenAPI::toJsonValue(m_root));
    }
    if (m_sec_com_excluded_patterns.size() > 0) {
        obj.insert(QString("secComExcludedPatterns"), ::OpenAPI::toJsonValue(m_sec_com_excluded_patterns));
    }
    if (m_sec_com_settings.isSet()) {
        obj.insert(QString("secComSettings"), ::OpenAPI::toJsonValue(m_sec_com_settings));
    }
    if (m_send_otoroshi_headers_back_isSet) {
        obj.insert(QString("sendOtoroshiHeadersBack"), ::OpenAPI::toJsonValue(m_send_otoroshi_headers_back));
    }
    if (m_statsd_config.isSet()) {
        obj.insert(QString("statsdConfig"), ::OpenAPI::toJsonValue(m_statsd_config));
    }
    if (m_subdomain_isSet) {
        obj.insert(QString("subdomain"), ::OpenAPI::toJsonValue(m_subdomain));
    }
    if (m_targets.size() > 0) {
        obj.insert(QString("targets"), ::OpenAPI::toJsonValue(m_targets));
    }
    if (m_transformer_ref_isSet) {
        obj.insert(QString("transformerRef"), ::OpenAPI::toJsonValue(m_transformer_ref));
    }
    if (m_user_facing_isSet) {
        obj.insert(QString("userFacing"), ::OpenAPI::toJsonValue(m_user_facing));
    }
    if (m_x_forwarded_headers_isSet) {
        obj.insert(QString("xForwardedHeaders"), ::OpenAPI::toJsonValue(m_x_forwarded_headers));
    }
    return obj;
}

OAICanary OAIService::getCanary() const {
    return m_canary;
}
void OAIService::setCanary(const OAICanary &canary) {
    m_canary = canary;
    m_canary_isSet = true;
}

bool OAIService::is_canary_Set() const{
    return m_canary_isSet;
}

bool OAIService::is_canary_Valid() const{
    return m_canary_isValid;
}

QMap<QString, QString> OAIService::getAdditionalHeaders() const {
    return m_additional_headers;
}
void OAIService::setAdditionalHeaders(const QMap<QString, QString> &additional_headers) {
    m_additional_headers = additional_headers;
    m_additional_headers_isSet = true;
}

bool OAIService::is_additional_headers_Set() const{
    return m_additional_headers_isSet;
}

bool OAIService::is_additional_headers_Valid() const{
    return m_additional_headers_isValid;
}

OAIExposedApi OAIService::getApi() const {
    return m_api;
}
void OAIService::setApi(const OAIExposedApi &api) {
    m_api = api;
    m_api_isSet = true;
}

bool OAIService::is_api_Set() const{
    return m_api_isSet;
}

bool OAIService::is_api_Valid() const{
    return m_api_isValid;
}

QString OAIService::getAuthConfigRef() const {
    return m_auth_config_ref;
}
void OAIService::setAuthConfigRef(const QString &auth_config_ref) {
    m_auth_config_ref = auth_config_ref;
    m_auth_config_ref_isSet = true;
}

bool OAIService::is_auth_config_ref_Set() const{
    return m_auth_config_ref_isSet;
}

bool OAIService::is_auth_config_ref_Valid() const{
    return m_auth_config_ref_isValid;
}

bool OAIService::isBuildMode() const {
    return m_build_mode;
}
void OAIService::setBuildMode(const bool &build_mode) {
    m_build_mode = build_mode;
    m_build_mode_isSet = true;
}

bool OAIService::is_build_mode_Set() const{
    return m_build_mode_isSet;
}

bool OAIService::is_build_mode_Valid() const{
    return m_build_mode_isValid;
}

OAIChaosConfig OAIService::getChaosConfig() const {
    return m_chaos_config;
}
void OAIService::setChaosConfig(const OAIChaosConfig &chaos_config) {
    m_chaos_config = chaos_config;
    m_chaos_config_isSet = true;
}

bool OAIService::is_chaos_config_Set() const{
    return m_chaos_config_isSet;
}

bool OAIService::is_chaos_config_Valid() const{
    return m_chaos_config_isValid;
}

OAIClientConfig OAIService::getClientConfig() const {
    return m_client_config;
}
void OAIService::setClientConfig(const OAIClientConfig &client_config) {
    m_client_config = client_config;
    m_client_config_isSet = true;
}

bool OAIService::is_client_config_Set() const{
    return m_client_config_isSet;
}

bool OAIService::is_client_config_Valid() const{
    return m_client_config_isValid;
}

QString OAIService::getClientValidatorRef() const {
    return m_client_validator_ref;
}
void OAIService::setClientValidatorRef(const QString &client_validator_ref) {
    m_client_validator_ref = client_validator_ref;
    m_client_validator_ref_isSet = true;
}

bool OAIService::is_client_validator_ref_Set() const{
    return m_client_validator_ref_isSet;
}

bool OAIService::is_client_validator_ref_Valid() const{
    return m_client_validator_ref_isValid;
}

OAICorsSettings OAIService::getCors() const {
    return m_cors;
}
void OAIService::setCors(const OAICorsSettings &cors) {
    m_cors = cors;
    m_cors_isSet = true;
}

bool OAIService::is_cors_Set() const{
    return m_cors_isSet;
}

bool OAIService::is_cors_Valid() const{
    return m_cors_isValid;
}

QString OAIService::getDomain() const {
    return m_domain;
}
void OAIService::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIService::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIService::is_domain_Valid() const{
    return m_domain_isValid;
}

bool OAIService::isEnabled() const {
    return m_enabled;
}
void OAIService::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIService::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIService::is_enabled_Valid() const{
    return m_enabled_isValid;
}

bool OAIService::isEnforceSecureCommunication() const {
    return m_enforce_secure_communication;
}
void OAIService::setEnforceSecureCommunication(const bool &enforce_secure_communication) {
    m_enforce_secure_communication = enforce_secure_communication;
    m_enforce_secure_communication_isSet = true;
}

bool OAIService::is_enforce_secure_communication_Set() const{
    return m_enforce_secure_communication_isSet;
}

bool OAIService::is_enforce_secure_communication_Valid() const{
    return m_enforce_secure_communication_isValid;
}

QString OAIService::getEnv() const {
    return m_env;
}
void OAIService::setEnv(const QString &env) {
    m_env = env;
    m_env_isSet = true;
}

bool OAIService::is_env_Set() const{
    return m_env_isSet;
}

bool OAIService::is_env_Valid() const{
    return m_env_isValid;
}

bool OAIService::isForceHttps() const {
    return m_force_https;
}
void OAIService::setForceHttps(const bool &force_https) {
    m_force_https = force_https;
    m_force_https_isSet = true;
}

bool OAIService::is_force_https_Set() const{
    return m_force_https_isSet;
}

bool OAIService::is_force_https_Valid() const{
    return m_force_https_isValid;
}

QList<QString> OAIService::getGroups() const {
    return m_groups;
}
void OAIService::setGroups(const QList<QString> &groups) {
    m_groups = groups;
    m_groups_isSet = true;
}

bool OAIService::is_groups_Set() const{
    return m_groups_isSet;
}

bool OAIService::is_groups_Valid() const{
    return m_groups_isValid;
}

OAIGzip OAIService::getGzip() const {
    return m_gzip;
}
void OAIService::setGzip(const OAIGzip &gzip) {
    m_gzip = gzip;
    m_gzip_isSet = true;
}

bool OAIService::is_gzip_Set() const{
    return m_gzip_isSet;
}

bool OAIService::is_gzip_Valid() const{
    return m_gzip_isValid;
}

QMap<QString, QString> OAIService::getHeadersVerification() const {
    return m_headers_verification;
}
void OAIService::setHeadersVerification(const QMap<QString, QString> &headers_verification) {
    m_headers_verification = headers_verification;
    m_headers_verification_isSet = true;
}

bool OAIService::is_headers_verification_Set() const{
    return m_headers_verification_isSet;
}

bool OAIService::is_headers_verification_Valid() const{
    return m_headers_verification_isValid;
}

OAIHealthCheck OAIService::getHealthCheck() const {
    return m_health_check;
}
void OAIService::setHealthCheck(const OAIHealthCheck &health_check) {
    m_health_check = health_check;
    m_health_check_isSet = true;
}

bool OAIService::is_health_check_Set() const{
    return m_health_check_isSet;
}

bool OAIService::is_health_check_Valid() const{
    return m_health_check_isValid;
}

QString OAIService::getId() const {
    return m_id;
}
void OAIService::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIService::is_id_Set() const{
    return m_id_isSet;
}

bool OAIService::is_id_Valid() const{
    return m_id_isValid;
}

OAIIpFiltering OAIService::getIpFiltering() const {
    return m_ip_filtering;
}
void OAIService::setIpFiltering(const OAIIpFiltering &ip_filtering) {
    m_ip_filtering = ip_filtering;
    m_ip_filtering_isSet = true;
}

bool OAIService::is_ip_filtering_Set() const{
    return m_ip_filtering_isSet;
}

bool OAIService::is_ip_filtering_Valid() const{
    return m_ip_filtering_isValid;
}

OAIImportExport_serviceDescriptors_inner_jwtVerifier OAIService::getJwtVerifier() const {
    return m_jwt_verifier;
}
void OAIService::setJwtVerifier(const OAIImportExport_serviceDescriptors_inner_jwtVerifier &jwt_verifier) {
    m_jwt_verifier = jwt_verifier;
    m_jwt_verifier_isSet = true;
}

bool OAIService::is_jwt_verifier_Set() const{
    return m_jwt_verifier_isSet;
}

bool OAIService::is_jwt_verifier_Valid() const{
    return m_jwt_verifier_isValid;
}

QString OAIService::getLocalHost() const {
    return m_local_host;
}
void OAIService::setLocalHost(const QString &local_host) {
    m_local_host = local_host;
    m_local_host_isSet = true;
}

bool OAIService::is_local_host_Set() const{
    return m_local_host_isSet;
}

bool OAIService::is_local_host_Valid() const{
    return m_local_host_isValid;
}

QString OAIService::getLocalScheme() const {
    return m_local_scheme;
}
void OAIService::setLocalScheme(const QString &local_scheme) {
    m_local_scheme = local_scheme;
    m_local_scheme_isSet = true;
}

bool OAIService::is_local_scheme_Set() const{
    return m_local_scheme_isSet;
}

bool OAIService::is_local_scheme_Valid() const{
    return m_local_scheme_isValid;
}

bool OAIService::isMaintenanceMode() const {
    return m_maintenance_mode;
}
void OAIService::setMaintenanceMode(const bool &maintenance_mode) {
    m_maintenance_mode = maintenance_mode;
    m_maintenance_mode_isSet = true;
}

bool OAIService::is_maintenance_mode_Set() const{
    return m_maintenance_mode_isSet;
}

bool OAIService::is_maintenance_mode_Valid() const{
    return m_maintenance_mode_isValid;
}

QMap<QString, QString> OAIService::getMatchingHeaders() const {
    return m_matching_headers;
}
void OAIService::setMatchingHeaders(const QMap<QString, QString> &matching_headers) {
    m_matching_headers = matching_headers;
    m_matching_headers_isSet = true;
}

bool OAIService::is_matching_headers_Set() const{
    return m_matching_headers_isSet;
}

bool OAIService::is_matching_headers_Valid() const{
    return m_matching_headers_isValid;
}

QString OAIService::getMatchingRoot() const {
    return m_matching_root;
}
void OAIService::setMatchingRoot(const QString &matching_root) {
    m_matching_root = matching_root;
    m_matching_root_isSet = true;
}

bool OAIService::is_matching_root_Set() const{
    return m_matching_root_isSet;
}

bool OAIService::is_matching_root_Valid() const{
    return m_matching_root_isValid;
}

QMap<QString, QString> OAIService::getMetadata() const {
    return m_metadata;
}
void OAIService::setMetadata(const QMap<QString, QString> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIService::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIService::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIService::getName() const {
    return m_name;
}
void OAIService::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIService::is_name_Set() const{
    return m_name_isSet;
}

bool OAIService::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIService::isOverrideHost() const {
    return m_override_host;
}
void OAIService::setOverrideHost(const bool &override_host) {
    m_override_host = override_host;
    m_override_host_isSet = true;
}

bool OAIService::is_override_host_Set() const{
    return m_override_host_isSet;
}

bool OAIService::is_override_host_Valid() const{
    return m_override_host_isValid;
}

bool OAIService::isPrivateApp() const {
    return m_private_app;
}
void OAIService::setPrivateApp(const bool &private_app) {
    m_private_app = private_app;
    m_private_app_isSet = true;
}

bool OAIService::is_private_app_Set() const{
    return m_private_app_isSet;
}

bool OAIService::is_private_app_Valid() const{
    return m_private_app_isValid;
}

QList<QString> OAIService::getPrivatePatterns() const {
    return m_private_patterns;
}
void OAIService::setPrivatePatterns(const QList<QString> &private_patterns) {
    m_private_patterns = private_patterns;
    m_private_patterns_isSet = true;
}

bool OAIService::is_private_patterns_Set() const{
    return m_private_patterns_isSet;
}

bool OAIService::is_private_patterns_Valid() const{
    return m_private_patterns_isValid;
}

QList<QString> OAIService::getPublicPatterns() const {
    return m_public_patterns;
}
void OAIService::setPublicPatterns(const QList<QString> &public_patterns) {
    m_public_patterns = public_patterns;
    m_public_patterns_isSet = true;
}

bool OAIService::is_public_patterns_Set() const{
    return m_public_patterns_isSet;
}

bool OAIService::is_public_patterns_Valid() const{
    return m_public_patterns_isValid;
}

bool OAIService::isRedirectToLocal() const {
    return m_redirect_to_local;
}
void OAIService::setRedirectToLocal(const bool &redirect_to_local) {
    m_redirect_to_local = redirect_to_local;
    m_redirect_to_local_isSet = true;
}

bool OAIService::is_redirect_to_local_Set() const{
    return m_redirect_to_local_isSet;
}

bool OAIService::is_redirect_to_local_Valid() const{
    return m_redirect_to_local_isValid;
}

OAIRedirectionSettings OAIService::getRedirection() const {
    return m_redirection;
}
void OAIService::setRedirection(const OAIRedirectionSettings &redirection) {
    m_redirection = redirection;
    m_redirection_isSet = true;
}

bool OAIService::is_redirection_Set() const{
    return m_redirection_isSet;
}

bool OAIService::is_redirection_Valid() const{
    return m_redirection_isValid;
}

QString OAIService::getRoot() const {
    return m_root;
}
void OAIService::setRoot(const QString &root) {
    m_root = root;
    m_root_isSet = true;
}

bool OAIService::is_root_Set() const{
    return m_root_isSet;
}

bool OAIService::is_root_Valid() const{
    return m_root_isValid;
}

QList<QString> OAIService::getSecComExcludedPatterns() const {
    return m_sec_com_excluded_patterns;
}
void OAIService::setSecComExcludedPatterns(const QList<QString> &sec_com_excluded_patterns) {
    m_sec_com_excluded_patterns = sec_com_excluded_patterns;
    m_sec_com_excluded_patterns_isSet = true;
}

bool OAIService::is_sec_com_excluded_patterns_Set() const{
    return m_sec_com_excluded_patterns_isSet;
}

bool OAIService::is_sec_com_excluded_patterns_Valid() const{
    return m_sec_com_excluded_patterns_isValid;
}

OAIGlobalJwtVerifier_algoSettings OAIService::getSecComSettings() const {
    return m_sec_com_settings;
}
void OAIService::setSecComSettings(const OAIGlobalJwtVerifier_algoSettings &sec_com_settings) {
    m_sec_com_settings = sec_com_settings;
    m_sec_com_settings_isSet = true;
}

bool OAIService::is_sec_com_settings_Set() const{
    return m_sec_com_settings_isSet;
}

bool OAIService::is_sec_com_settings_Valid() const{
    return m_sec_com_settings_isValid;
}

bool OAIService::isSendOtoroshiHeadersBack() const {
    return m_send_otoroshi_headers_back;
}
void OAIService::setSendOtoroshiHeadersBack(const bool &send_otoroshi_headers_back) {
    m_send_otoroshi_headers_back = send_otoroshi_headers_back;
    m_send_otoroshi_headers_back_isSet = true;
}

bool OAIService::is_send_otoroshi_headers_back_Set() const{
    return m_send_otoroshi_headers_back_isSet;
}

bool OAIService::is_send_otoroshi_headers_back_Valid() const{
    return m_send_otoroshi_headers_back_isValid;
}

OAIStatsdConfig OAIService::getStatsdConfig() const {
    return m_statsd_config;
}
void OAIService::setStatsdConfig(const OAIStatsdConfig &statsd_config) {
    m_statsd_config = statsd_config;
    m_statsd_config_isSet = true;
}

bool OAIService::is_statsd_config_Set() const{
    return m_statsd_config_isSet;
}

bool OAIService::is_statsd_config_Valid() const{
    return m_statsd_config_isValid;
}

QString OAIService::getSubdomain() const {
    return m_subdomain;
}
void OAIService::setSubdomain(const QString &subdomain) {
    m_subdomain = subdomain;
    m_subdomain_isSet = true;
}

bool OAIService::is_subdomain_Set() const{
    return m_subdomain_isSet;
}

bool OAIService::is_subdomain_Valid() const{
    return m_subdomain_isValid;
}

QList<OAITarget> OAIService::getTargets() const {
    return m_targets;
}
void OAIService::setTargets(const QList<OAITarget> &targets) {
    m_targets = targets;
    m_targets_isSet = true;
}

bool OAIService::is_targets_Set() const{
    return m_targets_isSet;
}

bool OAIService::is_targets_Valid() const{
    return m_targets_isValid;
}

QString OAIService::getTransformerRef() const {
    return m_transformer_ref;
}
void OAIService::setTransformerRef(const QString &transformer_ref) {
    m_transformer_ref = transformer_ref;
    m_transformer_ref_isSet = true;
}

bool OAIService::is_transformer_ref_Set() const{
    return m_transformer_ref_isSet;
}

bool OAIService::is_transformer_ref_Valid() const{
    return m_transformer_ref_isValid;
}

bool OAIService::isUserFacing() const {
    return m_user_facing;
}
void OAIService::setUserFacing(const bool &user_facing) {
    m_user_facing = user_facing;
    m_user_facing_isSet = true;
}

bool OAIService::is_user_facing_Set() const{
    return m_user_facing_isSet;
}

bool OAIService::is_user_facing_Valid() const{
    return m_user_facing_isValid;
}

bool OAIService::isXForwardedHeaders() const {
    return m_x_forwarded_headers;
}
void OAIService::setXForwardedHeaders(const bool &x_forwarded_headers) {
    m_x_forwarded_headers = x_forwarded_headers;
    m_x_forwarded_headers_isSet = true;
}

bool OAIService::is_x_forwarded_headers_Set() const{
    return m_x_forwarded_headers_isSet;
}

bool OAIService::is_x_forwarded_headers_Valid() const{
    return m_x_forwarded_headers_isValid;
}

bool OAIService::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_canary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_api.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_config_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chaos_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_validator_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enforce_secure_communication_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_env_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_force_https_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_gzip.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_headers_verification.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_check.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_filtering.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_jwt_verifier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_scheme_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maintenance_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_matching_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_matching_root_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_override_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_app_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_patterns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_patterns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_to_local_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirection.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sec_com_excluded_patterns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sec_com_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_send_otoroshi_headers_back_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statsd_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subdomain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_targets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_transformer_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_facing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_forwarded_headers_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIService::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_build_mode_isValid && m_domain_isValid && m_enabled_isValid && m_enforce_secure_communication_isValid && m_env_isValid && m_force_https_isValid && m_groups_isValid && m_id_isValid && m_maintenance_mode_isValid && m_name_isValid && m_private_app_isValid && m_root_isValid && m_subdomain_isValid && m_targets_isValid && true;
}

} // namespace OpenAPI
