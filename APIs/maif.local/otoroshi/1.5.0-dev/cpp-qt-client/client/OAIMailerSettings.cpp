/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMailerSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMailerSettings::OAIMailerSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMailerSettings::OAIMailerSettings() {
    this->initializeModel();
}

OAIMailerSettings::~OAIMailerSettings() {}

void OAIMailerSettings::initializeModel() {

    m_api_key_isSet = false;
    m_api_key_isValid = false;

    m_api_key_private_isSet = false;
    m_api_key_private_isValid = false;

    m_api_key_public_isSet = false;
    m_api_key_public_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_eu_isSet = false;
    m_eu_isValid = false;

    m_header_isSet = false;
    m_header_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIMailerSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMailerSettings::fromJsonObject(QJsonObject json) {

    m_api_key_isValid = ::OpenAPI::fromJsonValue(m_api_key, json[QString("apiKey")]);
    m_api_key_isSet = !json[QString("apiKey")].isNull() && m_api_key_isValid;

    m_api_key_private_isValid = ::OpenAPI::fromJsonValue(m_api_key_private, json[QString("apiKeyPrivate")]);
    m_api_key_private_isSet = !json[QString("apiKeyPrivate")].isNull() && m_api_key_private_isValid;

    m_api_key_public_isValid = ::OpenAPI::fromJsonValue(m_api_key_public, json[QString("apiKeyPublic")]);
    m_api_key_public_isSet = !json[QString("apiKeyPublic")].isNull() && m_api_key_public_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_eu_isValid = ::OpenAPI::fromJsonValue(m_eu, json[QString("eu")]);
    m_eu_isSet = !json[QString("eu")].isNull() && m_eu_isValid;

    m_header_isValid = ::OpenAPI::fromJsonValue(m_header, json[QString("header")]);
    m_header_isSet = !json[QString("header")].isNull() && m_header_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIMailerSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMailerSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_api_key_isSet) {
        obj.insert(QString("apiKey"), ::OpenAPI::toJsonValue(m_api_key));
    }
    if (m_api_key_private_isSet) {
        obj.insert(QString("apiKeyPrivate"), ::OpenAPI::toJsonValue(m_api_key_private));
    }
    if (m_api_key_public_isSet) {
        obj.insert(QString("apiKeyPublic"), ::OpenAPI::toJsonValue(m_api_key_public));
    }
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_eu_isSet) {
        obj.insert(QString("eu"), ::OpenAPI::toJsonValue(m_eu));
    }
    if (m_header.size() > 0) {
        obj.insert(QString("header"), ::OpenAPI::toJsonValue(m_header));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIMailerSettings::getApiKey() const {
    return m_api_key;
}
void OAIMailerSettings::setApiKey(const QString &api_key) {
    m_api_key = api_key;
    m_api_key_isSet = true;
}

bool OAIMailerSettings::is_api_key_Set() const{
    return m_api_key_isSet;
}

bool OAIMailerSettings::is_api_key_Valid() const{
    return m_api_key_isValid;
}

QString OAIMailerSettings::getApiKeyPrivate() const {
    return m_api_key_private;
}
void OAIMailerSettings::setApiKeyPrivate(const QString &api_key_private) {
    m_api_key_private = api_key_private;
    m_api_key_private_isSet = true;
}

bool OAIMailerSettings::is_api_key_private_Set() const{
    return m_api_key_private_isSet;
}

bool OAIMailerSettings::is_api_key_private_Valid() const{
    return m_api_key_private_isValid;
}

QString OAIMailerSettings::getApiKeyPublic() const {
    return m_api_key_public;
}
void OAIMailerSettings::setApiKeyPublic(const QString &api_key_public) {
    m_api_key_public = api_key_public;
    m_api_key_public_isSet = true;
}

bool OAIMailerSettings::is_api_key_public_Set() const{
    return m_api_key_public_isSet;
}

bool OAIMailerSettings::is_api_key_public_Valid() const{
    return m_api_key_public_isValid;
}

QString OAIMailerSettings::getDomain() const {
    return m_domain;
}
void OAIMailerSettings::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIMailerSettings::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIMailerSettings::is_domain_Valid() const{
    return m_domain_isValid;
}

bool OAIMailerSettings::isEu() const {
    return m_eu;
}
void OAIMailerSettings::setEu(const bool &eu) {
    m_eu = eu;
    m_eu_isSet = true;
}

bool OAIMailerSettings::is_eu_Set() const{
    return m_eu_isSet;
}

bool OAIMailerSettings::is_eu_Valid() const{
    return m_eu_isValid;
}

QMap<QString, QString> OAIMailerSettings::getHeader() const {
    return m_header;
}
void OAIMailerSettings::setHeader(const QMap<QString, QString> &header) {
    m_header = header;
    m_header_isSet = true;
}

bool OAIMailerSettings::is_header_Set() const{
    return m_header_isSet;
}

bool OAIMailerSettings::is_header_Valid() const{
    return m_header_isValid;
}

QString OAIMailerSettings::getType() const {
    return m_type;
}
void OAIMailerSettings::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIMailerSettings::is_type_Set() const{
    return m_type_isSet;
}

bool OAIMailerSettings::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIMailerSettings::getUrl() const {
    return m_url;
}
void OAIMailerSettings::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIMailerSettings::is_url_Set() const{
    return m_url_isSet;
}

bool OAIMailerSettings::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIMailerSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_key_private_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_key_public_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eu_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_header.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMailerSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_api_key_isValid && m_domain_isValid && true;
}

} // namespace OpenAPI
