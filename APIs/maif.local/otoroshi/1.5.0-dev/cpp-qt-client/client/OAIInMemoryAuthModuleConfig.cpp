/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInMemoryAuthModuleConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInMemoryAuthModuleConfig::OAIInMemoryAuthModuleConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInMemoryAuthModuleConfig::OAIInMemoryAuthModuleConfig() {
    this->initializeModel();
}

OAIInMemoryAuthModuleConfig::~OAIInMemoryAuthModuleConfig() {}

void OAIInMemoryAuthModuleConfig::initializeModel() {

    m_desc_isSet = false;
    m_desc_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_session_max_age_isSet = false;
    m_session_max_age_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_users_isSet = false;
    m_users_isValid = false;
}

void OAIInMemoryAuthModuleConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInMemoryAuthModuleConfig::fromJsonObject(QJsonObject json) {

    m_desc_isValid = ::OpenAPI::fromJsonValue(m_desc, json[QString("desc")]);
    m_desc_isSet = !json[QString("desc")].isNull() && m_desc_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_session_max_age_isValid = ::OpenAPI::fromJsonValue(m_session_max_age, json[QString("sessionMaxAge")]);
    m_session_max_age_isSet = !json[QString("sessionMaxAge")].isNull() && m_session_max_age_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_users_isValid = ::OpenAPI::fromJsonValue(m_users, json[QString("users")]);
    m_users_isSet = !json[QString("users")].isNull() && m_users_isValid;
}

QString OAIInMemoryAuthModuleConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInMemoryAuthModuleConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_desc_isSet) {
        obj.insert(QString("desc"), ::OpenAPI::toJsonValue(m_desc));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_session_max_age_isSet) {
        obj.insert(QString("sessionMaxAge"), ::OpenAPI::toJsonValue(m_session_max_age));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_users.size() > 0) {
        obj.insert(QString("users"), ::OpenAPI::toJsonValue(m_users));
    }
    return obj;
}

QString OAIInMemoryAuthModuleConfig::getDesc() const {
    return m_desc;
}
void OAIInMemoryAuthModuleConfig::setDesc(const QString &desc) {
    m_desc = desc;
    m_desc_isSet = true;
}

bool OAIInMemoryAuthModuleConfig::is_desc_Set() const{
    return m_desc_isSet;
}

bool OAIInMemoryAuthModuleConfig::is_desc_Valid() const{
    return m_desc_isValid;
}

QString OAIInMemoryAuthModuleConfig::getId() const {
    return m_id;
}
void OAIInMemoryAuthModuleConfig::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIInMemoryAuthModuleConfig::is_id_Set() const{
    return m_id_isSet;
}

bool OAIInMemoryAuthModuleConfig::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIInMemoryAuthModuleConfig::getName() const {
    return m_name;
}
void OAIInMemoryAuthModuleConfig::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIInMemoryAuthModuleConfig::is_name_Set() const{
    return m_name_isSet;
}

bool OAIInMemoryAuthModuleConfig::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIInMemoryAuthModuleConfig::getSessionMaxAge() const {
    return m_session_max_age;
}
void OAIInMemoryAuthModuleConfig::setSessionMaxAge(const QString &session_max_age) {
    m_session_max_age = session_max_age;
    m_session_max_age_isSet = true;
}

bool OAIInMemoryAuthModuleConfig::is_session_max_age_Set() const{
    return m_session_max_age_isSet;
}

bool OAIInMemoryAuthModuleConfig::is_session_max_age_Valid() const{
    return m_session_max_age_isValid;
}

QString OAIInMemoryAuthModuleConfig::getType() const {
    return m_type;
}
void OAIInMemoryAuthModuleConfig::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIInMemoryAuthModuleConfig::is_type_Set() const{
    return m_type_isSet;
}

bool OAIInMemoryAuthModuleConfig::is_type_Valid() const{
    return m_type_isValid;
}

QList<OAIInMemoryUser> OAIInMemoryAuthModuleConfig::getUsers() const {
    return m_users;
}
void OAIInMemoryAuthModuleConfig::setUsers(const QList<OAIInMemoryUser> &users) {
    m_users = users;
    m_users_isSet = true;
}

bool OAIInMemoryAuthModuleConfig::is_users_Set() const{
    return m_users_isSet;
}

bool OAIInMemoryAuthModuleConfig::is_users_Valid() const{
    return m_users_isValid;
}

bool OAIInMemoryAuthModuleConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_max_age_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_users.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInMemoryAuthModuleConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_desc_isValid && m_id_isValid && m_name_isValid && m_session_max_age_isValid && m_type_isValid && m_users_isValid && true;
}

} // namespace OpenAPI
