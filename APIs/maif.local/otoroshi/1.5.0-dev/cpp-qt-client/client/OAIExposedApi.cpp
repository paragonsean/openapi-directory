/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExposedApi.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExposedApi::OAIExposedApi(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExposedApi::OAIExposedApi() {
    this->initializeModel();
}

OAIExposedApi::~OAIExposedApi() {}

void OAIExposedApi::initializeModel() {

    m_expose_api_isSet = false;
    m_expose_api_isValid = false;

    m_open_api_descriptor_url_isSet = false;
    m_open_api_descriptor_url_isValid = false;
}

void OAIExposedApi::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExposedApi::fromJsonObject(QJsonObject json) {

    m_expose_api_isValid = ::OpenAPI::fromJsonValue(m_expose_api, json[QString("exposeApi")]);
    m_expose_api_isSet = !json[QString("exposeApi")].isNull() && m_expose_api_isValid;

    m_open_api_descriptor_url_isValid = ::OpenAPI::fromJsonValue(m_open_api_descriptor_url, json[QString("openApiDescriptorUrl")]);
    m_open_api_descriptor_url_isSet = !json[QString("openApiDescriptorUrl")].isNull() && m_open_api_descriptor_url_isValid;
}

QString OAIExposedApi::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExposedApi::asJsonObject() const {
    QJsonObject obj;
    if (m_expose_api_isSet) {
        obj.insert(QString("exposeApi"), ::OpenAPI::toJsonValue(m_expose_api));
    }
    if (m_open_api_descriptor_url_isSet) {
        obj.insert(QString("openApiDescriptorUrl"), ::OpenAPI::toJsonValue(m_open_api_descriptor_url));
    }
    return obj;
}

bool OAIExposedApi::isExposeApi() const {
    return m_expose_api;
}
void OAIExposedApi::setExposeApi(const bool &expose_api) {
    m_expose_api = expose_api;
    m_expose_api_isSet = true;
}

bool OAIExposedApi::is_expose_api_Set() const{
    return m_expose_api_isSet;
}

bool OAIExposedApi::is_expose_api_Valid() const{
    return m_expose_api_isValid;
}

QString OAIExposedApi::getOpenApiDescriptorUrl() const {
    return m_open_api_descriptor_url;
}
void OAIExposedApi::setOpenApiDescriptorUrl(const QString &open_api_descriptor_url) {
    m_open_api_descriptor_url = open_api_descriptor_url;
    m_open_api_descriptor_url_isSet = true;
}

bool OAIExposedApi::is_open_api_descriptor_url_Set() const{
    return m_open_api_descriptor_url_isSet;
}

bool OAIExposedApi::is_open_api_descriptor_url_Valid() const{
    return m_open_api_descriptor_url_isValid;
}

bool OAIExposedApi::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expose_api_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_api_descriptor_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExposedApi::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_expose_api_isValid && true;
}

} // namespace OpenAPI
