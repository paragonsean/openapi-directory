/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStats.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStats::OAIStats(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStats::OAIStats() {
    this->initializeModel();
}

OAIStats::~OAIStats() {}

void OAIStats::initializeModel() {

    m_calls_isSet = false;
    m_calls_isValid = false;

    m_concurrent_handled_requests_isSet = false;
    m_concurrent_handled_requests_isValid = false;

    m_data_in_isSet = false;
    m_data_in_isValid = false;

    m_data_in_rate_isSet = false;
    m_data_in_rate_isValid = false;

    m_data_out_isSet = false;
    m_data_out_isValid = false;

    m_data_out_rate_isSet = false;
    m_data_out_rate_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_overhead_isSet = false;
    m_overhead_isValid = false;

    m_rate_isSet = false;
    m_rate_isValid = false;
}

void OAIStats::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStats::fromJsonObject(QJsonObject json) {

    m_calls_isValid = ::OpenAPI::fromJsonValue(m_calls, json[QString("calls")]);
    m_calls_isSet = !json[QString("calls")].isNull() && m_calls_isValid;

    m_concurrent_handled_requests_isValid = ::OpenAPI::fromJsonValue(m_concurrent_handled_requests, json[QString("concurrentHandledRequests")]);
    m_concurrent_handled_requests_isSet = !json[QString("concurrentHandledRequests")].isNull() && m_concurrent_handled_requests_isValid;

    m_data_in_isValid = ::OpenAPI::fromJsonValue(m_data_in, json[QString("dataIn")]);
    m_data_in_isSet = !json[QString("dataIn")].isNull() && m_data_in_isValid;

    m_data_in_rate_isValid = ::OpenAPI::fromJsonValue(m_data_in_rate, json[QString("dataInRate")]);
    m_data_in_rate_isSet = !json[QString("dataInRate")].isNull() && m_data_in_rate_isValid;

    m_data_out_isValid = ::OpenAPI::fromJsonValue(m_data_out, json[QString("dataOut")]);
    m_data_out_isSet = !json[QString("dataOut")].isNull() && m_data_out_isValid;

    m_data_out_rate_isValid = ::OpenAPI::fromJsonValue(m_data_out_rate, json[QString("dataOutRate")]);
    m_data_out_rate_isSet = !json[QString("dataOutRate")].isNull() && m_data_out_rate_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_overhead_isValid = ::OpenAPI::fromJsonValue(m_overhead, json[QString("overhead")]);
    m_overhead_isSet = !json[QString("overhead")].isNull() && m_overhead_isValid;

    m_rate_isValid = ::OpenAPI::fromJsonValue(m_rate, json[QString("rate")]);
    m_rate_isSet = !json[QString("rate")].isNull() && m_rate_isValid;
}

QString OAIStats::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStats::asJsonObject() const {
    QJsonObject obj;
    if (m_calls_isSet) {
        obj.insert(QString("calls"), ::OpenAPI::toJsonValue(m_calls));
    }
    if (m_concurrent_handled_requests_isSet) {
        obj.insert(QString("concurrentHandledRequests"), ::OpenAPI::toJsonValue(m_concurrent_handled_requests));
    }
    if (m_data_in_isSet) {
        obj.insert(QString("dataIn"), ::OpenAPI::toJsonValue(m_data_in));
    }
    if (m_data_in_rate_isSet) {
        obj.insert(QString("dataInRate"), ::OpenAPI::toJsonValue(m_data_in_rate));
    }
    if (m_data_out_isSet) {
        obj.insert(QString("dataOut"), ::OpenAPI::toJsonValue(m_data_out));
    }
    if (m_data_out_rate_isSet) {
        obj.insert(QString("dataOutRate"), ::OpenAPI::toJsonValue(m_data_out_rate));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_overhead_isSet) {
        obj.insert(QString("overhead"), ::OpenAPI::toJsonValue(m_overhead));
    }
    if (m_rate_isSet) {
        obj.insert(QString("rate"), ::OpenAPI::toJsonValue(m_rate));
    }
    return obj;
}

qint64 OAIStats::getCalls() const {
    return m_calls;
}
void OAIStats::setCalls(const qint64 &calls) {
    m_calls = calls;
    m_calls_isSet = true;
}

bool OAIStats::is_calls_Set() const{
    return m_calls_isSet;
}

bool OAIStats::is_calls_Valid() const{
    return m_calls_isValid;
}

qint64 OAIStats::getConcurrentHandledRequests() const {
    return m_concurrent_handled_requests;
}
void OAIStats::setConcurrentHandledRequests(const qint64 &concurrent_handled_requests) {
    m_concurrent_handled_requests = concurrent_handled_requests;
    m_concurrent_handled_requests_isSet = true;
}

bool OAIStats::is_concurrent_handled_requests_Set() const{
    return m_concurrent_handled_requests_isSet;
}

bool OAIStats::is_concurrent_handled_requests_Valid() const{
    return m_concurrent_handled_requests_isValid;
}

qint64 OAIStats::getDataIn() const {
    return m_data_in;
}
void OAIStats::setDataIn(const qint64 &data_in) {
    m_data_in = data_in;
    m_data_in_isSet = true;
}

bool OAIStats::is_data_in_Set() const{
    return m_data_in_isSet;
}

bool OAIStats::is_data_in_Valid() const{
    return m_data_in_isValid;
}

double OAIStats::getDataInRate() const {
    return m_data_in_rate;
}
void OAIStats::setDataInRate(const double &data_in_rate) {
    m_data_in_rate = data_in_rate;
    m_data_in_rate_isSet = true;
}

bool OAIStats::is_data_in_rate_Set() const{
    return m_data_in_rate_isSet;
}

bool OAIStats::is_data_in_rate_Valid() const{
    return m_data_in_rate_isValid;
}

qint64 OAIStats::getDataOut() const {
    return m_data_out;
}
void OAIStats::setDataOut(const qint64 &data_out) {
    m_data_out = data_out;
    m_data_out_isSet = true;
}

bool OAIStats::is_data_out_Set() const{
    return m_data_out_isSet;
}

bool OAIStats::is_data_out_Valid() const{
    return m_data_out_isValid;
}

double OAIStats::getDataOutRate() const {
    return m_data_out_rate;
}
void OAIStats::setDataOutRate(const double &data_out_rate) {
    m_data_out_rate = data_out_rate;
    m_data_out_rate_isSet = true;
}

bool OAIStats::is_data_out_rate_Set() const{
    return m_data_out_rate_isSet;
}

bool OAIStats::is_data_out_rate_Valid() const{
    return m_data_out_rate_isValid;
}

double OAIStats::getDuration() const {
    return m_duration;
}
void OAIStats::setDuration(const double &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIStats::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIStats::is_duration_Valid() const{
    return m_duration_isValid;
}

double OAIStats::getOverhead() const {
    return m_overhead;
}
void OAIStats::setOverhead(const double &overhead) {
    m_overhead = overhead;
    m_overhead_isSet = true;
}

bool OAIStats::is_overhead_Set() const{
    return m_overhead_isSet;
}

bool OAIStats::is_overhead_Valid() const{
    return m_overhead_isValid;
}

double OAIStats::getRate() const {
    return m_rate;
}
void OAIStats::setRate(const double &rate) {
    m_rate = rate;
    m_rate_isSet = true;
}

bool OAIStats::is_rate_Set() const{
    return m_rate_isSet;
}

bool OAIStats::is_rate_Valid() const{
    return m_rate_isValid;
}

bool OAIStats::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_calls_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_concurrent_handled_requests_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_in_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_out_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_out_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overhead_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStats::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_calls_isValid && m_concurrent_handled_requests_isValid && m_data_in_isValid && m_data_in_rate_isValid && m_data_out_isValid && m_data_out_rate_isValid && m_duration_isValid && m_overhead_isValid && m_rate_isValid && true;
}

} // namespace OpenAPI
