/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIServicesApi_H
#define OAI_OAIServicesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiKey.h"
#include "OAIDeleted.h"
#include "OAIErrorTemplate.h"
#include "OAIPatch_inner.h"
#include "OAIService.h"
#include "OAITarget.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIServicesApi : public QObject {
    Q_OBJECT

public:
    OAIServicesApi(const int timeOut = 0);
    ~OAIServicesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void allServices();

    /**
    * @param[in]  oai_service OAIService [optional]
    */
    virtual void createService(const ::OpenAPI::OptionalParam<OAIService> &oai_service = ::OpenAPI::OptionalParam<OAIService>());

    /**
    * @param[in]  service_id QString [required]
    * @param[in]  oai_error_template OAIErrorTemplate [optional]
    */
    virtual void createServiceTemplate(const QString &service_id, const ::OpenAPI::OptionalParam<OAIErrorTemplate> &oai_error_template = ::OpenAPI::OptionalParam<OAIErrorTemplate>());

    /**
    * @param[in]  service_id QString [required]
    */
    virtual void deleteService(const QString &service_id);

    /**
    * @param[in]  service_id QString [required]
    */
    virtual void deleteServiceTemplate(const QString &service_id);

    /**
    * @param[in]  service_id QString [required]
    * @param[in]  oai_patch_inner QList<OAIPatch_inner> [optional]
    */
    virtual void patchService(const QString &service_id, const ::OpenAPI::OptionalParam<QList<OAIPatch_inner>> &oai_patch_inner = ::OpenAPI::OptionalParam<QList<OAIPatch_inner>>());

    /**
    * @param[in]  service_id QString [required]
    */
    virtual void service(const QString &service_id);

    /**
    * @param[in]  service_id QString [required]
    * @param[in]  oai_target OAITarget [optional]
    */
    virtual void serviceAddTarget(const QString &service_id, const ::OpenAPI::OptionalParam<OAITarget> &oai_target = ::OpenAPI::OptionalParam<OAITarget>());

    /**
    * @param[in]  service_id QString [required]
    */
    virtual void serviceDeleteTarget(const QString &service_id);

    /**
    * @param[in]  service_group_id QString [required]
    */
    virtual void serviceGroupServices(const QString &service_group_id);

    /**
    * @param[in]  service_id QString [required]
    */
    virtual void serviceTargets(const QString &service_id);

    /**
    * @param[in]  service_id QString [required]
    */
    virtual void serviceTemplate(const QString &service_id);

    /**
    * @param[in]  service_id QString [required]
    * @param[in]  oai_service OAIService [optional]
    */
    virtual void updateService(const QString &service_id, const ::OpenAPI::OptionalParam<OAIService> &oai_service = ::OpenAPI::OptionalParam<OAIService>());

    /**
    * @param[in]  service_id QString [required]
    * @param[in]  oai_patch_inner QList<OAIPatch_inner> [optional]
    */
    virtual void updateServiceTargets(const QString &service_id, const ::OpenAPI::OptionalParam<QList<OAIPatch_inner>> &oai_patch_inner = ::OpenAPI::OptionalParam<QList<OAIPatch_inner>>());

    /**
    * @param[in]  service_id QString [required]
    * @param[in]  oai_error_template OAIErrorTemplate [optional]
    */
    virtual void updateServiceTemplate(const QString &service_id, const ::OpenAPI::OptionalParam<OAIErrorTemplate> &oai_error_template = ::OpenAPI::OptionalParam<OAIErrorTemplate>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void allServicesCallback(OAIHttpRequestWorker *worker);
    void createServiceCallback(OAIHttpRequestWorker *worker);
    void createServiceTemplateCallback(OAIHttpRequestWorker *worker);
    void deleteServiceCallback(OAIHttpRequestWorker *worker);
    void deleteServiceTemplateCallback(OAIHttpRequestWorker *worker);
    void patchServiceCallback(OAIHttpRequestWorker *worker);
    void serviceCallback(OAIHttpRequestWorker *worker);
    void serviceAddTargetCallback(OAIHttpRequestWorker *worker);
    void serviceDeleteTargetCallback(OAIHttpRequestWorker *worker);
    void serviceGroupServicesCallback(OAIHttpRequestWorker *worker);
    void serviceTargetsCallback(OAIHttpRequestWorker *worker);
    void serviceTemplateCallback(OAIHttpRequestWorker *worker);
    void updateServiceCallback(OAIHttpRequestWorker *worker);
    void updateServiceTargetsCallback(OAIHttpRequestWorker *worker);
    void updateServiceTemplateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void allServicesSignal(QList<OAIService> summary);
    void createServiceSignal(OAIService summary);
    void createServiceTemplateSignal(OAIErrorTemplate summary);
    void deleteServiceSignal(OAIDeleted summary);
    void deleteServiceTemplateSignal(OAIDeleted summary);
    void patchServiceSignal(OAIService summary);
    void serviceSignal(OAIService summary);
    void serviceAddTargetSignal(QList<OAITarget> summary);
    void serviceDeleteTargetSignal(QList<OAITarget> summary);
    void serviceGroupServicesSignal(QList<OAIApiKey> summary);
    void serviceTargetsSignal(QList<OAITarget> summary);
    void serviceTemplateSignal(OAIErrorTemplate summary);
    void updateServiceSignal(OAIService summary);
    void updateServiceTargetsSignal(QList<OAITarget> summary);
    void updateServiceTemplateSignal(OAIErrorTemplate summary);


    void allServicesSignalFull(OAIHttpRequestWorker *worker, QList<OAIService> summary);
    void createServiceSignalFull(OAIHttpRequestWorker *worker, OAIService summary);
    void createServiceTemplateSignalFull(OAIHttpRequestWorker *worker, OAIErrorTemplate summary);
    void deleteServiceSignalFull(OAIHttpRequestWorker *worker, OAIDeleted summary);
    void deleteServiceTemplateSignalFull(OAIHttpRequestWorker *worker, OAIDeleted summary);
    void patchServiceSignalFull(OAIHttpRequestWorker *worker, OAIService summary);
    void serviceSignalFull(OAIHttpRequestWorker *worker, OAIService summary);
    void serviceAddTargetSignalFull(OAIHttpRequestWorker *worker, QList<OAITarget> summary);
    void serviceDeleteTargetSignalFull(OAIHttpRequestWorker *worker, QList<OAITarget> summary);
    void serviceGroupServicesSignalFull(OAIHttpRequestWorker *worker, QList<OAIApiKey> summary);
    void serviceTargetsSignalFull(OAIHttpRequestWorker *worker, QList<OAITarget> summary);
    void serviceTemplateSignalFull(OAIHttpRequestWorker *worker, OAIErrorTemplate summary);
    void updateServiceSignalFull(OAIHttpRequestWorker *worker, OAIService summary);
    void updateServiceTargetsSignalFull(OAIHttpRequestWorker *worker, QList<OAITarget> summary);
    void updateServiceTemplateSignalFull(OAIHttpRequestWorker *worker, OAIErrorTemplate summary);

    Q_DECL_DEPRECATED_X("Use allServicesSignalError() instead")
    void allServicesSignalE(QList<OAIService> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void allServicesSignalError(QList<OAIService> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createServiceSignalError() instead")
    void createServiceSignalE(OAIService summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createServiceSignalError(OAIService summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createServiceTemplateSignalError() instead")
    void createServiceTemplateSignalE(OAIErrorTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createServiceTemplateSignalError(OAIErrorTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteServiceSignalError() instead")
    void deleteServiceSignalE(OAIDeleted summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteServiceSignalError(OAIDeleted summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteServiceTemplateSignalError() instead")
    void deleteServiceTemplateSignalE(OAIDeleted summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteServiceTemplateSignalError(OAIDeleted summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchServiceSignalError() instead")
    void patchServiceSignalE(OAIService summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchServiceSignalError(OAIService summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceSignalError() instead")
    void serviceSignalE(OAIService summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceSignalError(OAIService summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceAddTargetSignalError() instead")
    void serviceAddTargetSignalE(QList<OAITarget> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceAddTargetSignalError(QList<OAITarget> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceDeleteTargetSignalError() instead")
    void serviceDeleteTargetSignalE(QList<OAITarget> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceDeleteTargetSignalError(QList<OAITarget> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceGroupServicesSignalError() instead")
    void serviceGroupServicesSignalE(QList<OAIApiKey> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceGroupServicesSignalError(QList<OAIApiKey> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceTargetsSignalError() instead")
    void serviceTargetsSignalE(QList<OAITarget> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceTargetsSignalError(QList<OAITarget> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceTemplateSignalError() instead")
    void serviceTemplateSignalE(OAIErrorTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceTemplateSignalError(OAIErrorTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateServiceSignalError() instead")
    void updateServiceSignalE(OAIService summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateServiceSignalError(OAIService summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateServiceTargetsSignalError() instead")
    void updateServiceTargetsSignalE(QList<OAITarget> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateServiceTargetsSignalError(QList<OAITarget> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateServiceTemplateSignalError() instead")
    void updateServiceTemplateSignalE(OAIErrorTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateServiceTemplateSignalError(OAIErrorTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use allServicesSignalErrorFull() instead")
    void allServicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void allServicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createServiceSignalErrorFull() instead")
    void createServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createServiceTemplateSignalErrorFull() instead")
    void createServiceTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createServiceTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteServiceSignalErrorFull() instead")
    void deleteServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteServiceTemplateSignalErrorFull() instead")
    void deleteServiceTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteServiceTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchServiceSignalErrorFull() instead")
    void patchServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceSignalErrorFull() instead")
    void serviceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceAddTargetSignalErrorFull() instead")
    void serviceAddTargetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceAddTargetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceDeleteTargetSignalErrorFull() instead")
    void serviceDeleteTargetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceDeleteTargetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceGroupServicesSignalErrorFull() instead")
    void serviceGroupServicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceGroupServicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceTargetsSignalErrorFull() instead")
    void serviceTargetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceTargetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceTemplateSignalErrorFull() instead")
    void serviceTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateServiceSignalErrorFull() instead")
    void updateServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateServiceTargetsSignalErrorFull() instead")
    void updateServiceTargetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateServiceTargetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateServiceTemplateSignalErrorFull() instead")
    void updateServiceTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateServiceTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
