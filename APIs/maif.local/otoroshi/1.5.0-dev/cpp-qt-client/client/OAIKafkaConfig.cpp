/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKafkaConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKafkaConfig::OAIKafkaConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKafkaConfig::OAIKafkaConfig() {
    this->initializeModel();
}

OAIKafkaConfig::~OAIKafkaConfig() {}

void OAIKafkaConfig::initializeModel() {

    m_key_pass_isSet = false;
    m_key_pass_isValid = false;

    m_key_store_isSet = false;
    m_key_store_isValid = false;

    m_servers_isSet = false;
    m_servers_isValid = false;

    m_topic_isSet = false;
    m_topic_isValid = false;

    m_trustore_isSet = false;
    m_trustore_isValid = false;
}

void OAIKafkaConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKafkaConfig::fromJsonObject(QJsonObject json) {

    m_key_pass_isValid = ::OpenAPI::fromJsonValue(m_key_pass, json[QString("keyPass")]);
    m_key_pass_isSet = !json[QString("keyPass")].isNull() && m_key_pass_isValid;

    m_key_store_isValid = ::OpenAPI::fromJsonValue(m_key_store, json[QString("keyStore")]);
    m_key_store_isSet = !json[QString("keyStore")].isNull() && m_key_store_isValid;

    m_servers_isValid = ::OpenAPI::fromJsonValue(m_servers, json[QString("servers")]);
    m_servers_isSet = !json[QString("servers")].isNull() && m_servers_isValid;

    m_topic_isValid = ::OpenAPI::fromJsonValue(m_topic, json[QString("topic")]);
    m_topic_isSet = !json[QString("topic")].isNull() && m_topic_isValid;

    m_trustore_isValid = ::OpenAPI::fromJsonValue(m_trustore, json[QString("trustore")]);
    m_trustore_isSet = !json[QString("trustore")].isNull() && m_trustore_isValid;
}

QString OAIKafkaConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKafkaConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_key_pass_isSet) {
        obj.insert(QString("keyPass"), ::OpenAPI::toJsonValue(m_key_pass));
    }
    if (m_key_store_isSet) {
        obj.insert(QString("keyStore"), ::OpenAPI::toJsonValue(m_key_store));
    }
    if (m_servers.size() > 0) {
        obj.insert(QString("servers"), ::OpenAPI::toJsonValue(m_servers));
    }
    if (m_topic_isSet) {
        obj.insert(QString("topic"), ::OpenAPI::toJsonValue(m_topic));
    }
    if (m_trustore_isSet) {
        obj.insert(QString("trustore"), ::OpenAPI::toJsonValue(m_trustore));
    }
    return obj;
}

QString OAIKafkaConfig::getKeyPass() const {
    return m_key_pass;
}
void OAIKafkaConfig::setKeyPass(const QString &key_pass) {
    m_key_pass = key_pass;
    m_key_pass_isSet = true;
}

bool OAIKafkaConfig::is_key_pass_Set() const{
    return m_key_pass_isSet;
}

bool OAIKafkaConfig::is_key_pass_Valid() const{
    return m_key_pass_isValid;
}

QString OAIKafkaConfig::getKeyStore() const {
    return m_key_store;
}
void OAIKafkaConfig::setKeyStore(const QString &key_store) {
    m_key_store = key_store;
    m_key_store_isSet = true;
}

bool OAIKafkaConfig::is_key_store_Set() const{
    return m_key_store_isSet;
}

bool OAIKafkaConfig::is_key_store_Valid() const{
    return m_key_store_isValid;
}

QList<QString> OAIKafkaConfig::getServers() const {
    return m_servers;
}
void OAIKafkaConfig::setServers(const QList<QString> &servers) {
    m_servers = servers;
    m_servers_isSet = true;
}

bool OAIKafkaConfig::is_servers_Set() const{
    return m_servers_isSet;
}

bool OAIKafkaConfig::is_servers_Valid() const{
    return m_servers_isValid;
}

QString OAIKafkaConfig::getTopic() const {
    return m_topic;
}
void OAIKafkaConfig::setTopic(const QString &topic) {
    m_topic = topic;
    m_topic_isSet = true;
}

bool OAIKafkaConfig::is_topic_Set() const{
    return m_topic_isSet;
}

bool OAIKafkaConfig::is_topic_Valid() const{
    return m_topic_isValid;
}

QString OAIKafkaConfig::getTrustore() const {
    return m_trustore;
}
void OAIKafkaConfig::setTrustore(const QString &trustore) {
    m_trustore = trustore;
    m_trustore_isSet = true;
}

bool OAIKafkaConfig::is_trustore_Set() const{
    return m_trustore_isSet;
}

bool OAIKafkaConfig::is_trustore_Valid() const{
    return m_trustore_isValid;
}

bool OAIKafkaConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key_pass_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_store_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_servers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trustore_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKafkaConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_servers_isValid && true;
}

} // namespace OpenAPI
