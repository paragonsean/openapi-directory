/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErrorTemplate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErrorTemplate::OAIErrorTemplate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErrorTemplate::OAIErrorTemplate() {
    this->initializeModel();
}

OAIErrorTemplate::~OAIErrorTemplate() {}

void OAIErrorTemplate::initializeModel() {

    m_messages_isSet = false;
    m_messages_isValid = false;

    m_service_id_isSet = false;
    m_service_id_isValid = false;

    m_template40x_isSet = false;
    m_template40x_isValid = false;

    m_template50x_isSet = false;
    m_template50x_isValid = false;

    m_template_build_isSet = false;
    m_template_build_isValid = false;

    m_template_maintenance_isSet = false;
    m_template_maintenance_isValid = false;
}

void OAIErrorTemplate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIErrorTemplate::fromJsonObject(QJsonObject json) {

    m_messages_isValid = ::OpenAPI::fromJsonValue(m_messages, json[QString("messages")]);
    m_messages_isSet = !json[QString("messages")].isNull() && m_messages_isValid;

    m_service_id_isValid = ::OpenAPI::fromJsonValue(m_service_id, json[QString("serviceId")]);
    m_service_id_isSet = !json[QString("serviceId")].isNull() && m_service_id_isValid;

    m_template40x_isValid = ::OpenAPI::fromJsonValue(m_template40x, json[QString("template40x")]);
    m_template40x_isSet = !json[QString("template40x")].isNull() && m_template40x_isValid;

    m_template50x_isValid = ::OpenAPI::fromJsonValue(m_template50x, json[QString("template50x")]);
    m_template50x_isSet = !json[QString("template50x")].isNull() && m_template50x_isValid;

    m_template_build_isValid = ::OpenAPI::fromJsonValue(m_template_build, json[QString("templateBuild")]);
    m_template_build_isSet = !json[QString("templateBuild")].isNull() && m_template_build_isValid;

    m_template_maintenance_isValid = ::OpenAPI::fromJsonValue(m_template_maintenance, json[QString("templateMaintenance")]);
    m_template_maintenance_isSet = !json[QString("templateMaintenance")].isNull() && m_template_maintenance_isValid;
}

QString OAIErrorTemplate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIErrorTemplate::asJsonObject() const {
    QJsonObject obj;
    if (m_messages.size() > 0) {
        obj.insert(QString("messages"), ::OpenAPI::toJsonValue(m_messages));
    }
    if (m_service_id_isSet) {
        obj.insert(QString("serviceId"), ::OpenAPI::toJsonValue(m_service_id));
    }
    if (m_template40x_isSet) {
        obj.insert(QString("template40x"), ::OpenAPI::toJsonValue(m_template40x));
    }
    if (m_template50x_isSet) {
        obj.insert(QString("template50x"), ::OpenAPI::toJsonValue(m_template50x));
    }
    if (m_template_build_isSet) {
        obj.insert(QString("templateBuild"), ::OpenAPI::toJsonValue(m_template_build));
    }
    if (m_template_maintenance_isSet) {
        obj.insert(QString("templateMaintenance"), ::OpenAPI::toJsonValue(m_template_maintenance));
    }
    return obj;
}

QMap<QString, QString> OAIErrorTemplate::getMessages() const {
    return m_messages;
}
void OAIErrorTemplate::setMessages(const QMap<QString, QString> &messages) {
    m_messages = messages;
    m_messages_isSet = true;
}

bool OAIErrorTemplate::is_messages_Set() const{
    return m_messages_isSet;
}

bool OAIErrorTemplate::is_messages_Valid() const{
    return m_messages_isValid;
}

QString OAIErrorTemplate::getServiceId() const {
    return m_service_id;
}
void OAIErrorTemplate::setServiceId(const QString &service_id) {
    m_service_id = service_id;
    m_service_id_isSet = true;
}

bool OAIErrorTemplate::is_service_id_Set() const{
    return m_service_id_isSet;
}

bool OAIErrorTemplate::is_service_id_Valid() const{
    return m_service_id_isValid;
}

QString OAIErrorTemplate::getTemplate40x() const {
    return m_template40x;
}
void OAIErrorTemplate::setTemplate40x(const QString &template40x) {
    m_template40x = template40x;
    m_template40x_isSet = true;
}

bool OAIErrorTemplate::is_template40x_Set() const{
    return m_template40x_isSet;
}

bool OAIErrorTemplate::is_template40x_Valid() const{
    return m_template40x_isValid;
}

QString OAIErrorTemplate::getTemplate50x() const {
    return m_template50x;
}
void OAIErrorTemplate::setTemplate50x(const QString &template50x) {
    m_template50x = template50x;
    m_template50x_isSet = true;
}

bool OAIErrorTemplate::is_template50x_Set() const{
    return m_template50x_isSet;
}

bool OAIErrorTemplate::is_template50x_Valid() const{
    return m_template50x_isValid;
}

QString OAIErrorTemplate::getTemplateBuild() const {
    return m_template_build;
}
void OAIErrorTemplate::setTemplateBuild(const QString &template_build) {
    m_template_build = template_build;
    m_template_build_isSet = true;
}

bool OAIErrorTemplate::is_template_build_Set() const{
    return m_template_build_isSet;
}

bool OAIErrorTemplate::is_template_build_Valid() const{
    return m_template_build_isValid;
}

QString OAIErrorTemplate::getTemplateMaintenance() const {
    return m_template_maintenance;
}
void OAIErrorTemplate::setTemplateMaintenance(const QString &template_maintenance) {
    m_template_maintenance = template_maintenance;
    m_template_maintenance_isSet = true;
}

bool OAIErrorTemplate::is_template_maintenance_Set() const{
    return m_template_maintenance_isSet;
}

bool OAIErrorTemplate::is_template_maintenance_Valid() const{
    return m_template_maintenance_isValid;
}

bool OAIErrorTemplate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_messages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template40x_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template50x_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_build_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_maintenance_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIErrorTemplate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_messages_isValid && m_service_id_isValid && m_template40x_isValid && m_template50x_isValid && m_template_build_isValid && m_template_maintenance_isValid && true;
}

} // namespace OpenAPI
