/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPulsarDataExporterConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPulsarDataExporterConfig::OAIPulsarDataExporterConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPulsarDataExporterConfig::OAIPulsarDataExporterConfig() {
    this->initializeModel();
}

OAIPulsarDataExporterConfig::~OAIPulsarDataExporterConfig() {}

void OAIPulsarDataExporterConfig::initializeModel() {

    m_r_namespace_isSet = false;
    m_r_namespace_isValid = false;

    m_tenant_isSet = false;
    m_tenant_isValid = false;

    m_topic_isSet = false;
    m_topic_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAIPulsarDataExporterConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPulsarDataExporterConfig::fromJsonObject(QJsonObject json) {

    m_r_namespace_isValid = ::OpenAPI::fromJsonValue(m_r_namespace, json[QString("namespace")]);
    m_r_namespace_isSet = !json[QString("namespace")].isNull() && m_r_namespace_isValid;

    m_tenant_isValid = ::OpenAPI::fromJsonValue(m_tenant, json[QString("tenant")]);
    m_tenant_isSet = !json[QString("tenant")].isNull() && m_tenant_isValid;

    m_topic_isValid = ::OpenAPI::fromJsonValue(m_topic, json[QString("topic")]);
    m_topic_isSet = !json[QString("topic")].isNull() && m_topic_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;
}

QString OAIPulsarDataExporterConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPulsarDataExporterConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_r_namespace_isSet) {
        obj.insert(QString("namespace"), ::OpenAPI::toJsonValue(m_r_namespace));
    }
    if (m_tenant_isSet) {
        obj.insert(QString("tenant"), ::OpenAPI::toJsonValue(m_tenant));
    }
    if (m_topic_isSet) {
        obj.insert(QString("topic"), ::OpenAPI::toJsonValue(m_topic));
    }
    if (m_uri.size() > 0) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

QString OAIPulsarDataExporterConfig::getRNamespace() const {
    return m_r_namespace;
}
void OAIPulsarDataExporterConfig::setRNamespace(const QString &r_namespace) {
    m_r_namespace = r_namespace;
    m_r_namespace_isSet = true;
}

bool OAIPulsarDataExporterConfig::is_r_namespace_Set() const{
    return m_r_namespace_isSet;
}

bool OAIPulsarDataExporterConfig::is_r_namespace_Valid() const{
    return m_r_namespace_isValid;
}

QString OAIPulsarDataExporterConfig::getTenant() const {
    return m_tenant;
}
void OAIPulsarDataExporterConfig::setTenant(const QString &tenant) {
    m_tenant = tenant;
    m_tenant_isSet = true;
}

bool OAIPulsarDataExporterConfig::is_tenant_Set() const{
    return m_tenant_isSet;
}

bool OAIPulsarDataExporterConfig::is_tenant_Valid() const{
    return m_tenant_isValid;
}

QString OAIPulsarDataExporterConfig::getTopic() const {
    return m_topic;
}
void OAIPulsarDataExporterConfig::setTopic(const QString &topic) {
    m_topic = topic;
    m_topic_isSet = true;
}

bool OAIPulsarDataExporterConfig::is_topic_Set() const{
    return m_topic_isSet;
}

bool OAIPulsarDataExporterConfig::is_topic_Valid() const{
    return m_topic_isValid;
}

QList<QString> OAIPulsarDataExporterConfig::getUri() const {
    return m_uri;
}
void OAIPulsarDataExporterConfig::setUri(const QList<QString> &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIPulsarDataExporterConfig::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIPulsarDataExporterConfig::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAIPulsarDataExporterConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPulsarDataExporterConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_r_namespace_isValid && m_tenant_isValid && m_topic_isValid && m_uri_isValid && true;
}

} // namespace OpenAPI
