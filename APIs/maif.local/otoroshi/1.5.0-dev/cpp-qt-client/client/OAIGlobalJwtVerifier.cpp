/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGlobalJwtVerifier.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGlobalJwtVerifier::OAIGlobalJwtVerifier(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGlobalJwtVerifier::OAIGlobalJwtVerifier() {
    this->initializeModel();
}

OAIGlobalJwtVerifier::~OAIGlobalJwtVerifier() {}

void OAIGlobalJwtVerifier::initializeModel() {

    m_algo_settings_isSet = false;
    m_algo_settings_isValid = false;

    m_desc_isSet = false;
    m_desc_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_strategy_isSet = false;
    m_strategy_isValid = false;

    m_strict_isSet = false;
    m_strict_isValid = false;
}

void OAIGlobalJwtVerifier::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGlobalJwtVerifier::fromJsonObject(QJsonObject json) {

    m_algo_settings_isValid = ::OpenAPI::fromJsonValue(m_algo_settings, json[QString("algoSettings")]);
    m_algo_settings_isSet = !json[QString("algoSettings")].isNull() && m_algo_settings_isValid;

    m_desc_isValid = ::OpenAPI::fromJsonValue(m_desc, json[QString("desc")]);
    m_desc_isSet = !json[QString("desc")].isNull() && m_desc_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_strategy_isValid = ::OpenAPI::fromJsonValue(m_strategy, json[QString("strategy")]);
    m_strategy_isSet = !json[QString("strategy")].isNull() && m_strategy_isValid;

    m_strict_isValid = ::OpenAPI::fromJsonValue(m_strict, json[QString("strict")]);
    m_strict_isSet = !json[QString("strict")].isNull() && m_strict_isValid;
}

QString OAIGlobalJwtVerifier::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGlobalJwtVerifier::asJsonObject() const {
    QJsonObject obj;
    if (m_algo_settings.isSet()) {
        obj.insert(QString("algoSettings"), ::OpenAPI::toJsonValue(m_algo_settings));
    }
    if (m_desc_isSet) {
        obj.insert(QString("desc"), ::OpenAPI::toJsonValue(m_desc));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_strategy.isSet()) {
        obj.insert(QString("strategy"), ::OpenAPI::toJsonValue(m_strategy));
    }
    if (m_strict_isSet) {
        obj.insert(QString("strict"), ::OpenAPI::toJsonValue(m_strict));
    }
    return obj;
}

OAIGlobalJwtVerifier_algoSettings OAIGlobalJwtVerifier::getAlgoSettings() const {
    return m_algo_settings;
}
void OAIGlobalJwtVerifier::setAlgoSettings(const OAIGlobalJwtVerifier_algoSettings &algo_settings) {
    m_algo_settings = algo_settings;
    m_algo_settings_isSet = true;
}

bool OAIGlobalJwtVerifier::is_algo_settings_Set() const{
    return m_algo_settings_isSet;
}

bool OAIGlobalJwtVerifier::is_algo_settings_Valid() const{
    return m_algo_settings_isValid;
}

QString OAIGlobalJwtVerifier::getDesc() const {
    return m_desc;
}
void OAIGlobalJwtVerifier::setDesc(const QString &desc) {
    m_desc = desc;
    m_desc_isSet = true;
}

bool OAIGlobalJwtVerifier::is_desc_Set() const{
    return m_desc_isSet;
}

bool OAIGlobalJwtVerifier::is_desc_Valid() const{
    return m_desc_isValid;
}

bool OAIGlobalJwtVerifier::isEnabled() const {
    return m_enabled;
}
void OAIGlobalJwtVerifier::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIGlobalJwtVerifier::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIGlobalJwtVerifier::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAIGlobalJwtVerifier::getId() const {
    return m_id;
}
void OAIGlobalJwtVerifier::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGlobalJwtVerifier::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGlobalJwtVerifier::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIGlobalJwtVerifier::getName() const {
    return m_name;
}
void OAIGlobalJwtVerifier::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGlobalJwtVerifier::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGlobalJwtVerifier::is_name_Valid() const{
    return m_name_isValid;
}

OAIGlobalJwtVerifier_source OAIGlobalJwtVerifier::getSource() const {
    return m_source;
}
void OAIGlobalJwtVerifier::setSource(const OAIGlobalJwtVerifier_source &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIGlobalJwtVerifier::is_source_Set() const{
    return m_source_isSet;
}

bool OAIGlobalJwtVerifier::is_source_Valid() const{
    return m_source_isValid;
}

OAIGlobalJwtVerifier_strategy OAIGlobalJwtVerifier::getStrategy() const {
    return m_strategy;
}
void OAIGlobalJwtVerifier::setStrategy(const OAIGlobalJwtVerifier_strategy &strategy) {
    m_strategy = strategy;
    m_strategy_isSet = true;
}

bool OAIGlobalJwtVerifier::is_strategy_Set() const{
    return m_strategy_isSet;
}

bool OAIGlobalJwtVerifier::is_strategy_Valid() const{
    return m_strategy_isValid;
}

bool OAIGlobalJwtVerifier::isStrict() const {
    return m_strict;
}
void OAIGlobalJwtVerifier::setStrict(const bool &strict) {
    m_strict = strict;
    m_strict_isSet = true;
}

bool OAIGlobalJwtVerifier::is_strict_Set() const{
    return m_strict_isSet;
}

bool OAIGlobalJwtVerifier::is_strict_Valid() const{
    return m_strict_isValid;
}

bool OAIGlobalJwtVerifier::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_algo_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_strategy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_strict_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGlobalJwtVerifier::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_algo_settings_isValid && m_desc_isValid && m_enabled_isValid && m_id_isValid && m_name_isValid && m_source_isValid && m_strategy_isValid && m_strict_isValid && true;
}

} // namespace OpenAPI
