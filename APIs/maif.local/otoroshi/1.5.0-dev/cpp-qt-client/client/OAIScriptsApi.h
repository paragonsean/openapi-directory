/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIScriptsApi_H
#define OAI_OAIScriptsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDeleted.h"
#include "OAIPatch_inner.h"
#include "OAIScript.h"
#include "OAIScriptCompilationResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIScriptsApi : public QObject {
    Q_OBJECT

public:
    OAIScriptsApi(const int timeOut = 0);
    ~OAIScriptsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_script OAIScript [optional]
    */
    virtual void compileScript(const ::OpenAPI::OptionalParam<OAIScript> &oai_script = ::OpenAPI::OptionalParam<OAIScript>());

    /**
    * @param[in]  oai_script OAIScript [optional]
    */
    virtual void createScript(const ::OpenAPI::OptionalParam<OAIScript> &oai_script = ::OpenAPI::OptionalParam<OAIScript>());

    /**
    * @param[in]  script_id QString [required]
    */
    virtual void deleteScript(const QString &script_id);


    virtual void findAllScripts();

    /**
    * @param[in]  script_id QString [required]
    */
    virtual void findScriptById(const QString &script_id);

    /**
    * @param[in]  script_id QString [required]
    * @param[in]  oai_patch_inner QList<OAIPatch_inner> [optional]
    */
    virtual void patchScript(const QString &script_id, const ::OpenAPI::OptionalParam<QList<OAIPatch_inner>> &oai_patch_inner = ::OpenAPI::OptionalParam<QList<OAIPatch_inner>>());

    /**
    * @param[in]  script_id QString [required]
    * @param[in]  oai_script OAIScript [optional]
    */
    virtual void updateScript(const QString &script_id, const ::OpenAPI::OptionalParam<OAIScript> &oai_script = ::OpenAPI::OptionalParam<OAIScript>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void compileScriptCallback(OAIHttpRequestWorker *worker);
    void createScriptCallback(OAIHttpRequestWorker *worker);
    void deleteScriptCallback(OAIHttpRequestWorker *worker);
    void findAllScriptsCallback(OAIHttpRequestWorker *worker);
    void findScriptByIdCallback(OAIHttpRequestWorker *worker);
    void patchScriptCallback(OAIHttpRequestWorker *worker);
    void updateScriptCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void compileScriptSignal(OAIScriptCompilationResult summary);
    void createScriptSignal(OAIScript summary);
    void deleteScriptSignal(OAIDeleted summary);
    void findAllScriptsSignal(QList<OAIScript> summary);
    void findScriptByIdSignal(OAIScript summary);
    void patchScriptSignal(OAIScript summary);
    void updateScriptSignal(OAIScript summary);


    void compileScriptSignalFull(OAIHttpRequestWorker *worker, OAIScriptCompilationResult summary);
    void createScriptSignalFull(OAIHttpRequestWorker *worker, OAIScript summary);
    void deleteScriptSignalFull(OAIHttpRequestWorker *worker, OAIDeleted summary);
    void findAllScriptsSignalFull(OAIHttpRequestWorker *worker, QList<OAIScript> summary);
    void findScriptByIdSignalFull(OAIHttpRequestWorker *worker, OAIScript summary);
    void patchScriptSignalFull(OAIHttpRequestWorker *worker, OAIScript summary);
    void updateScriptSignalFull(OAIHttpRequestWorker *worker, OAIScript summary);

    Q_DECL_DEPRECATED_X("Use compileScriptSignalError() instead")
    void compileScriptSignalE(OAIScriptCompilationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void compileScriptSignalError(OAIScriptCompilationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createScriptSignalError() instead")
    void createScriptSignalE(OAIScript summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createScriptSignalError(OAIScript summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteScriptSignalError() instead")
    void deleteScriptSignalE(OAIDeleted summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteScriptSignalError(OAIDeleted summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findAllScriptsSignalError() instead")
    void findAllScriptsSignalE(QList<OAIScript> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findAllScriptsSignalError(QList<OAIScript> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findScriptByIdSignalError() instead")
    void findScriptByIdSignalE(OAIScript summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findScriptByIdSignalError(OAIScript summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchScriptSignalError() instead")
    void patchScriptSignalE(OAIScript summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchScriptSignalError(OAIScript summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateScriptSignalError() instead")
    void updateScriptSignalE(OAIScript summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateScriptSignalError(OAIScript summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use compileScriptSignalErrorFull() instead")
    void compileScriptSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void compileScriptSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createScriptSignalErrorFull() instead")
    void createScriptSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createScriptSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteScriptSignalErrorFull() instead")
    void deleteScriptSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteScriptSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findAllScriptsSignalErrorFull() instead")
    void findAllScriptsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findAllScriptsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findScriptByIdSignalErrorFull() instead")
    void findScriptByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findScriptByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchScriptSignalErrorFull() instead")
    void patchScriptSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchScriptSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateScriptSignalErrorFull() instead")
    void updateScriptSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateScriptSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
