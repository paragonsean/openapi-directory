/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDataExporterConfigsApi_H
#define OAI_OAIDataExporterConfigsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateBulkDataExporterConfigs_200_response_inner.h"
#include "OAIDataExporterConfig.h"
#include "OAIDeletebulkDataExporterConfig_200_response_inner.h"
#include "OAIDeleted.h"
#include "OAIPatch_inner.h"
#include "OAIUpdateBulkDataExporterConfig_200_response_inner.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDataExporterConfigsApi : public QObject {
    Q_OBJECT

public:
    OAIDataExporterConfigsApi(const int timeOut = 0);
    ~OAIDataExporterConfigsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_data_exporter_config OAIDataExporterConfig [optional]
    */
    virtual void createBulkDataExporterConfigs(const ::OpenAPI::OptionalParam<OAIDataExporterConfig> &oai_data_exporter_config = ::OpenAPI::OptionalParam<OAIDataExporterConfig>());

    /**
    * @param[in]  oai_data_exporter_config OAIDataExporterConfig [optional]
    */
    virtual void createDataExporterConfig(const ::OpenAPI::OptionalParam<OAIDataExporterConfig> &oai_data_exporter_config = ::OpenAPI::OptionalParam<OAIDataExporterConfig>());

    /**
    * @param[in]  type QString [optional]
    */
    virtual void dataExporterTemplate(const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  data_exporter_config_id QString [required]
    */
    virtual void deleteDataExporterConfig(const QString &data_exporter_config_id);

    /**
    * @param[in]  oai_patch_inner QList<OAIPatch_inner> [optional]
    */
    virtual void deletebulkDataExporterConfig(const ::OpenAPI::OptionalParam<QList<OAIPatch_inner>> &oai_patch_inner = ::OpenAPI::OptionalParam<QList<OAIPatch_inner>>());


    virtual void findAllDataExporters();

    /**
    * @param[in]  data_exporter_config_id QString [required]
    */
    virtual void findDataExporterConfigById(const QString &data_exporter_config_id);

    /**
    * @param[in]  oai_patch_inner QList<OAIPatch_inner> [optional]
    */
    virtual void patchBulkDataExporterConfig(const ::OpenAPI::OptionalParam<QList<OAIPatch_inner>> &oai_patch_inner = ::OpenAPI::OptionalParam<QList<OAIPatch_inner>>());

    /**
    * @param[in]  data_exporter_config_id QString [required]
    * @param[in]  oai_patch_inner QList<OAIPatch_inner> [optional]
    */
    virtual void patchDataExporterConfig(const QString &data_exporter_config_id, const ::OpenAPI::OptionalParam<QList<OAIPatch_inner>> &oai_patch_inner = ::OpenAPI::OptionalParam<QList<OAIPatch_inner>>());

    /**
    * @param[in]  oai_data_exporter_config OAIDataExporterConfig [optional]
    */
    virtual void updateBulkDataExporterConfig(const ::OpenAPI::OptionalParam<OAIDataExporterConfig> &oai_data_exporter_config = ::OpenAPI::OptionalParam<OAIDataExporterConfig>());

    /**
    * @param[in]  data_exporter_config_id QString [required]
    * @param[in]  oai_data_exporter_config OAIDataExporterConfig [optional]
    */
    virtual void updateDataExporterConfig(const QString &data_exporter_config_id, const ::OpenAPI::OptionalParam<OAIDataExporterConfig> &oai_data_exporter_config = ::OpenAPI::OptionalParam<OAIDataExporterConfig>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createBulkDataExporterConfigsCallback(OAIHttpRequestWorker *worker);
    void createDataExporterConfigCallback(OAIHttpRequestWorker *worker);
    void dataExporterTemplateCallback(OAIHttpRequestWorker *worker);
    void deleteDataExporterConfigCallback(OAIHttpRequestWorker *worker);
    void deletebulkDataExporterConfigCallback(OAIHttpRequestWorker *worker);
    void findAllDataExportersCallback(OAIHttpRequestWorker *worker);
    void findDataExporterConfigByIdCallback(OAIHttpRequestWorker *worker);
    void patchBulkDataExporterConfigCallback(OAIHttpRequestWorker *worker);
    void patchDataExporterConfigCallback(OAIHttpRequestWorker *worker);
    void updateBulkDataExporterConfigCallback(OAIHttpRequestWorker *worker);
    void updateDataExporterConfigCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createBulkDataExporterConfigsSignal(QList<OAICreateBulkDataExporterConfigs_200_response_inner> summary);
    void createDataExporterConfigSignal(OAIDataExporterConfig summary);
    void dataExporterTemplateSignal(OAIDataExporterConfig summary);
    void deleteDataExporterConfigSignal(OAIDeleted summary);
    void deletebulkDataExporterConfigSignal(QList<OAIDeletebulkDataExporterConfig_200_response_inner> summary);
    void findAllDataExportersSignal(QList<OAIDataExporterConfig> summary);
    void findDataExporterConfigByIdSignal(OAIDataExporterConfig summary);
    void patchBulkDataExporterConfigSignal(QList<OAIUpdateBulkDataExporterConfig_200_response_inner> summary);
    void patchDataExporterConfigSignal(OAIDataExporterConfig summary);
    void updateBulkDataExporterConfigSignal(QList<OAIUpdateBulkDataExporterConfig_200_response_inner> summary);
    void updateDataExporterConfigSignal(OAIDataExporterConfig summary);


    void createBulkDataExporterConfigsSignalFull(OAIHttpRequestWorker *worker, QList<OAICreateBulkDataExporterConfigs_200_response_inner> summary);
    void createDataExporterConfigSignalFull(OAIHttpRequestWorker *worker, OAIDataExporterConfig summary);
    void dataExporterTemplateSignalFull(OAIHttpRequestWorker *worker, OAIDataExporterConfig summary);
    void deleteDataExporterConfigSignalFull(OAIHttpRequestWorker *worker, OAIDeleted summary);
    void deletebulkDataExporterConfigSignalFull(OAIHttpRequestWorker *worker, QList<OAIDeletebulkDataExporterConfig_200_response_inner> summary);
    void findAllDataExportersSignalFull(OAIHttpRequestWorker *worker, QList<OAIDataExporterConfig> summary);
    void findDataExporterConfigByIdSignalFull(OAIHttpRequestWorker *worker, OAIDataExporterConfig summary);
    void patchBulkDataExporterConfigSignalFull(OAIHttpRequestWorker *worker, QList<OAIUpdateBulkDataExporterConfig_200_response_inner> summary);
    void patchDataExporterConfigSignalFull(OAIHttpRequestWorker *worker, OAIDataExporterConfig summary);
    void updateBulkDataExporterConfigSignalFull(OAIHttpRequestWorker *worker, QList<OAIUpdateBulkDataExporterConfig_200_response_inner> summary);
    void updateDataExporterConfigSignalFull(OAIHttpRequestWorker *worker, OAIDataExporterConfig summary);

    Q_DECL_DEPRECATED_X("Use createBulkDataExporterConfigsSignalError() instead")
    void createBulkDataExporterConfigsSignalE(QList<OAICreateBulkDataExporterConfigs_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createBulkDataExporterConfigsSignalError(QList<OAICreateBulkDataExporterConfigs_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDataExporterConfigSignalError() instead")
    void createDataExporterConfigSignalE(OAIDataExporterConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createDataExporterConfigSignalError(OAIDataExporterConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataExporterTemplateSignalError() instead")
    void dataExporterTemplateSignalE(OAIDataExporterConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataExporterTemplateSignalError(OAIDataExporterConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDataExporterConfigSignalError() instead")
    void deleteDataExporterConfigSignalE(OAIDeleted summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDataExporterConfigSignalError(OAIDeleted summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletebulkDataExporterConfigSignalError() instead")
    void deletebulkDataExporterConfigSignalE(QList<OAIDeletebulkDataExporterConfig_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deletebulkDataExporterConfigSignalError(QList<OAIDeletebulkDataExporterConfig_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findAllDataExportersSignalError() instead")
    void findAllDataExportersSignalE(QList<OAIDataExporterConfig> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findAllDataExportersSignalError(QList<OAIDataExporterConfig> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findDataExporterConfigByIdSignalError() instead")
    void findDataExporterConfigByIdSignalE(OAIDataExporterConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findDataExporterConfigByIdSignalError(OAIDataExporterConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchBulkDataExporterConfigSignalError() instead")
    void patchBulkDataExporterConfigSignalE(QList<OAIUpdateBulkDataExporterConfig_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchBulkDataExporterConfigSignalError(QList<OAIUpdateBulkDataExporterConfig_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchDataExporterConfigSignalError() instead")
    void patchDataExporterConfigSignalE(OAIDataExporterConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchDataExporterConfigSignalError(OAIDataExporterConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateBulkDataExporterConfigSignalError() instead")
    void updateBulkDataExporterConfigSignalE(QList<OAIUpdateBulkDataExporterConfig_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateBulkDataExporterConfigSignalError(QList<OAIUpdateBulkDataExporterConfig_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDataExporterConfigSignalError() instead")
    void updateDataExporterConfigSignalE(OAIDataExporterConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDataExporterConfigSignalError(OAIDataExporterConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createBulkDataExporterConfigsSignalErrorFull() instead")
    void createBulkDataExporterConfigsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createBulkDataExporterConfigsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDataExporterConfigSignalErrorFull() instead")
    void createDataExporterConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createDataExporterConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataExporterTemplateSignalErrorFull() instead")
    void dataExporterTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataExporterTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDataExporterConfigSignalErrorFull() instead")
    void deleteDataExporterConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDataExporterConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletebulkDataExporterConfigSignalErrorFull() instead")
    void deletebulkDataExporterConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletebulkDataExporterConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findAllDataExportersSignalErrorFull() instead")
    void findAllDataExportersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findAllDataExportersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findDataExporterConfigByIdSignalErrorFull() instead")
    void findDataExporterConfigByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findDataExporterConfigByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchBulkDataExporterConfigSignalErrorFull() instead")
    void patchBulkDataExporterConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchBulkDataExporterConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchDataExporterConfigSignalErrorFull() instead")
    void patchDataExporterConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchDataExporterConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateBulkDataExporterConfigSignalErrorFull() instead")
    void updateBulkDataExporterConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateBulkDataExporterConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDataExporterConfigSignalErrorFull() instead")
    void updateDataExporterConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDataExporterConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
