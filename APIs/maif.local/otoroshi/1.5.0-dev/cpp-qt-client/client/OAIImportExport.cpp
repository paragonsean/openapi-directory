/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImportExport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImportExport::OAIImportExport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImportExport::OAIImportExport() {
    this->initializeModel();
}

OAIImportExport::~OAIImportExport() {}

void OAIImportExport::initializeModel() {

    m_admins_isSet = false;
    m_admins_isValid = false;

    m_api_keys_isSet = false;
    m_api_keys_isValid = false;

    m_app_config_isSet = false;
    m_app_config_isValid = false;

    m_config_isSet = false;
    m_config_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_date_raw_isSet = false;
    m_date_raw_isValid = false;

    m_error_templates_isSet = false;
    m_error_templates_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_service_descriptors_isSet = false;
    m_service_descriptors_isValid = false;

    m_service_groups_isSet = false;
    m_service_groups_isValid = false;

    m_simple_admins_isSet = false;
    m_simple_admins_isValid = false;

    m_stats_isSet = false;
    m_stats_isValid = false;
}

void OAIImportExport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImportExport::fromJsonObject(QJsonObject json) {

    m_admins_isValid = ::OpenAPI::fromJsonValue(m_admins, json[QString("admins")]);
    m_admins_isSet = !json[QString("admins")].isNull() && m_admins_isValid;

    m_api_keys_isValid = ::OpenAPI::fromJsonValue(m_api_keys, json[QString("apiKeys")]);
    m_api_keys_isSet = !json[QString("apiKeys")].isNull() && m_api_keys_isValid;

    m_app_config_isValid = ::OpenAPI::fromJsonValue(m_app_config, json[QString("appConfig")]);
    m_app_config_isSet = !json[QString("appConfig")].isNull() && m_app_config_isValid;

    m_config_isValid = ::OpenAPI::fromJsonValue(m_config, json[QString("config")]);
    m_config_isSet = !json[QString("config")].isNull() && m_config_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_date_raw_isValid = ::OpenAPI::fromJsonValue(m_date_raw, json[QString("dateRaw")]);
    m_date_raw_isSet = !json[QString("dateRaw")].isNull() && m_date_raw_isValid;

    m_error_templates_isValid = ::OpenAPI::fromJsonValue(m_error_templates, json[QString("errorTemplates")]);
    m_error_templates_isSet = !json[QString("errorTemplates")].isNull() && m_error_templates_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_service_descriptors_isValid = ::OpenAPI::fromJsonValue(m_service_descriptors, json[QString("serviceDescriptors")]);
    m_service_descriptors_isSet = !json[QString("serviceDescriptors")].isNull() && m_service_descriptors_isValid;

    m_service_groups_isValid = ::OpenAPI::fromJsonValue(m_service_groups, json[QString("serviceGroups")]);
    m_service_groups_isSet = !json[QString("serviceGroups")].isNull() && m_service_groups_isValid;

    m_simple_admins_isValid = ::OpenAPI::fromJsonValue(m_simple_admins, json[QString("simpleAdmins")]);
    m_simple_admins_isSet = !json[QString("simpleAdmins")].isNull() && m_simple_admins_isValid;

    m_stats_isValid = ::OpenAPI::fromJsonValue(m_stats, json[QString("stats")]);
    m_stats_isSet = !json[QString("stats")].isNull() && m_stats_isValid;
}

QString OAIImportExport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImportExport::asJsonObject() const {
    QJsonObject obj;
    if (m_admins.size() > 0) {
        obj.insert(QString("admins"), ::OpenAPI::toJsonValue(m_admins));
    }
    if (m_api_keys.size() > 0) {
        obj.insert(QString("apiKeys"), ::OpenAPI::toJsonValue(m_api_keys));
    }
    if (m_app_config.size() > 0) {
        obj.insert(QString("appConfig"), ::OpenAPI::toJsonValue(m_app_config));
    }
    if (m_config.isSet()) {
        obj.insert(QString("config"), ::OpenAPI::toJsonValue(m_config));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_date_raw_isSet) {
        obj.insert(QString("dateRaw"), ::OpenAPI::toJsonValue(m_date_raw));
    }
    if (m_error_templates.size() > 0) {
        obj.insert(QString("errorTemplates"), ::OpenAPI::toJsonValue(m_error_templates));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_service_descriptors.size() > 0) {
        obj.insert(QString("serviceDescriptors"), ::OpenAPI::toJsonValue(m_service_descriptors));
    }
    if (m_service_groups.size() > 0) {
        obj.insert(QString("serviceGroups"), ::OpenAPI::toJsonValue(m_service_groups));
    }
    if (m_simple_admins.size() > 0) {
        obj.insert(QString("simpleAdmins"), ::OpenAPI::toJsonValue(m_simple_admins));
    }
    if (m_stats.isSet()) {
        obj.insert(QString("stats"), ::OpenAPI::toJsonValue(m_stats));
    }
    return obj;
}

QList<OAIImportExport_admins_inner> OAIImportExport::getAdmins() const {
    return m_admins;
}
void OAIImportExport::setAdmins(const QList<OAIImportExport_admins_inner> &admins) {
    m_admins = admins;
    m_admins_isSet = true;
}

bool OAIImportExport::is_admins_Set() const{
    return m_admins_isSet;
}

bool OAIImportExport::is_admins_Valid() const{
    return m_admins_isValid;
}

QList<OAIImportExport_apiKeys_inner> OAIImportExport::getApiKeys() const {
    return m_api_keys;
}
void OAIImportExport::setApiKeys(const QList<OAIImportExport_apiKeys_inner> &api_keys) {
    m_api_keys = api_keys;
    m_api_keys_isSet = true;
}

bool OAIImportExport::is_api_keys_Set() const{
    return m_api_keys_isSet;
}

bool OAIImportExport::is_api_keys_Valid() const{
    return m_api_keys_isValid;
}

QMap<QString, QString> OAIImportExport::getAppConfig() const {
    return m_app_config;
}
void OAIImportExport::setAppConfig(const QMap<QString, QString> &app_config) {
    m_app_config = app_config;
    m_app_config_isSet = true;
}

bool OAIImportExport::is_app_config_Set() const{
    return m_app_config_isSet;
}

bool OAIImportExport::is_app_config_Valid() const{
    return m_app_config_isValid;
}

OAIGlobalConfig OAIImportExport::getConfig() const {
    return m_config;
}
void OAIImportExport::setConfig(const OAIGlobalConfig &config) {
    m_config = config;
    m_config_isSet = true;
}

bool OAIImportExport::is_config_Set() const{
    return m_config_isSet;
}

bool OAIImportExport::is_config_Valid() const{
    return m_config_isValid;
}

QDateTime OAIImportExport::getDate() const {
    return m_date;
}
void OAIImportExport::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIImportExport::is_date_Set() const{
    return m_date_isSet;
}

bool OAIImportExport::is_date_Valid() const{
    return m_date_isValid;
}

qint64 OAIImportExport::getDateRaw() const {
    return m_date_raw;
}
void OAIImportExport::setDateRaw(const qint64 &date_raw) {
    m_date_raw = date_raw;
    m_date_raw_isSet = true;
}

bool OAIImportExport::is_date_raw_Set() const{
    return m_date_raw_isSet;
}

bool OAIImportExport::is_date_raw_Valid() const{
    return m_date_raw_isValid;
}

QList<OAIImportExport_errorTemplates_inner> OAIImportExport::getErrorTemplates() const {
    return m_error_templates;
}
void OAIImportExport::setErrorTemplates(const QList<OAIImportExport_errorTemplates_inner> &error_templates) {
    m_error_templates = error_templates;
    m_error_templates_isSet = true;
}

bool OAIImportExport::is_error_templates_Set() const{
    return m_error_templates_isSet;
}

bool OAIImportExport::is_error_templates_Valid() const{
    return m_error_templates_isValid;
}

QString OAIImportExport::getLabel() const {
    return m_label;
}
void OAIImportExport::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIImportExport::is_label_Set() const{
    return m_label_isSet;
}

bool OAIImportExport::is_label_Valid() const{
    return m_label_isValid;
}

QList<OAIImportExport_serviceDescriptors_inner> OAIImportExport::getServiceDescriptors() const {
    return m_service_descriptors;
}
void OAIImportExport::setServiceDescriptors(const QList<OAIImportExport_serviceDescriptors_inner> &service_descriptors) {
    m_service_descriptors = service_descriptors;
    m_service_descriptors_isSet = true;
}

bool OAIImportExport::is_service_descriptors_Set() const{
    return m_service_descriptors_isSet;
}

bool OAIImportExport::is_service_descriptors_Valid() const{
    return m_service_descriptors_isValid;
}

QList<OAIImportExport_serviceGroups_inner> OAIImportExport::getServiceGroups() const {
    return m_service_groups;
}
void OAIImportExport::setServiceGroups(const QList<OAIImportExport_serviceGroups_inner> &service_groups) {
    m_service_groups = service_groups;
    m_service_groups_isSet = true;
}

bool OAIImportExport::is_service_groups_Set() const{
    return m_service_groups_isSet;
}

bool OAIImportExport::is_service_groups_Valid() const{
    return m_service_groups_isValid;
}

QList<OAIImportExport_simpleAdmins_inner> OAIImportExport::getSimpleAdmins() const {
    return m_simple_admins;
}
void OAIImportExport::setSimpleAdmins(const QList<OAIImportExport_simpleAdmins_inner> &simple_admins) {
    m_simple_admins = simple_admins;
    m_simple_admins_isSet = true;
}

bool OAIImportExport::is_simple_admins_Set() const{
    return m_simple_admins_isSet;
}

bool OAIImportExport::is_simple_admins_Valid() const{
    return m_simple_admins_isValid;
}

OAIImportExportStats OAIImportExport::getStats() const {
    return m_stats;
}
void OAIImportExport::setStats(const OAIImportExportStats &stats) {
    m_stats = stats;
    m_stats_isSet = true;
}

bool OAIImportExport::is_stats_Set() const{
    return m_stats_isSet;
}

bool OAIImportExport::is_stats_Valid() const{
    return m_stats_isValid;
}

bool OAIImportExport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_admins.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_keys.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_config.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_raw_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_templates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_descriptors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_simple_admins.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_stats.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImportExport::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_admins_isValid && m_api_keys_isValid && m_config_isValid && m_date_isValid && m_date_raw_isValid && m_error_templates_isValid && m_label_isValid && m_service_descriptors_isValid && m_service_groups_isValid && m_simple_admins_isValid && m_stats_isValid && true;
}

} // namespace OpenAPI
