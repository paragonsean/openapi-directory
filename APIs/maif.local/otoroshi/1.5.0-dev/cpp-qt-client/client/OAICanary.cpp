/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICanary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICanary::OAICanary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICanary::OAICanary() {
    this->initializeModel();
}

OAICanary::~OAICanary() {}

void OAICanary::initializeModel() {

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_root_isSet = false;
    m_root_isValid = false;

    m_targets_isSet = false;
    m_targets_isValid = false;

    m_traffic_isSet = false;
    m_traffic_isValid = false;
}

void OAICanary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICanary::fromJsonObject(QJsonObject json) {

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_root_isValid = ::OpenAPI::fromJsonValue(m_root, json[QString("root")]);
    m_root_isSet = !json[QString("root")].isNull() && m_root_isValid;

    m_targets_isValid = ::OpenAPI::fromJsonValue(m_targets, json[QString("targets")]);
    m_targets_isSet = !json[QString("targets")].isNull() && m_targets_isValid;

    m_traffic_isValid = ::OpenAPI::fromJsonValue(m_traffic, json[QString("traffic")]);
    m_traffic_isSet = !json[QString("traffic")].isNull() && m_traffic_isValid;
}

QString OAICanary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICanary::asJsonObject() const {
    QJsonObject obj;
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_root_isSet) {
        obj.insert(QString("root"), ::OpenAPI::toJsonValue(m_root));
    }
    if (m_targets.size() > 0) {
        obj.insert(QString("targets"), ::OpenAPI::toJsonValue(m_targets));
    }
    if (m_traffic_isSet) {
        obj.insert(QString("traffic"), ::OpenAPI::toJsonValue(m_traffic));
    }
    return obj;
}

bool OAICanary::isEnabled() const {
    return m_enabled;
}
void OAICanary::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAICanary::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAICanary::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAICanary::getRoot() const {
    return m_root;
}
void OAICanary::setRoot(const QString &root) {
    m_root = root;
    m_root_isSet = true;
}

bool OAICanary::is_root_Set() const{
    return m_root_isSet;
}

bool OAICanary::is_root_Valid() const{
    return m_root_isValid;
}

QList<OAITarget> OAICanary::getTargets() const {
    return m_targets;
}
void OAICanary::setTargets(const QList<OAITarget> &targets) {
    m_targets = targets;
    m_targets_isSet = true;
}

bool OAICanary::is_targets_Set() const{
    return m_targets_isSet;
}

bool OAICanary::is_targets_Valid() const{
    return m_targets_isValid;
}

qint32 OAICanary::getTraffic() const {
    return m_traffic;
}
void OAICanary::setTraffic(const qint32 &traffic) {
    m_traffic = traffic;
    m_traffic_isSet = true;
}

bool OAICanary::is_traffic_Set() const{
    return m_traffic_isSet;
}

bool OAICanary::is_traffic_Valid() const{
    return m_traffic_isValid;
}

bool OAICanary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_targets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_traffic_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICanary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_enabled_isValid && m_root_isValid && m_targets_isValid && m_traffic_isValid && true;
}

} // namespace OpenAPI
