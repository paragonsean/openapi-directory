/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIpFiltering.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIpFiltering::OAIIpFiltering(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIpFiltering::OAIIpFiltering() {
    this->initializeModel();
}

OAIIpFiltering::~OAIIpFiltering() {}

void OAIIpFiltering::initializeModel() {

    m_blacklist_isSet = false;
    m_blacklist_isValid = false;

    m_whitelist_isSet = false;
    m_whitelist_isValid = false;
}

void OAIIpFiltering::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIpFiltering::fromJsonObject(QJsonObject json) {

    m_blacklist_isValid = ::OpenAPI::fromJsonValue(m_blacklist, json[QString("blacklist")]);
    m_blacklist_isSet = !json[QString("blacklist")].isNull() && m_blacklist_isValid;

    m_whitelist_isValid = ::OpenAPI::fromJsonValue(m_whitelist, json[QString("whitelist")]);
    m_whitelist_isSet = !json[QString("whitelist")].isNull() && m_whitelist_isValid;
}

QString OAIIpFiltering::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIpFiltering::asJsonObject() const {
    QJsonObject obj;
    if (m_blacklist.size() > 0) {
        obj.insert(QString("blacklist"), ::OpenAPI::toJsonValue(m_blacklist));
    }
    if (m_whitelist.size() > 0) {
        obj.insert(QString("whitelist"), ::OpenAPI::toJsonValue(m_whitelist));
    }
    return obj;
}

QList<QString> OAIIpFiltering::getBlacklist() const {
    return m_blacklist;
}
void OAIIpFiltering::setBlacklist(const QList<QString> &blacklist) {
    m_blacklist = blacklist;
    m_blacklist_isSet = true;
}

bool OAIIpFiltering::is_blacklist_Set() const{
    return m_blacklist_isSet;
}

bool OAIIpFiltering::is_blacklist_Valid() const{
    return m_blacklist_isValid;
}

QList<QString> OAIIpFiltering::getWhitelist() const {
    return m_whitelist;
}
void OAIIpFiltering::setWhitelist(const QList<QString> &whitelist) {
    m_whitelist = whitelist;
    m_whitelist_isSet = true;
}

bool OAIIpFiltering::is_whitelist_Set() const{
    return m_whitelist_isSet;
}

bool OAIIpFiltering::is_whitelist_Valid() const{
    return m_whitelist_isValid;
}

bool OAIIpFiltering::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_blacklist.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_whitelist.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIpFiltering::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_blacklist_isValid && m_whitelist_isValid && true;
}

} // namespace OpenAPI
