/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICorsSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICorsSettings::OAICorsSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICorsSettings::OAICorsSettings() {
    this->initializeModel();
}

OAICorsSettings::~OAICorsSettings() {}

void OAICorsSettings::initializeModel() {

    m_allow_credentials_isSet = false;
    m_allow_credentials_isValid = false;

    m_allow_headers_isSet = false;
    m_allow_headers_isValid = false;

    m_allow_methods_isSet = false;
    m_allow_methods_isValid = false;

    m_allow_origin_isSet = false;
    m_allow_origin_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_excluded_patterns_isSet = false;
    m_excluded_patterns_isValid = false;

    m_expose_headers_isSet = false;
    m_expose_headers_isValid = false;

    m_max_age_isSet = false;
    m_max_age_isValid = false;
}

void OAICorsSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICorsSettings::fromJsonObject(QJsonObject json) {

    m_allow_credentials_isValid = ::OpenAPI::fromJsonValue(m_allow_credentials, json[QString("allowCredentials")]);
    m_allow_credentials_isSet = !json[QString("allowCredentials")].isNull() && m_allow_credentials_isValid;

    m_allow_headers_isValid = ::OpenAPI::fromJsonValue(m_allow_headers, json[QString("allowHeaders")]);
    m_allow_headers_isSet = !json[QString("allowHeaders")].isNull() && m_allow_headers_isValid;

    m_allow_methods_isValid = ::OpenAPI::fromJsonValue(m_allow_methods, json[QString("allowMethods")]);
    m_allow_methods_isSet = !json[QString("allowMethods")].isNull() && m_allow_methods_isValid;

    m_allow_origin_isValid = ::OpenAPI::fromJsonValue(m_allow_origin, json[QString("allowOrigin")]);
    m_allow_origin_isSet = !json[QString("allowOrigin")].isNull() && m_allow_origin_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_excluded_patterns_isValid = ::OpenAPI::fromJsonValue(m_excluded_patterns, json[QString("excludedPatterns")]);
    m_excluded_patterns_isSet = !json[QString("excludedPatterns")].isNull() && m_excluded_patterns_isValid;

    m_expose_headers_isValid = ::OpenAPI::fromJsonValue(m_expose_headers, json[QString("exposeHeaders")]);
    m_expose_headers_isSet = !json[QString("exposeHeaders")].isNull() && m_expose_headers_isValid;

    m_max_age_isValid = ::OpenAPI::fromJsonValue(m_max_age, json[QString("maxAge")]);
    m_max_age_isSet = !json[QString("maxAge")].isNull() && m_max_age_isValid;
}

QString OAICorsSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICorsSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_credentials_isSet) {
        obj.insert(QString("allowCredentials"), ::OpenAPI::toJsonValue(m_allow_credentials));
    }
    if (m_allow_headers.size() > 0) {
        obj.insert(QString("allowHeaders"), ::OpenAPI::toJsonValue(m_allow_headers));
    }
    if (m_allow_methods.size() > 0) {
        obj.insert(QString("allowMethods"), ::OpenAPI::toJsonValue(m_allow_methods));
    }
    if (m_allow_origin_isSet) {
        obj.insert(QString("allowOrigin"), ::OpenAPI::toJsonValue(m_allow_origin));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_excluded_patterns.size() > 0) {
        obj.insert(QString("excludedPatterns"), ::OpenAPI::toJsonValue(m_excluded_patterns));
    }
    if (m_expose_headers.size() > 0) {
        obj.insert(QString("exposeHeaders"), ::OpenAPI::toJsonValue(m_expose_headers));
    }
    if (m_max_age_isSet) {
        obj.insert(QString("maxAge"), ::OpenAPI::toJsonValue(m_max_age));
    }
    return obj;
}

bool OAICorsSettings::isAllowCredentials() const {
    return m_allow_credentials;
}
void OAICorsSettings::setAllowCredentials(const bool &allow_credentials) {
    m_allow_credentials = allow_credentials;
    m_allow_credentials_isSet = true;
}

bool OAICorsSettings::is_allow_credentials_Set() const{
    return m_allow_credentials_isSet;
}

bool OAICorsSettings::is_allow_credentials_Valid() const{
    return m_allow_credentials_isValid;
}

QList<QString> OAICorsSettings::getAllowHeaders() const {
    return m_allow_headers;
}
void OAICorsSettings::setAllowHeaders(const QList<QString> &allow_headers) {
    m_allow_headers = allow_headers;
    m_allow_headers_isSet = true;
}

bool OAICorsSettings::is_allow_headers_Set() const{
    return m_allow_headers_isSet;
}

bool OAICorsSettings::is_allow_headers_Valid() const{
    return m_allow_headers_isValid;
}

QList<QString> OAICorsSettings::getAllowMethods() const {
    return m_allow_methods;
}
void OAICorsSettings::setAllowMethods(const QList<QString> &allow_methods) {
    m_allow_methods = allow_methods;
    m_allow_methods_isSet = true;
}

bool OAICorsSettings::is_allow_methods_Set() const{
    return m_allow_methods_isSet;
}

bool OAICorsSettings::is_allow_methods_Valid() const{
    return m_allow_methods_isValid;
}

QString OAICorsSettings::getAllowOrigin() const {
    return m_allow_origin;
}
void OAICorsSettings::setAllowOrigin(const QString &allow_origin) {
    m_allow_origin = allow_origin;
    m_allow_origin_isSet = true;
}

bool OAICorsSettings::is_allow_origin_Set() const{
    return m_allow_origin_isSet;
}

bool OAICorsSettings::is_allow_origin_Valid() const{
    return m_allow_origin_isValid;
}

bool OAICorsSettings::isEnabled() const {
    return m_enabled;
}
void OAICorsSettings::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAICorsSettings::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAICorsSettings::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QList<QString> OAICorsSettings::getExcludedPatterns() const {
    return m_excluded_patterns;
}
void OAICorsSettings::setExcludedPatterns(const QList<QString> &excluded_patterns) {
    m_excluded_patterns = excluded_patterns;
    m_excluded_patterns_isSet = true;
}

bool OAICorsSettings::is_excluded_patterns_Set() const{
    return m_excluded_patterns_isSet;
}

bool OAICorsSettings::is_excluded_patterns_Valid() const{
    return m_excluded_patterns_isValid;
}

QList<QString> OAICorsSettings::getExposeHeaders() const {
    return m_expose_headers;
}
void OAICorsSettings::setExposeHeaders(const QList<QString> &expose_headers) {
    m_expose_headers = expose_headers;
    m_expose_headers_isSet = true;
}

bool OAICorsSettings::is_expose_headers_Set() const{
    return m_expose_headers_isSet;
}

bool OAICorsSettings::is_expose_headers_Valid() const{
    return m_expose_headers_isValid;
}

qint32 OAICorsSettings::getMaxAge() const {
    return m_max_age;
}
void OAICorsSettings::setMaxAge(const qint32 &max_age) {
    m_max_age = max_age;
    m_max_age_isSet = true;
}

bool OAICorsSettings::is_max_age_Set() const{
    return m_max_age_isSet;
}

bool OAICorsSettings::is_max_age_Valid() const{
    return m_max_age_isValid;
}

bool OAICorsSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_credentials_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_methods.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_origin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_excluded_patterns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_expose_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_age_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICorsSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_allow_credentials_isValid && m_allow_headers_isValid && m_allow_methods_isValid && m_allow_origin_isValid && m_enabled_isValid && m_excluded_patterns_isValid && m_expose_headers_isValid && m_max_age_isValid && true;
}

} // namespace OpenAPI
