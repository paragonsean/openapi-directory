/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICertificate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICertificate::OAICertificate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICertificate::OAICertificate() {
    this->initializeModel();
}

OAICertificate::~OAICertificate() {}

void OAICertificate::initializeModel() {

    m_auto_renew_isSet = false;
    m_auto_renew_isValid = false;

    m_ca_isSet = false;
    m_ca_isValid = false;

    m_ca_ref_isSet = false;
    m_ca_ref_isValid = false;

    m_chain_isSet = false;
    m_chain_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_private_key_isSet = false;
    m_private_key_isValid = false;

    m_self_signed_isSet = false;
    m_self_signed_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;

    m_r_valid_isSet = false;
    m_r_valid_isValid = false;
}

void OAICertificate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICertificate::fromJsonObject(QJsonObject json) {

    m_auto_renew_isValid = ::OpenAPI::fromJsonValue(m_auto_renew, json[QString("autoRenew")]);
    m_auto_renew_isSet = !json[QString("autoRenew")].isNull() && m_auto_renew_isValid;

    m_ca_isValid = ::OpenAPI::fromJsonValue(m_ca, json[QString("ca")]);
    m_ca_isSet = !json[QString("ca")].isNull() && m_ca_isValid;

    m_ca_ref_isValid = ::OpenAPI::fromJsonValue(m_ca_ref, json[QString("caRef")]);
    m_ca_ref_isSet = !json[QString("caRef")].isNull() && m_ca_ref_isValid;

    m_chain_isValid = ::OpenAPI::fromJsonValue(m_chain, json[QString("chain")]);
    m_chain_isSet = !json[QString("chain")].isNull() && m_chain_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_private_key_isValid = ::OpenAPI::fromJsonValue(m_private_key, json[QString("privateKey")]);
    m_private_key_isSet = !json[QString("privateKey")].isNull() && m_private_key_isValid;

    m_self_signed_isValid = ::OpenAPI::fromJsonValue(m_self_signed, json[QString("selfSigned")]);
    m_self_signed_isSet = !json[QString("selfSigned")].isNull() && m_self_signed_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;

    m_r_valid_isValid = ::OpenAPI::fromJsonValue(m_r_valid, json[QString("valid")]);
    m_r_valid_isSet = !json[QString("valid")].isNull() && m_r_valid_isValid;
}

QString OAICertificate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICertificate::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_renew_isSet) {
        obj.insert(QString("autoRenew"), ::OpenAPI::toJsonValue(m_auto_renew));
    }
    if (m_ca_isSet) {
        obj.insert(QString("ca"), ::OpenAPI::toJsonValue(m_ca));
    }
    if (m_ca_ref_isSet) {
        obj.insert(QString("caRef"), ::OpenAPI::toJsonValue(m_ca_ref));
    }
    if (m_chain_isSet) {
        obj.insert(QString("chain"), ::OpenAPI::toJsonValue(m_chain));
    }
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_private_key_isSet) {
        obj.insert(QString("privateKey"), ::OpenAPI::toJsonValue(m_private_key));
    }
    if (m_self_signed_isSet) {
        obj.insert(QString("selfSigned"), ::OpenAPI::toJsonValue(m_self_signed));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    if (m_r_valid_isSet) {
        obj.insert(QString("valid"), ::OpenAPI::toJsonValue(m_r_valid));
    }
    return obj;
}

QString OAICertificate::getAutoRenew() const {
    return m_auto_renew;
}
void OAICertificate::setAutoRenew(const QString &auto_renew) {
    m_auto_renew = auto_renew;
    m_auto_renew_isSet = true;
}

bool OAICertificate::is_auto_renew_Set() const{
    return m_auto_renew_isSet;
}

bool OAICertificate::is_auto_renew_Valid() const{
    return m_auto_renew_isValid;
}

QString OAICertificate::getCa() const {
    return m_ca;
}
void OAICertificate::setCa(const QString &ca) {
    m_ca = ca;
    m_ca_isSet = true;
}

bool OAICertificate::is_ca_Set() const{
    return m_ca_isSet;
}

bool OAICertificate::is_ca_Valid() const{
    return m_ca_isValid;
}

QString OAICertificate::getCaRef() const {
    return m_ca_ref;
}
void OAICertificate::setCaRef(const QString &ca_ref) {
    m_ca_ref = ca_ref;
    m_ca_ref_isSet = true;
}

bool OAICertificate::is_ca_ref_Set() const{
    return m_ca_ref_isSet;
}

bool OAICertificate::is_ca_ref_Valid() const{
    return m_ca_ref_isValid;
}

QString OAICertificate::getChain() const {
    return m_chain;
}
void OAICertificate::setChain(const QString &chain) {
    m_chain = chain;
    m_chain_isSet = true;
}

bool OAICertificate::is_chain_Set() const{
    return m_chain_isSet;
}

bool OAICertificate::is_chain_Valid() const{
    return m_chain_isValid;
}

QString OAICertificate::getDomain() const {
    return m_domain;
}
void OAICertificate::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAICertificate::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAICertificate::is_domain_Valid() const{
    return m_domain_isValid;
}

QString OAICertificate::getFrom() const {
    return m_from;
}
void OAICertificate::setFrom(const QString &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAICertificate::is_from_Set() const{
    return m_from_isSet;
}

bool OAICertificate::is_from_Valid() const{
    return m_from_isValid;
}

QString OAICertificate::getId() const {
    return m_id;
}
void OAICertificate::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICertificate::is_id_Set() const{
    return m_id_isSet;
}

bool OAICertificate::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICertificate::getPrivateKey() const {
    return m_private_key;
}
void OAICertificate::setPrivateKey(const QString &private_key) {
    m_private_key = private_key;
    m_private_key_isSet = true;
}

bool OAICertificate::is_private_key_Set() const{
    return m_private_key_isSet;
}

bool OAICertificate::is_private_key_Valid() const{
    return m_private_key_isValid;
}

QString OAICertificate::getSelfSigned() const {
    return m_self_signed;
}
void OAICertificate::setSelfSigned(const QString &self_signed) {
    m_self_signed = self_signed;
    m_self_signed_isSet = true;
}

bool OAICertificate::is_self_signed_Set() const{
    return m_self_signed_isSet;
}

bool OAICertificate::is_self_signed_Valid() const{
    return m_self_signed_isValid;
}

QString OAICertificate::getSubject() const {
    return m_subject;
}
void OAICertificate::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAICertificate::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAICertificate::is_subject_Valid() const{
    return m_subject_isValid;
}

QString OAICertificate::getTo() const {
    return m_to;
}
void OAICertificate::setTo(const QString &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAICertificate::is_to_Set() const{
    return m_to_isSet;
}

bool OAICertificate::is_to_Valid() const{
    return m_to_isValid;
}

QString OAICertificate::getRValid() const {
    return m_r_valid;
}
void OAICertificate::setRValid(const QString &r_valid) {
    m_r_valid = r_valid;
    m_r_valid_isSet = true;
}

bool OAICertificate::is_r_valid_Set() const{
    return m_r_valid_isSet;
}

bool OAICertificate::is_r_valid_Valid() const{
    return m_r_valid_isValid;
}

bool OAICertificate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_renew_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ca_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ca_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_signed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_valid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICertificate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_auto_renew_isValid && m_ca_isValid && m_ca_ref_isValid && m_chain_isValid && m_domain_isValid && m_from_isValid && m_id_isValid && m_private_key_isValid && m_self_signed_isValid && m_subject_isValid && m_to_isValid && m_r_valid_isValid && true;
}

} // namespace OpenAPI
