/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIElasticConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIElasticConfig::OAIElasticConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIElasticConfig::OAIElasticConfig() {
    this->initializeModel();
}

OAIElasticConfig::~OAIElasticConfig() {}

void OAIElasticConfig::initializeModel() {

    m_cluster_uri_isSet = false;
    m_cluster_uri_isValid = false;

    m_headers_isSet = false;
    m_headers_isValid = false;

    m_index_isSet = false;
    m_index_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIElasticConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIElasticConfig::fromJsonObject(QJsonObject json) {

    m_cluster_uri_isValid = ::OpenAPI::fromJsonValue(m_cluster_uri, json[QString("clusterUri")]);
    m_cluster_uri_isSet = !json[QString("clusterUri")].isNull() && m_cluster_uri_isValid;

    m_headers_isValid = ::OpenAPI::fromJsonValue(m_headers, json[QString("headers")]);
    m_headers_isSet = !json[QString("headers")].isNull() && m_headers_isValid;

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIElasticConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIElasticConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_uri_isSet) {
        obj.insert(QString("clusterUri"), ::OpenAPI::toJsonValue(m_cluster_uri));
    }
    if (m_headers.size() > 0) {
        obj.insert(QString("headers"), ::OpenAPI::toJsonValue(m_headers));
    }
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_user_isSet) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QString OAIElasticConfig::getClusterUri() const {
    return m_cluster_uri;
}
void OAIElasticConfig::setClusterUri(const QString &cluster_uri) {
    m_cluster_uri = cluster_uri;
    m_cluster_uri_isSet = true;
}

bool OAIElasticConfig::is_cluster_uri_Set() const{
    return m_cluster_uri_isSet;
}

bool OAIElasticConfig::is_cluster_uri_Valid() const{
    return m_cluster_uri_isValid;
}

QMap<QString, QString> OAIElasticConfig::getHeaders() const {
    return m_headers;
}
void OAIElasticConfig::setHeaders(const QMap<QString, QString> &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAIElasticConfig::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAIElasticConfig::is_headers_Valid() const{
    return m_headers_isValid;
}

QString OAIElasticConfig::getIndex() const {
    return m_index;
}
void OAIElasticConfig::setIndex(const QString &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAIElasticConfig::is_index_Set() const{
    return m_index_isSet;
}

bool OAIElasticConfig::is_index_Valid() const{
    return m_index_isValid;
}

QString OAIElasticConfig::getPassword() const {
    return m_password;
}
void OAIElasticConfig::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIElasticConfig::is_password_Set() const{
    return m_password_isSet;
}

bool OAIElasticConfig::is_password_Valid() const{
    return m_password_isValid;
}

QString OAIElasticConfig::getType() const {
    return m_type;
}
void OAIElasticConfig::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIElasticConfig::is_type_Set() const{
    return m_type_isSet;
}

bool OAIElasticConfig::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIElasticConfig::getUser() const {
    return m_user;
}
void OAIElasticConfig::setUser(const QString &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIElasticConfig::is_user_Set() const{
    return m_user_isSet;
}

bool OAIElasticConfig::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIElasticConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIElasticConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cluster_uri_isValid && m_headers_isValid && m_index_isValid && m_password_isValid && m_type_isValid && m_user_isValid && true;
}

} // namespace OpenAPI
