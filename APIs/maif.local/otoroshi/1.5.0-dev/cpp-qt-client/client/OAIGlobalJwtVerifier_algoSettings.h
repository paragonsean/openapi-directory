/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGlobalJwtVerifier_algoSettings.h
 *
 * 
 */

#ifndef OAIGlobalJwtVerifier_algoSettings_H
#define OAIGlobalJwtVerifier_algoSettings_H

#include <QJsonObject>

#include "OAIESAlgoSettings.h"
#include "OAIHSAlgoSettings.h"
#include "OAIJWKSAlgoSettings.h"
#include "OAIRSAlgoSettings.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGlobalJwtVerifier_algoSettings : public OAIObject {
public:
    OAIGlobalJwtVerifier_algoSettings();
    OAIGlobalJwtVerifier_algoSettings(QString json);
    ~OAIGlobalJwtVerifier_algoSettings() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getSecret() const;
    void setSecret(const QString &secret);
    bool is_secret_Set() const;
    bool is_secret_Valid() const;

    qint32 getSize() const;
    void setSize(const qint32 &size);
    bool is_size_Set() const;
    bool is_size_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getPrivateKey() const;
    void setPrivateKey(const QString &private_key);
    bool is_private_key_Set() const;
    bool is_private_key_Valid() const;

    QString getPublicKey() const;
    void setPublicKey(const QString &public_key);
    bool is_public_key_Set() const;
    bool is_public_key_Valid() const;

    QMap<QString, QString> getHeaders() const;
    void setHeaders(const QMap<QString, QString> &headers);
    bool is_headers_Set() const;
    bool is_headers_Valid() const;

    QString getKty() const;
    void setKty(const QString &kty);
    bool is_kty_Set() const;
    bool is_kty_Valid() const;

    qint64 getTimeout() const;
    void setTimeout(const qint64 &timeout);
    bool is_timeout_Set() const;
    bool is_timeout_Valid() const;

    qint64 getTtl() const;
    void setTtl(const qint64 &ttl);
    bool is_ttl_Set() const;
    bool is_ttl_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_secret;
    bool m_secret_isSet;
    bool m_secret_isValid;

    qint32 m_size;
    bool m_size_isSet;
    bool m_size_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_private_key;
    bool m_private_key_isSet;
    bool m_private_key_isValid;

    QString m_public_key;
    bool m_public_key_isSet;
    bool m_public_key_isValid;

    QMap<QString, QString> m_headers;
    bool m_headers_isSet;
    bool m_headers_isValid;

    QString m_kty;
    bool m_kty_isSet;
    bool m_kty_isValid;

    qint64 m_timeout;
    bool m_timeout_isSet;
    bool m_timeout_isValid;

    qint64 m_ttl;
    bool m_ttl_isSet;
    bool m_ttl_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGlobalJwtVerifier_algoSettings)

#endif // OAIGlobalJwtVerifier_algoSettings_H
