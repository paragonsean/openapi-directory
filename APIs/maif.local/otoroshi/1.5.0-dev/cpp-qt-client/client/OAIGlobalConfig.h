/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGlobalConfig.h
 *
 * The global config object of Otoroshi, used to customize settings of the current Otoroshi instance
 */

#ifndef OAIGlobalConfig_H
#define OAIGlobalConfig_H

#include <QJsonObject>

#include "OAIAuth0Config.h"
#include "OAICleverSettings.h"
#include "OAIElasticConfig.h"
#include "OAIIpFiltering.h"
#include "OAIMailerSettings.h"
#include "OAIWebhook.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIWebhook;
class OAIAuth0Config;
class OAICleverSettings;
class OAIElasticConfig;
class OAIIpFiltering;
class OAIMailerSettings;

class OAIGlobalConfig : public OAIObject {
public:
    OAIGlobalConfig();
    OAIGlobalConfig(QString json);
    ~OAIGlobalConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getAlertsEmails() const;
    void setAlertsEmails(const QList<QString> &alerts_emails);
    bool is_alerts_emails_Set() const;
    bool is_alerts_emails_Valid() const;

    QList<OAIWebhook> getAlertsWebhooks() const;
    void setAlertsWebhooks(const QList<OAIWebhook> &alerts_webhooks);
    bool is_alerts_webhooks_Set() const;
    bool is_alerts_webhooks_Valid() const;

    QList<OAIWebhook> getAnalyticsWebhooks() const;
    void setAnalyticsWebhooks(const QList<OAIWebhook> &analytics_webhooks);
    bool is_analytics_webhooks_Set() const;
    bool is_analytics_webhooks_Valid() const;

    bool isApiReadOnly() const;
    void setApiReadOnly(const bool &api_read_only);
    bool is_api_read_only_Set() const;
    bool is_api_read_only_Valid() const;

    bool isAutoLinkToDefaultGroup() const;
    void setAutoLinkToDefaultGroup(const bool &auto_link_to_default_group);
    bool is_auto_link_to_default_group_Set() const;
    bool is_auto_link_to_default_group_Valid() const;

    OAIAuth0Config getBackofficeAuth0Config() const;
    void setBackofficeAuth0Config(const OAIAuth0Config &backoffice_auth0_config);
    bool is_backoffice_auth0_config_Set() const;
    bool is_backoffice_auth0_config_Valid() const;

    OAICleverSettings getCleverSettings() const;
    void setCleverSettings(const OAICleverSettings &clever_settings);
    bool is_clever_settings_Set() const;
    bool is_clever_settings_Valid() const;

    OAIElasticConfig getElasticReadsConfig() const;
    void setElasticReadsConfig(const OAIElasticConfig &elastic_reads_config);
    bool is_elastic_reads_config_Set() const;
    bool is_elastic_reads_config_Valid() const;

    QList<OAIElasticConfig> getElasticWritesConfigs() const;
    void setElasticWritesConfigs(const QList<OAIElasticConfig> &elastic_writes_configs);
    bool is_elastic_writes_configs_Set() const;
    bool is_elastic_writes_configs_Valid() const;

    QList<QString> getEndlessIpAddresses() const;
    void setEndlessIpAddresses(const QList<QString> &endless_ip_addresses);
    bool is_endless_ip_addresses_Set() const;
    bool is_endless_ip_addresses_Valid() const;

    OAIIpFiltering getIpFiltering() const;
    void setIpFiltering(const OAIIpFiltering &ip_filtering);
    bool is_ip_filtering_Set() const;
    bool is_ip_filtering_Valid() const;

    bool isLimitConcurrentRequests() const;
    void setLimitConcurrentRequests(const bool &limit_concurrent_requests);
    bool is_limit_concurrent_requests_Set() const;
    bool is_limit_concurrent_requests_Valid() const;

    QList<QString> getLines() const;
    void setLines(const QList<QString> &lines);
    bool is_lines_Set() const;
    bool is_lines_Valid() const;

    OAIMailerSettings getMailerSettings() const;
    void setMailerSettings(const OAIMailerSettings &mailer_settings);
    bool is_mailer_settings_Set() const;
    bool is_mailer_settings_Valid() const;

    qint64 getMaxConcurrentRequests() const;
    void setMaxConcurrentRequests(const qint64 &max_concurrent_requests);
    bool is_max_concurrent_requests_Set() const;
    bool is_max_concurrent_requests_Valid() const;

    qint64 getMaxHttp10ResponseSize() const;
    void setMaxHttp10ResponseSize(const qint64 &max_http10_response_size);
    bool is_max_http10_response_size_Set() const;
    bool is_max_http10_response_size_Valid() const;

    qint32 getMaxLogsSize() const;
    void setMaxLogsSize(const qint32 &max_logs_size);
    bool is_max_logs_size_Set() const;
    bool is_max_logs_size_Valid() const;

    bool isMiddleFingers() const;
    void setMiddleFingers(const bool &middle_fingers);
    bool is_middle_fingers_Set() const;
    bool is_middle_fingers_Valid() const;

    qint64 getPerIpThrottlingQuota() const;
    void setPerIpThrottlingQuota(const qint64 &per_ip_throttling_quota);
    bool is_per_ip_throttling_quota_Set() const;
    bool is_per_ip_throttling_quota_Valid() const;

    OAIAuth0Config getPrivateAppsAuth0Config() const;
    void setPrivateAppsAuth0Config(const OAIAuth0Config &private_apps_auth0_config);
    bool is_private_apps_auth0_config_Set() const;
    bool is_private_apps_auth0_config_Valid() const;

    bool isStreamEntityOnly() const;
    void setStreamEntityOnly(const bool &stream_entity_only);
    bool is_stream_entity_only_Set() const;
    bool is_stream_entity_only_Valid() const;

    qint64 getThrottlingQuota() const;
    void setThrottlingQuota(const qint64 &throttling_quota);
    bool is_throttling_quota_Set() const;
    bool is_throttling_quota_Valid() const;

    bool isU2fLoginOnly() const;
    void setU2fLoginOnly(const bool &u2f_login_only);
    bool is_u2f_login_only_Set() const;
    bool is_u2f_login_only_Valid() const;

    bool isUseCircuitBreakers() const;
    void setUseCircuitBreakers(const bool &use_circuit_breakers);
    bool is_use_circuit_breakers_Set() const;
    bool is_use_circuit_breakers_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_alerts_emails;
    bool m_alerts_emails_isSet;
    bool m_alerts_emails_isValid;

    QList<OAIWebhook> m_alerts_webhooks;
    bool m_alerts_webhooks_isSet;
    bool m_alerts_webhooks_isValid;

    QList<OAIWebhook> m_analytics_webhooks;
    bool m_analytics_webhooks_isSet;
    bool m_analytics_webhooks_isValid;

    bool m_api_read_only;
    bool m_api_read_only_isSet;
    bool m_api_read_only_isValid;

    bool m_auto_link_to_default_group;
    bool m_auto_link_to_default_group_isSet;
    bool m_auto_link_to_default_group_isValid;

    OAIAuth0Config m_backoffice_auth0_config;
    bool m_backoffice_auth0_config_isSet;
    bool m_backoffice_auth0_config_isValid;

    OAICleverSettings m_clever_settings;
    bool m_clever_settings_isSet;
    bool m_clever_settings_isValid;

    OAIElasticConfig m_elastic_reads_config;
    bool m_elastic_reads_config_isSet;
    bool m_elastic_reads_config_isValid;

    QList<OAIElasticConfig> m_elastic_writes_configs;
    bool m_elastic_writes_configs_isSet;
    bool m_elastic_writes_configs_isValid;

    QList<QString> m_endless_ip_addresses;
    bool m_endless_ip_addresses_isSet;
    bool m_endless_ip_addresses_isValid;

    OAIIpFiltering m_ip_filtering;
    bool m_ip_filtering_isSet;
    bool m_ip_filtering_isValid;

    bool m_limit_concurrent_requests;
    bool m_limit_concurrent_requests_isSet;
    bool m_limit_concurrent_requests_isValid;

    QList<QString> m_lines;
    bool m_lines_isSet;
    bool m_lines_isValid;

    OAIMailerSettings m_mailer_settings;
    bool m_mailer_settings_isSet;
    bool m_mailer_settings_isValid;

    qint64 m_max_concurrent_requests;
    bool m_max_concurrent_requests_isSet;
    bool m_max_concurrent_requests_isValid;

    qint64 m_max_http10_response_size;
    bool m_max_http10_response_size_isSet;
    bool m_max_http10_response_size_isValid;

    qint32 m_max_logs_size;
    bool m_max_logs_size_isSet;
    bool m_max_logs_size_isValid;

    bool m_middle_fingers;
    bool m_middle_fingers_isSet;
    bool m_middle_fingers_isValid;

    qint64 m_per_ip_throttling_quota;
    bool m_per_ip_throttling_quota_isSet;
    bool m_per_ip_throttling_quota_isValid;

    OAIAuth0Config m_private_apps_auth0_config;
    bool m_private_apps_auth0_config_isSet;
    bool m_private_apps_auth0_config_isValid;

    bool m_stream_entity_only;
    bool m_stream_entity_only_isSet;
    bool m_stream_entity_only_isValid;

    qint64 m_throttling_quota;
    bool m_throttling_quota_isSet;
    bool m_throttling_quota_isValid;

    bool m_u2f_login_only;
    bool m_u2f_login_only_isSet;
    bool m_u2f_login_only_isValid;

    bool m_use_circuit_breakers;
    bool m_use_circuit_breakers_isSet;
    bool m_use_circuit_breakers_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGlobalConfig)

#endif // OAIGlobalConfig_H
