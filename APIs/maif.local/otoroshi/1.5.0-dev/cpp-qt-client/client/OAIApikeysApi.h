/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIApikeysApi_H
#define OAI_OAIApikeysApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiKey.h"
#include "OAIDeleted.h"
#include "OAIGroup.h"
#include "OAIPatch_inner.h"
#include "OAIQuotas.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIApikeysApi : public QObject {
    Q_OBJECT

public:
    OAIApikeysApi(const int timeOut = 0);
    ~OAIApikeysApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void allApiKeys();

    /**
    * @param[in]  service_id QString [required]
    * @param[in]  client_id QString [required]
    */
    virtual void apiKey(const QString &service_id, const QString &client_id);

    /**
    * @param[in]  group_id QString [required]
    * @param[in]  client_id QString [required]
    */
    virtual void apiKeyFromGroup(const QString &group_id, const QString &client_id);

    /**
    * @param[in]  group_id QString [required]
    * @param[in]  client_id QString [required]
    */
    virtual void apiKeyFromGroupQuotas(const QString &group_id, const QString &client_id);

    /**
    * @param[in]  service_id QString [required]
    * @param[in]  client_id QString [required]
    */
    virtual void apiKeyGroup(const QString &service_id, const QString &client_id);

    /**
    * @param[in]  service_id QString [required]
    * @param[in]  client_id QString [required]
    */
    virtual void apiKeyQuotas(const QString &service_id, const QString &client_id);

    /**
    * @param[in]  service_id QString [required]
    */
    virtual void apiKeys(const QString &service_id);

    /**
    * @param[in]  group_id QString [required]
    */
    virtual void apiKeysFromGroup(const QString &group_id);

    /**
    * @param[in]  service_id QString [required]
    * @param[in]  oai_api_key OAIApiKey [optional]
    */
    virtual void createApiKey(const QString &service_id, const ::OpenAPI::OptionalParam<OAIApiKey> &oai_api_key = ::OpenAPI::OptionalParam<OAIApiKey>());

    /**
    * @param[in]  group_id QString [required]
    * @param[in]  oai_api_key OAIApiKey [optional]
    */
    virtual void createApiKeyFromGroup(const QString &group_id, const ::OpenAPI::OptionalParam<OAIApiKey> &oai_api_key = ::OpenAPI::OptionalParam<OAIApiKey>());

    /**
    * @param[in]  service_id QString [required]
    * @param[in]  client_id QString [required]
    */
    virtual void deleteApiKey(const QString &service_id, const QString &client_id);

    /**
    * @param[in]  group_id QString [required]
    * @param[in]  client_id QString [required]
    */
    virtual void deleteApiKeyFromGroup(const QString &group_id, const QString &client_id);

    /**
    * @param[in]  service_id QString [required]
    * @param[in]  client_id QString [required]
    * @param[in]  oai_patch_inner QList<OAIPatch_inner> [optional]
    */
    virtual void patchApiKey(const QString &service_id, const QString &client_id, const ::OpenAPI::OptionalParam<QList<OAIPatch_inner>> &oai_patch_inner = ::OpenAPI::OptionalParam<QList<OAIPatch_inner>>());

    /**
    * @param[in]  group_id QString [required]
    * @param[in]  client_id QString [required]
    * @param[in]  oai_patch_inner QList<OAIPatch_inner> [optional]
    */
    virtual void patchApiKeyFromGroup(const QString &group_id, const QString &client_id, const ::OpenAPI::OptionalParam<QList<OAIPatch_inner>> &oai_patch_inner = ::OpenAPI::OptionalParam<QList<OAIPatch_inner>>());

    /**
    * @param[in]  group_id QString [required]
    * @param[in]  client_id QString [required]
    */
    virtual void resetApiKeyFromGroupQuotas(const QString &group_id, const QString &client_id);

    /**
    * @param[in]  service_id QString [required]
    * @param[in]  client_id QString [required]
    */
    virtual void resetApiKeyQuotas(const QString &service_id, const QString &client_id);

    /**
    * @param[in]  service_id QString [required]
    * @param[in]  client_id QString [required]
    * @param[in]  oai_api_key OAIApiKey [optional]
    */
    virtual void updateApiKey(const QString &service_id, const QString &client_id, const ::OpenAPI::OptionalParam<OAIApiKey> &oai_api_key = ::OpenAPI::OptionalParam<OAIApiKey>());

    /**
    * @param[in]  group_id QString [required]
    * @param[in]  client_id QString [required]
    * @param[in]  oai_api_key OAIApiKey [optional]
    */
    virtual void updateApiKeyFromGroup(const QString &group_id, const QString &client_id, const ::OpenAPI::OptionalParam<OAIApiKey> &oai_api_key = ::OpenAPI::OptionalParam<OAIApiKey>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void allApiKeysCallback(OAIHttpRequestWorker *worker);
    void apiKeyCallback(OAIHttpRequestWorker *worker);
    void apiKeyFromGroupCallback(OAIHttpRequestWorker *worker);
    void apiKeyFromGroupQuotasCallback(OAIHttpRequestWorker *worker);
    void apiKeyGroupCallback(OAIHttpRequestWorker *worker);
    void apiKeyQuotasCallback(OAIHttpRequestWorker *worker);
    void apiKeysCallback(OAIHttpRequestWorker *worker);
    void apiKeysFromGroupCallback(OAIHttpRequestWorker *worker);
    void createApiKeyCallback(OAIHttpRequestWorker *worker);
    void createApiKeyFromGroupCallback(OAIHttpRequestWorker *worker);
    void deleteApiKeyCallback(OAIHttpRequestWorker *worker);
    void deleteApiKeyFromGroupCallback(OAIHttpRequestWorker *worker);
    void patchApiKeyCallback(OAIHttpRequestWorker *worker);
    void patchApiKeyFromGroupCallback(OAIHttpRequestWorker *worker);
    void resetApiKeyFromGroupQuotasCallback(OAIHttpRequestWorker *worker);
    void resetApiKeyQuotasCallback(OAIHttpRequestWorker *worker);
    void updateApiKeyCallback(OAIHttpRequestWorker *worker);
    void updateApiKeyFromGroupCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void allApiKeysSignal(QList<OAIApiKey> summary);
    void apiKeySignal(OAIApiKey summary);
    void apiKeyFromGroupSignal(OAIApiKey summary);
    void apiKeyFromGroupQuotasSignal(OAIQuotas summary);
    void apiKeyGroupSignal(OAIGroup summary);
    void apiKeyQuotasSignal(OAIQuotas summary);
    void apiKeysSignal(QList<OAIApiKey> summary);
    void apiKeysFromGroupSignal(QList<OAIApiKey> summary);
    void createApiKeySignal(OAIApiKey summary);
    void createApiKeyFromGroupSignal(OAIApiKey summary);
    void deleteApiKeySignal(OAIDeleted summary);
    void deleteApiKeyFromGroupSignal(OAIDeleted summary);
    void patchApiKeySignal(OAIApiKey summary);
    void patchApiKeyFromGroupSignal(OAIApiKey summary);
    void resetApiKeyFromGroupQuotasSignal(OAIQuotas summary);
    void resetApiKeyQuotasSignal(OAIQuotas summary);
    void updateApiKeySignal(OAIApiKey summary);
    void updateApiKeyFromGroupSignal(OAIApiKey summary);


    void allApiKeysSignalFull(OAIHttpRequestWorker *worker, QList<OAIApiKey> summary);
    void apiKeySignalFull(OAIHttpRequestWorker *worker, OAIApiKey summary);
    void apiKeyFromGroupSignalFull(OAIHttpRequestWorker *worker, OAIApiKey summary);
    void apiKeyFromGroupQuotasSignalFull(OAIHttpRequestWorker *worker, OAIQuotas summary);
    void apiKeyGroupSignalFull(OAIHttpRequestWorker *worker, OAIGroup summary);
    void apiKeyQuotasSignalFull(OAIHttpRequestWorker *worker, OAIQuotas summary);
    void apiKeysSignalFull(OAIHttpRequestWorker *worker, QList<OAIApiKey> summary);
    void apiKeysFromGroupSignalFull(OAIHttpRequestWorker *worker, QList<OAIApiKey> summary);
    void createApiKeySignalFull(OAIHttpRequestWorker *worker, OAIApiKey summary);
    void createApiKeyFromGroupSignalFull(OAIHttpRequestWorker *worker, OAIApiKey summary);
    void deleteApiKeySignalFull(OAIHttpRequestWorker *worker, OAIDeleted summary);
    void deleteApiKeyFromGroupSignalFull(OAIHttpRequestWorker *worker, OAIDeleted summary);
    void patchApiKeySignalFull(OAIHttpRequestWorker *worker, OAIApiKey summary);
    void patchApiKeyFromGroupSignalFull(OAIHttpRequestWorker *worker, OAIApiKey summary);
    void resetApiKeyFromGroupQuotasSignalFull(OAIHttpRequestWorker *worker, OAIQuotas summary);
    void resetApiKeyQuotasSignalFull(OAIHttpRequestWorker *worker, OAIQuotas summary);
    void updateApiKeySignalFull(OAIHttpRequestWorker *worker, OAIApiKey summary);
    void updateApiKeyFromGroupSignalFull(OAIHttpRequestWorker *worker, OAIApiKey summary);

    Q_DECL_DEPRECATED_X("Use allApiKeysSignalError() instead")
    void allApiKeysSignalE(QList<OAIApiKey> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void allApiKeysSignalError(QList<OAIApiKey> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiKeySignalError() instead")
    void apiKeySignalE(OAIApiKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiKeySignalError(OAIApiKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiKeyFromGroupSignalError() instead")
    void apiKeyFromGroupSignalE(OAIApiKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiKeyFromGroupSignalError(OAIApiKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiKeyFromGroupQuotasSignalError() instead")
    void apiKeyFromGroupQuotasSignalE(OAIQuotas summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiKeyFromGroupQuotasSignalError(OAIQuotas summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiKeyGroupSignalError() instead")
    void apiKeyGroupSignalE(OAIGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiKeyGroupSignalError(OAIGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiKeyQuotasSignalError() instead")
    void apiKeyQuotasSignalE(OAIQuotas summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiKeyQuotasSignalError(OAIQuotas summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiKeysSignalError() instead")
    void apiKeysSignalE(QList<OAIApiKey> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiKeysSignalError(QList<OAIApiKey> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiKeysFromGroupSignalError() instead")
    void apiKeysFromGroupSignalE(QList<OAIApiKey> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiKeysFromGroupSignalError(QList<OAIApiKey> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createApiKeySignalError() instead")
    void createApiKeySignalE(OAIApiKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createApiKeySignalError(OAIApiKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createApiKeyFromGroupSignalError() instead")
    void createApiKeyFromGroupSignalE(OAIApiKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createApiKeyFromGroupSignalError(OAIApiKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteApiKeySignalError() instead")
    void deleteApiKeySignalE(OAIDeleted summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteApiKeySignalError(OAIDeleted summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteApiKeyFromGroupSignalError() instead")
    void deleteApiKeyFromGroupSignalE(OAIDeleted summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteApiKeyFromGroupSignalError(OAIDeleted summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchApiKeySignalError() instead")
    void patchApiKeySignalE(OAIApiKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchApiKeySignalError(OAIApiKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchApiKeyFromGroupSignalError() instead")
    void patchApiKeyFromGroupSignalE(OAIApiKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchApiKeyFromGroupSignalError(OAIApiKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetApiKeyFromGroupQuotasSignalError() instead")
    void resetApiKeyFromGroupQuotasSignalE(OAIQuotas summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resetApiKeyFromGroupQuotasSignalError(OAIQuotas summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetApiKeyQuotasSignalError() instead")
    void resetApiKeyQuotasSignalE(OAIQuotas summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resetApiKeyQuotasSignalError(OAIQuotas summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateApiKeySignalError() instead")
    void updateApiKeySignalE(OAIApiKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateApiKeySignalError(OAIApiKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateApiKeyFromGroupSignalError() instead")
    void updateApiKeyFromGroupSignalE(OAIApiKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateApiKeyFromGroupSignalError(OAIApiKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use allApiKeysSignalErrorFull() instead")
    void allApiKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void allApiKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiKeySignalErrorFull() instead")
    void apiKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiKeyFromGroupSignalErrorFull() instead")
    void apiKeyFromGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiKeyFromGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiKeyFromGroupQuotasSignalErrorFull() instead")
    void apiKeyFromGroupQuotasSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiKeyFromGroupQuotasSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiKeyGroupSignalErrorFull() instead")
    void apiKeyGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiKeyGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiKeyQuotasSignalErrorFull() instead")
    void apiKeyQuotasSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiKeyQuotasSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiKeysSignalErrorFull() instead")
    void apiKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiKeysFromGroupSignalErrorFull() instead")
    void apiKeysFromGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiKeysFromGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createApiKeySignalErrorFull() instead")
    void createApiKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createApiKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createApiKeyFromGroupSignalErrorFull() instead")
    void createApiKeyFromGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createApiKeyFromGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteApiKeySignalErrorFull() instead")
    void deleteApiKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteApiKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteApiKeyFromGroupSignalErrorFull() instead")
    void deleteApiKeyFromGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteApiKeyFromGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchApiKeySignalErrorFull() instead")
    void patchApiKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchApiKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchApiKeyFromGroupSignalErrorFull() instead")
    void patchApiKeyFromGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchApiKeyFromGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetApiKeyFromGroupQuotasSignalErrorFull() instead")
    void resetApiKeyFromGroupQuotasSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resetApiKeyFromGroupQuotasSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetApiKeyQuotasSignalErrorFull() instead")
    void resetApiKeyQuotasSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resetApiKeyQuotasSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateApiKeySignalErrorFull() instead")
    void updateApiKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateApiKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateApiKeyFromGroupSignalErrorFull() instead")
    void updateApiKeyFromGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateApiKeyFromGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
