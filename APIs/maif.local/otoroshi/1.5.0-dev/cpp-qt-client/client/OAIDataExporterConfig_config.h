/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDataExporterConfig_config.h
 *
 * Data Exporter config
 */

#ifndef OAIDataExporterConfig_config_H
#define OAIDataExporterConfig_config_H

#include <QJsonObject>

#include "OAICustomDataExporterConfig.h"
#include "OAIElasticConfig.h"
#include "OAIFileDataExporterConfig.h"
#include "OAIKafkaConfig.h"
#include "OAIMailerConsoleExporterConfig.h"
#include "OAIMailerGenericExporterConfig.h"
#include "OAIMailerMailgunExporterConfig.h"
#include "OAIMailerMailjetExporterConfig.h"
#include "OAIMailerSendgridExporterConfig.h"
#include "OAIPulsarDataExporterConfig.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDataExporterConfig_config : public OAIObject {
public:
    OAIDataExporterConfig_config();
    OAIDataExporterConfig_config(QString json);
    ~OAIDataExporterConfig_config() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getClusterUri() const;
    void setClusterUri(const QString &cluster_uri);
    bool is_cluster_uri_Set() const;
    bool is_cluster_uri_Valid() const;

    QMap<QString, QString> getHeaders() const;
    void setHeaders(const QMap<QString, QString> &headers);
    bool is_headers_Set() const;
    bool is_headers_Valid() const;

    QString getIndex() const;
    void setIndex(const QString &index);
    bool is_index_Set() const;
    bool is_index_Valid() const;

    QString getPassword() const;
    void setPassword(const QString &password);
    bool is_password_Set() const;
    bool is_password_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getUser() const;
    void setUser(const QString &user);
    bool is_user_Set() const;
    bool is_user_Valid() const;

    QString getKeyPass() const;
    void setKeyPass(const QString &key_pass);
    bool is_key_pass_Set() const;
    bool is_key_pass_Valid() const;

    QString getKeyStore() const;
    void setKeyStore(const QString &key_store);
    bool is_key_store_Set() const;
    bool is_key_store_Valid() const;

    QList<QString> getServers() const;
    void setServers(const QList<QString> &servers);
    bool is_servers_Set() const;
    bool is_servers_Valid() const;

    QString getTopic() const;
    void setTopic(const QString &topic);
    bool is_topic_Set() const;
    bool is_topic_Valid() const;

    QString getTrustore() const;
    void setTrustore(const QString &trustore);
    bool is_trustore_Set() const;
    bool is_trustore_Valid() const;

    QString getRNamespace() const;
    void setRNamespace(const QString &r_namespace);
    bool is_r_namespace_Set() const;
    bool is_r_namespace_Valid() const;

    QString getTenant() const;
    void setTenant(const QString &tenant);
    bool is_tenant_Set() const;
    bool is_tenant_Valid() const;

    QList<QString> getUri() const;
    void setUri(const QList<QString> &uri);
    bool is_uri_Set() const;
    bool is_uri_Valid() const;

    QString getPath() const;
    void setPath(const QString &path);
    bool is_path_Set() const;
    bool is_path_Valid() const;

    QList<QString> getTo() const;
    void setTo(const QList<QString> &to);
    bool is_to_Set() const;
    bool is_to_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    QString getApiKey() const;
    void setApiKey(const QString &api_key);
    bool is_api_key_Set() const;
    bool is_api_key_Valid() const;

    QString getDomain() const;
    void setDomain(const QString &domain);
    bool is_domain_Set() const;
    bool is_domain_Valid() const;

    bool isEu() const;
    void setEu(const bool &eu);
    bool is_eu_Set() const;
    bool is_eu_Valid() const;

    QString getApiKeyPrivate() const;
    void setApiKeyPrivate(const QString &api_key_private);
    bool is_api_key_private_Set() const;
    bool is_api_key_private_Valid() const;

    QString getApiKeyPublic() const;
    void setApiKeyPublic(const QString &api_key_public);
    bool is_api_key_public_Set() const;
    bool is_api_key_public_Valid() const;

    QMap<QString, QString> getConfig() const;
    void setConfig(const QMap<QString, QString> &config);
    bool is_config_Set() const;
    bool is_config_Valid() const;

    QString getRef() const;
    void setRef(const QString &ref);
    bool is_ref_Set() const;
    bool is_ref_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_cluster_uri;
    bool m_cluster_uri_isSet;
    bool m_cluster_uri_isValid;

    QMap<QString, QString> m_headers;
    bool m_headers_isSet;
    bool m_headers_isValid;

    QString m_index;
    bool m_index_isSet;
    bool m_index_isValid;

    QString m_password;
    bool m_password_isSet;
    bool m_password_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_user;
    bool m_user_isSet;
    bool m_user_isValid;

    QString m_key_pass;
    bool m_key_pass_isSet;
    bool m_key_pass_isValid;

    QString m_key_store;
    bool m_key_store_isSet;
    bool m_key_store_isValid;

    QList<QString> m_servers;
    bool m_servers_isSet;
    bool m_servers_isValid;

    QString m_topic;
    bool m_topic_isSet;
    bool m_topic_isValid;

    QString m_trustore;
    bool m_trustore_isSet;
    bool m_trustore_isValid;

    QString m_r_namespace;
    bool m_r_namespace_isSet;
    bool m_r_namespace_isValid;

    QString m_tenant;
    bool m_tenant_isSet;
    bool m_tenant_isValid;

    QList<QString> m_uri;
    bool m_uri_isSet;
    bool m_uri_isValid;

    QString m_path;
    bool m_path_isSet;
    bool m_path_isValid;

    QList<QString> m_to;
    bool m_to_isSet;
    bool m_to_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;

    QString m_api_key;
    bool m_api_key_isSet;
    bool m_api_key_isValid;

    QString m_domain;
    bool m_domain_isSet;
    bool m_domain_isValid;

    bool m_eu;
    bool m_eu_isSet;
    bool m_eu_isValid;

    QString m_api_key_private;
    bool m_api_key_private_isSet;
    bool m_api_key_private_isValid;

    QString m_api_key_public;
    bool m_api_key_public_isSet;
    bool m_api_key_public_isValid;

    QMap<QString, QString> m_config;
    bool m_config_isSet;
    bool m_config_isValid;

    QString m_ref;
    bool m_ref_isSet;
    bool m_ref_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDataExporterConfig_config)

#endif // OAIDataExporterConfig_config_H
