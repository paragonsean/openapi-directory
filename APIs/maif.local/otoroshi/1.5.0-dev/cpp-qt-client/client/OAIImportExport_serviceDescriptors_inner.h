/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIImportExport_serviceDescriptors_inner.h
 *
 * An otoroshi service descriptor. Represent a forward HTTP call on a domain to another location with some optional api management mecanism
 */

#ifndef OAIImportExport_serviceDescriptors_inner_H
#define OAIImportExport_serviceDescriptors_inner_H

#include <QJsonObject>

#include "OAICanary.h"
#include "OAIChaosConfig.h"
#include "OAIClientConfig.h"
#include "OAICorsSettings.h"
#include "OAIExposedApi.h"
#include "OAIGlobalJwtVerifier_algoSettings.h"
#include "OAIGzip.h"
#include "OAIHealthCheck.h"
#include "OAIImportExport_serviceDescriptors_inner_jwtVerifier.h"
#include "OAIIpFiltering.h"
#include "OAIRedirectionSettings.h"
#include "OAIStatsdConfig.h"
#include "OAITarget.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICanary;
class OAIExposedApi;
class OAIChaosConfig;
class OAIClientConfig;
class OAICorsSettings;
class OAIGzip;
class OAIHealthCheck;
class OAIIpFiltering;
class OAIImportExport_serviceDescriptors_inner_jwtVerifier;
class OAIRedirectionSettings;
class OAIGlobalJwtVerifier_algoSettings;
class OAIStatsdConfig;
class OAITarget;

class OAIImportExport_serviceDescriptors_inner : public OAIObject {
public:
    OAIImportExport_serviceDescriptors_inner();
    OAIImportExport_serviceDescriptors_inner(QString json);
    ~OAIImportExport_serviceDescriptors_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAICanary getCanary() const;
    void setCanary(const OAICanary &canary);
    bool is_canary_Set() const;
    bool is_canary_Valid() const;

    QMap<QString, QString> getAdditionalHeaders() const;
    void setAdditionalHeaders(const QMap<QString, QString> &additional_headers);
    bool is_additional_headers_Set() const;
    bool is_additional_headers_Valid() const;

    OAIExposedApi getApi() const;
    void setApi(const OAIExposedApi &api);
    bool is_api_Set() const;
    bool is_api_Valid() const;

    QString getAuthConfigRef() const;
    void setAuthConfigRef(const QString &auth_config_ref);
    bool is_auth_config_ref_Set() const;
    bool is_auth_config_ref_Valid() const;

    bool isBuildMode() const;
    void setBuildMode(const bool &build_mode);
    bool is_build_mode_Set() const;
    bool is_build_mode_Valid() const;

    OAIChaosConfig getChaosConfig() const;
    void setChaosConfig(const OAIChaosConfig &chaos_config);
    bool is_chaos_config_Set() const;
    bool is_chaos_config_Valid() const;

    OAIClientConfig getClientConfig() const;
    void setClientConfig(const OAIClientConfig &client_config);
    bool is_client_config_Set() const;
    bool is_client_config_Valid() const;

    QString getClientValidatorRef() const;
    void setClientValidatorRef(const QString &client_validator_ref);
    bool is_client_validator_ref_Set() const;
    bool is_client_validator_ref_Valid() const;

    OAICorsSettings getCors() const;
    void setCors(const OAICorsSettings &cors);
    bool is_cors_Set() const;
    bool is_cors_Valid() const;

    QString getDomain() const;
    void setDomain(const QString &domain);
    bool is_domain_Set() const;
    bool is_domain_Valid() const;

    bool isEnabled() const;
    void setEnabled(const bool &enabled);
    bool is_enabled_Set() const;
    bool is_enabled_Valid() const;

    bool isEnforceSecureCommunication() const;
    void setEnforceSecureCommunication(const bool &enforce_secure_communication);
    bool is_enforce_secure_communication_Set() const;
    bool is_enforce_secure_communication_Valid() const;

    QString getEnv() const;
    void setEnv(const QString &env);
    bool is_env_Set() const;
    bool is_env_Valid() const;

    bool isForceHttps() const;
    void setForceHttps(const bool &force_https);
    bool is_force_https_Set() const;
    bool is_force_https_Valid() const;

    QList<QString> getGroups() const;
    void setGroups(const QList<QString> &groups);
    bool is_groups_Set() const;
    bool is_groups_Valid() const;

    OAIGzip getGzip() const;
    void setGzip(const OAIGzip &gzip);
    bool is_gzip_Set() const;
    bool is_gzip_Valid() const;

    QMap<QString, QString> getHeadersVerification() const;
    void setHeadersVerification(const QMap<QString, QString> &headers_verification);
    bool is_headers_verification_Set() const;
    bool is_headers_verification_Valid() const;

    OAIHealthCheck getHealthCheck() const;
    void setHealthCheck(const OAIHealthCheck &health_check);
    bool is_health_check_Set() const;
    bool is_health_check_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    OAIIpFiltering getIpFiltering() const;
    void setIpFiltering(const OAIIpFiltering &ip_filtering);
    bool is_ip_filtering_Set() const;
    bool is_ip_filtering_Valid() const;

    OAIImportExport_serviceDescriptors_inner_jwtVerifier getJwtVerifier() const;
    void setJwtVerifier(const OAIImportExport_serviceDescriptors_inner_jwtVerifier &jwt_verifier);
    bool is_jwt_verifier_Set() const;
    bool is_jwt_verifier_Valid() const;

    QString getLocalHost() const;
    void setLocalHost(const QString &local_host);
    bool is_local_host_Set() const;
    bool is_local_host_Valid() const;

    QString getLocalScheme() const;
    void setLocalScheme(const QString &local_scheme);
    bool is_local_scheme_Set() const;
    bool is_local_scheme_Valid() const;

    bool isMaintenanceMode() const;
    void setMaintenanceMode(const bool &maintenance_mode);
    bool is_maintenance_mode_Set() const;
    bool is_maintenance_mode_Valid() const;

    QMap<QString, QString> getMatchingHeaders() const;
    void setMatchingHeaders(const QMap<QString, QString> &matching_headers);
    bool is_matching_headers_Set() const;
    bool is_matching_headers_Valid() const;

    QString getMatchingRoot() const;
    void setMatchingRoot(const QString &matching_root);
    bool is_matching_root_Set() const;
    bool is_matching_root_Valid() const;

    QMap<QString, QString> getMetadata() const;
    void setMetadata(const QMap<QString, QString> &metadata);
    bool is_metadata_Set() const;
    bool is_metadata_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    bool isOverrideHost() const;
    void setOverrideHost(const bool &override_host);
    bool is_override_host_Set() const;
    bool is_override_host_Valid() const;

    bool isPrivateApp() const;
    void setPrivateApp(const bool &private_app);
    bool is_private_app_Set() const;
    bool is_private_app_Valid() const;

    QList<QString> getPrivatePatterns() const;
    void setPrivatePatterns(const QList<QString> &private_patterns);
    bool is_private_patterns_Set() const;
    bool is_private_patterns_Valid() const;

    QList<QString> getPublicPatterns() const;
    void setPublicPatterns(const QList<QString> &public_patterns);
    bool is_public_patterns_Set() const;
    bool is_public_patterns_Valid() const;

    bool isRedirectToLocal() const;
    void setRedirectToLocal(const bool &redirect_to_local);
    bool is_redirect_to_local_Set() const;
    bool is_redirect_to_local_Valid() const;

    OAIRedirectionSettings getRedirection() const;
    void setRedirection(const OAIRedirectionSettings &redirection);
    bool is_redirection_Set() const;
    bool is_redirection_Valid() const;

    QString getRoot() const;
    void setRoot(const QString &root);
    bool is_root_Set() const;
    bool is_root_Valid() const;

    QList<QString> getSecComExcludedPatterns() const;
    void setSecComExcludedPatterns(const QList<QString> &sec_com_excluded_patterns);
    bool is_sec_com_excluded_patterns_Set() const;
    bool is_sec_com_excluded_patterns_Valid() const;

    OAIGlobalJwtVerifier_algoSettings getSecComSettings() const;
    void setSecComSettings(const OAIGlobalJwtVerifier_algoSettings &sec_com_settings);
    bool is_sec_com_settings_Set() const;
    bool is_sec_com_settings_Valid() const;

    bool isSendOtoroshiHeadersBack() const;
    void setSendOtoroshiHeadersBack(const bool &send_otoroshi_headers_back);
    bool is_send_otoroshi_headers_back_Set() const;
    bool is_send_otoroshi_headers_back_Valid() const;

    OAIStatsdConfig getStatsdConfig() const;
    void setStatsdConfig(const OAIStatsdConfig &statsd_config);
    bool is_statsd_config_Set() const;
    bool is_statsd_config_Valid() const;

    QString getSubdomain() const;
    void setSubdomain(const QString &subdomain);
    bool is_subdomain_Set() const;
    bool is_subdomain_Valid() const;

    QList<OAITarget> getTargets() const;
    void setTargets(const QList<OAITarget> &targets);
    bool is_targets_Set() const;
    bool is_targets_Valid() const;

    QString getTransformerRef() const;
    void setTransformerRef(const QString &transformer_ref);
    bool is_transformer_ref_Set() const;
    bool is_transformer_ref_Valid() const;

    bool isUserFacing() const;
    void setUserFacing(const bool &user_facing);
    bool is_user_facing_Set() const;
    bool is_user_facing_Valid() const;

    bool isXForwardedHeaders() const;
    void setXForwardedHeaders(const bool &x_forwarded_headers);
    bool is_x_forwarded_headers_Set() const;
    bool is_x_forwarded_headers_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAICanary m_canary;
    bool m_canary_isSet;
    bool m_canary_isValid;

    QMap<QString, QString> m_additional_headers;
    bool m_additional_headers_isSet;
    bool m_additional_headers_isValid;

    OAIExposedApi m_api;
    bool m_api_isSet;
    bool m_api_isValid;

    QString m_auth_config_ref;
    bool m_auth_config_ref_isSet;
    bool m_auth_config_ref_isValid;

    bool m_build_mode;
    bool m_build_mode_isSet;
    bool m_build_mode_isValid;

    OAIChaosConfig m_chaos_config;
    bool m_chaos_config_isSet;
    bool m_chaos_config_isValid;

    OAIClientConfig m_client_config;
    bool m_client_config_isSet;
    bool m_client_config_isValid;

    QString m_client_validator_ref;
    bool m_client_validator_ref_isSet;
    bool m_client_validator_ref_isValid;

    OAICorsSettings m_cors;
    bool m_cors_isSet;
    bool m_cors_isValid;

    QString m_domain;
    bool m_domain_isSet;
    bool m_domain_isValid;

    bool m_enabled;
    bool m_enabled_isSet;
    bool m_enabled_isValid;

    bool m_enforce_secure_communication;
    bool m_enforce_secure_communication_isSet;
    bool m_enforce_secure_communication_isValid;

    QString m_env;
    bool m_env_isSet;
    bool m_env_isValid;

    bool m_force_https;
    bool m_force_https_isSet;
    bool m_force_https_isValid;

    QList<QString> m_groups;
    bool m_groups_isSet;
    bool m_groups_isValid;

    OAIGzip m_gzip;
    bool m_gzip_isSet;
    bool m_gzip_isValid;

    QMap<QString, QString> m_headers_verification;
    bool m_headers_verification_isSet;
    bool m_headers_verification_isValid;

    OAIHealthCheck m_health_check;
    bool m_health_check_isSet;
    bool m_health_check_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    OAIIpFiltering m_ip_filtering;
    bool m_ip_filtering_isSet;
    bool m_ip_filtering_isValid;

    OAIImportExport_serviceDescriptors_inner_jwtVerifier m_jwt_verifier;
    bool m_jwt_verifier_isSet;
    bool m_jwt_verifier_isValid;

    QString m_local_host;
    bool m_local_host_isSet;
    bool m_local_host_isValid;

    QString m_local_scheme;
    bool m_local_scheme_isSet;
    bool m_local_scheme_isValid;

    bool m_maintenance_mode;
    bool m_maintenance_mode_isSet;
    bool m_maintenance_mode_isValid;

    QMap<QString, QString> m_matching_headers;
    bool m_matching_headers_isSet;
    bool m_matching_headers_isValid;

    QString m_matching_root;
    bool m_matching_root_isSet;
    bool m_matching_root_isValid;

    QMap<QString, QString> m_metadata;
    bool m_metadata_isSet;
    bool m_metadata_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    bool m_override_host;
    bool m_override_host_isSet;
    bool m_override_host_isValid;

    bool m_private_app;
    bool m_private_app_isSet;
    bool m_private_app_isValid;

    QList<QString> m_private_patterns;
    bool m_private_patterns_isSet;
    bool m_private_patterns_isValid;

    QList<QString> m_public_patterns;
    bool m_public_patterns_isSet;
    bool m_public_patterns_isValid;

    bool m_redirect_to_local;
    bool m_redirect_to_local_isSet;
    bool m_redirect_to_local_isValid;

    OAIRedirectionSettings m_redirection;
    bool m_redirection_isSet;
    bool m_redirection_isValid;

    QString m_root;
    bool m_root_isSet;
    bool m_root_isValid;

    QList<QString> m_sec_com_excluded_patterns;
    bool m_sec_com_excluded_patterns_isSet;
    bool m_sec_com_excluded_patterns_isValid;

    OAIGlobalJwtVerifier_algoSettings m_sec_com_settings;
    bool m_sec_com_settings_isSet;
    bool m_sec_com_settings_isValid;

    bool m_send_otoroshi_headers_back;
    bool m_send_otoroshi_headers_back_isSet;
    bool m_send_otoroshi_headers_back_isValid;

    OAIStatsdConfig m_statsd_config;
    bool m_statsd_config_isSet;
    bool m_statsd_config_isValid;

    QString m_subdomain;
    bool m_subdomain_isSet;
    bool m_subdomain_isValid;

    QList<OAITarget> m_targets;
    bool m_targets_isSet;
    bool m_targets_isValid;

    QString m_transformer_ref;
    bool m_transformer_ref_isSet;
    bool m_transformer_ref_isValid;

    bool m_user_facing;
    bool m_user_facing_isSet;
    bool m_user_facing_isValid;

    bool m_x_forwarded_headers;
    bool m_x_forwarded_headers_isSet;
    bool m_x_forwarded_headers_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIImportExport_serviceDescriptors_inner)

#endif // OAIImportExport_serviceDescriptors_inner_H
