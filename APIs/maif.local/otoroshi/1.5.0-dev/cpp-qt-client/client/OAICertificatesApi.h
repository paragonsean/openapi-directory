/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICertificatesApi_H
#define OAI_OAICertificatesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICertificate.h"
#include "OAIDeleted.h"
#include "OAIPatch_inner.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICertificatesApi : public QObject {
    Q_OBJECT

public:
    OAICertificatesApi(const int timeOut = 0);
    ~OAICertificatesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void allCerts();

    /**
    * @param[in]  oai_certificate OAICertificate [optional]
    */
    virtual void createCert(const ::OpenAPI::OptionalParam<OAICertificate> &oai_certificate = ::OpenAPI::OptionalParam<OAICertificate>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void deleteCert(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void oneCert(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_patch_inner QList<OAIPatch_inner> [optional]
    */
    virtual void patchCert(const QString &id, const ::OpenAPI::OptionalParam<QList<OAIPatch_inner>> &oai_patch_inner = ::OpenAPI::OptionalParam<QList<OAIPatch_inner>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_certificate OAICertificate [optional]
    */
    virtual void putCert(const QString &id, const ::OpenAPI::OptionalParam<OAICertificate> &oai_certificate = ::OpenAPI::OptionalParam<OAICertificate>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void allCertsCallback(OAIHttpRequestWorker *worker);
    void createCertCallback(OAIHttpRequestWorker *worker);
    void deleteCertCallback(OAIHttpRequestWorker *worker);
    void oneCertCallback(OAIHttpRequestWorker *worker);
    void patchCertCallback(OAIHttpRequestWorker *worker);
    void putCertCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void allCertsSignal(QList<OAICertificate> summary);
    void createCertSignal(OAICertificate summary);
    void deleteCertSignal(OAIDeleted summary);
    void oneCertSignal(OAICertificate summary);
    void patchCertSignal(OAICertificate summary);
    void putCertSignal(OAICertificate summary);


    void allCertsSignalFull(OAIHttpRequestWorker *worker, QList<OAICertificate> summary);
    void createCertSignalFull(OAIHttpRequestWorker *worker, OAICertificate summary);
    void deleteCertSignalFull(OAIHttpRequestWorker *worker, OAIDeleted summary);
    void oneCertSignalFull(OAIHttpRequestWorker *worker, OAICertificate summary);
    void patchCertSignalFull(OAIHttpRequestWorker *worker, OAICertificate summary);
    void putCertSignalFull(OAIHttpRequestWorker *worker, OAICertificate summary);

    Q_DECL_DEPRECATED_X("Use allCertsSignalError() instead")
    void allCertsSignalE(QList<OAICertificate> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void allCertsSignalError(QList<OAICertificate> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createCertSignalError() instead")
    void createCertSignalE(OAICertificate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createCertSignalError(OAICertificate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCertSignalError() instead")
    void deleteCertSignalE(OAIDeleted summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCertSignalError(OAIDeleted summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use oneCertSignalError() instead")
    void oneCertSignalE(OAICertificate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void oneCertSignalError(OAICertificate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchCertSignalError() instead")
    void patchCertSignalE(OAICertificate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchCertSignalError(OAICertificate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putCertSignalError() instead")
    void putCertSignalE(OAICertificate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putCertSignalError(OAICertificate summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use allCertsSignalErrorFull() instead")
    void allCertsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void allCertsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createCertSignalErrorFull() instead")
    void createCertSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createCertSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCertSignalErrorFull() instead")
    void deleteCertSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCertSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use oneCertSignalErrorFull() instead")
    void oneCertSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void oneCertSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchCertSignalErrorFull() instead")
    void patchCertSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchCertSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putCertSignalErrorFull() instead")
    void putCertSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putCertSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
