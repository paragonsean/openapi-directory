/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIValidationAuthority.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIValidationAuthority::OAIValidationAuthority(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIValidationAuthority::OAIValidationAuthority() {
    this->initializeModel();
}

OAIValidationAuthority::~OAIValidationAuthority() {}

void OAIValidationAuthority::initializeModel() {

    m_always_valid_isSet = false;
    m_always_valid_isValid = false;

    m_bad_ttl_isSet = false;
    m_bad_ttl_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_good_ttl_isSet = false;
    m_good_ttl_isValid = false;

    m_headers_isSet = false;
    m_headers_isValid = false;

    m_host_isSet = false;
    m_host_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_method_isSet = false;
    m_method_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_no_cache_isSet = false;
    m_no_cache_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_timeout_isSet = false;
    m_timeout_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIValidationAuthority::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIValidationAuthority::fromJsonObject(QJsonObject json) {

    m_always_valid_isValid = ::OpenAPI::fromJsonValue(m_always_valid, json[QString("alwaysValid")]);
    m_always_valid_isSet = !json[QString("alwaysValid")].isNull() && m_always_valid_isValid;

    m_bad_ttl_isValid = ::OpenAPI::fromJsonValue(m_bad_ttl, json[QString("badTtl")]);
    m_bad_ttl_isSet = !json[QString("badTtl")].isNull() && m_bad_ttl_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_good_ttl_isValid = ::OpenAPI::fromJsonValue(m_good_ttl, json[QString("goodTtl")]);
    m_good_ttl_isSet = !json[QString("goodTtl")].isNull() && m_good_ttl_isValid;

    m_headers_isValid = ::OpenAPI::fromJsonValue(m_headers, json[QString("headers")]);
    m_headers_isSet = !json[QString("headers")].isNull() && m_headers_isValid;

    m_host_isValid = ::OpenAPI::fromJsonValue(m_host, json[QString("host")]);
    m_host_isSet = !json[QString("host")].isNull() && m_host_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_method_isValid = ::OpenAPI::fromJsonValue(m_method, json[QString("method")]);
    m_method_isSet = !json[QString("method")].isNull() && m_method_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_no_cache_isValid = ::OpenAPI::fromJsonValue(m_no_cache, json[QString("noCache")]);
    m_no_cache_isSet = !json[QString("noCache")].isNull() && m_no_cache_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_timeout_isValid = ::OpenAPI::fromJsonValue(m_timeout, json[QString("timeout")]);
    m_timeout_isSet = !json[QString("timeout")].isNull() && m_timeout_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIValidationAuthority::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIValidationAuthority::asJsonObject() const {
    QJsonObject obj;
    if (m_always_valid_isSet) {
        obj.insert(QString("alwaysValid"), ::OpenAPI::toJsonValue(m_always_valid));
    }
    if (m_bad_ttl_isSet) {
        obj.insert(QString("badTtl"), ::OpenAPI::toJsonValue(m_bad_ttl));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_good_ttl_isSet) {
        obj.insert(QString("goodTtl"), ::OpenAPI::toJsonValue(m_good_ttl));
    }
    if (m_headers.size() > 0) {
        obj.insert(QString("headers"), ::OpenAPI::toJsonValue(m_headers));
    }
    if (m_host_isSet) {
        obj.insert(QString("host"), ::OpenAPI::toJsonValue(m_host));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_method_isSet) {
        obj.insert(QString("method"), ::OpenAPI::toJsonValue(m_method));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_no_cache_isSet) {
        obj.insert(QString("noCache"), ::OpenAPI::toJsonValue(m_no_cache));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_timeout_isSet) {
        obj.insert(QString("timeout"), ::OpenAPI::toJsonValue(m_timeout));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

bool OAIValidationAuthority::isAlwaysValid() const {
    return m_always_valid;
}
void OAIValidationAuthority::setAlwaysValid(const bool &always_valid) {
    m_always_valid = always_valid;
    m_always_valid_isSet = true;
}

bool OAIValidationAuthority::is_always_valid_Set() const{
    return m_always_valid_isSet;
}

bool OAIValidationAuthority::is_always_valid_Valid() const{
    return m_always_valid_isValid;
}

qint64 OAIValidationAuthority::getBadTtl() const {
    return m_bad_ttl;
}
void OAIValidationAuthority::setBadTtl(const qint64 &bad_ttl) {
    m_bad_ttl = bad_ttl;
    m_bad_ttl_isSet = true;
}

bool OAIValidationAuthority::is_bad_ttl_Set() const{
    return m_bad_ttl_isSet;
}

bool OAIValidationAuthority::is_bad_ttl_Valid() const{
    return m_bad_ttl_isValid;
}

QString OAIValidationAuthority::getDescription() const {
    return m_description;
}
void OAIValidationAuthority::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIValidationAuthority::is_description_Set() const{
    return m_description_isSet;
}

bool OAIValidationAuthority::is_description_Valid() const{
    return m_description_isValid;
}

qint64 OAIValidationAuthority::getGoodTtl() const {
    return m_good_ttl;
}
void OAIValidationAuthority::setGoodTtl(const qint64 &good_ttl) {
    m_good_ttl = good_ttl;
    m_good_ttl_isSet = true;
}

bool OAIValidationAuthority::is_good_ttl_Set() const{
    return m_good_ttl_isSet;
}

bool OAIValidationAuthority::is_good_ttl_Valid() const{
    return m_good_ttl_isValid;
}

QMap<QString, QString> OAIValidationAuthority::getHeaders() const {
    return m_headers;
}
void OAIValidationAuthority::setHeaders(const QMap<QString, QString> &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAIValidationAuthority::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAIValidationAuthority::is_headers_Valid() const{
    return m_headers_isValid;
}

QString OAIValidationAuthority::getHost() const {
    return m_host;
}
void OAIValidationAuthority::setHost(const QString &host) {
    m_host = host;
    m_host_isSet = true;
}

bool OAIValidationAuthority::is_host_Set() const{
    return m_host_isSet;
}

bool OAIValidationAuthority::is_host_Valid() const{
    return m_host_isValid;
}

QString OAIValidationAuthority::getId() const {
    return m_id;
}
void OAIValidationAuthority::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIValidationAuthority::is_id_Set() const{
    return m_id_isSet;
}

bool OAIValidationAuthority::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIValidationAuthority::getMethod() const {
    return m_method;
}
void OAIValidationAuthority::setMethod(const QString &method) {
    m_method = method;
    m_method_isSet = true;
}

bool OAIValidationAuthority::is_method_Set() const{
    return m_method_isSet;
}

bool OAIValidationAuthority::is_method_Valid() const{
    return m_method_isValid;
}

QString OAIValidationAuthority::getName() const {
    return m_name;
}
void OAIValidationAuthority::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIValidationAuthority::is_name_Set() const{
    return m_name_isSet;
}

bool OAIValidationAuthority::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIValidationAuthority::isNoCache() const {
    return m_no_cache;
}
void OAIValidationAuthority::setNoCache(const bool &no_cache) {
    m_no_cache = no_cache;
    m_no_cache_isSet = true;
}

bool OAIValidationAuthority::is_no_cache_Set() const{
    return m_no_cache_isSet;
}

bool OAIValidationAuthority::is_no_cache_Valid() const{
    return m_no_cache_isValid;
}

QString OAIValidationAuthority::getPath() const {
    return m_path;
}
void OAIValidationAuthority::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIValidationAuthority::is_path_Set() const{
    return m_path_isSet;
}

bool OAIValidationAuthority::is_path_Valid() const{
    return m_path_isValid;
}

qint64 OAIValidationAuthority::getTimeout() const {
    return m_timeout;
}
void OAIValidationAuthority::setTimeout(const qint64 &timeout) {
    m_timeout = timeout;
    m_timeout_isSet = true;
}

bool OAIValidationAuthority::is_timeout_Set() const{
    return m_timeout_isSet;
}

bool OAIValidationAuthority::is_timeout_Valid() const{
    return m_timeout_isValid;
}

QString OAIValidationAuthority::getUrl() const {
    return m_url;
}
void OAIValidationAuthority::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIValidationAuthority::is_url_Set() const{
    return m_url_isSet;
}

bool OAIValidationAuthority::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIValidationAuthority::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_always_valid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bad_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_good_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_cache_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIValidationAuthority::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_always_valid_isValid && m_bad_ttl_isValid && m_description_isValid && m_good_ttl_isValid && m_headers_isValid && m_host_isValid && m_id_isValid && m_method_isValid && m_name_isValid && m_no_cache_isValid && m_path_isValid && m_timeout_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
