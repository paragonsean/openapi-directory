/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScript.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScript::OAIScript(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScript::OAIScript() {
    this->initializeModel();
}

OAIScript::~OAIScript() {}

void OAIScript::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_desc_isSet = false;
    m_desc_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIScript::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScript::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_desc_isValid = ::OpenAPI::fromJsonValue(m_desc, json[QString("desc")]);
    m_desc_isSet = !json[QString("desc")].isNull() && m_desc_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIScript::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScript::asJsonObject() const {
    QJsonObject obj;
    if (m_code.size() > 0) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_desc.size() > 0) {
        obj.insert(QString("desc"), ::OpenAPI::toJsonValue(m_desc));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QMap<QString, QString> OAIScript::getCode() const {
    return m_code;
}
void OAIScript::setCode(const QMap<QString, QString> &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIScript::is_code_Set() const{
    return m_code_isSet;
}

bool OAIScript::is_code_Valid() const{
    return m_code_isValid;
}

QMap<QString, QString> OAIScript::getDesc() const {
    return m_desc;
}
void OAIScript::setDesc(const QMap<QString, QString> &desc) {
    m_desc = desc;
    m_desc_isSet = true;
}

bool OAIScript::is_desc_Set() const{
    return m_desc_isSet;
}

bool OAIScript::is_desc_Valid() const{
    return m_desc_isValid;
}

QString OAIScript::getId() const {
    return m_id;
}
void OAIScript::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIScript::is_id_Set() const{
    return m_id_isSet;
}

bool OAIScript::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIScript::getName() const {
    return m_name;
}
void OAIScript::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIScript::is_name_Set() const{
    return m_name_isSet;
}

bool OAIScript::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIScript::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_desc.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScript::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_code_isValid && m_desc_isValid && m_id_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
