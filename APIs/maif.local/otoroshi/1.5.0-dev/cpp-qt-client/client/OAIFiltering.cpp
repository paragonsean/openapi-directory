/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFiltering.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFiltering::OAIFiltering(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFiltering::OAIFiltering() {
    this->initializeModel();
}

OAIFiltering::~OAIFiltering() {}

void OAIFiltering::initializeModel() {

    m_exclude_isSet = false;
    m_exclude_isValid = false;

    m_include_isSet = false;
    m_include_isValid = false;
}

void OAIFiltering::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFiltering::fromJsonObject(QJsonObject json) {

    if(json["exclude"].isArray()){
        auto arr = json["exclude"].toArray();
        m_exclude_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QMap<QString, QString> item;
                m_exclude_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_exclude_isSet = !jval.isNull() && m_exclude_isValid;
                m_exclude.push_back(item);
            }
        }
    }

    if(json["include"].isArray()){
        auto arr = json["include"].toArray();
        m_include_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QMap<QString, QString> item;
                m_include_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_include_isSet = !jval.isNull() && m_include_isValid;
                m_include.push_back(item);
            }
        }
    }
}

QString OAIFiltering::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFiltering::asJsonObject() const {
    QJsonObject obj;
    if (m_exclude.size() > 0) {
        
        obj.insert(QString("exclude"), toJsonValue(m_exclude));
    }
    if (m_include.size() > 0) {
        
        obj.insert(QString("include"), toJsonValue(m_include));
    }
    return obj;
}

QList<QMap<QString, QString>> OAIFiltering::getExclude() const {
    return m_exclude;
}
void OAIFiltering::setExclude(const QList<QMap<QString, QString>> &exclude) {
    m_exclude = exclude;
    m_exclude_isSet = true;
}

bool OAIFiltering::is_exclude_Set() const{
    return m_exclude_isSet;
}

bool OAIFiltering::is_exclude_Valid() const{
    return m_exclude_isValid;
}

QList<QMap<QString, QString>> OAIFiltering::getInclude() const {
    return m_include;
}
void OAIFiltering::setInclude(const QList<QMap<QString, QString>> &include) {
    m_include = include;
    m_include_isSet = true;
}

bool OAIFiltering::is_include_Set() const{
    return m_include_isSet;
}

bool OAIFiltering::is_include_Valid() const{
    return m_include_isValid;
}

bool OAIFiltering::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_exclude.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_include.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFiltering::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
