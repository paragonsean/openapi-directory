/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWhebhookConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWhebhookConfig::OAIWhebhookConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWhebhookConfig::OAIWhebhookConfig() {
    this->initializeModel();
}

OAIWhebhookConfig::~OAIWhebhookConfig() {}

void OAIWhebhookConfig::initializeModel() {

    m_headers_isSet = false;
    m_headers_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIWhebhookConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWhebhookConfig::fromJsonObject(QJsonObject json) {

    m_headers_isValid = ::OpenAPI::fromJsonValue(m_headers, json[QString("headers")]);
    m_headers_isSet = !json[QString("headers")].isNull() && m_headers_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIWhebhookConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWhebhookConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_headers.size() > 0) {
        obj.insert(QString("headers"), ::OpenAPI::toJsonValue(m_headers));
    }
    if (m_url.size() > 0) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QMap<QString, QString> OAIWhebhookConfig::getHeaders() const {
    return m_headers;
}
void OAIWhebhookConfig::setHeaders(const QMap<QString, QString> &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAIWhebhookConfig::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAIWhebhookConfig::is_headers_Valid() const{
    return m_headers_isValid;
}

QList<QString> OAIWhebhookConfig::getUrl() const {
    return m_url;
}
void OAIWhebhookConfig::setUrl(const QList<QString> &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIWhebhookConfig::is_url_Set() const{
    return m_url_isSet;
}

bool OAIWhebhookConfig::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIWhebhookConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_url.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWhebhookConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
