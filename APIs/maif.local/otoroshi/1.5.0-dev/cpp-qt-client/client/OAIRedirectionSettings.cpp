/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRedirectionSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRedirectionSettings::OAIRedirectionSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRedirectionSettings::OAIRedirectionSettings() {
    this->initializeModel();
}

OAIRedirectionSettings::~OAIRedirectionSettings() {}

void OAIRedirectionSettings::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;
}

void OAIRedirectionSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRedirectionSettings::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;
}

QString OAIRedirectionSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRedirectionSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    return obj;
}

qint32 OAIRedirectionSettings::getCode() const {
    return m_code;
}
void OAIRedirectionSettings::setCode(const qint32 &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIRedirectionSettings::is_code_Set() const{
    return m_code_isSet;
}

bool OAIRedirectionSettings::is_code_Valid() const{
    return m_code_isValid;
}

bool OAIRedirectionSettings::isEnabled() const {
    return m_enabled;
}
void OAIRedirectionSettings::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIRedirectionSettings::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIRedirectionSettings::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAIRedirectionSettings::getTo() const {
    return m_to;
}
void OAIRedirectionSettings::setTo(const QString &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAIRedirectionSettings::is_to_Set() const{
    return m_to_isSet;
}

bool OAIRedirectionSettings::is_to_Valid() const{
    return m_to_isValid;
}

bool OAIRedirectionSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRedirectionSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_code_isValid && m_enabled_isValid && m_to_isValid && true;
}

} // namespace OpenAPI
