/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImportExport_apiKeys_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImportExport_apiKeys_inner::OAIImportExport_apiKeys_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImportExport_apiKeys_inner::OAIImportExport_apiKeys_inner() {
    this->initializeModel();
}

OAIImportExport_apiKeys_inner::~OAIImportExport_apiKeys_inner() {}

void OAIImportExport_apiKeys_inner::initializeModel() {

    m_authorized_entities_isSet = false;
    m_authorized_entities_isValid = false;

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_client_name_isSet = false;
    m_client_name_isValid = false;

    m_client_secret_isSet = false;
    m_client_secret_isValid = false;

    m_daily_quota_isSet = false;
    m_daily_quota_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_monthly_quota_isSet = false;
    m_monthly_quota_isValid = false;

    m_throttling_quota_isSet = false;
    m_throttling_quota_isValid = false;
}

void OAIImportExport_apiKeys_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImportExport_apiKeys_inner::fromJsonObject(QJsonObject json) {

    m_authorized_entities_isValid = ::OpenAPI::fromJsonValue(m_authorized_entities, json[QString("authorizedEntities")]);
    m_authorized_entities_isSet = !json[QString("authorizedEntities")].isNull() && m_authorized_entities_isValid;

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("clientId")]);
    m_client_id_isSet = !json[QString("clientId")].isNull() && m_client_id_isValid;

    m_client_name_isValid = ::OpenAPI::fromJsonValue(m_client_name, json[QString("clientName")]);
    m_client_name_isSet = !json[QString("clientName")].isNull() && m_client_name_isValid;

    m_client_secret_isValid = ::OpenAPI::fromJsonValue(m_client_secret, json[QString("clientSecret")]);
    m_client_secret_isSet = !json[QString("clientSecret")].isNull() && m_client_secret_isValid;

    m_daily_quota_isValid = ::OpenAPI::fromJsonValue(m_daily_quota, json[QString("dailyQuota")]);
    m_daily_quota_isSet = !json[QString("dailyQuota")].isNull() && m_daily_quota_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_monthly_quota_isValid = ::OpenAPI::fromJsonValue(m_monthly_quota, json[QString("monthlyQuota")]);
    m_monthly_quota_isSet = !json[QString("monthlyQuota")].isNull() && m_monthly_quota_isValid;

    m_throttling_quota_isValid = ::OpenAPI::fromJsonValue(m_throttling_quota, json[QString("throttlingQuota")]);
    m_throttling_quota_isSet = !json[QString("throttlingQuota")].isNull() && m_throttling_quota_isValid;
}

QString OAIImportExport_apiKeys_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImportExport_apiKeys_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_authorized_entities.size() > 0) {
        obj.insert(QString("authorizedEntities"), ::OpenAPI::toJsonValue(m_authorized_entities));
    }
    if (m_client_id_isSet) {
        obj.insert(QString("clientId"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_client_name_isSet) {
        obj.insert(QString("clientName"), ::OpenAPI::toJsonValue(m_client_name));
    }
    if (m_client_secret_isSet) {
        obj.insert(QString("clientSecret"), ::OpenAPI::toJsonValue(m_client_secret));
    }
    if (m_daily_quota_isSet) {
        obj.insert(QString("dailyQuota"), ::OpenAPI::toJsonValue(m_daily_quota));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_monthly_quota_isSet) {
        obj.insert(QString("monthlyQuota"), ::OpenAPI::toJsonValue(m_monthly_quota));
    }
    if (m_throttling_quota_isSet) {
        obj.insert(QString("throttlingQuota"), ::OpenAPI::toJsonValue(m_throttling_quota));
    }
    return obj;
}

QList<QString> OAIImportExport_apiKeys_inner::getAuthorizedEntities() const {
    return m_authorized_entities;
}
void OAIImportExport_apiKeys_inner::setAuthorizedEntities(const QList<QString> &authorized_entities) {
    m_authorized_entities = authorized_entities;
    m_authorized_entities_isSet = true;
}

bool OAIImportExport_apiKeys_inner::is_authorized_entities_Set() const{
    return m_authorized_entities_isSet;
}

bool OAIImportExport_apiKeys_inner::is_authorized_entities_Valid() const{
    return m_authorized_entities_isValid;
}

QString OAIImportExport_apiKeys_inner::getClientId() const {
    return m_client_id;
}
void OAIImportExport_apiKeys_inner::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIImportExport_apiKeys_inner::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIImportExport_apiKeys_inner::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIImportExport_apiKeys_inner::getClientName() const {
    return m_client_name;
}
void OAIImportExport_apiKeys_inner::setClientName(const QString &client_name) {
    m_client_name = client_name;
    m_client_name_isSet = true;
}

bool OAIImportExport_apiKeys_inner::is_client_name_Set() const{
    return m_client_name_isSet;
}

bool OAIImportExport_apiKeys_inner::is_client_name_Valid() const{
    return m_client_name_isValid;
}

QString OAIImportExport_apiKeys_inner::getClientSecret() const {
    return m_client_secret;
}
void OAIImportExport_apiKeys_inner::setClientSecret(const QString &client_secret) {
    m_client_secret = client_secret;
    m_client_secret_isSet = true;
}

bool OAIImportExport_apiKeys_inner::is_client_secret_Set() const{
    return m_client_secret_isSet;
}

bool OAIImportExport_apiKeys_inner::is_client_secret_Valid() const{
    return m_client_secret_isValid;
}

qint64 OAIImportExport_apiKeys_inner::getDailyQuota() const {
    return m_daily_quota;
}
void OAIImportExport_apiKeys_inner::setDailyQuota(const qint64 &daily_quota) {
    m_daily_quota = daily_quota;
    m_daily_quota_isSet = true;
}

bool OAIImportExport_apiKeys_inner::is_daily_quota_Set() const{
    return m_daily_quota_isSet;
}

bool OAIImportExport_apiKeys_inner::is_daily_quota_Valid() const{
    return m_daily_quota_isValid;
}

bool OAIImportExport_apiKeys_inner::isEnabled() const {
    return m_enabled;
}
void OAIImportExport_apiKeys_inner::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIImportExport_apiKeys_inner::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIImportExport_apiKeys_inner::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QMap<QString, QString> OAIImportExport_apiKeys_inner::getMetadata() const {
    return m_metadata;
}
void OAIImportExport_apiKeys_inner::setMetadata(const QMap<QString, QString> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIImportExport_apiKeys_inner::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIImportExport_apiKeys_inner::is_metadata_Valid() const{
    return m_metadata_isValid;
}

qint64 OAIImportExport_apiKeys_inner::getMonthlyQuota() const {
    return m_monthly_quota;
}
void OAIImportExport_apiKeys_inner::setMonthlyQuota(const qint64 &monthly_quota) {
    m_monthly_quota = monthly_quota;
    m_monthly_quota_isSet = true;
}

bool OAIImportExport_apiKeys_inner::is_monthly_quota_Set() const{
    return m_monthly_quota_isSet;
}

bool OAIImportExport_apiKeys_inner::is_monthly_quota_Valid() const{
    return m_monthly_quota_isValid;
}

qint64 OAIImportExport_apiKeys_inner::getThrottlingQuota() const {
    return m_throttling_quota;
}
void OAIImportExport_apiKeys_inner::setThrottlingQuota(const qint64 &throttling_quota) {
    m_throttling_quota = throttling_quota;
    m_throttling_quota_isSet = true;
}

bool OAIImportExport_apiKeys_inner::is_throttling_quota_Set() const{
    return m_throttling_quota_isSet;
}

bool OAIImportExport_apiKeys_inner::is_throttling_quota_Valid() const{
    return m_throttling_quota_isValid;
}

bool OAIImportExport_apiKeys_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authorized_entities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_daily_quota_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_monthly_quota_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_throttling_quota_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImportExport_apiKeys_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_authorized_entities_isValid && m_client_id_isValid && m_client_name_isValid && m_client_secret_isValid && m_enabled_isValid && true;
}

} // namespace OpenAPI
