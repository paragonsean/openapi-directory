/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAuthConfigApi_H
#define OAI_OAIAuthConfigApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDeleted.h"
#include "OAIFindAllGlobalAuthModules_200_response_inner.h"
#include "OAIPatch_inner.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAuthConfigApi : public QObject {
    Q_OBJECT

public:
    OAIAuthConfigApi(const int timeOut = 0);
    ~OAIAuthConfigApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_find_all_global_auth_modules_200_response_inner OAIFindAllGlobalAuthModules_200_response_inner [optional]
    */
    virtual void createGlobalAuthModule(const ::OpenAPI::OptionalParam<OAIFindAllGlobalAuthModules_200_response_inner> &oai_find_all_global_auth_modules_200_response_inner = ::OpenAPI::OptionalParam<OAIFindAllGlobalAuthModules_200_response_inner>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void deleteGlobalAuthModule(const QString &id);


    virtual void findAllGlobalAuthModules();

    /**
    * @param[in]  id QString [required]
    */
    virtual void findGlobalAuthModuleById(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_patch_inner QList<OAIPatch_inner> [optional]
    */
    virtual void patchGlobalAuthModule(const QString &id, const ::OpenAPI::OptionalParam<QList<OAIPatch_inner>> &oai_patch_inner = ::OpenAPI::OptionalParam<QList<OAIPatch_inner>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_find_all_global_auth_modules_200_response_inner OAIFindAllGlobalAuthModules_200_response_inner [optional]
    */
    virtual void updateGlobalAuthModule(const QString &id, const ::OpenAPI::OptionalParam<OAIFindAllGlobalAuthModules_200_response_inner> &oai_find_all_global_auth_modules_200_response_inner = ::OpenAPI::OptionalParam<OAIFindAllGlobalAuthModules_200_response_inner>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createGlobalAuthModuleCallback(OAIHttpRequestWorker *worker);
    void deleteGlobalAuthModuleCallback(OAIHttpRequestWorker *worker);
    void findAllGlobalAuthModulesCallback(OAIHttpRequestWorker *worker);
    void findGlobalAuthModuleByIdCallback(OAIHttpRequestWorker *worker);
    void patchGlobalAuthModuleCallback(OAIHttpRequestWorker *worker);
    void updateGlobalAuthModuleCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createGlobalAuthModuleSignal(OAIFindAllGlobalAuthModules_200_response_inner summary);
    void deleteGlobalAuthModuleSignal(OAIDeleted summary);
    void findAllGlobalAuthModulesSignal(QList<OAIFindAllGlobalAuthModules_200_response_inner> summary);
    void findGlobalAuthModuleByIdSignal(OAIFindAllGlobalAuthModules_200_response_inner summary);
    void patchGlobalAuthModuleSignal(OAIFindAllGlobalAuthModules_200_response_inner summary);
    void updateGlobalAuthModuleSignal(OAIFindAllGlobalAuthModules_200_response_inner summary);


    void createGlobalAuthModuleSignalFull(OAIHttpRequestWorker *worker, OAIFindAllGlobalAuthModules_200_response_inner summary);
    void deleteGlobalAuthModuleSignalFull(OAIHttpRequestWorker *worker, OAIDeleted summary);
    void findAllGlobalAuthModulesSignalFull(OAIHttpRequestWorker *worker, QList<OAIFindAllGlobalAuthModules_200_response_inner> summary);
    void findGlobalAuthModuleByIdSignalFull(OAIHttpRequestWorker *worker, OAIFindAllGlobalAuthModules_200_response_inner summary);
    void patchGlobalAuthModuleSignalFull(OAIHttpRequestWorker *worker, OAIFindAllGlobalAuthModules_200_response_inner summary);
    void updateGlobalAuthModuleSignalFull(OAIHttpRequestWorker *worker, OAIFindAllGlobalAuthModules_200_response_inner summary);

    Q_DECL_DEPRECATED_X("Use createGlobalAuthModuleSignalError() instead")
    void createGlobalAuthModuleSignalE(OAIFindAllGlobalAuthModules_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createGlobalAuthModuleSignalError(OAIFindAllGlobalAuthModules_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteGlobalAuthModuleSignalError() instead")
    void deleteGlobalAuthModuleSignalE(OAIDeleted summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteGlobalAuthModuleSignalError(OAIDeleted summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findAllGlobalAuthModulesSignalError() instead")
    void findAllGlobalAuthModulesSignalE(QList<OAIFindAllGlobalAuthModules_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findAllGlobalAuthModulesSignalError(QList<OAIFindAllGlobalAuthModules_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findGlobalAuthModuleByIdSignalError() instead")
    void findGlobalAuthModuleByIdSignalE(OAIFindAllGlobalAuthModules_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findGlobalAuthModuleByIdSignalError(OAIFindAllGlobalAuthModules_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchGlobalAuthModuleSignalError() instead")
    void patchGlobalAuthModuleSignalE(OAIFindAllGlobalAuthModules_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchGlobalAuthModuleSignalError(OAIFindAllGlobalAuthModules_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGlobalAuthModuleSignalError() instead")
    void updateGlobalAuthModuleSignalE(OAIFindAllGlobalAuthModules_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGlobalAuthModuleSignalError(OAIFindAllGlobalAuthModules_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createGlobalAuthModuleSignalErrorFull() instead")
    void createGlobalAuthModuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createGlobalAuthModuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteGlobalAuthModuleSignalErrorFull() instead")
    void deleteGlobalAuthModuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteGlobalAuthModuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findAllGlobalAuthModulesSignalErrorFull() instead")
    void findAllGlobalAuthModulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findAllGlobalAuthModulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findGlobalAuthModuleByIdSignalErrorFull() instead")
    void findGlobalAuthModuleByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findGlobalAuthModuleByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchGlobalAuthModuleSignalErrorFull() instead")
    void patchGlobalAuthModuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchGlobalAuthModuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGlobalAuthModuleSignalErrorFull() instead")
    void updateGlobalAuthModuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGlobalAuthModuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
