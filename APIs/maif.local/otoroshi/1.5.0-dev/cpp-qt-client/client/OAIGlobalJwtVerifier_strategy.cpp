/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGlobalJwtVerifier_strategy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGlobalJwtVerifier_strategy::OAIGlobalJwtVerifier_strategy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGlobalJwtVerifier_strategy::OAIGlobalJwtVerifier_strategy() {
    this->initializeModel();
}

OAIGlobalJwtVerifier_strategy::~OAIGlobalJwtVerifier_strategy() {}

void OAIGlobalJwtVerifier_strategy::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_verification_settings_isSet = false;
    m_verification_settings_isValid = false;

    m_algo_settings_isSet = false;
    m_algo_settings_isValid = false;

    m_transform_settings_isSet = false;
    m_transform_settings_isValid = false;
}

void OAIGlobalJwtVerifier_strategy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGlobalJwtVerifier_strategy::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_verification_settings_isValid = ::OpenAPI::fromJsonValue(m_verification_settings, json[QString("verificationSettings")]);
    m_verification_settings_isSet = !json[QString("verificationSettings")].isNull() && m_verification_settings_isValid;

    m_algo_settings_isValid = ::OpenAPI::fromJsonValue(m_algo_settings, json[QString("algoSettings")]);
    m_algo_settings_isSet = !json[QString("algoSettings")].isNull() && m_algo_settings_isValid;

    m_transform_settings_isValid = ::OpenAPI::fromJsonValue(m_transform_settings, json[QString("transformSettings")]);
    m_transform_settings_isSet = !json[QString("transformSettings")].isNull() && m_transform_settings_isValid;
}

QString OAIGlobalJwtVerifier_strategy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGlobalJwtVerifier_strategy::asJsonObject() const {
    QJsonObject obj;
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_verification_settings.isSet()) {
        obj.insert(QString("verificationSettings"), ::OpenAPI::toJsonValue(m_verification_settings));
    }
    if (m_algo_settings.isSet()) {
        obj.insert(QString("algoSettings"), ::OpenAPI::toJsonValue(m_algo_settings));
    }
    if (m_transform_settings.isSet()) {
        obj.insert(QString("transformSettings"), ::OpenAPI::toJsonValue(m_transform_settings));
    }
    return obj;
}

QString OAIGlobalJwtVerifier_strategy::getType() const {
    return m_type;
}
void OAIGlobalJwtVerifier_strategy::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGlobalJwtVerifier_strategy::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGlobalJwtVerifier_strategy::is_type_Valid() const{
    return m_type_isValid;
}

OAIVerificationSettings OAIGlobalJwtVerifier_strategy::getVerificationSettings() const {
    return m_verification_settings;
}
void OAIGlobalJwtVerifier_strategy::setVerificationSettings(const OAIVerificationSettings &verification_settings) {
    m_verification_settings = verification_settings;
    m_verification_settings_isSet = true;
}

bool OAIGlobalJwtVerifier_strategy::is_verification_settings_Set() const{
    return m_verification_settings_isSet;
}

bool OAIGlobalJwtVerifier_strategy::is_verification_settings_Valid() const{
    return m_verification_settings_isValid;
}

OAIGlobalJwtVerifier_algoSettings OAIGlobalJwtVerifier_strategy::getAlgoSettings() const {
    return m_algo_settings;
}
void OAIGlobalJwtVerifier_strategy::setAlgoSettings(const OAIGlobalJwtVerifier_algoSettings &algo_settings) {
    m_algo_settings = algo_settings;
    m_algo_settings_isSet = true;
}

bool OAIGlobalJwtVerifier_strategy::is_algo_settings_Set() const{
    return m_algo_settings_isSet;
}

bool OAIGlobalJwtVerifier_strategy::is_algo_settings_Valid() const{
    return m_algo_settings_isValid;
}

OAITransformSettings OAIGlobalJwtVerifier_strategy::getTransformSettings() const {
    return m_transform_settings;
}
void OAIGlobalJwtVerifier_strategy::setTransformSettings(const OAITransformSettings &transform_settings) {
    m_transform_settings = transform_settings;
    m_transform_settings_isSet = true;
}

bool OAIGlobalJwtVerifier_strategy::is_transform_settings_Set() const{
    return m_transform_settings_isSet;
}

bool OAIGlobalJwtVerifier_strategy::is_transform_settings_Valid() const{
    return m_transform_settings_isValid;
}

bool OAIGlobalJwtVerifier_strategy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verification_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_algo_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transform_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGlobalJwtVerifier_strategy::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && m_verification_settings_isValid && m_algo_settings_isValid && true;
}

} // namespace OpenAPI
