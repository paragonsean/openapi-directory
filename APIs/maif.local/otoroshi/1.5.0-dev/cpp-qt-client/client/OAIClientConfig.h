/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIClientConfig.h
 *
 * The configuration of the circuit breaker for a service descriptor
 */

#ifndef OAIClientConfig_H
#define OAIClientConfig_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIClientConfig : public OAIObject {
public:
    OAIClientConfig();
    OAIClientConfig(QString json);
    ~OAIClientConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getBackoffFactor() const;
    void setBackoffFactor(const qint32 &backoff_factor);
    bool is_backoff_factor_Set() const;
    bool is_backoff_factor_Valid() const;

    qint32 getCallTimeout() const;
    void setCallTimeout(const qint32 &call_timeout);
    bool is_call_timeout_Set() const;
    bool is_call_timeout_Valid() const;

    qint32 getGlobalTimeout() const;
    void setGlobalTimeout(const qint32 &global_timeout);
    bool is_global_timeout_Set() const;
    bool is_global_timeout_Valid() const;

    qint32 getMaxErrors() const;
    void setMaxErrors(const qint32 &max_errors);
    bool is_max_errors_Set() const;
    bool is_max_errors_Valid() const;

    qint32 getRetries() const;
    void setRetries(const qint32 &retries);
    bool is_retries_Set() const;
    bool is_retries_Valid() const;

    qint32 getRetryInitialDelay() const;
    void setRetryInitialDelay(const qint32 &retry_initial_delay);
    bool is_retry_initial_delay_Set() const;
    bool is_retry_initial_delay_Valid() const;

    qint32 getSampleInterval() const;
    void setSampleInterval(const qint32 &sample_interval);
    bool is_sample_interval_Set() const;
    bool is_sample_interval_Valid() const;

    bool isUseCircuitBreaker() const;
    void setUseCircuitBreaker(const bool &use_circuit_breaker);
    bool is_use_circuit_breaker_Set() const;
    bool is_use_circuit_breaker_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_backoff_factor;
    bool m_backoff_factor_isSet;
    bool m_backoff_factor_isValid;

    qint32 m_call_timeout;
    bool m_call_timeout_isSet;
    bool m_call_timeout_isValid;

    qint32 m_global_timeout;
    bool m_global_timeout_isSet;
    bool m_global_timeout_isValid;

    qint32 m_max_errors;
    bool m_max_errors_isSet;
    bool m_max_errors_isValid;

    qint32 m_retries;
    bool m_retries_isSet;
    bool m_retries_isValid;

    qint32 m_retry_initial_delay;
    bool m_retry_initial_delay_isSet;
    bool m_retry_initial_delay_isValid;

    qint32 m_sample_interval;
    bool m_sample_interval_isSet;
    bool m_sample_interval_isValid;

    bool m_use_circuit_breaker;
    bool m_use_circuit_breaker_isSet;
    bool m_use_circuit_breaker_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIClientConfig)

#endif // OAIClientConfig_H
