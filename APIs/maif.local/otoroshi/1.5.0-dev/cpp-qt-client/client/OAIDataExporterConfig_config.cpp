/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataExporterConfig_config.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataExporterConfig_config::OAIDataExporterConfig_config(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataExporterConfig_config::OAIDataExporterConfig_config() {
    this->initializeModel();
}

OAIDataExporterConfig_config::~OAIDataExporterConfig_config() {}

void OAIDataExporterConfig_config::initializeModel() {

    m_cluster_uri_isSet = false;
    m_cluster_uri_isValid = false;

    m_headers_isSet = false;
    m_headers_isValid = false;

    m_index_isSet = false;
    m_index_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_key_pass_isSet = false;
    m_key_pass_isValid = false;

    m_key_store_isSet = false;
    m_key_store_isValid = false;

    m_servers_isSet = false;
    m_servers_isValid = false;

    m_topic_isSet = false;
    m_topic_isValid = false;

    m_trustore_isSet = false;
    m_trustore_isValid = false;

    m_r_namespace_isSet = false;
    m_r_namespace_isValid = false;

    m_tenant_isSet = false;
    m_tenant_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_api_key_isSet = false;
    m_api_key_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_eu_isSet = false;
    m_eu_isValid = false;

    m_api_key_private_isSet = false;
    m_api_key_private_isValid = false;

    m_api_key_public_isSet = false;
    m_api_key_public_isValid = false;

    m_config_isSet = false;
    m_config_isValid = false;

    m_ref_isSet = false;
    m_ref_isValid = false;
}

void OAIDataExporterConfig_config::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataExporterConfig_config::fromJsonObject(QJsonObject json) {

    m_cluster_uri_isValid = ::OpenAPI::fromJsonValue(m_cluster_uri, json[QString("clusterUri")]);
    m_cluster_uri_isSet = !json[QString("clusterUri")].isNull() && m_cluster_uri_isValid;

    m_headers_isValid = ::OpenAPI::fromJsonValue(m_headers, json[QString("headers")]);
    m_headers_isSet = !json[QString("headers")].isNull() && m_headers_isValid;

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_key_pass_isValid = ::OpenAPI::fromJsonValue(m_key_pass, json[QString("keyPass")]);
    m_key_pass_isSet = !json[QString("keyPass")].isNull() && m_key_pass_isValid;

    m_key_store_isValid = ::OpenAPI::fromJsonValue(m_key_store, json[QString("keyStore")]);
    m_key_store_isSet = !json[QString("keyStore")].isNull() && m_key_store_isValid;

    m_servers_isValid = ::OpenAPI::fromJsonValue(m_servers, json[QString("servers")]);
    m_servers_isSet = !json[QString("servers")].isNull() && m_servers_isValid;

    m_topic_isValid = ::OpenAPI::fromJsonValue(m_topic, json[QString("topic")]);
    m_topic_isSet = !json[QString("topic")].isNull() && m_topic_isValid;

    m_trustore_isValid = ::OpenAPI::fromJsonValue(m_trustore, json[QString("trustore")]);
    m_trustore_isSet = !json[QString("trustore")].isNull() && m_trustore_isValid;

    m_r_namespace_isValid = ::OpenAPI::fromJsonValue(m_r_namespace, json[QString("namespace")]);
    m_r_namespace_isSet = !json[QString("namespace")].isNull() && m_r_namespace_isValid;

    m_tenant_isValid = ::OpenAPI::fromJsonValue(m_tenant, json[QString("tenant")]);
    m_tenant_isSet = !json[QString("tenant")].isNull() && m_tenant_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_api_key_isValid = ::OpenAPI::fromJsonValue(m_api_key, json[QString("apiKey")]);
    m_api_key_isSet = !json[QString("apiKey")].isNull() && m_api_key_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_eu_isValid = ::OpenAPI::fromJsonValue(m_eu, json[QString("eu")]);
    m_eu_isSet = !json[QString("eu")].isNull() && m_eu_isValid;

    m_api_key_private_isValid = ::OpenAPI::fromJsonValue(m_api_key_private, json[QString("apiKeyPrivate")]);
    m_api_key_private_isSet = !json[QString("apiKeyPrivate")].isNull() && m_api_key_private_isValid;

    m_api_key_public_isValid = ::OpenAPI::fromJsonValue(m_api_key_public, json[QString("apiKeyPublic")]);
    m_api_key_public_isSet = !json[QString("apiKeyPublic")].isNull() && m_api_key_public_isValid;

    m_config_isValid = ::OpenAPI::fromJsonValue(m_config, json[QString("config")]);
    m_config_isSet = !json[QString("config")].isNull() && m_config_isValid;

    m_ref_isValid = ::OpenAPI::fromJsonValue(m_ref, json[QString("ref")]);
    m_ref_isSet = !json[QString("ref")].isNull() && m_ref_isValid;
}

QString OAIDataExporterConfig_config::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataExporterConfig_config::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_uri_isSet) {
        obj.insert(QString("clusterUri"), ::OpenAPI::toJsonValue(m_cluster_uri));
    }
    if (m_headers.size() > 0) {
        obj.insert(QString("headers"), ::OpenAPI::toJsonValue(m_headers));
    }
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_user_isSet) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_key_pass_isSet) {
        obj.insert(QString("keyPass"), ::OpenAPI::toJsonValue(m_key_pass));
    }
    if (m_key_store_isSet) {
        obj.insert(QString("keyStore"), ::OpenAPI::toJsonValue(m_key_store));
    }
    if (m_servers.size() > 0) {
        obj.insert(QString("servers"), ::OpenAPI::toJsonValue(m_servers));
    }
    if (m_topic_isSet) {
        obj.insert(QString("topic"), ::OpenAPI::toJsonValue(m_topic));
    }
    if (m_trustore_isSet) {
        obj.insert(QString("trustore"), ::OpenAPI::toJsonValue(m_trustore));
    }
    if (m_r_namespace_isSet) {
        obj.insert(QString("namespace"), ::OpenAPI::toJsonValue(m_r_namespace));
    }
    if (m_tenant_isSet) {
        obj.insert(QString("tenant"), ::OpenAPI::toJsonValue(m_tenant));
    }
    if (m_uri.size() > 0) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_to.size() > 0) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_api_key_isSet) {
        obj.insert(QString("apiKey"), ::OpenAPI::toJsonValue(m_api_key));
    }
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_eu_isSet) {
        obj.insert(QString("eu"), ::OpenAPI::toJsonValue(m_eu));
    }
    if (m_api_key_private_isSet) {
        obj.insert(QString("apiKeyPrivate"), ::OpenAPI::toJsonValue(m_api_key_private));
    }
    if (m_api_key_public_isSet) {
        obj.insert(QString("apiKeyPublic"), ::OpenAPI::toJsonValue(m_api_key_public));
    }
    if (m_config.size() > 0) {
        obj.insert(QString("config"), ::OpenAPI::toJsonValue(m_config));
    }
    if (m_ref_isSet) {
        obj.insert(QString("ref"), ::OpenAPI::toJsonValue(m_ref));
    }
    return obj;
}

QString OAIDataExporterConfig_config::getClusterUri() const {
    return m_cluster_uri;
}
void OAIDataExporterConfig_config::setClusterUri(const QString &cluster_uri) {
    m_cluster_uri = cluster_uri;
    m_cluster_uri_isSet = true;
}

bool OAIDataExporterConfig_config::is_cluster_uri_Set() const{
    return m_cluster_uri_isSet;
}

bool OAIDataExporterConfig_config::is_cluster_uri_Valid() const{
    return m_cluster_uri_isValid;
}

QMap<QString, QString> OAIDataExporterConfig_config::getHeaders() const {
    return m_headers;
}
void OAIDataExporterConfig_config::setHeaders(const QMap<QString, QString> &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAIDataExporterConfig_config::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAIDataExporterConfig_config::is_headers_Valid() const{
    return m_headers_isValid;
}

QString OAIDataExporterConfig_config::getIndex() const {
    return m_index;
}
void OAIDataExporterConfig_config::setIndex(const QString &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAIDataExporterConfig_config::is_index_Set() const{
    return m_index_isSet;
}

bool OAIDataExporterConfig_config::is_index_Valid() const{
    return m_index_isValid;
}

QString OAIDataExporterConfig_config::getPassword() const {
    return m_password;
}
void OAIDataExporterConfig_config::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIDataExporterConfig_config::is_password_Set() const{
    return m_password_isSet;
}

bool OAIDataExporterConfig_config::is_password_Valid() const{
    return m_password_isValid;
}

QString OAIDataExporterConfig_config::getType() const {
    return m_type;
}
void OAIDataExporterConfig_config::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDataExporterConfig_config::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDataExporterConfig_config::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIDataExporterConfig_config::getUser() const {
    return m_user;
}
void OAIDataExporterConfig_config::setUser(const QString &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIDataExporterConfig_config::is_user_Set() const{
    return m_user_isSet;
}

bool OAIDataExporterConfig_config::is_user_Valid() const{
    return m_user_isValid;
}

QString OAIDataExporterConfig_config::getKeyPass() const {
    return m_key_pass;
}
void OAIDataExporterConfig_config::setKeyPass(const QString &key_pass) {
    m_key_pass = key_pass;
    m_key_pass_isSet = true;
}

bool OAIDataExporterConfig_config::is_key_pass_Set() const{
    return m_key_pass_isSet;
}

bool OAIDataExporterConfig_config::is_key_pass_Valid() const{
    return m_key_pass_isValid;
}

QString OAIDataExporterConfig_config::getKeyStore() const {
    return m_key_store;
}
void OAIDataExporterConfig_config::setKeyStore(const QString &key_store) {
    m_key_store = key_store;
    m_key_store_isSet = true;
}

bool OAIDataExporterConfig_config::is_key_store_Set() const{
    return m_key_store_isSet;
}

bool OAIDataExporterConfig_config::is_key_store_Valid() const{
    return m_key_store_isValid;
}

QList<QString> OAIDataExporterConfig_config::getServers() const {
    return m_servers;
}
void OAIDataExporterConfig_config::setServers(const QList<QString> &servers) {
    m_servers = servers;
    m_servers_isSet = true;
}

bool OAIDataExporterConfig_config::is_servers_Set() const{
    return m_servers_isSet;
}

bool OAIDataExporterConfig_config::is_servers_Valid() const{
    return m_servers_isValid;
}

QString OAIDataExporterConfig_config::getTopic() const {
    return m_topic;
}
void OAIDataExporterConfig_config::setTopic(const QString &topic) {
    m_topic = topic;
    m_topic_isSet = true;
}

bool OAIDataExporterConfig_config::is_topic_Set() const{
    return m_topic_isSet;
}

bool OAIDataExporterConfig_config::is_topic_Valid() const{
    return m_topic_isValid;
}

QString OAIDataExporterConfig_config::getTrustore() const {
    return m_trustore;
}
void OAIDataExporterConfig_config::setTrustore(const QString &trustore) {
    m_trustore = trustore;
    m_trustore_isSet = true;
}

bool OAIDataExporterConfig_config::is_trustore_Set() const{
    return m_trustore_isSet;
}

bool OAIDataExporterConfig_config::is_trustore_Valid() const{
    return m_trustore_isValid;
}

QString OAIDataExporterConfig_config::getRNamespace() const {
    return m_r_namespace;
}
void OAIDataExporterConfig_config::setRNamespace(const QString &r_namespace) {
    m_r_namespace = r_namespace;
    m_r_namespace_isSet = true;
}

bool OAIDataExporterConfig_config::is_r_namespace_Set() const{
    return m_r_namespace_isSet;
}

bool OAIDataExporterConfig_config::is_r_namespace_Valid() const{
    return m_r_namespace_isValid;
}

QString OAIDataExporterConfig_config::getTenant() const {
    return m_tenant;
}
void OAIDataExporterConfig_config::setTenant(const QString &tenant) {
    m_tenant = tenant;
    m_tenant_isSet = true;
}

bool OAIDataExporterConfig_config::is_tenant_Set() const{
    return m_tenant_isSet;
}

bool OAIDataExporterConfig_config::is_tenant_Valid() const{
    return m_tenant_isValid;
}

QList<QString> OAIDataExporterConfig_config::getUri() const {
    return m_uri;
}
void OAIDataExporterConfig_config::setUri(const QList<QString> &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIDataExporterConfig_config::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIDataExporterConfig_config::is_uri_Valid() const{
    return m_uri_isValid;
}

QString OAIDataExporterConfig_config::getPath() const {
    return m_path;
}
void OAIDataExporterConfig_config::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIDataExporterConfig_config::is_path_Set() const{
    return m_path_isSet;
}

bool OAIDataExporterConfig_config::is_path_Valid() const{
    return m_path_isValid;
}

QList<QString> OAIDataExporterConfig_config::getTo() const {
    return m_to;
}
void OAIDataExporterConfig_config::setTo(const QList<QString> &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAIDataExporterConfig_config::is_to_Set() const{
    return m_to_isSet;
}

bool OAIDataExporterConfig_config::is_to_Valid() const{
    return m_to_isValid;
}

QString OAIDataExporterConfig_config::getUrl() const {
    return m_url;
}
void OAIDataExporterConfig_config::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIDataExporterConfig_config::is_url_Set() const{
    return m_url_isSet;
}

bool OAIDataExporterConfig_config::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIDataExporterConfig_config::getApiKey() const {
    return m_api_key;
}
void OAIDataExporterConfig_config::setApiKey(const QString &api_key) {
    m_api_key = api_key;
    m_api_key_isSet = true;
}

bool OAIDataExporterConfig_config::is_api_key_Set() const{
    return m_api_key_isSet;
}

bool OAIDataExporterConfig_config::is_api_key_Valid() const{
    return m_api_key_isValid;
}

QString OAIDataExporterConfig_config::getDomain() const {
    return m_domain;
}
void OAIDataExporterConfig_config::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIDataExporterConfig_config::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIDataExporterConfig_config::is_domain_Valid() const{
    return m_domain_isValid;
}

bool OAIDataExporterConfig_config::isEu() const {
    return m_eu;
}
void OAIDataExporterConfig_config::setEu(const bool &eu) {
    m_eu = eu;
    m_eu_isSet = true;
}

bool OAIDataExporterConfig_config::is_eu_Set() const{
    return m_eu_isSet;
}

bool OAIDataExporterConfig_config::is_eu_Valid() const{
    return m_eu_isValid;
}

QString OAIDataExporterConfig_config::getApiKeyPrivate() const {
    return m_api_key_private;
}
void OAIDataExporterConfig_config::setApiKeyPrivate(const QString &api_key_private) {
    m_api_key_private = api_key_private;
    m_api_key_private_isSet = true;
}

bool OAIDataExporterConfig_config::is_api_key_private_Set() const{
    return m_api_key_private_isSet;
}

bool OAIDataExporterConfig_config::is_api_key_private_Valid() const{
    return m_api_key_private_isValid;
}

QString OAIDataExporterConfig_config::getApiKeyPublic() const {
    return m_api_key_public;
}
void OAIDataExporterConfig_config::setApiKeyPublic(const QString &api_key_public) {
    m_api_key_public = api_key_public;
    m_api_key_public_isSet = true;
}

bool OAIDataExporterConfig_config::is_api_key_public_Set() const{
    return m_api_key_public_isSet;
}

bool OAIDataExporterConfig_config::is_api_key_public_Valid() const{
    return m_api_key_public_isValid;
}

QMap<QString, QString> OAIDataExporterConfig_config::getConfig() const {
    return m_config;
}
void OAIDataExporterConfig_config::setConfig(const QMap<QString, QString> &config) {
    m_config = config;
    m_config_isSet = true;
}

bool OAIDataExporterConfig_config::is_config_Set() const{
    return m_config_isSet;
}

bool OAIDataExporterConfig_config::is_config_Valid() const{
    return m_config_isValid;
}

QString OAIDataExporterConfig_config::getRef() const {
    return m_ref;
}
void OAIDataExporterConfig_config::setRef(const QString &ref) {
    m_ref = ref;
    m_ref_isSet = true;
}

bool OAIDataExporterConfig_config::is_ref_Set() const{
    return m_ref_isSet;
}

bool OAIDataExporterConfig_config::is_ref_Valid() const{
    return m_ref_isValid;
}

bool OAIDataExporterConfig_config::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_pass_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_store_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_servers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trustore_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eu_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_key_private_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_key_public_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_config.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataExporterConfig_config::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cluster_uri_isValid && m_headers_isValid && m_index_isValid && m_password_isValid && m_type_isValid && m_user_isValid && m_servers_isValid && m_topic_isValid && m_r_namespace_isValid && m_tenant_isValid && m_uri_isValid && m_path_isValid && m_config_isValid && m_ref_isValid && true;
}

} // namespace OpenAPI
