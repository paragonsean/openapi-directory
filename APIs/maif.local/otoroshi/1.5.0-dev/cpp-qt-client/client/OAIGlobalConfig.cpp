/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGlobalConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGlobalConfig::OAIGlobalConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGlobalConfig::OAIGlobalConfig() {
    this->initializeModel();
}

OAIGlobalConfig::~OAIGlobalConfig() {}

void OAIGlobalConfig::initializeModel() {

    m_alerts_emails_isSet = false;
    m_alerts_emails_isValid = false;

    m_alerts_webhooks_isSet = false;
    m_alerts_webhooks_isValid = false;

    m_analytics_webhooks_isSet = false;
    m_analytics_webhooks_isValid = false;

    m_api_read_only_isSet = false;
    m_api_read_only_isValid = false;

    m_auto_link_to_default_group_isSet = false;
    m_auto_link_to_default_group_isValid = false;

    m_backoffice_auth0_config_isSet = false;
    m_backoffice_auth0_config_isValid = false;

    m_clever_settings_isSet = false;
    m_clever_settings_isValid = false;

    m_elastic_reads_config_isSet = false;
    m_elastic_reads_config_isValid = false;

    m_elastic_writes_configs_isSet = false;
    m_elastic_writes_configs_isValid = false;

    m_endless_ip_addresses_isSet = false;
    m_endless_ip_addresses_isValid = false;

    m_ip_filtering_isSet = false;
    m_ip_filtering_isValid = false;

    m_limit_concurrent_requests_isSet = false;
    m_limit_concurrent_requests_isValid = false;

    m_lines_isSet = false;
    m_lines_isValid = false;

    m_mailer_settings_isSet = false;
    m_mailer_settings_isValid = false;

    m_max_concurrent_requests_isSet = false;
    m_max_concurrent_requests_isValid = false;

    m_max_http10_response_size_isSet = false;
    m_max_http10_response_size_isValid = false;

    m_max_logs_size_isSet = false;
    m_max_logs_size_isValid = false;

    m_middle_fingers_isSet = false;
    m_middle_fingers_isValid = false;

    m_per_ip_throttling_quota_isSet = false;
    m_per_ip_throttling_quota_isValid = false;

    m_private_apps_auth0_config_isSet = false;
    m_private_apps_auth0_config_isValid = false;

    m_stream_entity_only_isSet = false;
    m_stream_entity_only_isValid = false;

    m_throttling_quota_isSet = false;
    m_throttling_quota_isValid = false;

    m_u2f_login_only_isSet = false;
    m_u2f_login_only_isValid = false;

    m_use_circuit_breakers_isSet = false;
    m_use_circuit_breakers_isValid = false;
}

void OAIGlobalConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGlobalConfig::fromJsonObject(QJsonObject json) {

    m_alerts_emails_isValid = ::OpenAPI::fromJsonValue(m_alerts_emails, json[QString("alertsEmails")]);
    m_alerts_emails_isSet = !json[QString("alertsEmails")].isNull() && m_alerts_emails_isValid;

    m_alerts_webhooks_isValid = ::OpenAPI::fromJsonValue(m_alerts_webhooks, json[QString("alertsWebhooks")]);
    m_alerts_webhooks_isSet = !json[QString("alertsWebhooks")].isNull() && m_alerts_webhooks_isValid;

    m_analytics_webhooks_isValid = ::OpenAPI::fromJsonValue(m_analytics_webhooks, json[QString("analyticsWebhooks")]);
    m_analytics_webhooks_isSet = !json[QString("analyticsWebhooks")].isNull() && m_analytics_webhooks_isValid;

    m_api_read_only_isValid = ::OpenAPI::fromJsonValue(m_api_read_only, json[QString("apiReadOnly")]);
    m_api_read_only_isSet = !json[QString("apiReadOnly")].isNull() && m_api_read_only_isValid;

    m_auto_link_to_default_group_isValid = ::OpenAPI::fromJsonValue(m_auto_link_to_default_group, json[QString("autoLinkToDefaultGroup")]);
    m_auto_link_to_default_group_isSet = !json[QString("autoLinkToDefaultGroup")].isNull() && m_auto_link_to_default_group_isValid;

    m_backoffice_auth0_config_isValid = ::OpenAPI::fromJsonValue(m_backoffice_auth0_config, json[QString("backofficeAuth0Config")]);
    m_backoffice_auth0_config_isSet = !json[QString("backofficeAuth0Config")].isNull() && m_backoffice_auth0_config_isValid;

    m_clever_settings_isValid = ::OpenAPI::fromJsonValue(m_clever_settings, json[QString("cleverSettings")]);
    m_clever_settings_isSet = !json[QString("cleverSettings")].isNull() && m_clever_settings_isValid;

    m_elastic_reads_config_isValid = ::OpenAPI::fromJsonValue(m_elastic_reads_config, json[QString("elasticReadsConfig")]);
    m_elastic_reads_config_isSet = !json[QString("elasticReadsConfig")].isNull() && m_elastic_reads_config_isValid;

    m_elastic_writes_configs_isValid = ::OpenAPI::fromJsonValue(m_elastic_writes_configs, json[QString("elasticWritesConfigs")]);
    m_elastic_writes_configs_isSet = !json[QString("elasticWritesConfigs")].isNull() && m_elastic_writes_configs_isValid;

    m_endless_ip_addresses_isValid = ::OpenAPI::fromJsonValue(m_endless_ip_addresses, json[QString("endlessIpAddresses")]);
    m_endless_ip_addresses_isSet = !json[QString("endlessIpAddresses")].isNull() && m_endless_ip_addresses_isValid;

    m_ip_filtering_isValid = ::OpenAPI::fromJsonValue(m_ip_filtering, json[QString("ipFiltering")]);
    m_ip_filtering_isSet = !json[QString("ipFiltering")].isNull() && m_ip_filtering_isValid;

    m_limit_concurrent_requests_isValid = ::OpenAPI::fromJsonValue(m_limit_concurrent_requests, json[QString("limitConcurrentRequests")]);
    m_limit_concurrent_requests_isSet = !json[QString("limitConcurrentRequests")].isNull() && m_limit_concurrent_requests_isValid;

    m_lines_isValid = ::OpenAPI::fromJsonValue(m_lines, json[QString("lines")]);
    m_lines_isSet = !json[QString("lines")].isNull() && m_lines_isValid;

    m_mailer_settings_isValid = ::OpenAPI::fromJsonValue(m_mailer_settings, json[QString("mailerSettings")]);
    m_mailer_settings_isSet = !json[QString("mailerSettings")].isNull() && m_mailer_settings_isValid;

    m_max_concurrent_requests_isValid = ::OpenAPI::fromJsonValue(m_max_concurrent_requests, json[QString("maxConcurrentRequests")]);
    m_max_concurrent_requests_isSet = !json[QString("maxConcurrentRequests")].isNull() && m_max_concurrent_requests_isValid;

    m_max_http10_response_size_isValid = ::OpenAPI::fromJsonValue(m_max_http10_response_size, json[QString("maxHttp10ResponseSize")]);
    m_max_http10_response_size_isSet = !json[QString("maxHttp10ResponseSize")].isNull() && m_max_http10_response_size_isValid;

    m_max_logs_size_isValid = ::OpenAPI::fromJsonValue(m_max_logs_size, json[QString("maxLogsSize")]);
    m_max_logs_size_isSet = !json[QString("maxLogsSize")].isNull() && m_max_logs_size_isValid;

    m_middle_fingers_isValid = ::OpenAPI::fromJsonValue(m_middle_fingers, json[QString("middleFingers")]);
    m_middle_fingers_isSet = !json[QString("middleFingers")].isNull() && m_middle_fingers_isValid;

    m_per_ip_throttling_quota_isValid = ::OpenAPI::fromJsonValue(m_per_ip_throttling_quota, json[QString("perIpThrottlingQuota")]);
    m_per_ip_throttling_quota_isSet = !json[QString("perIpThrottlingQuota")].isNull() && m_per_ip_throttling_quota_isValid;

    m_private_apps_auth0_config_isValid = ::OpenAPI::fromJsonValue(m_private_apps_auth0_config, json[QString("privateAppsAuth0Config")]);
    m_private_apps_auth0_config_isSet = !json[QString("privateAppsAuth0Config")].isNull() && m_private_apps_auth0_config_isValid;

    m_stream_entity_only_isValid = ::OpenAPI::fromJsonValue(m_stream_entity_only, json[QString("streamEntityOnly")]);
    m_stream_entity_only_isSet = !json[QString("streamEntityOnly")].isNull() && m_stream_entity_only_isValid;

    m_throttling_quota_isValid = ::OpenAPI::fromJsonValue(m_throttling_quota, json[QString("throttlingQuota")]);
    m_throttling_quota_isSet = !json[QString("throttlingQuota")].isNull() && m_throttling_quota_isValid;

    m_u2f_login_only_isValid = ::OpenAPI::fromJsonValue(m_u2f_login_only, json[QString("u2fLoginOnly")]);
    m_u2f_login_only_isSet = !json[QString("u2fLoginOnly")].isNull() && m_u2f_login_only_isValid;

    m_use_circuit_breakers_isValid = ::OpenAPI::fromJsonValue(m_use_circuit_breakers, json[QString("useCircuitBreakers")]);
    m_use_circuit_breakers_isSet = !json[QString("useCircuitBreakers")].isNull() && m_use_circuit_breakers_isValid;
}

QString OAIGlobalConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGlobalConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_alerts_emails.size() > 0) {
        obj.insert(QString("alertsEmails"), ::OpenAPI::toJsonValue(m_alerts_emails));
    }
    if (m_alerts_webhooks.size() > 0) {
        obj.insert(QString("alertsWebhooks"), ::OpenAPI::toJsonValue(m_alerts_webhooks));
    }
    if (m_analytics_webhooks.size() > 0) {
        obj.insert(QString("analyticsWebhooks"), ::OpenAPI::toJsonValue(m_analytics_webhooks));
    }
    if (m_api_read_only_isSet) {
        obj.insert(QString("apiReadOnly"), ::OpenAPI::toJsonValue(m_api_read_only));
    }
    if (m_auto_link_to_default_group_isSet) {
        obj.insert(QString("autoLinkToDefaultGroup"), ::OpenAPI::toJsonValue(m_auto_link_to_default_group));
    }
    if (m_backoffice_auth0_config.isSet()) {
        obj.insert(QString("backofficeAuth0Config"), ::OpenAPI::toJsonValue(m_backoffice_auth0_config));
    }
    if (m_clever_settings.isSet()) {
        obj.insert(QString("cleverSettings"), ::OpenAPI::toJsonValue(m_clever_settings));
    }
    if (m_elastic_reads_config.isSet()) {
        obj.insert(QString("elasticReadsConfig"), ::OpenAPI::toJsonValue(m_elastic_reads_config));
    }
    if (m_elastic_writes_configs.size() > 0) {
        obj.insert(QString("elasticWritesConfigs"), ::OpenAPI::toJsonValue(m_elastic_writes_configs));
    }
    if (m_endless_ip_addresses.size() > 0) {
        obj.insert(QString("endlessIpAddresses"), ::OpenAPI::toJsonValue(m_endless_ip_addresses));
    }
    if (m_ip_filtering.isSet()) {
        obj.insert(QString("ipFiltering"), ::OpenAPI::toJsonValue(m_ip_filtering));
    }
    if (m_limit_concurrent_requests_isSet) {
        obj.insert(QString("limitConcurrentRequests"), ::OpenAPI::toJsonValue(m_limit_concurrent_requests));
    }
    if (m_lines.size() > 0) {
        obj.insert(QString("lines"), ::OpenAPI::toJsonValue(m_lines));
    }
    if (m_mailer_settings.isSet()) {
        obj.insert(QString("mailerSettings"), ::OpenAPI::toJsonValue(m_mailer_settings));
    }
    if (m_max_concurrent_requests_isSet) {
        obj.insert(QString("maxConcurrentRequests"), ::OpenAPI::toJsonValue(m_max_concurrent_requests));
    }
    if (m_max_http10_response_size_isSet) {
        obj.insert(QString("maxHttp10ResponseSize"), ::OpenAPI::toJsonValue(m_max_http10_response_size));
    }
    if (m_max_logs_size_isSet) {
        obj.insert(QString("maxLogsSize"), ::OpenAPI::toJsonValue(m_max_logs_size));
    }
    if (m_middle_fingers_isSet) {
        obj.insert(QString("middleFingers"), ::OpenAPI::toJsonValue(m_middle_fingers));
    }
    if (m_per_ip_throttling_quota_isSet) {
        obj.insert(QString("perIpThrottlingQuota"), ::OpenAPI::toJsonValue(m_per_ip_throttling_quota));
    }
    if (m_private_apps_auth0_config.isSet()) {
        obj.insert(QString("privateAppsAuth0Config"), ::OpenAPI::toJsonValue(m_private_apps_auth0_config));
    }
    if (m_stream_entity_only_isSet) {
        obj.insert(QString("streamEntityOnly"), ::OpenAPI::toJsonValue(m_stream_entity_only));
    }
    if (m_throttling_quota_isSet) {
        obj.insert(QString("throttlingQuota"), ::OpenAPI::toJsonValue(m_throttling_quota));
    }
    if (m_u2f_login_only_isSet) {
        obj.insert(QString("u2fLoginOnly"), ::OpenAPI::toJsonValue(m_u2f_login_only));
    }
    if (m_use_circuit_breakers_isSet) {
        obj.insert(QString("useCircuitBreakers"), ::OpenAPI::toJsonValue(m_use_circuit_breakers));
    }
    return obj;
}

QList<QString> OAIGlobalConfig::getAlertsEmails() const {
    return m_alerts_emails;
}
void OAIGlobalConfig::setAlertsEmails(const QList<QString> &alerts_emails) {
    m_alerts_emails = alerts_emails;
    m_alerts_emails_isSet = true;
}

bool OAIGlobalConfig::is_alerts_emails_Set() const{
    return m_alerts_emails_isSet;
}

bool OAIGlobalConfig::is_alerts_emails_Valid() const{
    return m_alerts_emails_isValid;
}

QList<OAIWebhook> OAIGlobalConfig::getAlertsWebhooks() const {
    return m_alerts_webhooks;
}
void OAIGlobalConfig::setAlertsWebhooks(const QList<OAIWebhook> &alerts_webhooks) {
    m_alerts_webhooks = alerts_webhooks;
    m_alerts_webhooks_isSet = true;
}

bool OAIGlobalConfig::is_alerts_webhooks_Set() const{
    return m_alerts_webhooks_isSet;
}

bool OAIGlobalConfig::is_alerts_webhooks_Valid() const{
    return m_alerts_webhooks_isValid;
}

QList<OAIWebhook> OAIGlobalConfig::getAnalyticsWebhooks() const {
    return m_analytics_webhooks;
}
void OAIGlobalConfig::setAnalyticsWebhooks(const QList<OAIWebhook> &analytics_webhooks) {
    m_analytics_webhooks = analytics_webhooks;
    m_analytics_webhooks_isSet = true;
}

bool OAIGlobalConfig::is_analytics_webhooks_Set() const{
    return m_analytics_webhooks_isSet;
}

bool OAIGlobalConfig::is_analytics_webhooks_Valid() const{
    return m_analytics_webhooks_isValid;
}

bool OAIGlobalConfig::isApiReadOnly() const {
    return m_api_read_only;
}
void OAIGlobalConfig::setApiReadOnly(const bool &api_read_only) {
    m_api_read_only = api_read_only;
    m_api_read_only_isSet = true;
}

bool OAIGlobalConfig::is_api_read_only_Set() const{
    return m_api_read_only_isSet;
}

bool OAIGlobalConfig::is_api_read_only_Valid() const{
    return m_api_read_only_isValid;
}

bool OAIGlobalConfig::isAutoLinkToDefaultGroup() const {
    return m_auto_link_to_default_group;
}
void OAIGlobalConfig::setAutoLinkToDefaultGroup(const bool &auto_link_to_default_group) {
    m_auto_link_to_default_group = auto_link_to_default_group;
    m_auto_link_to_default_group_isSet = true;
}

bool OAIGlobalConfig::is_auto_link_to_default_group_Set() const{
    return m_auto_link_to_default_group_isSet;
}

bool OAIGlobalConfig::is_auto_link_to_default_group_Valid() const{
    return m_auto_link_to_default_group_isValid;
}

OAIAuth0Config OAIGlobalConfig::getBackofficeAuth0Config() const {
    return m_backoffice_auth0_config;
}
void OAIGlobalConfig::setBackofficeAuth0Config(const OAIAuth0Config &backoffice_auth0_config) {
    m_backoffice_auth0_config = backoffice_auth0_config;
    m_backoffice_auth0_config_isSet = true;
}

bool OAIGlobalConfig::is_backoffice_auth0_config_Set() const{
    return m_backoffice_auth0_config_isSet;
}

bool OAIGlobalConfig::is_backoffice_auth0_config_Valid() const{
    return m_backoffice_auth0_config_isValid;
}

OAICleverSettings OAIGlobalConfig::getCleverSettings() const {
    return m_clever_settings;
}
void OAIGlobalConfig::setCleverSettings(const OAICleverSettings &clever_settings) {
    m_clever_settings = clever_settings;
    m_clever_settings_isSet = true;
}

bool OAIGlobalConfig::is_clever_settings_Set() const{
    return m_clever_settings_isSet;
}

bool OAIGlobalConfig::is_clever_settings_Valid() const{
    return m_clever_settings_isValid;
}

OAIElasticConfig OAIGlobalConfig::getElasticReadsConfig() const {
    return m_elastic_reads_config;
}
void OAIGlobalConfig::setElasticReadsConfig(const OAIElasticConfig &elastic_reads_config) {
    m_elastic_reads_config = elastic_reads_config;
    m_elastic_reads_config_isSet = true;
}

bool OAIGlobalConfig::is_elastic_reads_config_Set() const{
    return m_elastic_reads_config_isSet;
}

bool OAIGlobalConfig::is_elastic_reads_config_Valid() const{
    return m_elastic_reads_config_isValid;
}

QList<OAIElasticConfig> OAIGlobalConfig::getElasticWritesConfigs() const {
    return m_elastic_writes_configs;
}
void OAIGlobalConfig::setElasticWritesConfigs(const QList<OAIElasticConfig> &elastic_writes_configs) {
    m_elastic_writes_configs = elastic_writes_configs;
    m_elastic_writes_configs_isSet = true;
}

bool OAIGlobalConfig::is_elastic_writes_configs_Set() const{
    return m_elastic_writes_configs_isSet;
}

bool OAIGlobalConfig::is_elastic_writes_configs_Valid() const{
    return m_elastic_writes_configs_isValid;
}

QList<QString> OAIGlobalConfig::getEndlessIpAddresses() const {
    return m_endless_ip_addresses;
}
void OAIGlobalConfig::setEndlessIpAddresses(const QList<QString> &endless_ip_addresses) {
    m_endless_ip_addresses = endless_ip_addresses;
    m_endless_ip_addresses_isSet = true;
}

bool OAIGlobalConfig::is_endless_ip_addresses_Set() const{
    return m_endless_ip_addresses_isSet;
}

bool OAIGlobalConfig::is_endless_ip_addresses_Valid() const{
    return m_endless_ip_addresses_isValid;
}

OAIIpFiltering OAIGlobalConfig::getIpFiltering() const {
    return m_ip_filtering;
}
void OAIGlobalConfig::setIpFiltering(const OAIIpFiltering &ip_filtering) {
    m_ip_filtering = ip_filtering;
    m_ip_filtering_isSet = true;
}

bool OAIGlobalConfig::is_ip_filtering_Set() const{
    return m_ip_filtering_isSet;
}

bool OAIGlobalConfig::is_ip_filtering_Valid() const{
    return m_ip_filtering_isValid;
}

bool OAIGlobalConfig::isLimitConcurrentRequests() const {
    return m_limit_concurrent_requests;
}
void OAIGlobalConfig::setLimitConcurrentRequests(const bool &limit_concurrent_requests) {
    m_limit_concurrent_requests = limit_concurrent_requests;
    m_limit_concurrent_requests_isSet = true;
}

bool OAIGlobalConfig::is_limit_concurrent_requests_Set() const{
    return m_limit_concurrent_requests_isSet;
}

bool OAIGlobalConfig::is_limit_concurrent_requests_Valid() const{
    return m_limit_concurrent_requests_isValid;
}

QList<QString> OAIGlobalConfig::getLines() const {
    return m_lines;
}
void OAIGlobalConfig::setLines(const QList<QString> &lines) {
    m_lines = lines;
    m_lines_isSet = true;
}

bool OAIGlobalConfig::is_lines_Set() const{
    return m_lines_isSet;
}

bool OAIGlobalConfig::is_lines_Valid() const{
    return m_lines_isValid;
}

OAIMailerSettings OAIGlobalConfig::getMailerSettings() const {
    return m_mailer_settings;
}
void OAIGlobalConfig::setMailerSettings(const OAIMailerSettings &mailer_settings) {
    m_mailer_settings = mailer_settings;
    m_mailer_settings_isSet = true;
}

bool OAIGlobalConfig::is_mailer_settings_Set() const{
    return m_mailer_settings_isSet;
}

bool OAIGlobalConfig::is_mailer_settings_Valid() const{
    return m_mailer_settings_isValid;
}

qint64 OAIGlobalConfig::getMaxConcurrentRequests() const {
    return m_max_concurrent_requests;
}
void OAIGlobalConfig::setMaxConcurrentRequests(const qint64 &max_concurrent_requests) {
    m_max_concurrent_requests = max_concurrent_requests;
    m_max_concurrent_requests_isSet = true;
}

bool OAIGlobalConfig::is_max_concurrent_requests_Set() const{
    return m_max_concurrent_requests_isSet;
}

bool OAIGlobalConfig::is_max_concurrent_requests_Valid() const{
    return m_max_concurrent_requests_isValid;
}

qint64 OAIGlobalConfig::getMaxHttp10ResponseSize() const {
    return m_max_http10_response_size;
}
void OAIGlobalConfig::setMaxHttp10ResponseSize(const qint64 &max_http10_response_size) {
    m_max_http10_response_size = max_http10_response_size;
    m_max_http10_response_size_isSet = true;
}

bool OAIGlobalConfig::is_max_http10_response_size_Set() const{
    return m_max_http10_response_size_isSet;
}

bool OAIGlobalConfig::is_max_http10_response_size_Valid() const{
    return m_max_http10_response_size_isValid;
}

qint32 OAIGlobalConfig::getMaxLogsSize() const {
    return m_max_logs_size;
}
void OAIGlobalConfig::setMaxLogsSize(const qint32 &max_logs_size) {
    m_max_logs_size = max_logs_size;
    m_max_logs_size_isSet = true;
}

bool OAIGlobalConfig::is_max_logs_size_Set() const{
    return m_max_logs_size_isSet;
}

bool OAIGlobalConfig::is_max_logs_size_Valid() const{
    return m_max_logs_size_isValid;
}

bool OAIGlobalConfig::isMiddleFingers() const {
    return m_middle_fingers;
}
void OAIGlobalConfig::setMiddleFingers(const bool &middle_fingers) {
    m_middle_fingers = middle_fingers;
    m_middle_fingers_isSet = true;
}

bool OAIGlobalConfig::is_middle_fingers_Set() const{
    return m_middle_fingers_isSet;
}

bool OAIGlobalConfig::is_middle_fingers_Valid() const{
    return m_middle_fingers_isValid;
}

qint64 OAIGlobalConfig::getPerIpThrottlingQuota() const {
    return m_per_ip_throttling_quota;
}
void OAIGlobalConfig::setPerIpThrottlingQuota(const qint64 &per_ip_throttling_quota) {
    m_per_ip_throttling_quota = per_ip_throttling_quota;
    m_per_ip_throttling_quota_isSet = true;
}

bool OAIGlobalConfig::is_per_ip_throttling_quota_Set() const{
    return m_per_ip_throttling_quota_isSet;
}

bool OAIGlobalConfig::is_per_ip_throttling_quota_Valid() const{
    return m_per_ip_throttling_quota_isValid;
}

OAIAuth0Config OAIGlobalConfig::getPrivateAppsAuth0Config() const {
    return m_private_apps_auth0_config;
}
void OAIGlobalConfig::setPrivateAppsAuth0Config(const OAIAuth0Config &private_apps_auth0_config) {
    m_private_apps_auth0_config = private_apps_auth0_config;
    m_private_apps_auth0_config_isSet = true;
}

bool OAIGlobalConfig::is_private_apps_auth0_config_Set() const{
    return m_private_apps_auth0_config_isSet;
}

bool OAIGlobalConfig::is_private_apps_auth0_config_Valid() const{
    return m_private_apps_auth0_config_isValid;
}

bool OAIGlobalConfig::isStreamEntityOnly() const {
    return m_stream_entity_only;
}
void OAIGlobalConfig::setStreamEntityOnly(const bool &stream_entity_only) {
    m_stream_entity_only = stream_entity_only;
    m_stream_entity_only_isSet = true;
}

bool OAIGlobalConfig::is_stream_entity_only_Set() const{
    return m_stream_entity_only_isSet;
}

bool OAIGlobalConfig::is_stream_entity_only_Valid() const{
    return m_stream_entity_only_isValid;
}

qint64 OAIGlobalConfig::getThrottlingQuota() const {
    return m_throttling_quota;
}
void OAIGlobalConfig::setThrottlingQuota(const qint64 &throttling_quota) {
    m_throttling_quota = throttling_quota;
    m_throttling_quota_isSet = true;
}

bool OAIGlobalConfig::is_throttling_quota_Set() const{
    return m_throttling_quota_isSet;
}

bool OAIGlobalConfig::is_throttling_quota_Valid() const{
    return m_throttling_quota_isValid;
}

bool OAIGlobalConfig::isU2fLoginOnly() const {
    return m_u2f_login_only;
}
void OAIGlobalConfig::setU2fLoginOnly(const bool &u2f_login_only) {
    m_u2f_login_only = u2f_login_only;
    m_u2f_login_only_isSet = true;
}

bool OAIGlobalConfig::is_u2f_login_only_Set() const{
    return m_u2f_login_only_isSet;
}

bool OAIGlobalConfig::is_u2f_login_only_Valid() const{
    return m_u2f_login_only_isValid;
}

bool OAIGlobalConfig::isUseCircuitBreakers() const {
    return m_use_circuit_breakers;
}
void OAIGlobalConfig::setUseCircuitBreakers(const bool &use_circuit_breakers) {
    m_use_circuit_breakers = use_circuit_breakers;
    m_use_circuit_breakers_isSet = true;
}

bool OAIGlobalConfig::is_use_circuit_breakers_Set() const{
    return m_use_circuit_breakers_isSet;
}

bool OAIGlobalConfig::is_use_circuit_breakers_Valid() const{
    return m_use_circuit_breakers_isValid;
}

bool OAIGlobalConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alerts_emails.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_alerts_webhooks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_analytics_webhooks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_read_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_link_to_default_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backoffice_auth0_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_clever_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_elastic_reads_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_elastic_writes_configs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_endless_ip_addresses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_filtering.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_concurrent_requests_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mailer_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_concurrent_requests_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_http10_response_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_logs_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_middle_fingers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_per_ip_throttling_quota_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_apps_auth0_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_entity_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_throttling_quota_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_u2f_login_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_circuit_breakers_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGlobalConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_alerts_emails_isValid && m_alerts_webhooks_isValid && m_analytics_webhooks_isValid && m_api_read_only_isValid && m_auto_link_to_default_group_isValid && m_endless_ip_addresses_isValid && m_ip_filtering_isValid && m_limit_concurrent_requests_isValid && m_max_concurrent_requests_isValid && m_per_ip_throttling_quota_isValid && m_stream_entity_only_isValid && m_throttling_quota_isValid && m_u2f_login_only_isValid && m_use_circuit_breakers_isValid && true;
}

} // namespace OpenAPI
