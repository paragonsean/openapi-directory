/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataExporterConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataExporterConfig::OAIDataExporterConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataExporterConfig::OAIDataExporterConfig() {
    this->initializeModel();
}

OAIDataExporterConfig::~OAIDataExporterConfig() {}

void OAIDataExporterConfig::initializeModel() {

    m_buffer_size_isSet = false;
    m_buffer_size_isValid = false;

    m_config_isSet = false;
    m_config_isValid = false;

    m_desc_isSet = false;
    m_desc_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_filtering_isSet = false;
    m_filtering_isValid = false;

    m_group_duration_isSet = false;
    m_group_duration_isValid = false;

    m_group_size_isSet = false;
    m_group_size_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_json_workers_isSet = false;
    m_json_workers_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_projection_isSet = false;
    m_projection_isValid = false;

    m_send_workers_isSet = false;
    m_send_workers_isValid = false;

    m_typ_isSet = false;
    m_typ_isValid = false;
}

void OAIDataExporterConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataExporterConfig::fromJsonObject(QJsonObject json) {

    m_buffer_size_isValid = ::OpenAPI::fromJsonValue(m_buffer_size, json[QString("bufferSize")]);
    m_buffer_size_isSet = !json[QString("bufferSize")].isNull() && m_buffer_size_isValid;

    m_config_isValid = ::OpenAPI::fromJsonValue(m_config, json[QString("config")]);
    m_config_isSet = !json[QString("config")].isNull() && m_config_isValid;

    m_desc_isValid = ::OpenAPI::fromJsonValue(m_desc, json[QString("desc")]);
    m_desc_isSet = !json[QString("desc")].isNull() && m_desc_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_filtering_isValid = ::OpenAPI::fromJsonValue(m_filtering, json[QString("filtering")]);
    m_filtering_isSet = !json[QString("filtering")].isNull() && m_filtering_isValid;

    m_group_duration_isValid = ::OpenAPI::fromJsonValue(m_group_duration, json[QString("groupDuration")]);
    m_group_duration_isSet = !json[QString("groupDuration")].isNull() && m_group_duration_isValid;

    m_group_size_isValid = ::OpenAPI::fromJsonValue(m_group_size, json[QString("groupSize")]);
    m_group_size_isSet = !json[QString("groupSize")].isNull() && m_group_size_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_json_workers_isValid = ::OpenAPI::fromJsonValue(m_json_workers, json[QString("jsonWorkers")]);
    m_json_workers_isSet = !json[QString("jsonWorkers")].isNull() && m_json_workers_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_projection_isValid = ::OpenAPI::fromJsonValue(m_projection, json[QString("projection")]);
    m_projection_isSet = !json[QString("projection")].isNull() && m_projection_isValid;

    m_send_workers_isValid = ::OpenAPI::fromJsonValue(m_send_workers, json[QString("sendWorkers")]);
    m_send_workers_isSet = !json[QString("sendWorkers")].isNull() && m_send_workers_isValid;

    m_typ_isValid = ::OpenAPI::fromJsonValue(m_typ, json[QString("typ")]);
    m_typ_isSet = !json[QString("typ")].isNull() && m_typ_isValid;
}

QString OAIDataExporterConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataExporterConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_buffer_size_isSet) {
        obj.insert(QString("bufferSize"), ::OpenAPI::toJsonValue(m_buffer_size));
    }
    if (m_config.isSet()) {
        obj.insert(QString("config"), ::OpenAPI::toJsonValue(m_config));
    }
    if (m_desc_isSet) {
        obj.insert(QString("desc"), ::OpenAPI::toJsonValue(m_desc));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_filtering.isSet()) {
        obj.insert(QString("filtering"), ::OpenAPI::toJsonValue(m_filtering));
    }
    if (m_group_duration_isSet) {
        obj.insert(QString("groupDuration"), ::OpenAPI::toJsonValue(m_group_duration));
    }
    if (m_group_size_isSet) {
        obj.insert(QString("groupSize"), ::OpenAPI::toJsonValue(m_group_size));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_json_workers_isSet) {
        obj.insert(QString("jsonWorkers"), ::OpenAPI::toJsonValue(m_json_workers));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_projection.size() > 0) {
        obj.insert(QString("projection"), ::OpenAPI::toJsonValue(m_projection));
    }
    if (m_send_workers_isSet) {
        obj.insert(QString("sendWorkers"), ::OpenAPI::toJsonValue(m_send_workers));
    }
    if (m_typ_isSet) {
        obj.insert(QString("typ"), ::OpenAPI::toJsonValue(m_typ));
    }
    return obj;
}

qint32 OAIDataExporterConfig::getBufferSize() const {
    return m_buffer_size;
}
void OAIDataExporterConfig::setBufferSize(const qint32 &buffer_size) {
    m_buffer_size = buffer_size;
    m_buffer_size_isSet = true;
}

bool OAIDataExporterConfig::is_buffer_size_Set() const{
    return m_buffer_size_isSet;
}

bool OAIDataExporterConfig::is_buffer_size_Valid() const{
    return m_buffer_size_isValid;
}

OAIDataExporterConfig_config OAIDataExporterConfig::getConfig() const {
    return m_config;
}
void OAIDataExporterConfig::setConfig(const OAIDataExporterConfig_config &config) {
    m_config = config;
    m_config_isSet = true;
}

bool OAIDataExporterConfig::is_config_Set() const{
    return m_config_isSet;
}

bool OAIDataExporterConfig::is_config_Valid() const{
    return m_config_isValid;
}

QString OAIDataExporterConfig::getDesc() const {
    return m_desc;
}
void OAIDataExporterConfig::setDesc(const QString &desc) {
    m_desc = desc;
    m_desc_isSet = true;
}

bool OAIDataExporterConfig::is_desc_Set() const{
    return m_desc_isSet;
}

bool OAIDataExporterConfig::is_desc_Valid() const{
    return m_desc_isValid;
}

QString OAIDataExporterConfig::getEnabled() const {
    return m_enabled;
}
void OAIDataExporterConfig::setEnabled(const QString &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIDataExporterConfig::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIDataExporterConfig::is_enabled_Valid() const{
    return m_enabled_isValid;
}

OAIFiltering OAIDataExporterConfig::getFiltering() const {
    return m_filtering;
}
void OAIDataExporterConfig::setFiltering(const OAIFiltering &filtering) {
    m_filtering = filtering;
    m_filtering_isSet = true;
}

bool OAIDataExporterConfig::is_filtering_Set() const{
    return m_filtering_isSet;
}

bool OAIDataExporterConfig::is_filtering_Valid() const{
    return m_filtering_isValid;
}

qint64 OAIDataExporterConfig::getGroupDuration() const {
    return m_group_duration;
}
void OAIDataExporterConfig::setGroupDuration(const qint64 &group_duration) {
    m_group_duration = group_duration;
    m_group_duration_isSet = true;
}

bool OAIDataExporterConfig::is_group_duration_Set() const{
    return m_group_duration_isSet;
}

bool OAIDataExporterConfig::is_group_duration_Valid() const{
    return m_group_duration_isValid;
}

qint32 OAIDataExporterConfig::getGroupSize() const {
    return m_group_size;
}
void OAIDataExporterConfig::setGroupSize(const qint32 &group_size) {
    m_group_size = group_size;
    m_group_size_isSet = true;
}

bool OAIDataExporterConfig::is_group_size_Set() const{
    return m_group_size_isSet;
}

bool OAIDataExporterConfig::is_group_size_Valid() const{
    return m_group_size_isValid;
}

QString OAIDataExporterConfig::getId() const {
    return m_id;
}
void OAIDataExporterConfig::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDataExporterConfig::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDataExporterConfig::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIDataExporterConfig::getJsonWorkers() const {
    return m_json_workers;
}
void OAIDataExporterConfig::setJsonWorkers(const qint32 &json_workers) {
    m_json_workers = json_workers;
    m_json_workers_isSet = true;
}

bool OAIDataExporterConfig::is_json_workers_Set() const{
    return m_json_workers_isSet;
}

bool OAIDataExporterConfig::is_json_workers_Valid() const{
    return m_json_workers_isValid;
}

OAILocation OAIDataExporterConfig::getLocation() const {
    return m_location;
}
void OAIDataExporterConfig::setLocation(const OAILocation &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIDataExporterConfig::is_location_Set() const{
    return m_location_isSet;
}

bool OAIDataExporterConfig::is_location_Valid() const{
    return m_location_isValid;
}

QMap<QString, QString> OAIDataExporterConfig::getMetadata() const {
    return m_metadata;
}
void OAIDataExporterConfig::setMetadata(const QMap<QString, QString> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIDataExporterConfig::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIDataExporterConfig::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIDataExporterConfig::getName() const {
    return m_name;
}
void OAIDataExporterConfig::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDataExporterConfig::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDataExporterConfig::is_name_Valid() const{
    return m_name_isValid;
}

QMap<QString, QString> OAIDataExporterConfig::getProjection() const {
    return m_projection;
}
void OAIDataExporterConfig::setProjection(const QMap<QString, QString> &projection) {
    m_projection = projection;
    m_projection_isSet = true;
}

bool OAIDataExporterConfig::is_projection_Set() const{
    return m_projection_isSet;
}

bool OAIDataExporterConfig::is_projection_Valid() const{
    return m_projection_isValid;
}

qint32 OAIDataExporterConfig::getSendWorkers() const {
    return m_send_workers;
}
void OAIDataExporterConfig::setSendWorkers(const qint32 &send_workers) {
    m_send_workers = send_workers;
    m_send_workers_isSet = true;
}

bool OAIDataExporterConfig::is_send_workers_Set() const{
    return m_send_workers_isSet;
}

bool OAIDataExporterConfig::is_send_workers_Valid() const{
    return m_send_workers_isValid;
}

QString OAIDataExporterConfig::getTyp() const {
    return m_typ;
}
void OAIDataExporterConfig::setTyp(const QString &typ) {
    m_typ = typ;
    m_typ_isSet = true;
}

bool OAIDataExporterConfig::is_typ_Set() const{
    return m_typ_isSet;
}

bool OAIDataExporterConfig::is_typ_Valid() const{
    return m_typ_isValid;
}

bool OAIDataExporterConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_buffer_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filtering.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_json_workers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_projection.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_send_workers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_typ_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataExporterConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
