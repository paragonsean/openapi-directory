/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OtoroshiAdminApi);
  }
}(this, function(expect, OtoroshiAdminApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new OtoroshiAdminApi.ServicesApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ServicesApi', function() {
    describe('allServices', function() {
      it('should call allServices successfully', function(done) {
        //uncomment below and update the code to test allServices
        //instance.allServices(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createService', function() {
      it('should call createService successfully', function(done) {
        //uncomment below and update the code to test createService
        //instance.createService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createServiceTemplate', function() {
      it('should call createServiceTemplate successfully', function(done) {
        //uncomment below and update the code to test createServiceTemplate
        //instance.createServiceTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteService', function() {
      it('should call deleteService successfully', function(done) {
        //uncomment below and update the code to test deleteService
        //instance.deleteService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteServiceTemplate', function() {
      it('should call deleteServiceTemplate successfully', function(done) {
        //uncomment below and update the code to test deleteServiceTemplate
        //instance.deleteServiceTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchService', function() {
      it('should call patchService successfully', function(done) {
        //uncomment below and update the code to test patchService
        //instance.patchService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('service', function() {
      it('should call service successfully', function(done) {
        //uncomment below and update the code to test service
        //instance.service(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('serviceAddTarget', function() {
      it('should call serviceAddTarget successfully', function(done) {
        //uncomment below and update the code to test serviceAddTarget
        //instance.serviceAddTarget(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('serviceDeleteTarget', function() {
      it('should call serviceDeleteTarget successfully', function(done) {
        //uncomment below and update the code to test serviceDeleteTarget
        //instance.serviceDeleteTarget(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('serviceGroupServices', function() {
      it('should call serviceGroupServices successfully', function(done) {
        //uncomment below and update the code to test serviceGroupServices
        //instance.serviceGroupServices(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('serviceTargets', function() {
      it('should call serviceTargets successfully', function(done) {
        //uncomment below and update the code to test serviceTargets
        //instance.serviceTargets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('serviceTemplate', function() {
      it('should call serviceTemplate successfully', function(done) {
        //uncomment below and update the code to test serviceTemplate
        //instance.serviceTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateService', function() {
      it('should call updateService successfully', function(done) {
        //uncomment below and update the code to test updateService
        //instance.updateService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateServiceTargets', function() {
      it('should call updateServiceTargets successfully', function(done) {
        //uncomment below and update the code to test updateServiceTargets
        //instance.updateServiceTargets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateServiceTemplate', function() {
      it('should call updateServiceTemplate successfully', function(done) {
        //uncomment below and update the code to test updateServiceTemplate
        //instance.updateServiceTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
