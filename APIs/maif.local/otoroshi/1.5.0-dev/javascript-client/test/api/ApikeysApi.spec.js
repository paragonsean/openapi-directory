/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OtoroshiAdminApi);
  }
}(this, function(expect, OtoroshiAdminApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new OtoroshiAdminApi.ApikeysApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ApikeysApi', function() {
    describe('allApiKeys', function() {
      it('should call allApiKeys successfully', function(done) {
        //uncomment below and update the code to test allApiKeys
        //instance.allApiKeys(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiKey', function() {
      it('should call apiKey successfully', function(done) {
        //uncomment below and update the code to test apiKey
        //instance.apiKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiKeyFromGroup', function() {
      it('should call apiKeyFromGroup successfully', function(done) {
        //uncomment below and update the code to test apiKeyFromGroup
        //instance.apiKeyFromGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiKeyFromGroupQuotas', function() {
      it('should call apiKeyFromGroupQuotas successfully', function(done) {
        //uncomment below and update the code to test apiKeyFromGroupQuotas
        //instance.apiKeyFromGroupQuotas(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiKeyGroup', function() {
      it('should call apiKeyGroup successfully', function(done) {
        //uncomment below and update the code to test apiKeyGroup
        //instance.apiKeyGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiKeyQuotas', function() {
      it('should call apiKeyQuotas successfully', function(done) {
        //uncomment below and update the code to test apiKeyQuotas
        //instance.apiKeyQuotas(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiKeys', function() {
      it('should call apiKeys successfully', function(done) {
        //uncomment below and update the code to test apiKeys
        //instance.apiKeys(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiKeysFromGroup', function() {
      it('should call apiKeysFromGroup successfully', function(done) {
        //uncomment below and update the code to test apiKeysFromGroup
        //instance.apiKeysFromGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createApiKey', function() {
      it('should call createApiKey successfully', function(done) {
        //uncomment below and update the code to test createApiKey
        //instance.createApiKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createApiKeyFromGroup', function() {
      it('should call createApiKeyFromGroup successfully', function(done) {
        //uncomment below and update the code to test createApiKeyFromGroup
        //instance.createApiKeyFromGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteApiKey', function() {
      it('should call deleteApiKey successfully', function(done) {
        //uncomment below and update the code to test deleteApiKey
        //instance.deleteApiKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteApiKeyFromGroup', function() {
      it('should call deleteApiKeyFromGroup successfully', function(done) {
        //uncomment below and update the code to test deleteApiKeyFromGroup
        //instance.deleteApiKeyFromGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchApiKey', function() {
      it('should call patchApiKey successfully', function(done) {
        //uncomment below and update the code to test patchApiKey
        //instance.patchApiKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchApiKeyFromGroup', function() {
      it('should call patchApiKeyFromGroup successfully', function(done) {
        //uncomment below and update the code to test patchApiKeyFromGroup
        //instance.patchApiKeyFromGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('resetApiKeyFromGroupQuotas', function() {
      it('should call resetApiKeyFromGroupQuotas successfully', function(done) {
        //uncomment below and update the code to test resetApiKeyFromGroupQuotas
        //instance.resetApiKeyFromGroupQuotas(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('resetApiKeyQuotas', function() {
      it('should call resetApiKeyQuotas successfully', function(done) {
        //uncomment below and update the code to test resetApiKeyQuotas
        //instance.resetApiKeyQuotas(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateApiKey', function() {
      it('should call updateApiKey successfully', function(done) {
        //uncomment below and update the code to test updateApiKey
        //instance.updateApiKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateApiKeyFromGroup', function() {
      it('should call updateApiKeyFromGroup successfully', function(done) {
        //uncomment below and update the code to test updateApiKeyFromGroup
        //instance.updateApiKeyFromGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
