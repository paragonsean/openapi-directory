/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OtoroshiAdminApi);
  }
}(this, function(expect, OtoroshiAdminApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new OtoroshiAdminApi.FindAllGlobalAuthModules200ResponseInner();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('FindAllGlobalAuthModules200ResponseInner', function() {
    it('should create an instance of FindAllGlobalAuthModules200ResponseInner', function() {
      // uncomment below and update the code to test FindAllGlobalAuthModules200ResponseInner
      //var instance = new OtoroshiAdminApi.FindAllGlobalAuthModules200ResponseInner();
      //expect(instance).to.be.a(OtoroshiAdminApi.FindAllGlobalAuthModules200ResponseInner);
    });

    it('should have the property adminPassword (base name: "adminPassword")', function() {
      // uncomment below and update the code to test the property adminPassword
      //var instance = new OtoroshiAdminApi.FindAllGlobalAuthModules200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property adminUsername (base name: "adminUsername")', function() {
      // uncomment below and update the code to test the property adminUsername
      //var instance = new OtoroshiAdminApi.FindAllGlobalAuthModules200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property desc (base name: "desc")', function() {
      // uncomment below and update the code to test the property desc
      //var instance = new OtoroshiAdminApi.FindAllGlobalAuthModules200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property emailField (base name: "emailField")', function() {
      // uncomment below and update the code to test the property emailField
      //var instance = new OtoroshiAdminApi.FindAllGlobalAuthModules200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property groupFilter (base name: "groupFilter")', function() {
      // uncomment below and update the code to test the property groupFilter
      //var instance = new OtoroshiAdminApi.FindAllGlobalAuthModules200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new OtoroshiAdminApi.FindAllGlobalAuthModules200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new OtoroshiAdminApi.FindAllGlobalAuthModules200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property nameField (base name: "nameField")', function() {
      // uncomment below and update the code to test the property nameField
      //var instance = new OtoroshiAdminApi.FindAllGlobalAuthModules200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property otoroshiDataField (base name: "otoroshiDataField")', function() {
      // uncomment below and update the code to test the property otoroshiDataField
      //var instance = new OtoroshiAdminApi.FindAllGlobalAuthModules200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property searchBase (base name: "searchBase")', function() {
      // uncomment below and update the code to test the property searchBase
      //var instance = new OtoroshiAdminApi.FindAllGlobalAuthModules200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property searchFilter (base name: "searchFilter")', function() {
      // uncomment below and update the code to test the property searchFilter
      //var instance = new OtoroshiAdminApi.FindAllGlobalAuthModules200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property serverUrl (base name: "serverUrl")', function() {
      // uncomment below and update the code to test the property serverUrl
      //var instance = new OtoroshiAdminApi.FindAllGlobalAuthModules200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property sessionMaxAge (base name: "sessionMaxAge")', function() {
      // uncomment below and update the code to test the property sessionMaxAge
      //var instance = new OtoroshiAdminApi.FindAllGlobalAuthModules200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new OtoroshiAdminApi.FindAllGlobalAuthModules200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property userBase (base name: "userBase")', function() {
      // uncomment below and update the code to test the property userBase
      //var instance = new OtoroshiAdminApi.FindAllGlobalAuthModules200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property users (base name: "users")', function() {
      // uncomment below and update the code to test the property users
      //var instance = new OtoroshiAdminApi.FindAllGlobalAuthModules200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property accessTokenField (base name: "accessTokenField")', function() {
      // uncomment below and update the code to test the property accessTokenField
      //var instance = new OtoroshiAdminApi.FindAllGlobalAuthModules200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property authorizeUrl (base name: "authorizeUrl")', function() {
      // uncomment below and update the code to test the property authorizeUrl
      //var instance = new OtoroshiAdminApi.FindAllGlobalAuthModules200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property callbackUrl (base name: "callbackUrl")', function() {
      // uncomment below and update the code to test the property callbackUrl
      //var instance = new OtoroshiAdminApi.FindAllGlobalAuthModules200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property claims (base name: "claims")', function() {
      // uncomment below and update the code to test the property claims
      //var instance = new OtoroshiAdminApi.FindAllGlobalAuthModules200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property clientId (base name: "clientId")', function() {
      // uncomment below and update the code to test the property clientId
      //var instance = new OtoroshiAdminApi.FindAllGlobalAuthModules200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property clientSecret (base name: "clientSecret")', function() {
      // uncomment below and update the code to test the property clientSecret
      //var instance = new OtoroshiAdminApi.FindAllGlobalAuthModules200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property jwtVerifier (base name: "jwtVerifier")', function() {
      // uncomment below and update the code to test the property jwtVerifier
      //var instance = new OtoroshiAdminApi.FindAllGlobalAuthModules200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property loginUrl (base name: "loginUrl")', function() {
      // uncomment below and update the code to test the property loginUrl
      //var instance = new OtoroshiAdminApi.FindAllGlobalAuthModules200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property logoutUrl (base name: "logoutUrl")', function() {
      // uncomment below and update the code to test the property logoutUrl
      //var instance = new OtoroshiAdminApi.FindAllGlobalAuthModules200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property oidConfig (base name: "oidConfig")', function() {
      // uncomment below and update the code to test the property oidConfig
      //var instance = new OtoroshiAdminApi.FindAllGlobalAuthModules200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property readProfileFromToken (base name: "readProfileFromToken")', function() {
      // uncomment below and update the code to test the property readProfileFromToken
      //var instance = new OtoroshiAdminApi.FindAllGlobalAuthModules200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property scope (base name: "scope")', function() {
      // uncomment below and update the code to test the property scope
      //var instance = new OtoroshiAdminApi.FindAllGlobalAuthModules200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property tokenUrl (base name: "tokenUrl")', function() {
      // uncomment below and update the code to test the property tokenUrl
      //var instance = new OtoroshiAdminApi.FindAllGlobalAuthModules200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property useCookies (base name: "useCookies")', function() {
      // uncomment below and update the code to test the property useCookies
      //var instance = new OtoroshiAdminApi.FindAllGlobalAuthModules200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property useJson (base name: "useJson")', function() {
      // uncomment below and update the code to test the property useJson
      //var instance = new OtoroshiAdminApi.FindAllGlobalAuthModules200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property userInfoUrl (base name: "userInfoUrl")', function() {
      // uncomment below and update the code to test the property userInfoUrl
      //var instance = new OtoroshiAdminApi.FindAllGlobalAuthModules200ResponseInner();
      //expect(instance).to.be();
    });

  });

}));
