/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OtoroshiAdminApi);
  }
}(this, function(expect, OtoroshiAdminApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new OtoroshiAdminApi.DataExporterConfigConfig();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DataExporterConfigConfig', function() {
    it('should create an instance of DataExporterConfigConfig', function() {
      // uncomment below and update the code to test DataExporterConfigConfig
      //var instance = new OtoroshiAdminApi.DataExporterConfigConfig();
      //expect(instance).to.be.a(OtoroshiAdminApi.DataExporterConfigConfig);
    });

    it('should have the property clusterUri (base name: "clusterUri")', function() {
      // uncomment below and update the code to test the property clusterUri
      //var instance = new OtoroshiAdminApi.DataExporterConfigConfig();
      //expect(instance).to.be();
    });

    it('should have the property headers (base name: "headers")', function() {
      // uncomment below and update the code to test the property headers
      //var instance = new OtoroshiAdminApi.DataExporterConfigConfig();
      //expect(instance).to.be();
    });

    it('should have the property index (base name: "index")', function() {
      // uncomment below and update the code to test the property index
      //var instance = new OtoroshiAdminApi.DataExporterConfigConfig();
      //expect(instance).to.be();
    });

    it('should have the property password (base name: "password")', function() {
      // uncomment below and update the code to test the property password
      //var instance = new OtoroshiAdminApi.DataExporterConfigConfig();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new OtoroshiAdminApi.DataExporterConfigConfig();
      //expect(instance).to.be();
    });

    it('should have the property user (base name: "user")', function() {
      // uncomment below and update the code to test the property user
      //var instance = new OtoroshiAdminApi.DataExporterConfigConfig();
      //expect(instance).to.be();
    });

    it('should have the property keyPass (base name: "keyPass")', function() {
      // uncomment below and update the code to test the property keyPass
      //var instance = new OtoroshiAdminApi.DataExporterConfigConfig();
      //expect(instance).to.be();
    });

    it('should have the property keyStore (base name: "keyStore")', function() {
      // uncomment below and update the code to test the property keyStore
      //var instance = new OtoroshiAdminApi.DataExporterConfigConfig();
      //expect(instance).to.be();
    });

    it('should have the property servers (base name: "servers")', function() {
      // uncomment below and update the code to test the property servers
      //var instance = new OtoroshiAdminApi.DataExporterConfigConfig();
      //expect(instance).to.be();
    });

    it('should have the property topic (base name: "topic")', function() {
      // uncomment below and update the code to test the property topic
      //var instance = new OtoroshiAdminApi.DataExporterConfigConfig();
      //expect(instance).to.be();
    });

    it('should have the property trustore (base name: "trustore")', function() {
      // uncomment below and update the code to test the property trustore
      //var instance = new OtoroshiAdminApi.DataExporterConfigConfig();
      //expect(instance).to.be();
    });

    it('should have the property namespace (base name: "namespace")', function() {
      // uncomment below and update the code to test the property namespace
      //var instance = new OtoroshiAdminApi.DataExporterConfigConfig();
      //expect(instance).to.be();
    });

    it('should have the property tenant (base name: "tenant")', function() {
      // uncomment below and update the code to test the property tenant
      //var instance = new OtoroshiAdminApi.DataExporterConfigConfig();
      //expect(instance).to.be();
    });

    it('should have the property uri (base name: "uri")', function() {
      // uncomment below and update the code to test the property uri
      //var instance = new OtoroshiAdminApi.DataExporterConfigConfig();
      //expect(instance).to.be();
    });

    it('should have the property path (base name: "path")', function() {
      // uncomment below and update the code to test the property path
      //var instance = new OtoroshiAdminApi.DataExporterConfigConfig();
      //expect(instance).to.be();
    });

    it('should have the property to (base name: "to")', function() {
      // uncomment below and update the code to test the property to
      //var instance = new OtoroshiAdminApi.DataExporterConfigConfig();
      //expect(instance).to.be();
    });

    it('should have the property url (base name: "url")', function() {
      // uncomment below and update the code to test the property url
      //var instance = new OtoroshiAdminApi.DataExporterConfigConfig();
      //expect(instance).to.be();
    });

    it('should have the property apiKey (base name: "apiKey")', function() {
      // uncomment below and update the code to test the property apiKey
      //var instance = new OtoroshiAdminApi.DataExporterConfigConfig();
      //expect(instance).to.be();
    });

    it('should have the property domain (base name: "domain")', function() {
      // uncomment below and update the code to test the property domain
      //var instance = new OtoroshiAdminApi.DataExporterConfigConfig();
      //expect(instance).to.be();
    });

    it('should have the property eu (base name: "eu")', function() {
      // uncomment below and update the code to test the property eu
      //var instance = new OtoroshiAdminApi.DataExporterConfigConfig();
      //expect(instance).to.be();
    });

    it('should have the property apiKeyPrivate (base name: "apiKeyPrivate")', function() {
      // uncomment below and update the code to test the property apiKeyPrivate
      //var instance = new OtoroshiAdminApi.DataExporterConfigConfig();
      //expect(instance).to.be();
    });

    it('should have the property apiKeyPublic (base name: "apiKeyPublic")', function() {
      // uncomment below and update the code to test the property apiKeyPublic
      //var instance = new OtoroshiAdminApi.DataExporterConfigConfig();
      //expect(instance).to.be();
    });

    it('should have the property config (base name: "config")', function() {
      // uncomment below and update the code to test the property config
      //var instance = new OtoroshiAdminApi.DataExporterConfigConfig();
      //expect(instance).to.be();
    });

    it('should have the property ref (base name: "ref")', function() {
      // uncomment below and update the code to test the property ref
      //var instance = new OtoroshiAdminApi.DataExporterConfigConfig();
      //expect(instance).to.be();
    });

  });

}));
