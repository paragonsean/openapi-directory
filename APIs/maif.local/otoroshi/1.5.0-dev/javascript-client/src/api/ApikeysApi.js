/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiKey from '../model/ApiKey';
import Deleted from '../model/Deleted';
import Group from '../model/Group';
import PatchInner from '../model/PatchInner';
import Quotas from '../model/Quotas';

/**
* Apikeys service.
* @module api/ApikeysApi
* @version 1.5.0-dev
*/
export default class ApikeysApi {

    /**
    * Constructs a new ApikeysApi. 
    * @alias module:api/ApikeysApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the allApiKeys operation.
     * @callback module:api/ApikeysApi~allApiKeysCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ApiKey>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all api keys
     * Get all api keys
     * @param {module:api/ApikeysApi~allApiKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ApiKey>}
     */
    allApiKeys(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ApiKey];
      return this.apiClient.callApi(
        '/api/apikeys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiKey operation.
     * @callback module:api/ApikeysApi~apiKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an api key
     * Get an api key for a specified service descriptor
     * @param {String} serviceId The api key service id
     * @param {String} clientId the api key id
     * @param {module:api/ApikeysApi~apiKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiKey}
     */
    apiKey(serviceId, clientId, callback) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling apiKey");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling apiKey");
      }

      let pathParams = {
        'serviceId': serviceId,
        'clientId': clientId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiKey;
      return this.apiClient.callApi(
        '/api/services/{serviceId}/apikeys/{clientId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiKeyFromGroup operation.
     * @callback module:api/ApikeysApi~apiKeyFromGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an api key
     * Get an api key for a specified service group
     * @param {String} groupId The api key group id
     * @param {String} clientId the api key id
     * @param {module:api/ApikeysApi~apiKeyFromGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiKey}
     */
    apiKeyFromGroup(groupId, clientId, callback) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling apiKeyFromGroup");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling apiKeyFromGroup");
      }

      let pathParams = {
        'groupId': groupId,
        'clientId': clientId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiKey;
      return this.apiClient.callApi(
        '/api/groups/{groupId}/apikeys/{clientId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiKeyFromGroupQuotas operation.
     * @callback module:api/ApikeysApi~apiKeyFromGroupQuotasCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Quotas} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the quota state of an api key
     * Get the quota state of an api key
     * @param {String} groupId The api key group id
     * @param {String} clientId the api key id
     * @param {module:api/ApikeysApi~apiKeyFromGroupQuotasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Quotas}
     */
    apiKeyFromGroupQuotas(groupId, clientId, callback) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling apiKeyFromGroupQuotas");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling apiKeyFromGroupQuotas");
      }

      let pathParams = {
        'groupId': groupId,
        'clientId': clientId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Quotas;
      return this.apiClient.callApi(
        '/api/groups/{groupId}/apikeys/{clientId}/quotas', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiKeyGroup operation.
     * @callback module:api/ApikeysApi~apiKeyGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Group} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the group of an api key
     * Get the group of an api key
     * @param {String} serviceId The api key service id
     * @param {String} clientId the api key id
     * @param {module:api/ApikeysApi~apiKeyGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Group}
     */
    apiKeyGroup(serviceId, clientId, callback) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling apiKeyGroup");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling apiKeyGroup");
      }

      let pathParams = {
        'serviceId': serviceId,
        'clientId': clientId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Group;
      return this.apiClient.callApi(
        '/api/services/{serviceId}/apikeys/{clientId}/group', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiKeyQuotas operation.
     * @callback module:api/ApikeysApi~apiKeyQuotasCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Quotas} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the quota state of an api key
     * Get the quota state of an api key
     * @param {String} serviceId The api key service id
     * @param {String} clientId the api key id
     * @param {module:api/ApikeysApi~apiKeyQuotasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Quotas}
     */
    apiKeyQuotas(serviceId, clientId, callback) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling apiKeyQuotas");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling apiKeyQuotas");
      }

      let pathParams = {
        'serviceId': serviceId,
        'clientId': clientId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Quotas;
      return this.apiClient.callApi(
        '/api/services/{serviceId}/apikeys/{clientId}/quotas', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiKeys operation.
     * @callback module:api/ApikeysApi~apiKeysCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ApiKey>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all api keys for the group of a service
     * Get all api keys for the group of a service
     * @param {String} serviceId The api key service id
     * @param {module:api/ApikeysApi~apiKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ApiKey>}
     */
    apiKeys(serviceId, callback) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling apiKeys");
      }

      let pathParams = {
        'serviceId': serviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ApiKey];
      return this.apiClient.callApi(
        '/api/services/{serviceId}/apikeys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiKeysFromGroup operation.
     * @callback module:api/ApikeysApi~apiKeysFromGroupCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ApiKey>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all api keys for the group of a service
     * Get all api keys for the group of a service
     * @param {String} groupId The api key group id
     * @param {module:api/ApikeysApi~apiKeysFromGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ApiKey>}
     */
    apiKeysFromGroup(groupId, callback) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling apiKeysFromGroup");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ApiKey];
      return this.apiClient.callApi(
        '/api/groups/{groupId}/apikeys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createApiKey operation.
     * @callback module:api/ApikeysApi~createApiKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new api key for a service
     * 
     * @param {String} serviceId The api key service id
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiKey} [apiKey] 
     * @param {module:api/ApikeysApi~createApiKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiKey}
     */
    createApiKey(serviceId, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiKey'];
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling createApiKey");
      }

      let pathParams = {
        'serviceId': serviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiKey;
      return this.apiClient.callApi(
        '/api/services/{serviceId}/apikeys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createApiKeyFromGroup operation.
     * @callback module:api/ApikeysApi~createApiKeyFromGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new api key for a group
     * Create a new api key for a group
     * @param {String} groupId The api key group id
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiKey} [apiKey] 
     * @param {module:api/ApikeysApi~createApiKeyFromGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiKey}
     */
    createApiKeyFromGroup(groupId, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiKey'];
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling createApiKeyFromGroup");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiKey;
      return this.apiClient.callApi(
        '/api/groups/{groupId}/apikeys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteApiKey operation.
     * @callback module:api/ApikeysApi~deleteApiKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Deleted} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an api key
     * Delete an api key for a specified service descriptor
     * @param {String} serviceId The api key service id
     * @param {String} clientId the api key id
     * @param {module:api/ApikeysApi~deleteApiKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Deleted}
     */
    deleteApiKey(serviceId, clientId, callback) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling deleteApiKey");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling deleteApiKey");
      }

      let pathParams = {
        'serviceId': serviceId,
        'clientId': clientId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Deleted;
      return this.apiClient.callApi(
        '/api/services/{serviceId}/apikeys/{clientId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteApiKeyFromGroup operation.
     * @callback module:api/ApikeysApi~deleteApiKeyFromGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Deleted} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an api key
     * Delete an api key for a specified service group
     * @param {String} groupId The api key group id
     * @param {String} clientId the api key id
     * @param {module:api/ApikeysApi~deleteApiKeyFromGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Deleted}
     */
    deleteApiKeyFromGroup(groupId, clientId, callback) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling deleteApiKeyFromGroup");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling deleteApiKeyFromGroup");
      }

      let pathParams = {
        'groupId': groupId,
        'clientId': clientId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Deleted;
      return this.apiClient.callApi(
        '/api/groups/{groupId}/apikeys/{clientId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchApiKey operation.
     * @callback module:api/ApikeysApi~patchApiKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an api key with a diff
     * Update an api key for a specified service descriptor with a diff
     * @param {String} serviceId The api key service id
     * @param {String} clientId the api key id
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchInner>} [patchInner] 
     * @param {module:api/ApikeysApi~patchApiKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiKey}
     */
    patchApiKey(serviceId, clientId, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchInner'];
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling patchApiKey");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling patchApiKey");
      }

      let pathParams = {
        'serviceId': serviceId,
        'clientId': clientId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiKey;
      return this.apiClient.callApi(
        '/api/services/{serviceId}/apikeys/{clientId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchApiKeyFromGroup operation.
     * @callback module:api/ApikeysApi~patchApiKeyFromGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an api key with a diff
     * Update an api key for a specified service descriptor with a diff
     * @param {String} groupId The api key group id
     * @param {String} clientId the api key id
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchInner>} [patchInner] 
     * @param {module:api/ApikeysApi~patchApiKeyFromGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiKey}
     */
    patchApiKeyFromGroup(groupId, clientId, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchInner'];
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling patchApiKeyFromGroup");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling patchApiKeyFromGroup");
      }

      let pathParams = {
        'groupId': groupId,
        'clientId': clientId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiKey;
      return this.apiClient.callApi(
        '/api/groups/{groupId}/apikeys/{clientId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resetApiKeyFromGroupQuotas operation.
     * @callback module:api/ApikeysApi~resetApiKeyFromGroupQuotasCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Quotas} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset the quota state of an api key
     * Reset the quota state of an api key
     * @param {String} groupId The api key group id
     * @param {String} clientId the api key id
     * @param {module:api/ApikeysApi~resetApiKeyFromGroupQuotasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Quotas}
     */
    resetApiKeyFromGroupQuotas(groupId, clientId, callback) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling resetApiKeyFromGroupQuotas");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling resetApiKeyFromGroupQuotas");
      }

      let pathParams = {
        'groupId': groupId,
        'clientId': clientId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Quotas;
      return this.apiClient.callApi(
        '/api/groups/{groupId}/apikeys/{clientId}/quotas', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resetApiKeyQuotas operation.
     * @callback module:api/ApikeysApi~resetApiKeyQuotasCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Quotas} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset the quota state of an api key
     * Reset the quota state of an api key
     * @param {String} serviceId The api key service id
     * @param {String} clientId the api key id
     * @param {module:api/ApikeysApi~resetApiKeyQuotasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Quotas}
     */
    resetApiKeyQuotas(serviceId, clientId, callback) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling resetApiKeyQuotas");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling resetApiKeyQuotas");
      }

      let pathParams = {
        'serviceId': serviceId,
        'clientId': clientId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Quotas;
      return this.apiClient.callApi(
        '/api/services/{serviceId}/apikeys/{clientId}/quotas', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateApiKey operation.
     * @callback module:api/ApikeysApi~updateApiKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an api key
     * Update an api key for a specified service descriptor
     * @param {String} serviceId The api key service id
     * @param {String} clientId the api key id
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiKey} [apiKey] 
     * @param {module:api/ApikeysApi~updateApiKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiKey}
     */
    updateApiKey(serviceId, clientId, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiKey'];
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling updateApiKey");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling updateApiKey");
      }

      let pathParams = {
        'serviceId': serviceId,
        'clientId': clientId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiKey;
      return this.apiClient.callApi(
        '/api/services/{serviceId}/apikeys/{clientId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateApiKeyFromGroup operation.
     * @callback module:api/ApikeysApi~updateApiKeyFromGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an api key
     * Update an api key for a specified service group
     * @param {String} groupId The api key group id
     * @param {String} clientId the api key id
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiKey} [apiKey] 
     * @param {module:api/ApikeysApi~updateApiKeyFromGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiKey}
     */
    updateApiKeyFromGroup(groupId, clientId, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiKey'];
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling updateApiKeyFromGroup");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling updateApiKeyFromGroup");
      }

      let pathParams = {
        'groupId': groupId,
        'clientId': clientId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiKey;
      return this.apiClient.callApi(
        '/api/groups/{groupId}/apikeys/{clientId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
