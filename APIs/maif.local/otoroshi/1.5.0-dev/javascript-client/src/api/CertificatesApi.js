/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Certificate from '../model/Certificate';
import Deleted from '../model/Deleted';
import PatchInner from '../model/PatchInner';

/**
* Certificates service.
* @module api/CertificatesApi
* @version 1.5.0-dev
*/
export default class CertificatesApi {

    /**
    * Constructs a new CertificatesApi. 
    * @alias module:api/CertificatesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the allCerts operation.
     * @callback module:api/CertificatesApi~allCertsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Certificate>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all certificates
     * Get all certificates
     * @param {module:api/CertificatesApi~allCertsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Certificate>}
     */
    allCerts(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Certificate];
      return this.apiClient.callApi(
        '/api/certificates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createCert operation.
     * @callback module:api/CertificatesApi~createCertCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Certificate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create one certificate
     * Create one certificate
     * @param {Object} opts Optional parameters
     * @param {module:model/Certificate} [certificate] 
     * @param {module:api/CertificatesApi~createCertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Certificate}
     */
    createCert(opts, callback) {
      opts = opts || {};
      let postBody = opts['certificate'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Certificate;
      return this.apiClient.callApi(
        '/api/certificates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCert operation.
     * @callback module:api/CertificatesApi~deleteCertCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Deleted} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete one certificate by id
     * Delete one certificate by id
     * @param {String} id The certificate id
     * @param {module:api/CertificatesApi~deleteCertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Deleted}
     */
    deleteCert(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteCert");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Deleted;
      return this.apiClient.callApi(
        '/api/certificates/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the oneCert operation.
     * @callback module:api/CertificatesApi~oneCertCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Certificate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get one certificate by id
     * Get one certificate by id
     * @param {String} id The auth. config id
     * @param {module:api/CertificatesApi~oneCertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Certificate}
     */
    oneCert(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling oneCert");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Certificate;
      return this.apiClient.callApi(
        '/api/certificates/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchCert operation.
     * @callback module:api/CertificatesApi~patchCertCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Certificate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update one certificate by id
     * Update one certificate by id
     * @param {String} id The certificate id
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchInner>} [patchInner] 
     * @param {module:api/CertificatesApi~patchCertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Certificate}
     */
    patchCert(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchInner'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchCert");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Certificate;
      return this.apiClient.callApi(
        '/api/certificates/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putCert operation.
     * @callback module:api/CertificatesApi~putCertCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Certificate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update one certificate by id
     * Update one certificate by id
     * @param {String} id The certificate id
     * @param {Object} opts Optional parameters
     * @param {module:model/Certificate} [certificate] 
     * @param {module:api/CertificatesApi~putCertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Certificate}
     */
    putCert(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['certificate'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putCert");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Certificate;
      return this.apiClient.callApi(
        '/api/certificates/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
