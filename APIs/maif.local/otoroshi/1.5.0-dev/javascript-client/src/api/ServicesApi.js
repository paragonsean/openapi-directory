/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiKey from '../model/ApiKey';
import Deleted from '../model/Deleted';
import ErrorTemplate from '../model/ErrorTemplate';
import PatchInner from '../model/PatchInner';
import Service from '../model/Service';
import Target from '../model/Target';

/**
* Services service.
* @module api/ServicesApi
* @version 1.5.0-dev
*/
export default class ServicesApi {

    /**
    * Constructs a new ServicesApi. 
    * @alias module:api/ServicesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the allServices operation.
     * @callback module:api/ServicesApi~allServicesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Service>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all services
     * Get all services
     * @param {module:api/ServicesApi~allServicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Service>}
     */
    allServices(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Service];
      return this.apiClient.callApi(
        '/api/services', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createService operation.
     * @callback module:api/ServicesApi~createServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Service} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new service descriptor
     * Create a new service descriptor
     * @param {Object} opts Optional parameters
     * @param {module:model/Service} [service] 
     * @param {module:api/ServicesApi~createServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Service}
     */
    createService(opts, callback) {
      opts = opts || {};
      let postBody = opts['service'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Service;
      return this.apiClient.callApi(
        '/api/services', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createServiceTemplate operation.
     * @callback module:api/ServicesApi~createServiceTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ErrorTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a service descriptor error template
     * Update a service descriptor targets
     * @param {String} serviceId The service id
     * @param {Object} opts Optional parameters
     * @param {module:model/ErrorTemplate} [errorTemplate] 
     * @param {module:api/ServicesApi~createServiceTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ErrorTemplate}
     */
    createServiceTemplate(serviceId, opts, callback) {
      opts = opts || {};
      let postBody = opts['errorTemplate'];
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling createServiceTemplate");
      }

      let pathParams = {
        'serviceId': serviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ErrorTemplate;
      return this.apiClient.callApi(
        '/api/services/{serviceId}/template', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteService operation.
     * @callback module:api/ServicesApi~deleteServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Deleted} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a service descriptor
     * Delete a service descriptor
     * @param {String} serviceId The service id
     * @param {module:api/ServicesApi~deleteServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Deleted}
     */
    deleteService(serviceId, callback) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling deleteService");
      }

      let pathParams = {
        'serviceId': serviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Deleted;
      return this.apiClient.callApi(
        '/api/services/{serviceId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteServiceTemplate operation.
     * @callback module:api/ServicesApi~deleteServiceTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Deleted} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a service descriptor error template
     * Delete a service descriptor error template
     * @param {String} serviceId The service id
     * @param {module:api/ServicesApi~deleteServiceTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Deleted}
     */
    deleteServiceTemplate(serviceId, callback) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling deleteServiceTemplate");
      }

      let pathParams = {
        'serviceId': serviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Deleted;
      return this.apiClient.callApi(
        '/api/services/{serviceId}/template', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchService operation.
     * @callback module:api/ServicesApi~patchServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Service} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a service descriptor with a diff
     * Update a service descriptor with a diff
     * @param {String} serviceId The service id
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchInner>} [patchInner] 
     * @param {module:api/ServicesApi~patchServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Service}
     */
    patchService(serviceId, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchInner'];
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling patchService");
      }

      let pathParams = {
        'serviceId': serviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Service;
      return this.apiClient.callApi(
        '/api/services/{serviceId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the service operation.
     * @callback module:api/ServicesApi~serviceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Service} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a service descriptor
     * Get a service descriptor
     * @param {String} serviceId The service id
     * @param {module:api/ServicesApi~serviceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Service}
     */
    service(serviceId, callback) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling service");
      }

      let pathParams = {
        'serviceId': serviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Service;
      return this.apiClient.callApi(
        '/api/services/{serviceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serviceAddTarget operation.
     * @callback module:api/ServicesApi~serviceAddTargetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Target>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a target to a service descriptor
     * Add a target to a service descriptor
     * @param {String} serviceId The service id
     * @param {Object} opts Optional parameters
     * @param {module:model/Target} [target] 
     * @param {module:api/ServicesApi~serviceAddTargetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Target>}
     */
    serviceAddTarget(serviceId, opts, callback) {
      opts = opts || {};
      let postBody = opts['target'];
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling serviceAddTarget");
      }

      let pathParams = {
        'serviceId': serviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Target];
      return this.apiClient.callApi(
        '/api/services/{serviceId}/targets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serviceDeleteTarget operation.
     * @callback module:api/ServicesApi~serviceDeleteTargetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Target>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a service descriptor target
     * Delete a service descriptor target
     * @param {String} serviceId The service id
     * @param {module:api/ServicesApi~serviceDeleteTargetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Target>}
     */
    serviceDeleteTarget(serviceId, callback) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling serviceDeleteTarget");
      }

      let pathParams = {
        'serviceId': serviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Target];
      return this.apiClient.callApi(
        '/api/services/{serviceId}/targets', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serviceGroupServices operation.
     * @callback module:api/ServicesApi~serviceGroupServicesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ApiKey>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all services descriptor for a group
     * Get all services descriptor for a group
     * @param {String} serviceGroupId The service group id
     * @param {module:api/ServicesApi~serviceGroupServicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ApiKey>}
     */
    serviceGroupServices(serviceGroupId, callback) {
      let postBody = null;
      // verify the required parameter 'serviceGroupId' is set
      if (serviceGroupId === undefined || serviceGroupId === null) {
        throw new Error("Missing the required parameter 'serviceGroupId' when calling serviceGroupServices");
      }

      let pathParams = {
        'serviceGroupId': serviceGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ApiKey];
      return this.apiClient.callApi(
        '/api/groups/{serviceGroupId}/services', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serviceTargets operation.
     * @callback module:api/ServicesApi~serviceTargetsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Target>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a service descriptor targets
     * Get a service descriptor targets
     * @param {String} serviceId The service id
     * @param {module:api/ServicesApi~serviceTargetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Target>}
     */
    serviceTargets(serviceId, callback) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling serviceTargets");
      }

      let pathParams = {
        'serviceId': serviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Target];
      return this.apiClient.callApi(
        '/api/services/{serviceId}/targets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serviceTemplate operation.
     * @callback module:api/ServicesApi~serviceTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ErrorTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a service descriptor error template
     * Get a service descriptor error template
     * @param {String} serviceId The service id
     * @param {module:api/ServicesApi~serviceTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ErrorTemplate}
     */
    serviceTemplate(serviceId, callback) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling serviceTemplate");
      }

      let pathParams = {
        'serviceId': serviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ErrorTemplate;
      return this.apiClient.callApi(
        '/api/services/{serviceId}/template', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateService operation.
     * @callback module:api/ServicesApi~updateServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Service} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a service descriptor
     * Update a service descriptor
     * @param {String} serviceId The service id
     * @param {Object} opts Optional parameters
     * @param {module:model/Service} [service] 
     * @param {module:api/ServicesApi~updateServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Service}
     */
    updateService(serviceId, opts, callback) {
      opts = opts || {};
      let postBody = opts['service'];
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling updateService");
      }

      let pathParams = {
        'serviceId': serviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Service;
      return this.apiClient.callApi(
        '/api/services/{serviceId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateServiceTargets operation.
     * @callback module:api/ServicesApi~updateServiceTargetsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Target>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a service descriptor targets
     * Update a service descriptor targets
     * @param {String} serviceId The service id
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchInner>} [patchInner] 
     * @param {module:api/ServicesApi~updateServiceTargetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Target>}
     */
    updateServiceTargets(serviceId, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchInner'];
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling updateServiceTargets");
      }

      let pathParams = {
        'serviceId': serviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Target];
      return this.apiClient.callApi(
        '/api/services/{serviceId}/targets', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateServiceTemplate operation.
     * @callback module:api/ServicesApi~updateServiceTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ErrorTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an error template to a service descriptor
     * Update an error template to a service descriptor
     * @param {String} serviceId The service id
     * @param {Object} opts Optional parameters
     * @param {module:model/ErrorTemplate} [errorTemplate] 
     * @param {module:api/ServicesApi~updateServiceTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ErrorTemplate}
     */
    updateServiceTemplate(serviceId, opts, callback) {
      opts = opts || {};
      let postBody = opts['errorTemplate'];
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling updateServiceTemplate");
      }

      let pathParams = {
        'serviceId': serviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ErrorTemplate;
      return this.apiClient.callApi(
        '/api/services/{serviceId}/template', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
