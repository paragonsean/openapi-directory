/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Deleted from '../model/Deleted';
import PatchInner from '../model/PatchInner';
import Script from '../model/Script';
import ScriptCompilationResult from '../model/ScriptCompilationResult';

/**
* Scripts service.
* @module api/ScriptsApi
* @version 1.5.0-dev
*/
export default class ScriptsApi {

    /**
    * Constructs a new ScriptsApi. 
    * @alias module:api/ScriptsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the compileScript operation.
     * @callback module:api/ScriptsApi~compileScriptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScriptCompilationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Compile a script
     * Compile a script
     * @param {Object} opts Optional parameters
     * @param {module:model/Script} [script] 
     * @param {module:api/ScriptsApi~compileScriptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScriptCompilationResult}
     */
    compileScript(opts, callback) {
      opts = opts || {};
      let postBody = opts['script'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ScriptCompilationResult;
      return this.apiClient.callApi(
        '/api/scripts/_compile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createScript operation.
     * @callback module:api/ScriptsApi~createScriptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Script} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new script
     * Create a new script
     * @param {Object} opts Optional parameters
     * @param {module:model/Script} [script] 
     * @param {module:api/ScriptsApi~createScriptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Script}
     */
    createScript(opts, callback) {
      opts = opts || {};
      let postBody = opts['script'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Script;
      return this.apiClient.callApi(
        '/api/scripts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteScript operation.
     * @callback module:api/ScriptsApi~deleteScriptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Deleted} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a script
     * Delete a script
     * @param {String} scriptId The script id
     * @param {module:api/ScriptsApi~deleteScriptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Deleted}
     */
    deleteScript(scriptId, callback) {
      let postBody = null;
      // verify the required parameter 'scriptId' is set
      if (scriptId === undefined || scriptId === null) {
        throw new Error("Missing the required parameter 'scriptId' when calling deleteScript");
      }

      let pathParams = {
        'scriptId': scriptId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Deleted;
      return this.apiClient.callApi(
        '/api/scripts/{scriptId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findAllScripts operation.
     * @callback module:api/ScriptsApi~findAllScriptsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Script>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all scripts
     * Get all scripts
     * @param {module:api/ScriptsApi~findAllScriptsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Script>}
     */
    findAllScripts(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Script];
      return this.apiClient.callApi(
        '/api/scripts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findScriptById operation.
     * @callback module:api/ScriptsApi~findScriptByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Script} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a script
     * Get a script
     * @param {String} scriptId The script id
     * @param {module:api/ScriptsApi~findScriptByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Script}
     */
    findScriptById(scriptId, callback) {
      let postBody = null;
      // verify the required parameter 'scriptId' is set
      if (scriptId === undefined || scriptId === null) {
        throw new Error("Missing the required parameter 'scriptId' when calling findScriptById");
      }

      let pathParams = {
        'scriptId': scriptId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Script;
      return this.apiClient.callApi(
        '/api/scripts/{scriptId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchScript operation.
     * @callback module:api/ScriptsApi~patchScriptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Script} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a script with a diff
     * Update a script with a diff
     * @param {String} scriptId The script id
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchInner>} [patchInner] 
     * @param {module:api/ScriptsApi~patchScriptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Script}
     */
    patchScript(scriptId, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchInner'];
      // verify the required parameter 'scriptId' is set
      if (scriptId === undefined || scriptId === null) {
        throw new Error("Missing the required parameter 'scriptId' when calling patchScript");
      }

      let pathParams = {
        'scriptId': scriptId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Script;
      return this.apiClient.callApi(
        '/api/scripts/{scriptId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateScript operation.
     * @callback module:api/ScriptsApi~updateScriptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Script} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a script
     * Update a script
     * @param {String} scriptId The script id
     * @param {Object} opts Optional parameters
     * @param {module:model/Script} [script] 
     * @param {module:api/ScriptsApi~updateScriptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Script}
     */
    updateScript(scriptId, opts, callback) {
      opts = opts || {};
      let postBody = opts['script'];
      // verify the required parameter 'scriptId' is set
      if (scriptId === undefined || scriptId === null) {
        throw new Error("Missing the required parameter 'scriptId' when calling updateScript");
      }

      let pathParams = {
        'scriptId': scriptId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Script;
      return this.apiClient.callApi(
        '/api/scripts/{scriptId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
