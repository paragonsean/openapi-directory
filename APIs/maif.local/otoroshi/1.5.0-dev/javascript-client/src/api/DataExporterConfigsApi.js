/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateBulkDataExporterConfigs200ResponseInner from '../model/CreateBulkDataExporterConfigs200ResponseInner';
import DataExporterConfig from '../model/DataExporterConfig';
import DeletebulkDataExporterConfig200ResponseInner from '../model/DeletebulkDataExporterConfig200ResponseInner';
import Deleted from '../model/Deleted';
import PatchInner from '../model/PatchInner';
import UpdateBulkDataExporterConfig200ResponseInner from '../model/UpdateBulkDataExporterConfig200ResponseInner';

/**
* DataExporterConfigs service.
* @module api/DataExporterConfigsApi
* @version 1.5.0-dev
*/
export default class DataExporterConfigsApi {

    /**
    * Constructs a new DataExporterConfigsApi. 
    * @alias module:api/DataExporterConfigsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createBulkDataExporterConfigs operation.
     * @callback module:api/DataExporterConfigsApi~createBulkDataExporterConfigsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CreateBulkDataExporterConfigs200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new data exporter configs
     * Create a new data exporter configs
     * @param {Object} opts Optional parameters
     * @param {module:model/DataExporterConfig} [dataExporterConfig] 
     * @param {module:api/DataExporterConfigsApi~createBulkDataExporterConfigsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CreateBulkDataExporterConfigs200ResponseInner>}
     */
    createBulkDataExporterConfigs(opts, callback) {
      opts = opts || {};
      let postBody = opts['dataExporterConfig'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = ['application/ndjson'];
      let accepts = ['application/json'];
      let returnType = [CreateBulkDataExporterConfigs200ResponseInner];
      return this.apiClient.callApi(
        '/api/data-exporter-configs/_bulk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDataExporterConfig operation.
     * @callback module:api/DataExporterConfigsApi~createDataExporterConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataExporterConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new data exporter config
     * Create a new data exporter config
     * @param {Object} opts Optional parameters
     * @param {module:model/DataExporterConfig} [dataExporterConfig] 
     * @param {module:api/DataExporterConfigsApi~createDataExporterConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataExporterConfig}
     */
    createDataExporterConfig(opts, callback) {
      opts = opts || {};
      let postBody = opts['dataExporterConfig'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DataExporterConfig;
      return this.apiClient.callApi(
        '/api/data-exporter-configs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dataExporterTemplate operation.
     * @callback module:api/DataExporterConfigsApi~dataExporterTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataExporterConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all data exporter configs
     * Get all data exporter configs
     * @param {Object} opts Optional parameters
     * @param {String} [type] The data exporter config type
     * @param {module:api/DataExporterConfigsApi~dataExporterTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataExporterConfig}
     */
    dataExporterTemplate(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'type': opts['type']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DataExporterConfig;
      return this.apiClient.callApi(
        '/api/data-exporter-configs/_template', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDataExporterConfig operation.
     * @callback module:api/DataExporterConfigsApi~deleteDataExporterConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Deleted} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a data exporter config
     * Delete a data exporter config
     * @param {String} dataExporterConfigId The data exporter config id
     * @param {module:api/DataExporterConfigsApi~deleteDataExporterConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Deleted}
     */
    deleteDataExporterConfig(dataExporterConfigId, callback) {
      let postBody = null;
      // verify the required parameter 'dataExporterConfigId' is set
      if (dataExporterConfigId === undefined || dataExporterConfigId === null) {
        throw new Error("Missing the required parameter 'dataExporterConfigId' when calling deleteDataExporterConfig");
      }

      let pathParams = {
        'dataExporterConfigId': dataExporterConfigId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Deleted;
      return this.apiClient.callApi(
        '/api/data-exporter-configs/{dataExporterConfigId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletebulkDataExporterConfig operation.
     * @callback module:api/DataExporterConfigsApi~deletebulkDataExporterConfigCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DeletebulkDataExporterConfig200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a data exporter config
     * Delete a data exporter config
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchInner>} [patchInner] 
     * @param {module:api/DataExporterConfigsApi~deletebulkDataExporterConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DeletebulkDataExporterConfig200ResponseInner>}
     */
    deletebulkDataExporterConfig(opts, callback) {
      opts = opts || {};
      let postBody = opts['patchInner'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = ['application/ndjson'];
      let accepts = ['application/json'];
      let returnType = [DeletebulkDataExporterConfig200ResponseInner];
      return this.apiClient.callApi(
        '/api/data-exporter-configs/_bulk', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findAllDataExporters operation.
     * @callback module:api/DataExporterConfigsApi~findAllDataExportersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DataExporterConfig>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all data exporter configs
     * Get all data exporter configs
     * @param {module:api/DataExporterConfigsApi~findAllDataExportersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DataExporterConfig>}
     */
    findAllDataExporters(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DataExporterConfig];
      return this.apiClient.callApi(
        '/api/data-exporter-configs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findDataExporterConfigById operation.
     * @callback module:api/DataExporterConfigsApi~findDataExporterConfigByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataExporterConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a data exporter config
     * Get a data exporter config
     * @param {String} dataExporterConfigId The data exporter config id
     * @param {module:api/DataExporterConfigsApi~findDataExporterConfigByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataExporterConfig}
     */
    findDataExporterConfigById(dataExporterConfigId, callback) {
      let postBody = null;
      // verify the required parameter 'dataExporterConfigId' is set
      if (dataExporterConfigId === undefined || dataExporterConfigId === null) {
        throw new Error("Missing the required parameter 'dataExporterConfigId' when calling findDataExporterConfigById");
      }

      let pathParams = {
        'dataExporterConfigId': dataExporterConfigId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DataExporterConfig;
      return this.apiClient.callApi(
        '/api/data-exporter-configs/{dataExporterConfigId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchBulkDataExporterConfig operation.
     * @callback module:api/DataExporterConfigsApi~patchBulkDataExporterConfigCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UpdateBulkDataExporterConfig200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a data exporter configs with a diff
     * Update a data exporter configs with a diff
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchInner>} [patchInner] 
     * @param {module:api/DataExporterConfigsApi~patchBulkDataExporterConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UpdateBulkDataExporterConfig200ResponseInner>}
     */
    patchBulkDataExporterConfig(opts, callback) {
      opts = opts || {};
      let postBody = opts['patchInner'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = ['application/ndjson'];
      let accepts = ['application/json'];
      let returnType = [UpdateBulkDataExporterConfig200ResponseInner];
      return this.apiClient.callApi(
        '/api/data-exporter-configs/_bulk', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchDataExporterConfig operation.
     * @callback module:api/DataExporterConfigsApi~patchDataExporterConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataExporterConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a data exporter config with a diff
     * Update a data exporter config with a diff
     * @param {String} dataExporterConfigId The data exporter config id
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchInner>} [patchInner] 
     * @param {module:api/DataExporterConfigsApi~patchDataExporterConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataExporterConfig}
     */
    patchDataExporterConfig(dataExporterConfigId, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchInner'];
      // verify the required parameter 'dataExporterConfigId' is set
      if (dataExporterConfigId === undefined || dataExporterConfigId === null) {
        throw new Error("Missing the required parameter 'dataExporterConfigId' when calling patchDataExporterConfig");
      }

      let pathParams = {
        'dataExporterConfigId': dataExporterConfigId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DataExporterConfig;
      return this.apiClient.callApi(
        '/api/data-exporter-configs/{dataExporterConfigId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBulkDataExporterConfig operation.
     * @callback module:api/DataExporterConfigsApi~updateBulkDataExporterConfigCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UpdateBulkDataExporterConfig200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a data exporter configs
     * Update a data exporter configs
     * @param {Object} opts Optional parameters
     * @param {module:model/DataExporterConfig} [dataExporterConfig] 
     * @param {module:api/DataExporterConfigsApi~updateBulkDataExporterConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UpdateBulkDataExporterConfig200ResponseInner>}
     */
    updateBulkDataExporterConfig(opts, callback) {
      opts = opts || {};
      let postBody = opts['dataExporterConfig'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = ['application/ndjson'];
      let accepts = ['application/json'];
      let returnType = [UpdateBulkDataExporterConfig200ResponseInner];
      return this.apiClient.callApi(
        '/api/data-exporter-configs/_bulk', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDataExporterConfig operation.
     * @callback module:api/DataExporterConfigsApi~updateDataExporterConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataExporterConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a data exporter config
     * Update a data exporter config
     * @param {String} dataExporterConfigId The data exporter config id
     * @param {Object} opts Optional parameters
     * @param {module:model/DataExporterConfig} [dataExporterConfig] 
     * @param {module:api/DataExporterConfigsApi~updateDataExporterConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataExporterConfig}
     */
    updateDataExporterConfig(dataExporterConfigId, opts, callback) {
      opts = opts || {};
      let postBody = opts['dataExporterConfig'];
      // verify the required parameter 'dataExporterConfigId' is set
      if (dataExporterConfigId === undefined || dataExporterConfigId === null) {
        throw new Error("Missing the required parameter 'dataExporterConfigId' when calling updateDataExporterConfig");
      }

      let pathParams = {
        'dataExporterConfigId': dataExporterConfigId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DataExporterConfig;
      return this.apiClient.callApi(
        '/api/data-exporter-configs/{dataExporterConfigId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
