/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Deleted from '../model/Deleted';
import FindAllGlobalAuthModules200ResponseInner from '../model/FindAllGlobalAuthModules200ResponseInner';
import PatchInner from '../model/PatchInner';

/**
* AuthConfig service.
* @module api/AuthConfigApi
* @version 1.5.0-dev
*/
export default class AuthConfigApi {

    /**
    * Constructs a new AuthConfigApi. 
    * @alias module:api/AuthConfigApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createGlobalAuthModule operation.
     * @callback module:api/AuthConfigApi~createGlobalAuthModuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FindAllGlobalAuthModules200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create one global auth. module config
     * Create one global auth. module config
     * @param {Object} opts Optional parameters
     * @param {module:model/FindAllGlobalAuthModules200ResponseInner} [findAllGlobalAuthModules200ResponseInner] 
     * @param {module:api/AuthConfigApi~createGlobalAuthModuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FindAllGlobalAuthModules200ResponseInner}
     */
    createGlobalAuthModule(opts, callback) {
      opts = opts || {};
      let postBody = opts['findAllGlobalAuthModules200ResponseInner'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FindAllGlobalAuthModules200ResponseInner;
      return this.apiClient.callApi(
        '/api/auths', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteGlobalAuthModule operation.
     * @callback module:api/AuthConfigApi~deleteGlobalAuthModuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Deleted} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete one global auth. module config
     * Delete one global auth. module config
     * @param {String} id The auth. config id id
     * @param {module:api/AuthConfigApi~deleteGlobalAuthModuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Deleted}
     */
    deleteGlobalAuthModule(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteGlobalAuthModule");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Deleted;
      return this.apiClient.callApi(
        '/api/auths/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findAllGlobalAuthModules operation.
     * @callback module:api/AuthConfigApi~findAllGlobalAuthModulesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FindAllGlobalAuthModules200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all global auth. module configs
     * Get all global auth. module configs
     * @param {module:api/AuthConfigApi~findAllGlobalAuthModulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FindAllGlobalAuthModules200ResponseInner>}
     */
    findAllGlobalAuthModules(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FindAllGlobalAuthModules200ResponseInner];
      return this.apiClient.callApi(
        '/api/auths', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findGlobalAuthModuleById operation.
     * @callback module:api/AuthConfigApi~findGlobalAuthModuleByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FindAllGlobalAuthModules200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get one global auth. module configs
     * Get one global auth. module configs
     * @param {String} id The auth. config id
     * @param {module:api/AuthConfigApi~findGlobalAuthModuleByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FindAllGlobalAuthModules200ResponseInner}
     */
    findGlobalAuthModuleById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling findGlobalAuthModuleById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FindAllGlobalAuthModules200ResponseInner;
      return this.apiClient.callApi(
        '/api/auths/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchGlobalAuthModule operation.
     * @callback module:api/AuthConfigApi~patchGlobalAuthModuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FindAllGlobalAuthModules200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update one global auth. module config
     * Update one global auth. module config
     * @param {String} id The auth. config id
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchInner>} [patchInner] 
     * @param {module:api/AuthConfigApi~patchGlobalAuthModuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FindAllGlobalAuthModules200ResponseInner}
     */
    patchGlobalAuthModule(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchInner'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchGlobalAuthModule");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FindAllGlobalAuthModules200ResponseInner;
      return this.apiClient.callApi(
        '/api/auths/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateGlobalAuthModule operation.
     * @callback module:api/AuthConfigApi~updateGlobalAuthModuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FindAllGlobalAuthModules200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update one global auth. module config
     * Update one global auth. module config
     * @param {String} id The auth. config id
     * @param {Object} opts Optional parameters
     * @param {module:model/FindAllGlobalAuthModules200ResponseInner} [findAllGlobalAuthModules200ResponseInner] 
     * @param {module:api/AuthConfigApi~updateGlobalAuthModuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FindAllGlobalAuthModules200ResponseInner}
     */
    updateGlobalAuthModule(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['findAllGlobalAuthModules200ResponseInner'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateGlobalAuthModule");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FindAllGlobalAuthModules200ResponseInner;
      return this.apiClient.callApi(
        '/api/auths/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
