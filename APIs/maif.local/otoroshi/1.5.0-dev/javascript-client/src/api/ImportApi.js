/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Done from '../model/Done';
import ImportExport from '../model/ImportExport';

/**
* Import service.
* @module api/ImportApi
* @version 1.5.0-dev
*/
export default class ImportApi {

    /**
    * Constructs a new ImportApi. 
    * @alias module:api/ImportApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the fullExport operation.
     * @callback module:api/ImportApi~fullExportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImportExport} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export the full state of Otoroshi
     * Export the full state of Otoroshi
     * @param {module:api/ImportApi~fullExportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImportExport}
     */
    fullExport(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ImportExport;
      return this.apiClient.callApi(
        '/api/otoroshi.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fullImport operation.
     * @callback module:api/ImportApi~fullImportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Done} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import the full state of Otoroshi
     * Import the full state of Otoroshi
     * @param {Object} opts Optional parameters
     * @param {module:model/ImportExport} [importExport] 
     * @param {module:api/ImportApi~fullImportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Done}
     */
    fullImport(opts, callback) {
      opts = opts || {};
      let postBody = opts['importExport'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Done;
      return this.apiClient.callApi(
        '/api/otoroshi.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fullImportFromFile operation.
     * @callback module:api/ImportApi~fullImportFromFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Done} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import the full state of Otoroshi as a file
     * Import the full state of Otoroshi as a file
     * @param {Object} opts Optional parameters
     * @param {module:model/ImportExport} [importExport] 
     * @param {module:api/ImportApi~fullImportFromFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Done}
     */
    fullImportFromFile(opts, callback) {
      opts = opts || {};
      let postBody = opts['importExport'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Done;
      return this.apiClient.callApi(
        '/api/import', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
