/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Deleted from '../model/Deleted';
import GlobalJwtVerifier from '../model/GlobalJwtVerifier';
import PatchInner from '../model/PatchInner';

/**
* JwtVerifiers service.
* @module api/JwtVerifiersApi
* @version 1.5.0-dev
*/
export default class JwtVerifiersApi {

    /**
    * Constructs a new JwtVerifiersApi. 
    * @alias module:api/JwtVerifiersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createGlobalJwtVerifier operation.
     * @callback module:api/JwtVerifiersApi~createGlobalJwtVerifierCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GlobalJwtVerifier} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create one global JWT verifiers
     * Create one global JWT verifiers
     * @param {Object} opts Optional parameters
     * @param {module:model/GlobalJwtVerifier} [globalJwtVerifier] 
     * @param {module:api/JwtVerifiersApi~createGlobalJwtVerifierCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GlobalJwtVerifier}
     */
    createGlobalJwtVerifier(opts, callback) {
      opts = opts || {};
      let postBody = opts['globalJwtVerifier'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GlobalJwtVerifier;
      return this.apiClient.callApi(
        '/api/verifiers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteGlobalJwtVerifier operation.
     * @callback module:api/JwtVerifiersApi~deleteGlobalJwtVerifierCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Deleted} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete one global JWT verifiers
     * Delete one global JWT verifiers
     * @param {String} verifierId The jwt verifier id
     * @param {module:api/JwtVerifiersApi~deleteGlobalJwtVerifierCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Deleted}
     */
    deleteGlobalJwtVerifier(verifierId, callback) {
      let postBody = null;
      // verify the required parameter 'verifierId' is set
      if (verifierId === undefined || verifierId === null) {
        throw new Error("Missing the required parameter 'verifierId' when calling deleteGlobalJwtVerifier");
      }

      let pathParams = {
        'verifierId': verifierId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Deleted;
      return this.apiClient.callApi(
        '/api/verifiers/{verifierId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findAllGlobalJwtVerifiers operation.
     * @callback module:api/JwtVerifiersApi~findAllGlobalJwtVerifiersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GlobalJwtVerifier>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all global JWT verifiers
     * Get all global JWT verifiers
     * @param {module:api/JwtVerifiersApi~findAllGlobalJwtVerifiersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GlobalJwtVerifier>}
     */
    findAllGlobalJwtVerifiers(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GlobalJwtVerifier];
      return this.apiClient.callApi(
        '/api/verifiers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findGlobalJwtVerifiersById operation.
     * @callback module:api/JwtVerifiersApi~findGlobalJwtVerifiersByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GlobalJwtVerifier} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get one global JWT verifiers
     * Get one global JWT verifiers
     * @param {String} verifierId The jwt verifier id
     * @param {module:api/JwtVerifiersApi~findGlobalJwtVerifiersByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GlobalJwtVerifier}
     */
    findGlobalJwtVerifiersById(verifierId, callback) {
      let postBody = null;
      // verify the required parameter 'verifierId' is set
      if (verifierId === undefined || verifierId === null) {
        throw new Error("Missing the required parameter 'verifierId' when calling findGlobalJwtVerifiersById");
      }

      let pathParams = {
        'verifierId': verifierId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GlobalJwtVerifier;
      return this.apiClient.callApi(
        '/api/verifiers/{verifierId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchGlobalJwtVerifier operation.
     * @callback module:api/JwtVerifiersApi~patchGlobalJwtVerifierCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GlobalJwtVerifier} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update one global JWT verifiers
     * Update one global JWT verifiers
     * @param {String} verifierId The jwt verifier id
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchInner>} [patchInner] 
     * @param {module:api/JwtVerifiersApi~patchGlobalJwtVerifierCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GlobalJwtVerifier}
     */
    patchGlobalJwtVerifier(verifierId, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchInner'];
      // verify the required parameter 'verifierId' is set
      if (verifierId === undefined || verifierId === null) {
        throw new Error("Missing the required parameter 'verifierId' when calling patchGlobalJwtVerifier");
      }

      let pathParams = {
        'verifierId': verifierId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GlobalJwtVerifier;
      return this.apiClient.callApi(
        '/api/verifiers/{verifierId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateGlobalJwtVerifier operation.
     * @callback module:api/JwtVerifiersApi~updateGlobalJwtVerifierCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GlobalJwtVerifier} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update one global JWT verifiers
     * Update one global JWT verifiers
     * @param {String} verifierId The jwt verifier id
     * @param {Object} opts Optional parameters
     * @param {module:model/GlobalJwtVerifier} [globalJwtVerifier] 
     * @param {module:api/JwtVerifiersApi~updateGlobalJwtVerifierCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GlobalJwtVerifier}
     */
    updateGlobalJwtVerifier(verifierId, opts, callback) {
      opts = opts || {};
      let postBody = opts['globalJwtVerifier'];
      // verify the required parameter 'verifierId' is set
      if (verifierId === undefined || verifierId === null) {
        throw new Error("Missing the required parameter 'verifierId' when calling updateGlobalJwtVerifier");
      }

      let pathParams = {
        'verifierId': verifierId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GlobalJwtVerifier;
      return this.apiClient.callApi(
        '/api/verifiers/{verifierId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
